<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-394043">
				<div id="div-comment-394043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394043">
			June 22, 2006 at 10:10 am</a>		</div>

		<p>Events: Bad?</p>
<div CLASS=post>[<i>Events: Different. Read that last paragraph again. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-394063">
				<div id="div-comment-394063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394063">
			June 22, 2006 at 10:26 am</a>		</div>

		<p>Heh. &nbsp;I&#8217;ve looked at the Event semaphore api for years and thought that whoever designed it did not understand how it might be used.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-394083">
				<div id="div-comment-394083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Maks Verver</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394083">
			June 22, 2006 at 10:29 am</a>		</div>

		<p>I&#8217;m confused &#8211; the topic title suggests this post is about the difference between manual-reset and auto-reset, but as far as I can tell the problem described occurs with manual-reset events as well. </p>
<p>If the point is to use the right tool for the job, I agree, but why did you pick the exact example (producer/consumer pattern) that is taught in every course and tutorial on concurrent programming? Anyone familiar with the subject should immediately recognize your proposed algorithm as wrong, and others should probably take a basic course before even thinking about messing with synchronization primitives. </p>
<p>Maybe a bit more obscure example would have been more helpful to advanced programmers. This post seems to cater more to those Java programmers who think they can solve concurrency problems by slapping &#8216;synchronized&#8217; in front of every method definition (and I&#8217;m sure there is an equivalent anti-pattern Windows programmers like to use).</p>
<div CLASS=post>[<i>Actually the topic title sets up the theme: Auto-reset events vs. semaphores. I don&#8217;t see how you figure manual-reset events would figure into it, since they aren&#8217;t even mentioned in the title! It may be obvious to you that using events in this way is wrong, but I see people doing it all the time. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-394103">
				<div id="div-comment-394103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394103">
			June 22, 2006 at 10:48 am</a>		</div>

		<p>Yep, producer-consumer needs two semaphores (one whose value corresponds to the number of items in the queue, and one whose value corresponds to the number of free spaces in the queue). &nbsp;The producer waits on the second semaphore, inserts its data into the queue (because now there&#8217;s room), then signals the first one. &nbsp;The consumer waits on the first semaphore, takes an item out of the queue (because now there&#8217;s one in it), and signals the second one.</p>
<p>(Actually there might be a mutex involved in the correct implementation too, I don&#8217;t remember. &nbsp;But just having one semaphore will definitely never work.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis even thread-even depth-1" id="comment-394153">
				<div id="div-comment-394153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394153">
			June 22, 2006 at 11:50 am</a>		</div>

		<p>Semaphores make sense when you need to maintain a count, but there is value in Events too. &nbsp;E.g., Producer sets the event when there is work to be done, Consumer consumes the (possibly auto-reset) event and performs as much work as there is to be done.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-394233">
				<div id="div-comment-394233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394233">
			June 22, 2006 at 12:44 pm</a>		</div>

		<p>Maks: this scheme only works when there&#8217;s only one consumer thread.</p>
<p>If that&#8217;s not a problem, the event is a slightly lighter-weight object than the semaphore.</p>
<p>I use this pattern to model a keyboard buffer for a DOS-emulation library. The event is only ever set or reset within a critical region, governed by a CRITICAL_SECTION object. The producer sets the event when there are keys available; the consumer clears it when it removes the last keypress from the buffer. The critical section protects the buffer itself as well as the setting of the event.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-394323">
				<div id="div-comment-394323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394323">
			June 22, 2006 at 1:36 pm</a>		</div>

		<p>In maybe 10 years of programming under NT, I found that the synchronization event (Win32: &#8216;auto-reset&#8217; event) was generally the one you needed to use, and it worked without extra mechanism. &nbsp;The notification event (Win32: &#8216;manual-reset&#8217; almost always needed extra scaffolding to avoid race hazards,</p>
<p>These days, I also program under Linux using pthreads, and I miss the simplicity of the NT synchronization event object (you need at least a condition variable and a mutex in order to implemented a synch event).</p>
<p>The problem with your example is that you&#8217;re apparently treating a signalled event as meaning &quot;there is one item of work&quot;, whereas its meaning should be &quot;there may be some work to do&quot;.</p>
<p>I&#8217;m too lazy to &nbsp;actually write the code now, but I&#8217;d guess that all you need is to consume all the work whenever you wake up, and pay careful attention to the ordering of &quot;add work item&quot; and signalling the event.</p>
<p>So, yeah, know your tools.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-394333">
				<div id="div-comment-394333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rancher</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394333">
			June 22, 2006 at 1:43 pm</a>		</div>

		<p>Mike, that sounds like a condition variable. Which is easy to get wrong.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-394373">
				<div id="div-comment-394373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rancher</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394373">
			June 22, 2006 at 1:48 pm</a>		</div>

		<p>Dave, I applaud your KISS aproach but in a multi-cpu or multi core you want work to be shared by several consumer threads. So I think a semaphore is still a better choice in general.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-394393">
				<div id="div-comment-394393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394393">
			June 22, 2006 at 1:57 pm</a>		</div>

		<p>Sure, if the problem is a work queue with multithread consumers, then regardless of the CPU count, a semaphore is the tool for the job, with the &#8216;count&#8217; of the semaphore meaning &#8216;number of items of work available&#8217;.</p>
<p>But I&#8217;ve certainly used auto-reset events many more times than I&#8217;ve used semaphores.</p>
<p>Thus, depending on what you mean by &#8216;in general&#8217;, my experience doesn&#8217;t match yours.</p>
<p>But this is silly &#8211; there&#8217;s no point in trying to decide which of the two is &#8216;better&#8217;. &nbsp;My points boil down to two things: (1) for appropriately-defined tasks, I find auto-reset events easy, contrary to the claim in the topic. (2) the example, as written in the topic, can be implemented well with an auto-reset event.</p>
<p>I leave it unstated whether the example reflects reality :-)</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-394443">
				<div id="div-comment-394443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Coderjoe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394443">
			June 22, 2006 at 2:58 pm</a>		</div>

		<p>The only way to prevent the race condition presented in the topic, while still using auto-reset events, would be to have two events. The first one is set by the producer to say that there is work to do, and the other is set by the consumer to let the producer know that the work buffer is empty and it is ok to add a new item to it. In this regard, it would pretty much be like a pair of semaphores which can only be 0 or 1 and a single work buffer, similar to what BryanK mentions in <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/06/22/642849.aspx#642908" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/06/22/642849.aspx#642908</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-394223">
				<div id="div-comment-394223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394223">
			June 22, 2006 at 12:41 pm</a>		</div>

		<p>Aaron Margosis: But that will only ever work if there&#8217;s never more than one item of work to be done. &nbsp;(Not one at a time, though. &nbsp;One, period. &nbsp;The second work item could be lost.) &nbsp;In *any* producer-consumer scenario, you *MUST* keep a count. &nbsp;Otherwise you lose work items.</p>
<p>(And this is exactly what Raymond&#8217;s article said &#8212; it details exactly what&#8217;s wrong with your proposition, if more than one item of work is required.)</p>
<p>There is value in having an event, but only in a situation where you really don&#8217;t need to keep track of a count. &nbsp;(In other words, not in a producer-consumer scenario, and not in a lot of other scenarios either.) &nbsp;One time I&#8217;ve used an event is when I spawned off a thread to handle receiving data from a serial port or a network socket, but the port/socket wasn&#8217;t open when the thread spawned for some reason. &nbsp;I set up an event to signal the receive thread that the socket or port was opened and set up.</p>
<p>But that only required a count of 1 (the event only happened once).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-394633">
				<div id="div-comment-394633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394633">
			June 22, 2006 at 8:50 pm</a>		</div>

		<p>I agree with Caliban &#8212; that&#8217;s the most common implementation that I&#8217;ve seen. &nbsp;And it works just fine. &nbsp;Sure, occasionally your consumer wakes up when there&#8217;s nothing to do (because of a race condition), but that&#8217;s better than not waking up when it needs to. &nbsp;And all the work gets done in a timely fashion.</p>
<p>Implementing it with manual-reset events prevents the spurious-wakeup problem, but gives you the race condition where the producer sets the event just prior to the consumer resetting it, and you&#8217;ve just lost a wakeup call. &nbsp;That&#8217;s much worse, and requires more work to prevent.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-394693">
				<div id="div-comment-394693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394693">
			June 22, 2006 at 11:52 pm</a>		</div>

		<p>As long as you aren&#8217;t worried about completely optimal behaviour, the auto-reset works even with a multi-threaded consumer model.</p>
<p>Just have the woken consumer set the event if there&#8217;s more work to do before actually doing the work. Assuming that the work time is significant or involves some kind of IO and concurrency is more important than straight processing time. Also have the consumers check the queue before going back to sleep on the event.</p>
<p>Again, not optimal, but you won&#8217;t miss work and it&#8217;s very easy to program and understand. I haven&#8217;t actually profiled it, but I&#8217;m guessing that locking a critical section and checking a flag or count variable and unlocking is probably faster than waiting on a kernel event object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-394753">
				<div id="div-comment-394753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sarathc.wordpress.com/2006/06/23/the-gotcha-with-auto-reset-event/' rel='external nofollow' class='url'>Sharing my thoughts&#8230; &raquo; Blog Archive &raquo; The Gotcha With Auto Reset Event</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394753">
			June 23, 2006 at 1:03 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://sarathc.wordpress.com/2006/06/23/the-gotcha-with-auto-reset-event/" rel="nofollow">http://sarathc.wordpress.com/2006/06/23/the-gotcha-with-auto-reset-event/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-394533">
				<div id="div-comment-394533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://www.darklock.com/blog/' rel='external nofollow' class='url'>Caliban Darklock</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394533">
			June 22, 2006 at 6:08 pm</a>		</div>

		<p>I think the problem here isn&#8217;t with the auto-reset so much as with the consumer. The consumer should attempt to consume everything in the queue. If, while it is consuming items from the queue, more items are added &#8211; it will still consume them. (Thread synchronisation is an issue here.) </p>
<p>However, once it has consumed everything, it will wait and be awoken immediately even though it has already consumed the items that were added when the event was set. So it needs to detect that there is no work and wait again. </p>
<p>This is not optimal. The optimal scenario is that the consumer consumes all available objects, then *manually* resets the event and waits on it when it runs out. This prevents waking up to an empty queue, so the consumer always has at least one item to consume. </p>
<p>I don&#8217;t think the producer/consumer pattern is the right one to use with auto-reset events, but a comment doesn&#8217;t seem like the right place to provide a different example. ;)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-394803">
				<div id="div-comment-394803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-394803">
			June 23, 2006 at 4:28 am</a>		</div>

		<p>Thursday, June 22, 2006 6:08 PM by Caliban Darklock<br />
<br />&gt; The optimal scenario is that the consumer<br />
<br />&gt; consumes all available objects, then<br />
<br />&gt; *manually* resets the event and waits on it<br />
<br />&gt; when it runs out.</p>
<p>That produces a race.</p>
<p>Your first two paragraphs described the solution to the race that your third paragraph would create. &nbsp;Sure a working solution is less optimal than a non-working solution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-395363">
				<div id="div-comment-395363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-395363">
			June 25, 2006 at 12:31 am</a>		</div>

		<p>I avoid this problem by implementing the consumer&#8217;s &quot;do work&quot; step as</p>
<p>while (work_to_do()) do_work();</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-395443">
				<div id="div-comment-395443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-395443">
			June 26, 2006 at 9:46 am</a>		</div>

		<p>Steve &#8212; no, there&#8217;s a race condition there. &nbsp;You have no locking whatsoever in that code. &nbsp;;-) &nbsp;(And even if you do have locking inside work_to_do() and do_work(), you need a lock across both of them, to prevent someone from modifying the queue between the two calls.)</p>
<p>It&#8217;s amazing how many people try to re-invent things that have been studied to death already (in this case, the producer-consumer problem).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-395743">
				<div id="div-comment-395743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-395743">
			June 26, 2006 at 5:05 pm</a>		</div>

		<p>BryanK, it&#8217;s pseudocode! &nbsp;You might as well have complained that I didn&#8217;t define main().</p>
<p>Obviously you need to retrieve work items in a way that avoids race conditions.</p>
<p>How am I &quot;reinventing&quot; the producer-consumer problem?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-395923">
				<div id="div-comment-395923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-395923">
			June 27, 2006 at 9:20 am</a>		</div>

		<p>You&#8217;re reinventing the solution, not the problem. &nbsp;(Misspoke there, sorry.) &nbsp;The correct solution is already well-known: you need two semaphores. &nbsp;But various people seem to think that&#8217;s too much overhead, or that&#8217;s too complicated, or something, and that they can do better than the 30 years of doctorate research that&#8217;s looked at this problem (or others like it). &nbsp;Well, perhaps they can &#8212; but usually not.</p>
<p>(Of course I&#8217;m guilty of ignoring well-known solutions at times as well, so maybe I shouldn&#8217;t talk too much&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-395983">
				<div id="div-comment-395983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-395983">
			June 27, 2006 at 3:40 pm</a>		</div>

		<p>But if the queue can grow indefinitely, then you only need one, since the producer doesn&#8217;t have to wait for room.</p>
<p>And if the consumer consumes all work whenever it wakes up, then the semaphore never needs to go past one, so you can use an auto-reset event instead, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-396093">
				<div id="div-comment-396093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-396093">
			June 27, 2006 at 9:39 pm</a>		</div>

		<blockquote><p>
  you still need some kind of lock on the queue itself. &nbsp;(Even if the queue is implemented as a singly-linked list, the &quot;next&quot; pointer on the last node isn&#8217;t necessarily always set, or read, atomically. &nbsp;Certainly not in the presence of multiple CPUs.) </p>
<p>Not necessarily, there are lock-free singly-linked-list implementations.<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-396043">
				<div id="div-comment-396043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-396043">
			June 27, 2006 at 4:46 pm</a>		</div>

		<p>&gt; But if the queue can grow indefinitely, then you only need one, since the producer doesn&#8217;t have to wait for room.</p>
<p>You need one semaphore to signal the consumer, yes. &nbsp;But you still need some kind of lock on the queue itself. &nbsp;(Even if the queue is implemented as a singly-linked list, the &quot;next&quot; pointer on the last node isn&#8217;t necessarily always set, or read, atomically. &nbsp;Certainly not in the presence of multiple CPUs.)</p>
<p>&gt; And if the consumer consumes all work whenever it wakes up, then the semaphore never needs to go past one,</p>
<p>No, but again, you need at least one more lock to avoid various other race(s). &nbsp;(Though perhaps you could just use the same mutex across an add operation as a remove operation. &nbsp;But that seems to limit performance, because you&#8217;d wait for the current add to finish, even if you don&#8217;t have to because there&#8217;s already stuff on the queue.)</p>
<p>If mutexes are really less overhead than semaphores, then feel free to do this, but I&#8217;m not sure. &nbsp;Personally, I&#8217;d rather use a solution that&#8217;s been researched to death and (AFAIK anyway) proven correct, than use some home-grown algorithm that works 99.5% of the time. &nbsp;Even if the home-grown solution *is* slightly faster &#8212; that last 0.5%, where the home-grown solution fails, *will* bite you eventually.</p>
<p>(I&#8217;m trying to remember something I heard a while back&#8230; &nbsp;I think it was &quot;with a 3 GHz CPU, a million years passes almost instantaneously.&quot; &nbsp;If your solution only fails &quot;once in a million years&quot;, it&#8217;ll actually fail quite regularly with recent CPUs, given how often the algorithm can run in a fixed amount of wall-clock time.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-396053">
				<div id="div-comment-396053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-396053">
			June 27, 2006 at 4:55 pm</a>		</div>

		<p>Crud, forgot this:</p>
<p>The queue *can&#8217;t* grow indefinitely. &nbsp;At the very least, you&#8217;ll be limited to 4GB of data on a 32-bit CPU. &nbsp;(Actually probably less with the default 2GB/2GB VM split in Windows.) &nbsp;If the queue items are each 1 byte, then you can set the initial count of the semaphore that the producer waits on to UINT_MAX (or some other appropriately huge number), and you&#8217;ll &quot;never&quot; actually wait. &nbsp;Certainly you will never wait until after you&#8217;ve run out of memory.</p>
<p>If the queue items are larger than 1 byte, or you&#8217;re running in 64-bit mode, then you can set the maximum semaphore count to a different number. &nbsp;But you can still use the &quot;bounded&quot; queue model. &nbsp;(Actually, I *think* you can even use that model with a singly-linked list for your queue, so you don&#8217;t have to allocate the entire queue beforehand. &nbsp;Not sure on that though.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-396263">
				<div id="div-comment-396263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-396263">
			June 28, 2006 at 10:45 am</a>		</div>

		<p>Having just yesterday implemented a producer / consumer with an AutoResetEvent, does putting a lock() around the queue / de-queue provide a second semaphore, as you describe?</p>
<p>ie;<br />
<br />Producer {<br />
<br /> lock(queue) {<br />
<br /> &nbsp;queue.Enqueue(item)<br />
<br /> }<br />
<br /> autoevent.set()<br />
<br />}</p>
<p>Consumer {<br />
<br /> while() {<br />
<br /> &nbsp;autoevent.WaitOne()<br />
<br /> &nbsp;lock(queue) {<br />
<br /> &nbsp; dequeue_all_items()<br />
<br /> &nbsp;}<br />
<br /> &nbsp;process_dequeued_items()<br />
<br /> }<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-396273">
				<div id="div-comment-396273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-396273">
			June 28, 2006 at 11:24 am</a>		</div>

		<p>It&#8217;s not a separate semaphore, no. &nbsp;The &quot;lock&quot; keyword is likely done with a mutex (though I suppose not necessarily; I don&#8217;t know much about C# internals).</p>
<p>There are still issues with this code, though &#8212; see this for some comments:</p>
<p><a rel="nofollow" target="_new" href="http://www.codeproject.com/threads/semaphores.asp" rel="nofollow">http://www.codeproject.com/threads/semaphores.asp</a></p>
<p>Particularly this:</p>
<p>&gt; Event blocking</p>
<p>&gt; This has exactly the same problem as CRITICAL_SECTION blocking. While you could argue that it is possible to set an Event successfully before actually trying to block, because an Event is not counted, you have to do a synchronized update of the count variable before blocking. Because one thread could have decremented the count to zero and done a ::ResetEvent at about the same time another thread was incrementing the count and doing a ::SetEvent, you have no guarantee that the ::SetEvent will not happen a few hundred nanoseconds before the ::ResetEvent, thus getting out of order and blocking when the Event should be passable.</p>
<p>and:</p>
<p>&gt; There&#8217;s no substitute for a Semaphore</p>
<p>&gt; If you think you have invented a clever, faster, more efficient, easier, or whatever way of doing a semaphore without actually using a Semaphore, the chances approach unity that you have simply fooled yourself. Read Dijkstra&#8217;s earlier papers where he was developing the notion of synchronization primitives that were preemptive-threading safe, and there was no InterlockedIncrement operation to help him. These are complex papers; the techniques are subtle. Only if you fully understand the issues of synchronization should you even consider trying something like this. The rest of the time, particularly if you are new to parallelism and synchronization, take this as a rule: you haven&#8217;t a clue as to how to create a semaphore effect without using semaphores. I&#8217;ve been doing this professionally for a quarter century and I don&#8217;t feel confident trying to fake out a semaphore&#8217;s functionality with some other mechanism. Trust me in this: You Don&#8217;t Want To Go There.</p>
<p>The producer/consumer problem is a perfect fit for a counted synchronization primitive (i.e. a semaphore). &nbsp;Trying to do it with other locking primitives, IMO, is not worth the effort that it would take to get an alternate solution right.</p>
<p>(Note that any producer-consumer solution does need a mutex for the queue itself. &nbsp;So your lock(queue) is necessary for any solution, including one that uses semaphores.)</p>
<p>(But at least you&#8217;re not using PulseEvent&#8230; &nbsp;;-))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-396183">
				<div id="div-comment-396183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-396183">
			June 28, 2006 at 8:10 am</a>		</div>

		<p>I assume you mean the InterlockedSList type structures, right? &nbsp;That type of setup uses InterlockedCompareExchange (or some other Interlocked* API function) to do the sets, though.</p>
<p>It has to, otherwise code on the second CPU could be reading that address &quot;at the same time&quot; as code on the first CPU is writing it. &nbsp;(In reality, whether something happens &quot;at the same time&quot; across multiple CPUs depends on the velocity of the observer. &nbsp;If you&#8217;re moving in one direction, then CPU 1 might finish first according to you, but if you&#8217;re moving in the other direction, CPU 2 might finish first. &nbsp;If you&#8217;re not moving relative to the CPUs, then it may appear simultaneous. &nbsp;Or, it might be simultaneous if you&#8217;re moving at a certain velocity, but not if you&#8217;re standing still or moving in the opposite direction. &nbsp;Yes, there&#8217;s more of an effect here if your velocity is close to c, but if you&#8217;re precise enough you can see it even if your velocity is really really low.)</p>
<p>But even the Interlocked* APIs don&#8217;t always help &#8212; you can InterlockedCompareExchange the last pointer in your queue&#8217;s linked list in your producer thread, and you&#8217;ll know that the consumer thread either sees that pointer set to NULL or set to the next work item. &nbsp;(At least it doesn&#8217;t see an invalid value.) &nbsp;But you don&#8217;t know *which* it sees &#8212; if it sees NULL, because it reads first, then it&#8217;ll think it has no more work to do. &nbsp;But it does, and you&#8217;ve just delayed a work item again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-396353">
				<div id="div-comment-396353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-396353">
			June 28, 2006 at 11:13 pm</a>		</div>

		<p>Wednesday, June 28, 2006 8:10 AM by BryanK<br />
<br />&gt; (In reality, whether something happens &quot;at<br />
<br />&gt; the same time&quot; across multiple CPUs depends<br />
<br />&gt; on the velocity of the observer.</p>
<p>More important is the possibility that interleaving can occur in almost any order. &nbsp;If CPU A modifies two items in memory and CPU B fetches the two items at approximately the same time, B might get one old value and one new value.</p>
<p>[In case of possible ambiguity, there is no joking in the above paragraph.]</p>
<p>&gt; there&#8217;s more of an effect here if your<br />
<br />&gt; velocity is close to c</p>
<p>In that case, use an assembly. &nbsp;(Which kind of assembly? &nbsp;In case of ambiguity, apparently yes.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-396453">
				<div id="div-comment-396453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-396453">
			June 29, 2006 at 9:28 am</a>		</div>

		<p>Or two old values, or two new values. &nbsp;But yes, I see what you mean. &nbsp;On the other hand, the problem isn&#8217;t gone if only a single 4-byte value is being accessed (instead of two). &nbsp;A single pointer being set on CPU A and being read on CPU B, might show up to CPU B as either the old or the new value, unpredictably. &nbsp;(And that&#8217;s what the issue is with a singly-linked list that doesn&#8217;t have interlocked pointer modifications. &nbsp;You have a race between adding an item to the list on CPU A, and CPU B looking at the last item&#8217;s &quot;next&quot; pointer to see whether it&#8217;s at the end.)</p>
<p>Caches also play a part when memory is modified &#8212; CPU A&#8217;s write will play strange games with other CPU caches. &nbsp;Depending on whether the cache is writeback or write-through, A&#8217;s cache will have to either claim ownership of that memory address, or invalidate everyone else&#8217;s possibly-cached version of the data at that address. &nbsp;(Or perhaps there are other ways of handling cache coherency that I&#8217;ve forgotten. &nbsp;Entirely possible.)</p>
<p>C, assembly, hah hah. &nbsp;*grin*</p>
<p>Maybe observers moving that fast should use a .Net assembly. &nbsp;Isn&#8217;t that supposed to provide some kind of platform independence? &nbsp;Unless the platform they&#8217;re standing on is also moving that fast (then they wouldn&#8217;t need to be independent of it). &nbsp;:-P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-396683">
				<div id="div-comment-396683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random Reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060622-00/?p=30773#comment-396683">
			July 2, 2006 at 8:37 am</a>		</div>

		<p>&gt; But even the Interlocked* APIs don&#8217;t always help &#8212; you can InterlockedCompareExchange the last pointer in your queue&#8217;s linked list in your producer thread, and you&#8217;ll know that the consumer thread either sees that pointer set to NULL or set to the next work item. &nbsp;(At least it doesn&#8217;t see an invalid value.) &nbsp;But you don&#8217;t know *which* it sees &#8212; if it sees NULL, because it reads first, then it&#8217;ll think it has no more work to do. &nbsp;But it does, and you&#8217;ve just delayed a work item again.</p>
<p>Which is why the producer errs on the side of caution and signals the event anyway, since it just added a work item. &nbsp;Presto, a single-semaphore implementation with a lock-free work queue.</p>
<p>While it&#8217;s always good to make use of past research, one should also not assume a solution is the only solution :P</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>