<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (32)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-626103">
				<div id="div-comment-626103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">unnamed commenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626103">
			May 5, 2008 at 11:18 am</a>		</div>

		<p>But what if the parameters were valid? Quote: All the parameters are <em>valid</em> for the function but I <em>sometimes</em> get a failure&quot; (emphasis mine)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626123">
				<div id="div-comment-626123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626123">
			May 5, 2008 at 11:35 am</a>		</div>

		<blockquote><p>
  &gt; All the parameters are <em>valid</em> for the function but I <em>sometimes</em> get a failure&quot; &lt;&lt;
</p></blockquote>
<p>This is where being able to at least understand some basic x86 assembly comes in handy. &nbsp;It would be a fairly simple matter in this case to step into the DeferWindowPos() API and determine which parameter is causing the ERROR_INVALID_PARAMETER result.</p>
<p>I&#8217;d be willing to bet one of the parameters is actually invalid.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626133">
				<div id="div-comment-626133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">N. Velope</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626133">
			May 5, 2008 at 1:07 pm</a>		</div>

		<p>&nbsp; I thought this issue was decided the other way in the move from windows 3.0 to 3.1 when it was concluded that users hated delayed UAE errors from a random application (that had its memory erroneously locked or something) and would rather have the performance hit of Windows checking parameters and raising an error (usually halting the calling program) and refusing to perform the function and pointing a finger at the actual application causing the error.</p>
<p>&nbsp; This wasn&#8217;t because of security concerns, but because users couldn&#8217;t tell which program had initially caused the error eg: &nbsp;program A would lock or write to memory needed by program B, then program B would crash when it tried to use it even though it did nothing wrong. &nbsp;Users would then phone the company that made program B to complain and the company could not replicate the error.</p>
<p>&nbsp; Of course, that was win16 which is way more open to one application hurting another than 32 bit windows, but I thought microsoft had made a general speed vs: accountabilty decision to do lots of parameter checking. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626163">
				<div id="div-comment-626163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alex.r.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626163">
			May 5, 2008 at 2:27 pm</a>		</div>

		<p>N. Velope:</p>
<p>Doing parameter validation is impossible in the general case for non type-safe languages. I doubt that Microsoft made the decision to start doing impossible stuff with the release of Windows 3.1.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626193">
				<div id="div-comment-626193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">N. Velope</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626193">
			May 5, 2008 at 3:14 pm</a>		</div>

		<p>&nbsp; Just to clarify &#8211; the Windows API functions check parameters when they are called and raise an error if the parameters are bad. &nbsp;The language calling them is irrelevant. &nbsp;The only relevant language is the one the API was written in.</p>
<p>&nbsp; Parameter checking can include seeing if the number is in an expected range or uses an undefined number not on its list of options for doing something to a window or if a memory location is not readable/writable by the caller. &nbsp;The API function can raise an error or return a value that indicates that the function did not do what was asked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626233">
				<div id="div-comment-626233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lonesome coder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626233">
			May 5, 2008 at 4:11 pm</a>		</div>

		<p>Or fail silently. I&#8217;ve been using wxWidgets again lately (used it before back when it was wxWindows) and 2 days into it I already had code like</p>
<p>DoSomething ();</p>
<p>DoSomething (); //it works the 2nd time</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626293">
				<div id="div-comment-626293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626293">
			May 5, 2008 at 6:58 pm</a>		</div>

		<p>Well I was a Windows PM too, but I disagree with the other PM. &nbsp;I think the system would be more stable if all processes did what MTS did &#8212; log a call stack and terminate the process. &nbsp;then the dev would fix their bugs&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626313">
				<div id="div-comment-626313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chrismcb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626313">
			May 5, 2008 at 8:18 pm</a>		</div>

		<p>I can&#8217;t believe Raymond had to say this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626323">
				<div id="div-comment-626323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lamb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626323">
			May 5, 2008 at 8:29 pm</a>		</div>

		<p>Every C programmer knows that double free() is illegal.</p>
<p>The GNU C library includes, by default on most systems a set of double free checks. Most programming errors that result in free() being called on the same allocation twice are caught and reported.</p>
<p>However this reporting uses the system log feature if it is enabled, and the system logging uses functions which themselves allocate memory.</p>
<p>If the program which experienced the error is threaded then the allocator uses a lock to ensure mutual exclusion. Since this lock is non-recursive, and is already taken when the double free() detection occurs, the allocations from within the logging code will cause deadlock.</p>
<p>Now, is that deadlock a reasonable example of &quot;all bets are off&quot; due to the invalid parameter passed to free() which set this chain of events off ? Or is it a bug that ought to be fixed ? We shall see, in some future version of GNU libc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-626343">
				<div id="div-comment-626343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626343">
			May 5, 2008 at 8:56 pm</a>		</div>

		<p>Nick: I don&#8217;t see how it could be an example of &quot;all bets are off&quot;. Why do people have to take that statement so literally? Just because &quot;all bets are off&quot; doesn&#8217;t mean it&#8217;s reasonable to expect the function to format your hard drive, or make the monitor explode &#8212; people still have reasonable expectations about how a system will fail.</p>
<p>Just so people know, &quot;all bets are off&quot; means the function does not have to meet it&#8217;s side of the contract if you do not meet your side of the contract. That&#8217;s all.</p>
<p>By the way, to pm (#1) just saying you&#8217;re an &quot;ex MSFT windows PM&quot; doesn&#8217;t give what you say any extra weight. Especially when you clearly don&#8217;t even understand the circumstances of what&#8217;s being spoken of.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626353">
				<div id="div-comment-626353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626353">
			May 5, 2008 at 10:02 pm</a>		</div>

		<p>Dean: Just because &quot;all bets are off&quot; doesn&#8217;t mean it&#8217;s reasonable to expect the function to format your hard drive, or make the monitor explode &#8212; people still have reasonable expectations about how a system will fail.</p>
<p>I liken this to the &quot;undefined&quot; marker in standards docs &#8211; it means exactly that &#8211; if you do this, monkeys might fly out of your butt or the whole world might explode.</p>
<p>In your first example, say you were meant to call the format-hard-disk function with a letter indicating the drive: e.g., &#8216;c&#8217; (0x63), &#8216;d&#8217; (0x64) and you passed in CTRL-D (0x04) thinking that would format drive D.</p>
<p>The ideal program would return with an error stating &quot;parameter out of range&quot;, but let&#8217;s say this were the old DOS days when memory was scarce and they stated clearly that all bets were off unless you passed in a value between 0x63 and 0x69 &#8211; maybe they&#8217;ll just increase your parameter until it&#8217;s valid and go ahead anyway (because that code takes up less room than the error string).</p>
<p>Your second point I&#8217;ve seen in the early X setup programs for Linux &#8211; if you got your horizontal or vertical refresh rates wrong, they did indded warn you that your monitor might explode. &nbsp;I think that&#8217;s improved quite a bit since then :-).</p>
<p>I&#8217;m not sure it&#8217;s wise to talk about reasonable behaviour in failure scenarios. &nbsp;Reasonable would mean program will fully recover to some people. &nbsp;To some coders, reasonable may mean &quot;you stuffed up the parameters, YOU fix the problem&quot;.</p>
<p>Pax</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626363">
				<div id="div-comment-626363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Entity</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626363">
			May 5, 2008 at 10:42 pm</a>		</div>

		<p>We have a slight problem.</p>
<p>One of the problems today is not in regards to error checking or parameter checking. But when to correctly use such techniques in the design of the application. For example, placing such parameter checking inside core routines of the program would lead the size and complexity to completely go out of control.</p>
<p>Most people will be saying &quot;bah you should know this&quot;. But how often do I see the basic principles or techniques miss used and the confusion when and how to use is amazing high. This is not helped by the fact that different languages use the same terminology and names to refer to completely different things! Eg.. Java &nbsp;Exception handeling for error handeling. Where Exception in C++ are exceptional and should not be used for error handeling. Or modern C++ exceptions to be used for error handeling.</p>
<p>I see that most people are confused about should windows API act as a filter module for all possible incorrect parameters. Then other people will be saying that windows API should act very strictly against incorrectly parameters.</p>
<p>Raymond did say before hand there has been a shift in the windows API from being correct and now leaning more toward a defensive nature of the API to do no evil, even when the application is at fault. Mainly because when an application fails the user blames Microsoft.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626383">
				<div id="div-comment-626383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626383">
			May 5, 2008 at 11:02 pm</a>		</div>

		<p>An API which fails noisily and immediately on invalid parameters is a godsend for skilled developers since it allows them to narrow down bugs far more quickly than APIs which allow the program to continue with corrupt state until things get so bad that the program crashes for other reasons with no obvious smoking gun. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626253">
				<div id="div-comment-626253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626253">
			May 5, 2008 at 5:08 pm</a>		</div>

		<p>What a terrible article. I am ex MSFT windows PM and I am shocked to read something like that</p>
<p>I agree that calling with invalid params is bad. But the OS should try to be rugged against dumb calls. Leaking handles becuase somebody passed in a bad param is bad.</p>
<p>I agree that you cannot deal with every piece of garbage that gets passed in, but saying that you should not even try is totally wrong and that the programmer deserves what he gets &#8211; reminder &#8211; its the *user* that will pay the consequences when he finds that the app crashes after 10 hours of use.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626263">
				<div id="div-comment-626263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626263">
			May 5, 2008 at 6:22 pm</a>		</div>

		<p>The problem might be that the documentation isn&#8217;t helping.</p>
<p>&quot;If a call to DeferWindowPos fails, the application should abandon the window-positioning operation and not call EndDeferWindowPos.&quot;</p>
<p>Note that it does not say &quot;if a call to DeferWindowPos() fails for any other reason than passing an invalid parameter&quot;. Nor does the MSDN at any other point mention &quot;if a Win32 function fails because of invalid parameters, all bets are off and you might as well terminate your process because the functions do not make any guarantees about what they&#8217;ll do, if anything, so even safe cleanup is impossible&quot;. And good for us that that&#8217;s not the general approach, too.</p>
<p>What the ideal arrangement *would* be is that an application must have a call to EndDeferWindowPos() at the end of every sequence of BeginDeferWindowPos()/DeferWindowPos() calls *no matter what*. It&#8217;s alright for the call to EndDeferWindowPos() to fail, as long as it also frees the HDWP while returning failure.</p>
<p>The problem here is that EndDeferWindowPos() puts itself in a bind by conflating the deallocation of an auxiliary structure with its actual function (moving multiple windows simultaneously). What should happen is something like this:</p>
<p>AllocateHdwp();</p>
<p>try {</p>
<p> &nbsp;[DeferWindowPos();]*</p>
<p> &nbsp;EndDeferWindowPos();</p>
<p>} finally {</p>
<p> &nbsp;DeallocateHdwp();</p>
<p>}</p>
<p>Regardless of any failure of DeferWindowPos() and EndDeferWindowPos(), this sequence will not leak. We would have this situation if we call AllocateHdwp &quot;BeginDeferWindowPos&quot; and DeallocateHdwp &quot;EndDeferWindowPos&quot;, with the proviso that EndDeferWindowPos *may not fail to deallocate the HDWP if it is valid*. Clearly a separate function would make more sense, since &quot;do nothing if your arguments are invalid&quot; is actually a very useful failure mode.</p>
<p>The position that functions are free to do *anything* if you pass them invalid arguments, while convenient, is also the absolute least amount of effort you can make towards robustness. It&#8217;s certainly true that it&#8217;s not principally wrong, as ultimately the application is responsible for its own correctness, but black and white are such harsh colors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626273">
				<div id="div-comment-626273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alex.r.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626273">
			May 5, 2008 at 6:24 pm</a>		</div>

		<p>N.Velope:</p>
<p>The language is relevant. For example, in C seeing &#8216;if a memory location is not readable/writable by the caller&#8217; would not be of much use. I can easily generate a valid memory address. I can&#8217;t invent valid data structures as easily.</p>
<p>pm:</p>
<p>&gt; Leaking handles becuase somebody passed in a bad param is bad.</p>
<p>I don&#8217;t see the point really &#8212; this thing could never stop.</p>
<p>If someone calls CloseHandle() with an invalid handle, should the API try to find which handle the programmer really meant to close in order to avoid a leak? Because the *user* will end up with less memory?</p>
<p>Choosing to stop when no security risk is involved seems like a pretty good choice to me; it also avoids the setting the expectation that the platform will fix whatever problem you have in your own code which makes for a better ecosystem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626303">
				<div id="div-comment-626303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626303">
			May 5, 2008 at 6:58 pm</a>		</div>

		<p>Seriously, what are you guys doing passing invalid parameters to DeferWindowPos? &nbsp;What the *heck* are you doing that you don&#8217;t know if your HWND are valid or not? &nbsp;Perhaps programming in C is not for you. :P</p>
<p>The guy who asked the question said: I&#8217;ll call SetWindowPos instead, I&#8217;m affraid DeferWindowPos will leak the HDWM</p>
<p>I say: if you may be working with invalid window handles, you have a bigger problem than leaks. &nbsp;SetWindowPos will not fix it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-626393">
				<div id="div-comment-626393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626393">
			May 5, 2008 at 11:26 pm</a>		</div>

		<p>Pax: You&#8217;re also taking things too literally. Of course a &quot;FormatDrive&quot; function might end up formatting the &quot;wrong&quot; drive if you pass it an invalid parameter. If you pass &quot;D&quot; when you meant to pass &quot;C&quot; then it&#8217;s still &quot;invalid&quot; from your point of view, but not from the function&#8217;s point of view.</p>
<p>What I&#8217;m saying is that it&#8217;s *not* reasonable to expect DeferWindowPos to format your hard drive if you pass an invalid parameter. In just the same way that it&#8217;s also *not* reasonable to expect free() to deadlock your process if you pass an invalid parameter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626443">
				<div id="div-comment-626443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://paramanand.blogspot.com/' rel='external nofollow' class='url'>Paramanand Singh</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626443">
			May 6, 2008 at 10:26 am</a>		</div>

		<p>I am relatively new of your blog (a month or so). And going through the various posts here I have come to know of various coding horrors committed by developers.</p>
<p>Too bad that you have to reiterate the ground rules 100 times.</p>
<p>One of the interns in my company wrote:</p>
<p>while (fp != EOF)</p>
<p>{</p>
<p>&nbsp; fread(buf, 1, n, fp);</p>
<p>&nbsp; // &#8230;</p>
<p>}</p>
<p>and said, &quot;since fread advances the file pointer by the amount it reads from the file, therefore after sometime the file pointer &#8216;fp&#8217; will reach end-of-file and therefore fp == EOF after sometime.&quot;</p>
<p>I was speechless. Either people don&#8217;t know how to read documentation, or are lazy enough to do so, or just plain disinterested in programming.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626463">
				<div id="div-comment-626463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626463">
			May 6, 2008 at 10:54 am</a>		</div>

		<p>@N. velope: &quot;if a memory location is not readable/writable by the caller&quot;</p>
<p>I thought you couldn&#8217;t tell if a memory location was readable or writable by the caller. &nbsp;I know that using IsBadReadPtr and IsBadWritePtr is a bad idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626623">
				<div id="div-comment-626623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626623">
			May 6, 2008 at 1:59 pm</a>		</div>

		<p>killing the process is fine, leaking resources is not. This allows the app to ship and punish the user</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-626723">
				<div id="div-comment-626723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626723">
			May 6, 2008 at 6:25 pm</a>		</div>

		<p>pm: you still don&#8217;t seem to get it. The application will leak a handle, but Windows is not leaking anything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626803">
				<div id="div-comment-626803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626803">
			May 7, 2008 at 2:17 am</a>		</div>

		<p>&quot;I thought this issue was decided the other way in the move from windows 3.0 to 3.1 when it was concluded that users hated delayed UAE errors from a random application (that had its memory erroneously locked or something) and would rather have the performance hit of Windows checking parameters and raising an error (usually halting the calling program) and refusing to perform the function and pointing a finger at the actual application causing the error.&quot;</p>
<p>That is why, for example, IsBad*Ptr was invented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-627033">
				<div id="div-comment-627033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-627033">
			May 8, 2008 at 7:37 am</a>		</div>

		<p>&quot;Applications leaking handles is a potential cause of this.&quot;</p>
<p>That&#8217;s definitely quite possible. What&#8217;s your point?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626983">
				<div id="div-comment-626983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-626983">
			May 8, 2008 at 12:50 am</a>		</div>

		<p>10:02 PM by Pax</p>
<p>Your second point I&#8217;ve seen in the early X setup programs for Linux &#8211; if you got your horizontal or vertical refresh rates wrong, they did indded warn you that your monitor might explode. &nbsp;I think that&#8217;s improved quite a bit since then :-).</p>
<p>That&#8217;s just plain poorly designed software. There is no reason that the person entering choosing the refresh rate might get momentarily distracted and enter in garbage.</p>
<p>6:25 PM by Dean Harding</p>
<p>pm: you still don&#8217;t seem to get it. The application will leak a handle, but Windows is not leaking anything.</p>
<p>Have you ever heard stories of windows systems that seems to get slower the longer they stays up? Applications leaking handles is a potential cause of this.</p>
<p>2:17 AM by Yuhong Bao</p>
<p>That is why, for example, IsBad*Ptr was invented.</p>
<p>Yes, but unfortunately due to the oversight of whoever designed those functions, they return their results by directly trying to access said memory location, instead of doing the correct thing (VirtualQuery). And thanks to the oversight of someone else at microsoft, instead of fixing it, it was rationalized that such a function, even if it was corrected, wouldn&#8217;t be safe.</p>
<p>So IsBad*Ptr is out of the picture for now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-627063">
				<div id="div-comment-627063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hardee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-627063">
			May 8, 2008 at 9:36 am</a>		</div>

		<p>Is it no wonder that debugging Win32 failures is so much harder than modern API frameworks?</p>
<p>This &#8216;undefined behavior&#8217; for predictable errors in the caller takes from the old C standard library approach: &quot;hey, you should know what you&#8217;re doing and read the API docs completely, and all background literature, before calling this API.&quot; &nbsp;Yeah, sounds great, because all programmers are Einsteins and no one ever makes mistakes.</p>
<p>Hence the culture of hardened devs making statements like the above about how &#8216;if you have an invalid handle then this is the least of your problems&#8217;. Perfectly true, obvious and with a slight air of superiority (despite the fact that the person saying has undoubtedly had to learn this lesson the hard way himself). The question is how you know you have a bad handle in the first place and how you can track it down, sir.</p>
<p>Win332 is incredibly successful and can be learned, but it&#8217;s hilarious to see people pretending that these kinds of design decisions still make sense, especially when the designers of those APIs have often recanted and moved on to better things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-627473">
				<div id="div-comment-627473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codebetter.com/blogs/matthew.podwysocki/archive/2008/05/08/your-api-fails-who-is-at-fault.aspx' rel='external nofollow' class='url'>Matthew Podwysocki</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-627473">
			May 9, 2008 at 12:42 am</a>		</div>

		<p>I decided to stay on the Design by Contract side for just a little bit. Recently, Raymond Chen posted</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-627483">
				<div id="div-comment-627483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/podwysocki/archive/2008/05/09/your-api-fails-who-is-at-fault.aspx' rel='external nofollow' class='url'>Matthew Podwysocki's Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-627483">
			May 9, 2008 at 12:44 am</a>		</div>

		<p>I decided to stay on the Design by Contract side for just a little bit. Recently, Raymond Chen posted</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-627513">
				<div id="div-comment-627513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-627513">
			May 9, 2008 at 3:23 am</a>		</div>

		<p>Dean Harding: What exactly is the difference between Windows leaking a handle and applications leaking handles if the end result is the same ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-627813">
				<div id="div-comment-627813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-627813">
			May 9, 2008 at 9:12 pm</a>		</div>

		<p>My point was that the Is*BadPtr was designed in the Windows 3.1 days, where it did not have the race condition it has today.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-627893">
				<div id="div-comment-627893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codeka.com/blogs/' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-627893">
			May 10, 2008 at 6:21 am</a>		</div>

		<p>Triangle: The discussion is about what Windows can do about an application that leaks handles. The end-result of applications leaking handles is irrelevent (because we already know happens). If you can figure out a way to stop applications leaking handles, then I&#8217;m sure MS research would love to hear from you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-627923">
				<div id="div-comment-627923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steven Edwards</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080505-00/?p=22463#comment-627923">
			May 10, 2008 at 10:46 am</a>		</div>

		<p>Any way you could make that script public? I a lot of developers would find it of use.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>