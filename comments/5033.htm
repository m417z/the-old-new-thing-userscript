<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1043833">
				<div id="div-comment-1043833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Owen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043833">
			March 7, 2013 at 7:20 am</a>		</div>

		<p>Why hide the global variable behind a set of API calls to begin with? Why not just expose the global variable and document it?</p>
<p>If he understood that it was a global var to begin with, he probably would&#39;ve just checked for the validity of it and dropped the CloseHandle() call and wouldn&#39;t have had to call you for answers.</p>
<div class="post">[<em>There is no way to export a variable from a DLL. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1043843">
				<div id="div-comment-1043843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043843">
			March 7, 2013 at 7:27 am</a>		</div>

		<p>I love these types of posts where you explicitly call out things we should already know but the docs might not be 100% clear on.</p>
<p>I assume the same applies to _get_osfhandle?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043853">
				<div id="div-comment-1043853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">APZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043853">
			March 7, 2013 at 7:39 am</a>		</div>

		<p>Why the heck isn&#39;t the handle refcounted, and GetStdHandle doing refcount++, close handle doing refcount&#8211;, closing if it&#39;s the last?</p>
<p>Cons:</p>
<p>A dword of memory</p>
<p>An extra interlockedincrement</p>
<p>Pros:</p>
<p>No more guessing games &#8211; is this a handle I should close? Or have I been passed a std handle that should remain open?</p>
<p>THREAD SAFETY &#8211; CloseHandle on a GLOBAL VARIABLE followed by Set&shy;Std&shy;Handle is INTRINSICALLY thread-unsafe &#8211; I advise nobody use that technique in any sort of multithreaded program!</p>
<div class="post">[<em>Because <a href="http://blogs.msdn.com/b/oldnewthing/archive/2007/08/29/4620336.aspx" rel="nofollow">kernel handles are not reference-counted</a>. The way to bump the reference count of a handle is to duplicate it and create a second handle. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043863">
				<div id="div-comment-1043863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EduardoS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043863">
			March 7, 2013 at 7:57 am</a>		</div>

		<p>It is a bunch of noob questions and probably could be answered by reading the docs, but I am confused&#8230;</p>
<p>About the handle returned by:</p>
<p>HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);</p>
<p>By default, it is the console, but if I start the application as: aplication.exe &gt; results.txt</p>
<p>It will eb a handle to the results.txt file, right?</p>
<p>And, int this case, the correct way to handle this is to call GetStdHandle(STD_OUTPUT_HANDLE); once, store into a global variable and never call CloseHandle(h)?</p>
<p>How this (and SetStdHandle, wich seens to have a bigger potential of frustrating the user) are supposed to be used?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043873">
				<div id="div-comment-1043873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043873">
			March 7, 2013 at 7:57 am</a>		</div>

		<p>@APZ &#8212; I would assume because the function is called GetStdHandle and not CreateStdHandle. &nbsp;To me the Get implies you are getting a non-owning reference to something that is managed elsewhere.</p>
<p>I use a similar convention when programming in C &#8212; if I present pointer via a get function, you are getting a pointer that you do not manage. &nbsp;If you get it through a function called CreateXXX or AllocXXX you own it and need to clean it up afterwards. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043883">
				<div id="div-comment-1043883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043883">
			March 7, 2013 at 8:20 am</a>		</div>

		<p>As I recall, the handle could refer to a socket. This even worked on Win95, and even when winsock.dll wasn&#39;t loaded into the memory space of that process. The second statement is true to day. I could not figure out how this worked.</p>
<div class="post">[<em>Um, because they&#39;re <span style="text-decoration:underline;">kernel</span> handles? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043893">
				<div id="div-comment-1043893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043893">
			March 7, 2013 at 8:35 am</a>		</div>

		<p>@APZ because then all the programs written using the existing method would leak the handle.</p>
<p>@EduardoS You can use SetStdHandle to force output back to the console (or in from the console) even with redirection (see the MSDN docs). &nbsp;I thought maybe you could use it to override the standard handles for child processes you spawn, but CreateProcess can already do that. &nbsp;I suppose you can also use SetStdHandle if you want to read/write from a file or some other type of handle using standard I/O function calls though that&#39;s a bit of a weird way to do that sort of thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043903">
				<div id="div-comment-1043903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kujo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043903">
			March 7, 2013 at 8:54 am</a>		</div>

		<p>@APZ: The objects which HANDLEs represent usually are ref-counted, actually. &nbsp;CloseHandle functions as a Release, and DuplicateHandle as the generic AddRef. &nbsp;However, not all handles which can be used with WriteFile can be duplicated (either because of the handle type or its permissions), and DuplicateHandle/CloseHandle isn&#39;t so fast that you&#39;d want to use it every printf</p>
<p>@EduardoS: The intent is that you call GetStdHandle for each &quot;logical&quot; operation (like each call to printf.) &nbsp;That way, anything done after the call to SetStdHandle goes to the new place.</p>
<p>@Joshua: Correct, SOCKET is compatible with WriteFile (but DuplicateHandle is documented behaving weirdly with sockets.) &nbsp;Another very common thing is to have pipes there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043913">
				<div id="div-comment-1043913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043913">
			March 7, 2013 at 9:01 am</a>		</div>

		<p>&quot;(You can tell I&#39;m old because I&#39;m talking about the TV room of a dormitory.)&quot;</p>
<p>Heh. &nbsp;I came to the opposite conclusion because <em>Friends</em> was still years away when I graduated and moved out of my dorm.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043923">
				<div id="div-comment-1043923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043923">
			March 7, 2013 at 9:06 am</a>		</div>

		<p>The article tells us to call SetStdHandle after closing the old handle. Wouldn&#39;t it make more sense to call it the other way round? I.e., first set the new handle, then close the old one? It would ensure that any other thread that runs in parallel won&#39;t get an invalid handle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043953">
				<div id="div-comment-1043953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043953">
			March 7, 2013 at 10:05 am</a>		</div>

		<p>@Sven2: Won&#39;t work. Think about what the other thread is doing: GetStdHandle into a register, delay for an arbitrary amount of time (when programming with threads, you must always assume that any thread can be held for an arbitrary amount of time at any point), and then use the handle from the register. If while that thread is stopped another thread closes the handle, no matter if it does a SetStdHandle before or after closing, the first thread will be using an invalid handle.</p>
<p>The only safe way I can see of closing a handle returned by GetStdHandle is if you are completely sure no other thread can possibly be using it. Which, on Windows, is impossible, since some things inject DLLs which create threads on every process, and you have no idea what these threads are doing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043963">
				<div id="div-comment-1043963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043963">
			March 7, 2013 at 10:10 am</a>		</div>

		<p>BlueViper02&#39;s comment on the MSDN doc page for <code>GetStdHandle()</code> (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683231.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms683231.aspx</a>) sums things up pretty nicely:</p>
<p>&quot;Typically, do not close the returned handle: It is not a duplicate handle, it is the real thing, so think twice before closing it :)&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043973">
				<div id="div-comment-1043973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043973">
			March 7, 2013 at 10:12 am</a>		</div>

		<p>@Owen: Using a getter/setter pair instead of a public variable is good engineering practice. That way, if the implementation is changed, you can keep the same API and ABI.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043983">
				<div id="div-comment-1043983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kujo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043983">
			March 7, 2013 at 11:00 am</a>		</div>

		<p>@Cesar: Actually, you do have some idea what those threads AREN&#39;T doing, and that&#39;s good enough. &nbsp;An implicit/injected thread using the standard handles uninvited would be as bad as if it was just arbitrarily writing to address 0x00200020.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043993">
				<div id="div-comment-1043993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043993">
			March 7, 2013 at 12:52 pm</a>		</div>

		<p>Good principals, everybody has learned in somewhere. But like everything else, everybody violates those good rules sometimes. That&#39;s why we need Raymond to remind us&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1044003">
				<div id="div-comment-1044003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bazzabage</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044003">
			March 7, 2013 at 1:55 pm</a>		</div>

		<p>I am unable rightly to apprehend the confusion of ideas that could provoke such a question.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1044023">
				<div id="div-comment-1044023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044023">
			March 7, 2013 at 3:02 pm</a>		</div>

		<p>Despite the incredulity, this isn&#39;t actually an obviously &quot;dumb&quot; question because alternative implementations of the functions could very well have required the OP to do very different things without a change in function signature or &quot;expected behaviour&quot;.</p>
<p>GetStdHandle is entirely within its rights to DuplicateHandle the internal variable and expect you to CloseHandle it. Similarly SetStdHandle could entirely within reason DuplicateHandle the parameter to store into its global variable and auto CloseHandle the previous value. It&#39;s not at all obvious to most developers that you shouldn&#39;t CloseHandle the handle you put in SetStdHandle or not release GetStdHandle.</p>
<p>In fact, the MSDN documentation for GetStdHandle doesn&#39;t tell you how to release your ownership of the returned handle &#8211; hence why the OP assumed he should CloseHandle it, and SetStdHandle says nothing about calling CloseHandle(GetStdHandle(&#8230;)) first.</p>
<p>The fact that GetStdHandle and SetStdHandle are wrappers around a global variable is An Implementation Detail (TM). Surely you, Raymond, of all people should be more annoyed that the MSDN documentation doesn&#39;t tell people not to CloseHandle() the result of GetStdHandle and to CloseHandle(GetStdHandle(&#8230;)) before a SetStdHandle (and not to CloseHandle your reference to it after SetStdHandle)) than being annoyed at the OP for not relying on this implementation detail?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1044033">
				<div id="div-comment-1044033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044033">
			March 7, 2013 at 3:19 pm</a>		</div>

		<blockquote><p>
  In fact, the MSDN documentation for GetStdHandle doesn&#39;t tell you how to release your ownership of the returned handle &#8211; hence why the OP assumed he should CloseHandle it, and SetStdHandle says nothing about calling CloseHandle(GetStdHandle(&#8230;)) first.
</p></blockquote>
<p>As the person who probably asked the question that inspired this article (<a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/8277358/second-call-to-getstdhandle-returns-an-invalid-handle" rel="nofollow">stackoverflow.com/&#8230;/second-call-to-getstdhandle-returns-an-invalid-handle</a>), I can say that&#39;s exactly where I was coming from.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1044043">
				<div id="div-comment-1044043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044043">
			March 7, 2013 at 4:30 pm</a>		</div>

		<p>@Owen: &quot;Why hide the global variable behind a set of API calls to begin with? Why not just expose the global variable and document it?&quot;</p>
<p>Because then:</p>
<ul>
<li>Non-C languages, which don&#39;t have a linker in the conventional sense, wouldn&#39;t be able to access it.</li>
<li>
<p>It wouldn&#39;t be as neat of an encapsulation of system services.</p>
</li>
<li>
<p>Because the pointer to the handle would have to be constant, it may impact OS security services such as ASLR.</p>
</li>
</ul>
<p>@Sven2: The article actually guides you to not closing the old handle in the case of common handles (such as stdout). &nbsp;That would be akin to going in and smashing the TV, but then replacing it with one that is kind of lame and not nearly as cool as the one from the school. &nbsp;You&#39;ll probably still be in trouble.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1044053">
				<div id="div-comment-1044053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044053">
			March 7, 2013 at 5:45 pm</a>		</div>

		<p>&quot;Correct, SOCKET is compatible with WriteFile (but DuplicateHandle is documented behaving weirdly with sockets.) &nbsp;Another very common thing is to have pipes there.&quot;</p>
<p>In fact, that is the default behaviour. The standard handles for the console&#39;s input and output are pipes iirc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043943">
				<div id="div-comment-1043943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1043943">
			March 7, 2013 at 10:04 am</a>		</div>

		<p>&gt; Why the heck isn&#39;t the handle refcounted, and GetStdHandle doing refcount++, close handle doing refcount&#8211;, closing if it&#39;s the last?</p>
<p>The kernel is in fact refcounting these objects, but the handle itself *is* the reference. &nbsp;User mode doesn&#39;t have direct access to this ref count; it can increment by opening the file or device, and it can decrement by closing the handle.</p>
<p>You could effectively do the refcount approach by doing DuplicateHandle(), then closing the duplicate when you&#39;re done.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1044083">
				<div id="div-comment-1044083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044083">
			March 8, 2013 at 2:31 am</a>		</div>

		<p>@mikeb, since when are comments official documentation?</p>
<p>@Matt, right on the spot! The console examples (e.g. <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms686974.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms686974.aspx</a> ) are the only place where you see that a handle returned by GetStdHandle is not closed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1044103">
				<div id="div-comment-1044103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044103">
			March 8, 2013 at 6:13 am</a>		</div>

		<p>Wow. Fair enough I guess that one would think think a getter is a mutator (?). I myself like to delcare critical sections &#39;mutable&#39; in dirty corners, so the official api must do that too. And expose idealist private parts!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1044143">
				<div id="div-comment-1044143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044143">
			March 8, 2013 at 7:24 am</a>		</div>

		<p>The documentation says that GetStdHandle returns the handle value set by SetStdHandle. It doesn&#39;t say it creates a new handle. The only way to interpret that description is that it&#39;s giving you a handle created by someone, but it&#39;s not a new handle and you don&#39;t own it. BEcause of that, it&#39;s not yours, and you cannot close it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1044253">
				<div id="div-comment-1044253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044253">
			March 8, 2013 at 10:03 am</a>		</div>

		<p>@alegr1 Obviously that&#39;s not the only way to interpret it.</p>
<p>I can acquire handles to lots of objects I don&#39;t own and didn&#39;t create: files, windows, registry keys, disk volumes, just about everything. These three handles are the only three I know of (admittedly, I&#39;m not an expert on Win32) that are global and shouldn&#39;t be closed; if I close a file handle or a window handle, that doesn&#39;t destroy the object, it simply destroys the reference.</p>
<p>Since the documentation is silent about how to dispose of the StdHandles, it is not unreasonable to expect that they would follow the same procedure as every other handle, instead of special undocumented rules.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1044263">
				<div id="div-comment-1044263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044263">
			March 8, 2013 at 10:22 am</a>		</div>

		<p>@John Doe: all I said was that the comment summarized things nicely.</p>
<p>I also agree with Matt&#39;s assessment &#8211; it would be nice if the MSDN docs for GetStdHandle() were more explicit about the ownership of the returned handle (and that if you call SetStdHandle() then you should take action to make sure the previous handle isn&#39;t leaked). &nbsp;</p>
<p>Who knows, maybe this blog article has started a chain of events that produce such a change.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1044323">
				<div id="div-comment-1044323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044323">
			March 8, 2013 at 10:44 am</a>		</div>

		<p>@Bazzabage: thanks, that made me laugh.</p>
<p>Actually I&#39;ve been using that quote as my tagline in Messenger for about two years. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1044333">
				<div id="div-comment-1044333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044333">
			March 8, 2013 at 10:47 am</a>		</div>

		<p>What&#39;s missing here, probably, is historical context. &nbsp;You would never[1] close stdout (or even std::cout.)</p>
<ol>
<li>Rhetorical hyperbole, of course.</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1044523">
				<div id="div-comment-1044523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044523">
			March 10, 2013 at 9:25 am</a>		</div>

		<p>The WTF here is that CloseHandle is allowing to close stdin/stdout.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1044573">
				<div id="div-comment-1044573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044573">
			March 11, 2013 at 7:54 am</a>		</div>

		<p>A lot of function documentation in MSDN explicitly says what to do with the return value under the &quot;Return Value&quot; section. &nbsp;For example, what function to call to close it. &nbsp;Sadly, this is completely absent from GetStdHandle &#8211; all it says about successful return values: &nbsp;&quot;If the function succeeds, the return value is a handle to the specified device, or a redirected handle set by a previous call to SetStdHandle.&quot; &#8211; the remarks don&#39;t say anything about closing/not closing the return value, either. &nbsp;The best is BlueViper02&#39;s comment, which is explicit and makes this critical detail clear.</p>
<p>My first thing upon opening Raymond&#39;s article was &quot;OK, let me read the original MSDN page for GetStdHandle and see how the original user was an idiot and failed to RTFM.&quot; &nbsp;But then I saw no documentation that explicitly said whether or not to close it.</p>
<p>As others have noted, there&#39;s little except some subtle clues that precludes GetStdHandle from calling DuplicateHandle based on the way the docs are written.</p>
<p>Would be nice if the docs were changed, but I&#39;m not holding my breath&#8230; (this API must have been documented this way for what, 20 years at least?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1044703">
				<div id="div-comment-1044703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130307-00/?p=5033#comment-1044703">
			March 11, 2013 at 2:42 pm</a>		</div>

		<p>@640k:</p>
<p>close(0);</p>
<p>close(1);</p>
<p>close(2);</p>
<p>What do you think the next 3 lines were?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>