<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1027883">
				<div id="div-comment-1027883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1027883">
			December 21, 2012 at 8:17 am</a>		</div>

		<p>People managed to write applications that depend on memory corruption to work right? &nbsp;Impressive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1027893">
				<div id="div-comment-1027893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1027893">
			December 21, 2012 at 8:29 am</a>		</div>

		<p>@Mark: See &quot;defeating debuggers by stack necromancy&quot; for a dangerous sensitive technique that depends on such things doing exactly what they are defined to do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1027903">
				<div id="div-comment-1027903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1027903">
			December 21, 2012 at 8:54 am</a>		</div>

		<p>If I understand correctly:</p>
<p>The successful return value when incorrectly passed an asynchronous handle exists for backward compatibility.</p>
<p>The inability to behave correctly when passed an asynchronous handle exists because there is no good business reason to fix it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1027913">
				<div id="div-comment-1027913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1027913">
			December 21, 2012 at 9:28 am</a>		</div>

		<p>The best way to deal with this would be to return an error code if an attempt is made to call these functions with asynchronous file handles (fail-fast instead of undefined behavior). Unfortunately, I can guess there are programs which work by accident while passing asynchronous file handles, so this cannot be done since it would break these (already broken in theory, working most of the time in practice) programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1027923">
				<div id="div-comment-1027923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1027923">
			December 21, 2012 at 9:42 am</a>		</div>

		<p>Cesar: How do you know that a a file handle is asynchronous?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1027943">
				<div id="div-comment-1027943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1027943">
			December 21, 2012 at 10:50 am</a>		</div>

		<p>Do backup handles still require SE_BACKUP_PRIVILEGE and SE_RESTORE_PRIVILEGE, even for working on an user&#39;s files only?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1027953">
				<div id="div-comment-1027953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1027953">
			December 21, 2012 at 10:58 am</a>		</div>

		<p>Can NtQueryInformationFile be called from user mode? It allows to get the mode of the handle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1027973">
				<div id="div-comment-1027973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1027973">
			December 21, 2012 at 11:52 am</a>		</div>

		<p>@alegrl: Yes. LoadModule(&quot;ntdll&quot;) GetProcAddress(hNtDll, &quot;NtQueryInformationFile&quot;)</p>
<p>I can&#39;t find documentation for the particular call that would check though.</p>
<p>Even if you do find it, you&#39;re walking on very thin documentation here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1027983">
				<div id="div-comment-1027983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1027983">
			December 21, 2012 at 1:26 pm</a>		</div>

		<p>2Joshua its not a problem here. Is MS&#39;s code, they use undocumented functions more that documented ;)</p>
<p>There&#39;is no problem to &#39;detect&#39; how file handle was opened with NtQueryInformationFile(&#8230;FileModeInformation&#8230;) &#8211; its even documented (fo a kernel mode.. but who cares) &#8211; <a href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff545809(v=vs.85).aspx" target="_new" rel="nofollow">msdn.microsoft.com/&#8230;/ff545809(v=vs.85).aspx</a></p>
<p>But I think checking this will be redundant in normal. There&#39;re pretty many of ways to shot your leg, its only one of them. But of cuz better to check all this when app is being debugged (just like CloseHandle hrows exceptio on bad handles only when under debugger) or when running on checked Windows build.</p>
<div class="post">[<em>Well, except that you need a time machine. FileModeInformation did not exist at the time BackupRead was written. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1027993">
				<div id="div-comment-1027993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric TF Bat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1027993">
			December 21, 2012 at 7:16 pm</a>		</div>

		<p>Raymond, you could replace all your explanations of Windows oddities with &quot;we did that for backwards compatibility&quot; and you&#39;d be 100% right, though a damn sight less entertaining. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1028003">
				<div id="div-comment-1028003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028003">
			December 21, 2012 at 11:32 pm</a>		</div>

		<p>Joshua, I have run into issues like that during legitimate debugging and it was very frustrating since it caused a bug that happened without debugger attached to go away completely when the application was debugged.</p>
<p>I think a good debugging API should guarantee that the debuggee will behave as much as possible if it is not currently being debugged. Of course there are things that cannot be avoided because of hardware limitations: a breakpoint for example changes the value of a byte of program code, so if you don&#39;t want a debugger placing a breakpoint in a piece of code, just use it as an encryption key. But that shouldn&#39;t affect legitimate debugging.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1028013">
				<div id="div-comment-1028013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028013">
			December 22, 2012 at 2:09 am</a>		</div>

		<p>This is bad. If even you guys at Microsoft who are well known for testing everything though and through (no sarcasm here) have managed to not notice the &quot;what if it&#39;s asynchronous&quot; case for ten years, how do you expect a common code monkey to mind that case? Hand-waving it with &quot;you are going to get bugs&quot; in the docs is just not enough. I don&#39;t know the specifics, but I think in this case the backup folks really should have tried to do everything in their power to support async handles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1028023">
				<div id="div-comment-1028023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/passport_4000_gentlyusedunderwear.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>passport@gentlyusedunderwear.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028023">
			December 22, 2012 at 4:18 am</a>		</div>

		<p>Does the Win64 APIs still have this bug? If so, why? There was no backwards compatibility story for 64-bit. Everyone had to recompile.</p>
<p>But really, can&#39;t BackupRead and BackupWrite be modified to detect an async handle and scream as loudly as possible in an event/system log?</p>
<p>In the cases of using BackupRead/Write on an async handle, can it lead to data loss? I&#39;d figure fixing any data loss (or corruption) issues would be paramount.</p>
<div class="post">[<em>Changing the behavior in Win64 would be the worst kind of breaking change: The silent breaking change <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/09/13/10348876.aspx" rel="nofollow">not detected at compile time</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1028053">
				<div id="div-comment-1028053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028053">
			December 22, 2012 at 7:25 am</a>		</div>

		<p>Certainly introducing a breaking change in the backup world is the worst kind of pain. If backup is broken, that leads to all kinds of user hurt.</p>
<p>#ifdef <em>x86</em></p>
<p>// synchronous file handles only, please</p>
<p>BackupRead(&#8230;);</p>
<p>BackupWrite(&#8230;);</p>
<p>#endif</p>
<p>// works with asynchronous file handles</p>
<p>// (and synchronous ones too, of course)</p>
<p>BackupRead2(&#8230;);</p>
<p>BackupWrite2(&#8230;);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1028043">
				<div id="div-comment-1028043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028043">
			December 22, 2012 at 6:00 am</a>		</div>

		<p>@Rosyna: Win64 may be a new API, but it shares the same functions *and semantics* as Win32 (which had the same issue with Win16.) If you&#39;re talking about a brand-new set of functions, then sure, the sky&#39;s the limit. But for existing functions, you&#39;re stuck with what&#39;s already there. It&#39;s like a language standard: innovations are fine as long as you keep currently-existing programs running with as few changes as possible (that&#39;s probably the reason why gets() existed for so long in the standard even though it&#39;s an evil, evil function!)</p>
<p>Regarding the event log, it&#39;s great for programs, but useless for APIs because all that would happen is the system/application log would get spammed with meaningless garbage for anyone but the programmer. The logs already have way too much of that as it is, IMHO; having more low-level entries that you can&#39;t turn off seems like a non-starter to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1028073">
				<div id="div-comment-1028073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028073">
			December 22, 2012 at 3:10 pm</a>		</div>

		<p>I&#39;m a bit curious as to what kind of business case would validate fixing the APIs to work with asynchronous handles. &nbsp;It is just a couple popular programs that crash semi-regularly? &nbsp;I suppose the necessity is lessened due to the nondeterministic nature of the problem (I guess it works correctly more often than not).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1028083">
				<div id="div-comment-1028083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">First name, last name or both?</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028083">
			December 22, 2012 at 3:56 pm</a>		</div>

		<p>I understand you wouldn&#39;t want the function fail if you pass an asynchronous handle due to backwards compatibility. But why not just make it work deterministically by always waiting for the write to finish?</p>
<p>BackupWrite(filehandle, &#8230;)</p>
<p>{</p>
<p>&nbsp;WriteFile(filehandle, &#8230;);</p>
<p>&nbsp;if (filehandle is async) WaitForWriteToEnd(&#8230;);</p>
<p>}</p>
<div class="post">[<em>I thought I explained that in the article. &quot;The backup folks tried fixing the bug but found that it ended up introducing massive compatibility issues.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1028093">
				<div id="div-comment-1028093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028093">
			December 22, 2012 at 6:00 pm</a>		</div>

		<blockquote><p>
  &gt; [I thought I explained that in the article. &quot;The backup folks tried fixing the bug but found that it ended up introducing massive compatibility issues.&quot; -Raymond]
</p></blockquote>
<p>I think the problem is that we are having a hard time imagining just what those issues might be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1028133">
				<div id="div-comment-1028133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">QQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028133">
			December 23, 2012 at 4:09 am</a>		</div>

		<blockquote><p>
  &gt; I think the problem is that we are having a hard time imagining just what those issues might be.
</p></blockquote>
<p>Maybe they used it like:</p>
<p>// write stuff</p>
<p>BackupWrite(some async handle);</p>
<p>// wait for write to finish</p>
<p>WaitForMAGIC();</p>
<p>And MAGIC is something that only happened due to the erroneous use of BackupWrite.</p>
<p>Am I the only one uncomfortable with the fact that the backup software I might trust my data with is written so poorly that it depends on obscure bugs?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1028143">
				<div id="div-comment-1028143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">exiledbear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028143">
			December 23, 2012 at 11:00 am</a>		</div>

		<p>Why can&#39;t you add a line to check if the handle is synchronous to begin with and return an error if it isn&#39;t? That would prevent people from being lazy and passing whatever they felt like passing, and reduce the number of derp calls you get.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1028153">
				<div id="div-comment-1028153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">j b</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028153">
			December 23, 2012 at 12:57 pm</a>		</div>

		<p>exiledbear,</p>
<p>You suggest that a programs that (usually) didn&#39;t fail previously now shall fail consistently.</p>
<p>That is not my idea of &quot;backwards compatibility&quot;. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1028163">
				<div id="div-comment-1028163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028163">
			December 23, 2012 at 2:14 pm</a>		</div>

		<p>Hmmm. BackupRead and BackupWrite when called with an async handle sometimes finish sync and sometimes async, so any caller calling async who managed to deal with the stack corruption must be capable of receiving a sync complete.</p>
<p>This makes for a solution.</p>
<p>If the underlying call returns ERROR_IO_PENDING, immediately call WaitForSingleObject(handle, INFINITE), followed by GetOverlappedResult(), which has the effect of converting the async call to sync.</p>
<div class="post">[<em>Unless the application was relying on the async behavior. For example, calling <code>Wait&shy;For&shy;Single&shy;Object</code> on the handle blocks APCs, including the oplock release request which is preventing the <code>Backup&shy;Read</code> from completing! -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1028753">
				<div id="div-comment-1028753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028753">
			December 27, 2012 at 10:28 am</a>		</div>

		<p>Can&#39;t you do something like:</p>
<p>T RequiresSyncHandle(&#8230;, HANDLE hHandle, &#8230;)</p>
<p>{</p>
<p>&nbsp;if(HandleIsAsync(hHandle)) // defined out of NtQueryInformationFile or whatever</p>
<p>&nbsp;{</p>
<p>&nbsp; &nbsp;HANDLE syncEquivilent = OpenSameFileButThisTimeAsSync(hHandle); // implementation left as an exercise for the reader:</p>
<p>&nbsp; &nbsp;T result = RequiresSyncHandle(&#8230;, hSyncEquivilent, &#8230;);</p>
<p>&nbsp; &nbsp;CloseHandle(syncEquivilent);</p>
<p>&nbsp; &nbsp;return result;</p>
<p>&nbsp;}</p>
<p>&nbsp;Hooray();</p>
<p>}</p>
<div class="post">[<em>See the answer I gave <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/12/21/10379948.aspx#10380432" rel="nofollow">some moments ago</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1028793">
				<div id="div-comment-1028793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121221-00/?p=5773#comment-1028793">
			December 27, 2012 at 10:40 am</a>		</div>

		<p>Also, the other way to fix the problem is to put the OVERLAPPED structure somewhere other than the stack in the case where you detect that the handle is asyncronous (e.g. malloc and then deliberately leak the OVERLAPPED structure so that when the kernel destroys it, nobody cares).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>