<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-312603">
				<div id="div-comment-312603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Name required. Yeah yeah.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051012-00/?p=33803#comment-312603">
			October 13, 2005 at 3:18 am</a>		</div>

		<p>Do people really do this kind of thing? Split their UI into several threads, I mean. I would expect it to lead to unpredicatable UI behaviour, which is one of the most basic usability no-nos.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-312633">
				<div id="div-comment-312633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051012-00/?p=33803#comment-312633">
			October 13, 2005 at 4:11 am</a>		</div>

		<p>Thursday, October 13, 2005 3:18 AM by Name required. Yeah yeah. </p>
<p>&gt; Do people really do this kind of thing?<br />
<br />&gt; Split their UI into several threads, I mean.</p>
<p>Suppose a person starts out without that detailed knowledge of Windows APIs or MFC, but they know how to create separate threads to communicate with separate clients or read from separate devices.  Maybe the person wants to display all of the events in a single window.  The person might design it with a semaphore so that any thread who wants to append to the window takes the semaphore and updates the window.  Oops.  MFC&#8217;s documentation of the fact that this isn&#8217;t allowed seems to be published in assert statements instead of in MSDN.  AFTER that, people learn not to split their UI into several threads.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-315653">
				<div id="div-comment-315653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051012-00/?p=33803#comment-315653">
			October 25, 2005 at 8:43 pm</a>		</div>

		<p>Norman: It&#8217;s important to understand what it is that MFC doesn&#8217;t allow, and also to understand that it&#8217;s a limitation of MFC and not the Windows API.  In addition, the limitation is plainly documented in MSDN, for example, at &quot;Multithreading: Programming Tips&quot; at <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/en-us/vccore98/html/_core_multithreading.3a_.programming_tips.asp" rel="nofollow"></a><a href="http://msdn.microsoft.com/library/en-us/vccore98/html/" rel="nofollow">http://msdn.microsoft.com/library/en-us/vccore98/html/</a><em>core_multithreading.3a</em>.programming_tips.asp</p>
<p>MFC uses thread-local storage for its windows handle map (i.e., the map between a handle for a windows window and a C++ CWnd object).  Thus, any MFC function (like CDocument::UpdateAllViews) that needs to map from a CWnd object to to a corresponding HWND will fail if called from a worker thread.</p>
<p>That&#8217;s a limitation of MFC, but not a limitation of the API, for the reason that if you know the HWND directly, then it&#8217;s always possible to call the API function directly (i.e., without the MFC wrapper).</p>
<p>As for whether it&#8217;s a good idea to split responsibility for the UI between different threads, well, that&#8217;s a different question.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>