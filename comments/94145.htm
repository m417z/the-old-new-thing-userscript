<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1261785">
				<div id="div-comment-1261785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261785">
			August 23, 2016 at 8:01 am</a>		</div>

		<p>Zan Lynx&#8217;s comment on your post a couple of days ago prompted me to read about Linux&#8217;s futexes but I didn&#8217;t realise they had come to win32 in the form of WaitOnAddress, so this is timely.</p>
<p>One difference is that futexes do work cross-process.  You need to explicitly share the memory between processes and it copes with the virtual addresses differing.</p>
<p>That said, I can&#8217;t find any documentation (other than your blog) that restricts WaitOnAddress to a single process.  That might be because I can&#8217;t find an MSDN overview page for these new functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1261805">
				<div id="div-comment-1261805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261805">
			August 23, 2016 at 8:13 am</a>		</div>

		<p>&#8220;lock-free hash table&#8221;&#8230;  Is this exposed as an API so that it can be used generally (Like the SList* functions expose a lock-free list)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1261825">
				<div id="div-comment-1261825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.farnz.org.uk/' rel='external nofollow' class='url'>Simon Farnsworth</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261825">
			August 23, 2016 at 8:17 am</a>		</div>

		<p>For low level Linux geeks, this sounds similar to the futex syscall, but confined to a single process &#8211; it has the same issues with spurious wake ups.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1261855">
				<div id="div-comment-1261855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261855">
			August 23, 2016 at 10:31 am</a>		</div>

		<p>Looks like a library function that can build the locking primitive that I want (following properties):</p>
<p>* Initialize merely sets the structure to values<br />
* If you can prove that nobody is waiting, freeing the memory suffices to free the data structure<br />
* Can lock by a thread<br />
* Waits with low CPU usage until unlocked (occasional spurious wakeups handled by the library code aren&#8217;t a problem)<br />
* Can be released by a different thread that acquired it (this allows handing locked objects to other threads w/o unlocking them)</p>
<p>But the documentation has the following problems:<br />
_In_opt_ on a DWORD looks wrong but may not be; however passing a constant -1 to a DWORD argument is a bad idea. Should be INFINITE here?<br />
Not documented how to tell why the wait failed and returned false, and it appears you need to care.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1261865">
				<div id="div-comment-1261865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261865">
			August 23, 2016 at 11:27 am</a>		</div>

		<p>Yes, INFINITE would be a better name for the all-bits-set value than -1. And GetLastError() works after failure (though the only thing you would expect to see is ERROR_TIMEOUT). I&#8217;ll ask for those to be fixed.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1261875">
				<div id="div-comment-1261875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261875">
			August 23, 2016 at 2:53 pm</a>		</div>

		<p>How about &#8220;Low memory conditions&#8221;? I&#8217;ll bet there&#8217;s a specific code for that one.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1261885">
				<div id="div-comment-1261885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261885">
			August 23, 2016 at 3:02 pm</a>		</div>

		<p>You can treat that the same as a spurious wake-up. Spurious wake-ups mean that the return value of WaitOnAddress is largely meaningless.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1262135">
				<div id="div-comment-1262135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1262135">
			August 24, 2016 at 11:16 am</a>		</div>

		<p>I got used to a particular idiom; that is, decode all expected cases from GetLastError() and propagate any unexpected case. This is really hard unless all expected cases have documented return values for GetLastError() here; else an unexpected error condition on a future version of Windows can send the app into an infinite loop.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1261895">
				<div id="div-comment-1261895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261895">
			August 23, 2016 at 5:01 pm</a>		</div>

		<p>So how many bytes does a createevent call allocate anyway</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1261915">
				<div id="div-comment-1261915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudonym</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261915">
			August 23, 2016 at 10:00 pm</a>		</div>

		<p>Wouldn&#8217;t it be great if WaitOnAddress could use the debug registers and/or page table hackery so you never had to call Wake&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1261965">
				<div id="div-comment-1261965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261965">
			August 24, 2016 at 5:55 am</a>		</div>

		<p>You could roll your own there by allocating a page and setting the permissions to readonly. Call WaitOnAddress on one of those pages.</p>
<p>Then you could trap writes and call Wake­By­Address­Single yourself.</p>
<p>Might as well just use an Event though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1262045">
				<div id="div-comment-1262045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1262045">
			August 24, 2016 at 8:18 am</a>		</div>

		<p>The performance of taking a page fault or a trap would be horrible. Not all processor have debug registers, and even for x86, it would mean that you could have only four active WaitOnAddress calls at a time.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1263105">
				<div id="div-comment-1263105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudonym</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1263105">
			September 1, 2016 at 5:56 pm</a>		</div>

		<p>Oh, I know. I was kidding. The whole point of WaitOnAddress is that it&#8217;s mostly (entirely?) in user space if there&#8217;s no contention.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1262085">
				<div id="div-comment-1262085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frodo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1262085">
			August 24, 2016 at 9:39 am</a>		</div>

		<p>Why can&#8217;t Wait­On­Address handle the spurious wake internally?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1262315">
				<div id="div-comment-1262315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mattfife.com' rel='external nofollow' class='url'>matt</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1262315">
			August 25, 2016 at 9:49 pm</a>		</div>

		<p>If you wait on a byte address, does this get triggered by writes to the same cache line? Example, most systems have cache lines of 32 or 64 bits. Lets say you wait on the low order byte, but write to the upper order byte. It dirties the whole cache line. Do you rely on hardware interrupts to trigger this function &#8211; and/or does WaitOnAddress have to mask for the correct bits? </p>
<p>I ask because it could be a performance issue.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1262415">
				<div id="div-comment-1262415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1262415">
			August 26, 2016 at 2:25 pm</a>		</div>

		<p>As noted in <a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145">part 1 if the series</a>, you must explicitly call WakeByAddressAll or WakeByAddressSingle.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>