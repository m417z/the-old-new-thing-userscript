<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (40)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-955223">
				<div id="div-comment-955223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tobi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955223">
			December 27, 2011 at 7:33 am</a>		</div>

		<p>Terrible junk code. Such people are actively causing harm in the code base.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955253">
				<div id="div-comment-955253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955253">
			December 27, 2011 at 7:52 am</a>		</div>

		<p>I&#39;ve seen the first &#39;for&#39; loop in the last few months, except with maybe three if(iterator == constant)&#39;s in the loop, with longer but mostly repeated code in each &#39;if&#39; body&#8230; not sure how the person got into writing that, though there were also variables declared that were never used, so probably poor comprehension combined with cut-and-paste from some other source.</p>
<p>The best part about the library analogy is that once they find the right book they don&#39;t break out! No no no &#8211; they still keep on looping through and checking titles until the last book in the library.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955263">
				<div id="div-comment-955263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PersonalNexus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955263">
			December 27, 2011 at 7:53 am</a>		</div>

		<p>Granted, this is a terrible coding pattern, but who would write such code in the first place? Has such code ever been seen &quot;in the wild&quot;? I know I haven&#39;t&#8230;</p>
<div class="post">[<i>I remember one customer who used this anti-pattern heavily. You also see this anti-pattern used in real life: &quot;What flavors do you have?&quot; and then after the list of flavors is recited, &quot;I was hoping you had raspberry.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955273">
				<div id="div-comment-955273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955273">
			December 27, 2011 at 7:57 am</a>		</div>

		<p>Thanks for the library analogy, it was amusing as well as accurate. I take the principle of avoiding code like this even further. I avoid any code that does anything I cannot justify as necessary. Like performing the same calculation twice, no matter how apparently simple. Every time it is executed it wastes time. If you get a different answer the second time, it&#39;s a hard to find bug. If everyone was more careful about the code they write, there would be a lot fewer applications that either cripple the performance of a computer more than 3 years old or exhibit hard to find bugs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955283">
				<div id="div-comment-955283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">None</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955283">
			December 27, 2011 at 8:08 am</a>		</div>

		<p>[I remember one customer who used this anti-pattern heavily. You also see this anti-pattern used in real life: &quot;What flavors do you have?&quot; and then after the list of flavors is recited, &quot;I was hoping you had raspberry.&quot; -Raymond]</p>
<p>Yes, but at least in that case its just checking to see if they had something better. &nbsp;Like if you ask for chocolate, you miss the fudge brownie. &nbsp;But if you just ask for the fudge brownie you miss the double fudge brownie. &nbsp;Or perhaps a good party cake ice cream is best, just because they have it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955303">
				<div id="div-comment-955303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955303">
			December 27, 2011 at 8:17 am</a>		</div>

		<p>I see the last case wrapped in Linq a lot. In fact, every use of Linq in this project by the guy who introduced it was either that case or trivial with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955313">
				<div id="div-comment-955313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob P</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955313">
			December 27, 2011 at 8:29 am</a>		</div>

		<p>My favorite antipattern was the one I called the try-while-true-for-loop. &nbsp;I originally observed it in JavaScript:</p>
<p>var someArray = []; // was populated</p>
<p>var index = 0;</p>
<p>try {</p>
<p>&nbsp;while (true) {</p>
<p>&nbsp; &nbsp;var item = someArray[index]; &nbsp;// array index out of bounds breaks us out of the loop</p>
<p>&nbsp; &nbsp;doSomething(item);</p>
<p>&nbsp; &nbsp;index++;</p>
<p>&nbsp;}</p>
<p>} catch (e) {</p>
<p>&nbsp;// we&#39;ve broken out of the loop</p>
<p>}</p>
<p>It could have been simplified to:</p>
<p>for (var index = 0; index &lt; someArray.length; index++) {</p>
<p>&nbsp;doSomething(someArray[index]);</p>
<p>}</p>
<p>Oh well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955333">
				<div id="div-comment-955333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darkstar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955333">
			December 27, 2011 at 8:46 am</a>		</div>

		<p>Your example of Hashtables is a nice one: depending on the implementation, you might get NULL from the &quot;return hashtable[&quot;target&quot;];&quot; statement, or an exception. If you positively don&#39;t want to cause an exception you might first try and check if the element you&#39;re looking for is indeed there. Of course you can always put &quot;try..catch&quot; around it but then there&#39;s not much of a difference in LOCs between</p>
<p>&nbsp;if (hashtable.containsKey(&quot;target&quot;)) return hashtable[&quot;target&quot;]; else return NULL;</p>
<p>and</p>
<p>&nbsp;try { return hashtable[&quot;target&quot;]; } catch () { return NULL; };</p>
<p>-Darkstar</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-craig_stuntzacm-org even thread-even depth-1" id="comment-955343">
				<div id="div-comment-955343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Craig+Stuntz' rel='external nofollow' class='url'>Craig Stuntz</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955343">
			December 27, 2011 at 8:48 am</a>		</div>

		<p>I can do worse!</p>
<p><a rel="nofollow" target="_new" href="http://thedailywtf.com/Articles/The_FOR-CASE_paradigm.aspx" rel="nofollow">thedailywtf.com/&#8230;/The_FOR-CASE_paradigm.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955363">
				<div id="div-comment-955363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul M. Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955363">
			December 27, 2011 at 10:23 am</a>		</div>

		<p>@Paul: &quot;I avoid any code that does anything I cannot justify as necessary. Like performing the same calculation twice, no matter how apparently simple.&quot;</p>
<p>Funny you should mention that. You might find this old article by Raymond to be interesting:</p>
<p>&quot;Don&#39;t save anything you can recalculate&quot;</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2004/12/20/327369.aspx" rel="nofollow">blogs.msdn.com/&#8230;/327369.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955373">
				<div id="div-comment-955373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955373">
			December 27, 2011 at 10:32 am</a>		</div>

		<p>I liked how one of the commenters on the Daily WTF called it: a switcheration.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955243">
				<div id="div-comment-955243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955243">
			December 27, 2011 at 7:49 am</a>		</div>

		<p>In other words, don&#39;t use a linear search if a constant-time operation is available. But &quot;for-if antipattern&quot; is couched in terms that people who&#39;ve never heard of &quot;linear search&quot; would understand.</p>
<p>I usually present this as &quot;hash tables are your friends&quot;, because the most common instance I see is someone building simple arrays or lists and then using linear searches to find items &#8212; not uncommonly there are multiple levels, leading to loops in loops &#8212; instead of using hash tables, thus turning an operation that should take a negligible amount of time into a quadratic beast of burden. The pernicious thing is that the faster machines become, the less noticeable their initial poor choice of data structures is, until the size of the collection reaches a crucial tipping point that causes cache/page misses and performance suddenly takes a dramatic nosedive (instead of gradually worsening).</p>
<p>I haven&#39;t yet seen someone not understanding how hash tables work and using Raymond&#39;s second example, but this month I&#39;ve had no less than three occasions of hash tables not being used when they should have been, so &#39;tis the season. And one of these was (of course) in code I myself wrote a few months ago, because &quot;it&#39;s a hundred elements at most, no need to get fancy&quot;. That *was* true when I wrote the code, but the crucial follow-up question &quot;and how is this number expected to change in the future&quot; was not asked. There are several morals in this that I won&#39;t bother to spell out&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955403">
				<div id="div-comment-955403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Code priorities</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955403">
			December 27, 2011 at 5:03 pm</a>		</div>

		<ol>
<li>
<p>Optimize for readability/maintainability.</p>
</li>
<li>
<p>&quot;Optimize&quot; for anything else. Including performance. Including security.</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955423">
				<div id="div-comment-955423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955423">
			December 27, 2011 at 6:22 pm</a>		</div>

		<p>@Code Priorities: Aside from defence-in-depth, something is either secure or it isn&#39;t. As such security isn&#39;t on the list of things to optimise for, but something you have to keep in mind when deciding what the software must do and how it does it.</p>
<p>It isn&#39;t one of those things you start to look at when you have a working system, but rather one of those things you start thinking about before your hands even touch the keyboard, along with required functionality and such.</p>
<p>Trying to tack security on later is a long and painful process, which is a shame since coding securely isn&#39;t any worse than not when you do it from the start.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955433">
				<div id="div-comment-955433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Hoffmann</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955433">
			December 27, 2011 at 6:24 pm</a>		</div>

		<p>Have you asked any of these programmers why they used those anti-patterns? &nbsp;I have a feeling the reasons they give might actually be legitimate and something you&#39;d never guess in a million years if they never told you.</p>
<p>I&#39;ve written code that&#39;s sort of like that in the past, but there were legitimate reasons for doing so.</p>
<p>Consider that first for loop. &nbsp;Maybe it&#39;s possible that the code has gone through many revisions, and that for loop used to do other things besides &quot;doing something&quot; when i equaled 42. &nbsp;At a later point in time, maybe that programmer was asked to remove some of that code. &nbsp;Any time you make changes to code, you want to minimize how much code you change in order to minimize the probability of introducing bugs. &nbsp;Maybe that&#39;s what that programmer was thinking.</p>
<p>It&#39;s also possible that said programmer was under pressure to make many code changes in a short period of time, so he was hurrying to get the code changes done as fast as possible while being careful not to introduce bugs. &nbsp;Maybe he didn&#39;t feel &quot;safe&quot; refactoring that changed for loop into just &quot;do_something(42)&quot; and he didn&#39;t have the time to think about it.</p>
<p>Another possibility is that maybe the programmer originally wanted to do other things in that for loop, but decided later not to. &nbsp;When he made that later decision, he thought &quot;Well maybe I might change my mind again, so I&#39;ll leave the code in just in case and comment it out. &nbsp;That way, if I do change my mind later, I can just uncomment all that code instead of having to retype it all.&quot; &nbsp;Then six months later, a different programmer decides to remove all commented out code from the programmer so that the source code looks cleaner. &nbsp;This second programmer is scared of making code changes (because he doesn&#39;t want to introduce bugs by mistake).</p>
<p>Things like this just happen for weird reasons like that.</p>
<div class="post">[<i>I had the opportunity to ask the programmer who wrote the <code>Directory.GetFiles</code> loop why they didn&#39;t do it the more direct way. &quot;Oh, that&#39;s a neat trick,&quot; they said. (The &quot;<code>if (i == 42)</code>&quot; example did not come from a real program. It was an extreme example.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955463">
				<div id="div-comment-955463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zedware</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955463">
			December 27, 2011 at 8:34 pm</a>		</div>

		<p>I happen to see some code in the database applications, which fetch some records from the database and loop over it to find a match. It can be rewritten as a simple SQL with where conditions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955473">
				<div id="div-comment-955473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955473">
			December 27, 2011 at 9:12 pm</a>		</div>

		<p>@Darkstar</p>
<p>That&#39;s true, but there&#39;s another caveat&#8211; note that the original code did not return at all if the index was undefined. &nbsp;Putting</p>
<p>if (hashtable.containsKey(&quot;target&quot;)) return hashtable[&quot;target&quot;];</p>
<p>would suffice to recreate the original code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955383">
				<div id="div-comment-955383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955383">
			December 27, 2011 at 1:38 pm</a>		</div>

		<p>I&#39;ve *written* something even more stupid, but related. I started with some code that walked some variable length data structures. One of the thing it did was count the total length. Another thing it did was do something with each and every item.</p>
<p>As the program developed, the &quot;do something&quot; bit became less complex and after a lot (but not quite enough) refactoring, I was left with the moral equivalent of:</p>
<p> &nbsp; size_t n=0;</p>
<p> &nbsp; for (char* p=start; p&lt;end; ++p)</p>
<p> &nbsp; &nbsp; &nbsp;++n;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955483">
				<div id="div-comment-955483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Guillaume</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955483">
			December 27, 2011 at 10:35 pm</a>		</div>

		<p>I&#39;m curious about your point on the race condition :</p>
<ul>
<li>
<p>for regular &quot;normal&quot; business programming, is it really useful to worry about the possibility that a file can be deleted between two lines of code ?</p>
</li>
<li>
<p>how would you fix it ?</p>
</li>
</ul>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955503">
				<div id="div-comment-955503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phaeron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955503">
			December 28, 2011 at 2:33 am</a>		</div>

		<p>I know this is technically risking a nitpicker&#39;s corner entry, but doesn&#39;t the File.Exists() code introduce a problem with 8.3 filename collisions? I think the Directory.GetFiles() version is immune to that problem, inefficient as it may be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955513">
				<div id="div-comment-955513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon R</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955513">
			December 28, 2011 at 4:38 am</a>		</div>

		<p>Regarding the question of using a dictionary to look up a value. That&#39;s all well and good if you already have a dictionary, but if all you have available is an array, then iterating through the array to find the one element you need to do something to will be quicker than building a dictionary in order to do one single lookup on it. (Of course, if you will later need to do other lookups and can cache the dictionary, then building a dictionary becomes more advantageous).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955523">
				<div id="div-comment-955523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955523">
			December 28, 2011 at 4:43 am</a>		</div>

		<p>You have to use ntfs transactions if you want the FS to behave non volatile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955533">
				<div id="div-comment-955533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">OCD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955533">
			December 28, 2011 at 4:44 am</a>		</div>

		<p>@Joshua</p>
<p>&quot;Any time you make changes to code, you want to minimize how much code you change in order to minimize the probability of introducing bugs.  Maybe that&#39;s what that programmer was thinking.&quot;</p>
<p>This is a general principal that leads to a concept I&#39;ve seen referred to as &quot;bit rot&quot;. Horrendous code that is a result of myriads of minor changes (small fixes and enhancements). When code goes into maintenance mode this approach is often taken, but it is a blinkered approach. I have seen bug after bug appear in areas of code, where the root cause of the problem was a bad design decision. A refactor then becomes the &quot;correct&quot; bug fix. Too often I see developers trying to solve for the local minima, while failing to see the bigger picture.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955543">
				<div id="div-comment-955543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I_guess_im_an_idiot</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955543">
			December 28, 2011 at 4:54 am</a>		</div>

		<p>if (File.Exists(&quot;desktop.ini&quot;))</p>
<p>{</p>
<p>&nbsp; &nbsp;return new StreamReader(&quot;desktop.ini&quot;);</p>
<p>}</p>
<p>why is this bad? &nbsp;should you just return new StreamReader(&quot;desktop.ini&quot;) and catch the fnf exception?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955553">
				<div id="div-comment-955553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I_guess_im_an_idiot</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955553">
			December 28, 2011 at 5:01 am</a>		</div>

		<p>and yes, I read the follow-on comment, so i guess &quot;why is this bad&quot; is answered. So I guess my question is really &quot;what should I do?&quot;</p>
<div class="post">[<i>This article is not about &quot;the best way to open a stream&quot;; it&#39;s about an anti-pattern. The stream was just an example. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955563">
				<div id="div-comment-955563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955563">
			December 28, 2011 at 5:14 am</a>		</div>

		<p>I bet the blog software programmers are using them too&#8230;my first long comment was lost.</p>
<p>A shorter one is here:</p>
<p>Modern compilers will compile both patterns to the same executable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955573">
				<div id="div-comment-955573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955573">
			December 28, 2011 at 6:43 am</a>		</div>

		<p>As long as you only catch the FileNotFound exception and not any other exception that creating the StreamReader could result in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955583">
				<div id="div-comment-955583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I_guess_im_an_idiot</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955583">
			December 28, 2011 at 7:05 am</a>		</div>

		<p>Thanks for the comments @Neil and @Danny, I guess I need to figure out the cost of throwing the exception (the only thing I really remember is the old &quot;Exceptions are expensive&quot; trope) vs File.Exists then return new StreamReader.</p>
<p>(I guess I&#39;m defensive about it because I do if(File.Exists(whatever)){return new StreamReader(whatever);} as a matter of course, all the time, and while I&#39;m used to not knowing what I am talking about half the time, I thought I was doing the right thing.)</p>
<p>you learn something every day :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955493">
				<div id="div-comment-955493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955493">
			December 27, 2011 at 11:30 pm</a>		</div>

		<p>*cough*Managed*cough* code example sighted.</p>
<p>@Guillaume</p>
<p>No body is forcing you to care about this particular race condition. Your manager most definitely will not sleep more comfortably if you handle it somehow, but the next maintenance programmer will have one less thing to worry about if you do it right.</p>
<p>As for your next point, in managed world there is no way to avoid the race condition without watching for FileNotFoundException. So you may as well open the file directly rather than checking for it first.</p>
<p>In native domain, CreateFile would behave similarly with an error code INVALID_HANDLE_VALUE for any potential error and then you have to call GetLastError for details. There is a LockFile/Ex function but that: a) locks byte ranges, b) and requires a file handle in the first place to begin with which brings us back to CreateFile and cousins.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955593">
				<div id="div-comment-955593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">POKE53280,0</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955593">
			December 28, 2011 at 7:52 am</a>		</div>

		<p>@I_guess_im_an_idiot: the problem with your code:</p>
<p>if(File.Exists(whatever)){</p>
<p>&nbsp;return new StreamReader(whatever);</p>
<p>}</p>
<p>is that the file could not exist anymore between the call of File.Exists() and the execution of the new StreamReader().</p>
<p>See exogenous exceptions in this very interesting blog post by Eric Lippert:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/ericlippert/archive/2008/09/10/vexing-exceptions.aspx" rel="nofollow">blogs.msdn.com/&#8230;/vexing-exceptions.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955603">
				<div id="div-comment-955603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955603">
			December 28, 2011 at 7:59 am</a>		</div>

		<p>If you do want to see if a non-directory file exists in .NET as opposed to checking if it&#39;s accesible to the application:</p>
<p>public static bool FileExists(string path)</p>
<p>{</p>
<p>&nbsp; &nbsp;try</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;return (File.GetAttributes(path) &amp; (FileAttributes.Directory | FileAttributes.Device)) == 0;</p>
<p>&nbsp; &nbsp;}</p>
<p>&nbsp; &nbsp;catch (FileNotFoundException)</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;return false;</p>
<p>&nbsp; &nbsp;}</p>
<p>}</p>
<p>And for a directory file:</p>
<p>public static bool DirectoryExists(string path)</p>
<p>{</p>
<p>&nbsp; &nbsp;try</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;return (File.GetAttributes(path) &amp; FileAttributes.Directory) != 0;</p>
<p>&nbsp; &nbsp;}</p>
<p>&nbsp; &nbsp;catch(FileNotFoundException)</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;return false;</p>
<p>&nbsp; &nbsp;}</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955613">
				<div id="div-comment-955613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955613">
			December 28, 2011 at 8:03 am</a>		</div>

		<p>In addition to the race, the BCL&#39;s File.Exists() method is of limited value as it can only confirm that a file exists at a location, not that it does not exist. (It&#39;s the same with Directory.Exists().)</p>
<p>This is because File.Exists() does not discriminate between a file not existing and an underlying error condition that prevents the existence of a file being determined. It returns false in both cases.</p>
<p>What has been implemented is not Exists() semantics, it is IsAccessible() semantics, and only in the instant that you call it. You cannot assume that it is still accessible after due to the race.</p>
<p>So&#8230; just try and open the file and handle the FileNotFoundException exception.</p>
<p>So&#8230; just try and open the file and handle the exception.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955623">
				<div id="div-comment-955623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955623">
			December 28, 2011 at 8:34 am</a>		</div>

		<p>&quot;Regarding the question of using a dictionary to look up a value. That&#39;s all well and good if you already have a dictionary, but if all you have available is an array, then iterating through the array to find the one element you need to do something to will be quicker than building a dictionary in order to do one single lookup on it.&quot;</p>
<p>That goes without saying, so I didn&#39;t say it. Don&#39;t make me bring back the nitpicker&#39;s corner.</p>
<p>Wait, I don&#39;t have one and this isn&#39;t even my blog. Never mind.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955713">
				<div id="div-comment-955713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Raphael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955713">
			December 28, 2011 at 1:23 pm</a>		</div>

		<p>Well, I can think of an Ada example where the for-case pattern makes sense. Since a case must include all values of a given type, doing a for over the full range of a type and then a case inside it would make sure to handle all values in that range.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955793">
				<div id="div-comment-955793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955793">
			December 29, 2011 at 7:15 am</a>		</div>

		<p>&quot;You also see this anti-pattern used in real life: &#39;What flavors do you have?&#39; and then after the list of flavors is recited, &#39;I was hoping you had raspberry.&#39;&quot;</p>
<p>For-if might be a reasonable method in this case. &nbsp;The customer may believe that the odds of the provider having raspberry are low, and must therefore choose an alternative. If the provider&#39;s options are unknown and the odds are high that the entire list will need to be recited, it may not optimize the scenario to ask if raspberry is available before asking for the list. &nbsp;The customer may also be in a situation where raspberry sounds good now, but might hear something that sounds better (I can&#39;t think of a situation where this would happen in computing, but it works in this analogy).</p>
<p>You could also imagine scenarios where the customer had multiple preferred options; something like &quot;I was hoping for raspberry, blueberry, or strawberry.&quot; Depending on what options are available to make that determination, it may be more efficient to just ask for the list and see if one of the preferred options is there. &nbsp;Doing so may even free the provider to service other requests while the customer is making a decision. &nbsp;This is fairly close to what happens when a server at a restaurant hands you a menu.</p>
<p>The questions I would try to answer before deciding on the best approach are:</p>
<ol>
<li>
<p>How long are the customer and provider&#39;s lists?</p>
</li>
<li>
<p>How often do they change?</p>
</li>
<li>
<p>How often will each list need to be queried/compared?</p>
</li>
<li>
<p>What is the cost of communication between the customer and provider?</p>
</li>
<li>
<p>What methods does the provider support to answer the customer&#39;s questions?</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-sambeetkphotmail-com odd alt thread-odd thread-alt depth-1" id="comment-955813">
				<div id="div-comment-955813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/sambeet' rel='external nofollow' class='url'>sambeet</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955813">
			December 29, 2011 at 10:29 am</a>		</div>

		<p>I am not so sure that i can write this off as an absolute anti pattern. of course, if you are not breaking from the loop, it is a problem. But consider the coding / real life scenarios:</p>
<p>1. What if you are given a list and are asked to operate on a specific element. I cannot assume that the list is always hashed. Depending on the size of the list and / or frequency of execution of my logic, i may simply decide to iterate till i find the right item. I would not blindly assume that i need to hash the list every time because, hashing comes at the expense of additional memory and one time processing.</p>
<p>2. Going to your flavor logic, lets assume that all flavors are on the display and there is no server [this is a true representation of the concept]. Are you not going to go through the list till you see the flavour you want? NOW, lets assume the person being present at the counter. I do not have to spend time looking at an extensive menu display. i can simply ask the server. HERE, the server IS my hash in a way.</p>
<p>So, in sort, this is a bad practice but only if</p>
<p>1. if you own the list in your code</p>
<p>2. frequently need to operate on a specific element</p>
<p>3. Do not have member contract considerations to implement hashing</p>
<div class="post">[<i>Obviously not every enumeration falls into for-if anti-pattern. Only the ones where the container provides direct addressing. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955883">
				<div id="div-comment-955883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-955883">
			December 29, 2011 at 8:51 pm</a>		</div>

		<p>Phaeron above is right. Calling GetFiles() avoids short-name collisions as it won&#39;t return any short names.</p>
<p>Too bad there&#39;s no option to the wildcard expansion to FindFirstFile to avoid them. However, the way GetFiles() works, is it returns the long name for any file matching by shortname to wildcard (I don&#39;t know if Find*File always returns the long name or if .NET</p>
<p>makes another call) so simply repeating the match in the code fixes the problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-956013">
				<div id="div-comment-956013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-956013">
			December 30, 2011 at 4:46 pm</a>		</div>

		<p>Re: short names (and maybe other related filesystem quirks)</p>
<p>Surely this is another problem with the for-if anti-pattern, rather than something it does right? I mean, if the filename is &quot;longfi~1.txt&quot; instead of &quot;desktop.ini&quot;, presumably the intended behaviour would be that the routine succeeds, which the for-if anti-pattern doesn&#39;t. (And again, in this case it would be even better to &quot;just go ahead and do it, and catch the exception if it doesn&#39;t work&quot;.)</p>
<p>Having said that, it does prove that there&#39;s a difference in behaviour, and so it&#39;s possible in principle that the for-if anti-pattern would have better results in some situations.</p>
<div class="post">[<i>Trust me on this &#8212; the code that used the for-if anti-pattern was not doing so because it was worried about short names. (The actual example was not a file system query but a database query.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-956073">
				<div id="div-comment-956073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-956073">
			December 30, 2011 at 10:39 pm</a>		</div>

		<p>Joshua: FindFirstFile always returns a long name along with the short name if it exists, and GetFiles just uses that behind the scenes.</p>
<p>As of W7 and WS2008R2, FindFirstFileEx can be passed FindExInfoBasic to have it not query the short names, so you can avoid the short names if your OS supports it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-956313">
				<div id="div-comment-956313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111227-00/?p=8793#comment-956313">
			January 2, 2012 at 5:59 pm</a>		</div>

		<p>[Trust me on this &#8212; the code that used the for-if anti-pattern was not doing so because it was worried about short names. (The actual example was not a file system query but a database query.) -Raymond]</p>
<p>Filed under: completely missing the point (not Raymond, but everybody else). This changes just about everything.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>