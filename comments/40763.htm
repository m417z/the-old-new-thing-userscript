<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-140843">
				<div id="div-comment-140843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Johan Ericsson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-140843">
			February 3, 2004 at 7:58 am</a>		</div>

		<p>That must be the first psuedo-code that I&#8217;ve seen that uses reinterpret_cast&lt;&gt;. Cool!</p>
<p>Of course, if you use new[] and then delete only a single destructor gets called. That is the destructor for the first element. However, I&#8217;m not sure what the outcome of deleting the first element is as compared to deleting the hidden count. Perhaps the count gets leaked as well. I don&#8217;t remember this use case causing any of the CRT leaking routines to report any memory leaking? So, I&#8217;m not sure about this part.</p>
<p>If you use new and then delete[], then you are really in trouble. You will first call a destructor an unspecified number of times, depending on the random value of the hidden count. Then you will try to delete the hidden count, which isn&#8217;t memory that you&#8217;ve allocated. Seems like you will crash.</p>
<p>These are some more reasons to use a vector&lt;&gt; to wrap the array pointer, instead of doing your own memory management.</p>
<p>I seem to recall that Andrei Alexandrescu wrote some interesting articles for CUJ (C++ User&#8217;s Journal) where he was trying to create a super vector&lt;&gt;. He complained that it was obvious that the compiler was keeping track of the count, yet the vector also has to keep track of the count. This seems inefficient&#8230; Its too bad that C++ doesn&#8217;t provide a Standard way of getting a hold of that count.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-140853">
				<div id="div-comment-140853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.rotd.org/' rel='external nofollow' class='url'>Andreas Magnusson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-140853">
			February 3, 2004 at 10:22 am</a>		</div>

		<p>Wouldn&#8217;t it be possible to let scalar-new be identical to &quot;new T[1]&quot;? That way calling vector-delete on a scalar-new would work fine.<br />
<br />It would of course be a little bit more inefficient to delete single elements as well as use more memory. So maybe it&#8217;s a bad idea to make illegal programs work on the cost of legal ones&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-140893">
				<div id="div-comment-140893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">runtime</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-140893">
			February 3, 2004 at 10:37 am</a>		</div>

		<p>All of these problems could be solved if new (silently) returned a 1-element array. Then calling delete or delete[] would do the same thing: check the p[-1] size count and then calling the destructors. The debug version of delete could assert(p[-1] == 1), alerting the programmer if he called delete on an array when he should have called delete[].</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-140913">
				<div id="div-comment-140913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-140913">
			February 3, 2004 at 11:17 am</a>		</div>

		<p>The assert wouldn&#8217;t be accurate, as it is possible to new Foo[1] (and even new Foo[0] is legal!).</p>
<p>What will actually happen if you use scalar delete for array new is that it will destroy a single object, then pass the pointer to free() which will back up to get ITS own count but will instead get the object count.  It will then free too little, and most likely corrupt the heap.  Unless your malloc uses a hashtable of addresses to store size data, then you will probably corrupt the heap.  </p>
<p>This behavior is dictated by the standard.  As a developer, you should do the right thing always and not rely on the compiler to fix things for you.  Always run your code under Valgrind or BoundsChecker or Purify to find these kinds of problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-140933">
				<div id="div-comment-140933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-140933">
			February 3, 2004 at 11:22 am</a>		</div>

		<p>Johan, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/04/67384.aspx" rel="nofollow">tomorrow&#39;s entry</a> will discuss some of your points. In particular, the Bonus Exercise will explain why there is no &quot;Give me the number of elements in this dynamically-allocated array&quot; operator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-140943">
				<div id="div-comment-140943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-140943">
			February 3, 2004 at 11:22 am</a>		</div>

		<p>I should also point out that none of the suggestions will save you from:</p>
<p>Foo *p = new Foo[10];<br />
<br />delete p+1;</p>
<p>If the concept of array and scalar new and delete frighten you, use malloc and placement new.</p>
<p>Foo *p = (Foo *)malloc(sizeof(Foo));<br />
<br />new (p) Foo;<br />
<br />p-&gt;blah();<br />
<br />p-&gt;~Foo();<br />
<br />free(p);</p>
<p>Amaze your friends!  Alienate your co-workers!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-140953">
				<div id="div-comment-140953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Wilhelm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-140953">
			February 3, 2004 at 12:03 pm</a>		</div>

		<p>One of my favorite recurring &quot;programmers who know just a little too much for their own good&quot; stories:</p>
<p>&quot;Oh, it&#8217;s easy to get the number of items in a C-style array! You just do ((int*)array)[-1]! It works every time! Why are you brandishing that axe?&quot;</p>
<p>Quick, how many different ways can you find that would cause that to break? :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-140983">
				<div id="div-comment-140983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-140983">
			February 3, 2004 at 12:46 pm</a>		</div>

		<p>Yet another reason why C++ is a broken language.</p>
<p>Raymond, if you are looking for another topic, how about discussing the problems with MFC and different versions of the compiler.  Like what happens when you build an OCX with MFC, then try to have it work in both IE5 and IE6, without corrupting memory.  Just another version of DLL hell.  Which is compounded by OCXs loading from the registry and not the path.</p>
<p>Or you can just rewrite the silly thing in ATL and be done with the problem.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141003">
				<div id="div-comment-141003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shane King</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-141003">
			February 3, 2004 at 4:04 pm</a>		</div>

		<p>If you don&#8217;t have any destructor, then the compiler doesn&#8217;t need to do any cleanup on delete, and can just free the memory. Therefore it can not bother allocating extra space for the size of the array.</p>
<p>In this case, the &quot;give me the number of elements in the array&quot; would have nothing to look at.</p>
<p>Additionally, if the compiler performs this optimisation, then a mismatched new[]/delete will work; right up until someone changes the code to have a destructor, then you&#8217;ll be wondering why your program crashes all the time from such a &quot;trivial&quot; change.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141023">
				<div id="div-comment-141023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-141023">
			February 4, 2004 at 2:07 am</a>		</div>

		<p>&gt; If you don&#8217;t have any destructor, then the<br />
<br />&gt; compiler doesn&#8217;t need to do any cleanup on<br />
<br />&gt; delete, and can just free the memory.</p>
<p>That is, if you don’t have any /user-declared/ destructor, and the /implicitly-declared/ destructor is /trivial/ [12.4.3].</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141053">
				<div id="div-comment-141053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.honestillusion.com' rel='external nofollow' class='url'>James Curran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-141053">
			February 4, 2004 at 8:24 am</a>		</div>

		<p>Shane,<br />
<br /> How is it &quot;bothering&quot; to allocate extra space?  Allocating 104 bytes is exactly the same work as allocating 100. You just have to add four to the number you pass to malloc(). </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141083">
				<div id="div-comment-141083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-141083">
			February 4, 2004 at 10:32 am</a>		</div>

		<p>A question for Raymond: where&#8217;s the exception handling code for allocate_stuff? Given that this is x86 code, some of that must be generated inline. Did the compiler somehow know that MyClass&#8217;s constructor can&#8217;t throw?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141123">
				<div id="div-comment-141123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shane King</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-141123">
			February 4, 2004 at 4:27 pm</a>		</div>

		<p>I meant in the sense that if you don&#8217;t allocate the extra space, your program uses less memory, which is a good thing. Also, if you don&#8217;t do the work to store the size there, you also run marginally quicker.</p>
<p>It&#8217;s a pretty small optimisation really, but some compilers do it.</p>
<p>And yes, I realise that destructors don&#8217;t have to be declared to exist. I was speaking informally, rather than in C++ language specese.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141193">
				<div id="div-comment-141193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-141193">
			February 4, 2004 at 7:04 pm</a>		</div>

		<p>Doug: I don&#8217;t use MFC myself and have never learned it, so I can&#8217;t talk about it with any degree of confidence.</p>
<p>Ben: I compiled with non-throwing allocation, which is why you don&#8217;t see any throw-handling.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141543">
				<div id="div-comment-141543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/0001/01/01/67384.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-141543">
			February 8, 2004 at 12:08 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-206173">
				<div id="div-comment-206173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/08/26/220933.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040203-00/?p=40763#comment-206173">
			August 26, 2004 at 12:04 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>