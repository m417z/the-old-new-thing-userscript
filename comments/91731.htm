<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1207161">
				<div id="div-comment-1207161" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J Cobb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207161">
			August 26, 2015 at 7:56 am</a>		</div>

		<p>Maybe I am missing something, but why would you want to read from the buffer before the IO completes anyway, since you would just read invalid data (ie. What ever was in it before).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1207151">
				<div id="div-comment-1207151" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207151">
			August 26, 2015 at 8:01 am</a>		</div>

		<p>The &quot;reallocate or free&quot; part reminds me of the Ground Rules; I imagine this is just a special case of them:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2006/03/20/555511.aspx">blogs.msdn.com/&#8230;/555511.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1207141">
				<div id="div-comment-1207141" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207141">
			August 26, 2015 at 8:19 am</a>		</div>

		<p>Writing to the buffer ReadFile will be writing to looks pretty undefined even without that warning. Even if it doesn&#39;t break, I could imagine pretty arbitrary badness in the readback later.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher odd alt thread-odd thread-alt depth-1" id="comment-1207131">
				<div id="div-comment-1207131" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207131">
			August 26, 2015 at 8:38 am</a>		</div>

		<p>Reallocating the buffer is bad because it could move.</p>
<p>Freeing the buffer is bad because there&#39;s a pointer.</p>
<p>Reading from the buffer is bad because until the read has completed, whatever process is doing the read is writing to the buffer.</p>
<p>Writing to the buffer is a race condition.</p>
<p>I don&#39;t see a case where the rule, as written, doesn&#39;t firmly apply on versions of Windows back to 1.0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1207111">
				<div id="div-comment-1207111" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207111">
			August 26, 2015 at 9:11 am</a>		</div>

		<p>@J Cobb</p>
<p>If you were misguided, you might write code that attempted to determine when &#39;some of the read&#39; had completed by looking for magic values in the buffer (maybe which you&#39;d previously zeroed, or something). &nbsp;Your incorrect assumptions would include that the buffer must be either in its initialized state or would contain the final read data, that there were guarantees about the order in which bytes in the buffer would be filled in, and so forth. &nbsp;Probably all of your assumptions would turn out to be true on your test cases :-)</p>
<p>Actually, I did know of a system where the boot code (a PDP-8) was executing out of the high end of a buffer into which a DMA read was in progress. When the data stream being read in got to the top of the buffer, it would overwrite the wait-loop with a jump to somewhere else. Life was simpler in those days.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1207101">
				<div id="div-comment-1207101" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207101">
			August 26, 2015 at 9:45 am</a>		</div>

		<p>Those are all reasons why it&#39;s a bad idea to read from the buffer &#8212; but you still could. &nbsp;But, there&#39;s a difference between &quot;bad idea&quot; and &quot;forbidden&quot;. &nbsp;I think what Raymond and the commenter were getting at is that, as written, the documentation for ReadFile indicates that reading the buffer is strictly forbidden, not just a bad idea.</p>
<p>For example, as written, the operating system *could* unmap the memory range of the buffer for the duration of the read, so that trying to read from the buffer could cause a hardware exception and crash your program. &nbsp;Sure, it doesn&#39;t right *now*, but the next version of Windows *could* (I don&#39;t know a real reason why it would, although I can imagine some kind of primitive DMA implementation, or a fancy new form of hardware cluster or NUMA memory, or some high-performance optimization which bypasses the CPU cache coherency protocol &#8212; something that means the device driver doesn&#39;t want anyone else even *accessing* the memory).</p>
<p>Sure, it would be tough for the kernel guys to implement &#8212; ReadFile() doesn&#39;t put any real requirements on how you allocate the buffer &#8212; but, as written, they *could*.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1207091">
				<div id="div-comment-1207091" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207091">
			August 26, 2015 at 11:13 am</a>		</div>

		<p>re: forbidden/bad idea</p>
<p>I don&#39;t read that into it. I read &quot;must not&quot; as &quot;if you do this, and your app explodes in a pile of shrapnel, don&#39;t come whining to us that ReadFile is broken; it isn&#39;t.&quot;</p>
<p>It&#39;s the same to me as &quot;your app must not write to the 11th byte of a 10-byte array&quot;. &nbsp;The difference between &quot;bad idea&quot; and &quot;forbidden&quot; is of little interest there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1207071">
				<div id="div-comment-1207071" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207071">
			August 26, 2015 at 12:00 pm</a>		</div>

		<p>@Dave: </p>
<p>To me, that sounds like we&#39;re on the same page. &nbsp;The ReadFile() documentation is saying that reading from the buffer could cause your program to explode in a pile of shrapnel; it&#39;s not guaranteeing that the reading from the buffer would be successful &#8212; even if the results are incomplete or would contain garbage. &nbsp;You must not do it, period.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1207061">
				<div id="div-comment-1207061" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207061">
			August 26, 2015 at 12:29 pm</a>		</div>

		<p>@Steven, Dave:</p>
<p>This sounds like it shouldn&#39;t be right. I, and others like me, declare buffers on the STACK and pass them to ReadFile. I shudder to think of the consequences of an unmapped stack frame.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1207051">
				<div id="div-comment-1207051" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207051">
			August 26, 2015 at 2:21 pm</a>		</div>

		<p>@Joshua</p>
<p>We might be getting a little bogged down with my pie-in-the-sky example of a &quot;hypothetical, crazy thing the kernel could do&quot;. &nbsp;I was just trying to illustrate scenarios why reading the buffer might actually be &quot;forbidden&quot; instead of just a &quot;bad idea&quot;.</p>
<p>My point was just that, as written, intentionally or not, they&#39;ve reserved the right to do all this crazy stuff because they&#39;ve said you&#39;re not supposed to even *try* to read from the buffer (&quot;forbidden&quot;), not that reading from the buffer wouldn&#39;t return you any useful information (&quot;bad idea (but won&#39;t kill you)&quot;). &nbsp;Maybe they&#39;re hedging their bets against strange new hardware, maybe it&#39;s just poor documentation, but that&#39;s what they&#39;ve written.</p>
<p>As an aside, though: the idea of unmapping part of the stack doesn&#39;t strike me as completely crazy &#8212; that&#39;s effectively how virtual memory works, or switching to another process, or DOS&#39; expanded memory system, or those old program overlays to let you get past the 640k DOS limit. &nbsp;In any case, as long as everything gets put back in time (which, if you&#39;re following instructions, and don&#39;t access it until ReadFile() completes, it would be) you don&#39;t notice and life goes on. </p>
<p>Actually wasn&#39;t there some version of Windows NT or DOS/DesqView that would give the same stack selector to different threads, so you couldn&#39;t actually pass a pointer from one thread&#39;s stack to another? &nbsp;That *is* unmapping the stack. &nbsp;(I can&#39;t find an actual reference to this; I might not be remembering correctly.) </p>
<p>As I said, tough for the kernel guys to implement&#8230; but no more fundamentally impossible or crazy than other things we now consider completely normal.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1207041">
				<div id="div-comment-1207041" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207041">
			August 26, 2015 at 2:26 pm</a>		</div>

		<p>RE: Same stack selector, different threads</p>
<p>I think I was thinking about this article: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2015/06/26/10624045.aspx">blogs.msdn.com/&#8230;/10624045.aspx</a></p>
<p>But that&#39;s the FS register, not the SS register. &nbsp;My bad &#8212; didn&#39;t remember it correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1207031">
				<div id="div-comment-1207031" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JVert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207031">
			August 26, 2015 at 4:25 pm</a>		</div>

		<p>Windows NT at various points has run on machines where the I/O was not cache-coherent. On a machine like this, you would get corrupt data in your ReadFile buffer if you just read from the buffer after the kernel had flushed the cache but before the I/O had completed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1207021">
				<div id="div-comment-1207021" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207021">
			August 26, 2015 at 5:51 pm</a>		</div>

		<p>If Windows ever runs on a system with no implicit DMA cache coherency (ARM?), this may cause data corruption. On systems without implicit cache coverency, before reading into a buffer, you&#39;re supposed to flush/invalidate cache lines that hold the buffer addresses. If you touch the buffer after that, you&#39;re bringing the old contents back to the cache, and then the processor will not see the result of the read.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com0003400180b2af1b odd alt thread-odd thread-alt depth-1" id="comment-1207011">
				<div id="div-comment-1207011" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Cube+8' rel='external nofollow' class='url'>Cube 8</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207011">
			August 26, 2015 at 11:14 pm</a>		</div>

		<p>Hmm&#8230; The time machine has been invented after all&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1207001">
				<div id="div-comment-1207001" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1207001">
			August 27, 2015 at 12:28 am</a>		</div>

		<p>There are many times people ask why the API is not written to allow anyone crazy enough to &quot;shoot himself in the foot&quot;, there are other times, where people ask why it&#39;s written in the way that allow people to &quot;shoot himself in the foot&quot; without stopping him.</p>
<p>One of the common examples is still from the ReadFile() API. People want to have decorations (attributes or compiler directives) that causes the compiler to check, if the return value if ReadFile() is discarded, the compiler should at least generate a warning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1206991">
				<div id="div-comment-1206991" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1206991">
			August 27, 2015 at 12:34 am</a>		</div>

		<p>I mean the lpNumberOfBytesRead of the function if this not NULL (hence not a overlapped I/O).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1206981">
				<div id="div-comment-1206981" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1206981">
			August 27, 2015 at 6:02 am</a>		</div>

		<p>J Cobb &#8211; </p>
<p>Why would you want to look in a buffer before finish? (Not saying this is a good way to code) But, if your data source is relatively slow and your data has a record or other structure, then starting on some records when they arrive reduces how long it takes to process the buffer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1206941">
				<div id="div-comment-1206941" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1206941">
			August 27, 2015 at 7:50 am</a>		</div>

		<p>@Bryan: &nbsp;You are assuming the buffer is filled in some predictable order. &nbsp;It has already been mentioned that a buffer might be filled in any unpredictable order &#8212; Think about a buffer being filled from the higher addresses toward the lower addresses; from the middle toward the end and then from the middle toward the beginning; or maybe all of the even-numbered bytes are filled first, then all of the odd-numbered bytes.</p>
<p>You are assuming that a buffer will contain &quot;some [complete and usable] records&quot; before it contains all of them. &nbsp;Why would you assume that you can start using some part of a buffer before the I/O is complete?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1206881">
				<div id="div-comment-1206881" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Farnsworth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150826-00/?p=91731#comment-1206881">
			August 28, 2015 at 3:35 am</a>		</div>

		<p>@Bryan</p>
<p>If you want to handle records as they arrive, you should use async I/O, issue one read per record (via ReadFile or ReadFileEx), and rely on the kernel completing them in a sensible order for the underlying devices (e.g. merging neighbouring reads into a big block read and completing the merged reads in one go).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>