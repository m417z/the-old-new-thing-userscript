<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (33)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-902783">
				<div id="div-comment-902783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902783">
			March 23, 2011 at 7:09 am</a>		</div>

		<p>Ooh, Lebesgue integration (pronounced le-BAYG). &nbsp;I was not expecting a reference to that. &nbsp;I never did get around to studying it, I think it was a couple chapters past the last chapter of Rudin that we studied in my analysis class.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902773">
				<div id="div-comment-902773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian G.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902773">
			March 23, 2011 at 7:09 am</a>		</div>

		<p>Your analogies never fail to be clever and instructive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902793">
				<div id="div-comment-902793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Barbie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902793">
			March 23, 2011 at 7:21 am</a>		</div>

		<p>I might be in the minority, but I do find the second description clearer.</p>
<p>Oh, and Lebesgue has no &#39;AY&#39; in the pronunciation. It&#39;s just &quot;ləˈbɛg&quot;. With lə as in Pulp fiction&#39;s &quot;Le big-mac&quot;, and bɛg as something close to the English beg.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902803">
				<div id="div-comment-902803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902803">
			March 23, 2011 at 7:45 am</a>		</div>

		<p>@Barbie: That&#39;s the correct French pronunciation, but all of the mathematicians that I&#39;ve heard say it have pronounced it lə&#39;beg (le-BAYG).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902813">
				<div id="div-comment-902813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexey</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902813">
			March 23, 2011 at 7:59 am</a>		</div>

		<p>Would be fun to see you work a tensor theory analogy into a future post.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902823">
				<div id="div-comment-902823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902823">
			March 23, 2011 at 8:00 am</a>		</div>

		<p>@Adam Rosenfield: So all mathematicians you&#39;ve heart so far, don&#39;t speak french and therefore pronounce it however they see fit? ;) It&#39;s named after the french mathematician of the same name, so why should it be pronounced in some completely arbitrary variant?</p>
<div class="post">[<i>And this is surprising? <a href="http://en.wikipedia.org/wiki/Chern_classes" rel="nofollow">Chern classes</a> are named after the Chinese mathematician Shiing-Shen Chern. <a href="http://en.wikipedia.org/wiki/Shiing-Shen_Chern#Transliteration_and_pronunciation" rel="nofollow">The &#39;r&#39; is silent</a>, but in English, everybody pronounces it with the &#39;r&#39;. Weierstrass is pronounced with a &quot;w&quot; instead of a &quot;v&quot;. The only part of Noether that people pronounce authentically is the n. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902833">
				<div id="div-comment-902833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902833">
			March 23, 2011 at 8:09 am</a>		</div>

		<p>I still think that&#39;s a poorly-written description, because it sounds like it&#39;s describing the implementation. &nbsp;It implies an ordering behavior which doesn&#39;t exist. &nbsp;To me, the &quot;purely declarative&quot; description is much clearer, and wouldn&#39;t lead to as much confusion when combined with the rule about undefined behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902853">
				<div id="div-comment-902853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902853">
			March 23, 2011 at 8:26 am</a>		</div>

		<p>XP SP2, single core has worse behavior. Closing a handle waited on by one thread from another thread -&gt; uninterruptable deadlock. Is this behavior a bug? Yes. Is there a defined behavior? No.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-902863">
				<div id="div-comment-902863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902863">
			March 23, 2011 at 8:45 am</a>		</div>

		<p>In my understanding of Lebesgue integration you integrate over the range rather than the domain (that is to say, in your algorithmic loop, the range &quot;varies slower&quot;.)</p>
<div class="post">[<i>In Riemann integration, you study individual pieces of the domain and combine the local results. But in Lebesgue integration, you study the function&#39;s behavior over the entire domain at once (by studying its behavior in the range). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902883">
				<div id="div-comment-902883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902883">
			March 23, 2011 at 9:35 am</a>		</div>

		<p>Of the differing pronunciations of Niklaus Wirth&#39;s surname it is said that Europeans call him by name but Americans call him by value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902903">
				<div id="div-comment-902903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902903">
			March 23, 2011 at 10:09 am</a>		</div>

		<p>&quot;All the handles are waited on simultaneously.&quot;</p>
<p>Not exactly. In practice they are waited on sequentially. Thus if you have two events, with event[0] being signalled frequently and event[1] less frequently, you may never find out event[1] was signalled from just the return from a WaitForMultipleObjects call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902923">
				<div id="div-comment-902923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902923">
			March 23, 2011 at 10:37 am</a>		</div>

		<p>@Joe:</p>
<p>Yes, all the handles are waited on simultaneously. Cost of wakeup by any handle is the same. The wait list is processed sequentially, because the function spec says it will pick the first signalled object in the array.</p>
<p>WFMO function in the kernel first builds the wait list by resolving the handles to the object pointers. The current thread is added to each object&#39;s wait list. When an object is signalled, its wait list is scanned to find out what threads should wake up. For each thread, its array of wait objects will be checked to find out if the wait condition is satisfied.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902933">
				<div id="div-comment-902933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902933">
			March 23, 2011 at 11:30 am</a>		</div>

		<blockquote><p>
  In my understanding of Lebesgue integration you integrate over the range rather than the domain.
</p></blockquote>
<p>The point with Lebesgue integral is that it&#39;s defined only if it gives the same value whichever way you compute it. You can split the area below the graph horizontally, vertically or in any other way you like (into countably many pieces). That&#39;s why improper Riemann integrals (which depend on the order of the domain) need not exist as Lebesgue integrals.</p>
<p>(Sorry for being off-topic, but when people start talking about Lebesgue integration, I just can&#39;t resist.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902953">
				<div id="div-comment-902953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902953">
			March 23, 2011 at 12:38 pm</a>		</div>

		<p>@Walker: Nit2: &nbsp;You describe single-threaded processors. &nbsp;Multi-threaded processors can indeed execute multiple threads simultaneously in one processor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902973">
				<div id="div-comment-902973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aleksander Oven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902973">
			March 23, 2011 at 2:01 pm</a>		</div>

		<p>Would it be ok to signal the second handle and then close it immediately, without waiting for WaitForMultipleObjects to notice it&#39;s been signaled? I&#39;m never sure about this, even with .NET&#39;s WaitHandles&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902983">
				<div id="div-comment-902983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902983">
			March 23, 2011 at 2:24 pm</a>		</div>

		<p>@Aleksander Oven: Why do you think so? WaitForMultipleObjects expects all handles to be valid from entry to exit. The &quot;signaled&quot; state has nothing to do with that requirement.</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms687025%28v=vs.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms687025%28v=vs.85%29.aspx</a> &nbsp;&quot;If one of these handles is closed while the wait is still pending, the function&#39;s behavior is undefined.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903003">
				<div id="div-comment-903003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeremy Price</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903003">
			March 23, 2011 at 4:27 pm</a>		</div>

		<p>Lebesgue integration? &nbsp;Chern classes? &nbsp;Sometimes you scare me. &nbsp;Tomorrow can you compare NOPs to trivial holonomy groups of Riemannian manifolds?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-903023">
				<div id="div-comment-903023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903023">
			March 23, 2011 at 5:05 pm</a>		</div>

		<p>SQL cursor analogy left to the reader.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902943">
				<div id="div-comment-902943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902943">
			March 23, 2011 at 11:30 am</a>		</div>

		<p>Nit: &nbsp;Single-processor computers don&#39;t actually *implement* anything by doing anything simultaneously, since there is only one instruction pointer in the processor! &nbsp;Everything is done one at a time although there is a lot of task switching. &nbsp;Conceptually, the system can act like some things are done simultaneously, but in practice, the code runs one instruction at a time. &nbsp;(Multiple instruction decoding pipelines in a single-processor core don&#39;t change this.) &nbsp;I&#39;m just sayin&#39;. &nbsp;:-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903043">
				<div id="div-comment-903043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Almanac</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903043">
			March 23, 2011 at 8:13 pm</a>		</div>

		<p>@Joshua Yeah you&#39;ve got the definition of &quot;undefined&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902963">
				<div id="div-comment-902963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zan Lynx</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-902963">
			March 23, 2011 at 1:34 pm</a>		</div>

		<p>@Walker: Nit: Superscalar processors do indeed execute multiple instructions at once. Then they go to great effort to make it *appear* as if they did it one at a time, even going so far as to discard all the successful work of other instructions if a previous one failed or if there was an interrupt for some reason.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903053">
				<div id="div-comment-903053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903053">
			March 24, 2011 at 1:32 am</a>		</div>

		<p>@Joshua. Ugh, dude! Closing a handle you are waiting on is the original bug if you ask me, and whatever consequence you might have later on are tangential. Yes, I know there&#39;s a lot of code written in that manner, but that doesn&#39;t make code right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903063">
				<div id="div-comment-903063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Robinson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903063">
			March 24, 2011 at 2:11 am</a>		</div>

		<p>How likely is it that two handles could become signalled simultaneously? On a single core machine that would seem to be impossible, on a multicore machine, it would seem at best extraordinarily unlikely. So if that scenario (almost) never happens, then how often is WaitForSingleObject ever going to be in a situation of needing to select from multiple signalled handles? I&#39;m assuming that scenario must be able to happen, otherwise there would be no point the documentation referring to it.</p>
<p>On a single core machine I would guess that the answer is, it can happen if one thread causes two handles to become synchronized within the same timeslice, but that&#39;s a bit of a guess. Does the OS run a timeslice to completion or does it kill the timeslice immediately on detecting that a handle is signalled? If the latter than it would be impossible for WaitForMultipleObjects() to have more than one signalled handle. And I&#39;ve no idea how that all translates to a multicore machine. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903083">
				<div id="div-comment-903083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903083">
			March 24, 2011 at 4:12 am</a>		</div>

		<p>Now you&#39;ve got me wondering whether Raymond&#39;s surname was derived from Chern.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903113">
				<div id="div-comment-903113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903113">
			March 24, 2011 at 7:24 am</a>		</div>

		<p>@Simon Robinson: Easy, just signal the handles before calling WaitForMultipleObjects. &nbsp;The following call to WaitForMultipleObjects will always return 0:</p>
<p>HANDLE h1 = CreateEvent(NULL, FALSE, TRUE, NULL);</p>
<p>HANDLE h2 = CreateEvent(NULL, FALSE, TRUE, NULL);</p>
<p>HANDLE h[2] = {h1, h2};</p>
<p>WaitForMultipleObjects(2, h, &#8230;);</p>
<div class="post">[<i>Or the thread could be <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/03/13/550402.aspx" rel="nofollow">temporarily pulled out of its wait state by a kernel APC</a>, and when it returns to the wait state, it finds that both handles have been signaled. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903153">
				<div id="div-comment-903153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903153">
			March 24, 2011 at 7:44 am</a>		</div>

		<p>@Simon:</p>
<p>Change of object state (SetEvent, etc) modifies the target thread state (from waiting to ready) immediately, in the course of the call. When that thread will be picked for execution, is another matter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-903233">
				<div id="div-comment-903233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903233">
			March 24, 2011 at 10:38 am</a>		</div>

		<p>Simon, Alex Grigoriev: my understanding is that before Windows 7/Server 2008 R2, all manipulation of notification objects is done under the single system dispatcher lock. It&#39;s a hard problem to do it in a way that avoids deadlock. Therefore you cannot signal two events &#39;simultaneously&#39; even on a multi-core system, because the first attempt to do so gets the dispatcher lock and the second one waits for it. (The multiprocessor specifications guarantee that one will be &#39;first&#39; even if the processors genuinely do manage to generate the memory access at the same time.)</p>
<p>If changing the state of an object makes a thread runnable, it will pre-empt a thread that&#39;s running at a lower priority (allowing for any dynamic priority boost from the wakeup &#8211; waiting on an event gets a boost of 1 and the foreground process gets an extra boost). That might be on this CPU or another one depending on CPU affinity mask, preferred CPU and the priorities of any running threads.</p>
<p>A goal for Windows Server 2008 R2 was to exceed 64 cores &#8211; in large systems much CPU time was wasted spinning on the dispatcher lock. Thread scheduling was redesigned to remove the dispatcher lock. I don&#39;t really understand it yet (Windows Internals 6th Edition isn&#39;t out yet) but in the meantime, try Arun Kishan&#39;s conversation with Channel 9: <a rel="nofollow" target="_new" href="http://channel9.msdn.com/shows/Going+Deep/Arun-Kishan-Farewell-to-the-Windows-Kernel-Dispatcher-Lock/" rel="nofollow">channel9.msdn.com/&#8230;/Arun-Kishan-Farewell-to-the-Windows-Kernel-Dispatcher-Lock</a></p>
<p>Joshua: Because of the way thread scheduling worked in Windows XP, as described above, I have a hard time believing that closing an event handle that is being waited on causes a deadlock. If it did I would expect it to cause a complete system deadlock, not just deadlock one process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903263">
				<div id="div-comment-903263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903263">
			March 24, 2011 at 4:19 pm</a>		</div>

		<p>@Mike D:</p>
<p>TL;DV. I understand that the Big Fat Lock was replaced by smaller locks. Perhaps a lock per thread, per node, or like that. Cross-node locking is really bad, because it needs to fire those cache management messages across. If you can limit your lock to a single node, that really helps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903293">
				<div id="div-comment-903293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitry Kolosov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903293">
			March 25, 2011 at 3:39 am</a>		</div>

		<p>@Raymond: &quot;When bWait is FALSE, the function does not return until one of the handles in the array becomes signaled. &quot;</p>
<p>This is not a specification. It says what the function DOES NOT DO (&quot;does not return until&quot;), but says nothing about what function DOES (&quot;returns when&#8230;&quot;)</p>
<div class="post">[<i>Would you prefer &quot;suspends execution&quot; instead of &quot;does not return&quot;?  Because the point of the function is to <span style="text-decoration:underline;">not return until</span>&#8230; &quot;Returns when&quot; leaves open the possibility that it may return for other reasons too. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903303">
				<div id="div-comment-903303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitry Kolosov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903303">
			March 25, 2011 at 3:44 am</a>		</div>

		<p>@Alex Grigoriev:</p>
<p>If change of object state modifies the target thread immediately, then it should be perfectly OK to signal Handle 1 and close Handle 2 (as customer wanted). &quot;The constraint that the handles remain valid for the duration of the wait operation&quot; is not violated by closing Handle 2 because wait operation IS OVER as soon as Handle 1 is signaled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903343">
				<div id="div-comment-903343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ficedula</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903343">
			March 25, 2011 at 5:14 am</a>		</div>

		<p>@Dmitry: Eh, not necessarily. While the wait is certainly over from the kernel&#39;s perspective (the thread has been marked as ready to run again), from the perspective of user code you could describe the wait as still &quot;pending&quot; &#8211; because WFMO still hasn&#39;t returned.</p>
<p>I suppose you could argue for the documentation saying &quot;If one of these handles is closed before WFMO returns&quot; instead of &quot;while the wait is still pending&quot;, but it&#39;s a bit nitpicky; the documentation is meant to help you understand how to call the function correctly, not act as a set of definitions to be rules-lawyered around.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903373">
				<div id="div-comment-903373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903373">
			March 25, 2011 at 7:17 am</a>		</div>

		<p>@Dmitry, ficedula:</p>
<p>The devil is in the &quot;thread stack hijacking&quot;. When the kernel needs a thread to execute a kernel APC, the waiting thread may be taken from the &quot;not ready&quot; list. When it happens, all references to wait objects are returned. When the APC is done, the handles are used again to build the wait array. If a handle has become invalid, the function fails.</p>
<p>It may happen that you signalled the event and closed the handle while the APC was executing. FAIL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903673">
				<div id="div-comment-903673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ficedula</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110323-00/?p=11153#comment-903673">
			March 26, 2011 at 7:02 am</a>		</div>

		<p>@Alex: Right, the point is that the rule is basically &quot;don&#39;t close a handle you&#39;ve used in a WFMO call until WFMO returns&quot;. Which seems reasonable to me, and while you could argue that the documentation for WFMO could be worded better I don&#39;t think it&#39;s really that misleading as it stands; most people are going to read &quot;don&#39;t close a handle while the wait is pending&quot; as basically equivalent to &quot;don&#39;t close a handle until WFMO returns&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>