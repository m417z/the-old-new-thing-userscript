<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-172853">
				<div id="div-comment-172853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc Wallace</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-172853">
			May 11, 2004 at 11:19 am</a>		</div>

		<p>They really should have had borders on those table cells.  Looks truly unusable in Opera.</p>
<p>Looks like pretty clear boolean logic, too.  I like that share and access rights are separated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172863">
				<div id="div-comment-172863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Kafrissen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-172863">
			May 11, 2004 at 1:16 pm</a>		</div>

		<p>Greetings,</p>
<p>It is this kind of thing that makes Win32 more powerful than UNIX, because traditional UNIX does not handle file sharing to well.</p>
<p>It is a cool trick to show students that you can open a file for reading two different ways, one in which you can delete the file from the file explorer while it is open and being read/written to in your program, and in another, you cannot delete the file in file explorer while it is open and being read/written to from your program. This all depends on which flags you choose when you open the file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172873">
				<div id="div-comment-172873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-172873">
			May 11, 2004 at 1:27 pm</a>		</div>

		<blockquote><p>
  It is a cool trick to show students that you can open a file for reading two different ways, one in which you can delete the file from the file explorer while it is open and being read/written to in your program, and in another, you cannot delete the file in file explorer while it is open and being read/written to from your program. This all depends on which flags you choose when you open the file.</p>
<p>It&#8217;s too bad that it isn&#8217;t realized fully &#8211; in Unix, I can upgrade a library by copying the new version over it (or changing a link). This doesn&#8217;t affect running programs, only new ones. The analogous situation involves SFP, backup directories, and a reboot. Much less satisfying.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172883">
				<div id="div-comment-172883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-172883">
			May 11, 2004 at 1:31 pm</a>		</div>

		<p>I would think that on UNIX, overwrite would be a problem (since the inode hasn&#8217;t changed); you need to do a delete/copy or a rename/copy.</p>
<p>SFP protects only OS files. Applications shouldn&#8217;t be messing with OS files anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172893">
				<div id="div-comment-172893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Maas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-172893">
			May 11, 2004 at 4:28 pm</a>		</div>

		<p>On UNIX you&#8217;d create the new version of the file under a temporary name and then rename() to the final name, which also has the benefit of being atomic. (although user-interface wise, I can see the logic of why Windows generally won&#8217;t let you delete a file that a program has openened)</p>
<p>Is there a way to atomically replace a file on Windows?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172913">
				<div id="div-comment-172913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeremy Croy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-172913">
			May 11, 2004 at 5:02 pm</a>		</div>

		<p>Rename the old version something else, then put the new one on the system.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172923">
				<div id="div-comment-172923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-172923">
			May 11, 2004 at 8:44 pm</a>		</div>

		<p>There is an immense difference between the description in the base note and the description that programmers ordinarily find in MSDN such as <a target="_new" href="http://msdn.microsoft.com/library/en-us/fileio/base/createfile.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/fileio/base/createfile.asp</a></p>
<p>There are also differences between the table which Mr. Chen provided a link to, and the MSDN page on CreateFile.</p>
<p>Furthermore, the MSDN page on CreateFile doesn&#8217;t even give a link to the MSDN page that Mr. Chen gave a link to.  Furthermore, the MSDN page on CreateFile describes a flag FILE_SHARE_DELETE which the other page doesn&#8217;t describe.  Could it possibly be that the table was outdated, wasn&#8217;t even correct at the time it was published, and has been forgotten about by MSDN maintainers?</p>
<p>Let&#8217;s see what CreateFile really says:</p>
<p>&gt; FILE_SHARE_DELETE Enables subsequent open<br />
<br />&gt; operations on the object to request delete<br />
<br />&gt; access. Otherwise, other processes cannot<br />
<br />&gt; open the object if they request delete<br />
<br />&gt; access.<br />
<br />&gt; Windows Me/98/95: This flag is not<br />
<br />&gt; supported.<br />
<br />&gt;<br />
<br />&gt; FILE_SHARE_READ Enables subsequent open<br />
<br />&gt; operations on the object to request read<br />
<br />&gt; access. Otherwise, other processes cannot<br />
<br />&gt; open the object if they request read<br />
<br />&gt; access.<br />
<br />&gt;<br />
<br />&gt; FILE_SHARE_WRITE Enables subsequent open<br />
<br />&gt; operations on the object to request write<br />
<br />&gt; access. Otherwise, other processes cannot<br />
<br />&gt; open the object if they request write<br />
<br />&gt; access. </p>
<p>Notice the effect on SUBSEQUENT open operations.  If someone else has a file open with FILE_SHARE_READ | FILE_SHARE_WRITE, and we want to open it for GENERIC_READ | GENERIC_WRITE but not share it with anyone else, we get the file and the previous opener still has the file.  Only SUBSEQUENT attempts to open for reading or writing will fail.  This is quite different from Mr. Chen&#8217;s statement:</p>
<p>FALSE&gt; So suppose you omit the flag,<br />
<br />FALSE&gt; indicating that you don&#8217;t want to let<br />
<br />FALSE&gt; others read the file. Then when you<br />
<br />FALSE&gt; attempt to open it yourself, the open<br />
<br />FALSE&gt; will fail if anybody else has the file<br />
<br />FALSE&gt; open for reading.</p>
<p>The wording of CreateFile also provides a number of other undesirable effects.  For example, we want to open a file and allow FILE_SHARE_READ.  Subsequently someone else want to open it with GENERIC_READ | GENERIC_WRITE.  MSDN says they get it, because their request includes GENERIC_READ.  The description of FILE_SHARE_DELETE is still so unclear that maybe developers of Windows file systems couldn&#8217;t even follow it properly, which might explain why sometimes you can&#8217;t delete a file because of a sharing violation even though no process has the file open.</p>
<p>This is the kind of thing that makes Windows less powerful than every other OS on the market.  Neither Unix nor any other modern OS has fully copied the permissions structure that Honeywell got right 40 years ago, but at least each other modern OS is self-consistent.  In Unix you have to do arcane things to get file operations performed reliably, but in Windows you have to do even worse arcane things.</p>
<p>(I&#8217;m again too busy to catch up with Mr. Chen&#8217;s recent writings, but this one was just too important to let pass.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172943">
				<div id="div-comment-172943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steven Youngs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-172943">
			May 12, 2004 at 1:22 am</a>		</div>

		<blockquote><p>
  Is there a way to atomically replace a file on Windows? </p>
<p>There is a Win32 function called ReplaceFile. Not sure if it&#8217;s atomic or not.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172953">
				<div id="div-comment-172953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-172953">
			May 12, 2004 at 1:54 am</a>		</div>

		<blockquote><p>
  Is there a way to atomically replace a file on Windows?</p>
<p>If I&#8217;m not mistaken: MoveFileEx(&#8230;, &#8230;, MOVEFILE_REPLACE_EXISTING)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172963">
				<div id="div-comment-172963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jojjo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-172963">
			May 12, 2004 at 4:12 am</a>		</div>

		<p>Your comment about checkmarks is interesting.<br />
<br />In Sweden a checkmark is the standard way of marking an error on a test or a paper. The first time my mother saw those old Borland messageboxes with a checkmark on the OK button and an X on the Cancel button she pressed Cancel because the checkmark to her denoted that there was something wrong and the X that she accepted (there&#8217;s a swedish expression &quot;kryssa f&#246;r&quot; (cross for) which means to check something).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172933">
				<div id="div-comment-172933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-172933">
			May 11, 2004 at 10:11 pm</a>		</div>

		<p>The FILE_SHARE_* flags prohibit subsequent opens. They also prevent the current CreateFile from succeeding if they conflict with prior opens. This is implied by the fact that the previous GENERIC_* open prevents subsequent opens from succeeding if they do not specify FILE_SHARE_*. The docs are correct but leave a lot of the logical deductions to you, the reader.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-173143">
				<div id="div-comment-173143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-173143">
			May 12, 2004 at 10:48 am</a>		</div>

		<p>&quot;Subsequently someone else want to open it with GENERIC_READ | GENERIC_WRITE. MSDN says they get it, because their request includes GENERIC_READ.&quot; </p>
<p>No, they don&#8217;t get it because their request includes GENERIC_WRITE and you didn&#8217;t allow write. </p>
<p>In order for the open to succeed, ALL requirements must be met. This is such a basic rule that I&#8217;m surprised it needed to be mentioned explicitly. Did you serious believe that &quot;Enables subsequent open operations on the object to request read access.&quot; means that if you match the read sharing modes, then all other security/sharing flags become irrelevant?  Did you really think that it would override the ACLs on the file?</p>
<p>Here&#8217;s another basic rule that is so obvious that it isn&#8217;t mentioned explicitly: The sharing modes applied to a handle are effective only as long as the handle remains open. </p>
<p>In fact the addition of &quot;subsequent&quot; was my attempt to state something that should have been blatantly obvious: CreateFile is not a time machine. Some people apparently thought that the absence of &quot;subsequently&quot; meant that you could use CreateFile to revoke previously-opened handles&#8230; </p>
<p>At some point you have to decide at what point you should stop saying obvious things in the documentation and leave the reader to use their own brainpower.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-173213">
				<div id="div-comment-173213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">4nd3r$</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-173213">
			May 12, 2004 at 4:22 pm</a>		</div>

		<blockquote><p>
  If I&#8217;m not mistaken: MoveFileEx(&#8230;, &#8230;, MOVEFILE_REPLACE_EXISTING) </p>
<p>&#8230;on NT, on 9x u need to write to wininit.ini (without using the ini file functions)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-173243">
				<div id="div-comment-173243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-173243">
			May 12, 2004 at 6:36 pm</a>		</div>

		<p>His question was how to atomically replace a file, a la Unix&#8217;s rename(), not how to replace a file on reboot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-173253">
				<div id="div-comment-173253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-173253">
			May 12, 2004 at 7:55 pm</a>		</div>

		<p>A few metarules:</p>
<p>Specifically stated rules override basic rules.</p>
<p>Stated rules override intuitive rules.</p>
<p>The correctness of a basic rule or intuitive rule does not change an incorrect specific rule or incorrect stated rule into a correct one.</p>
<p>I am glad to see that these are bugs in the MSDN library rather than in the OS.  Nonetheless, if the MSDN library is to be useful, its bugs must be fixed.  &quot;RTFM&quot; has to mean that TFM is to be R&#8217;d rather than F&#8217;ed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-173273">
				<div id="div-comment-173273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-173273">
			May 12, 2004 at 8:30 pm</a>		</div>

		<p>Okay then: You tell me how that section should be written, now that you understand what FILE_SHARE_READ means. Since apparently nothing I write meets your high standards.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-173613">
				<div id="div-comment-173613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman/archive/2004/05/13/131263.aspx' rel='external nofollow' class='url'>Larry Osterman's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-173613">
			May 13, 2004 at 1:11 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-181313">
				<div id="div-comment-181313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/06/07/150047.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-181313">
			June 7, 2004 at 10:02 am</a>		</div>

		<p>What happens when you delete a file while it is open?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626793">
				<div id="div-comment-626793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/peaceofmind/archive/2008/05/07/determine-share-mode-of-opened-file-handle.aspx' rel='external nofollow' class='url'>Programming and Peace of Mind</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040511-00/?p=39403#comment-626793">
			May 7, 2008 at 1:09 am</a>		</div>

		<p>If there is a file already opened and you also want to open it, you need to know the share mode: FILE_SHARE_*</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>