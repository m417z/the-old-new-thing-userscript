<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1091283">
				<div id="div-comment-1091283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091283">
			November 25, 2013 at 9:55 am</a>		</div>

		<p>&quot;Find a photo with GPS information encoded inside it&#8230;&quot; &#8211; So next Little Program will get a photo as parameter and tell if the GPS information is encoded inside?</p>
<div class="post">[<em>Read the code. It already does what you request. My point is that if you pass it a photo without GPS information, then the program isn&#39;t very interesting. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091343">
				<div id="div-comment-1091343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091343">
			November 25, 2013 at 11:31 am</a>		</div>

		<p>Danny: Yes; it will replace the line &quot;OpenMap(dblLong, dblLat);&quot; with &quot;return 1;&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091353">
				<div id="div-comment-1091353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Motti</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091353">
			November 25, 2013 at 1:21 pm</a>		</div>

		<p>Pet peeve: CPropVariant does not obay the Rule of Three.</p>
<p><a href="http://en.wikipedia.org/wiki/Rule_of_three_(C++_programming)" rel="nofollow" target="_new">en.wikipedia.org/&#8230;/Rule_of_three_(C++_programming)</a></p>
<div class="post">[<em>See: Little Program. &quot;Hey, let me write a method that nobody calls.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091373">
				<div id="div-comment-1091373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091373">
			November 25, 2013 at 1:31 pm</a>		</div>

		<p>In some ways it would be nice in C++ if the assignment operator and copy constructor were automatically =delete, with the ability to explicitly request them if you want them.</p>
<p>For the kind of programming I do, 90% of the time I don&#39;t want them. &nbsp;I just get in the habit of deriving from boost::noncopyable for most anything that I do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091383">
				<div id="div-comment-1091383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091383">
			November 25, 2013 at 2:34 pm</a>		</div>

		<p>@SimonRev: If you provide a move ctor/assignment operator they are, which you probably should be (nothrow if possible). Certainly a mistake for C++98 to autodefine them for classes with dtors, but =deleting them only on that now would break literally all the code :).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091403">
				<div id="div-comment-1091403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091403">
			November 25, 2013 at 3:57 pm</a>		</div>

		<p>@Simon Buchan: I don&#39;t know there are many classes I don&#39;t want to be movable either &#8211; there are many cases where moving/copying instances around just hides some bug or mistake.</p>
<p>But yeah backcomp obviously &#8211; nothing we can do about it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091433">
				<div id="div-comment-1091433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091433">
			November 25, 2013 at 8:59 pm</a>		</div>

		<p>@Motti Lanzkron:</p>
<p>It may be a pet peeve, but remember, sample programs are there to show how something is done, not best practices.</p>
<p>I&#39;d imagine in real world code the additional constructors/assignment operators would be defined as a matter of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091453">
				<div id="div-comment-1091453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Motti</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091453">
			November 26, 2013 at 12:44 am</a>		</div>

		<p>&gt; [See: Little Program. &quot;Hey, let me write a method that nobody calls.&quot; -Raymond]</p>
<p>I get that, I would not have written these methods, only prevent them from existing.</p>
<p>&nbsp; &nbsp;class CPropVariant : public PROPVARIANT, boost::noncopyable {</p>
<div class="post">[<em>&quot;Hey, let me create a dependency on an external library that doesn&#39;t come with the Platform SDK so it can implement a method that nobody calls. Also, so that people trying to port this to C# will have no clue what just happened.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091463">
				<div id="div-comment-1091463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091463">
			November 26, 2013 at 1:50 am</a>		</div>

		<p>@voo: Excuse me, what&#39;s the purpose of an uncopyable AND unmovable thingie?</p>
<p>@Motti: Gosh, just declare this CPropVariant inside GetGPSCoordinateAsDecimal, and voila, you can&#39;t give it away to anyone, especially if you change it to </p>
<p> &nbsp;class CPropVariant {</p>
<p> &nbsp;public:</p>
<p> &nbsp; &nbsp;PROPVARIANT data;</p>
<p> &nbsp; &nbsp;CPropVariant() { PropVariantInit(m); }</p>
<p> &nbsp; &nbsp;~CPropVariant() { PropVariantClear(m); }</p>
<p> &nbsp;};</p>
<p>to prevent the implicit cast to PROPVARIANT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091593">
				<div id="div-comment-1091593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091593">
			November 26, 2013 at 9:10 am</a>		</div>

		<p>Since implicit declaration of copy ops is deprecated in C++11 if a destructor or one of the copy ops is defined, Raymond&#39;s clearly just programming for a 3011 world when the committee finally follows through with its deprecation.</p>
<p>@Joker_vD: Any type that should only be used with &quot;reference semantics&quot; where you&#39;d want to avoid implicit slicing. Also, any type whose object identity is critical to its correctness or the operations themselves wouldn&#39;t follow the contracts of those types. Such as std::atomic, std::mutex (and friends), SRWLOCK, CRITICAL_SECTION, and CONDITION_VARIABLE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091613">
				<div id="div-comment-1091613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091613">
			November 26, 2013 at 9:47 am</a>		</div>

		<p>&quot;Any type that should only be used with &quot;reference semantics&quot; where you&#39;d want to avoid implicit slicing.&quot;</p>
<p>Pass around a shared_ptr to it? Because I&#39;ve indeed seen uncopyable, unmovable singleton (via static field) thingies, and they were always passed around as &amp;, and there were a couple of methods with surprise &quot;delete this&quot; inside, and&#8230; oh goodness. What a joy it was to debug.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091483">
				<div id="div-comment-1091483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091483">
			November 26, 2013 at 7:14 am</a>		</div>

		<p>It&#39;s funny, because the linked Rule of Three article on Wikipedia, in it&#39;s very first sentence, links to the &quot;rule of thumb&quot; article, which, in *it&#39;s* very first sentence, says &quot;A rule of thumb is a principle with broad application that is not intended to be strictly accurate or reliable for every situation.&quot;</p>
<p>Like the pirate code, it&#39;s more of a guideline.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091913">
				<div id="div-comment-1091913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091913">
			November 27, 2013 at 9:29 pm</a>		</div>

		<p>I love these little programs, and this is a particulary fun one. Thanks Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>