<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-814803">
				<div id="div-comment-814803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-814803">
			February 25, 2010 at 7:37 am</a>		</div>

		<p>Do fibers play nicely with CoInitialize then&#8230;? &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-814863">
				<div id="div-comment-814863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-814863">
			February 25, 2010 at 8:45 am</a>		</div>

		<p>Only if windows supported cloning a Fiber &#8211; we would have full blown continuations then. Well, maybe in a future versions of windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-814893">
				<div id="div-comment-814893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-814893">
			February 25, 2010 at 9:09 am</a>		</div>

		<p>When a fiber is not running, what information does it have? &nbsp;I thought a fiber was a unit of execution (or so MSDN says), not a bunch of associated storage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-814903">
				<div id="div-comment-814903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-814903">
			February 25, 2010 at 9:29 am</a>		</div>

		<p>@Ken</p>
<p>I am not an expert on Win32 fibers, but I would say that the rules for CoInitialize are likely fiber-agnostic. &nbsp;That is to say, the normal rules for threading apply (to threads). &nbsp;</p>
<p>Since fibers are just kernel objects and do not have physical counterparts inside the CPU, what matters is the thread that runs CoInitializeEx, and what it passes for a concurrency model. &nbsp;Fibers are unrelated, except in so much that they may happen to execute on different threads at different times, so you should code your application and pick your concurrency model with that in mind.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-814913">
				<div id="div-comment-814913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://windowsmuseum.net.ru/' rel='external nofollow' class='url'>A. Skrobov</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-814913">
			February 25, 2010 at 9:31 am</a>		</div>

		<p>Anon: you can clone a fiber on your own; pFiber is exactly the pointer to the fiber data. I&#8217;ve tried, and it works just fine.</p>
<p>David: a fiber has a stack, a copy of all CPU registers, and a SEH chain. That&#8217;s about all.</p>
<div class=post>[<i>And then it will stop working once the internal format of fibers changes. Like it has once already. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-814923">
				<div id="div-comment-814923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://windowsmuseum.net.ru/' rel='external nofollow' class='url'>A. Skrobov</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-814923">
			February 25, 2010 at 9:34 am</a>		</div>

		<p>Aaron: fibers are no kernel objects.</p>
<p>They live entirely in user-land.</p>
<p>That&#8217;s their most apparent benefit: switching between contexts of execution without the transition to kernel-mode and back.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-814953">
				<div id="div-comment-814953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-814953">
			February 25, 2010 at 9:43 am</a>		</div>

		<p>David:</p>
<p>If you look at it that way, when it isn&#8217;t running a thread is just a bunch of associated storage too.</p>
<p>It may be inaccurate but fibers should just be seen as manually scheduled threads.</p>
<p>Logically the fiber itself needs to keep its full state. If it didn&#8217;t then it would cause major problems. For example, without it&#8217;s own stack then it would require thread affinity, and the hosting thread couldn&#8217;t run itself while the fiber is running. It would need to keep the register state otherwise it would lose everything that it has been working on.</p>
<p>An analogy I just thought of is think about your internet access. You are checking your email at home, notice the time and realise you are late for work. So you shut everything down, and then go to work. Once you get there you continue checking your emails (since they are available on the internet too).</p>
<p>It doesn&#8217;t matter that you were doing it through your own computer or your work computer. You were still able to check your email.</p>
<p>Ken:</p>
<p>It is questionable whether using COM in a fiber is a good idea, especially if you initialise it and create it as a apartment threaded object.</p>
<p>Whats more, if a fiber is scheduled how do you know if the thread it is running on has actually had CoInitialize called on it.</p>
<p>The only way that threads could ever play nice is if you initialise every thread in your application with CoInitializeEx and set all of them to multi threaded.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-814963">
				<div id="div-comment-814963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-814963">
			February 25, 2010 at 9:44 am</a>		</div>

		<p>A. Skrobov: Yes, sorry, that was a dumb mistake on my part. &nbsp;For some reason I was thinking that fibers were represented by HANDLEs like threads. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815043">
				<div id="div-comment-815043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.kalmbachnet.de' rel='external nofollow' class='url'>Jochen Kalmbach</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-815043">
			February 25, 2010 at 12:14 pm</a>		</div>

		<p>It would be nice, if there will be some kind of debugger support for fibers&#8230;.</p>
<p>This is currently a very bad situation&#8230; there is no list of fibers nor other fiber-support like Callstacks in minidumps&#8230;</p>
<p>Is there hope, that this will be added to the next OS</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815073">
				<div id="div-comment-815073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-815073">
			February 25, 2010 at 12:35 pm</a>		</div>

		<p>Fibers? What? &nbsp;The only thing I know about fiber is my breakfast is high in it. &nbsp;And it is good for digestion.</p>
<p>I clearly missed this when I was learning Windows threading&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815093">
				<div id="div-comment-815093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-815093">
			February 25, 2010 at 12:40 pm</a>		</div>

		<p>That all makes sense, thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815163">
				<div id="div-comment-815163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leif Strand</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-815163">
			February 25, 2010 at 2:00 pm</a>		</div>

		<p>&quot;you can switch away from a fiber on one thread, then switch to that same fiber on another thread&quot;</p>
<p>Cool! &nbsp;I did not know this. &nbsp;I suppose one could use this feature to implement a thread pool? &nbsp;I.e., have a bunch of fibers that are brought to life by some smaller number of threads? &nbsp;Hmmm&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815173">
				<div id="div-comment-815173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-815173">
			February 25, 2010 at 2:01 pm</a>		</div>

		<p>Since my original post seems to have been lost:</p>
<p>Anon:</p>
<p>While writing cloneable fibers should </p>
<p>be doable, I don&#8217;t think it would work well.</p>
<p>You would have to clone all the data on the stack. And since you don&#8217;t know which programming language the functions higher in the call stacks are written in you&#8217;d memcopy their local variables. Once the control passes up to them again all hell breaks lose.</p>
<p>For example they might call the destructors their local variables. Now image these being handles, or auto/smart-pointers and you get stuff freed twice.</p>
<p>Your thread and process will crash and burn oh so beautifully.</p>
<p>So you need a more tightly controlled environment than Win32. It might be possible to tac it on to .net, since all managed value-types are memcopyable there. But probably you&#8217;ll still end up disposing stuff twice.</p>
<p>So I guess continuation support on code which has sideeffects/is not purely functional is not possible.</p>
<div class=post>[<i>You also have problems with pointers to the stack (which now point to somebody else&#8217;s stack after you memcpy it), and the fact that multiple invocations of a continuation do not share variables. I thought it was interesting that, instead of breaking down a problem into the easy part and the impossible part, Anon broke it down into three impossible parts (presumably all to be accomplished <a href="http://www.sabian.org/Alice/lgchap05.htm" rel="nofollow">before breakfast</a>.) -Raymond</i>]</div>
<p>David Walker:</p>
<p>Obviously it has a stack, and the state of the CPU stored somewhere. Potentially it has a TLS too, but I&#8217;m too lazy to check if the TLS is per thread or per fiber.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815213">
				<div id="div-comment-815213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-815213">
			February 25, 2010 at 2:25 pm</a>		</div>

		<p>W:</p>
<p>TLS is done using the identity of the thread. So what the fiber sees is what the data the thread that it is running on sees. (I thought the name &quot;Thread Local Storage&quot; was obvious enough for people to not to get confused).</p>
<p>There is something called Fiber Local Storage. It works like TLS but it is for fibers. So if you wanted an application which uses fibers to have a per fiber set of data, then you would use FLS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815243">
				<div id="div-comment-815243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jilted</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100225-00/?p=14813#comment-815243">
			February 25, 2010 at 4:48 pm</a>		</div>

		<p>&quot;Or on the original thread, if the original thread comes crawling back begging for another chance.&quot;</p>
<p>Please, please let me host your execution! &nbsp;I promise I won&#8217;t get pre-empted again! &nbsp;Look, I am affined to core 0! &nbsp;Your favorite L1 cache is just a lookup away!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>