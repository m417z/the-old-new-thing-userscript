<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-772913">
				<div id="div-comment-772913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090930-00/?p=16553#comment-772913">
			September 30, 2009 at 11:08 am</a>		</div>

		<p>Why post message for IPC ? I come from a more multi-platform world, and am continually amazed that when IPC is needed, all that the win32 programmers can do is post/send message. When I point out that I have no UI, no window, no dialog, and no desire to create one, they are stumped. Why do folks use post message so often for IPC when there are better (IMO) methods ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-772943">
				<div id="div-comment-772943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090930-00/?p=16553#comment-772943">
			September 30, 2009 at 11:45 am</a>		</div>

		<p>@nathan_works:</p>
<p>Reasons:</p>
<ol>
<li>Because it&#8217;s there. IPC is annoying to build from scratch, so the fact that window messages do most of the work for you is a big plus. &nbsp;The window is a small price to pay for an otherwise simple IPC system.</li>
<li>
<p>Stateless. &nbsp;It requires no synchronization to prevent data corruption. Unlike some of the other solutions (e.g. shared memory), bad coding by one method is generally less dangerous. &nbsp;If a single method, in either program, fails to lock the memory before working with it, you get data corruption and both programs will probably die and/or misbehave.</p>
</li>
<li>
<p>It&#8217;s fire and forget; once you&#8217;ve sent the message along, you rarely need to deal with it again, so it&#8217;s ideal for the producer-consumer scenario. &nbsp;Pipes can be the same way, and are appropriate if a large amount of data is being exchanged between a small number of processes, but for lots of short messages with different recipients, it can get expensive to maintain all the caches.</p>
</li>
<li>
<p>You can define IPC &quot;APIs&quot; relatively clearly. &nbsp;This is related to point 2. &nbsp;An app that expects others to send it messages can publish an &quot;API&quot; of messages it accepts. &nbsp;This is flat out impossible to do in a stable way with shared memory (you don&#8217;t want the 3rd party app to crash your program if it fails to adhere to lock protocol). &nbsp;Pipes require knowledge of who will be connecting to them; you could use another mechanism to trigger the dynamic creation of the pipe, but now you need another IPC mechanism to communicate the need for a new pipe, and you essentially require a stateful system. &nbsp;With messages, any number of producers can arise, send messages, and depart throughout the life of the program, and the program need not do anything to deal with each new producer.</p>
</li>
<li>
<p>You need it already anyway. &nbsp;If you&#8217;re taking input from the user, they&#8217;ll be arriving as window messages. &nbsp;So the additional cost to receive IPC messages is small.</p>
</li>
</ol>
<p>Don&#8217;t get me wrong, it&#8217;s not perfect. &nbsp;But for stateless, API-based IPC, it&#8217;s one of the best options.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-772953">
				<div id="div-comment-772953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090930-00/?p=16553#comment-772953">
			September 30, 2009 at 11:46 am</a>		</div>

		<p>This particular MSDN page is quite illuminating on the issue of IPC:</p>
<p><a href="http://msdn.microsoft.com/en-us/library/aa365574" target=_new rel=nofollow rel="nofollow">http://msdn.microsoft.com/en-us/library/aa365574</a>(VS.85).aspx</p>
<p>It appears that since the days of Win16 the hammer has been supplemented by many (better) alternatives.</p>
<div class=post>[<i>The problem is that the non-message-based ones are hard to incorporate into a UI thread. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-773023">
				<div id="div-comment-773023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090930-00/?p=16553#comment-773023">
			September 30, 2009 at 12:57 pm</a>		</div>

		<p>I should add, not as a rebuttal, but as clarifying..</p>
<p>95% of the time, the win32 guys I work with post a message as a way to (eventually) wake a thread or tell a thread that&#8217;s work to do. Events/mutex/semaphore (see, I&#8217;ve learned that part of win32 :) work much better with less overhead.</p>
<p>And for your point #5, rarely am I writing code that deals with input from users. Usually it&#8217;s a service of some sort.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-772963">
				<div id="div-comment-772963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090930-00/?p=16553#comment-772963">
			September 30, 2009 at 12:12 pm</a>		</div>

		<p>RPC, clipboard, and DDE all seem to provide the same basic features as windows messages (while &quot;Data Copy&quot; *is* a windows message). Mailslots and &nbsp;(UDP) sockets could be used the same way but they don&#8217;t seem much cleaner. &nbsp;Not sure on COM; I learned a little of it while working at MS, but IPC in my product was all windows messages (much of it was legacy code from the mid 90s and a complete redesign offered little). &nbsp;Of course, they all lack one small &quot;feature&quot;: freebie inclusion. &nbsp;As my previous post noted (point #5), you&#8217;re already using it to receive user input, so in cases where IPC is not the core focus of the program, you may as well use window messages and save yourself some code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-773093">
				<div id="div-comment-773093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090930-00/?p=16553#comment-773093">
			September 30, 2009 at 11:30 pm</a>		</div>

		<p>hey, @nathan_works, who mentioned IPC? &nbsp;(I assume we mean inter process communication) &nbsp;I think the most common case for posting message between threads in applications is from worker thread to the UI thread, not between process. &nbsp;Often to warn of an error that must be displayed in the UI thread, or update some indicator.</p>
<p>Programmers-by-Google often end up using PostThreadMessage, when they should be using PostMessage with a HWND instead, as this article states.</p>
<p>Btw if you don&#8217;t have a UI thread, this article was not really for you. You can re-write something equivalent to message queues in another way, but the message queue is already there. &nbsp;And often you might need to respond to some system message eventually anyway.</p>
<p>Personally, I haven&#8217;t come across people using messages to &#8216;wake up a thread&#8217;, but I guess it depends on what people are working on. &nbsp;</p>
<p>All the documentation documentation and samples I&#8217;ve come across for threading in Win32 show how to wake up threads with events. &nbsp;If there the worker thread is pumping message, I would think it is truly because it needs to for some other reason than just waking up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-773133">
				<div id="div-comment-773133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arno</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090930-00/?p=16553#comment-773133">
			October 1, 2009 at 9:15 am</a>		</div>

		<p>Is it o.k. to post WM_QUIT to a UI thread? PostQuitMessage() would be nicer, but can only called in-thread.</p>
<div class=post>[<i><a href="http://blogs.msdn.com/oldnewthing/archive/2005/11/04/489028.aspx" rel="nofollow">See earlier article</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-773163">
				<div id="div-comment-773163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090930-00/?p=16553#comment-773163">
			October 1, 2009 at 12:06 pm</a>		</div>

		<p>I think this bit from the Platform SDK is relevant to the article:</p>
<p>Message-Only Windows</p>
<p>A message-only window enables you to send and receive messages. It is not visible, has no z-order, cannot be enumerated, and does not receive broadcast messages. The window simply dispatches messages.</p>
<p>To create a message-only window, specify the HWND_MESSAGE constant or a handle to an existing message-only window in the hWndParent parameter of the CreateWindowEx function. You can also change an existing window to a message-only window by specifying HWND_MESSAGE in the hWndNewParent parameter of the SetParent function.</p>
<p>To find message-only windows, specify HWND_MESSAGE in the hwndParent parameter of the FindWindowEx function. In addition, FindWindowEx searches message-only windows as well as top-level windows if both the hwndParent and hwndChildAfter parameters are NULL.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>