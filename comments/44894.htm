<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1188864">
				<div id="div-comment-1188864" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150511-00/?p=44894#comment-1188864">
			May 11, 2015 at 7:27 am</a>		</div>

		<p>You&#39;re running domain-joined Windows. You can be taken over across the network. The only block I can find is to completely diasblr group policy that it can&#39;t put Domain Administrators back in the Administrators group.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1188884">
				<div id="div-comment-1188884" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ShuggyCoUk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150511-00/?p=44894#comment-1188884">
			May 11, 2015 at 7:44 am</a>		</div>

		<p>Given that it is now common to boot the machine from a network location I find it somewhat surprising that running a service from one is a worry so long as you can lock down the location&#8230;</p>
<p>Now the issues of delay loading and network drops/file removals is a whole other concern.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1188894">
				<div id="div-comment-1188894" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150511-00/?p=44894#comment-1188894">
			May 11, 2015 at 7:58 am</a>		</div>

		<p>I love it when documentation expresses an opinion. &nbsp;It&#39;s usually a sign that things are pretty messed up. &nbsp;E.g. this line from fcntl(2):</p>
<p>As well as being removed by an explicit F_UNLCK, record locks are automatically released when the process terminates or if it closes any file descriptor referring to a file on which locks are held. This is bad: it means that a process can lose the locks on a file like /etc/passwd or /etc/mtab when for some reason a library function decides to open, read and close it. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1188904">
				<div id="div-comment-1188904" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150511-00/?p=44894#comment-1188904">
			May 11, 2015 at 8:13 am</a>		</div>

		<p>@Kevin: Don&#39;t use fcntl() except for its intended purpose: a mutli-process database. The files you name have other lock protocols.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1188924">
				<div id="div-comment-1188924" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150511-00/?p=44894#comment-1188924">
			May 11, 2015 at 9:28 am</a>		</div>

		<p>You&#39;re right there&#39;s no portable way to avoid that gotcha. There is no strict file locking on Unix platforms and that&#39;s the point. If you&#39;re going to be using file locking, everybody has to be in on the game.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1188954">
				<div id="div-comment-1188954" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150511-00/?p=44894#comment-1188954">
			May 11, 2015 at 11:14 am</a>		</div>

		<p>Joshua: The problem is that it&#39;s impossible to get everybody in on the game. Let&#39;s say you&#39;re writing a POSIX version of Access &#8212; a fancy GUI DBMS &#8212; so obviously you&#39;ll be using file locking to control access to the DB across different users.</p>
<p>Now let&#39;s say that the user goes to open a file, and the Open File dialog that is part of the GUI toolkit wants to show icons for all the files in a directory. It may open every file, like file(1) does, to figure out its type so it can show the proper icon for the file.</p>
<p>Well, if it happens to open your current database to find out its type, it will eliminate any locks currently held.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1188914">
				<div id="div-comment-1188914" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150511-00/?p=44894#comment-1188914">
			May 11, 2015 at 8:25 am</a>		</div>

		<p>@Joshua:</p>
<p>On Linux (with glibc), lockf(3) is implemented in terms of fcntl(2) and has the same problems. &nbsp;On some systems (including very old Linuxes), flock(2) doesn&#39;t exist and is also emulated via fcntl(2) (or it just plain doesn&#39;t compile, YMMV). &nbsp;In short, there is no portable way to avoid that gotcha under POSIX systems.</p>
<p>Besides, fcntl(2) doesn&#39;t *have* an intended purpose. &nbsp;It does *everything*.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher odd alt thread-odd thread-alt depth-1" id="comment-1188994">
				<div id="div-comment-1188994" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150511-00/?p=44894#comment-1188994">
			May 11, 2015 at 5:29 pm</a>		</div>

		<p>Realistically, if a Windows server can masquerade as another Windows server, you have worse problems than a service executable.</p>
<p>I&#39;d also be more concerned about paging in from the wrong executable (e.g. someone updates the copy on the server) &#8212; than a segment violation. &nbsp;A segment violation is clearly identifiable. &nbsp;Loading the wrong code page, that could go unnoticed for an extended period of time and corrupt data. &nbsp;Meanwhile, server side, just two clicks to clear the lock. &nbsp;&quot;Oh, stupid Windows, won&#39;t let me change this exe file, I&#39;ll show Microsoft, click click, there now I can update it.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1189004">
				<div id="div-comment-1189004" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150511-00/?p=44894#comment-1189004">
			May 11, 2015 at 8:35 pm</a>		</div>

		<p>@ShuggyCoUk: If your scenario involves &quot;boot from network location&quot;, why can&#39;t you just update the service file located inside boot image?</p>
<p>As for why you should worry, see more information by searching for &quot;ARP Spoofing&quot;. When your ARP cache is poisoned, your &quot;locked down location&quot; is not locked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1243966">
				<div id="div-comment-1243966" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150511-00/?p=44894#comment-1243966">
			May 14, 2015 at 8:13 am</a>		</div>

		<p>@cheong00: As for why you should worry, see more information by searching for &quot;ARP Spoofing&quot;. When your ARP cache is poisoned, your &quot;locked down location&quot; is not locked.</p>
<p>That&#39;s why you don&#39;t boot from a hostile network. Only local where no hostile physical access is guaranteed.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>