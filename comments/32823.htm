<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-333383">
				<div id="div-comment-333383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-333383">
			January 3, 2006 at 3:41 am</a>		</div>

		<p>One interesting fallacy that I have seen is that many people expect that if you perform o.p = x, then o.p == x should be true.</p>
<p>This is false because one of the reasons to use a property versus a regular public field is to prevent out-of-bounds or to normalize values. For example, you might have an Angle property that is always between 0 and 360. If you set it to 540, you&#8217;ll get 180. Another example is setting a window&#8217;s position. If you set it to some location off-screen, in some cases the correct thing to do is move it so that it&#8217;s still visible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-333453">
				<div id="div-comment-333453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Golubev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-333453">
			January 3, 2006 at 5:41 am</a>		</div>

		<p>As for me, side effects of setting a property should not be considered as problem. In fact, it is probably common to expect that setting a new value for property may fire broadcasting a change event to listeners and in turn force a lot of things happens. I do not see any differences between &quot;send itself to a printer&quot; and &quot;update property inspector component to show new value&quot; side-effects. </p>
<p>I think that main reason, why this o.print syntax should be avoided is not its side-effects, but the fact that it has only one valid value. If we would have some abstraction which accepts both o.print = true, and o.print = false, and if the meaning of this call would be clear for reasonable maintainer, then &quot;print&quot; should be considered as normal write-only property. </p>
<p>(Sorry for my English)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-333483">
				<div id="div-comment-333483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/jarnold' rel='external nofollow' class='url'>Jim Arnold</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-333483">
			January 3, 2006 at 6:10 am</a>		</div>

		<p>&quot;As for me, side effects of setting a property should not be considered as problem&quot;</p>
<p>The problem is not the side-effects per se, rather the API design.  If you want to provide the ability to print an object, then make it a method and call it print()!</p>
<p>Having said that, I dislike properties in general.  The main rationale for employing them is, traditionally, that if you need to introduce some behaviour around field access in the future you won&#8217;t have a versioning problem.  I have never, ever seen a real example of this.</p>
<p>In addition, many developers are under the impression that they are &quot;encapsulating&quot; their objects&#8217; fields by simply wrapping them in properties.  Poppycock!</p>
<p>Jim</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-333503">
				<div id="div-comment-333503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-333503">
			January 3, 2006 at 6:47 am</a>		</div>

		<p>Isn&#8217;t that just a remnant of the old Visual Basic VBX interface that only provided support for properties? Such magic properties were necessary to provide method-like semantics.</p>
<p>I certainly remember using lots of VBXs that had such properties.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tzagotta even thread-even depth-1" id="comment-333563">
				<div id="div-comment-333563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tzagotta</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-333563">
			January 3, 2006 at 7:40 am</a>		</div>

		<p>Jim, I program in C#, and use properties all day long.  We have a couple of cases that come up often that will illustrate why properties are important to us.</p>
<p>1. One object fires an event to notify other objects of a changing value.  Sure, each caller could do this after setting a field value, but it is a much cleaner design to have the object itself do the work.</p>
<p>2. A document object sets its internal &quot;changed&quot; or &quot;dirty&quot; flag when one of its properties is changed.  Again, could be done externally, but is a lot cleaner to have the object take care of itself.</p>
<p>I&#8217;m a very practical programmer, and I&#8217;ve adopted the idea of NEVER exposing public fields.  Properties are cheap and easy, and provide some nice benefits.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-333713">
				<div id="div-comment-333713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Derek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-333713">
			January 3, 2006 at 10:30 am</a>		</div>

		<p>Jim, you seem to be assuming that the only things exposed via properties are fields.  While that&#8217;s probably the most common case, it&#8217;s not the only one.  A property might retrieve a value from a database, or calculate a value from a number of fields, or request a value from an internal state object, etc.  There are plenty of examples of when a property might appear to simply return a field, when in actuality, it&#8217;s doing something more complex.  I&#8217;ve seen it a number of times.  (I&#8217;m especially fond of the internal state object.)</p>
<p>Properties allow all accessors to have a consistent interface, without resorting to a bunch of gets and sets.  (It accomplishes the same thing, but with a little less hassle, and a little less typing.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-333793">
				<div id="div-comment-333793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.noveltheory.com' rel='external nofollow' class='url'>James Curran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-333793">
			January 3, 2006 at 12:15 pm</a>		</div>

		<p>Now I&#8217;m wondering about that object with the misguided &quot;print&quot; property.  What happens if you set it to false?<br />
<br />   o.print = false;</p>
<p>Does it check the value for &quot;true&quot; or does any assigment cause it to print?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-333813">
				<div id="div-comment-333813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-333813">
			January 3, 2006 at 1:06 pm</a>		</div>

		<p>The statement &quot;o.print = false&quot; causes the printer to take back the document it just printed and erase the ink off of it, producing the original clean sheet of paper.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-333823">
				<div id="div-comment-333823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Swaim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-333823">
			January 3, 2006 at 1:32 pm</a>		</div>

		<p>&quot;Having said that, I dislike properties in general. The main rationale for employing them is, traditionally, that if you need to introduce some behaviour around field access in the future you won&#8217;t have a versioning problem. I have never, ever seen a real example of this.&quot;</p>
<p>  For me, one of the main reasons for exposing properties is the side effects. Stuff like<br />
<br />buttonx.visible = false<br />
<br />  Sure, you could use set_visible() and get_visible(), but it looks ugly, and if you&#8217;re worried about your object&#8217;s state, you need to use set_ and get_ for just about every variable in your class, which gets annoying really quickly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-333833">
				<div id="div-comment-333833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-333833">
			January 3, 2006 at 1:52 pm</a>		</div>

		<p>When we wrote VBX&#8217;s for VB3, we had to use the</p>
<p>o.SendToPrinter = True</p>
<p>because the VBX model didn&#8217;t support the creation of custom methods, only properties and events. This probably qualifies for &quot;many years ago&quot;.. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-333863">
				<div id="div-comment-333863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-333863">
			January 3, 2006 at 2:10 pm</a>		</div>

		<p>Obviously,</p>
<p>o.print(true) sends a copy to the printer<br />
<br />o.print(false) doesn&#8217;t send a copy to the printer!</p>
<p>Much like the guy which sleep with a glass of water and an empty glass on the nightstand, because when he wakes up, sometimes he&#8217;s thirsty and sometimes he&#8217;s not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-334023">
				<div id="div-comment-334023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DavidE</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-334023">
			January 3, 2006 at 6:24 pm</a>		</div>

		<p>I think that the VBX guys are probably right. I remember somewhere in the Utopia (BOB) toolkit there were a couple of controls where you would set multiple properties as arguments and then set a property to True to trigger the code. Man, that was nasty!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-334063">
				<div id="div-comment-334063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-334063">
			January 3, 2006 at 9:55 pm</a>		</div>

		<p>DavidE,</p>
<p>    I&#8217;ve imagined what the call should look like, and think that it&#8217;d seems to be like calling a function in assembly language &#8211; a lot of push to &quot;push&quot; the parameters to stack, then a trigger &quot;call&quot; to do the actual thing.</p>
<p>    Funny. XD</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-334173">
				<div id="div-comment-334173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craig Ringer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-334173">
			January 4, 2006 at 5:24 am</a>		</div>

		<p>Gabe:</p>
<p>I&#8217;d expect</p>
<p>o.x = 1;<br />
<br />assert(o.x == 1);</p>
<p>to always succeed &lt;i&gt;or throw a suitable exception&lt;/i&gt;. If it should not, then I&#8217;d expect to see something like:</p>
<p>bool valid;<br />
<br />o.setX(1, valid);</p>
<p>(where `valid&#8217; is a bool&amp; argument, or take a bool* and use &amp;valid)</p>
<p>or</p>
<p>bool valid = o.setx(1);</p>
<p>instead. The caller can always ignore the optional out parameter / discard the return if they don&#8217;t care. If you want to force them to care, throw an exception.</p>
<p>Of course, I can&#8217;t actually imagine working in plain-old-C&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-335333">
				<div id="div-comment-335333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060103-18/?p=32823#comment-335333">
			January 8, 2006 at 4:23 am</a>		</div>

		<p>For the record, I consider Craig to be definitively wrong. One should never assume that</p>
<p>o.x = 1;<br />
<br />assert(o.x == 1); </p>
<p>will always succeed or throw. In the example,</p>
<p>o.Angle = 540;<br />
<br />assert(o.Angle == 540);</p>
<p>540 is not an invalid angle, so the assignment shouldn&#8217;t throw an exception. Likewise,</p>
<p>bool valid = o.setAngle(540);</p>
<p>wouldn&#8217;t return false just because o.Angle == 180. Are you suggesting that I should be programming like this:</p>
<p>int actualAngle = o.setAngle(540);</p>
<p>so that I can find out that Angle really gets set to 180? That&#8217;s pointless because I could always just write this:</p>
<p>o.Angle = 540;<br />
<br />int actualAngle = o.Angle;</p>
<p>if I really cared that Angle might not have the exact value I put in it.</p>
<p>Also, consider that in most cases you want the value you set to be coerced to a correct value instead of having an exception thrown. If you try to scroll past the bottom of a window, you want it to just stop scrolling, not beep at you or put up an error message box. Similarly, if you call o.ScrollPos = 101 and the valid value are 0 to 100, you want ScrollPos silently set to 100.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>