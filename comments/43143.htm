<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (32)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1171163">
				<div id="div-comment-1171163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171163">
			January 15, 2015 at 7:06 am</a>		</div>

		<p>So why would a lot of programs open a volume handle but not read or write it? The mind boggles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171173">
				<div id="div-comment-1171173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171173">
			January 15, 2015 at 7:11 am</a>		</div>

		<p>@Joshua: Maybe to test if the volume actually exists?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171183">
				<div id="div-comment-1171183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171183">
			January 15, 2015 at 7:24 am</a>		</div>

		<p>So why does Windows need to flush out all that data so that the volume handle sees a consistent view of the volume? Why doesn&#39;t the kernel just provide a consistent view of the volume anyway, and flush out the dirty data in the background?</p>
<div class="post">[<em>This means that every call to read from the volume first has to call the file system driver to say &quot;Hey, somebody is reading from sector 5. Were you planning on flushing data to sector 5? If so, tell me what you would have written to sector 5, so I can return that.&quot; But the file system can&#39;t answer the question &quot;Were you planning on flushing data to sector 5?&quot; until it processes its unflushed actions and gets around to assigning sectors to every pending action, in order to see if 5 was on the list &#8211; so you&#39;re still doing all the bookkeeping of flushing (but without the flushing). And then you have to remember the answer you gave since you are committed to honoring it. This is a lot of complexity to add to a file system driver for something that is not a common scenario. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171193">
				<div id="div-comment-1171193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Diack</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171193">
			January 15, 2015 at 7:31 am</a>		</div>

		<p>I have to say, I kind of agree with Karellen. I thought the Windows caching system meant that applications saw a consistent view of the filesystem whether or not the physical disc sector writes had yet all been flushed?</p>
<div class="post">[<em>The application opened the volume, not the file system. If the application accessed the file system, then the caching would be just fine. But it&#39;s bypassing the file system and going straight to the volume. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171203">
				<div id="div-comment-1171203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171203">
			January 15, 2015 at 7:35 am</a>		</div>

		<p>@Karellen: because that&#39;s even more expensive (both in development and system resources) than making some programs wait. You&#39;re basically asking for the kernel to create a snapshot every time someone opens a volume handle. Even though you could update all the snapshots (and mark them as &quot;up to date&quot;) the next time flushes catch up, that&#39;s still quite expensive. I&#39;m guessing volume handles aren&#39;t opened that often to make this worthwhile.</p>
<div class="post">[<em>Aha, I see the problem now. The consistent view that apps expect is <span style="text-decoration:underline;">consistent with the data I just wrote</span>. Sure, the kernel could take a snapshot of the volume at the point the volume is opened, but that&#39;s not what apps want. Apps want to see all the data that got written to the volume. Otherwise, your defragmenter will create data loss. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171213">
				<div id="div-comment-1171213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someome</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171213">
			January 15, 2015 at 8:04 am</a>		</div>

		<p>&quot;Apps want to see all the data that got written to the volume.&quot; Thats surely not the expectation. Even defragmenters would happely operate ABOVE tbe block cache. Even for them its very important to operate at the logical-written data (in the b√∂ock cache) and not at the physical (in the sectors).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171223">
				<div id="div-comment-1171223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171223">
			January 15, 2015 at 8:31 am</a>		</div>

		<p>Opening a handle to a volume is an extremely uncommon and specialist scenario. It&#39;s not surprising that Windows hasn&#39;t been micro-optimized to speed it up at the expense of adding extra complexity and slowness to NtCreateFile/NtWriteFile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171233">
				<div id="div-comment-1171233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171233">
			January 15, 2015 at 8:42 am</a>		</div>

		<p>@Raymond: no, I&#39;m talking eventual consistency. The snapshot doesn&#39;t need to be app-exclusive. Once the big file flush has happened, poof, the snapshot is suddenly up to date as well (and all other extant snapshots as well). Of course, when an app wants to write, we must block, because we don&#39;t want the file flush to fail just because we got in a write earlier (I mean, we could do that, but that&#39;s probably not what people want).</p>
<p>How could an app complain it&#39;s not &quot;seeing all the data that got written to the volume&quot; given that we haven&#39;t written it yet? That&#39;s what the flush is doing, after all&#8230; All the snapshot achieves is that you can start reading a consistent volume sooner.</p>
<div class="post">[<em>So an app opens the volume, reads some information (from a possibly stale snapshot), does some calculations based on that information, and updates that information. That write will wait for the flush, and now the volume in inconsistent (because the app wrote data based on stale information). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even thread-even depth-1" id="comment-1171243">
				<div id="div-comment-1171243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171243">
			January 15, 2015 at 9:03 am</a>		</div>

		<p>Wait, so does this mean that if a program has volume handle open, the kernel is forced to flush all writes on that volume whenever a write operation occurs to guarantee consistency? &nbsp;Or at least, that this was the case with Windows XP and earlier?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171253">
				<div id="div-comment-1171253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171253">
			January 15, 2015 at 9:37 am</a>		</div>

		<p>@Joshua: DeviceIoControl (eg, to query volume metadata)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171263">
				<div id="div-comment-1171263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171263">
			January 15, 2015 at 9:42 am</a>		</div>

		<p>[But it&#39;s bypassing the file system and going straight to the volume. -Raymond]</p>
<p>And the old UNIX world doesn&#39;t have this problem because we put the caching at the volume level instead (most likely, so that all filesystems could share the same cache code). The new UNIX world of dynamic filesystems just decided we don&#39;t care. Don&#39;t open device nodes of mounted filesystems. Online defrag by writing to device nodes never worked anyway. If you want online defrag, need to implement it in-kernel with ioctl().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jader3rd odd alt thread-odd thread-alt depth-1" id="comment-1171283">
				<div id="div-comment-1171283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jader3rd' rel='external nofollow' class='url'>jader3rd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171283">
			January 15, 2015 at 9:50 am</a>		</div>

		<p>If the data was being written with cache write through (ie, bypass the cache and write directly to disk), would it still be a problem here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1171293">
				<div id="div-comment-1171293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171293">
			January 15, 2015 at 9:55 am</a>		</div>

		<p>The actual question is: why the memory manager+cache is so retarded it happily gives some fleeting file a lot of cache memory by robbing the working sets of the running applications, and causes a lot of page thrashing afterwards?</p>
<p>Oh well, at least it&#39;s not as bad as it was for a while in Vista, where you could not cancel a big copy to a slow USB device quickly, because the file data had to be flushed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171303">
				<div id="div-comment-1171303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171303">
			January 15, 2015 at 9:55 am</a>		</div>

		<p>@Raymond: yes, that&#39;s the idea. How is that prevented today? The read I just did can already be outdated, unless I issue a lock to prevent that. And if I do, obviously, our hypothetical snapshot implementation again has to block until the data is actually stable, to preserve the same semantics.</p>
<div class="post">[<em>Presumably, the operating system could delay the flush until the app takes an exclusive volume lock (thereby preventing other writes), but I suspect it does it on first I/O because a lot of apps forgot to take exclusive locks. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171313">
				<div id="div-comment-1171313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171313">
			January 15, 2015 at 10:01 am</a>		</div>

		<p>Note that (because, again, we are not willing to declare future writes invalid based on what we do now), we&#39;d have to wait for consistency if the application takes any lock whatsoever, because we don&#39;t know in advance which sectors are going to be affected. The snapshot implementation would do exactly nothing to eliminate waiting for applications that need atomic updates.</p>
<p>At this point I feel obliged to remind people that I never argued for this feature to be implemented in the first place. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171323">
				<div id="div-comment-1171323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171323">
			January 15, 2015 at 11:16 am</a>		</div>

		<p>@Joshua: &quot;Windows takes programs as they are, not as we&#39;d want them to be.&quot; &#8211; Nick Fury (sort of)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171343">
				<div id="div-comment-1171343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xor88</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171343">
			January 15, 2015 at 11:49 am</a>		</div>

		<p>Why flush at all? The volume can immediately become inconsistent again when the next write happens. Apps can never rely on seeing a consistent volume anyway. That assumption should be false in practice all the time.</p>
<div class="post">[<em>In practice, the app will most likely unmount the file system before opening the volume. That ensure nobody else is writing to the volume. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171363">
				<div id="div-comment-1171363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171363">
			January 15, 2015 at 12:51 pm</a>		</div>

		<p>I just wish that there were a CreateFile3 that allowed you to put the creation itself onto an I/O completion port for asynchronous operation. &nbsp;Creation is one of the last few file operations to remain synchronous. &nbsp;Maybe it could work like AcceptEx, where you would create an unassociated file handle first, then call CreateFile3.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171373">
				<div id="div-comment-1171373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171373">
			January 15, 2015 at 1:08 pm</a>		</div>

		<p>@xor88: I&#39;ve seen valid use cases. They all involved removable media, which means the filesystem had better be consistent by the time the last close() returns and you could basically rely on the user not to screw it up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171383">
				<div id="div-comment-1171383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171383">
			January 15, 2015 at 1:48 pm</a>		</div>

		<p>Why can&#39;t it just read back from the cache to provide a consistent view?</p>
<div class="post">[<em>My guess is that (1) the data may not yet be in the cache in a usable form [see previous comment], (2) the intent is to provide direct volume access with no caching. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1171393">
				<div id="div-comment-1171393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171393">
			January 15, 2015 at 7:00 pm</a>		</div>

		<p>@Random832:</p>
<p>&gt;Why can&#39;t it just read back from the cache to provide a consistent view?</p>
<p>Because you can&#39;t easily/quickly translate from the volume LBA to an open file view offset.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1171403">
				<div id="div-comment-1171403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171403">
			January 15, 2015 at 7:09 pm</a>		</div>

		<p>A cache behavior that would make sense for removable devices: limit total amount of dirty data, so that it&#39;s never more than 1 second old. Though this could be difficult for writeable mapped sections open on it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171333">
				<div id="div-comment-1171333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171333">
			January 15, 2015 at 11:34 am</a>		</div>

		<p>&quot;The application opened the volume, not the file system.&quot;</p>
<p>Doh! Of course. Sorry, I totally missed that.</p>
<p>Now I&#39;m not sure why it&#39;s necessary that the volume be consistent with the filesystem. Why isn&#39;t it OK if the volume doesn&#39;t just represent the un-flushed state of the disk?</p>
<p>I&#39;m not sure why people are talking about snapshots either. In a pre-emptive multitasking OS (so, uh, all of them in the last 20 years) you can basically never rely any answers you get back about the state of a filesystem. Between the time a query returns, and your *very next line of code* which examines the answer, files could have been added, deleted, renamed, resized, changed ownership, changed access permissions, or possibly had something else happen to them that I&#39;ve forgotten. You need to be able to handle the filesystem changing under you.</p>
<p>About the only thing that can save you from this (as JM has mentioned) are filesystem-based locks. But given that a volume, and a file on a filesystem in a volume, are two different objects, you can&#39;t use a lock to synchronise access between them anyway. So, uh, if you&#39;re not able to handle the volume and the FS on the volume being inconsistent, you&#39;re probably in trouble anyway, aren&#39;t you?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171413">
				<div id="div-comment-1171413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171413">
			January 16, 2015 at 12:13 am</a>		</div>

		<p>Does the NCQ functionality in modern HDD/SSDs have an effect on this or is it too close to he hardware to know if the command could be prioritised?</p>
<p>My understanding is limited but I am under the impression it allows commands (such as CreateFile and however that is implemented by the SATA protocol) which are quick to perform to be moved up in the queue ahead of slower commands such as the writing of data to disk in order to appear more responsive to the user/application.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171423">
				<div id="div-comment-1171423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171423">
			January 16, 2015 at 12:58 am</a>		</div>

		<p>You are way too low. The volume is managed by the OS at least with a Volume Manager and maybe with several levels of drivers (HD, USB, Network, encryption, Software RAID, Volume Shadow Copy Service etc etc). An app that opens a volume is still operating at a logical view provided by the OS.</p>
<p>Because of this, all this &quot;the OS has to flush something first&quot; is nonsensical. As long as the app does not have exclusive access to the volume, there is no consistent data to read because still other processes &nbsp;and the OS itself is changing things at any time, regardless of caching.</p>
<p>An app operating at the volume level needs exclusive access, or the volume (and in turn, the filesystem at the volume, if there is any) must be mounted read-only. (A read-only view can also be achieved through Volume Shadow Copy.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171433">
				<div id="div-comment-1171433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171433">
			January 16, 2015 at 1:18 am</a>		</div>

		<p>To expand at the previous post (@Paul): For example, chkdsk.exe is able to check the filesystem inside a Truecrypt volume, even if the TC container file is provided by a network share. chkdsk is operating at the volume level, but does not access sectors directly. It goes through the Volume Manager. And it needs exclusive access to the volume (by the /f parameter) to do anything meaningful.</p>
<p>If some app is opening a volume with GENERIC_WRITE, I would demand the OS to fail the call as long as the volume is opened for WRITE by any other part of the system.</p>
<p>If some app is opening a volume only for reading, I would expect the OS to succeed the call but leave any cache as it is, because flushing the cache at this point does not provide a stable, consistent view anyway.</p>
<p>An filesystem-level cache must be flushed at unmounting, or when switching the mounting to read-only, but not when some app opens a volume handle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171483">
				<div id="div-comment-1171483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171483">
			January 16, 2015 at 8:20 am</a>		</div>

		<p>I believe that there is a very good reason why the system is designed this way. (I trust the one who designed it knew the matters disscussed in comments) But I cannot quite grasp it.</p>
<p>When someone is opening a r/w shared handle, and when the drive is mounted/active, is it possible to provide a consistent view at all? If yes, exactly how? If not, what&#39;s the reason behind the wait? (Is it a historical liability?)</p>
<p>If the filesystem is unmounted &#8211; which is the only way I can imagine a consistent view can be achieved &#8211; then the wait has already happened while unmounting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171513">
				<div id="div-comment-1171513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171513">
			January 16, 2015 at 8:42 am</a>		</div>

		<p>&quot;When someone is opening a r/w shared handle, and when the drive is mounted/active, is it possible to provide a consistent view at all?&quot;</p>
<p>No, because just opening a handle does not stop other processes (like the indexing service, or any other process) to change file data, which in turn causes to OS to write the changed blocks to the volume at unpredictable times.</p>
<p>The example provided in this post makes no sense to me: When the filesystem is mounted (the user has just copied 1.7GB of file data), then this CreateFile with GENERIC_WRITE must fail, because the filesystem has exclusive access to the volume (it has not used FILE_SHARE_WRITE).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher even thread-even depth-1" id="comment-1171563">
				<div id="div-comment-1171563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171563">
			January 16, 2015 at 1:00 pm</a>		</div>

		<p>Not disk utilities &#8212; page file.</p>
<p>On Linux, you have a dedicated swap volume. &nbsp;Resizing that volume impacts adjacent volumes, and in a worst case, can be painful as the volumes are resized (mostly full volumes, etc.).</p>
<p>An alternative to that is allocating the bytes through the file system, then locking that range, and asking the file system what addresses on the disk are in use. &nbsp;You then bypass the file system, and just write straight to the drive. &nbsp;These daemons don&#39;t require anything else in the stack &#8212; they just require exclusive access to the sectors that they own.</p>
<p>Those ranges don&#39;t need to be backed up, they don&#39;t need transactions &#8212; and the only security they need is &quot;my precious, don&#39;t touch my precious.&quot; &nbsp;So potentially &#8212; if you have the file system blocking all other access to those bytes, then you can just go straight to DASD.</p>
<p>There would be other similar use cases where individual apps might not want the file system involved in their dealings with a file; I suspect that&#39;s why it&#39;s share write. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-odd thread-alt depth-1" id="comment-1171573">
				<div id="div-comment-1171573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171573">
			January 16, 2015 at 3:22 pm</a>		</div>

		<p>I guess the tricky part of this post was the &quot;\\.\D:&quot;. It is &quot;\.&quot; not &quot;\?&quot;. But maybe I am not making any sense?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171613">
				<div id="div-comment-1171613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171613">
			January 17, 2015 at 3:29 am</a>		</div>

		<p>Thank you for the explanations, I had missed that in this scenario the program is asking for a handle to the entire volume rather than just one file, so it makes sense that anything else asking for a handle on that volume would be blocked.</p>
<p>Is it still too low level if the handles are for two different files on the same disk? I would assume based on you&#39;re replies that it then comes down to the specific drivers implementation&#39;s that are used in the stack to get to the raw drive I.e. the SSD driver and the NTFS file system driver may be able to carry the context to the drive for prioritisation, or indeed perform prioritatsion themselves before passing anything lower down and must do otherwise all our computers would be unusable due to the amount of drive access contention and blocking going on. but as you said in another scenario it may not such as a USB key that doesn&#39;t implement NCQ anyway, or a poorly written driver which doesn&#39;t implement any form of prioritisation of it&#39;s workload at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171623">
				<div id="div-comment-1171623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150115-00/?p=43143#comment-1171623">
			January 17, 2015 at 4:02 am</a>		</div>

		<p>CreateFile, WriteFile, ReadFile etc are processing and changing blocks of Volune data, in a filesystem-specific way (NTFS, FAT blabla). There can be caching at any layer: At the drive, in a RAID card or RAID driver, at the volune level and (for data structures like free-space bitmaps, inodes/MFT entries, directory items, whatever) at the filesystem level.</p>
<p>An app accessing a volume directly (if that is possible for a mounted volune) would bypass the filesystem (and any cache at that level), but not any caching below the volume (like NCQ or RAID or drive-internal caching).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>