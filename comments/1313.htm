<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1117683">
				<div id="div-comment-1117683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117683">
			April 7, 2014 at 9:33 am</a>		</div>

		<p>Why do most controls seem to store the WM_SET&shy;REDRAW state as a bool when a reference counted UINT model would cause a lot less grief for people using a UI toolkit that sits between their code and user32/comctrl. Is it a bitfield internally?</p>
<div class="post">[<em>WM_SET&shy;REDRAW is spec&#39;d as non-refcounted, so implementations must not refcount it. Another thing to add to the list of things to do once that time machine is ready. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1117693">
				<div id="div-comment-1117693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117693">
			April 7, 2014 at 10:06 am</a>		</div>

		<p>There are some similar items to WM_SETREDRAW in managed code. &nbsp;I believe those are booleans as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1117703">
				<div id="div-comment-1117703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117703">
			April 7, 2014 at 10:10 am</a>		</div>

		<p>Ray, why do you in your OnSetRedraw handler invalidate the window if redraw is re-enabled?</p>
<p>On every Windows control, I had to do this manually.</p>
<p>Also on your case TEXT(&#39;3&#39;): code, you invalidate manually the window after calling SetWindowRedraw(hwnd, TRUE). This would match my experience.</p>
<div class="post">[<em>True, technically it is the caller&#39;s responsibility to invalidate the window, but I just do it internally out of habit. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1117723">
				<div id="div-comment-1117723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117723">
			April 7, 2014 at 1:57 pm</a>		</div>

		<p>[WM_SETÂ­REDRAW is spec&#39;d as non-refcounted, so implementations must not refcount it. Another thing to add to the list of things to do once that time machine is ready. -Raymond]</p>
<p>I found it convenient to refcount it for my own controls anyway but present non-refcount by deduplication when delegating to system controls. He who uses my controls needs to read my manual. If you read this blog you probably don&#39;t use them.</p>
<p>These days I don&#39;t use WM_SETREDRAW much anymore preferring to defer the calculations to the next WM_PAINT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1117733">
				<div id="div-comment-1117733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117733">
			April 7, 2014 at 1:58 pm</a>		</div>

		<p>In case anyone else was confused and tried to find MSDN documentation for SetWindowRedraw:</p>
<p>SetWindowRedraw() is a macro from &lt;windowsx.h&gt;. &nbsp;It is a convenient way of sending the WM_SETREDRAW message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1117743">
				<div id="div-comment-1117743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">.dan.g.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117743">
			April 7, 2014 at 5:22 pm</a>		</div>

		<p>I thought that disabling redraw would obviate the need for the extra handling in OnPaint.</p>
<p>Where are the paint messages coming from if redraw is already disabled?</p>
<div class="post">[<em>Perhaps somebody moved a window that had been obscuring our window. Use your imagination. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1117763">
				<div id="div-comment-1117763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117763">
			April 8, 2014 at 2:35 am</a>		</div>

		<p>BeginUpdate and EndUpdate on the list and tree views and various other. They just use WM_SETREDRAW and are reference counted internally.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1118013">
				<div id="div-comment-1118013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">.dan.g.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118013">
			April 8, 2014 at 7:10 pm</a>		</div>

		<p>@Raymond: But that doesn&#39;t explain why _you_ added &nbsp;the extra code since your comment seems to bear no relation to the matter being discussed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1118023">
				<div id="div-comment-1118023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118023">
			April 8, 2014 at 8:59 pm</a>		</div>

		<p>.dan.g.: I think you understand what WM_SETREDRAW does. It just tells the window not to tell itself to redraw. It does not prevent the window from getting WM_PAINT messages.</p>
<p>In other words, ordinarily what happens when you add an item to a listbox is that it adds the item to its internal data structures and tells itself to redraw. When you turn off redraw, that just prevents the listbox from telling itself to redraw. Windows will still tell the listbox to redraw for all the usual reasons.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1118183">
				<div id="div-comment-1118183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118183">
			April 9, 2014 at 2:24 pm</a>		</div>

		<p>Oops, I meant to say that I think .dan.g. MISunderstands what WM_SETREDRAW does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1118213">
				<div id="div-comment-1118213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">.dan.g.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118213">
			April 9, 2014 at 5:51 pm</a>		</div>

		<p>@Gabe: Since you have decided to speak on behalf of Raymond, perhaps you can answer my question properly then.</p>
<p>The subtext was: How to make a better version of WM_REDRAW, by adding code to the WM_PAINT handler to not draw if redraw is already disabled.</p>
<p>But if redraw is already disabled why is the extra code necessary?</p>
<div class="post">[<em>You might get paint messages when redraw is disabled. For example, somebody might do WM_SETREDRAW(FALSE), then call MessageBox, then re-enable redraw after MessageBox returns. MessageBox will pump messages, including paint messages. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1118233">
				<div id="div-comment-1118233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">.dan.g.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118233">
			April 10, 2014 at 12:45 am</a>		</div>

		<p>Thx Raymond.</p>
<p>But I still don&#39;t see why it is relevant to your post. Your post, if I may remind you, was all about adding items and drawing them, not about calling MessageBox.</p>
<p>Therefore it seems to me that for the duration of adding new items, and in the absence of any other interference, WM_SETREDRAW(FALSE) ought to have withheld _all_ WM_PAINT messages from needing to be handled. Otherwise it&#39;s not doing its job.</p>
<div class="post">[<em>There are two sides to this demonstration. The control and the client. In this particular demonstration, the client does not pump messages while redraw is disabled, but some other client might, so the control needs to be ready for that. You are confusing the example with the general principle, like saying &quot;Why do you check whether the length is zero? This program never passes a length of zero.&quot; Imagine, for example, the client did WM_SETREDRAW(FALSE), then issues asynchronous I/O to get the new items. While waiting for the I/O to complete, the code is pumping messages while the control has redraw disabled. The control will receive paint messages, and it had better not crash when that happens. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1118273">
				<div id="div-comment-1118273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118273">
			April 10, 2014 at 6:09 am</a>		</div>

		<p>THX, Raymond for answering my question, but another thing in question:</p>
<p>Before I had to experience I must call InvalidateRect(), my assumption was if redraw is off for a control the control still accumulates the dirty region, and after re-enabling redraw, only the dirty region will be repainted.</p>
<p>But as I have to call InvalidateRect() myself I invalidate the whole window.</p>
<p>Imagine a list control where mass items are added, so I disable redraw before and re-enable after adding the items. But none of the added ones is visible (they are not in visible range). What I get is one redundant redraw, as I have no other chance than invalidating the whole window. This may be less efficient than not to disabling redraw, and at least the control flickers.</p>
<p>Is there some chance to optimize for this scenario (besides doing dirty region calculation myself)?</p>
<div class="post">[<em>If you want to accumulate dirty regions, then you have to do it yourself. If you have scenarios where somebody makes a lot of changes to offscreen items, then you can opt to add dirty region accumulation to your control as an optimization. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1118333">
				<div id="div-comment-1118333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118333">
			April 10, 2014 at 11:13 am</a>		</div>

		<p>.dan.g.: WM_SETREDRAW(FALSE) tells the *target window* not to send *itself* paint messages. It sounds like you want it to tell *Windows* not to send paint messages to the target window.</p>
<p>In other words, you&#39;re wondering why Windows doesn&#39;t perform the LockWindowUpdate behavior for you. That might be nice, but it may not always be what you want. What if you want to make a list box that shows a progress bar while the updates are happening?</p>
<p>Don&#39;t be fooled by the name. WM_SETREDRAW(FALSE) just means &quot;I&#39;m going to be sending you a batch of updates&quot; and WM_SETREDRAW(TRUE) just means &quot;I&#39;m done sending you updates&quot;. The most likely visible side-effect of this is that the display will not redraw itself, but that&#39;s just one possibility.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>