<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1102383">
				<div id="div-comment-1102383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102383">
			January 27, 2014 at 7:06 am</a>		</div>

		<p>Remember to not truncate the pointer or otherwise screw this up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102413">
				<div id="div-comment-1102413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102413">
			January 27, 2014 at 7:55 am</a>		</div>

		<p>Also, in the DDEML API this doesn&#39;t exist. So you have to use DdeSetUserHandle and DdeQueryConvInfo to be able to do this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102423">
				<div id="div-comment-1102423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">a_random_passerby</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102423">
			January 27, 2014 at 8:24 am</a>		</div>

		<p>I&#39;m guessing this only works for 32-bit applications. It wouldn&#39;t be terribly hard to create a map of &lt;HWND, CountWindows *&gt; to use this technique in 64-bit applications, but I would be curious if there&#39;s a way to pass a 64-bit value into common Windows API functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102433">
				<div id="div-comment-1102433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102433">
			January 27, 2014 at 8:24 am</a>		</div>

		<p>I was about to ask what happened to the int MSG and WPARAM wParam parameters, and then I realized that this was a callback from EnumWindows(), not a window message handler. &nbsp;I find the latter to be a much more common question among inexperienced programmers &#8212; they want to make their WNDPROC a class member but don&#39;t understand the compiler error about the function pointer types being incompatible (or they try to cast it away and don&#39;t understand why it crashes).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102463">
				<div id="div-comment-1102463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102463">
			January 27, 2014 at 8:43 am</a>		</div>

		<p>Confusing as the name is, an LPARAM is actually a LONG_PTR, not a LONG. So this works on 64-bit too (i.e. there is no truncation).</p>
<p>@AdamRosenfield: Anyone that uses a cast to get rid of a compiler warning without understanding what the compiler warning means should have a legal injunction obtained against them preventing them from going within 100ft of any computer. Casting to get rid of warnings is like putting duct-tape on your dashboard so you don&#39;t have to see the &quot;check engine&quot; light and hoping that means your engine is now OK.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102473">
				<div id="div-comment-1102473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102473">
			January 27, 2014 at 9:05 am</a>		</div>

		<p>Also, there&#39;s a cute technique to implement static callbacks in a C++ class by making it a template class, and then templating the client class (which contains the callback code) on the server class (which gets the pointer(s) to the client&#39;s callback functions).</p>
<p>I think it&#39;s used in the WTL?</p>
<p>Of course, nowadays you could do the same thing with a bunch of fancy Boost code using functor monads or whatever the fashionable paradigm is ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102513">
				<div id="div-comment-1102513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102513">
			January 27, 2014 at 9:22 am</a>		</div>

		<p>It&#39;s a shame the designers of the APIs didn&#39;t have the presence of mind to pass the context as the first parameters of the callbacks. That would allow you to use member functions as callbacks with just a single cast when passing in the function pointer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102523">
				<div id="div-comment-1102523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EvanED</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102523">
			January 27, 2014 at 9:24 am</a>		</div>

		<p>&quot;Neither are function objects (also known as functors) so you can&#39;t use a boost::function as a window procedure either.&quot;</p>
<p>I actually wrote a little library to make this possible: you give it a boost::function (or something like that, I forget exactly) and it gives you a C function pointer with the same arguments as the function (i.e. no separate context arg). Behind the scenes it used libffi to dynamically generate a thunk that, when called, would add in the &quot;missing&quot; this parameter to the functor.</p>
<p>It was more of a &quot;can I really do this? yes, yes I can&quot; project than one with practical implications. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102553">
				<div id="div-comment-1102553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102553">
			January 27, 2014 at 10:32 am</a>		</div>

		<p>@Gabe, @Martin Bonner, you can actually do it, but you must declare the method as stdcall.</p>
<p>For instance, in x86, it makes sure that &quot;this&quot; is accessed like a regular stack argument, not from the ecx register.</p>
<div class="post">[<em>Modern compilers will probably inline the member function, so you get your desired optimization for free. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102563">
				<div id="div-comment-1102563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102563">
			January 27, 2014 at 10:43 am</a>		</div>

		<p>@John Doe: Indeed. &nbsp;See this post by Raymond for more details:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2004/01/09/49028.aspx">blogs.msdn.com/&#8230;/49028.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102503">
				<div id="div-comment-1102503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SYS64738</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102503">
			January 27, 2014 at 9:18 am</a>		</div>

		<p><!-- p>I believe there are two typos. In both instances of CountWindows::StaticWndEnumProc(), you have:


<p>&nbsp; CountWindows *pThis = reinterpret_cast&lt;CountWindows&gt;(lParam);</p>




<p>But the correct cast should be:</p>




<p>&nbsp; CountWindows *pThis = reinterpret_cast&lt;CountWindows *&gt;(lParam);</p>




<p>Or, using the new C++11/14 &quot;auto&quot; keyword (since the &quot;reinterpret_cast&lt;CountWindows *&gt;&quot; already makes the type of the &quot;pThis&quot; variable clear):</p>




<p>&nbsp; auto pThis = reinterpret_cast&lt;CountWindows *&gt;(lParam);</p>


</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102533">
				<div id="div-comment-1102533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102533">
			January 27, 2014 at 9:39 am</a>		</div>

		<p>This works with the Microsoft C++ compiler (and it&#39;s very useful), but I&#39;m pretty sure that it&#39;s not *actually* legal C++. &nbsp;The problem is that the function pointer needs to have extern &quot;C&quot; linkage &#8211; and static member functions don&#39;t.</p>
<p>@Gabe: It wouldn&#39;t have helped. &nbsp;Member functions expect this to be passed in ecx, not as the first parameter of a normal function call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102583">
				<div id="div-comment-1102583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102583">
			January 27, 2014 at 11:45 am</a>		</div>

		<p><!-- @Raymond: There should be a * in your cast (alegr1 was first to point this out). &nbsp;Also, -->I personally prefer the use of static_cast over reinterpret_cast to go from void * to other pointer types, because if someone else changes the code to have void * be a different pointer type from under you, you&#39;ll get a compiler error instead of hard-to-find badness.</p>
<p>Martin is correct that StaticWndEnumProc *technically* needs &#39;extern &quot;C&quot;&#39; to be standard-compliant C++, but in reality, unless you are hitting a few rare corner cases, on most systems non-member C++ functions are linkage-compatible with C functions of the same signature. &nbsp;Too much code relies upon this. &nbsp;(If there were an equivalent to extern &quot;C&quot; that gave a function C linkage but not C name mangling &#8211; because you don&#39;t need C code to know its name &#8211; more code would be compliant.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1102683">
				<div id="div-comment-1102683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102683">
			January 27, 2014 at 9:38 pm</a>		</div>

		<p>@Myria:</p>
<p>&#39;extern &quot;C&quot;&#39; is linkage specification and doesn&#39;t affect binary calling convention. The compiler takes care of checking binary calling convention and would not allow mismatch.</p>
<p>Re: reinterpret_cast: Raymond is in love with it.</p>
<div class="post">[<em>All of the reinterpret_casts here are between LPARAM (an integral type) and pointer. What other cast would you have used? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00034001a5381f07 even thread-even depth-1" id="comment-1102693">
				<div id="div-comment-1102693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Georg_Rottensteiner' rel='external nofollow' class='url'>Georg_Rottensteiner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102693">
			January 27, 2014 at 10:43 pm</a>		</div>

		<p>How&#39;s the validity of fastdelegate (<a rel="nofollow" target="_new" href="http://www.codeproject.com/Articles/7150/Member-Function-Pointers-and-the-Fastest-Possible">http://www.codeproject.com/&#8230;/Member-Function-Pointers-and-the-Fastest-Possible</a>)? </p>
<p>I use it a lot as it allows handling static, free-floating and even virtual member functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102723">
				<div id="div-comment-1102723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102723">
			January 28, 2014 at 2:16 am</a>		</div>

		<p>Window procedure can be a lambda:</p>
<p> &nbsp; &nbsp; &nbsp;wc.lpfnWndProc = [](HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) -&gt; LRESULT</p>
<p> &nbsp; &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; return DefWindowProc(hWnd, uMsg, wParam, lParam);</p>
<p> &nbsp; &nbsp; &nbsp;};</p>
<p>I don&#39;t know if this is officially supported, but it compiles and works.</p>
<p>But you cannot take anything in the closure, unfortunately&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102743">
				<div id="div-comment-1102743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SYS64738</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102743">
			January 28, 2014 at 3:11 am</a>		</div>

		<p>To those who suggest static_cast instead of reinterpret_cast: I believe static_cast would not compile. In fact, LPARAM is defined as LONG_PTR, so it&#39;s a 32-bit integer (&quot;long&quot;) on 32-bit builds, and a 64-bit integer (&quot;__int64&quot;) on 64-bit builds. I believe the correct cast in this case is what Raymond uses: reinterpret_cast.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102763">
				<div id="div-comment-1102763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102763">
			January 28, 2014 at 4:20 am</a>		</div>

		<p>Someone mentioned templates, so I tried to come up with a templated version, but the best I could do was this:</p>
<p>int CountWindows::CountThem()</p>
<p>{</p>
<p> &nbsp;m_count = 0;</p>
<p> &nbsp;EnumWindowsTemplate&lt;CountWindows, &amp;CountWindows::WndEnumProc&gt;(this);</p>
<p> &nbsp;return m_count;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1102793">
				<div id="div-comment-1102793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102793">
			January 28, 2014 at 6:56 am</a>		</div>

		<p>@SYS64738 Heck, skip pThis altogether and do:</p>
<p>return reinterpret_cast&lt;CountWindows *&gt;(lParam)-&gt;WndEnumProc(hwnd);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102813">
				<div id="div-comment-1102813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SYS64738</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102813">
			January 28, 2014 at 7:11 am</a>		</div>

		<p>@Murits[MSFT]: No. The code you proposed seems to me much less readable than having a &quot;pThis&quot; variable, that makes it clear that the code is extracting the C++ &quot;this&quot; pointer from LPARAM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102983">
				<div id="div-comment-1102983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102983">
			January 28, 2014 at 9:47 am</a>		</div>

		<p>[All of the reinterpret_casts here are between LPARAM (an integral type) and pointer. What other cast would you have used? -Raymond]</p>
<p>The only true cast there is: the C-style cast.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102923">
				<div id="div-comment-1102923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1102923">
			January 28, 2014 at 8:49 am</a>		</div>

		<p>@SYS64738, you are correct, Visual C++ throws a C2440 error. (&#39;static_cast&#39; : cannot convert from &#39;LPARAM&#39; to &#39;CountWindows *&#39;, &nbsp;Conversion from integral type to pointer type requires reinterpret_cast, C-style cast or function-style cast) once you put back the missing *.</p>
<p>It&#39;s interesting that Raymond didn&#39;t fix the typo and delete the comments pointing it out, like he usually does.</p>
<div class="post">[<em>Typos require me to wrangle my homegrown content management system so I usually batch them up. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1103193">
				<div id="div-comment-1103193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paramanand Singh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1103193">
			January 28, 2014 at 9:11 pm</a>		</div>

		<p>Thanks a lot Raymond for explicitly writing out this most useful technique. I have seen many beginners struggling with this problem where they pass a member function in place of a callback. Although the idea behind this technique (the difference between normal functions and member functions) is simple, it takes a bit of patience for beginners to learn and appreciate it. And by the way I am not sure why most of the comments have drifted onto a different topic about type casting the context parameter. In my opinion the issue of type-casting here is much less significant compared to the technique of using static wrapper functions for callback.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1103533">
				<div id="div-comment-1103533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1103533">
			January 30, 2014 at 3:39 am</a>		</div>

		<p>@Paramanand Singh, people like to go off-topic quite a lot.</p>
<p>But on topic&#8230;</p>
<p>@Gabe, it&#39;s not really the job, responsibility or shame-covering moral-obligation of API designers to think of special cases that induce users (in this case, developers) to apply shimmy techniques, such as directly providing a C++ member function pointer (even if declared as stdcall) as a C callback. Just because it&#39;s possible doesn&#39;t mean it&#39;s right. The right thing to do is what this blog post describes in detail, so it&#39;s enough to design a way to provide user data to a callback.</p>
<p>The Windows APIs that have a callback usually have some way of passing information to the callback. One is in the form of an extra parameter, such as EnumWindows and CreateThread. Another is in the form of providing structure objects that include the API structure at the head, such as the OVERLAPPED structure that is passed to IO completion routines. Providing your own COM interface pointer is almost the same thing as your own C++ object or C-struct with function pointers (plus marshalling when needed).</p>
<p>A better complaint about shameful design would be to find out the API that take a callback but don&#39;t have a way to provide data to it, without a closure, that is. This may prove hard to accomplish correctly for every platform you target or require some complex library for portability just for the purpose. Then, there&#39;s memory management e.g. when do the closed-over variables stop referencing valid objects, can the closure outlive the stack point where it was created, is the data thread-bound, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1103613">
				<div id="div-comment-1103613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140127-00/?p=1963#comment-1103613">
			January 30, 2014 at 8:10 am</a>		</div>

		<p>@Azarian: I&#39;m sure you know that lambdas don&#39;t exist by the time you reach link time.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>