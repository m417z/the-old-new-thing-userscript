<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-746323">
				<div id="div-comment-746323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mvadu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746323">
			June 15, 2009 at 10:21 am</a>		</div>

		<p>In that case can&#8217;t you just document the &quot;under the hood&quot; function, so code which used the file name based function will continue to work, and new code can use the handle based function?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-746333">
				<div id="div-comment-746333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746333">
			June 15, 2009 at 10:22 am</a>		</div>

		<p>That&#8217;s a really interesting example to choose, because unlike SetFileAttributes() and SetFileTime() which operate purely on the file &quot;inode&quot;, DeleteFile() modifies the directory that contains the link to the file that you want to delete.</p>
<p>Some time ago, this wouldn&#8217;t be a problem, but ever since NTFS implemented hard links, there must no longer be a 1:1 mapping between &quot;inodes&quot; and directory entries. Therefore you should not be able to get &quot;the&quot; filename, (i.e. the directory entry to delete) from a file handle, because a file can have multiple filenames.</p>
<p>Any idea how that might work?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-746353">
				<div id="div-comment-746353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://stackoverflow.com/users/2230/euro-micelli' rel='external nofollow' class='url'>Euro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746353">
			June 15, 2009 at 10:52 am</a>		</div>

		<p>@Karellen: A file handle is not an INode. An INode is an implementation artifact of certain file systems; file handles are file-system neutral. So, your perceived problem doesn&#8217;t exist. The kernel tracks all the information it needs to find the exact directory entry on which the handle was opened.</p>
<p>Also, as far as I know NTFS has supported hard links since day one; am I wrong?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-746363">
				<div id="div-comment-746363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746363">
			June 15, 2009 at 11:06 am</a>		</div>

		<p>&quot;An INode is an implementation artifact of certain file systems;&quot;</p>
<p>Hence &quot;inode&quot; being in quotes.</p>
<p>&quot;The kernel tracks all the information it needs to find the exact directory entry on which the handle was opened.&quot;</p>
<p>Oh. I thought that recent versions of NTFS allowed you to rename open files. That must not be the case if the above is true then?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-746383">
				<div id="div-comment-746383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746383">
			June 15, 2009 at 11:35 am</a>		</div>

		<p>Since NT had POSIX compliance as a design requirement, NTFS has always supported hard links (implemented as multiple filenames for a given file, like 8.3 names). The filename is stored not just in the directory entry, but in a list in the &quot;inode&quot; itself also. Presumably when you open a file, it remembers which filename you used to open it so that it knows which one you want to delete.</p>
<p>I&#8217;m pretty sure that POSIX also requires open files to be rename-able, so that has always been possible too. In order to do this, the handle must be opened with the right sharing parameters.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-746423">
				<div id="div-comment-746423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746423">
			June 15, 2009 at 12:46 pm</a>		</div>

		<p>Karellen: just like an open file in UNIX is composed of two distinct objects (file descriptor, representing how the file was opened, and file node, representing where the file is in the filesystem), an open file in NT is composed of three distinct objects: file object (filesystem-independent information on how the file was opened), cache control block (filesystem-dependent information on how the file was opened) and file control block (filesystem-dependent information). The name a file was opened with can be stored in the CCB</p>
<p>That said, NT has no equivalent of POSIX unlink. You&#8217;ll see that Interix uses a rename/move instead, hiding delete-pending entries in a system directory under the drive root</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-746433">
				<div id="div-comment-746433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746433">
			June 15, 2009 at 12:57 pm</a>		</div>

		<p>File operations by &quot;name&quot; do have a race condition, or a potential to operate on the wrong file.</p>
<p>In a multi tasking system, some other process or thread could rename/delete the file, and put another in its place. &nbsp;Which may or may not be your intended target&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-746453">
				<div id="div-comment-746453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746453">
			June 15, 2009 at 1:28 pm</a>		</div>

		<p>When copying lots of small files the SetFileAttributes calls (assuming you copy the attributes as well as the data) seem to take significant time.</p>
<p>(With large files it&#8217;s less significant because most of the time is spend writing the actual data.)</p>
<p>I wonder if being able to set the attributes via the file handle (or as part of the CreateFile call) would speed things up?</p>
<p>Thinking about it naively, it seems like it should be a &#8220;free&#8221; operation to specify the attributes of a file as it&#8217;s created. Instead we create the file with default attributes, write the data, then close the file; then we set the attributes which involves opening a new handle to the file and re-writing the metadata.</p>
<p>I may be wrong about how the filesystem and caching works, though. Perhaps there&#8217;s another reason that copying attributes slows things down.</p>
<p>(When I say attributes I mean the timestamps etc., not just the HSRA etc. flags which you can specify in the CreateFile call.)</p>
<p>Oh, I just checked MSDN and I see there is a SetFileInformationByHandle which was added in Vista. Says it&#8217;s part of the separately-downloaded Win32 FileID API Library, rather than the main SDK, which makes me wonder how it works (it could be even slower if it maps handle to name and then calls the normal SetFileAttributes API). Worth a try though.</p>
<div class=post>[<i>Even if you could set attributes at creation, that won&#8217;t help you since the act of copying the file itself changes the attributes. (Last-modified time? Archive attribute?) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson even thread-even depth-1" id="comment-746463">
				<div id="div-comment-746463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746463">
			June 15, 2009 at 3:36 pm</a>		</div>

		<p>[Even if you could set attributes at creation, that won&#8217;t help you since the act of copying the file itself changes the attributes. (Last-modified time? Archive attribute?) -Raymond]</p>
<p>That&#8217;s true. Would it work if you set the attributes after the Write and before the Close?</p>
<p>e.g. (These are meant to be low-level filesystem calls rather than Win32 API calls.)</p>
<p>h = Open(path);</p>
<p>Write(h);</p>
<p>SetAttr(h);</p>
<p>Close(h);</p>
<p>Assuming the above sequence works (which might be wrong), and that SetFileInformationByHandle is more-or-less a direct call to the filesystem (which might also be wrong), I&#8217;d expect it to be faster. That&#8217;s based on my assumption that copying a file and then using Win32 SetFileAttributes is like doing this:</p>
<p>h = Open(path);</p>
<p>Write(h);</p>
<p>Close(h);</p>
<p>h2 = Open(path);</p>
<p>SetAttr(h2);</p>
<p>Close(h2);</p>
<p>Unless the extra Open and Close are trivial and it&#8217;s the SetAttr itself which takes the time.</p>
<p>I&#8217;ve made a note-to-self to test out the performance at some point, assuming it works at all.</p>
<p>(Checking it works should be quick &amp; easy but I&#8217;ve always found it time consuming to speed-test file-copy code as it takes lots of tests to average the results and you need to ensure each test copies fresh data rather than data cached by the previous test.)</p>
<div class=post>[<i>My gut feeling tells me that you&#8217;re right but like you I haven&#8217;t tested it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-746473">
				<div id="div-comment-746473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746473">
			June 15, 2009 at 3:54 pm</a>		</div>

		<p>@Gabe &quot;I&#8217;m pretty sure that POSIX also requires open files to be rename-able, so that has always been possible too.&quot; Yeah, but POSIX also only renames by name, so the same issue doesn&#8217;t apply here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-746513">
				<div id="div-comment-746513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tobi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746513">
			June 15, 2009 at 5:41 pm</a>		</div>

		<p>&quot;No need to wait for the kernel folks to write such a function; you can already do it yourself!&quot;</p>
<p>wrong: by centralizing the api developer productivity is increased and wrong code is avoided. also compatibility is improved as the windows team can rewrite the function because they own it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-746523">
				<div id="div-comment-746523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746523">
			June 15, 2009 at 6:04 pm</a>		</div>

		<p>@tobi: I agree that, in a perfect world, the OS API would do everything for us &#8212; and it&#8217;s obviously better for something to be written and tested once than reinvented over and over &#8212; but the world&#8217;s not perfect what Raymond said is still true:</p>
<p>If you need such a function then there&#8217;s no need to wait (a potentially infinite amount of time) for one to be provided since you can make it yourself.</p>
<p>(As it turns out, Vista already has a function for setting the filetime by handle but not everyone can use that yet and what Raymond said is still true in general for any other commands that take names rather than handles.)</p>
<p>I bet most of the people reading these posts have their own personal (or team) collection of wrapper code to make the things they do commonly easier to do. Sometimes you gotta wrap stuff yourself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-746553">
				<div id="div-comment-746553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746553">
			June 15, 2009 at 8:38 pm</a>		</div>

		<p>&#8220;even though by Windows for Workgroups was released in 1992, you weren&#8217;t really talking to MS-DOS any more&#8221;</p>
<p>Actually WfW 3.11 released in 1993.</p>
<p>Trivia: the WfW 3.11 feature of &#8220;32-bit file access&#8221; used what was really an early version of the Chicago (Win95) VFAT, IOS and IFSMGR subsystems. Thus it was the part of WfW 3.11 that was filled with the most bugs.</p>
<div class=post>[<i>I added that link specifically to pre-empt you, but apparently you just interpret it as encouragement to duplicate what I already wrote&#8230; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-746613">
				<div id="div-comment-746613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746613">
			June 16, 2009 at 6:49 am</a>		</div>

		<p>&quot;File operations by name have a race condition, or a potential to operate on the wrong file&quot;</p>
<p>&quot;POSIX also only renames by name&quot;</p>
<p>Hmmm&#8230;.that is interesting. Consider the following:</p>
<p>Process A: open file &quot;foo&quot;</p>
<p>Process B: rename &quot;foo&quot; to &quot;bar&quot;</p>
<p>Process A: rename open file &quot;foo&quot; to &quot;baz&quot;</p>
<p>So, on NT, step 3 operating by the file handle would succeed, and the file that was called &quot;foo&quot; will end up being called &quot;baz&quot;.</p>
<p>On POSIX, step 3 operating by file name fails, and the file ends up being called &quot;bar&quot;.</p>
<p>Fascinating. Now I&#8217;m trying to figure out which behaviour makes more sense.</p>
<p>Part of me is leaning towards POSIX, but I suspect that&#8217;s just because it&#8217;s the behaviour I&#8217;m most used to. Both definitely have their strengths and weaknesses.</p>
<p>Interesting to compare what happens if step 3 is a delete/unlink. Or if the original filename was in a &quot;temp&quot; directory, and the new filename is meant to be somewhere more permenant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-746643">
				<div id="div-comment-746643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746643">
			June 16, 2009 at 9:59 am</a>		</div>

		<p>&gt; In that case can&#8217;t you just document the &#8220;under the hood&#8221; function &#8230;</p>
<p>It is documented.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd445543.aspx" target=_new rel=nofollow rel="nofollow">http://msdn.microsoft.com/en-us/library/dd445543.aspx</a></p>
<p><a href="http://msdn.microsoft.com/en-us/library/ms804363.aspx" target=_new rel=nofollow rel="nofollow">http://msdn.microsoft.com/en-us/library/ms804363.aspx</a></p>
<div class=post>[<i>Notice that the documentation you link to is from the DDK, not the SDK. This is information for driver authors, not for application authors. The functions are not part of Win32 and applications should not call them. (It&#8217;s like injecting work orders into a subcontractor&#8217;s task list instead of going through the builder.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-746773">
				<div id="div-comment-746773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746773">
			June 16, 2009 at 11:42 am</a>		</div>

		<p>Interesting, I always suspected that&#8217;s what was happening, but I thought there was a possibility the functions which took a file name could have some short cuts in them which make them slightly faster than open/set/close.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-746803">
				<div id="div-comment-746803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746803">
			June 16, 2009 at 1:36 pm</a>		</div>

		<p>@Leo Davidson,</p>
<p>I think if you do the following sequence:</p>
<p>h = Open(path);</p>
<p>Write(h);</p>
<p>// before the handle is closed:</p>
<p>SetFileAttributes(path,&#8230;.);</p>
<p>Close(h);</p>
<p>Then SFA will be almost as fast as by-handle operation. Could anybody test that and confirm whether it&#8217;s so?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-746923">
				<div id="div-comment-746923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746923">
			June 16, 2009 at 7:47 pm</a>		</div>

		<p>Thanks Raymond, articles like these and the linked article about 95 are what I read TONT for. Concise, clear and in an entertaining style, they always contain some new gem to find.</p>
<p>Anyway, back to the topic of this and (to a lesser extent) the linked article, it always strikes me that people who say things like ‘Why does[n&#8217;t] Windows do X? Windows sucks!’ obviously never tried to investigate, using a debugger or whatever, to try to answer the question themselves. But then again, maybe they, knowing the answer, don&#8217;t feel the need to bug the internet with it and all those left are those who didn&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-746963">
				<div id="div-comment-746963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craig Barkhouse (MS)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746963">
			June 16, 2009 at 9:29 pm</a>		</div>

		<p>@Karellen &quot;That&#8217;s a really interesting example to choose, because unlike SetFileAttributes() and SetFileTime() which operate purely on the file &quot;inode&quot;, DeleteFile() modifies the directory that contains the link to the file that you want to delete.&quot;</p>
<p>Actually SetFileAttributes() and SetFileTime() do operate on the parent directory in addition to the file itself. &nbsp;In NTFS, a file&#8217;s timestamps and attributes are duplicated in the parent directory. &nbsp;(Also, as others have pointed out, there&#8217;s absolutely nothing like an i-node in NTFS. &nbsp;The closest concept would be an MFT entry, but even this is considerably different.)</p>
<p>@Karellen &quot;Some time ago, this wouldn&#8217;t be a problem, but ever since NTFS implemented hard links, there must no longer be a 1:1 mapping between &quot;inodes&quot; and directory entries. Therefore you should not be able to get &quot;the&quot; filename, (i.e. the directory entry to delete) from a file handle, because a file can have multiple filenames.&quot;</p>
<p>You can get &quot;the&quot; filename for a handle, because the FILE_OBJECT associated with the handle remembers what name you used to open it. &nbsp;However, there&#8217;s an interesting exception: Open-By-Id. &nbsp;If you open a file by ID, then you can only get &quot;a&quot; filename for a handle. &nbsp;The name you get is essentially randomly chosen from the different names the file has.</p>
<p>@Karellen: &quot;Oh. I thought that recent versions of NTFS allowed you to rename open files.&quot;</p>
<p>I think this has always been possible. &nbsp;Note that it doesn&#8217;t automatically succeed. &nbsp;If an app opens a handle with FILE_SHARE_DELETE sharing mode, then it is explicitly allowing the file to be deleted or renamed while the handle is still open. &nbsp;Otherwise a delete or rename will fail.</p>
<p>@Leo Davidson &quot;Oh, I just checked MSDN and I see there is a SetFileInformationByHandle which was added in Vista. Says it&#8217;s part of the separately-downloaded Win32 FileID API Library, rather than the main SDK&quot;</p>
<p>I have no idea what you mean by that second part. &nbsp;SetFileInformationByHandle() is a Win32 function and you can simply call it. &nbsp;It&#8217;s exported out of kernel32.dll. &nbsp;On prior versions of Windows, you can use the native API NtSetInformationFile() directly. &nbsp;It&#8217;s exported out of ntdll.dll. &nbsp;In fact SetFileInformationByHandle() is not much more than a wrapper around NtSetInformationByHandle().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-746973">
				<div id="div-comment-746973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craig Barkhouse (MS)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746973">
			June 16, 2009 at 9:34 pm</a>		</div>

		<p>@myself &quot;In fact SetFileInformationByHandle() is not much more than a wrapper around NtSetInformationByHandle().&quot;</p>
<p>&#8230; a wrapper around NtSetInformationFile().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-746983">
				<div id="div-comment-746983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-746983">
			June 16, 2009 at 9:42 pm</a>		</div>

		<p>[I added that link specifically to pre-empt you, but apparently you just interpret it as encouragement to duplicate what I already wrote&#8230; -Raymond]</p>
<p>Because it was inaccurate. WfW 3.1 in 1992 did not have 32-bit file access.</p>
<div class=post>[<i>Oh. But that doesn&#8217;t explain the second half of your comment, which is basically a duplicate of what I wrote in my earlier article. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-747213">
				<div id="div-comment-747213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craig Barkhouse (MS)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-747213">
			June 17, 2009 at 1:56 pm</a>		</div>

		<p>Karellen, it&#8217;s just the parent directory that gets updated. &nbsp;Remember you don&#8217;t just open &quot;a file&quot;, you open &quot;a link&quot;. &nbsp;Each link has a distinguished parent directory. &nbsp;(Exception as I mentioned earlier is opening by ID, but even then we designate an essentially random link to have been opened, so there is still a distinguished parent directory.) &nbsp;So it&#8217;s an O(1) operation. &nbsp;Not that it would be a huge deal to be O(#links), because the number of links tends to be quite small, often 1. &nbsp;Incidentally the update to both the file (i.e. the MFT entry) and the parent directory occur on handle close.</p>
<p>Your understanding of duplicated to the parent directory is correct. &nbsp;A directory entry consists of a name, timestamps, attributes, and sizes. &nbsp;(Look at the documentation for FindFirstFile&#8230; the WIN32_FIND_DATA struct corresponds roughly to what is stored in a directory entry.) &nbsp;If a file has two links in the same directory, it will indeed have two directory entries, with the respective names as well as duplicated copies of timestamps, attributes, and sizes. &nbsp;Upon handle close, only the entry corresponding to that link will get updated in the directory. &nbsp;This works fine for files with only one link (the vast majority of files). &nbsp;For files with multiple links it is a little bit quirky, as the &quot;duplicated&quot; information stored in the directories can get out of sync for the various links. &nbsp;However we also update the duplicated information for any given link when you open that link. &nbsp;Here, it&#8217;s easy to see this behavior:</p>
<p>echo foo&gt;linkA</p>
<p>mklink /h linkB linkA</p>
<p>dir &nbsp; &nbsp;(timestamps and sizes match)</p>
<p>echo bar&gt;&gt;linkB</p>
<p>dir &nbsp; &nbsp;(sizes + possibly timestamps differ)</p>
<p>type linkA</p>
<p>dir &nbsp; &nbsp;(duplicated info back in sync)</p>
<p>Think of the duplicated information as a sort of cache. &nbsp;The reason for the complexity is the same for any other cache: performance. &nbsp;This speeds up directory queries tremendously (such as &quot;dir&quot; above, or Windows Explorer) where auxiliary information such as timestamps, attributes, and sizes need to be displayed. &nbsp;If we didn&#8217;t cache this in the directory, you&#8217;d have to actually open a handle to each and every file and query for this information, meaning you&#8217;d have to read MFT entries that possibly sprawl all over the disk. &nbsp;Trust me, this is a huge perf win in this scenario. &nbsp;If you are enumerating and really only care about the names, then it is not a perf win.</p>
<p>The upshot however is that the duplicated information should be treated as a hint, not as authoritative (and note it wouldn&#8217;t be authoritative anyway even for a single-link file, as the file may have been modified right after you enumerated it). &nbsp;If an application really needs to be sure of this information, it must open a handle and query for it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-747193">
				<div id="div-comment-747193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-747193">
			June 17, 2009 at 10:51 am</a>		</div>

		<p>&quot;Actually SetFileAttributes() and SetFileTime() do operate on the parent directory in addition to the file itself.&quot;</p>
<p>You mean the parent *directories* &#8211; plural &#8211; right? Because if a file has multiple hardlinks then it can exist in multiple directories, which means that&#8230; hmmm&#8230; setting file attributes is O(n) on the number of hard links to it because you have to update that many directory entries?</p>
<p>Also, when you say &quot;duplicated in the parent directory&quot;, does that mean there&#8217;s one copy of the data that is in some way attached to the file data (in the MFT?) and then another copy in each directory that has a link to the file? What if there are 3 links to a file? 2 from directory A and one from directory B. Does &quot;A&quot; maintain 2 copies of the file attributes, or just one?</p>
<p>So&#8230; uh&#8230; what are the benefits of all this complexity?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-747403">
				<div id="div-comment-747403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-747403">
			June 17, 2009 at 7:05 pm</a>		</div>

		<p>&#8220;Notice that the documentation you link to is from the DDK, not the SDK. This is information for driver authors, not for application authors.&#8221;</p>
<p>But it does describe a function that is callable from user mode via ntdll.dll.</p>
<p>&#8220;The functions are not part of Win32&#8221;</p>
<p>True, they are part of the so called NT native API, callable from both user and kernel mode.</p>
<p>&#8220;applications should not call them. (It&#8217;s like injecting work orders into a subcontractor&#8217;s task list instead of going through the builder.)&#8221;</p>
<p>Would you say the same about any ntdll.dll function?</p>
<div class=post>[<i>It depends. Is it in the &#8220;Windows Driver Kit&#8221; part of the documentation? Then it&#8217;s for drivers. I fail to see how this is so difficult to understand. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-747313">
				<div id="div-comment-747313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-747313">
			June 17, 2009 at 4:26 pm</a>		</div>

		<p>&quot;Trust me, this is a huge perf win in this scenario.&quot;</p>
<p>Yes, but it&#8217;s *wrong*. If the &quot;dir&quot; program doesn&#8217;t have to produce correct results, I can write a replacement that runs in zero time and doesn&#8217;t hit the disk once!</p>
<p>Sacrificing correctness for speed? That really makes my skin crawl. Ewww.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-747433">
				<div id="div-comment-747433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-747433">
			June 18, 2009 at 12:43 am</a>		</div>

		<p>Of course, this just raises the question: why did some file operations in MS-DOS take file names and others take handles?</p>
<p>@Gabe:</p>
<p>NT had POSIX as a design requirement? Why is there no fork() then? Why is there the separate SFU package then? Or did they start off with that as a requirement but then relax it later?</p>
<div class=post>[<i>Um, you sort of answered the question yourself. fork() exists &#8211; in the POSIX subsystem, which is now an optional component. NT supports POSIX; Win32 doesn&#8217;t. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-747453">
				<div id="div-comment-747453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-747453">
			June 18, 2009 at 1:45 am</a>		</div>

		<p>[It depends. Is it in the &#8220;Windows Driver Kit&#8221; part of the documentation? Then it&#8217;s for drivers. I fail to see how this is so difficult to understand. -Raymond]</p>
<p>Indeed, most of these functions aren&#8217;t even callable from user mode, I was referring to one specific section of the WDK.</p>
<p>At lease some of the function from that specific section even have this as a clue for how to call it from user mode:</p>
<p>&#8220;Note &nbsp;If the call to the ZwOpenEvent function occurs in user mode, you should use the name &#8220;NtOpenEvent&#8221; instead of &#8220;ZwOpenEvent&#8221;.&#8221;</p>
<p>[Um, you sort of answered the question yourself. fork() exists &#8211; in the POSIX subsystem, which is now an optional component. NT supports POSIX; Win32 doesn&#8217;t. -Raymond]</p>
<p>Both Win32 and POSIX subsystems are implemented using a common NT native API implemented in ntdll.dll, which is the most direct path to kernel mode.</p>
<div class=post>[<i>Please do not encourage people to write Win32 programs that bypass the Win32 layer. Final warning. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-747473">
				<div id="div-comment-747473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-747473">
			June 18, 2009 at 2:05 am</a>		</div>

		<p>[Please do not encourage people to write Win32 programs that bypass the Win32 layer. Final warning. -Raymond]</p>
<p>I will stop now, but not before I mention <font color=red>&#8230;</font></p>
<p>Is that OK?</p>
<div class=post>[<i>&#8220;I will stop but not before I &#8230;&#8221; = &#8220;I won&#8217;t stop.&#8221; You already got your final warning. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-748153">
				<div id="div-comment-748153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090615-00/?p=17893#comment-748153">
			June 19, 2009 at 2:23 pm</a>		</div>

		<p>[&#8220;I will stop but not before I &#8230;&#8221; = &#8220;I won&#8217;t stop.&#8221; You already got your final warning. -Raymond]</p>
<p>OK, I may post the whole thing to off-road. It was about <font color=red>[deleted repeat of material that you keep promising to stop doing but somehow can&#8217;t bring yourself to stop]</font></p>
<div class=post>[<i>That was your final warning. I&#8217;m pretty sure you&#8217;re doing this on purpose now. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>