<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-137183">
				<div id="div-comment-137183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137183">
			January 19, 2004 at 7:50 am</a>		</div>

		<p>excellent post!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137193">
				<div id="div-comment-137193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Day</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137193">
			January 19, 2004 at 8:48 am</a>		</div>

		<p>How much is Intel paying Microsoft to work around all of these issues, or is Microsoft paying itself? I assume that someone is going to pay, because the customers are going to be yelling at Microsoft when the programs don&#8217;t work on their new machine with Microsoft OS/whatever and Intel CPU/whichever.</p>
<p>I&#8217;m assuming here that Intel has a desire to be seen to be backwards compatible, even when it&#8217;s 64 bit  CPUs aren&#8217;t, judging from your description.</p>
<p>Or, I suppose, the customers could just do what I did when I found I&#8217;d been sold a machine which corrupted the BIOS data area, which killed unpatched Brief, and return their new computers as not PC compatible?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137203">
				<div id="div-comment-137203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.whirlingdervishes.com' rel='external nofollow' class='url'>Henk Devos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137203">
			January 19, 2004 at 9:02 am</a>		</div>

		<p>It all stems from the olden C days and the main function.<br />
<br />In C, it didn&#8217;t really matter what the return type of your function was, wether you had one at all, or what type the parameters were. It was very common to just pass void pointers around, while the function itself would be declared as taking a struct pointer.<br />
<br />A special case was the main function, where you could have 0, 2 or 3 parameters to your choice, and return an int or void. This is still the case today: You can just have void main().<br />
<br />If that&#8217;s how it is for main, everyone assumes it must be the same for thread procs.<br />
<br />A solution might be that the compiler treats a function without a return value as a function that returns an int with value 0. This is what&#8217;s intended almost always anyway, and it would solve this problem.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137213">
				<div id="div-comment-137213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimmick.demon.co.uk' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137213">
			January 19, 2004 at 9:03 am</a>		</div>

		<p>I assume, nothing.</p>
<p>Basically, it&#8217;s a hazard of porting to IA-64; it&#8217;s much stricter about incorrect programs (or more accurately, programs which rely on undefined behaviour). Undefined behaviour in C is allowed to do anything, including corrupting memory, formatting your hard drive, or making demons fly out of your nose. [Historical link: <a target="_new" href="http://groups.google.com/groups?hl=en&amp;selm=10195%40ksr.com" rel="nofollow">http://groups.google.com/groups?hl=en&#038;selm=10195%40ksr.com</a>]</p>
<p>The 64-bit CPUs will and do run 32-bit x86 code, using the same lax attitude as a &#8216;genuine&#8217; x86 processor (not that there are any of those any more!) However, recompile that code as native IA-64 code and it will bite you. Not because of any flaw in the processor, but because your code is <em>wrong</em> and should be fixed.</p>
<p>No doubt MS will introduce compatibility fixes in the Longhorn generation for those incorrect programs released in the current XP/Server 2003 time-frame, but for the moment, it&#8217;s probably quite clean in there. Is your pops-too-many-arguments-from-the-stack WindowProc fix still in there, Raymond?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137223">
				<div id="div-comment-137223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Robinson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137223">
			January 19, 2004 at 9:10 am</a>		</div>

		<blockquote><p>
  You can just have void main(). </p>
<p>Henk, I dare you to say that on comp.lang.c :). Within 5 minutes, 50 C language lawyers will have flamed you to a crisp.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137233">
				<div id="div-comment-137233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137233">
			January 19, 2004 at 9:18 am</a>		</div>

		<p>&quot;A solution might be that the compiler treats a function without a return value as a function that returns an int with value 0.&quot;</p>
<p>I find it somewhat ironic that you&#8217;re suggesting that the compiler make every program slowre just to compensate for badly-written programs, while at the same time everybody seems to be upset that the OS does exactly that.</p>
<p>People want their compiler to optimize more, not less. Notice all the hinting micro-optimizations like declspec(noreturn) or declspec(novtable).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137243">
				<div id="div-comment-137243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.whirlingdervishes.com' rel='external nofollow' class='url'>Henk Devos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137243">
			January 19, 2004 at 11:50 am</a>		</div>

		<p>Tim:<br />
<br />You are absolutely right, according to the C standard.<br />
<br />But if you type &quot;c language main&quot; in google, you will find many tutorials on C which will tell you to use void.<br />
<br />for example: &lt;a href=&#8217;<a target="_new" href="http://www.dummies.com/WileyCDA/DummiesArticle/id-1062.html&quot;&gt;http://www.dummies.com/WileyCDA/DummiesArticle/id-1062.html&lt;/a&gt;" rel="nofollow"></a><a href="http://www.dummies.com/WileyCDA/DummiesArticle/id-1062.html&quot;&gt;http://www.dummies.com/WileyCDA/DummiesArticle/id-1062.html&lt;/a&#038;gt" rel="nofollow">http://www.dummies.com/WileyCDA/DummiesArticle/id-1062.html&quot;&gt;http://www.dummies.com/WileyCDA/DummiesArticle/id-1062.html&lt;/a&#038;gt</a>;.<br />
<br />If you search for &quot;c language hello world&quot; you will find this page:<br />
<br />&lt;a href=&quot;<a target="_new" href="http://www2.latech.edu/~acm/helloworld/c.html&quot;&gt;http://www2.latech.edu/~acm/helloworld/c.html&lt;/a&gt;" rel="nofollow"></a><a href="http://www2.latech.edu/~acm/helloworld/c.html&quot;&gt;http://www2.latech.edu/~acm/helloworld/c.html&lt;/a&#038;gt" rel="nofollow">http://www2.latech.edu/~acm/helloworld/c.html&quot;&gt;http://www2.latech.edu/~acm/helloworld/c.html&lt;/a&#038;gt</a>;. Implicit int is returned, but no return statement. Wrong again.<br />
<br />In fact, it will be extremely difficult to find a correct example on google.<br />
<br />This page lists all the possible forms:<br />
<br />&lt;a href=&quot;<a target="_new" href="http://www.csee.umbc.edu/courses/undergraduate/CMSC104/spring02/burt/C_summary.html&quot;http://www.csee.umbc.edu/courses/undergraduate/CMSC104/spring02/burt/C_summary.html&lt;/a&gt;" rel="nofollow"></a><a href="http://www.csee.umbc.edu/courses/undergraduate/CMSC104/spring02/burt/C_summary.html&quot;http://www.csee.umbc.edu/courses/undergraduate/CMSC104/spring02/burt/C_summary.html&lt;/a&#038;gt" rel="nofollow">http://www.csee.umbc.edu/courses/undergraduate/CMSC104/spring02/burt/C_summary.html&quot;http://www.csee.umbc.edu/courses/undergraduate/CMSC104/spring02/burt/C_summary.html&lt;/a&#038;gt</a>;<br />
<br />I would say, the de facto standard is all versions are allowed. that&#8217;s how most people do it, and compilers allow it.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137253">
				<div id="div-comment-137253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137253">
			January 19, 2004 at 2:33 pm</a>		</div>

		<p>You seem to be of the general belief that &quot;Any rule that is not enforced today must never be enforced tomorrow.&quot; Which has as a consequence that practically nothing can be changed any more. (For example, no internal data structures can change because nobody was preventing you from using ReadProcessMemory to suck them out.)</p>
<p>Feel free to argue this position at the next standards meeting. I suspect the people on the standards committee have a different viewpoint on the matter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137283">
				<div id="div-comment-137283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Day</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137283">
			January 19, 2004 at 4:34 pm</a>		</div>

		<p>As a developer I&#8217;m of the personal belief that I should follow standards and rules with care.</p>
<p>When I think of customer impact and costs I become a lot more liberal and start to want the OS to do a really good job of insulating applications from changes in the underlying hardware.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137293">
				<div id="div-comment-137293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.whirlingdervishes.com' rel='external nofollow' class='url'>Henk Devos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137293">
			January 19, 2004 at 4:41 pm</a>		</div>

		<p>I think the only possibility to change this would be having a compiler option that enforces this, and is on by default, but can be turned off.<br />
<br />The quick look i have taken shows that most tutorials, courses etc. get it wrong. Specifically, most of them contain the old Hello World sample that is wrong (but, i assume, used to be right). As long as this is the case, it will be very hard to enforce this standard.<br />
<br />I think the confusion is again based on the old versions of C, where void didn&#8217;t exist, and the main was usually written just as main(). When void was introduced, many programmers got it wrong and thought void was the same as putting nothing, whereas putting nothing is the same as int. The habit also used to be to have no return statement when there was no explicit return type, just as was later the case with void.</p>
<p>One more remark:<br />
<br />Usually it&#8217;s even plain wrong to use CreateThread at all. When using any crt functions, you should use _beginthreadex instead, which is very similar to CreateThread. I wonder how many programmers get that right&#8230;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137323">
				<div id="div-comment-137323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shane King</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137323">
			January 19, 2004 at 7:03 pm</a>		</div>

		<p>&quot;Usually it&#8217;s even plain wrong to use CreateThread at all. When using any crt functions, you should use _beginthreadex instead, which is very similar to CreateThread. I wonder how many programmers get that right&#8230; &quot;</p>
<p>Only if you&#8217;re linking to the C run time statically. If you&#8217;re linking dynamically, you can do it either way.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137333">
				<div id="div-comment-137333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137333">
			January 19, 2004 at 9:17 pm</a>		</div>

		<p><a target="_new" href="http://www.microsoft.com/msj/1099/win32/win321099.aspx" rel="nofollow">http://www.microsoft.com/msj/1099/win32/win321099.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137343">
				<div id="div-comment-137343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shane King</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137343">
			January 19, 2004 at 9:32 pm</a>		</div>

		<p>You have to wonder why MSDN doesn&#8217;t say &quot;don&#8217;t use this&quot; in big red flashing letters then, don&#8217;t you?</p>
<p>I suspect MSDN is as much to blame for many of Raymond&#8217;s gripes as any of the developers out there. It&#8217;s a bit much to expect that we&#8217;ve all read MSJ articles that are over 4 years old.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137353">
				<div id="div-comment-137353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137353">
			January 19, 2004 at 9:41 pm</a>		</div>

		<p>Take care not to confuse MSJ with the Platform SDK; they are unrelated publishing organizations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137363">
				<div id="div-comment-137363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.whirlingdervishes.com' rel='external nofollow' class='url'>Henk Devos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137363">
			January 20, 2004 at 12:53 am</a>		</div>

		<p>I just thought i&#8217;d take a look at how Microsoft declares main functions.<br />
<br />I went to google and typed &quot;microsoft.com c language reference main&quot;.<br />
<br />The first hit is C#, the second has void main().<br />
<br />Looking a bit further, although the definition of the main function in the C/C++ language reference is correct, most examples in the C/C++ language reference are wrong. For example <a target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vccelng/htm/tions_44.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vccelng/htm/tions_44.asp</a>.<br />
<br />The only correct one i found so far in the C/C++ language reference is <a target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vccelng/htm/basic_29.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vccelng/htm/basic_29.asp</a>, which demonstrates the use of return in the main functon and thus has to return int to compile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137373">
				<div id="div-comment-137373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137373">
			January 20, 2004 at 1:25 am</a>		</div>

		<p>Raymond, I take it casting function pointers on the ia64 copies the value blindly and doesn&#8217;t do something like call a thunked function or point to another &quot;gp&quot; register, whatever that is?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137383">
				<div id="div-comment-137383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimmick.demon.co.uk' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137383">
			January 20, 2004 at 2:37 am</a>		</div>

		<p>The gp register is another name for r1. By convention, the r1 register is used as a base pointer for accesses into a module&#8217;s static data &#8211; there can be up to 4MB of this accessed directly (due to an architectural limitation &#8211; there are only 22 bits in the instruction bundle for indirect addressing via offset). If you need more than that, I assume the compiler has to store a relocatable address in this global data, requiring two dereferences to access the actual data.</p>
<p>This reduces the number of relocations. There are a huge number of them for x86 DLLs, because x86 doesn&#8217;t offer much support for position-independent code. This is one reason that most texts for Windows DLL development (I can think of at least two) suggest you set the base address for your DLLs and bind the import table &#8211; it speeds up loading, and your debug symbols have a greater chance of being correct&#8230;</p>
<p>More information on gp can be found at <a target="_new" href="http://msdn.microsoft.com/msdnmag/issues/1100/hood/" rel="nofollow">http://msdn.microsoft.com/msdnmag/issues/1100/hood/</a></p>
<p>Casting a function pointer typically generates no code at all &#8211; it&#8217;s a simple copy. If you changed gp, the function would be looking for its static data in a different module&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137393">
				<div id="div-comment-137393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Maas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137393">
			January 20, 2004 at 3:18 am</a>		</div>

		<p>This strictness could seriously work against attempts to raise IA64 market share. When big companies try their crufty code on this new processor, they&#8217;ll blame IT for the resulting problems. (just like Raymond&#8217;s examples of Microsoft getting blamed for breaking poorly-written Windows programs).</p>
<p>As a programmer I know it&#8217;s always good to test one&#8217;s code in a strict environment. But really what gains are to be had after one puts in all the effort to root out bugs like these? I haven&#8217;t seen convincing evidence that the IA64 platform is any faster than modern x86 except on certain micro-benchmarks. (and even if it matches the absolute speed, only then do you start worrying about price/performance)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137663">
				<div id="div-comment-137663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Henderson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-137663">
			January 21, 2004 at 8:17 am</a>		</div>

		<p>The problem isn&#8217;t the application code or the chip &#8212; it&#8217;s the language.  The fact is:  those two function signatures are <em>not</em> equivalent, and the compiler shouldn&#8217;t allow you to cast one as the other even though you&#8217;re working with pointers.  The compiler should be smart enough to detect that they point to different data types and prevent you from passing one for the other.</p>
<p>Other language compilers (Pascal and Modula 2 come to mind) prevent this type of mistake by having the callee rather than the caller decide whether an argument is passed by reference.  So, rather than pass LP_foo you just pass foo, and the signature of the called function defines whether it is passed by value or reference.  Even if the function declaration specifies that foo is passed by reference, you can&#8217;t substitute &quot;bar&quot; for foo &#8212; the compiler won&#8217;t allow it.</p>
<p>Of course, there are obvious downsides to having the callee alone make this determination.  I mention it here as an example of one way a compiler can prevent the types of mistake you describe.</p>
<p>The fundamental problem is that C has a long history of passing things around in indistinguishable pointers, effectively defeating any type checking the compiler might want to do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-139203">
				<div id="div-comment-139203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Henderson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-139203">
			January 26, 2004 at 8:02 am</a>		</div>

		<p>A couple of additional comments on this&#8230;</p>
<p>I think C# actually gets this right from a language/compiler standpoint.  It addresses this issue in two ways:</p>
<p>1.  You don&#8217;t have pointers, per se, you have references, which are, in this respect, like next-generation pointers.  When you pass around a reference to something, it&#8217;s not merely a memory address, but includes the other information necessary to decode what exactly is referenced.  Because of this, the compiler is able to prevent you from casting a function pointer to one type of function to another.</p>
<p>2.  In C#, both the caller and the callee have to specify that a parameter is passed by reference.  So, unlike Pascal and Modula 2, the callee alone does not make this determination.  One downside of having the callee alone decide whether a param is passed by value or address is that the callee can change the param passed in &#8212; changes the caller isn&#8217;t expecting &#8212; possibly introducing subtle bugs that the caller will have a tough time running down.</p>
<p>And, one more thing:  in VC++, you can turn on compiler warning 4191 to warn you of invalid casts like this.  See <a target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vccore/html/vcrefCompilerWarning" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vccore/html/vcrefCompilerWarning</a>(level3)C4191.asp for details.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-153123">
				<div id="div-comment-153123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/joshwil/archive/2004/03/10/87656.aspx' rel='external nofollow' class='url'>Josh Williams</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-153123">
			March 10, 2004 at 9:40 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-181323">
				<div id="div-comment-181323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">venky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-181323">
			June 7, 2004 at 7:04 am</a>		</div>

		<p>Hello,</p>
<p>I am working on a ia64 project. I have encountered with a opcode CHKS_MOV_PR.<br />
<br />Could anyone help me what this mean ?<br />
<br />Thanks in advance for help.</p>
<p>Venky</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-271973">
				<div id="div-comment-271973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/04/21/410397.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040119-00/?p=41003#comment-271973">
			April 21, 2005 at 9:00 am</a>		</div>

		<p>The Itanium has two stacks, so don&#8217;t assume that there&#8217;s only one.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>