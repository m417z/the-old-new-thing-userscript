<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1310295">
				<div id="div-comment-1310295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170925-00/?p=97075#comment-1310295">
			September 25, 2017 at 7:43 am</a>		</div>

		<p>&gt; spurious wakes aren&#8217;t a problem (aside from performance)</p>
<p>I&#8217;m not sure why you dismiss performance so casually&#8230;  If the CV wakes a thread (spurious or not), the thread by definition is holding a mutex which means other threads may not be able to make progress (on top of a potentially needless context switch).  That by itself might be a genuine problem if many of the wakeups are spurious.</p>
<p>You shouldn&#8217;t say it absolutely doesn&#8217;t matter &#8212; you can only say it _usually_ doesn&#8217;t matter.</p>
<p>As an aside, C++11&#8217;s std::condition_variable specifies a total &#8220;happens before&#8221; ordering on CV wakeups and wait()s to address this issue.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1310306">
				<div id="div-comment-1310306" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170925-00/?p=97075#comment-1310306">
			September 25, 2017 at 10:24 am</a>		</div>

		<p>I&#8217;m saying that spurious wakeups aren&#8217;t a problem from a correctness point of view. They impact performance but not correctness.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1310307">
				<div id="div-comment-1310307" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clockwork-Muse</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170925-00/?p=97075#comment-1310307">
			September 25, 2017 at 12:00 pm</a>		</div>

		<p>&#8230;. except, unless I&#8217;m missing something, it doesn&#8217;t actually address these issues so much as abstract the loop away.  Even then, spurious wakeups can happen for unrelated reasons, so handling the condition is essentially some form of standard &#8220;tax&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1310325">
				<div id="div-comment-1310325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.farnz.org.uk/' rel='external nofollow' class='url'>Simon Farnsworth</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170925-00/?p=97075#comment-1310325">
			September 26, 2017 at 5:48 am</a>		</div>

		<p>I&#8217;ve just had a look through the last C++11 draft (n3337), and I can&#8217;t find the language you&#8217;re referring to. 30.5 requires an unspecified total order for the parts of the CV operation, and 30.5.1 says that spurious wake-ups are allowed. </p>
<p>There&#8217;s a variant on wait that takes a predicate, and is documented to be equivalent to while(!predicate) wait();, but possibly using library optimizations to reduce spurious wake-ups. However, it&#8217;s legitimate to have spurious wake-ups and tests of the predicate.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1310485">
				<div id="div-comment-1310485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170925-00/?p=97075#comment-1310485">
			September 27, 2017 at 8:57 am</a>		</div>

		<p>&gt; I’ve just had a look through the last C++11 draft (n3337), and I can’t find the language you’re referring to. 30.5 requires an unspecified total order for the parts of the CV operation, and 30.5.1 says that spurious wake-ups are allowed.</p>
<p>In the C++17 draft (n4660), section 33.5:</p>
<p><i>The implementation shall behave as if all executions of notify_one, notify_all, and each part of the wait,<br />
wait_for, and wait_until executions are executed in a single unspecified total order consistent with the<br />
&#8220;happens before&#8221; order.</i></p>
<p>That combined with the definition of notify_all() (<i>Unblocks all threads that are blocked waiting for *this</i>), unambiguously addresses the &#8220;is the wake saved for the next thread that waits&#8221; question in the first paragraph.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx odd alt depth-2" id="comment-1310365">
				<div id="div-comment-1310365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170925-00/?p=97075#comment-1310365">
			September 26, 2017 at 9:35 am</a>		</div>

		<p>The spurious wake is hardly ever a problem for performance although of course you need to profile to be sure.<br />
It is usually caused by a broadcast wake sent to multiple waiters. By the time the &#8220;spurious&#8221; wake happens, the other threads have consumed all available work events. And so the wasted wake mutexes are burned on threads doing no work but don&#8217;t interrupt the other threads, because they&#8217;re busy working.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>