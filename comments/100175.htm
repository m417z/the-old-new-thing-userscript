<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-jan-ringos even thread-even depth-1 parent" id="comment-1370315">
				<div id="div-comment-1370315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jan+Ringo%C5%A1' rel='external nofollow' class='url'>Jan Ringo≈°</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181109-00/?p=100175#comment-1370315">
			November 9, 2018 at 2:36 pm</a>		</div>

		<p>I can&#8217;t help but think: wouldn&#8217;t it be nice if you could ask linker for an automatically generated symbol representing beginning and ending of a section? Something like __mydataSectionBase and __mydataSectionEnd, akin to __ImageBase symbol. It doesn&#8217;t seems very difficult to implement in linker (but maybe it is), and since this isn&#8217;t the first series of articles on this topic I&#8217;ve read, I wonder if Visual C++ Compiler/Linker team has a feature like this buried somewhere deep in their TODO lists?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mr-telnet odd alt depth-2" id="comment-1370395">
				<div id="div-comment-1370395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mr.+Telnet' rel='external nofollow' class='url'>Mr. Telnet</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181109-00/?p=100175#comment-1370395">
			November 12, 2018 at 7:09 am</a>		</div>

		<p>It is worth nothing that this is how glibc runs global initializers, so I would imagine there is some equivalent technology to linker scripts in the Microsoft compiler tool chain.  Matt Godbolt gave a talk at CppCon 2018 which covered the topic as it relates to gcc (<a href="https://youtu.be/dOfucXtyEsU?t=31m18s" rel="nofollow">https://youtu.be/dOfucXtyEsU?t=31m18s</a>)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo even thread-odd thread-alt depth-1 parent" id="comment-1370355">
				<div id="div-comment-1370355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181109-00/?p=100175#comment-1370355">
			November 10, 2018 at 2:39 am</a>		</div>

		<p>There&#8217;s something I&#8217;m surely missing&#8230; <code>sizeof</code> does count the padding required to align an immediately adjacent other object of the same type, in particular an element of an array is distant from the next one exactly <code>sizeof(T)</code> bytes. Are we talking about some other padding the compiler may decide to insert between two adjacent global objects? But why would it do so? (Of course the standard allows pretty much anything in this regard, but why would VC++ do so?)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-matteo odd alt depth-2" id="comment-1370365">
				<div id="div-comment-1370365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181109-00/?p=100175#comment-1370365">
			November 10, 2018 at 2:41 am</a>		</div>

		<p>By the way, at least yesterday there was something very broken posting from mobile&#8230; trying to post this comment from my phone (Android/Firefox) the &#8220;Post comment&#8221; was present, but did nothing when touched. Logging out from my account made the comment box disappear entirely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-d-sturm even depth-2" id="comment-1370385">
				<div id="div-comment-1370385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DanStur' rel='external nofollow' class='url'>DanStur</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181109-00/?p=100175#comment-1370385">
			November 10, 2018 at 6:31 am</a>		</div>

		<p>You mean you&#8217;re wondering why Raymond uses alignof in case of a null area?</p>
<p>The following would be legal, assuming struct S is 48 bytes in size and needs 24 byte alignment.<br />
S1 0-48<br />
Null area 48-72<br />
S2 72-96</p>
<p>If we see that after S1 there is a null area we know we can always increase by the alignment of S to get to the next possible starting point. Neither sizeof nor a smaller value than the alignment would necessarily work (if we increase by 16 we would miss the next valid point for example). </p>
<p>Or is it simply a question of why the compiler would insert such padding? Raymond mentioned incremental linking last time &#8211; if you leave enough space you could put a changed version of the struct there. Although I don&#8217;t see what advantage compared to putting new things at the end of the section this would have.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>