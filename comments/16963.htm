<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-765003">
				<div id="div-comment-765003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090827-00/?p=16963#comment-765003">
			August 27, 2009 at 10:17 am</a>		</div>

		<p>10,000 timers ought to be enough for anybody.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765063">
				<div id="div-comment-765063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090827-00/?p=16963#comment-765063">
			August 27, 2009 at 12:13 pm</a>		</div>

		<p>In general, requiring so many timers is an indication of larger architectural issues in your application.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765073">
				<div id="div-comment-765073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wyatt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090827-00/?p=16963#comment-765073">
			August 27, 2009 at 12:18 pm</a>		</div>

		<p>&quot;Actually it looks like when the garbage collector cleans a WinForms Timer it&#8217;ll get cleaned up properly, but if you&#8217;re using a lot of timers it&#8217;s probably good to .Dispose them explicitly. &nbsp;As long as you don&#8217;t have the Tick event (or any other, such as Disposed) hooked up it should be collected automatically&quot;</p>
<p>Not if Enabled = true it won&#8217;t. &nbsp;You&#8217;ll leak the timer and probably the form it&#8217;s on too. &nbsp;If you dispose of the for you placed it on in the designer, that should take care of it. &nbsp;And disposing of forms is always a good idea, as other components like MenuItem have a habit of leaking unless disposed too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765103">
				<div id="div-comment-765103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090827-00/?p=16963#comment-765103">
			August 27, 2009 at 4:52 pm</a>		</div>

		<p>Garbage collection only cleans up RAM &#8211; no other resources. If the garbage collector happens to run, you&#8217;ll probably get your other resources cleaned up &#8211; but there&#8217;s absolutely no guarantee as to when that will happen.</p>
<p>Therefore, if the class is anything but somewhere to store data there&#8217;s a fairly good chance that you need to read the documentation to find out how to clean up when you&#8217;re finished using the class.</p>
<p>Of course, with timers this only matters if you&#8217;re creating and destroying them at runtime, instead of just sticking a fixed number on forms and leaving them for the entire lifetime of the application.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765053">
				<div id="div-comment-765053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090827-00/?p=16963#comment-765053">
			August 27, 2009 at 11:20 am</a>		</div>

		<p>&quot;Jessica pointed out that the WinForms Timer component is easily leaked &quot;because most people don&#8217;t know that they have to call Dispose on it.&quot;&quot;</p>
<p>BAH I did not know this, now I have to go and patch all my apps.</p>
<p>Actually it looks like when the garbage collector cleans a WinForms Timer it&#8217;ll get cleaned up properly, but if you&#8217;re using a lot of timers it&#8217;s probably good to .Dispose them explicitly. &nbsp;As long as you don&#8217;t have the Tick event (or any other, such as Disposed) hooked up it should be collected automatically*.</p>
<p>It might not be cleaned up correctly if the timer is running but I&#8217;m not sure. &nbsp;In any case you wouldn&#8217;t normally leave a timer running with an unhooked Tick event**.</p>
<p>* &#8211; Reminds me of the time when there was this robot contest thing where you made a real car automatically drive down a course without any human aid (the course wasn&#8217;t known to the contestants ahead of time). &nbsp;One group programmed their stuff in .NET and complained when it ran out of memory and crashed, complaining of memory leaks. &nbsp;Turns out they never properly unhooked events on objects they no longer needed to use so the garbage collector &nbsp;could never clean up.</p>
<p>** &#8211; All information was garnered through my awesome powers of Reflection! &nbsp;And possibly a third-party tool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765113">
				<div id="div-comment-765113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090827-00/?p=16963#comment-765113">
			August 27, 2009 at 7:11 pm</a>		</div>

		<p>If the Timer is added via the designer then it will be disposed automatically with the form, since it gets added to the form&#8217;s &#8216;components&#8217; container.</p>
<p>The far more frequent leaks come from people not remembering to Dispose their dialogs, or worse, not remembering to Dispose of non-stock Pens and Brushes created for custom painting.</p>
<p>Less common, but also trap-worthy: if you have a dynamic panel (where you add/remove controls at runtime), you need to remember to Dispose of the controls that you remove (unless you keep a reference around to them and actually add them back in again later on).</p>
<p>The cardinal rule: if it&#8217;s IDisposable, Dispose of it. &nbsp;(Although just to complicate matters, some objects want to be Closed instead of being Disposed. &nbsp;And it&#8217;s not always obvious from the help pages whether a given object is IDisposable unless you dig right down its inheritance hierarchy.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765143">
				<div id="div-comment-765143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Pryor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090827-00/?p=16963#comment-765143">
			August 27, 2009 at 10:29 pm</a>		</div>

		<p>@Bob While the GC only handles memory, the GC will also invoke the object.Finalize() method during collection. &nbsp;This gives the object a &quot;last minute&quot; opportunity to clean up any non-managed resources (non-GC ram, files, HANDLEs, timers, etc., etc.).</p>
<p>See:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</a></p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/b1yfkh5e.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/b1yfkh5e.aspx</a></p>
<p>All types which wrap unmanaged resources should follow the IDisposable convention. &nbsp;Best case, it&#8217;ll inform developers to use &#8216;using&#8217; blocks or otherwise ensure that resources are released quickly. &nbsp;Worst case, it&#8217;ll give the GC an opportunity to clean up the unmanaged resource.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765153">
				<div id="div-comment-765153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090827-00/?p=16963#comment-765153">
			August 28, 2009 at 1:52 am</a>		</div>

		<p>If you are using these disposable objects only in a short scope consider using the &quot;Using&quot; (in VB.NET anyway, not sure about C#) feature. This way objects automatically are disposed at the end of the scope (even if an exception happened, or so I am told).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765213">
				<div id="div-comment-765213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090827-00/?p=16963#comment-765213">
			August 28, 2009 at 3:48 am</a>		</div>

		<p>@Miral: The &quot;I don&#8217;t know if you&#8217;re disposable or not&quot; thing annoys me so much that I&#8217;ve gotten into the habit of always writing ((IDisposable) object).Dispose() if .Dispose() is explicitly implemented. That&#8217;s only if you can&#8217;t use &quot;using&quot;, of course.</p>
<p>I understand the rationale here (that &quot;closing&quot; a connection feels obvious, while calling some obscure .Dispose() method does not) but IMO, it&#8217;s far better to clearly communicate the object needs finalization (by exposing .Dispose()) than to make the interface &quot;clean&quot;. This also saves a trip to the documentation (or worse, Reflector) to find out if .Close() actually does what you think it does &#8212; with .Dispose(), there is no question.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765263">
				<div id="div-comment-765263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Eshbach</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090827-00/?p=16963#comment-765263">
			August 28, 2009 at 3:47 pm</a>		</div>

		<p>It&#8217;s a shame that all the hype surround these 4th generation languages makes it sound like a programmer won&#8217;t experience some of the same basic issues a 3rd generation language does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765313">
				<div id="div-comment-765313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090827-00/?p=16963#comment-765313">
			August 28, 2009 at 8:37 pm</a>		</div>

		<p>wait, I though the point of moving to .net is fool proof programming and no leaks..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765433">
				<div id="div-comment-765433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Eshbach</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090827-00/?p=16963#comment-765433">
			August 31, 2009 at 9:51 am</a>		</div>

		<p>The 4th generation languages do save a programmer from dealing with some basic issues such as resizing memory or buffer overflows, but other issues they don&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>