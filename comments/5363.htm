<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1037143">
				<div id="div-comment-1037143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130204-00/?p=5363#comment-1037143">
			February 4, 2013 at 9:31 am</a>		</div>

		<p>Parsing names don&#39;t always round trip back to a pidl. The control panel and 3rd party stuff can be problematic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1037213">
				<div id="div-comment-1037213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130204-00/?p=5363#comment-1037213">
			February 5, 2013 at 6:10 am</a>		</div>

		<p><!-- Nitpick: CComPtr&lt;IShellItemArray&lt; has a less-than sign at the end instead of a greater-than.</p>

 --></p>
<p>In the for statement, is spsi.Release() really necessary?</p>
<p>I wonder, do you use an IDE when building these examples? If not, do you know all of this from the top of your head, or are you retrieving past source code snippets?</p>
<p>I mean, I&#39;ve done code similar to this (in terms of ATL templates, smart pointers and Win32) with a plain text editor (don&#39;t ask&#8230;), but it took quite a few round trips between the editor and the documentation.</p>
<div class="post">[<em>Remove the <code>spsi.Release()</code> and run the code and see what happens. (A debug build will identify the problem more quickly.) -Raymond</em>]</div></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1037253">
				<div id="div-comment-1037253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130204-00/?p=5363#comment-1037253">
			February 5, 2013 at 7:40 am</a>		</div>

		<p>@Raymond, you&#39;re entirely right. It would leak memory. A debug build would also complain about the pointer not being NULL right on the second iteration&#39;s test, the purpose indeed seems to be to make the developer stumble on such cases.</p>
<p>For the matter of the mental exercise, I didn&#39;t compile it, but I peeked the implementation of CComPtr and CComPtrBase.</p>
<p>Somehow, I was hoping C++ would do the RAII dispose pattern when resetting the pointer, but that&#39;s not the case. This is what so much time away from C++ does, especially coming from more dynamic environments. In some languages, you can setup e.g. a setter that releases the previous pointer if not NULL before setting it to the new value, together with syntax/macros that allocate temporary pointers to &quot;foreign calls&quot;, so you never change the field directly without notification.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1037343">
				<div id="div-comment-1037343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130204-00/?p=5363#comment-1037343">
			February 5, 2013 at 9:30 am</a>		</div>

		<p>Microsoft&#39;s C++ frameworks predate modern C++ thought and so don&#39;t understand RAII. Can&#39;t really blame them, but the stuff looks old and mis-designed now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1037793">
				<div id="div-comment-1037793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130204-00/?p=5363#comment-1037793">
			February 7, 2013 at 4:25 am</a>		</div>

		<p>@Joshua, having &amp; and * operators that return the address of the inner pointer (with an assertion) is relatively modern C++. What C++ doesn&#39;t do for you, even a more modern one, is a code transformation around the &amp; operator that:</p>
<p>&#8211; creates a temporary variable of T*</p>
<p>&#8211; uses the smart pointer&#39;s pointer getter to initialize the temp</p>
<p>&#8211; invokes the function with the temp</p>
<p>&#8211; uses the smart pointer&#39;s pointer setter with the value of temp</p>
<p>And it shouldn&#39;t, not now that we rely on how the &amp; and * operators work. But one may do this with further RAII (there goes the concise for loop) or with a template.</p>
<p>To correct myself, the order of execution in the setter must be to first AddRef the new value if not NULL and then Release the old value if not NULL: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2004/04/06/108395.aspx" rel="nofollow">blogs.msdn.com/&#8230;/108395.aspx</a></p>
<p>At first thought, it just sounds so &quot;obvious&quot; we should Release the old value and AddRef the new one, but it only becomes clear there is an order it must be done with further insight, when you realize the new value can be an interface pointer sharing a refcount (e.g. same underlying object) with the old value.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>