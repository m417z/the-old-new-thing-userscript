<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (33)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-nathan_works even thread-even depth-1" id="comment-816953">
				<div id="div-comment-816953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-816953">
			March 5, 2010 at 7:16 am</a>		</div>

		<p>I thought the various NaNs were defined by setting one or more of the high order bits of the value .. (I&#8217;ve long since forgotten exponent/mantissa etc representation of floats .. I just &quot;remember&quot; enough to worry about accumulated roundoff errors when doing certain scientific functions)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-817013">
				<div id="div-comment-817013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817013">
			March 5, 2010 at 9:18 am</a>		</div>

		<blockquote><p>
  NaN does not compare equal to itself
</p></blockquote>
<p>More precisely, there are a lot of different NaN values. If there are N mantisa bits, then there are 2 ^ N &#8211; 1 different NaN values, and half of those are &quot;signaling&quot; and half of those are &quot;quiet.&quot; For double, N = 53, there are 9007199254740991 different NaN values.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-817023">
				<div id="div-comment-817023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817023">
			March 5, 2010 at 9:28 am</a>		</div>

		<p>acq: yes, but even if you <em>do</em> have the same NaN it won&#8217;t compare equal to itself, which is a fact not fully captured in your statement.</p>
<p>Not present in the current version of MSVC but for C rather than C++ it&#8217;s worth mentioning that c99 and [not a final standard, but almost certainly since it tends to defer to C on these things] c++0x add two macros to math.h &#8211; INFINITY and NAN &#8211; which are a positive infinity and a quiet nan respectively [of type float] (I guess you&#8217;re expected to write &#8216;-INFINITY&#8217; for negative infinity) &#8211; in addition to standardizing isnan, fpclassify, and isfinite.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-817033">
				<div id="div-comment-817033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817033">
			March 5, 2010 at 9:43 am</a>		</div>

		<blockquote><p>
  &nbsp;it won&#8217;t compare equal to itself, which is a fact not fully captured in your statement.
</p></blockquote>
<p>It was not the subject of my statement. I wanted to point that there is no &quot;one NaN&quot; not even &quot;two NaNs&quot; but very large number of them.</p>
<p>And I think I erred with the number, not counting positive nad negative variants. I think there are actually 18e15 different NaNs representable inside of one IEEE double.</p>
<p>Programmers should understand that if they use &quot;quiet_NaN()&quot; value they are using only one out of 18e15 NaNs.</p>
<p>Still, not all NaNs are created equal, only a few values are generated in FPU instructions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-817053">
				<div id="div-comment-817053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817053">
			March 5, 2010 at 10:23 am</a>		</div>

		<blockquote><p>
  bool isnan(float x) { return x != x; }
</p></blockquote>
<p>I don&#8217;t think that is correct. AFAIK the infinities aren&#8217;t equal to themselves either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-817063">
				<div id="div-comment-817063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sab39.netreach.com' rel='external nofollow' class='url'>Stuart</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817063">
			March 5, 2010 at 10:49 am</a>		</div>

		<p>&#8220;Wait, where&#8217;s negative infinity?&#8221;</p>
<p>It&#8217;s &#8220;-std::numeric_limits::infinity()&#8221; surely?</p>
<div class=post>[<i>I wouldn&#8217;t put it past IEEE floating point rules to make −infinity() different from negative_infinity(). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-817103">
				<div id="div-comment-817103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817103">
			March 5, 2010 at 12:11 pm</a>		</div>

		<p>@Nathan</p>
<p>That is of no relevance here. There are only two infinities (positive and negative) as upper and lower bound of any real number sequence. Cardinal number&#8217;s ain&#8217;t got nothing to do with it.</p>
<div class=post>[<i>Does IEEE floating point have projective infinity? I can&#8217;t remember and I can&#8217;t be bothered to check. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-817113">
				<div id="div-comment-817113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carl D</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817113">
			March 5, 2010 at 12:23 pm</a>		</div>

		<p>@acq: &nbsp;If I recall correctly, one intent behind having many NaNs, combined with the fact that NaNs propagate (e.g. 1+NaNx returns NaNx) was to allow a system to initialize every floating point value in a program to a unique NaN. &nbsp;Because of NaN propagation, if the result of a calculation is a NaN, you can determine which (or at least one of) variable was undefined in the calculation based on the mantissa bits of the result.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-817133">
				<div id="div-comment-817133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carl D</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817133">
			March 5, 2010 at 12:32 pm</a>		</div>

		<p>@Raymond: &nbsp;No, IEEE floating point has only affine infinity. &nbsp;The original 8087 supported both affine and projective infinity, IIRC.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-817153">
				<div id="div-comment-817153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817153">
			March 5, 2010 at 1:46 pm</a>		</div>

		<p>The 8087 has an Infinity Control bit. I recall 0 is projective, 1 is affine. When they created the IEEE standard they decided that one infinity mode was enough, and they chose affine because it is less surprising.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-817173">
				<div id="div-comment-817173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817173">
			March 5, 2010 at 2:25 pm</a>		</div>

		<p>A previous generation of hackers used lunch-structured expressions like &quot;split-p soup?&quot;.</p>
<p>I&#8217;m more in favour of inquiries such as &quot;isNaan?&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-817183">
				<div id="div-comment-817183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817183">
			March 5, 2010 at 2:30 pm</a>		</div>

		<p>∞ = ∞</p>
<p>-∞ = -∞</p>
<p>-(∞) = -∞</p>
<p>-(-∞) = ∞</p>
<p>∞ ≠ -∞</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-817193">
				<div id="div-comment-817193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sab39.netreach.com' rel='external nofollow' class='url'>Stuart</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817193">
			March 5, 2010 at 2:57 pm</a>		</div>

		<p>I just tried this in C#:</p>
<p>var ∞ = double.PositiveInfinity;</p>
<p>and got:</p>
<p>Unexpected character: ∞</p>
<p>Shame. What&#8217;s the use of having a unicode-capable language if you can&#8217;t do that? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-816963">
				<div id="div-comment-816963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-816963">
			March 5, 2010 at 7:28 am</a>		</div>

		<p>You actually don&#8217;t need to use _isnan() &#8212; you can write your own, if for some reason _isnan() isn&#8217;t available:</p>
<p>bool isnan(float x) { return x != x; }</p>
<p>And if you don&#8217;t mind using non-portable hacks, you can do stuff like this:</p>
<p>const uint32_t FLOAT_POSITIVE_INFINITY_BITS = 0x7f800000;</p>
<p>const float FLOAT_POSITIVE_INFINITY = *(const float *)&amp;FLOAT_POSITIVE_INFINITY_BITS</p>
<p>And so forth for the other constants.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-816993">
				<div id="div-comment-816993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-816993">
			March 5, 2010 at 8:19 am</a>		</div>

		<p>Or you could use the standard function isnan() from math.h. However, this was only standardised 11 *years* ago now, so it&#8217;s still possible that some old or unmaintained compilers don&#8217;t have it yet.</p>
<p>Oh, and all symbols named &quot;is*&quot; are reserved for future extensions to the C library, so it&#8217;s probably not a good idea to define your own &quot;isnan()&quot;.</p>
<p><a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier" rel="nofollow">http://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-817213">
				<div id="div-comment-817213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://whereswalden.com/' rel='external nofollow' class='url'>Jeff Walden</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817213">
			March 5, 2010 at 4:31 pm</a>		</div>

		<p>Note that some compilers have bugs regarding things like |x != x| for floating-point values, so implementing your own isNaN &#8212; just in terms of identical inequality &#8212; can and does backfire with real-world, mainstream compilers. &nbsp;Sad, but true.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-817233">
				<div id="div-comment-817233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jeremy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817233">
			March 5, 2010 at 5:29 pm</a>		</div>

		<p>@Raymond</p>
<p>Is it useful to have a separate projective infinity? &nbsp;A &#8220;projective&#8221; infinity is really just coming from the one point compactification of the reals, so if you really wanted you could always steriographically project your values onto the circle and check that way! &nbsp;But it seems to me that this would almost always come about in doing arithmetic calculations where such a distinction wouldn&#8217;t be so useful?</p>
<p>@stuart</p>
<p>For some reason I did not see the . in your statement and read it as &#8220;double positive infinity&#8221; which sounds much more interesting than double.PositiveInfinity.</p>
<div class=post>[<i>I make no value judgement as to whether projective infinity is useful or not. I just vaguely recalled that it was supported somewhere. Carl&nbsp;D filled in the gaps and noted that it existed in the 8087. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-817263">
				<div id="div-comment-817263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817263">
			March 5, 2010 at 7:29 pm</a>		</div>

		<p>FYI, projective infinity also existed on the 287, but nowadays all infinities are affine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-817273">
				<div id="div-comment-817273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817273">
			March 5, 2010 at 7:35 pm</a>		</div>

		<p>&quot;FYI, projective infinity also existed on the 287, but nowadays all infinities are affine.&quot;</p>
<p>Support was in fact eliminated in the 387 to comply with the final standard released in 1985.</p>
<p>BTW, don&#8217;t assume that a 286 processor means a 287 coprocessor, or that a 386 processor means a 387 coprocessor. Early 386 computers often had a 287 socket since the 387 was not yet available, and Intel later made a version of 387 that fit into the 287 socket called the 80287XL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works odd alt thread-odd thread-alt depth-1" id="comment-817083">
				<div id="div-comment-817083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817083">
			March 5, 2010 at 11:58 am</a>		</div>

		<p>but is it *countably infinite* ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-817203">
				<div id="div-comment-817203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817203">
			March 5, 2010 at 3:37 pm</a>		</div>

		<p>Unicode or not, there&#8217;s some logic to only allow *letters* at the beginning of an identifier (possibly followed by other characters, numbers and underscores being popular). A built-in ∞ numeric literal would be pretty cool, though. Where can I contact the language team?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-817343">
				<div id="div-comment-817343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817343">
			March 6, 2010 at 11:02 pm</a>		</div>

		<p>Also, -0 ≠ 0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-817373">
				<div id="div-comment-817373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817373">
			March 7, 2010 at 3:20 pm</a>		</div>

		<p>@zero: What exactly do you mean? If you&#8217;re using twos complement than -0 is equal to 0 because they&#8217;re both represented by the same binary number. I&#8217;m not sure if the C-standard specifies the representation for numbers (too lazy to look it up, but probably not), but I don&#8217;t know any compiler that doesn&#8217;t (at least VS08 and gcc do).</p>
<p>Maybe it&#8217;s just a misunderstanding though..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-817383">
				<div id="div-comment-817383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">vcsjones</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817383">
			March 7, 2010 at 3:28 pm</a>		</div>

		<p>@Voo: -0 and 0 are sometimes used to denote how a number was rounded. Such as -0.000001 would round to -0 rather than 0 and 0.0000001 would round to zero. I know that can be important with thermodynamic research for whatever reason.</p>
<p>However, almost all compilers treat the two as equal.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-817393">
				<div id="div-comment-817393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817393">
			March 7, 2010 at 3:47 pm</a>		</div>

		<p>@Voo: And we&#8217;re talking about IEEE floating-point numbers, which aren&#8217;t twos-complement, they&#8217;re sign+exponent+mantissa. &nbsp;So they do have different bit patterns to represent positive and negative zero.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-817413">
				<div id="div-comment-817413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817413">
			March 8, 2010 at 12:36 am</a>		</div>

		<p>OK, here you go. IEEE 754 single-precision floating point format:</p>
<p>Sign, Exponent, Fractional part</p>
<p>S EEEEEEEE FFFFFFFFFFFFFFFFFFFFFFF</p>
<p>0 1 &nbsp; &nbsp; &nbsp;8 9 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;31</p>
<p>Examples:</p>
<p>0 00000000 00000000000000000000000 = 0</p>
<p>1 00000000 00000000000000000000000 = -0</p>
<p>0 11111111 00000000000000000000000 = Infinity</p>
<p>1 11111111 00000000000000000000000 = -Infinity</p>
<p>0 11111111 00000100000000000000000 = NaN</p>
<p>1 11111111 00100010001001010101010 = NaN</p>
<p>One of the nice things about IEEE 754 is that floating point value bit patterns, reinterpreted as integers, are ordered. This can be very useful when you want a &#8216;near as dammit equal&#8217; function. Decide how many &#8216;floating point quanta&#8217; apart counts as equal, cast the pointers to the floats as &nbsp;integer pointers, then check the dereferenced integers do not differ by more than your criterion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-817433">
				<div id="div-comment-817433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817433">
			March 8, 2010 at 3:16 am</a>		</div>

		<p>The following may also be of help when dealing with floating point problems in debug builds:</p>
<p><a rel="nofollow" target="_new" href="http://support.microsoft.com/kb/94998" rel="nofollow">http://support.microsoft.com/kb/94998</a></p>
<p>(Trapping Floating-Point Exceptions)</p>
<p>For a few cases this trick has saved me time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-817483">
				<div id="div-comment-817483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817483">
			March 8, 2010 at 7:38 am</a>		</div>

		<p>@vcsjones: However, almost all compilers treat the two as equal.</p>
<p>If that&#8217;s true, VS is an exception.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-817503">
				<div id="div-comment-817503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817503">
			March 8, 2010 at 7:44 am</a>		</div>

		<p>Karellen: Microsoft does not and as far as I know will not support C99. As far as they&#8217;re concerned, C++ is more important. Only changes that C++ adopts formally are liable to be included. There are numerous bugs and suggestions on Visual Studio Connect that have all been closed as Won&#8217;t Fix.</p>
<p>Incidentally, Raymond, browsers swallow your template instantation parameter. &lt;PRE&gt; doesn&#8217;t stop the browser trying to parse it and picking up &lt;float&gt; as an unknown HTML tag.</p>
<div class=post>[<i>Oops, fixed the angle brackets. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-817923">
				<div id="div-comment-817923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Victor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-817923">
			March 9, 2010 at 12:17 am</a>		</div>

		<p>Raymond and what&#8217;s about NaN, +INF, -INF etc for double type? Could anybody please write appropriate constants for double?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-818403">
				<div id="div-comment-818403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">h0nd0v0d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-818403">
			March 10, 2010 at 7:00 am</a>		</div>

		<p>Raymond,</p>
<p>All those constants are already declared in ymath.h. Why do you have to reinvent the wheel?</p>
<p>std::_Dconst _FInf &nbsp;= {{ 0x0000, 0x7F80 }};</p>
<p>std::_Dconst _FNan &nbsp;= {{ 0x0000, 0x7FC0 }};</p>
<p>std::_Dconst _FSnan = {{ 0x0001, 0x7F80 }};</p>
<p>std::_Dconst _Inf &nbsp; = {{ 0x0000, 0x0000, 0x0000, 0x7FF0 }};</p>
<p>std::_Dconst _Nan &nbsp; = {{ 0x0000, 0x0000, 0x0000, 0x7FF8 }};</p>
<p>std::_Dconst _Snan &nbsp;= {{ 0x0001, 0x0000, 0x0000, 0x7FF0 }};</p>
<p>std::_Dconst _LInf &nbsp;= {{ 0x0000, 0x0000, 0x0000, 0x8000, 0x7FFF }};</p>
<p>std::_Dconst _LNan &nbsp;= {{ 0x0000, 0x0000, 0x0000, 0xC000, 0x7FFF }};</p>
<p>std::_Dconst _LSnan = {{ 0x0001, 0x0000, 0x0000, 0x8000, 0x7FFF }};</p>
<div class=post>[<i>(1) At the top it says &#8220;/* ymath.h internal header */&#8221;. You know how I feel about undocumented behavior. Especially since it isn&#8217;t documented whether these are float or double values. (Could be either.) (2) My ymath just declares them extern const but doesn&#8217;t define them. Maybe I have an old ymath. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-818683">
				<div id="div-comment-818683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rowboat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-818683">
			March 11, 2010 at 4:28 am</a>		</div>

		<p>zero: I don&#8217;t have any other versions here to test this out further, but VC++ 08 (with /fp:precise) treats +0 (0x00000000) and -0 (0x80000000) as equal when compared as floats (and correspondingly for double precision +0 and -0), which I believe is also what the standard requires.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-818663">
				<div id="div-comment-818663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">h0nd0v0d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100305-00/?p=14713#comment-818663">
			March 11, 2010 at 12:09 am</a>		</div>

		<p>1a. I agree with you. It is internal and undocumented. </p>
<p>But I would copy and rename those constants to your own header. _Dconst union and notation { 0x0000, 0x7FC0 } is a visual evidence and it is useful for working with floating point numbers. Just compare with notation &quot;((float)((1e308 * 10)*0.))&quot;</p>
<p>1b. It is pretty clear and even commented well </p>
<p>_FInf, Fxxx are floats,</p>
<p>_Inf, xxx are doubles,</p>
<p>_LInf, Lxxx are long doubles.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>