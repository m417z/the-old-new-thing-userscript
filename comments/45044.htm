<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (116)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1189544">
				<div id="div-comment-1189544" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189544">
			May 25, 2015 at 7:06 am</a>		</div>

		<p>What C++ needs most is operator[]= (lhs version of operator[]).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189554">
				<div id="div-comment-1189554" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric TF Bat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189554">
			May 25, 2015 at 7:12 am</a>		</div>

		<p>Interestingly, research done by the Visual Studio team revealed that a lot of C++ are dyslexic, and/or have awful spelling, so the same experimental operators can also be enabled with the alternate directive #define __ENABEL_EPSPERAMENTLE_TAPDOLE_ORATORS</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1189564">
				<div id="div-comment-1189564" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189564">
			May 25, 2015 at 7:19 am</a>		</div>

		<p>Call me paranoid, but this looks like an April Fools post that would have been delayed for some reason.</p>
<p>Anyway, the explanation for those who didn&#39;t follow: since in 2&#39;s complement -y is already equal to ~y + 1, then -~y would be equal to ~~y+1, that is to say, y+1, all with two unary operators, without a need for a compiler support.</p>
<p>(insert Simpsons image macro here)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189574">
				<div id="div-comment-1189574" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I see what you did there</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189574">
			May 25, 2015 at 7:20 am</a>		</div>

		<p>So the Time Machine has finally been built &#8211; amazingly this also works in Visual C++ 6. From 1998!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189584">
				<div id="div-comment-1189584" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sergegers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189584">
			May 25, 2015 at 7:22 am</a>		</div>

		<p>Is it a joke? What about ++ and &#8212; operators?</p>
<div class="post">[<em>The <code>++</code> operator modifies its argument. These do not. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189594">
				<div id="div-comment-1189594" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">abc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189594">
			May 25, 2015 at 7:31 am</a>		</div>

		<p>Please tell me this is a late April Fools thing. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189604">
				<div id="div-comment-1189604" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RRR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189604">
			May 25, 2015 at 7:38 am</a>		</div>

		<p>Wow!</p>
<p>So much retard&#8230;</p>
<p>Just wow!</p>
<p>Wow!</p>
<p>I just&#8230;</p>
<p>Wow!</p>
<p>I&#8230;</p>
<p>Wow!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189624">
				<div id="div-comment-1189624" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Boris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189624">
			May 25, 2015 at 7:40 am</a>		</div>

		<p>I have to second Medinoc&#39;s April Fools&#39; sentiment, especially since Google returns only this post for __ENABLE_EXPERIMENTAL_TADPOLE_OPERATORS.</p>
<p>Since I couldn&#39;t find the documentation, an obvious question is why not simply ~-y and ~+y?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1189634">
				<div id="div-comment-1189634" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189634">
			May 25, 2015 at 7:46 am</a>		</div>

		<p>@Boris: Look at the second part of my message, it explains that ~+y wouldn&#39;t work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189644">
				<div id="div-comment-1189644" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189644">
			May 25, 2015 at 7:53 am</a>		</div>

		<p>Borland seems to be in the game, too. I compiled with Borland 5.5 the following code:</p>
<p>#include &lt;stdio.h&gt;</p>
<p>void main (void) {</p>
<p> &nbsp; &nbsp;printf (&quot;%in&quot;, -~3);</p>
<p> &nbsp; &nbsp;printf (&quot;%in&quot;, ~-3);</p>
<p>}</p>
<p>And it printed 4 and 2. The amazing thing is that the compiler I used is the command line version from 2000. Maybe the famous time machine is already working and nobody told us?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189654">
				<div id="div-comment-1189654" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189654">
			May 25, 2015 at 7:56 am</a>		</div>

		<p>s/Borland 5.5/Borland C++ 5.5/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189664">
				<div id="div-comment-1189664" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Russian Reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189664">
			May 25, 2015 at 8:16 am</a>		</div>

		<p>This is hilarious. Will translate to my language and share later.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189674">
				<div id="div-comment-1189674" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SunChaser</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189674">
			May 25, 2015 at 8:19 am</a>		</div>

		<p>Seems similar to the experimental arrow operator x &#8211;&gt; 0</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189684">
				<div id="div-comment-1189684" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mafu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189684">
			May 25, 2015 at 8:23 am</a>		</div>

		<p>I am so sorry to read about a third of the comments :( Did you not show the downto operator (&quot;&#8211;&gt;&quot;) recently in this blog, too? All in vain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189694">
				<div id="div-comment-1189694" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189694">
			May 25, 2015 at 8:30 am</a>		</div>

		<p>I rarely comment on these forums, but this just made me scream&#8230;well maybe not verbally, but in my head I am. &nbsp;This is atrocious. &nbsp;Readability is to be admired as well as convenience. I neither find this experimental syntax readable nor convenient nor obvious. Parenthesis do clarify intent, and it is readable, obvious, and not a burden on the compiler or developer. &nbsp;If you have to explain your new operators away in a manner that isn&#39;t obvious at first glance, it is likely a bad choice. &nbsp;If this is a c++ proposal, I would veto it. (x+1) and (x-1) aren&#39;t too hard to write. It only &#39;helps&#39; in cases of x+1 or x-1. &nbsp;What about x+2 or x-3? Whoops, still need those parens again. &nbsp;This seems like a solution to a problem nobody thinks exists. Are there people out there actually asking for this syntax? &nbsp;really?</p>
<div class="post">[<em>By the same logic, we are missing a <code>++</code> operator that increments by 2. At least this operator can be stacked: <code>-~-~x</code> is <code>(x+2)</code>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189704">
				<div id="div-comment-1189704" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SteveP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189704">
			May 25, 2015 at 8:37 am</a>		</div>

		<p>No thank you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189714">
				<div id="div-comment-1189714" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Optimizer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189714">
			May 25, 2015 at 8:38 am</a>		</div>

		<p>Please note tadpoles are slow creatures thus using an tadpole operator can lead to additional processor instructions to be generated by the compiler being when compared to traditional (x+1) operation.</p>
<div class="post">[<em>That problem will go away once the optimizer is taught to recognize this operator. Then we could call it the rocket-powered tadpole. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189724">
				<div id="div-comment-1189724" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189724">
			May 25, 2015 at 8:39 am</a>		</div>

		<p>Gotta love the party tricks you can come up with when you properly understand your operators.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189734">
				<div id="div-comment-1189734" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">madbrain</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189734">
			May 25, 2015 at 8:46 am</a>		</div>

		<p>Reminds me of the minimum and maximum operators GCC had at some point:</p>
<p> &nbsp;a &lt;? &nbsp;b (minimum)</p>
<p> &nbsp;a &gt;? &nbsp;b (maximum)</p>
<p> &nbsp;a &lt;?= b (clamp a to a maximum of b)</p>
<p> &nbsp;a &gt;?= b (clamp a to a minimum of b)</p>
<p>(they were removed later on)</p>
<p>What I&#39;d really like to see is some kind of implicit loop. Something like:</p>
<p> &nbsp;vec[$i] += vec2[i];</p>
<p>automatically expanding to:</p>
<p> &nbsp;for(size_t i=0; i &lt; vec.size(); i++)</p>
<p> &nbsp; &nbsp;vec[i] += vec2[i];</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189744">
				<div id="div-comment-1189744" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189744">
			May 25, 2015 at 9:07 am</a>		</div>

		<p>[By the same logic, we are missing a ++ operator that increments by 2. At least this operator can be stacked: -~-~x is (x+2). -Raymond]</p>
<p>While there isn&#39;t a ++ operator that pre-increments by 2, we do have += . &nbsp;Your stacked example is another reason for not supporting this. &nbsp;It doesn&#39;t look well and isn&#39;t obvious. &nbsp;I would have to count the tadpoles to understand what is being done. &nbsp;I&#39;d hate to see the tadpole syntax behind (x+1000). &nbsp;Granted I am using an absurd and extreme example, it begs the question: Would there be an upper limit to how many times the operator could be stacked? &nbsp;I haven&#39;t yet tried on the VS2015RC yet.</p>
<div class="post">[<em>While there isn&#39;t a <code>-~</code> operator that adds 2, we do have <code>(x+2)</code>. So I don&#39;t see why the &quot;doesn&#39;t generalize beyond 1&quot; argument is so special about <code>-~</code> when it also applies to <code>++</code>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189754">
				<div id="div-comment-1189754" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189754">
			May 25, 2015 at 9:13 am</a>		</div>

		<p>tadpoles are slimy. Guess this operator is very well named.</p>
<p>If this does go beyond experimental, I will FLUNK (with extreme prejudice) any code review I see that contains it. Seriously, &quot;-~&quot; means +1???</p>
<p>(At first I thought there was a typo, &quot;where&#39;s the +~?&quot;, then I noticed after _very_ close inspection that my dyslexia could kick in full-time.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189764">
				<div id="div-comment-1189764" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189764">
			May 25, 2015 at 9:17 am</a>		</div>

		<p>My compliments on your complements.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189774">
				<div id="div-comment-1189774" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189774">
			May 25, 2015 at 9:31 am</a>		</div>

		<p>Not liking it. Would prefer y++1, z&#8211;1,x++5,a&#8211;8 where the higher precedence ++ &#8212; &nbsp;are overloaded /repurposed for this &#39;feature&#39;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189784">
				<div id="div-comment-1189784" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189784">
			May 25, 2015 at 9:48 am</a>		</div>

		<p>vec[$i] += vec2[i]; is already implemented under the name std::valarray. If the positives of valarray outweigh the negatives, that&#39;s what it&#39;s there for.</p>
<p>Anyway, prefix ++ and &#8212; do sometimes scale in C++11 according to the famous &quot;Undefined Behaviour and Sequence Points&quot; post on StackOverflow. ++++a &#8211; b is okay. So is ++++a + a. What a crazy world we live in.</p>
<p>On another note, it&#39;s good to see a joke convincing enough that people complain about it :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189794">
				<div id="div-comment-1189794" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">???</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189794">
			May 25, 2015 at 9:52 am</a>		</div>

		<p>I wonder if the comments taking this as a serious discussion about experimental features are some sort of meta-level joke (See in particular @David above) :/ Anyhow, it&#39;s a cute 2&#39;s complement trick :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes odd alt thread-odd thread-alt depth-1" id="comment-1189804">
				<div id="div-comment-1189804" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189804">
			May 25, 2015 at 9:53 am</a>		</div>

		<p>You had me intrigued there for a while. Then I thought about how this might affect compatibility for existing code bases&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189824">
				<div id="div-comment-1189824" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189824">
			May 25, 2015 at 10:18 am</a>		</div>

		<p>Given that tails wiggle I think the tilde should be the tail. It messes up the swimming towards means higher finger string however.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189834">
				<div id="div-comment-1189834" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189834">
			May 25, 2015 at 10:24 am</a>		</div>

		<p>I think this is a terrible idea. &nbsp;It&#39;s both completely unnecessary and worse worse than the problem it purports to fix.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189844">
				<div id="div-comment-1189844" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sniffnoy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189844">
			May 25, 2015 at 10:28 am</a>		</div>

		<p>The joke has already been explained in the comments, but people apparently aren&#39;t reading them&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00037ffe8545d1b7 odd alt thread-odd thread-alt depth-1" id="comment-1189854">
				<div id="div-comment-1189854" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/David+Totzke' rel='external nofollow' class='url'>David Totzke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189854">
			May 25, 2015 at 10:30 am</a>		</div>

		<p>We&#39;ve had this in C# for ages.</p>
<p>foreach (int number in Enumerable.Range(1,10))</p>
<p>{</p>
<p> &nbsp; &nbsp;Debug.WriteLine(string.Format(&quot;Value: {0} &nbsp;Tadpole Value: {1}&quot;, number, -~number));</p>
<p>}</p>
<p>You c++ folks need to get with the times.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189864">
				<div id="div-comment-1189864" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189864">
			May 25, 2015 at 10:36 am</a>		</div>

		<p>great idea to distract from the compiler lacking all the C++11 features.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189874">
				<div id="div-comment-1189874" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189874">
			May 25, 2015 at 11:28 am</a>		</div>

		<p>By &quot;all the C++11 features&quot;, you mean expression SFINAE, some constexpr, and some C99 preprocessor (and the many bugs we know and love)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189894">
				<div id="div-comment-1189894" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc Clifton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189894">
			May 25, 2015 at 12:07 pm</a>		</div>

		<p>Hey Microsoft, which way is FAIL swimming? &nbsp;Towards you, or away from you?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189904">
				<div id="div-comment-1189904" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LeusKapus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189904">
			May 25, 2015 at 12:19 pm</a>		</div>

		<p>This gotta be one of my favorite posts ever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189914">
				<div id="div-comment-1189914" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189914">
			May 25, 2015 at 12:38 pm</a>		</div>

		<p>It even works if you are compiling from C.</p>
<p>Man, Microsoft is really going all out on this one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189924">
				<div id="div-comment-1189924" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189924">
			May 25, 2015 at 12:54 pm</a>		</div>

		<p>I&#39;ve read all the comments and I can&#39;t believe nobody&#39;s mentioned yet that this isn&#39;t guaranteed to work in C. Because, you know, C doesn&#39;t guarantee that integers are represented as two&#39;s complement. In polite society we&#39;re supposed to avoid mentioning this, though, since absolutely nobody likes to deal with ones&#39; complement and sign/magnitude implementations.</p>
<p>I don&#39;t know if C++ guarantees two&#39;s complement. And I dimly recall that C99 (or C11?) may have actually standardized on two&#39;s complement now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189934">
				<div id="div-comment-1189934" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Byron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189934">
			May 25, 2015 at 1:16 pm</a>		</div>

		<p>This is nearly as fun as the &quot;approaches from above&quot; operator, as in</p>
<p>x=100;</p>
<p>while (x &#8211;&gt; 0) {</p>
<p>doSomething(x);</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189944">
				<div id="div-comment-1189944" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marco A.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189944">
			May 25, 2015 at 1:24 pm</a>		</div>

		<p>MSVC hasn&#39;t shined in C++ standard compatibility, IMHO I&#39;d concentrate more on getting &quot;the old new things&quot; right</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189954">
				<div id="div-comment-1189954" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marco A.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189954">
			May 25, 2015 at 1:44 pm</a>		</div>

		<p>This also has the flaw of not supporting tadpoles which disagree on the direction (there is no clear winner as the standard says)</p>
<p>int x = ~-~y % 10; // Where do I go? Omg</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189964">
				<div id="div-comment-1189964" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Y</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189964">
			May 25, 2015 at 1:45 pm</a>		</div>

		<p>Joshua: What on earth would []= do??</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189974">
				<div id="div-comment-1189974" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JJJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189974">
			May 25, 2015 at 1:58 pm</a>		</div>

		<p>I can&#39;t believe this post. &nbsp;The tadpole operators have been implemented in gcc for like, forever. &nbsp;But you&#39;re making it sound like it&#39;s some novel idea? &nbsp;How dare you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189984">
				<div id="div-comment-1189984" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ruben Bartelink</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189984">
			May 25, 2015 at 2:02 pm</a>		</div>

		<p>Will this compose well with tail call optimizations or might they render the result ranine?</p>
<p>I would also like two second Josh&#39;s compliment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189614">
				<div id="div-comment-1189614" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189614">
			May 25, 2015 at 7:40 am</a>		</div>

		<p>You&#39;re joking, right? &nbsp;Especially the (x+1) case &#8212; you use minus as part of an expression to *add* something to a value???</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190004">
				<div id="div-comment-1190004" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190004">
			May 25, 2015 at 3:34 pm</a>		</div>

		<p>So we are going to replace a well known mathematical notation, used since the 17th century, with an obscure notation which will only be used by C++. Sorry but I think this is a bad idea</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190014">
				<div id="div-comment-1190014" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190014">
			May 25, 2015 at 3:54 pm</a>		</div>

		<p>This is crazy. Not only because when these tadpoles grow up, your code will literally start JMPing all over &nbsp;the place, but they will also eat all your source flies.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190024">
				<div id="div-comment-1190024" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott </cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190024">
			May 25, 2015 at 4:06 pm</a>		</div>

		<p>Give it 5 minutes. This is awesome. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190034">
				<div id="div-comment-1190034" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Larry Hosken</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190034">
			May 25, 2015 at 4:14 pm</a>		</div>

		<p>&gt; heavily nested code that is hard to read</p>
<p>Has someone, in fact, tried getting &quot;-~x&quot; into some code by claiming that it&#39;s more readable? Not sure I trust myself to correctly guess where the line between truth and leg-pulling is in this post; code reviews surprise me sometimes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190044">
				<div id="div-comment-1190044" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190044">
			May 25, 2015 at 4:29 pm</a>		</div>

		<p>This is a terrible idea. These so called &#39;tadpoles&#39; look nothing like actual tadpoles. They should be called sea snakes.</p>
<p>Also doesn&#39;t work on my CDC 6600.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190054">
				<div id="div-comment-1190054" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AndyW2007</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190054">
			May 25, 2015 at 4:37 pm</a>		</div>

		<p>My first question &#8211; what is actually wrong with (y+1) in the first place? &nbsp;</p>
<p>I would seriously question that bracketed code is hard to read and would like to see the study that was performed to confirm this. Given that many people who write code have some form of math training from high school and likely have seen operator precedence before.</p>
<p>I would also like to introduce the topic of cognitive loading &#8211; I would make the assertion that the tadpole symbolic would increase visual cognitive load (they are not a normal everyday thing, so the reader has to mentally scan for them [which increases cognitive load]. &nbsp;High cognitive load leads to an increased defect count as a side effect of increased complexity. &nbsp; So I would question the value of these features &#8211; certainly I would not like them in complex production code. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190064">
				<div id="div-comment-1190064" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190064">
			May 25, 2015 at 5:15 pm</a>		</div>

		<p>Even I am finding it hard to discern sarcasm from honest anguish and disgust in the comments!</p>
<p>~-s</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189814">
				<div id="div-comment-1189814" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">scunliffe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189814">
			May 25, 2015 at 10:17 am</a>		</div>

		<p>I&#39;m all for the new operator&#8230; but IMHO the &quot;head&quot; and the &quot;tail&quot; of the tadpole as described above is **Exactly** backwards!</p>
<p><a rel="nofollow" target="_new" href="https://twitter.com/scunliffe/status/602885761264799744" rel="nofollow">twitter.com/&#8230;/602885761264799744</a> (pic of a tadpole for reference)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190074">
				<div id="div-comment-1190074" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ryan Voots</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190074">
			May 25, 2015 at 5:18 pm</a>		</div>

		<p>Perl has also supported this since 1994 in perl 5. &nbsp;This is just another example of other languages catching up to Perl.</p>
<p>#!/usr/bin/perl</p>
<p>use integer;</p>
<p>print ~-5, &quot;n&quot;, -~5, &quot;n&quot;;</p>
<p>However with Perl it hasn&#39;t been experimental. &nbsp;It&#39;s been a built in part of the language for over 20 years now. /s</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190084">
				<div id="div-comment-1190084" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Crowell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190084">
			May 25, 2015 at 5:26 pm</a>		</div>

		<p>Some people here need to revisit C/C++ operator syntax. &nbsp;Kudos to Raymond for making me think, then making me laugh.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190094">
				<div id="div-comment-1190094" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sharkbait</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190094">
			May 25, 2015 at 5:30 pm</a>		</div>

		<p>For extra fun, see what happens when the tadpole is applied to a float.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190104">
				<div id="div-comment-1190104" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craig</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190104">
			May 25, 2015 at 5:36 pm</a>		</div>

		<p>Seems to work with VC++ 6, too! To enable it, you must use </p>
<p> &nbsp; &nbsp;#define __ENABLE_ESCOTIC_SQUIGGLE_OPERATORS</p>
<p>Looks like the name is still in flux, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190114">
				<div id="div-comment-1190114" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A dev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190114">
			May 25, 2015 at 6:13 pm</a>		</div>

		<p>Why on earth would you make it so easy to mistype &quot;-~&quot; and &quot;~-&quot;, and on top of that force people to learn that minus will ADD SOMETHING???? Why not &quot;+~&quot; and &quot;-~&quot; to mean add and subtract?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1189884">
				<div id="div-comment-1189884" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Geary</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189884">
			May 25, 2015 at 11:52 am</a>		</div>

		<p>Because all the major JavaScript engines are written in C++, JavaScript has also inherited the tadpole operators from the underlying C++ implementation. It is still an experimental feature, but you can enable it with the &quot;use tadpole&quot;; directive:</p>
<p> &nbsp; &nbsp;(function() {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;&quot;use tadpole&quot;;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;var n = 3;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;console.log( &quot;3 + 1 = &quot;, -~n );</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;console.log( &quot;(3 &#8211; 1) * (3 + 1) &quot;, ~-n * -~n );</p>
<p> &nbsp; &nbsp;})();</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190124">
				<div id="div-comment-1190124" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A lisp dev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190124">
			May 25, 2015 at 6:56 pm</a>		</div>

		<p>Replacing parentheses with tadpoles in C++ because they&#39;re considered hard to read??- That&#39;s crazy. What&#39;s next??- Removing the parentheses between a function&#39;s name and its arguments?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1190134">
				<div id="div-comment-1190134" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190134">
			May 25, 2015 at 7:10 pm</a>		</div>

		<p>With parenthesis pair highlighting feature in Visual Studio, I found using parenthesis to spell out precedence cleaner.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190144">
				<div id="div-comment-1190144" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sam Hughes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190144">
			May 25, 2015 at 7:17 pm</a>		</div>

		<p>Excellent post, I have question. &nbsp;I see these work on y, z, and n. &nbsp;Will you add support for i, j, and k?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190154">
				<div id="div-comment-1190154" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SpiritOfTheThing</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190154">
			May 25, 2015 at 7:32 pm</a>		</div>

		<p>The thing that bothers me is that up till now, if we wanted to tell the compiler &quot;apply the ~ operator, then apply the &#8211; operator,&quot; we simply wrote -~i. &nbsp;But now we&#39;ll have to write -(~i) to make clear that we don&#39;t want the new tadpole operator. &nbsp;So we&#39;re not really getting away from parentheses. &nbsp;We&#39;re just adding them where we formerly didn&#39;t need them.</p>
<p>P.S. Raymond, I&#39;ve been reading your blog almost since the beginning, and this is one of my all-time favorite posts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190164">
				<div id="div-comment-1190164" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wtfdev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190164">
			May 25, 2015 at 7:39 pm</a>		</div>

		<p>This is jargon. C++ needs changes that increase clarity — this just makes it less accessible. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190174">
				<div id="div-comment-1190174" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lsl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190174">
			May 25, 2015 at 7:56 pm</a>		</div>

		<p>Perl calls these the &quot;Inchworm-On-A-Stick&quot; operators and they&#39;re considered secret (and listed as such in documentation).</p>
<p>=( )=</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1189994">
				<div id="div-comment-1189994" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">madbrain</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1189994">
			May 25, 2015 at 2:15 pm</a>		</div>

		<p>std::valarray doesn&#39;t let you do stuff like this:</p>
<p>vec[$i] = table[(vec2[i] &amp; 0xff) + (page &lt;&lt; 8)];</p>
<p>printf(vec[$i]);</p>
<p>vec[$i] = state += 0.5f * (vec[i] &#8211; state);</p>
<p>vec[$i][$j] = vec2[j][i];</p>
<p>vec[$i] = sinf(i * (2 * 3.14159286f / 256.f));</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190184">
				<div id="div-comment-1190184" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nargil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190184">
			May 25, 2015 at 10:06 pm</a>		</div>

		<p>Let&#39;s just write our programs in Ogh! It&#39;s more readable than this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190194">
				<div id="div-comment-1190194" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nargil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190194">
			May 25, 2015 at 10:16 pm</a>		</div>

		<p>*Ook!, not ogh! (<a rel="nofollow" target="_new" href="https://esolangs.org/wiki/Ook">https://esolangs.org/wiki/Ook</a>!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190204">
				<div id="div-comment-1190204" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paddy3118</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190204">
			May 25, 2015 at 10:44 pm</a>		</div>

		<p>So to cover a minor need you propose a disruption to the established idea that addition isassociated with the plus and negation with a minus? Instead you think it is reason enough to introduce a new and conflicting idea of tadpoles and direction of swim?</p>
<p>Just because you can do something, you should really learn to self-censure _before_ you publish.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190214">
				<div id="div-comment-1190214" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190214">
			May 25, 2015 at 10:46 pm</a>		</div>

		<p>My favorite is the BangBang operator, for those times when you just need to slam a value into being boolean.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190234">
				<div id="div-comment-1190234" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Boris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190234">
			May 25, 2015 at 11:05 pm</a>		</div>

		<p>In other words, this is really an April pseudo-Fools&#39; post, which only gets away with the tardiness because it&#39;s true in fact though not in spirit?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190254">
				<div id="div-comment-1190254" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190254">
			May 25, 2015 at 11:25 pm</a>		</div>

		<p>x+~ or x-~ I&#39;d say appear better and is easier to read.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190264">
				<div id="div-comment-1190264" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ThomasX</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190264">
			May 25, 2015 at 11:37 pm</a>		</div>

		<p>Great. Let&#39;s name operators after what they look like. NEVER name operators after what they do. For the sake of consistency please rename the following operators accordingly:</p>
<p>+ the cross operator</p>
<p>&#8211; the line operator</p>
<p>* the star operator</p>
<p>/ the slope operator</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190274">
				<div id="div-comment-1190274" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Johnson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190274">
			May 26, 2015 at 12:02 am</a>		</div>

		<p>Well, it seems that the Visual Studio team (or should I say MS policy in general?) reached a point where there is no room for improvement and, instead of releasing a service pack for bug fixes, decided to release another product, adding useless features that nobody will ever use.</p>
<p>Even if you don&#39;t admit it publicly, Raymond (it&#39;s obvious why), you can&#39;t argue the fact that the expression (x+1)%y is MUCH easier and cleaner for humans to read.</p>
<p>P.S.: It is possible to write a program in a single &quot;line&quot; of code. Should we adapt this way of writing code?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190284">
				<div id="div-comment-1190284" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">paysockee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190284">
			May 26, 2015 at 12:10 am</a>		</div>

		<p>OMG. Looks like the dismissed IE team put hands to C++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190294">
				<div id="div-comment-1190294" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ex-pertti</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190294">
			May 26, 2015 at 12:13 am</a>		</div>

		<p>WTF, who is mastermind behind this?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190324">
				<div id="div-comment-1190324" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Achille</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190324">
			May 26, 2015 at 1:27 am</a>		</div>

		<p>Although Python also supports those operators, I&#39;m concerned about F# programmers.</p>
<p>I mean, in F# the &quot;~-&quot; syntax is used to overload the negation operator.</p>
<p><a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/vstudio/dd233204%28v=vs.100%29.aspx">msdn.microsoft.com/&#8230;/dd233204%28v=vs.100%29.aspx</a></p>
<p>It would be a shame if such users were scared off because of these operators.</p>
<p>At least, the ~~~&#8212; and &#8212;~~~ syntaxes would be more familiar to them&#8230;</p>
<p>Fortunately enough, they seem to work too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190334">
				<div id="div-comment-1190334" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meme</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190334">
			May 26, 2015 at 1:42 am</a>		</div>

		<p>Is this a joke?</p>
<p>What&#39;s wrong with:</p>
<p>y = ++y % 10;</p>
<p>?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190344">
				<div id="div-comment-1190344" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">melpomene</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190344">
			May 26, 2015 at 2:09 am</a>		</div>

		<p>@meme:</p>
<p>The problem with y = ++y % 10 is that it&#39;s not valid C or C++. It has undefined behavior.</p>
<p>(Also, yes, this is a joke, and it has been explained in the comments.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190354">
				<div id="div-comment-1190354" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephan Leclercq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190354">
			May 26, 2015 at 3:25 am</a>		</div>

		<p>&gt;&gt; Also doesn&#39;t work on my CDC 6600.</p>
<p>Can some one complement this ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190364">
				<div id="div-comment-1190364" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190364">
			May 26, 2015 at 3:36 am</a>		</div>

		<p>@Mark Y: It would provide a convenient way to assign to an element of a class that emulates an array. Contrived example: A class for a variable-length array of pointers to reference-counted elements. Because your storage is raw pointers, you can safely realloc() it, but you have to take care to fix up the refcounts when you store a pointer to the array. Because there&#39;s no operator[]=, you have to write an operator[] that returns a reference to a helper type that does the underlying fixup in its assignment operator and has a typecast operator to retrieve the pointer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190374">
				<div id="div-comment-1190374" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Psyhister</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190374">
			May 26, 2015 at 3:40 am</a>		</div>

		<p>I dunno, these &quot;tadpole&quot; operators seem much less readable than parentheses. Shouldn&#39;t making code more readable involve getting rid of funky operators that don&#39;t speak for themselves? </p>
<p>&quot;Tadpole swimming toward a value makes it bigger&quot;, just reading that makes me wanna write some esoteric language that is based on ASCII art, although, I&#39;m pretty sure something like that already exists.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190384">
				<div id="div-comment-1190384" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bartosz W&#243;jcik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190384">
			May 26, 2015 at 4:13 am</a>		</div>

		<p>It&#39;s misleading, especially when the plus one operator uses the minus sign to perform the action.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190394">
				<div id="div-comment-1190394" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Justin Olbrantz (Quantam)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190394">
			May 26, 2015 at 4:48 am</a>		</div>

		<p>Clever girl..!</p>
<p>Somebody has surely said this before me, but I&#39;m not gonna read all those comments: this is basic two&#39;s complement math, and an absolutely epic troll. </p>
<p>-x = ~x + 1</p>
<p>~x = -x &#8211; 1</p>
<p>So -(~x) = ~(~x) + 1 = x + 1</p>
<p>~(-x) = -(-x) &#8211; 1 = x &#8211; 1</p>
<p>This will NOT work on old obscure architectures that don&#39;t use two&#39;s complement math.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190404">
				<div id="div-comment-1190404" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Justin Olbrantz (Quantam)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190404">
			May 26, 2015 at 4:49 am</a>		</div>

		<p>Incidentally, your posting system doesn&#39;t work in Firefox.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190414">
				<div id="div-comment-1190414" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lilili</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190414">
			May 26, 2015 at 4:55 am</a>		</div>

		<p>These operators are old.</p>
<p>They work because &quot;~&quot; means &quot;not&quot;.</p>
<p>not 1 = 0xFFFFFFFE = -2, </p>
<p>-~1 = -(not 1) = -(-2) = 2. </p>
<p>~-1 = not -1 = not 0xFFFFFFFF = 0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190424">
				<div id="div-comment-1190424" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Diack</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190424">
			May 26, 2015 at 4:57 am</a>		</div>

		<p>This has to be some sort of bad joke right? Why on earth do the designers of C++ constantly strive to make the language more terse and ever less human readable? This is just ridiculous.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190434">
				<div id="div-comment-1190434" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy Ash</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190434">
			May 26, 2015 at 5:23 am</a>		</div>

		<p>I like it!</p>
<p>Now what we need is a &quot;Custard Pie&quot; operator.</p>
<p>It&#39;s like the Tadpole operators but it only allows accretion!</p>
<p>:D</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190444">
				<div id="div-comment-1190444" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob G</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190444">
			May 26, 2015 at 5:29 am</a>		</div>

		<p>@Joshua</p>
<p>You are aware, I hope, that ordinary overloads of [] can be used on the lhs, as long as the result is a (non-const) reference?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190224">
				<div id="div-comment-1190224" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jerry Coffin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190224">
			May 25, 2015 at 10:59 pm</a>		</div>

		<p>Very nice. I&#39;m still trying to figure out which is funnier though: the original post, or the comments (the one worrying about backward compatibility was *especially* good).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190454">
				<div id="div-comment-1190454" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vincent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190454">
			May 26, 2015 at 6:03 am</a>		</div>

		<p>Such moronic idea just shows the level of C++ team. Instead of graving C++ they play with the corpse, joining red nose and ledigaga&#39;s panties. Great job!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190244">
				<div id="div-comment-1190244" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190244">
			May 25, 2015 at 11:08 pm</a>		</div>

		<p>I&#39;d really like to see the results of whatever social experiment you are *really* running. This sounds a lot more like something Scott Adams would do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190464">
				<div id="div-comment-1190464" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190464">
			May 26, 2015 at 6:12 am</a>		</div>

		<p>This is awesome!! I&#39;m adopting this for our company coding guidelines, like, yesterday.</p>
<p>I did note something really curious, though: apparently this operator has the unique property that intervening spaces between the &#39;~&#39; and the &#39;~&#39; (the tad and the pole???) are allowed, such that the expression &quot;-~y&quot; is interprested exactly the same as &quot;- ~ y&quot;. Is that intentional? Anyone have some suggestions as to which style is better / more readable?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190474">
				<div id="div-comment-1190474" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ștefan Fulea</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190474">
			May 26, 2015 at 6:12 am</a>		</div>

		<p>&#8230;but, but these tadpole operators don&#39;t seem to swim well in an unsigned medium!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190484">
				<div id="div-comment-1190484" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goerges d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190484">
			May 26, 2015 at 6:29 am</a>		</div>

		<p>This tadpole looks more like a spermatozoon. I also think it&#39;s a better name because it contains more letters</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190494">
				<div id="div-comment-1190494" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zzz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190494">
			May 26, 2015 at 6:52 am</a>		</div>

		<p>anyway it&#39;s the right way to obtain (x+1) on architectures such as risc/mmx/gpu and has been so since the stone age. well actually it&#39;s (y==y)+x lol</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190504">
				<div id="div-comment-1190504" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190504">
			May 26, 2015 at 7:02 am</a>		</div>

		<p>@Rob G: I refer the honorary gentleman to Neil&#39;s most excellent explanation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190534">
				<div id="div-comment-1190534" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ConceptJunkie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190534">
			May 26, 2015 at 7:15 am</a>		</div>

		<p>Raymond, this is _just_ what we need&#8230; more IOCCC fuel&#8230; NOT!. &nbsp;Yeah, I checked it out and it looks like you kooks have also added this to C as well. &nbsp;Next thing you know there will be crazy operators like &quot;*++&quot; and &quot;&#8211;%&quot; showing up in our beloved language. &nbsp;When will the madness stop?!</p>
<p>Bjarne Stroustrup, call your office!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190554">
				<div id="div-comment-1190554" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc Brooks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190554">
			May 26, 2015 at 7:26 am</a>		</div>

		<p>@Stephan Leclercq:</p>
<p>You win, here&#39;s one internet.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190584">
				<div id="div-comment-1190584" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephan Leclercq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190584">
			May 26, 2015 at 7:37 am</a>		</div>

		<p>Has anyone mentioned that the Tadpole operators could be written as ??&#8211; or -??-</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1190304">
				<div id="div-comment-1190304" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190304">
			May 26, 2015 at 12:38 am</a>		</div>

		<p>@Nargil: *Double Facepalm*</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190604">
				<div id="div-comment-1190604" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190604">
			May 26, 2015 at 7:51 am</a>		</div>

		<p>so ridiculous. Can&#39;t believe it.</p>
<p>so many things we need in c++ and visual studio and as if they have nothing else to do but add some stupid ideas that nobody needs and are already there like ++ &#8211;.</p>
<p>really late april fools.</p>
<p>just go discover internet and read what people complain and miss about in c++ and visual studio &#8230;</p>
<p>you have to be dumb or ignore it if you don&#39;t do it.</p>
<p>give us options to turn ALL your &#39;smart&#39; and &#39;vs will auto do it for you&#39; so we can turn it off or on (like mouse click in VS puts cursor in virtual space even though all virtual space is disabled etc.).</p>
<p>give us decent libraries where we can customize easily and have freedom (unlike mfc, gdi etc)</p>
<p>we want freedom c++ once had</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190644">
				<div id="div-comment-1190644" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190644">
			May 26, 2015 at 9:14 am</a>		</div>

		<p>Gotta love you Raymond!</p>
<p>There I said it :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190684">
				<div id="div-comment-1190684" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hilarious</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190684">
			May 26, 2015 at 9:55 am</a>		</div>

		<p>Based on the comments, clear proof that the 10x programmer existence is true. (or maybe that the 0x programmer exists).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190694">
				<div id="div-comment-1190694" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">intent-based-programming</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190694">
			May 26, 2015 at 10:37 am</a>		</div>

		<p>Raymond, did you intend to perform a social experiment here? I always knew that some percentage of posters operated in write-only complain-only mode, but this&#8230; this is spectacular proof of just how high that percentage is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190704">
				<div id="div-comment-1190704" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brad</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190704">
			May 26, 2015 at 11:48 am</a>		</div>

		<p>Wow Raymond, this is cruel :). I&#39;m torn between thinking the comments are hilarious and hurting inside a bit for the people who think someone would design this as a language feature (and not an accident of two&#39;s complement math). Perhaps you should link to the second post before someone takes things too far?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190724">
				<div id="div-comment-1190724" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">brendan baldwin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190724">
			May 26, 2015 at 12:44 pm</a>		</div>

		<p>&quot;The tilde is the tadpole&#39;s head and the hyphen is the tail.&quot;</p>
<p>The ~ character far better represents a tadpole tail. &nbsp;How do you F that up?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190734">
				<div id="div-comment-1190734" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190734">
			May 26, 2015 at 12:58 pm</a>		</div>

		<p>You seem to enjoy demonstrating how many of your readers are fools.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190744">
				<div id="div-comment-1190744" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190744">
			May 26, 2015 at 1:04 pm</a>		</div>

		<p>mk: &quot;You seem to enjoy demonstrating how many of your readers are fools.&quot;</p>
<p>I think he&#39;s allowing them to demonstrate that for themselves.</p>
<p>Brad: &quot;Perhaps you should link to the second post before someone takes things too far?&quot;</p>
<p>There&#39;s ample information in the comments right here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190754">
				<div id="div-comment-1190754" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190754">
			May 26, 2015 at 1:06 pm</a>		</div>

		<p>&quot;The problem with y = ++y % 10 is that it&#39;s not valid C or C++. It has undefined behavior.&quot;</p>
<p>False.</p>
<div class="post">[<em>C89 6.5.2: &quot;Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression.&quot; C++11 1.9.15: &quot;If a side effect on a scalar object is unsequenced relative to either another side effect on the same scalar object or a value computation using the value of the same scalar object, the behavior is undefined.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190764">
				<div id="div-comment-1190764" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190764">
			May 26, 2015 at 1:08 pm</a>		</div>

		<p>@McBucket</p>
<p>I don&#39;t think you quite understand the full scope of the word &quot;demonstrate&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190774">
				<div id="div-comment-1190774" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190774">
			May 26, 2015 at 1:23 pm</a>		</div>

		<p>Me: &quot;False.&quot;</p>
<p>Never mind. (I&#39;m an idiot too.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190784">
				<div id="div-comment-1190784" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Justin Olbrantz (Quantam)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190784">
			May 26, 2015 at 1:55 pm</a>		</div>

		<p>All,</p>
<p>We need to get this post on Slashdot and watch mayhem ensue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190674">
				<div id="div-comment-1190674" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190674">
			May 26, 2015 at 9:50 am</a>		</div>

		<p>The operator I&#39;d like to see is the long operator-&gt;</p>
<p> &nbsp; &nbsp;&quot;i-&gt;foo()&quot; is equivalent to &quot;(*i).foo()&quot;</p>
<p> &nbsp; &nbsp;&quot;i&#8211;&gt;foo()&quot; is equivalent to &quot;(**i).foo()&quot;</p>
<p> &nbsp; &nbsp;&quot;i&#8212;&gt;foo()&quot; is equivalent to &quot;(***i).foo()&quot;</p>
<p>etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190804">
				<div id="div-comment-1190804" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190804">
			May 26, 2015 at 4:51 pm</a>		</div>

		<p>y = ++y % 10 is actually valid C++11. See <a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/14005508/">stackoverflow.com/&#8230;/14005508</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190864">
				<div id="div-comment-1190864" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">FrankHB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190864">
			May 27, 2015 at 2:43 am</a>		</div>

		<p>Both ISO C and ISO C++ do not guarantee this to work, since 1’s complement and signed magnitude representations for integral types are explicitly allowed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190874">
				<div id="div-comment-1190874" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">FrankHB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1190874">
			May 27, 2015 at 2:58 am</a>		</div>

		<p>Since C++11, y = ++y % 10 does not have undefined behavior due to sequence point rules for built-in operators (btw, there is actually nothing normative about &quot;sequence point&quot; in C++11, it is superseded by <a rel="nofollow" target="_new" href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2239.html">http://www.open-std.org/&#8230;/n2239.html</a>). It is actually y = (y += 1) % 10, and compound assignment in C++11 has stronger guarantee than previous versions. See ISO C++11 5.17, and <a rel="nofollow" target="_new" href="http://wg21.cmeerw.net/cwg/issue637">wg21.cmeerw.net/&#8230;/issue637</a> for details.</p>
<p>Nevertheless, in ISO C it is still undefined because of more than one side effects on the same scalar between sequence points (even if ISO C11 adopted the &quot;sequence before/after&quot; wording).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1191184">
				<div id="div-comment-1191184" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hagenp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044#comment-1191184">
			May 28, 2015 at 5:49 am</a>		</div>

		<p>&quot;&lt;strike&gt;PERL&lt;/strike&gt; C/C++: indistinguishable from line noise.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>