<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (50)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-405553">
				<div id="div-comment-405553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob Ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405553">
			August 2, 2006 at 11:12 am</a>		</div>

		<p>This is why Java went with &quot;anonymous inner classes can only access final parameters and local variables&quot;. &nbsp;No subtle side-effects here!</p>
<p>If C#2.0 allows you to write subtly incorrect code, why not just get rid of that damned &quot;can&#8217;t declare the same variable in nested scopes&quot; compiler error too?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405563">
				<div id="div-comment-405563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lionell Griffith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405563">
			August 2, 2006 at 11:52 am</a>		</div>

		<p>I thought the object of objects was that they could be used without knowledge of their internals. &nbsp;It seems here that you need to know the internals of BOTH the objects you are using and the object compiler. &nbsp;This is progress? &nbsp;Looks to me to be nothing but fire and motion to distract the competition.</p>
<p>I would much rather do structured and object oriented coding in C where I can know what is going on because I explcitly made it work that way. &nbsp;Oh wait. &nbsp;That&#8217;s what I have been doing for almost 15 years. &nbsp;Never mind.</p>
<p>Thanks for reminding me of why I still don&#8217;t want to use C++ or C#. &nbsp;</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405573">
				<div id="div-comment-405573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tyler Reddun</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405573">
			August 2, 2006 at 12:14 pm</a>		</div>

		<p>Allowing the lambada function to access data in the local scope of the function seems like it&#8217;s the wrong answer. The lambada exists longer then the local varabile so it would be a scoping issue. Allowing it just seems to be asking for trouble.</p>
<p>Not that I would have even know that it did that, that is not something I would ever try myself. It just seems to be asking for trouble.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405583">
				<div id="div-comment-405583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://bogol.blogspot.com' rel='external nofollow' class='url'>HA HA HA</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405583">
			August 2, 2006 at 12:30 pm</a>		</div>

		<p>tylar &#8211; teh scopign isue is resolved by the rule that a varable exists as long as sombody has a refrance to it. easy. i mean &#8216;easy&#8217; in teh abstarct.</p>
<p>whe&#8217;re it gets weird is if youve got multipal nestad scopes invloved. say a closuare returnign a closure waht raturns a colsure. u can have moare then one closure runign around loose with reefrences to theh same object which was mabe orignaly on the stack. so if that objects a int or somthing the compilar also has to know to put on the heep an onyl put a refrence on the stack. so it can outlive the stdackframe. </p>
<p>wondar if u can do thatwith a registar varable? hyuk huyk hyuk!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405593">
				<div id="div-comment-405593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://bogol.blogspot.com' rel='external nofollow' class='url'>HA HA HA</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405593">
			August 2, 2006 at 12:33 pm</a>		</div>

		<p>linel &#8211; why do u need to know the intrenals? use it an it wroks. how meany poeople who wriate vrtual functoins or use multaple in heritance know about vtables?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405603">
				<div id="div-comment-405603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zahical</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405603">
			August 2, 2006 at 12:37 pm</a>		</div>

		<p>Funny thing, that the argument of ‘not knowing what is happening’ is being used to bash C++ or C#. I think that, for the sake of the argument, one can say that we lost track of what’s happening the moment we stopped programming in assembler or the /O2 switch appeared on the command line of the compiler. Or possibly, the moment when everyone stopped developing their own OSes – just to keep things in control. </p>
<p>And on the other hand – what’s not to know in the example with the anonymous delegates? I know <em>exactly</em> what is happening – the local variable referenced in the body of the anonymous delegate and in the body of its lexically-enclosing method is one and the same, and so any changes to it are visible in both places. </p>
<p>MS could change the implementation someday but if the end result is the same I’d still know what’s happening. </p>
<p>You don’t need to know the internals of this to know what’s happening. Of course, the internals are very interesting and I think they illustrate very well Raymond’s point about the “kernel idea” and then just “doing what has to be done”. </p>
<p>Anyway, judging by yesterday’s and today’s comments it actually turned out that this actually is ‘not actually a .NET blog’. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405623">
				<div id="div-comment-405623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405623">
			August 2, 2006 at 1:50 pm</a>		</div>

		<p>The inner class should have access to the outer classes members and functions, regardless of protection (public, private, etc.) &nbsp;If you consider the outer class as a translation unit, the that class&#8217; variables and functions can be considered &quot;global&quot; to the inner class. &nbsp; The outer class should not have access to the inner class&#8217; members just as global functions do not have access to class&#8217; private members and functions (unless explicitly provided).</p>
<p>In Raymond&#8217;s &quot;hard&quot; example where the delegate accesses local variables, thus causing compiler generation of anonymous classes, I don&#8217;t see how this is any different from a closure. &nbsp;But I suppose that if there are two things that are hard for programmers to get (besides pointers and recursion &#8212; but that&#8217;s a different story) it&#8217;s closrues and coroutines.</p>
<p>With regard to Matt&#8217;s complaint about serialization, I agree that is annoying. &nbsp;I&#8217;d also say that it was a valid language/compiler design choice. &nbsp;If you have the compiler automatically make closure/anon classes serializable, it will likely impose limits on the types of the data members in said class. &nbsp;As a language designer, the tradoff would be making anon classes serializable but limited, or making anon classes unlimited but classes using delegates with anonymous classes unserializable.</p>
<p>In the end, the anon classes are just syntactic sugar anyway, so why not just make named serializable delegates?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405633">
				<div id="div-comment-405633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405633">
			August 2, 2006 at 2:40 pm</a>		</div>

		<p>I appreciate your C# insights, you have a skill at explaining things.</p>
<p>However, I have to agree with many people that I don&#8217;t completely grasp /why/ annoymous methods are so great. On a technical level what is gained over named delegates/ methods or just manually inlining the code? I guess I view it as another tool in my toolbox that I don&#8217;t understand why it exists.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405643">
				<div id="div-comment-405643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azrael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405643">
			August 2, 2006 at 3:17 pm</a>		</div>

		<p>Is this <em>actually</em> how the CLR (or C#&#8230; is this language specific?) implements closures? Or only <em>conceptualy</em>? Doesn&#8217;t it use a more compact representation?</p>
<p>I can see why having a &quot;complete&quot; class with the environment as member variables may be better by &quot;playing nice&quot; (or &quot;playing by the book&quot;) with the CLR, so this is not a critique, only a question&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405653">
				<div id="div-comment-405653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lionell Griffith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405653">
			August 2, 2006 at 3:24 pm</a>		</div>

		<p>I have apparently hit a few hot buttons by saying that there are application classes that are not well solved by using .NET, C++, or C#. &nbsp;They are good tools for low performance and simple CRUD centric applications on or off the internet and little else. &nbsp;If that&#8217;s what you do, expect your job to be outsourced in a few months to a year, if not next week. &nbsp;</p>
<p>Meanwhile, I will accomplish my goals my way.</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405673">
				<div id="div-comment-405673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405673">
			August 2, 2006 at 4:57 pm</a>		</div>

		<blockquote><p>
  Funny thing, that the argument of ‘not knowing what is happening’ is being used to bash C++ or C#. </p>
<p>I find it funnier when MSDN already has a growing collection of articles on the intricacies of C#, yet some people claim that C++ is an abomination purely because there are some subtle details.</p>
<p>I&#8217;m not sure if &quot;HA HA HA&quot;&#8217;s badly spelled rants are entirely serious &#8211; but fanboys are always funny, regardless of the object of their affection. &nbsp;;)<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405683">
				<div id="div-comment-405683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">b</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405683">
			August 2, 2006 at 4:59 pm</a>		</div>

		<p>Lionell: I think you missed the point of the article, which is about anonymous functions, and nothing to do with objects really. &nbsp;The same idiosyncracies come up in other languages like LISP, which is functional, and has closures/lambda functions. &nbsp;Your little rant didn&#8217;t make much sense in context.</p>
<p>TW: I tend to agree that anon functions bring in a lot more complexity than they&#8217;re worth, at least from my experience, true closures can be pretty nasty. &nbsp;Having the compiler generate anonymous functions for simple wrappers can be very handy though, if for nothing else to prevent the namespace from getting cluttered with trivial functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405703">
				<div id="div-comment-405703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alyosha`</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405703">
			August 2, 2006 at 6:06 pm</a>		</div>

		<p>I am reminded of why I still don&#8217;t want to use C every time I call malloc, every time I want to concatenate two strings (or for that matter, every time I want to model a 1:n relationship without fixing the value of n to some hard-coded constant), every time I want to deep copy a struct, and every time I check the same damn error code through ten call stack frames.</p>
<p>It&#8217;s not that we don&#8217;t know how to program in C. &nbsp;We do. &nbsp;We know how bad it sucks. &nbsp;We know that a C program can be replaced by an equivalent C++ or C# program in half the number of lines of code or less, without sacrificing performance (re-read Raymond Chen&#8217;s series on building a Chinese / English dictionary). &nbsp;We know that complexity scales exponetially with LOC; that&#8217;s why we want the compiler to generate all that boilerplate, instead of fetishizing our ignorance and insisting on using an exacto knife for a job that requires a chainsaw.</p>
<p>Lionell, if you can&#8217;t be bothered to learn something new after 15 years, perhaps you should be the one worried about your future employability.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405713">
				<div id="div-comment-405713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405713">
			August 2, 2006 at 6:13 pm</a>		</div>

		<p>ccx:</p>
<p>I&#8217;m not opposed to anon methods. As you said I don&#8217;t understand them so I have trouble seeing the usefulness. When I first started programming I thought the same thing about function pointers (functors, delegates, whatever). I now love them.</p>
<p>I think part of the one sided-ness of the comments could just show who reads &quot;The Old New Thing&quot;. Namely, C/ C++ coders, not C#.</p>
<p>Tools change, sometimes for the better, sometimes not. More tools are not a bad thing as long as they make the builders more productive and they enjoy using them.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405723">
				<div id="div-comment-405723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bok</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405723">
			August 2, 2006 at 6:49 pm</a>		</div>

		<p>How does this work in a function containing multiple anonymous functions sharing a subset of local variables? I&#8217;d guess there&#8217;d either have to be one anonymous class created which shares all local variables referenced by any anonymous functions, or else a tree of anonymous classes referencing others depending on scope. The first seems like it could cause some massive memory leaks you wouldn&#8217;t expect, but the second would be harder for the compiler and could easily generate some horrible code for all the dereferences in edge cases.</p>
<p>(I&#8217;m not a C# programmer, but enjoyed the article btw&#8230;)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405613">
				<div id="div-comment-405613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405613">
			August 2, 2006 at 12:39 pm</a>		</div>

		<p>A notable point which annoys the hell out of me but which is beautifully illustrated by your post is : </p>
<p>// Autogenerated by the compiler <br />class __AnonymousClass$0 { <br />&nbsp;MyClass this$0; <br />&#8230; </p>
<p>Anyone who&#8217;s ever serialized a large object graph via binary or soap formatters will spot it pretty quick. [Serializable] is missing. <br />So any object graph containing one of these won&#8217;t work. </p>
<p>Really, **really** annoying. </p>
<p>It is worth therefore being very aware of this distinction between &#8216;easy&#8217; and &#8216;hard&#8217; if you are going to use anonymous delegates and you ever use the invasive* serialization options. </p>
<p>My team is probably going to have a look at whether we can binary hack our dll&#8217;s on loading (we already use custom assembly resolvers so it&#8217;s not as big a step as it sounds) to fake in the Serializable attributes at runtime. <br />The ability to checkpoint almost the entire application to an arbitrary stream is *very* tempting. </p>
<p>Not intended as a rant &#8211; just as an additional warning to anyone looking into this functionality and its side effects. </p>
<p>* as opposed to the public properties / or special interface only XmlSerialization) </p>
<div CLASS=post>[<i>I don&#8217;t know what attributes the compiler autogenerates. This was an informal discussion, not a specification. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405693">
				<div id="div-comment-405693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ccx</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405693">
			August 2, 2006 at 5:25 pm</a>		</div>

		<p>Gosh!<br />
<br />From what i use to see in other sites about programming languages, i thought people would say: &quot;Great, finally C# has this new cool feature (closures)!&quot;. Instead, what i see is people bashing a useful feature just because they don&#8217;t quite understand it. Maybe recursion and virtual funcionts received the same bad looks when they were introduced&#8230;</p>
<p>Am i the only one who **likes** when a programming language has more features? Or do everybody prefer minimalistic languages where you have to reimplement everything (including pass-by-reference, as in Java)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405743">
				<div id="div-comment-405743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405743">
			August 3, 2006 at 12:47 am</a>		</div>

		<blockquote><p>
  The first seems like it could cause some massive memory leaks you wouldn&#8217;t expect</p>
<p>Two words: Garbage collection.<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405753">
				<div id="div-comment-405753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405753">
			August 3, 2006 at 2:42 am</a>		</div>

		<p>Anonymous: The point of bok is more subtle, if anon method a keeps a reference to a local variable that&#8217;s a huge dictionary z, and anon method b is a simple &quot;return x + y&quot; method, and b is shared by both anon functions, then the reference to z would be kept as long as there was any reference to anon method b. Not so good, or at least a real issue. It could be one of the cases where some knowledge of the actual implementation is needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405763">
				<div id="div-comment-405763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.infosupport.com/wouterv/archive/2006/08/03/9804.aspx' rel='external nofollow' class='url'>Wouter van Vugt</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405763">
			August 3, 2006 at 3:17 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405773">
				<div id="div-comment-405773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405773">
			August 3, 2006 at 5:35 am</a>		</div>

		<p>[I don&#8217;t know what attributes the compiler auto generates. This was an informal discussion, not a specification. -Raymond]</p>
<p>Sorry I wasn&#8217;t trying to pick at anything in your example &#8211; your example was completely correct in not having the attribute.<br />
<br />I was just pointing out the limitations imposed by the silent hoops the compiler jumped through in the hard case.</p>
<p>I agree simply adding it willy nilly would also be unrealistic since it would needlessly constrain things in another (far more important) direction.</p>
<p>For the record I love anon delegates for two principle reasons neither of which rely on the &#8216;hard&#8217; case.<br />
<br />As already mentioned by others they reduce the need for a separate function name (which as an event handler callback is probably not something you should be calling directly).</p>
<p>But better still for a very small function (hopefully one or two lines) they provide greater &#8216;cohesion&#8217; between the event subscription and the desired behaviour when it executes. I love this and find, when used well, it dramatically improves the readability of the code. I find reading the auto generated names from the designer a little ugly (but baring anon delegates have no better solution to offer :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405783">
				<div id="div-comment-405783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405783">
			August 3, 2006 at 6:06 am</a>		</div>

		<p>TW:</p>
<p>One great use for anonymous delegates is unit testing event handlers; each test can be self contained and not require any additional methods to handle the event.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405793">
				<div id="div-comment-405793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azrael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405793">
			August 3, 2006 at 7:47 am</a>		</div>

		<p>CN: I don&#8217;t really understand&#8230; Assuming that&#8217;s something like this:</p>
<p> &nbsp;BigDictionary z;<br />
<br /> &nbsp;anon_a = delegate (x) { return z[x]; }<br />
<br /> &nbsp;anon_b = delegate (x,y) { return x + y; }</p>
<p>And assuming that both anon_a and anon_b are returned, the compiler will generate one wrapper class and use for anon_a, but anon_b falls into what Raymond classified as the easy case.</p>
<p>Unless anon_b directly references either z or anon_a, it is unrelated to z, therefore has no impact on the lifetime of z.</p>
<p>It is easier if you think that each closure (delegate&#8230;) has an internal hashtable with the variables that it refers and are not parameters. This hashtable maps the name of the variable to a reference to it. The wrapper class thingy is only an implementation detail of C#/CLR.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405823">
				<div id="div-comment-405823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bok</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405823">
			August 3, 2006 at 10:27 am</a>		</div>

		<p>Azrael: I don&#8217;t believe that was what CN meant. My original point was more the following situtation:</p>
<p> int w;<br />
<br /> BigDictionary z;<br />
<br /> anon_a = delegate (x) { return z[x + w++]; }<br />
<br /> anon_b = delegate (x) { return x + w++; }<br />
<br /> if( something )<br />
<br /> {<br />
<br /> &nbsp; &nbsp;return anon_a;<br />
<br /> }<br />
<br /> else<br />
<br /> {<br />
<br /> &nbsp; &nbsp;return anon_b;<br />
<br /> }</p>
<p>Neither anonymous function fits into the easy case, because both reference &#8216;w&#8217;. If anon_b happens to be returned, does the anonymous class include a live reference to &#8216;z&#8217; as well? There can&#8217;t be different anonymous classes which both contain &#8216;w&#8217;, in case either delegate modifies it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405843">
				<div id="div-comment-405843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.practicaldot.net' rel='external nofollow' class='url'>Patrick Smacchia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405843">
			August 3, 2006 at 1:22 pm</a>		</div>

		<p>Here you can read some articles extracted from my book &#8216;Practical .NET2 and C#2&#8217; where I explain the &#8216;under the hood&#8217; of iterators in C#2 and how they are related to anonymous mehods:</p>
<p><a rel="nofollow" target="_new" href="http://www.theserverside.net/tt/articles/showarticle.tss?id=AnonymousMethods" rel="nofollow">http://www.theserverside.net/tt/articles/showarticle.tss?id=AnonymousMethods</a></p>
<p><a rel="nofollow" target="_new" href="http://www.theserverside.net/tt/articles/showarticle.tss?id=IteratorsWithC2" rel="nofollow">http://www.theserverside.net/tt/articles/showarticle.tss?id=IteratorsWithC2</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405873">
				<div id="div-comment-405873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.tringali.org' rel='external nofollow' class='url'>Scott Tringali</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405873">
			August 3, 2006 at 10:21 pm</a>		</div>

		<p>Allowing the lambada function to access data in the local scope of the function seems like it&#8217;s the wrong answer.</p>
<p>Is that the forbidden dance function? &nbsp;(<a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Lambada" rel="nofollow">http://en.wikipedia.org/wiki/Lambada</a>)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405883">
				<div id="div-comment-405883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jasonhaley.com/blog/archive/2006/08/03/136783.aspx' rel='external nofollow' class='url'>Jason Haley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405883">
			August 3, 2006 at 11:25 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405903">
				<div id="div-comment-405903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.developers.org.ua/archives/max/2006/08/04/weekly-linkdump-39/' rel='external nofollow' class='url'>weekly linkdump &laquo; ???????? ?????????????????????????? &laquo; developers.org.ua</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-405903">
			August 4, 2006 at 1:02 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.developers.org.ua/archives/max/2006/08/04/weekly-linkdump-39/" rel="nofollow">http://www.developers.org.ua/archives/max/2006/08/04/weekly-linkdump-39/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-406173">
				<div id="div-comment-406173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://developers.pl/blogs/nabmar/archive/2006/08/05/4699.aspx' rel='external nofollow' class='url'>my friend - visual</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-406173">
			August 5, 2006 at 3:59 pm</a>		</div>

		<p>Na blogu oldnewthing pojawił się&amp;amp;nbsp;trzy częściowy&amp;amp;nbsp;artykuł o implementacji metod anonimowych w&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-406893">
				<div id="div-comment-406893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-406893">
			August 7, 2006 at 6:29 pm</a>		</div>

		<p>CN/Azrael/bok, the page Raymond linked to in a later entry seems to suggest that the comparative lifetime depends on the scope the variable is declared in. This means that you could declare z in an inner scope to w so that anon_b wouldn&#8217;t need to keep a reference to z.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-407273">
				<div id="div-comment-407273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ericgu/archive/2006/08/08/692346.aspx' rel='external nofollow' class='url'>Eric Gunnerson's C# Compendium</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-407273">
			August 8, 2006 at 1:23 pm</a>		</div>

		<p>Raymond wrote a really nice series of posts on this:</p>
<p>Part 1<br />
<br />Part 2<br />
<br />Part 3<br />
<br />He also points out that&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-407313">
				<div id="div-comment-407313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bill Cohagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-407313">
			August 8, 2006 at 1:43 pm</a>		</div>

		<p>This is an interesting thread &#8212; one that reminds me strongly of discussions threads I was involved in back in the &#8217;70s when we (a group of developers) were trying to get a grasp of closures and continuations in Scheme. I would strongly recommend that people interested in learning more about these take a look at Guy Steele&#8217;s &quot;The Lambda Papers&quot; (<a rel="nofollow" target="_new" href="http://library.readscheme.org/page1.html" rel="nofollow">http://library.readscheme.org/page1.html</a>) An excellent introduction to the power of these ideas is Dan Friedman&#8217;s &quot;Little Schemer&quot; book.</p>
<p>These are certainly not concepts that are either new or Microsoft specific. They certainly are very powerful concepts and I for one am tickled pink that they are showing up in languages such as c#. </p>
<p>If you don&#8217;t take the time and effort to understand them they will remain &quot;quirky&quot; facets of the language. If you *do* take the time then I believe your code will be the better for it.</p>
<p>Regards,<br />
<br /> Bill<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-407503">
				<div id="div-comment-407503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dotnetkicks.com/csharp/The_implementation_of_anonymous_methods_in_C_and_its_consequences_1' rel='external nofollow' class='url'>DotNetKicks.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-407503">
			August 9, 2006 at 3:51 am</a>		</div>

		<p>You&#8217;ve been kicked (a good thing) &#8211; Trackback from DotNetKicks.com</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-408603">
				<div id="div-comment-408603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.dotninjas.dk/t4rzsan/archive/2006/08/14/1531.aspx' rel='external nofollow' class='url'>Anonymous Methods -&gt; code bloat</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-408603">
			August 14, 2006 at 11:09 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.dotninjas.dk/t4rzsan/archive/2006/08/14/1531.aspx" rel="nofollow">http://blogs.dotninjas.dk/t4rzsan/archive/2006/08/14/1531.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416283">
				<div id="div-comment-416283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.infosupport.com/wouterv/archive/2006/08/03/An-interesting-read-on-anonymous-methods_2E00_.aspx' rel='external nofollow' class='url'>Wouter van Vugt</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-416283">
			September 3, 2006 at 3:07 pm</a>		</div>

		<p>An anonymous method is of course not anonymous at all, how else would you find it runtime if it were?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-421073">
				<div id="div-comment-421073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://timvw.madoka.be/?p=622' rel='external nofollow' class='url'>Tim Van Wassenhove &raquo; Blog Archive &raquo; Anonymous methods</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-421073">
			September 16, 2006 at 5:13 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://timvw.madoka.be/?p=622" rel="nofollow">http://timvw.madoka.be/?p=622</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-428673">
				<div id="div-comment-428673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.timvw.be/anonymous-methods/' rel='external nofollow' class='url'>Tim Van Wassenhove &raquo; Anonymous methods</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-428673">
			October 7, 2006 at 8:03 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.timvw.be/anonymous-methods/" rel="nofollow">http://www.timvw.be/anonymous-methods/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-434363">
				<div id="div-comment-434363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://moiseev.blogspot.com/2006/10/blog-post_25.html' rel='external nofollow' class='url'>Items</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-434363">
			October 25, 2006 at 5:31 am</a>		</div>

		<p>Вместо эпиграфа: information hiding (1) In programming, the process of hiding details of an object or</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-512603">
				<div id="div-comment-512603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ericlippert/archive/2007/06/06/fyi-c-and-vb-closures-are-per-scope.aspx' rel='external nofollow' class='url'>Fabulous Adventures In Coding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-512603">
			June 7, 2007 at 2:13 pm</a>		</div>

		<p>This post assumes that you understand how closures are implemented in C#. They&#8217;re implemented in essentially</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519153">
				<div id="div-comment-519153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.microsoft.co.il/blogs/eyal/archive/2007/06/25/Implementation-of-anonymous-methods-in-C_2300_.aspx' rel='external nofollow' class='url'>I hate Spaghetti (code)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-519153">
			June 25, 2007 at 1:07 pm</a>		</div>

		<p>I read a nice and not too complicated post regarding the &quot;behind the scenes&quot; of anonymous methods. I</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-534783">
				<div id="div-comment-534783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.microsoft.co.il/blogs/dorony/archive/2007/05/11/Anonymous-Delegates-or-DisposableActions_3F00_.aspx' rel='external nofollow' class='url'>Doron's .NET Space</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-534783">
			August 9, 2007 at 3:41 pm</a>		</div>

		<p>One of the most useful features of .NET 2.0 is anonymous delegates. They allow you to create &quot;wrappers&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-548993">
				<div id="div-comment-548993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jcesar.totumo.net/2007/09/13/d-should-have-real-closures/' rel='external nofollow' class='url'>Julio C??sar Carrascal Urquijo &raquo; Archivo &raquo; D should have real closures.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-548993">
			September 13, 2007 at 1:01 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://jcesar.totumo.net/2007/09/13/d-should-have-real-closures/" rel="nofollow">http://jcesar.totumo.net/2007/09/13/d-should-have-real-closures/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-552333">
				<div id="div-comment-552333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/fxcop/archive/2007/09/21/new-for-visual-studio-2008-support-for-anonymous-methods-and-lambda-expressions.aspx' rel='external nofollow' class='url'>The Visual Studio Code Analysis Team Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-552333">
			September 21, 2007 at 11:36 am</a>		</div>

		<p>One of my favorite new features for Code Analysis in Visual Studio 2008 is our support for analyzing</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-568083">
				<div id="div-comment-568083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dotnet.robertmao.com/2007/11/17/c-nested-classes-vs-java/' rel='external nofollow' class='url'>.Net Learning Curve &raquo; Blog Archive &raquo; C# nested classes (vs Java)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-568083">
			November 17, 2007 at 10:44 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://dotnet.robertmao.com/2007/11/17/c-nested-classes-vs-java/" rel="nofollow">http://dotnet.robertmao.com/2007/11/17/c-nested-classes-vs-java/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-576013">
				<div id="div-comment-576013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.microsoft.co.il/blogs/dorony/archive/2007/12/09/string-less-argumentnullexception.aspx' rel='external nofollow' class='url'>Doron's .NET Space</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-576013">
			December 9, 2007 at 1:58 pm</a>		</div>

		<p>The post I wrote yesterday about Expression Trees has inspired to find some more cool usages for this</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636343">
				<div id="div-comment-636343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.paulstovell.com/blog/almost-anonymous-methods-in-visual-basic-net' rel='external nofollow' class='url'>Paul Stovell says&#8230; &raquo; Tip: &#8220;Almost-anonymous&#8221; methods in Visual Basic .NET</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-636343">
			June 5, 2008 at 10:45 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.paulstovell.com/blog/almost-anonymous-methods-in-visual-basic-net" rel="nofollow">http://www.paulstovell.com/blog/almost-anonymous-methods-in-visual-basic-net</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724413">
				<div id="div-comment-724413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/psteele/archive/2009/04/06/resharper-access-to-modified-closure.aspx' rel='external nofollow' class='url'>Patrick Steele's .NET Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-724413">
			April 6, 2009 at 3:20 pm</a>		</div>

		<p>On the advice of Jay Wren , I decided to try our ReSharper 4.1 .&amp;#160; I had previously installed DevExpress</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724443">
				<div id="div-comment-724443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.srtsolutions.com/blogs/patricksteele/archive/2009/04/06/resharper-access-to-modified-closure.aspx' rel='external nofollow' class='url'>Patrick Steele</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-724443">
			April 6, 2009 at 3:26 pm</a>		</div>

		<p>On the advice of Jay Wren , I decided to try our ReSharper 4.1 .&amp;#160; I had previously installed DevExpress&amp;#39;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-737833">
				<div id="div-comment-737833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sdesmedt.wordpress.com/2009/05/21/for-once-and-for-all-delegates-events-anonymous-methods-and-lambda-expressions/' rel='external nofollow' class='url'>For once and for all: Delegates, Events, Anonymous Methods and Lambda Expressions &laquo; Hungry for Knowledge</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-737833">
			May 21, 2009 at 2:53 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://sdesmedt.wordpress.com/2009/05/21/for-once-and-for-all-delegates-events-anonymous-methods-and-lambda-expressions/" rel="nofollow">http://sdesmedt.wordpress.com/2009/05/21/for-once-and-for-all-delegates-events-anonymous-methods-and-lambda-expressions/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-747883">
				<div id="div-comment-747883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://beyondthespec.com/blog/2009/06/19/anonymous-methods-internals/' rel='external nofollow' class='url'>Anonymous Methods Internals | Beyond The Spec</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060802-00/?p=30263#comment-747883">
			June 18, 2009 at 7:52 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://beyondthespec.com/blog/2009/06/19/anonymous-methods-internals/" rel="nofollow">http://beyondthespec.com/blog/2009/06/19/anonymous-methods-internals/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>