<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-852373">
				<div id="div-comment-852373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852373">
			August 10, 2010 at 7:23 am</a>		</div>

		<p>Does that mean that if Frob were implemented as</p>
<p>string Frob(OtherClass o)</p>
<p>{</p>
<p>string result = &quot;thefrob&quot;;</p>
<p>}</p>
<p>and the compiler did some optimizations, the object o could be gone even before</p>
<p>new OtherClass(s); returned?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852383">
				<div id="div-comment-852383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.henke37.cjb.net/' rel='external nofollow' class='url'>Henke37</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852383">
			August 10, 2010 at 7:24 am</a>		</div>

		<p>The answer to the bonus question is &quot;Who said that the parameters where saved?&quot; Only keeping track of stuff that you care about and so on. Same as the command line arguments. And it&#39;s not unheard of that people change the values passed in during processing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852413">
				<div id="div-comment-852413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852413">
			August 10, 2010 at 7:32 am</a>		</div>

		<p>@rs</p>
<p>Depending on what the constructor does (and the runtime of course), it may never be created.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852513">
				<div id="div-comment-852513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gibwar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852513">
			August 10, 2010 at 8:32 am</a>		</div>

		<p>Thanks for the explanation of the directives. I&#39;ve heard those before but never fully understood how they happened. Granted, I&#39;ve never had a case where I had to worry about that or walk up the stack for something (untrustworthy anyway as you&#39;ve previously pointed out) but the real icing on the cake was the examples in assembly. Once I saw the assembly examples it all made sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852543">
				<div id="div-comment-852543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Barry Kelly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852543">
			August 10, 2010 at 8:57 am</a>		</div>

		<p>It&#39;s great that the knowledge about this is spreading inside MS :) I wrote a post 4 years ago on this topic &#8211; <a rel="nofollow" target="_new" href="http://blog.barrkel.com/2006/07/not-so-lazy-garbage-collector.html" rel="nofollow">blog.barrkel.com/&#8230;/not-so-lazy-garbage-collector.html</a> &#8211; relating to an access violation bug that occurred with the Ping class in .NET on AMD processors because of this exact problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works odd alt thread-odd thread-alt depth-1" id="comment-852583">
				<div id="div-comment-852583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852583">
			August 10, 2010 at 9:09 am</a>		</div>

		<p>If you need to walk the stack in your C# application, odds are you&#39;re doing something very, very, wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852673">
				<div id="div-comment-852673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tobi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852673">
			August 10, 2010 at 10:41 am</a>		</div>

		<p>Answer: It is not possible to always return the parameters as they may have been collected before the method started executing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852693">
				<div id="div-comment-852693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852693">
			August 10, 2010 at 10:44 am</a>		</div>

		<p>This garbage collection behavior has caught some people using timers &#8211; they&#39;d store a reference to a new timer instance in a local, do some work that relied on the timer, and expect the timer to live until the method returned (or even longer). &nbsp;The notes and example for the System.Timers.Timer class now explicitly discuss this problem: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/system.timers.timer.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/system.timers.timer.aspx</a></p>
<p>However, some timers manage to keep themselves referenced or otherwise ineligible for collection when they&#39;re active (System.Windows.Form.Timer documents this as part of the Enabled property) &#8211; so there can be a bit of confusion about what you might need to do to make sure timers stick around (or get collected).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852723">
				<div id="div-comment-852723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852723">
			August 10, 2010 at 11:13 am</a>		</div>

		<p>@rs: yes, it&#39;s possible for an object to be collected while its constructor is still running.</p>
<p>That can make for a funny debugging session when the finalizer releases an unmanaged object that&#39;s still being initialized.</p>
<p>Remember kids: if you have unmanaged resources, always put them into their own class, and make that as simple as possible: use SafeHandle. The Microsoft-suggested way to mix managed and unmanaged resources in a single class (void Dispose(bool disposing)) is a sure way to introduce race conditions between your code and the finalizer thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852783">
				<div id="div-comment-852783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Curt Nichols</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852783">
			August 10, 2010 at 2:24 pm</a>		</div>

		<p>There&#39;s an interesting variation on the subject of when an object is available for collection: if you&#39;ve compiled with /debug the JITter will, in essence, hold references through the end of the current method; this makes for easier debugging. If I recall correctly this behavior also holds if a method is first jitted while runder under a debugger. This is markedly different that the normal /release behavior. If you run off to write some sample code to see what Raymond has described in action just don&#39;t use debug code, you won&#39;t be successful.</p>
<p><a rel="nofollow" target="_new" href="http://www.codeneverwritten.com/2007/12/04/where-did-my-object-go-part-1/" rel="nofollow">http://www.codeneverwritten.com/&#8230;/where-did-my-object-go-part-1</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852803">
				<div id="div-comment-852803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852803">
			August 10, 2010 at 4:22 pm</a>		</div>

		<p>Ah, getting object and methods from stack.</p>
<p>I wrote code to do that in an unmanaged world once. It wasn&#39;t always right as the stack slots are just local variables and can be clobbered by the function.</p>
<p>It got really fun when I was compiled with frame pointers and assumed everybody in between was (they weren&#39;t).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853173">
				<div id="div-comment-853173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-853173">
			August 11, 2010 at 1:27 pm</a>		</div>

		<p>I seem to recall hearing that some JavaScript engine (probably any one that tries to optimize) had to run really slow in the event that it detected any part of the program using the stack-walking functionality.</p>
<p>Although if you&#39;re walking the stack in a C# application, I imagine that either you&#39;re implementing a debugger (in which case you&#39;d want all the parameter information and such) or coroutines (in which case you wouldn&#39;t).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853703">
				<div id="div-comment-853703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-853703">
			August 13, 2010 at 9:29 am</a>		</div>

		<p>Seems to me this is due to dubious language specification. A reference declared in a given scope should live as long as the scope, even in the face of optimizations. The optimizations should only kick in if it can prove that there are other references to the object.</p>
<p>You cannot claim that it doesn&#39;t matter because the program cannot tell the difference. Obviously, it can when finalizers enter the picture.</p>
<p>Other messages in this thread have convinced me that the dubious feature of optimizing when a reference vanish is not worth the hassles and obscure bugs related to it. The worst part is that you cannot fix the bug simply by adding yet more references to the object, as the optimizer can be as powerful as it wishes in the face of a free-for-all language spec.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>