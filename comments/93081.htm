<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1 parent" id="comment-1227911">
				<div id="div-comment-1227911" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1227911">
			February 24, 2016 at 7:07 am</a>		</div>

		<p>I doubt a compiler like Microsoft Visual C++ could take advantage of this, because some MFC stuff relies on this not being UB, at least on inline methods (such as CWnd::GetSafeHwnd()) that outright include a test on whether &#8216;this&#8217; is null.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1227932">
				<div id="div-comment-1227932" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1227932">
			February 24, 2016 at 8:14 am</a>		</div>

		<p>@Medinoc:  They could:<br />
a) Add an option to allow the optimization.<br />
b) Say that GetSafeHwnd only works if CWnd is the *first* base class.  (In which case the addition is not required).<br />
c) Add a magic __attribute__ which says &#8220;keep the checks in for adjust a pointer to this class&#8221;.</p>
<p>I bet GCC uses an optimization like this.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1227961">
				<div id="div-comment-1227961" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1227961">
			February 24, 2016 at 9:00 am</a>		</div>

		<p>In this case, it&#8217;s an inline function, so the optimizer can see the if (this == NULL) check.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1228021">
				<div id="div-comment-1228021" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228021">
			February 24, 2016 at 11:07 am</a>		</div>

		<p>The tests on whether &#8216;this&#8217; is null might be a leftover from pre-standard (before C++98) versions of C++.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-3" id="comment-1228102">
				<div id="div-comment-1228102" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228102">
			February 25, 2016 at 5:04 am</a>		</div>

		<p>I&#8217;m not sure, it may be also a case of knowing the compiler too well at that point.<br />
I know for a fact that I have done some silly checks based on knowing the compiler too well.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1227952">
				<div id="div-comment-1227952" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1227952">
			February 24, 2016 at 8:59 am</a>		</div>

		<p>For the guy who wrote if (this == NULL) { /* logic here */ }, his code is starting to look really long in the tooth.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1228081">
				<div id="div-comment-1228081" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228081">
			February 24, 2016 at 8:02 pm</a>		</div>

		<p>Bjarne Stroustrup himself did this in CFront (source: <a href="http://www.i-programmer.info/programming/cc/9212-finding-bugs-in-the-first-c-compiler-what-does-bjarne-think.html" rel="nofollow">http://www.i-programmer.info/programming/cc/9212-finding-bugs-in-the-first-c-compiler-what-does-bjarne-think.html</a>). Granted, that was a very different time.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1228221">
				<div id="div-comment-1228221" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228221">
			February 25, 2016 at 2:19 pm</a>		</div>

		<p>That&#8217;s if (this == NULL) { /* error trap here */ } which I still think is reasonable.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1228231">
				<div id="div-comment-1228231" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228231">
			February 25, 2016 at 3:45 pm</a>		</div>

		<p>The problem is that the compiler is free to remove that entire conditional block because it only executes when something &#8220;impossible&#8221; happens and is thus undefined behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1228451">
				<div id="div-comment-1228451" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228451">
			February 28, 2016 at 3:34 am</a>		</div>

		<p>The problem is that as soon as you have undefined behavior, it also infects everything else in the program. Meaning the compiler may not just optimize that one check away, it could do anything with the function (realistic possibility I&#8217;d say) or the whole program (less likely to happen but theoretically possible).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1228042">
				<div id="div-comment-1228042" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Krishty</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228042">
			February 24, 2016 at 2:18 pm</a>		</div>

		<p>Just use a kind of assert() macro that evaluates to __assume() in release builds.</p>
<p>assert(c != NULL);</p>
<p>is easier to understand, does not require changes to the class, and even old Microsoft compilers (early 2000 era) understand __assume() involving null pointers properly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1228061">
				<div id="div-comment-1228061" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kurt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228061">
			February 24, 2016 at 7:32 pm</a>		</div>

		<p>I would guess it&#8217;s as likely that the compiler would see IsNotNull is an empty inline and optimise it away first.  Maybe you can hint this to compilers by passing around a reference instead of a pointer?  Does &amp;static_cast&lt;B&amp;&gt;(*c) remove the nullptr check?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1228101">
				<div id="div-comment-1228101" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228101">
			February 25, 2016 at 2:23 am</a>		</div>

		<p>Clang can complain if you compare this with null, with a message something like:</p>
<p>error: &#8216;this&#8217; pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true [-Werror,-Wundefined-bool-conversion]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1228211">
				<div id="div-comment-1228211" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fuz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228211">
			February 25, 2016 at 1:14 pm</a>		</div>

		<p>The same weird jump instruction exists with placement new, because the compiler skips the constructor call if the pointer is null:</p>
<p>new (ptr) Type();</p>
<p>test        rax,rax<br />
je          SkipConstructor<br />
mov         rcx,rax<br />
call        Type::Type<br />
SkipConstructor:</p>
<p>__assume(ptr) (or other UB magic you care to use) will also remove this redundant null test.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1229011">
				<div id="div-comment-1229011" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1229011">
			March 3, 2016 at 10:32 am</a>		</div>

		<p>I like to call this sort of thing &#8220;spooky undefined behavior at a distance&#8221;. Many people assume these things are optimizer bugs, because they assume that even though the thing they&#8217;re doing is undefined by the standard, they assume their architecture&#8217;s known behavior for their mental model of how it works means it&#8217;s defined by the implementation they are using.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>