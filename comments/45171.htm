<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1237856">
				<div id="div-comment-1237856" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237856">
			July 10, 2015 at 7:04 am</a>		</div>

		<p>Would be amusing if it filled w/ ones on some future system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237806">
				<div id="div-comment-1237806" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237806">
			July 10, 2015 at 8:51 am</a>		</div>

		<p>you both are. &quot;Filled with zeros&quot; is a valid for state for &quot;Any state&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1237766">
				<div id="div-comment-1237766" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237766">
			July 10, 2015 at 9:11 am</a>		</div>

		<p>Joshua: If we see a future hard drive or filesystem design where it is cheaper to initialize with 1s instead of 0s, maybe.</p>
<p>But then they will probably just swap 1s and 0s so we still have 0s by default.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237746">
				<div id="div-comment-1237746" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237746">
			July 10, 2015 at 9:18 am</a>		</div>

		<p>@The MAZZTer: Welcome to the future. &nbsp;NAND flash bits are erased to a 1 state, and SSDs are made out of NAND flash. &nbsp;Though since an SSD does not present a raw view of the underlying flash, I suppose the controller would return zero&#39;d pages for sectors that are erased, rather than returning the raw pages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1237676">
				<div id="div-comment-1237676" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237676">
			July 10, 2015 at 5:40 pm</a>		</div>

		<p>Statistically, 0x00 is a lot more frequent than 0xFF. Sections of files or filesystems filled by 0x00 are far more common than sections filled by 0xFF (or any other value or pattern). If in doubt, write a short program that counts the occurrences of each byte value in a given file, and run it on a set of randomly chosen files from your hard drive :-) . That&#39;s why a &quot;zero fill&quot; API or control call makes much more sense than a &quot;fill with arbitrary value&quot; one. The 65c02/65816 processors even had an STZ (STore Zero) instruction that let you zero a memory location in just one step.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237666">
				<div id="div-comment-1237666" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237666">
			July 10, 2015 at 7:22 pm</a>		</div>

		<p>On Linux, there are 2 apis to create/grow files (other than just writing lots of 0s). Both will return 0 for unwritten data (of course).</p>
<p>&#39;truncate&#39; creates sparse files (that is, write() can fail with an out of space error).</p>
<p>&#39;fallocate&#39; reserves disk space, but still doesn&#39;t physically write to the blocks. There is metadata for each disk block for whether to pretend it is all zeros on read. NTFS should get an api like this :).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1237646">
				<div id="div-comment-1237646" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237646">
			July 10, 2015 at 10:40 pm</a>		</div>

		<p>Before sparse files came about in NTFS (around since Win2k), you could still make files larger than the filesystem by using file compression (around since NT3.51). It&#39;s not nearly as flexible (it&#39;s a lot easier to end up with 0s still writen to disk), but I was able to get 4GB of files on a 1GB disk to test what happens.</p>
<p>It turns out the DIR had some very bad routine for attempting to do 64-bit math, while Explorer used 32-bit math for adding file sizes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1237566">
				<div id="div-comment-1237566" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237566">
			July 12, 2015 at 6:56 pm</a>		</div>

		<p>Are the &quot;zero-fill&quot; functionity exist on ReFS then? I can formulate good enquiry to search for this information.</p>
<p>(I have to ask this because while FAT may be a thing of past for a lot of people, ReFS is not. And it&#39;s choosen to NOT support a number of NTFS features. So we need clarification here.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1222011">
				<div id="div-comment-1222011" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1222011">
			July 13, 2015 at 6:59 am</a>		</div>

		<p>@cheong00:</p>
<p>&quot;FAT may be a thing of past for a lot of people&quot;</p>
<p>*laughs hysterically*</p>
<p>If you want a filesystem that works on just about every Turing-complete I/O-capable system in the world, some variety of FAT is pretty much your only option. &nbsp;It won&#39;t be dying any time soon.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1237436">
				<div id="div-comment-1237436" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237436">
			July 13, 2015 at 6:20 pm</a>		</div>

		<p>@Kevin: Due to the file size limit and ineffective storage on large volumes CONs of FAT32, I think it would be replaced by exFAT some time later.</p>
<p>If the storage have to be reformatted by Windows based system later, they had better support exFAT in the beginning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1237256">
				<div id="div-comment-1237256" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237256">
			July 14, 2015 at 6:03 pm</a>		</div>

		<p>cheong: I believe licensing requirements will keep exFAT from ever being nearly as popular outside of Windows as FAT32 is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237216">
				<div id="div-comment-1237216" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237216">
			July 15, 2015 at 6:13 am</a>		</div>

		<p>I have always thought that what was meant by describing the contents as not defined was that, in circumstances where security does not demand clearing the space, it might not be cleared. For example, if you reduce the file size and then increase it again (without closing it) you might see the old contents rather than zero bytes.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>