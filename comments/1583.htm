<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1110823">
				<div id="div-comment-1110823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110823">
			March 6, 2014 at 7:13 am</a>		</div>

		<p>In command packets for SATA Native Command Queing, there is FUA (Force Unit Access) bit. Some drives may ignore that bit, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1110833">
				<div id="div-comment-1110833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110833">
			March 6, 2014 at 7:14 am</a>		</div>

		<p>I wonder if it&#39;s possible to sue the HD manufacturer for advertising SATA when it&#39;s not really SATA because the flush command returns success when it doesn&#39;t work.</p>
<p>You do not use FILE_FLAG_WRITE_THROUGH because it&#39;s faster. You use it because it&#39;s correct.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1110843">
				<div id="div-comment-1110843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110843">
			March 6, 2014 at 7:19 am</a>		</div>

		<p>There is a theory that if your application writes a large file and never reads back from it, then passing FILE_FLAG_NO_BUFFERING will help other applications and files retain their caches, which is ultimately beneficial to overall performance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1110853">
				<div id="div-comment-1110853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110853">
			March 6, 2014 at 7:19 am</a>		</div>

		<p>&gt;I wonder if it&#39;s possible to sue the HD manufacturer for advertising SATA when it&#39;s not really SATA because the flush command returns success when it doesn&#39;t work.</p>
<p>Remember when MS had to increase shutdown delay in Windows 95 because of IBM ATA drives not completing flush?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1110863">
				<div id="div-comment-1110863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110863">
			March 6, 2014 at 7:21 am</a>		</div>

		<p>&gt;There is a theory that if your application writes a large file and never reads back from it, then passing FILE_FLAG_NO_BUFFERING will help other applications and files retain their caches, which is ultimately beneficial to overall performance.</p>
<p>Large files opened in caching mode is a bane of Windows users. Even not just large files, but lots of files. For example, when an AV scan or system backup runs in background.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1110883">
				<div id="div-comment-1110883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110883">
			March 6, 2014 at 7:54 am</a>		</div>

		<p>I am aware that a lot of programming forums/blogs of suspicious quality are spreading myths for years that FILE_FLAG_NO_BUFFERING and FILE_FLAG_WRITE_THROUGH are the &quot;magic&quot; that makes your writes and reads faster. Based only on false beliefs and the lack of understanding and tests.</p>
<p>Raymond is of course right: unless you&#39;re making video conversion software (or antivirus scanner) that should push a lot of gigabytes through the CPU just because, you probably don&#39;t want to use FILE_FLAG_NO_BUFFERING. And using FILE_FLAG_WRITE_THROUGH has even less sense unless you write your own file system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1110893">
				<div id="div-comment-1110893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Olivier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110893">
			March 6, 2014 at 8:23 am</a>		</div>

		<p>&gt; And using FILE_FLAG_WRITE_THROUGH has even less sense unless you write your own file system.</p>
<p>Or your own database system, where you want to make sure data is safely committed to disk.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1110903">
				<div id="div-comment-1110903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark VY</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110903">
			March 6, 2014 at 8:29 am</a>		</div>

		<p>Why ignore the request? &nbsp;Isn&#39;t that a recipe for disaster?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1110913">
				<div id="div-comment-1110913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110913">
			March 6, 2014 at 8:59 am</a>		</div>

		<p>I thought some of this sounded familiar. Raymond has covered this in one form or another several times (the HD ignorning flush requests).</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2010/09/09/10059575.aspx">blogs.msdn.com/&#8230;/10059575.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1110923">
				<div id="div-comment-1110923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">benjamin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110923">
			March 6, 2014 at 9:59 am</a>		</div>

		<p>In the early days of CD Burning that NO_BUFFERING flag was a gift from heaven since burning a CD often meant getting control back and witnessing everything slowly. swap. in. as the disc image was evicted from memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1110933">
				<div id="div-comment-1110933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gerard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110933">
			March 6, 2014 at 10:13 am</a>		</div>

		<p>Legacy IDE drives provide no support for the equivalent of SCSI FUA in drives based on any version of the Advanced Technology Attachment (ATA) specification prior to version 7. This issue was addressed in ATA-7, on which most Serial ATA (SATA) drives are based. Of course that doesn&#39;t mean it is honored or correctly implemented in all cases..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hardon odd alt thread-odd thread-alt depth-1" id="comment-1110943">
				<div id="div-comment-1110943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/gdalsnes' rel='external nofollow' class='url'>gdalsnes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110943">
			March 6, 2014 at 11:24 am</a>		</div>

		<p>&quot;The file system doesn&#39;t know that the driver is lying to it&quot;</p>
<p>All SATA and AHCI drivers I&#39;ve ever used has been provided and signed by Microsoft, so who is lying?</p>
<div class="post">[<em>The hardware is lying to the driver. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1110953">
				<div id="div-comment-1110953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110953">
			March 6, 2014 at 11:26 am</a>		</div>

		<p>[In the early days of CD Burning that NO_BUFFERING flag was a gift from heaven since burning a CD often meant getting control back and witnessing everything slowly. swap. in. as the disc image was evicted from memory.]</p>
<p>Ughhh. A very popular program I used then didn&#39;t do NO_BUFFERING. Good times. Well, at least you don&#39;t have to run PATA in PIO mode (or, worse, 8 bit SCSI in PIO mode) anymore.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1110963">
				<div id="div-comment-1110963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Torkell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110963">
			March 6, 2014 at 12:07 pm</a>		</div>

		<p>The issue of the hardware lying to the software gets especially fun when you stick a battery-backed RAID controller in the middle. Now, the controller being battery-backed can lie with impunity because it won&#39;t lose data across a power outage. But if the disks continue to lie to the RAID card (or worse, the RAID card doesn&#39;t even try to turn the disk&#39;s write cache off), then that cache becomes worthless and tends to result in a scrambled RAID array. I recall LiveJournal getting hit by exactly this issue many years ago. Their datacenter did have UPS, but that&#39;s not much use when someone hits the &quot;switch everything off now damnit&quot; button thinking it&#39;s the &quot;unlock door&quot; button&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1110973">
				<div id="div-comment-1110973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110973">
			March 6, 2014 at 12:08 pm</a>		</div>

		<p>&gt; Large files opened in caching mode is a bane of Windows users.</p>
<p>This is a frustrating reality. &nbsp;For example I love using Robocopy for backup purposes, but it doesn&#39;t have an option to bypass the filesystem cache. &nbsp;This means that my entire hard drive filled with movies, games, disk images, etc all are getting written to memory. It&#39;s also annoying because Robocopy shows the progress of the copy and then just sits and hangs at 100% while it waits for the file to actually get written someplace. &nbsp;I much prefer the behavior of tools such as TeraCopy which have an option to bypass the cache. &nbsp;The copy speed is much more realistic and when a file is complete it really is complete. &nbsp;It also doesn&#39;t cause me thrashing/paging grief.</p>
<p>What&#39;s even worse is that this is a known issue in &quot;write only&quot; usage scenarios and various Microsoft utilities (originally ESEUTIL and later XCOPY) have options to bypass the cache. &nbsp;I just looked online to see if Robocopy got some love in Windows 8, but a first glance seems to indicate that it&#39;s actually pretty broken in Win8. Fantastic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1110983">
				<div id="div-comment-1110983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110983">
			March 6, 2014 at 4:21 pm</a>		</div>

		<p>@Nico:</p>
<p>One issue with writing files in NO_BUFFERING mode is that it doesn&#39;t allow to set the file length other than multiple of block size. SetFilePointer will explicitly fail if the offset is not a multiple of block size, even though no I/O happens at that time, and the actual offset validation also happens inside ReadFile/WriteFile. So if you want to write a file with non-round size, you have to reopen it in buffered mode, and set its length. This is totally stupid.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1110993">
				<div id="div-comment-1110993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard Laager</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1110993">
			March 6, 2014 at 7:23 pm</a>		</div>

		<p>&gt; The hardware is lying to the driver. -Raymond</p>
<p>You have a typo in the blog post. It reads &quot;SATA drivers&quot; when it should be &quot;SATA drives&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1111003">
				<div id="div-comment-1111003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lawrence</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1111003">
			March 6, 2014 at 11:20 pm</a>		</div>

		<p>@Richard: Raymond&#39;s post is fine, the driver is lying too. It&#39;s telling the OS/Application &quot;no worries; you tell me you want to flush the cache, I&#39;ll make sure it happens&quot;. The driver knows it can&#39;t make that guarantee with the drive lying to it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1111023">
				<div id="div-comment-1111023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TheCodeArtist</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1111023">
			March 7, 2014 at 1:18 am</a>		</div>

		<p>The same thing happens on Linux with how differently the filesystem and block device layers implement O_SYNC. This results in improving I/O throughput on block-dev when O_DIRECT is used. <a rel="nofollow" target="_new" href="http://goo.gl/YNUvUp">http://goo.gl/YNUvUp</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1111043">
				<div id="div-comment-1111043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1111043">
			March 7, 2014 at 3:42 am</a>		</div>

		<p>@Lawrence, the driver is telling what it thinks is the truth, which is what the drive says. &nbsp;If the driver, or the driver&#39;s developer, could tell the difference when the drive is lying, then you could say it&#39;s lying as well. &nbsp;Timing isn&#39;t safe: a fast response might be suspicious from a plate/disk drive, but not from a flash/SSD drive. &nbsp;And having an enumeration of all drive IDs doesn&#39;t work either: manufacturers often keep the exact same ID between what they regard as minor revisions or fixed glitch that no one outside is (yet, with luck, ever) aware of.</p>
<p>The liar is the drive, the one getting hurt is the file system module, the driver is just the messenger. &nbsp;Don&#39;t shoot the messenger.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1111053">
				<div id="div-comment-1111053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kirchner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1111053">
			March 7, 2014 at 3:47 am</a>		</div>

		<p>robocopy /J ?</p>
<p>From usage:</p>
<p>/J :: copy using unbuffered I/O (recommended for large files).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-odd thread-alt depth-1" id="comment-1111113">
				<div id="div-comment-1111113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1111113">
			March 7, 2014 at 9:00 am</a>		</div>

		<p>Ah, great. Another instance of storage hardware manufacturers atrocious behavior: Not honoring specs, using a different size for kilobyte/megabyte/gigabyte/etc. and lying to the OS. I wish there was a happy ending to all this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1111133">
				<div id="div-comment-1111133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1111133">
			March 7, 2014 at 10:12 am</a>		</div>

		<p>I think I&#39;ve used at least one of those flags before when I needed to know that the write had completed. Windows mobile writing to an sd card, writes go awol if the unit suspends before the write hit the sd card because the os briefly forgets the card was there when it wakes up. Most of the I/O was on a background thread, so fast wasn&#39;t a huge deal. Not helped by compact framework not being able to give you any idea that the previous write failed.</p>
<p>I&#39;d probably suggest they leave well alone. You would be better off telling them you can make their car go faster by removing the brakes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1111033">
				<div id="div-comment-1111033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1111033">
			March 7, 2014 at 2:44 am</a>		</div>

		<p>I&#39;m unclear as to what &quot;write&quot; means in this context.</p>
<p>If you preallocate the file, you could use overlapped I/O, although I don&#39;t know whether this makes the call to WriteFile faster or not*. Alternatively you could map the file into memory, eliminating the call to WriteFile altogether, thus reducing the time taking to call WriteFile by 100%!</p>
<p>If they&#39;re referring to the physical write of the blocks to disk, then bypassing the cache would presumably reduce the time it takes to get the bits on the disk. In the pathological worst case, the OS doesn&#39;t have any standby memory available and has to swap something anyway.</p>
<p>*Separately for each combination of the flags discussed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1111153">
				<div id="div-comment-1111153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1111153">
			March 7, 2014 at 12:03 pm</a>		</div>

		<p>@Kirchner: Ah, that&#39;s good to know. Thanks for sharing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1111203">
				<div id="div-comment-1111203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1111203">
			March 8, 2014 at 2:37 am</a>		</div>

		<p>Your &quot;lying&quot; drive firmware may of course be provided by your VMM host, which may have UI options to let the end-user decide how much dishonesty is required.</p>
<p>Windows *may* be running on the bare metal and talking to honest hardware/firmware, or it may not. These days, it quite frequently isn&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1111263">
				<div id="div-comment-1111263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1111263">
			March 10, 2014 at 2:12 am</a>		</div>

		<p>How does &quot;Enable write caching on the disk&quot; and &quot;enable advanced performance&quot; integrate with FILE_FLAG_NO_BUFFERING and FILE_FLAG_WRITE_THROUGH?</p>
<p><a rel="nofollow" target="_new" href="http://www.windowsreference.com/wp-content/uploads/2009/01/disk-write-cache2.png">http://www.windowsreference.com/&#8230;/disk-write-cache2.png</a></p>
<p>(using an OS which supports the options of course)</p>
<p>Can we have a table to explain all combinations?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1111273">
				<div id="div-comment-1111273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1111273">
			March 10, 2014 at 4:28 am</a>		</div>

		<p>For us who still depend on Windows 7, robocopy got the /J switch starting with Windows 8, but good old xcopy has it even in Windows 7:</p>
<p>C:&gt;xcopy /?</p>
<p>&#8230;</p>
<p> &nbsp;/J &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Copies using unbuffered I/O. Recommended for very large files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1111533">
				<div id="div-comment-1111533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Grier [MSFT]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140306-00/?p=1583#comment-1111533">
			March 10, 2014 at 3:45 pm</a>		</div>

		<p>Copying files without /J will evict possibly very interesting pages from the cache (aka the standby list).</p>
<p>Copying small files with /J is slower than normal copies.</p>
<p>This is am ongoing hard problem. &nbsp;CPUs have the same cache dilution/poisoning issue with memcpy() implementations leading to cached and uncached memory move instructions but that doesn&#39;t necessarily help the middleware coder. &nbsp;You probably know at the top of the stack if you&#39;re copying 1kb or 1tb but it&#39;s hard to have things in the middle guess the superior policy. &nbsp;(Copies are particularly bad since you can end up with both the source and destination in the cache if you&#39;re not careful. &nbsp;You *may* use one of them soon after so it *may* be useful but it&#39;s extremely unlikely you need both.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>