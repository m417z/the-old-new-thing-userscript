<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1344785">
				<div id="div-comment-1344785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>Gee Law</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1344785">
			June 7, 2018 at 7:29 am</a>		</div>

		<p>The semantics for <code>p-&gt;C::~C()</code> and <code>p-&gt;~C()</code> are different, even if <code>decltype(p)</code> is <code>C *</code>. The former bypasses virtual destructor invocation, which is the same syntax for accessing unambiguous base class member (bypass name shadowing and virtual table look-up).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1345335">
				<div id="div-comment-1345335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chunsheng Pei</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1345335">
			June 8, 2018 at 1:38 pm</a>		</div>

		<p>I verified that p-&gt;C::~C() is semantically equal to p-&gt;~() (gcc 4.8.0). Both calls the virtual dctor of the base class.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1345655">
				<div id="div-comment-1345655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>Gee Law</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1345655">
			June 10, 2018 at 6:37 pm</a>		</div>

		<p>Did you mean <code>p-&gt;~C()</code> by <code>p-&gt;~()</code>? I don&#8217;t have g++ 4.8.0 at hand but I just tried the two (<code>C::~C</code> and <code>~C</code>) again on g++ 6.3.0-1 (mingw) and MSVC++ 19.14.26429.4. For <code>C::~C</code>, both called the implementation in the declared type (instead of the runtime type). Actually, &#8220;the virtual dtor of the base class&#8221; confuses me. If a function is virtual, it is no longer &#8220;<strong>the</strong> function of <strong>a</strong> class&#8221;, and that&#8217;s why it&#8217;s virtual. I interpreted your phrase as &#8220;the implementation of the virtual dtor in the base class&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1344795">
				<div id="div-comment-1344795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1344795">
			June 7, 2018 at 7:29 am</a>		</div>

		<p>Important to note, the old syntax is more than just &#8220;obsolete&#8221;, it&#8217;s explicitly excluded by recent (and not-so-recent) C++ language standards.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1344805">
				<div id="div-comment-1344805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://rfog.es' rel='external nofollow' class='url'>rfog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1344805">
			June 7, 2018 at 7:30 am</a>		</div>

		<p>And why not? That is what the compiler does when you use new/delete operators. ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1344835">
				<div id="div-comment-1344835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AberAber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1344835">
			June 7, 2018 at 7:49 am</a>		</div>

		<p>For my knowledge, when would you ever use this malloc/constructor thing syntax instead of?  The difference I can see is that perhaps you can explicitly call deconstructor, instead of using scope?<br />
C* p = new C();</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude even depth-2 parent" id="comment-1344855">
				<div id="div-comment-1344855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1344855">
			June 7, 2018 at 8:35 am</a>		</div>

		<p>Short answer: Containers, if you&#8217;re allocating a contiguous buffer you might use placement syntax if you absolutely hate allocators for some reason (some people have a pathological hatred for them for inexplicable reasons).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1344895">
				<div id="div-comment-1344895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1344895">
			June 7, 2018 at 10:47 am</a>		</div>

		<p>&#8230; or you&#8217;re writing an allocator.  Placement new is how the allocator has to create the object in the buffer it has allocated.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1344865">
				<div id="div-comment-1344865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1344865">
			June 7, 2018 at 8:42 am</a>		</div>

		<p>Placement new is used if you have a block of memory that can hold a C, but it wasn&#8217;t created by the other C++ object construction mechanisms. For instance, let&#8217;s say for whatever reason you have to use CoTaskMemAlloc() and CoTaskMemFree() for some memory, and you want that memory to hold a C++ class. You can thus say</p>
<p>C *p = (C *) CoTaskMemAlloc(sizeof (C));<br />
new (p) C(constructor parameters);</p>
<p>and then you can safely use p as if it was allocated by the new operator itself. I use CoTaskMemAlloc() specifically because I imagine there are some situations when you need to allocate a COM object on the COM heap. If your object is a C++ class, then the above code is what you would be using to return your COM object. However, I have not yet written enough COM to know if this is actually what people do in the real world. This is just the most realistic general-purpose example I can come up with (everything else I can think of right now would be contrived).</p>
<p>And yes, you do need to explicitly call the constructor/use placement new, because if any field in your class is itself a class, that class will ned ot be constructed too, and your class&#8217;s constructor will, directly or indirectly, take care of that for you.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1345375">
				<div id="div-comment-1345375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1345375">
			June 8, 2018 at 3:41 pm</a>		</div>

		<p>The cast there is harmful.  A pointer to the object is gotten from the result of the `new` operator, and has type `C*`.   The pointer handed to the new operator, conversely, is merely raw storage, so the most appropriate type is `void*`.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1344885">
				<div id="div-comment-1344885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://aloiskraus.wordpress.com/' rel='external nofollow' class='url'>Alois Kraus</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1344885">
			June 7, 2018 at 10:45 am</a>		</div>

		<p>One good usage of this is for a tracing system where the ctor is omitted when tracing is off. Since the dtor can check via a global flag if tracing was enabled it will not trigger anything bad when the object is destroyed. This only works if you have only basic and pointer members. Otherwise the dtor of the members will crash you anyway. Many years ago this was a worthwile performance optimization for a C++ tracing framework.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1344905">
				<div id="div-comment-1344905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1344905">
			June 7, 2018 at 10:50 am</a>		</div>

		<p>Is it just me, or does anyone else find the old syntax for explicitly invoking the constructor more obvious than the new?  I particularly like the way it mirrors explicit delete.  </p>
<p>(This is the first time I remember seeing the old syntax, and I have been using C++ since 1994.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1344985">
				<div id="div-comment-1344985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://rfog.es' rel='external nofollow' class='url'>rfog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1344985">
			June 8, 2018 at 7:31 am</a>		</div>

		<p>… and then, one day, you receive a phone call after typed the malloc line and forgot to type the call to constructor&#8230; and you get a very beautiful app crash. ;-)</p>
<p>Not only use new, but use auto-pointers.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1344925">
				<div id="div-comment-1344925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1344925">
			June 7, 2018 at 1:20 pm</a>		</div>

		<p>Don&#8217;t you still need to manually call constructors for union members? I must be rusty, because I thought that was the way to do it.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1344935">
				<div id="div-comment-1344935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1344935">
			June 7, 2018 at 3:55 pm</a>		</div>

		<p>You call placement new on the union&#8217;s data member.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1345215">
				<div id="div-comment-1345215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lazarenko.me' rel='external nofollow' class='url'>Vlad</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1345215">
			June 8, 2018 at 11:41 am</a>		</div>

		<p>std::destory_at(p) is much better than writing down the type manually as in p-&gt;~TYPE_OF_P_IF_YOU_GET_IT_RIGT()</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1345235">
				<div id="div-comment-1345235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">exim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1345235">
			June 8, 2018 at 12:07 pm</a>		</div>

		<p>There is `new` operator variant (standard) that doesn&#8217;t call the constructor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1345365">
				<div id="div-comment-1345365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1345365">
			June 8, 2018 at 2:06 pm</a>		</div>

		(The content was deleted per user request)
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1345595">
				<div id="div-comment-1345595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180607-00/?p=98935#comment-1345595">
			June 10, 2018 at 10:45 am</a>		</div>

		<p>Please remove this from VS++. ASAP.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>