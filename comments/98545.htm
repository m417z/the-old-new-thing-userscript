<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1 parent" id="comment-1333515">
				<div id="div-comment-1333515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180418-00/?p=98545#comment-1333515">
			April 18, 2018 at 7:58 am</a>		</div>

		<p>Interesting that the function prologue reserves space for calling further functions (not the first time I see it, MinGW also appears to pre-reserve like this; calling __stdcall Win32 functions needed a SUB SP, xx after each call to preserve it). </p>
<p>On MIPS, does it also happen for leaf functions, or is it optimized out?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1333525">
				<div id="div-comment-1333525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Clarkstone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180418-00/?p=98545#comment-1333525">
			April 18, 2018 at 8:39 am</a>		</div>

		<p>Reserving the stack space at startup and not moving the stack pointer afterwards makes function unwinding easier.</p>
<p>I bet it makes speculative execution more effective too as all local variables and (spilled) temporary values in expressions are constant offsets from a register that isn&#8217;t written to (the stack pointer) therefore the CPU can predict the addresses being accessed as soon as it has executed the function prologue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1333585">
				<div id="div-comment-1333585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180418-00/?p=98545#comment-1333585">
			April 18, 2018 at 9:33 am</a>		</div>

		<p>Leaf functions don&#8217;t need to reserve space for outbound parameters. Lightweight leaf functions aren&#8217;t even allowed to move the stack pointer!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1333565">
				<div id="div-comment-1333565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180418-00/?p=98545#comment-1333565">
			April 18, 2018 at 8:50 am</a>		</div>

		<p>&#8220;Notice that the adjustment of the stack pointer happens as the very last thing, even after the return instruction! That&#8217;s because it sits in the branch delay slot, so it executes even though the branch is taken.&#8221;</p>
<p>Clever. Saves a wasted NOP in the branch-delay slot of every function, back in a time when conserving memory was much more important.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>