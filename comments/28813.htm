<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (67)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-449673">
				<div id="div-comment-449673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449673">
			December 6, 2006 at 10:11 am</a>		</div>

		<p>&quot;Digital files cannot be made uncopyable, any more than water can be made not wet.&quot;</p>
<p><a rel="nofollow" target="_new" href="http://www.schneier.com/crypto-gram-0105.html#3" rel="nofollow">http://www.schneier.com/crypto-gram-0105.html#3</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-449683">
				<div id="div-comment-449683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TKW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449683">
			December 6, 2006 at 10:17 am</a>		</div>

		<p>&#8220;Once the bytes come off the disk, the file system has no control any more over what the user does with them.&#8221;</p>
<p>Surely you could say almost the same thing about executing a program, yet the &#8220;Traverse Folder / Execute File&#8221; ACE exists.</p>
<div class="post">[<i>That&#8217;s right. If you you wrote your own program loader, you can write one that ignores the Execute File permission. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-449703">
				<div id="div-comment-449703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449703">
			December 6, 2006 at 10:25 am</a>		</div>

		<p>&#8220;Once the bytes come off the disk, the file system has no control any more over what the user does with them.&#8221;</p>
<p>Yes, but clearly we should make international laws that prohibit copying and then set a bit on the file that sends a message to the local government or its authorized deputies (MPAA, RIAA) any time the file is read. It just takes a slight enhancement to the current DRM.</p>
<div class="post">[<i>Sigh. I was hoping against hope that this wouldn&#8217;t devolve into a flamewar about DRM. Took less than an hour. Okay, I&#8217;m letting everybody know: Any further comments to this post on the subject of DRM will be deleted. This is not a political blog. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-449723">
				<div id="div-comment-449723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DavidE</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449723">
			December 6, 2006 at 10:32 am</a>		</div>

		<p>There may be solutions to the actual problem, such as rendering the image to an image and allowing the user to read that image. At least that would prevent &quot;casual copying&quot;, which is often an acceptable solution.</p>
<p>The real problem in this case is that the question assumes too much. The person attempting to solve the problem has made the leap to &quot;ACLs are the solution&quot;. This is a common mistake made by many people. I&#8217;ve often received bug reports where the person writing the report tried to give a solution rather than clearly outlining the problem so that the people working on the product could decide on a solution that worked within the product design.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-449733">
				<div id="div-comment-449733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449733">
			December 6, 2006 at 10:34 am</a>		</div>

		<p>&quot;If you you wrote your own program loader, you can write one that ignores the Execute File permission.&quot;</p>
<p>You don&#8217;t even need to do that; again you can just copy the bytes of the file to a new file, mark the new file &#8211; your private copy &#8211; as executable, and presto!</p>
<p>But that&#8217;s what execute-but-not-read (&#8211;x) permissions are for. Even your own program loader won&#8217;t be able to do execute the file then as it can&#8217;t read the file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-449743">
				<div id="div-comment-449743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DavidE</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449743">
			December 6, 2006 at 10:39 am</a>		</div>

		<p>The DRM rants make the assumption that the person is trying to prevent the copying for the purposes of IP protection. This may not be the case. There are situations where you just don&#8217;t want people making copies of stuff because of workflow design. There are some users who need protection from themselves.</p>
<p>Of course, then there&#8217;s the opposite situation. I recently downloaded a PDF of an application form that wasn&#8217;t a PDF form. I had to print it out, fill it out, and then wait 5 minutes while the person at the office typed all of my information into their computer. Ah, technology&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-449763">
				<div id="div-comment-449763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.broadheath.com' rel='external nofollow' class='url'>Frank Wilhoit</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449763">
			December 6, 2006 at 10:46 am</a>		</div>

		<p>&quot;Dave&quot; was being sarcastic but what he says is what is going to happen, no matter what ghastly technological backflips will be needed to make it possible.</p>
<p>It is interesting, though, as well as a deep obstacle to generic analysis of security requirements, that different operating systems can have incommensurable notions of what the most primitive rights on a resource should be. &nbsp;One old system that I worked with (DEC TOPS-10) had separate rights for writing a file and deleting it. &nbsp;You could have write access to a file but not be able to delete it. &nbsp;The delete right was actually called rename because file deletion was implemented as a special case of renaming. &nbsp;It was done by changing the file name in the directory on disk to all NULs, which in turn triggered a background thread to reclaim the storage. &nbsp;I am sure that someone has wished over the years that some newer system would allow files to be writable but not deletable, or other unexpected permutations of &quot;basic rights&quot;, which turn out to be not so basic after all but semantically richer than we thought.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-449813">
				<div id="div-comment-449813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449813">
			December 6, 2006 at 11:28 am</a>		</div>

		<p>I guess the marketing/sales answer to that question is a link to &quot;Windows Rights Management Services&quot; (<a rel="nofollow" target="_new" href="http://www.microsoft.com/windowsserver2003/technologies/rightsmgmt/default.mspx" rel="nofollow">http://www.microsoft.com/windowsserver2003/technologies/rightsmgmt/default.mspx</a>) :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-449843">
				<div id="div-comment-449843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449843">
			December 6, 2006 at 11:33 am</a>		</div>

		<p>Frank &#8211; that&#8217;s pretty much how Unix-type systems work, including Linux.</p>
<p>Writing to a file involves modifying the actual file. Removing a file involves modifying the directory that &quot;contains&quot; the file. So you need write permissions on a file to overwrite it or truncate it, but write permissions on the directory to delete it.</p>
<p>(It&#8217;s a bit more complicated than that as files aren&#8217;t really &quot;contained&quot; in directories, they just have links from zero or more directories and maintain a link count. When the link count reaches zero, the OS reclaims the disk space used by the file. Note links from <em>zero</em> or more directories, as opening a file also increases its link count, so a file can exist in zero directories if it is open somewhere. Google around for more info&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-449853">
				<div id="div-comment-449853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.hunterstrat.com/news/' rel='external nofollow' class='url'>David Hunter</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449853">
			December 6, 2006 at 11:41 am</a>		</div>

		<p>As long as you are performing a public service, you could try explaining this to the habitues on Second Life that are grumpy because &#8220;Copybot&#8221; is replicating their digital creations.</p>
<div class=post>[<i>They use NTFS ACLs in Second Life? From what you describe, it appears that their complaint is ethical not technological. -Raymond</i></div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-449863">
				<div id="div-comment-449863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449863">
			December 6, 2006 at 12:07 pm</a>		</div>

		<p>I&#8217;m allways affraid that a client gets angry in cases like this, complaining of going &quot;technical&quot;.</p>
<p>That we should just keep it understandable and &quot;do it&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-449873">
				<div id="div-comment-449873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449873">
			December 6, 2006 at 12:12 pm</a>		</div>

		<p>Actually I could really do with permissions so that users can write new files into a folder, but not edit or delete existing ones. This enables us to keep an archive of projects and versioned documents, removing the possibility that someone could accidentally or maliciously delete or move those files.</p>
<p>Our workaround at present is to have a single user which has permissions to write to those folders, and no other users. You then have to connect to the share as that user &#8211; which basically means logging on as that user, which I normally do by connecting remotely to a different box &#8211; in order to write to the archive. This has the obvious problem that the account&#8217;s password has to be known by everyone who should have permission to write. I&#8217;m thinking of writing a program to automatically change that account&#8217;s password on the same schedule as any other user has to.</p>
<p>Maybe I should be looking at SharePoint.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-449883">
				<div id="div-comment-449883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Risto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449883">
			December 6, 2006 at 12:31 pm</a>		</div>

		<p>At the risk of being off topic &#8230; one thing I don&#8217;t understand is that using NTFS-based permissions, a user gets different ACL&#8217;s based on whether they move or copy a file. Move keeps the permissions. Copy inherits the destination folder&#8217;s permissions. Confusing for normal users.</p>
<div class=post>[<i>If &#8220;copy&#8221; preserved permissions you could use it to circumvent quotas. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman odd alt thread-odd thread-alt depth-1" id="comment-449893">
				<div id="div-comment-449893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449893">
			December 6, 2006 at 12:34 pm</a>		</div>

		<p>Mike, you can do that &#8211; grant them create file access to the directory. &nbsp;The handle granted to the creator of an object has full control over the object, so they can open the file, write data to it and then close the file and they won&#8217;t be able to modify it after it was closed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman even thread-even depth-1" id="comment-449903">
				<div id="div-comment-449903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449903">
			December 6, 2006 at 12:36 pm</a>		</div>

		<p>James, that&#8217;s because copy is &quot;open source file+create destination file+read/write data from source to destination+close source/destination&quot;.</p>
<p>So copy&#8217;s semantics are to create a new file, but rename&#8217;s semantics are to move the file (including it&#8217;s ACLs). &nbsp;Rename&#8217;s semantics could be &quot;Copy+Delete&quot;, but that&#8217;s not the way it was defined.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-449933">
				<div id="div-comment-449933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kokorozashi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449933">
			December 6, 2006 at 1:00 pm</a>		</div>

		<p>It seems the original question does describe a legitimate desire. The questioner is just looking to the wrong part of the system to provide it. She might be happy if there were a way to tell Explorer not to copy a file. Anyone with half a lick of expertise would be able to circumvent that, but if the goal is to prevent the clueless from shooting themselves in the foot, as opposed to DRM, this might help.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-449953">
				<div id="div-comment-449953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reinder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449953">
			December 6, 2006 at 1:16 pm</a>		</div>

		<p>A managed environment such as a JVM or .Net could have a separate kind of &quot;unwritable memory&quot;, similar to &#8216;tainting&#8217; in Perl, and restrict use of data in that memory to &#8216;safe&#8217; calls such as drawing text to the screen.</p>
<p>The OS then could have a &quot;no copying&quot; flag on files that limits file reading to instances of that VM using &#8216;tainted&#8217; calls. Writing a useful implementation of this that does not have security holes may be a bit of a problem, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-449983">
				<div id="div-comment-449983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">microbe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449983">
			December 6, 2006 at 1:31 pm</a>		</div>

		<p>: Actually I could really do with permissions so that users can write new files into a folder, but not edit or delete existing ones.</p>
<p>This can be done on standard Unix/Linux systems, more or less, with the &quot;sticky&quot; bit on the directory:</p>
<ol>
<li>
<p>Any user can create new files</p>
</li>
<li>
<p>Any user can edit/delete his own files</p>
</li>
<li>
<p>Non-root users cannot edit/delete files owned by others</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450043">
				<div id="div-comment-450043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Archangel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450043">
			December 6, 2006 at 2:30 pm</a>		</div>

		<p>I can sort of vaguely see where someone might think they want to implement read-but-not-copy, but it&#8217;s obviously got so many flaws it&#8217;s never going to work. 99% of users would just open the file, then find it&#8217;s read only and get a &quot;Save As&quot; prompt, and save it elsewhere.</p>
<p>Of course, the genius of the people that come up with these things is that they don&#8217;t see things like that&#8230;</p>
<p>Adam:</p>
<p>&quot;Digital files cannot be made uncopyable, any more than water can be made not wet.&quot;</p>
<p>How about <a href="http://www.buydehydratedwater.com?" rel="nofollow">http://www.buydehydratedwater.com?</a> ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-450053">
				<div id="div-comment-450053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darrell Wright</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450053">
			December 6, 2006 at 2:50 pm</a>		</div>

		<p>Novell had a flag like this. &nbsp;You could read a file but not copy it via the standard copy command.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450073">
				<div id="div-comment-450073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anony Moose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450073">
			December 6, 2006 at 3:03 pm</a>		</div>

		<p>Banning the &quot;standard&quot; copy program is pointless if someone can use other applications to read it into RAM then write the bytes out to another file.</p>
<p>For example, in UNIX, &quot;cat filename &gt; newfilename&quot; would be a copy that doesn&#8217;t use the &quot;normal&quot; copy utility.</p>
<p>I&#8217;m sure that you could do something similar with Novell. Security though hoping the users are completely ignorant? &nbsp;Heh, that&#8217;s cute.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-450113">
				<div id="div-comment-450113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/sw/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450113">
			December 6, 2006 at 3:38 pm</a>		</div>

		<p>Dafter still, a certain server product offered &quot;execute only&quot; permissions; of course, the server has no way of knowing whether a client is requesting the file&#8217;s contents in order to &quot;execute&quot; the contents or to &quot;read&quot;, other than taking the client&#8217;s word for it. (Even without actually modifying the client, KB157279 explains how to modify the &quot;HKEY_LOCAL_MACHI&quot;(sic) registry hive to stop this flag being honored.)</p>
<p>You get some fun discussions on this topic; one guy tried to prevent file copying (while allowing execution over the network) by removing Read permission, and was told this is a limitation of FAT32&#8217;s file permissions&#8230; <a rel="nofollow" target="_new" href="http://lists.ufl.edu/cgi-bin/wa?A2=ind0206&amp;L=ccc&amp;T=0&amp;F=&amp;S=&amp;P=9519" rel="nofollow">http://lists.ufl.edu/cgi-bin/wa?A2=ind0206&#038;L=ccc&#038;T=0&#038;F=&#038;S=&#038;P=9519</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450123">
				<div id="div-comment-450123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450123">
			December 6, 2006 at 4:24 pm</a>		</div>

		<p>Raymond: From a purely academic standpoint (as it doesn&#8217;t really exist anyway), how does preserving permissions on copy circumvent quotas?</p>
<div class=post>[<i>Find a file owned by another user &#8220;X&#8221;. Copy it. If permissions were preserved, the copy would be owned by X and therefore would be charged against X&#8217;s quota. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-450133">
				<div id="div-comment-450133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450133">
			December 6, 2006 at 4:40 pm</a>		</div>

		<p>If you don&#8217;t want people to copy data out of a secured area, you could set the ACLs so secure programs can&#8217;t write out of that area.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450143">
				<div id="div-comment-450143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450143">
			December 6, 2006 at 5:11 pm</a>		</div>

		<p>microbe: minor issue, but:</p>
<blockquote>
<ol>
<li>Non-root users cannot edit/delete files owned by others</li>
</ol>
</blockquote>
<p>Unless they own the directory. &nbsp;;-)</p>
<p>Almost all world-writable-but-sticky directories are owned by root, so this doesn&#8217;t usually come up, but it is something that&#8217;s checked. &nbsp;The users that can remove files in a sticky directory are: &nbsp;(1) root, (2) the directory&#8217;s owner, and (3) the file&#8217;s owner.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-450153">
				<div id="div-comment-450153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450153">
			December 6, 2006 at 5:40 pm</a>		</div>

		<p>Raymond, you&#8217;re confusing security descriptors with ACLs. The SD on a file contains the owner, the ACL, and other stuff. You could copy a file&#8217;s data and its ACL without copying its owner or the other stuff in the SD.</p>
<p>In fact, it&#8217;s not possible to copy the SD unless you have the Restore Privilege.</p>
<p>The other stuff in the SD is the group the object belongs to (for POSIX compatibility), the audit list and any mandatory integrity level (SACL).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450163">
				<div id="div-comment-450163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rod Widdowson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450163">
			December 6, 2006 at 6:19 pm</a>		</div>

		<p>The flipside of this is that there is no IRP_MJ_CUT_AND_PASTE, much to the distress of many FS filter develeopers&#8217; managers</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-450213">
				<div id="div-comment-450213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Philip Taylor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450213">
			December 6, 2006 at 8:17 pm</a>		</div>

		<p>Somewhat related to what Reinder suggested, Compartmented Mode Workstations are one technology that does let users read but not copy data from files, to a certain extent &#8211; there&#8217;s an example at <a rel="nofollow" target="_new" href="http://www.ornl.gov/~jar/cmw4me.pdf" rel="nofollow">http://www.ornl.gov/~jar/cmw4me.pdf</a> of a windowing system where different title-bar colours represent different security levels, and data can&#8217;t be copied down to a lower security level.</p>
<p>System V/MLS also had a windowing system with &quot;mandatory-policy mediated and audited &#8216;cut and paste&#8217;&quot;, as in <a rel="nofollow" target="_new" href="http://www.acsac.org/waepssd/papers/01-flink.pdf" rel="nofollow">http://www.acsac.org/waepssd/papers/01-flink.pdf</a> . But that document tries to explain why the idea never took off despite being technically &#8216;brilliant&#8217; (at least based on the designer&#8217;s description of it) &#8211; users don&#8217;t want that type of security.</p>
<p>Sometimes they don&#8217;t have a choice, like in military situations where confidentiality is critical and the system designers don&#8217;t want users (or trojans) to ever send top secret satellite photos as attachments over public email. But otherwise it seems that, while some people may want to restrict others (e.g. by distributing uncopyable files) and agree with the general security principles, they won&#8217;t accept the systems which are able to support that &#8211; they would have to suffer from the same restrictions themselves, and the inherent complexity and reduction in ease-of-use is such that a simpler, less secure (at a technical level), more usable system will fit their needs better. Or at least that&#8217;s the impression I get.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450223">
				<div id="div-comment-450223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450223">
			December 6, 2006 at 8:20 pm</a>		</div>

		<p>[Find a file owned by another user &#8220;X&#8221;. Copy it. If permissions were preserved, the copy would be owned by X and therefore would be charged against X&#8217;s quota. -Raymond]</p>
<p>I guess it&#8217;s the unix in me, but permissions are generally distinct from ownership.</p>
<div class=post>[<i>True, ownership is different from permissions, but it&#8217;s all part of the security descriptor. At any rate, it would be weird if you made a copy of a file and didn&#8217;t have permission to modify or delete the copy! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-450233">
				<div id="div-comment-450233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.blogspot.com/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450233">
			December 6, 2006 at 8:29 pm</a>		</div>

		<p>Actually there is a way to implement No Copy ACL.</p>
<p>I admit it might not be practical and it could surely be circumvented like any other protection but majority of users would not be able to do it.</p>
<p>First, it would be trivial to patch system CopyFile()/MoveFile() APIs so that they honor &#8220;No Copy&#8221; ACL.</p>
<p>Reading a file using ReadFile() API into memory should flag a memory pointer as a &#8220;No Copy&#8221;. Attempt to call WriteFile() API using such pointer could then fail.</p>
<p>I am not sure about MMIO though.</p>
<div class=post>[<i>Watch my m4d h4cking skilz: </p>
<pre>DWORD dw;
BYTE b;
while (ReadFile(h, &amp;b, 1, &amp;dw, NULL)) {
  BYTE b2 = b; // s00prl33t! change the pointer!
 WriteFile(h, &amp;b2, 1, &amp;dw, NULL);
}
</pre>
<p>-Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450253">
				<div id="div-comment-450253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.blogspot.com/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450253">
			December 6, 2006 at 8:59 pm</a>		</div>

		<p>Raymond said:</p>
<p>&quot;Watch my m4d h4cking skilz&quot;</p>
<p>Hahahah, that was funny :)</p>
<p>Obviously that would need some serious hardware support too.</p>
<p>You could perhaps keep a hash for each &quot;No Copy&quot; file a process opens for reading and check a hash for each new file closed by the same process before commiting it to the permanent storage.</p>
<p>While we are at it, is there any way to get a directory change notification in Windows when a process closes a file? I couldn&#8217;t find anything on the subject and you seem like the right hax0r to ask ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-449923">
				<div id="div-comment-449923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jade Philosopher</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-449923">
			December 6, 2006 at 12:59 pm</a>		</div>

		<p>Yup. The issue here is a leaky (and, to some users, invisible) abstraction. To paraphrase Hayakawa, the name of the the permission is not the permission.</p>
<p>The names of the permissions seem to correspond to common user actions &#8211; reading a file, writing a file, deleting a file. Copying a file should &quot;logically&quot; be in that list. The permissions would more accurately be described as &quot;Put these bits* onto the wires&quot;, &quot;Alter these bits&quot;, &quot;Alter those bits over there that point at these bits&quot;, respectively. Copying would then be &quot;Put these bits onto the wires, read your mind, and alter some bits somewhere else in the world.&quot;</p>
<p>*Perhaps instead of &quot;bits&quot; I should be saying magnetic domains? On second thought, no, unless the file system is implemented on the read/write head of the hard drive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450263">
				<div id="div-comment-450263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.blogspot.com/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450263">
			December 6, 2006 at 9:03 pm</a>		</div>

		<p>Oh and you could also forbid each process that opens a file marked as &quot;No Copy&quot; to use any WriteXxx() API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-450293">
				<div id="div-comment-450293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450293">
			December 6, 2006 at 9:42 pm</a>		</div>

		<p>Igor: and the clipboard, DDE, sockets, printf, and so on until all you&#8217;re allowed to do is this:</p>
<p>__asm { NOP }</p>
<p>Save this one for the phillosphers, kids.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450323">
				<div id="div-comment-450323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450323">
			December 6, 2006 at 10:54 pm</a>		</div>

		<p>[quote]</p>
<p>For local files though, the kernel knows whether a file is being opened for reading or for executing as opening for reading comes through &quot;open()&quot; or similar, while executing comes through &quot;exec()&quot; or similar.</p>
<p>[/quote]</p>
<p>So&#8230; What if a debugger steps in?</p>
<p>I think any debugger that &quot;analyse&quot; codes are &quot;reading&quot; that executable area. And the &quot;minidump&quot; program that drops memory image when program crashes are actually &quot;copying&quot; that memory to the disk. Invention of such feature would prevent those programs doing their job properly.</p>
<p>Any &quot;secret&quot; way to let those program pass will eventally let everyone bypass the protection.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-450343">
				<div id="div-comment-450343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450343">
			December 7, 2006 at 2:22 am</a>		</div>

		<blockquote><p>
  &gt;Watch my m4d h4cking skilz:
</p></blockquote>
<p>Raymond for the win. &nbsp;Thanks Raymond, this was quite an interesting topic, and I had to comment that I cracked up when I read that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450363">
				<div id="div-comment-450363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phylyp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450363">
			December 7, 2006 at 3:10 am</a>		</div>

		<blockquote><p>
  &gt;Watch my m4d h4cking skilz:
</p></blockquote>
<p>Awesome!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-450243">
				<div id="div-comment-450243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450243">
			December 6, 2006 at 8:29 pm</a>		</div>

		<p>James &#8211; of course, for network filesystems, read/execute is pretty blurry. For local files though, the kernel knows whether a file is being opened for reading or for executing as opening for reading comes through &quot;open()&quot; or similar, while executing comes through &quot;exec()&quot; or similar.</p>
<p>(Sorry, I know this is a Win32 blog, but I don&#8217;t know the equivalent &quot;nt*&quot; API calls off the top of my head.)</p>
<p>In the local case, the kernel *can* tell the difference and execute a file without allowing a user to read it. (assuming the filesystem can make the distinction, of course)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450393">
				<div id="div-comment-450393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.robertmoir.com' rel='external nofollow' class='url'>Robert Moir</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450393">
			December 7, 2006 at 4:45 am</a>		</div>

		<p>Yeah someone asked me how to do this a while ago&#8230;</p>
<p>My reply:</p>
<p><a rel="nofollow" target="_new" href="http://www.robertmoir.co.uk/images/Paranoid.jpg" rel="nofollow">http://www.robertmoir.co.uk/images/Paranoid.jpg</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-450403">
				<div id="div-comment-450403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450403">
			December 7, 2006 at 7:30 am</a>		</div>

		<p>Cheong &gt; Most of those kind of problems have been solved for suid programs &#8211; just don&#8217;t let the user do it.</p>
<p>A debugger would not be able to read the code pages (or probably any memory) of the executable. The minidump program, which I assume runs as a local administrator (or the part of the kernel that writes core files in the case of Unix) would make the dump file have the same owner as the original executable, without global read access.</p>
<p>So you can&#8217;t debug every process on your system. That&#8217;s the case anyway.</p>
<p>&quot;Any &quot;secret&quot; way to let those program pass will eventally let everyone bypass the protection.&quot;</p>
<p>Are you saying that suid root programs cannot be secure? That&#8217;s an &#8230; unusual claim.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450423">
				<div id="div-comment-450423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">s00prl33t</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450423">
			December 7, 2006 at 9:18 am</a>		</div>

		<blockquote><p>
  &gt; You could perhaps keep a hash for each &quot;No Copy&quot; file a process opens for reading and check a hash for each new file closed by the same process before commiting it to the permanent storage.
</p></blockquote>
<p>DWORD dw;</p>
<p>BYTE b;</p>
<p>while (ReadFile(h, &amp;b, 1, &amp;dw, NULL)) {</p>
<p>&nbsp;BYTE b2 = ~b; // s00prl33t! change the pointer and not!</p>
<p>WriteFile(h, &amp;b2, 1, &amp;dw, NULL);</p>
<p>}</p>
<p>Just run it two times.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-450463">
				<div id="div-comment-450463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450463">
			December 7, 2006 at 10:03 am</a>		</div>

		<p>Raymond, I would ask you to put more &quot;superleet&quot; comments around, but then I realized that the rarity of the event is part of what made it so funny. &nbsp;King&#8217;s to you, my man.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450543">
				<div id="div-comment-450543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phill W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450543">
			December 7, 2006 at 10:47 am</a>		</div>

		<blockquote><p>
  DWORD dw;
</p></blockquote>
<p>></p>
<blockquote><p>
  BYTE b;
</p></blockquote>
<p>></p>
<blockquote><p>
  while (ReadFile(h, &amp;b, 1, &amp;dw, NULL)) {
</p></blockquote>
<p>></p>
<blockquote><p>
  BYTE b2 = ~b; // s00prl33t! change the &gt;pointer and not!
</p></blockquote>
<p>></p>
<blockquote><p>
  WriteFile(h, &amp;b2, 1, &amp;dw, NULL);
</p></blockquote>
<p>></p>
<blockquote><p>
  }
</p></blockquote>
<p>></p>
<blockquote><p>
  Just run it two times.
</p></blockquote>
<p>That is an interesting one to track and something that I&#8217;ve actually been thinking about how to solve for tracing execution in an emulator. I believe someone did actually succeed on an Atari 2600 emulator a while back.</p>
<p>However it would also be something that you wouldn&#8217;t want to do in real time unless you had hardware support in the processor and ram. Something that I&#8217;m sure will eventually happen.</p>
<p>Phill W</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-450383">
				<div id="div-comment-450383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/sw/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450383">
			December 7, 2006 at 3:58 am</a>		</div>

		<p>(Sorry, I know this is a Win32 blog, but I don&#8217;t know the equivalent &quot;nt*&quot; API calls off the top of my head.)</p>
<p>That&#8217;s OK &#8211; the Native API (the Nt*/Zw* calls you mention) aren&#8217;t Win32 anyway. FWIW, the open/exec equivalents (which use counted Unicode strings, which can contain embedded nulls and be case sensitive) are NtCreateFile and NtCreateProcess respectively; the Win32 functions &#8211; which, on NT derivatives, act as wrappers around the Nt* calls &#8211; are OpenFile and CreateProcess, with an A or W suffix for string type.</p>
<p>On the subject of restricted environments where you &quot;can&#8217;t&quot; copy: apparently Cisco use something like that to keep the IOS source under lock and key.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-451173">
				<div id="div-comment-451173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.blogspot.com/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451173">
			December 7, 2006 at 7:45 pm</a>		</div>

		<p>You guys are not fair, you should thank me for inspiring Raymond to write such l33t Win32 code :)</p>
<p>&gt;Just run it two times</p>
<p>Yes I know that is possible, as well as simple compression but it is not something Average Joe would be able to do easily.</p>
<p>I also said that you would most likely need hardware support. Consider this scenario:</p>
<p>If the CPU could mark the pages in memory as &#8220;No Copy&#8221;, then any attempt to write out a byte read from such a page would result in say 0xC0000005 (Access Violation exception) UNLESS you write it into another &#8220;No Copy&#8221; page.</p>
<p>So if you want to decode WMA file you could open file with &#8220;No Copy&#8221; ACL, read it into an allocated memory region marked as &#8220;No Copy&#8221; (say VirtualAlloc() with PAGE_READWRITE | PAGE_NOCOPY), and then decode it into audio buffer provided by audio subsystem which has the same page attribute (PAGE_NOCOPY).</p>
<p>Now tell me how would you copy that WMA file?</p>
<p>Sure some hax0r could use another OS which doesn&#8217;t support such protection in hardware but if the file has proprietary and strong encryption for which the source is not available then I really don&#8217;t see any alternative to re-recording it to WAV on playback which of course reduces quality.</p>
<div class=post>[<i>How would you design a CPU that could detect that the 0x42 you&#8217;re about to write out originally came from a &#8220;No Copy&#8221; page? And once you&#8217;ve designed that, how do you deal with context switches? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-451193">
				<div id="div-comment-451193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.blogspot.com/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451193">
			December 7, 2006 at 8:01 pm</a>		</div>

		<p>&#8220;How would you design a CPU that could detect that the 0x42 you&#8217;re about to write out originally came from a &#8220;No Copy&#8221; page?&#8221;</p>
<p>Because that 0x42 comes from the cache line which also has a &#8220;No Copy&#8221; bit and it is loaded in a shadow register which can write only to another &#8220;No Copy&#8221; cache line and page?</p>
<p>Raymond says:</p>
<p>&#8220;And once you&#8217;ve designed that, how do you deal with context switches?&#8221;</p>
<p>Can you be more specific? How do you see them as a problem?</p>
<div class=post>[<i>You load the 0x42 into the <code>al</code> register. An exception is raised. Now you have to save the registers into a <code>CONTEXT</code> structure on the stac&#8230; oh wait, the stack isn&#8217;t No-Copy. And even if you get this fixed, it seems that the only thing you can do with No-Copy data is store it to another No-Copy page. You can&#8217;t display it to the screen, you can&#8217;t use it in a computation&#8230; what value is data you can&#8217;t use? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-450613">
				<div id="div-comment-450613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.werkema.com' rel='external nofollow' class='url'>Sean W.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-450613">
			December 7, 2006 at 12:10 pm</a>		</div>

		<p>&gt; Watch my m4d h4cking skilz:</p>
<p>*laugh* &nbsp;Raymond, if you&#8217;re ever in southeast Pennsylvania, look me up: &nbsp;I owe ya a free beer for that one :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-451213">
				<div id="div-comment-451213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.blogspot.com/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451213">
			December 7, 2006 at 8:26 pm</a>		</div>

		<p>Raymond says:</p>
<p>&#8220;You load the 0x42 into the al register. An exception is raised. Now you have to save the registers into a CONTEXT structure on the stac&#8230; oh wait, the stack isn&#8217;t No-Copy.&#8221;</p>
<p>Why wouldn&#8217;t it be, you don&#8217;t write stacks out into a file or do you?</p>
<p>Raymond says:</p>
<p>&#8220;it seems that the only thing you can do with No-Copy data is store it to another No-Copy page.&#8221;</p>
<p>Well not quite. You could perform any transformations you want on that data, compression/decompression, encryption/decryption, effects processing, whatever.</p>
<p>&#8220;You can&#8217;t display it to the screen, you can&#8217;t use it in a computation&#8230;&#8221;</p>
<p>Sure you can.</p>
<p>Hardware would allow you to write out &#8220;No Copy&#8221; data to a PCI/PCI-Express/USB/Firewire device which has video or audio class but <em>not</em> to a storage class device.</p>
<p>Of course, someone determined enough could just reprogram an EEPROM on the PCI IDE/SATA controller to fake it as audio or video card and write their own custom driver for that but Average Joe would not be able to buy or download such a hack.</p>
<p>You just need to have the secure path for the data all the way.</p>
<div class=post>[<i>My s00perl33t loop wrote the stack to a file. After I perform computations on No-Copy data, can I store it to non-No-Copy memory? If so, then my computation is going to be &#8220;x = x + 2 &#8211; 2&#8221;. There, I&#8217;ve removed the No-Copy shadow bit from the value and can now write it to a file. If you say that the result of a No-Copy computation is also No-Copy and can only be sent directly to a video display, then this throws a wrench in nearly all decompression algorithms. (Besides, how does the CPU know whether a write to the address 0x1234 is going to a video device or a storage device? Are you also going to disable bus mastering?) Maybe with enough work you can get it to work, in which case I congratulate you on your PhD thesis. But this is not the place to develop your thesis. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-451253">
				<div id="div-comment-451253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mirobin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451253">
			December 7, 2006 at 9:44 pm</a>		</div>

		<p>What if any process reading a &quot;no-copy&quot; file was not allowed to open any sort of writable &nbsp;handle for the lifetime of the process? &nbsp;This would include preventing access to shared global member, transferring the data via com, etc.</p>
<p>Previously opened writable handles would be invalidated; alternatively, some sort of &quot;nocopy compliant&quot; bit could be set in the binary which causes all writeable handle creations to fail.</p>
<p>Not that I can think of many useful programs that can be written with such constraints (maybe a viewer app), but &#8230;</p>
<p>Disclaimer: &nbsp;this comment is a thought excercise; I am not proposing that something like this should be implemented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-451273">
				<div id="div-comment-451273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451273">
			December 8, 2006 at 3:41 am</a>		</div>

		<p>[quote user=Adam]</p>
<p>Are you saying that suid root programs cannot be secure? That&#8217;s an &#8230; unusual claim.</p>
<p>[/quote]</p>
<p>No, I&#8217;m not saying that.</p>
<p>What I say is, the program that people will use to circumvent your &quot;copy protection of executable part of memory&quot; is most likely to be run in root/administrator or even localsystem if it needs to be, so the suid thing do not offer any protection to that. (unless one day microsoft announce that nobody can &nbsp;login as administrator and run anything as administrator, but that&#8217;s very unlikely, if not impossible)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-451283">
				<div id="div-comment-451283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451283">
			December 8, 2006 at 3:56 am</a>		</div>

		<p>mirobin: This may work, but what if the user of your application want to save &quot;option&quot; settings?</p>
<p>And you should also prevent other process from reading the viewer process in order to make this work, but than you&#8217;re going to hit the problem about minidump and debugger I previously stated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-451293">
				<div id="div-comment-451293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451293">
			December 8, 2006 at 4:01 am</a>		</div>

		<p>Actually when I think deeper, any &quot;no read&quot; memory must not be marked as &quot;executable&quot; at all.</p>
<p>While you can write your viewer as &quot;no read&quot;, any virus writer and also write their virus as &quot;no read&quot; to circumvent virus scanners protection. (The pattern matching is also a &quot;read&quot; action)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-451323">
				<div id="div-comment-451323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451323">
			December 8, 2006 at 4:19 am</a>		</div>

		<p>Cheong &gt; Yeah, but if the attacker can run the debugger (or other arbitrary program) <em>as an Administrator</em>, you&#8217;ve already lost!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-451343">
				<div id="div-comment-451343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451343">
			December 8, 2006 at 5:12 am</a>		</div>

		<p>[quote]</p>
<p>eah, but if the attacker can run the debugger (or other arbitrary program) <em>as an Administrator</em>, you&#8217;ve already lost!</p>
<p>[/quote]</p>
<p>Oops, it seems I&#8217;ve mixed your arguments with others.</p>
<p>It&#8217;s true for your case.(For protecting things like business programs from copying out, because you have control on the machine the programs are running) But for others about using this to protect contents of viewers, the program used to circumvent the protection is likely to run as administrator so it&#8217;s no use.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-451433">
				<div id="div-comment-451433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451433">
			December 8, 2006 at 8:45 am</a>		</div>

		<p>Ah. Yeah, mixing up peoples points on non-threaded discussions happens a bit to me too! :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-451453">
				<div id="div-comment-451453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.philihp.com/' rel='external nofollow' class='url'>Philihp Busby</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451453">
			December 8, 2006 at 9:10 am</a>		</div>

		<p>There&#8217;s this certain directory on a unix mainframe at work that I find myself running into permissions issues. Certain things will only work when I&#8217;m the owner of this or that file&#8230; There&#8217;s probably a reason for this.</p>
<p>For some reason, I&#8217;m not allowed to chown someone else&#8217;s file and assume ownership, but I have read and delete access to it, and am allowed to create new files in the directory.</p>
<p>New files owned by me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-451573">
				<div id="div-comment-451573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451573">
			December 8, 2006 at 11:09 am</a>		</div>

		<p>Larry Osterman wrote:</p>
<blockquote><p>
  Mike, you can do that &#8211; grant them create file access to the directory. &nbsp;The handle granted to the creator of an object has full control over the object, so they can open the file, write data to it and then close the file and they won&#8217;t be able to modify it after it was closed.
</p></blockquote>
<p>Apparently Novell discovered the hard way that some apps created a file to check that it had permission to create files, then reopened the file to put data in it, so they had to alter their create protection to include overwriting zero-length files.</p>
<p>Cheong wrote:</p>
<blockquote><p>
  So&#8230; What if a debugger steps in?
</p></blockquote>
<p>The debugger only sees the fixed up image in memory, so you would have to work out where e.g. the indirect jump tables are to translate them back into relocations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-451473">
				<div id="div-comment-451473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/sw/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451473">
			December 8, 2006 at 9:57 am</a>		</div>

		<p>PB: Probably a &#8216;sticky&#8217; (+t) directory?</p>
<p>On Unix, &#8216;deleting a file&#8217; is actually an operation on the *directory* (you delete the *name*, rather than the file itself, then the file disappears once it has no name and nobody&#8217;s using it any more). Editing files and changing their ownership or permissions, however, is an operation on the file itself: if it isn&#8217;t yours, you might not be allowed to do something. So, you can have read access (because the file owner says so) and delete access (because the directory owner says so) but not anything else (it&#8217;s not your file).</p>
<p>Windows is rather different in this respect. There&#8217;s a quick search tool (for NTFS filesystems only) on my homepage (linked from my name) which takes advantage of this to find files more quickly than most approaches &#8211; this wouldn&#8217;t work on Unix. At some point, I&#8217;ll probably write a page explaining this&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-451753">
				<div id="div-comment-451753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.blogspot.com/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451753">
			December 8, 2006 at 7:07 pm</a>		</div>

		<p>Raymond said:</p>
<p>&quot;After I perform computations on No-Copy data, can I store it to non-No-Copy memory?&quot;</p>
<p>You can&#8217;t. You can perform any transformation but you can only put the result into &quot;No Copy&quot; page again.</p>
<p>Raymond said:</p>
<p>&quot;If you say that the result of a No-Copy computation is also No-Copy and can only be sent directly to a video display, then this throws a wrench in nearly all decompression algorithms.&quot;</p>
<p>How is that so? You can still alocate more &quot;No Copy&quot; output pages than you had them on input.</p>
<p>Raymond says:</p>
<p>&quot;Besides, how does the CPU know whether a write to the address 0x1234 is going to a video device or a storage device?&quot;</p>
<p>Well, CPU could simply attempt the write and PCI/USB/Firewire/whatever bus could then just reject the write cycle if it sees wrong device class on the other side.</p>
<p>Raymond says?</p>
<p>&quot;Are you also going to disable bus mastering?&quot;</p>
<p>Of course I wouldn&#8217;t. Same principle as the above mentioned could apply to DMA controller as well.</p>
<p>&quot;Maybe with enough work you can get it to work, in which case I congratulate you on your PhD thesis. But this is not the place to develop your thesis.&quot;</p>
<p>I am not doing any thesis on the subject because I am already past the university age (34) and personally I would never want to see anything like that implemented.</p>
<p>I just said that it <em>is</em> possible and you ridiculed me because I didn&#8217;t explain myself very well. I agree that this is not the place but I had to defend myself.</p>
<p>I apologize if I sounded like a mad scientist because when it comes to formal education I only have a high-school degree &#8212; I am a self-taught ASM/C/C++/GPGPU programmer with a part-time job in medical imaging which involves code optimization and solid hardware knowledge.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-451843">
				<div id="div-comment-451843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mirobin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451843">
			December 8, 2006 at 10:44 pm</a>		</div>

		<p>Cheong,</p>
<p>re: settings</p>
<p>I would expect your app would have to launch a separate process that would be responsible for managing settings. &nbsp;This is not terribly dissimilar to how Vista requires devs to split &quot;admin&quot; logic from &quot;limited user&quot; logic for a good LUA experience.</p>
<p>re: minidumps</p>
<p>Additional permissions are required to perform those operations; if you&#8217;re able to perform a minidump on an arbitrary process, you&#8217;re also able to take ownership of the file and remove the nocopy bit in the first place, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-451923">
				<div id="div-comment-451923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LongHairSteve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-451923">
			December 10, 2006 at 12:44 am</a>		</div>

		<p>Many times I see Raymond making a comment that he &#8216;can not believe that he had to say this&#8217;; which I always consider right on funny as heck.</p>
<p>Now, I can not believe I have to comment on this subject, because it should never have happened in the first place.</p>
<p>Raymond answered the why not question with three sentences. &nbsp;One would do, maybe more sentences would better clarify what we are talking about. &nbsp;But, absolutely his three are more than sufficient, and covers the essientials.</p>
<p>Folks, you have read and write controls over YOUR files only. &nbsp;If you agree to let another user on the same computer or another computer over the internet read your file, then your control does not extend into their computer files. &nbsp;This is the same as writing a book. &nbsp;Once published then anyone can hand copy and machine copy what was written for their own use. &nbsp;Intellectual property rights of words in a book are protected from</p>
<p>someone copying your work and reusing, especially, making profit from you work. Not protected against someone hand-coping or machine-copying your book for their own files of study of your book which they now own.</p>
<p>Now, some people claim their is a way to extend the control to my computer, and other claim you would need a PhD to make this happen. &nbsp;And to top it off some claimed that it would take a highly qualified computer expert like themselves (of course) to circumvent this control. &nbsp;People if you allow me to put up your file on my screen, dude, I can easily pick up my digital camera and take a picture of MY SCREEN!</p>
<p>Giving up read control of your file is sending a copy to my screen&#8230;and I be damned if you have any father rights to say what I do on what is displayed on my screen and my computer. &nbsp;You still control me from going into YOUR FILE and changing it. &nbsp;But if I want to refile my copy which you allowed me to read, then I will. &nbsp;Like a book, though, take me to court if I should republish your work as if it were my own.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-452003">
				<div id="div-comment-452003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">enstiven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-452003">
			December 10, 2006 at 7:23 pm</a>		</div>

		<p>I really miss the option to specify an alternative owner for a user so that files created by the user is owned by someone else. I think you can do this in *ux.</p>
<p>Often you only want someone to be able to createcopy files to a location without them being able to accesschange them afterwards. In Windows this is impossible:-(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-452243">
				<div id="div-comment-452243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LongHairSteve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-452243">
			December 11, 2006 at 9:38 pm</a>		</div>

		<p>Thanks, enstiven, for bringing up the unix aspect, as I forgot to cover that one. &nbsp;First, read and write is basic way computers operate, and not dependent on whether it is a Unix or Windows operating system.</p>
<p>If UNIX did prevent people from making copies after they allowed another computer to access their file; THEN NONE IN THE WORLD WOULD EVER WANT A UNIX COMPUTER! &nbsp;Because that would be a severe limit on the power of another computer, &nbsp;kind anti-thematic to the whole idea that computers can make working with documents better than pen and paper.</p>
<p>Realize, even though this concept of extended copy control does not exist, that there are ways to protect your Intellectual Property and make it available to others. &nbsp;Adobe creates and captures a market by giving away free document software readers, and making a profit off of people who then want to also have write and creation Adobe PDF software. &nbsp;Microsoft creates a market advantage by including a feature in their operating system that is clipboard program which makes copying files which your computer is allowed to read.</p>
<p>Get the idea &#8212; with your files you DO have complete read/write control, and the option to give read control without giving up write control so that other people can make use of your shared file but can NOT change your file. &nbsp;It is basic, you have NO right to give up read control with a stipulation which limits the customer&#8217;s computer power. &nbsp;Kind of like trying to tell someone that you can not fly to the moon because your propeller will not work in space!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-452713">
				<div id="div-comment-452713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-452713">
			December 12, 2006 at 9:36 pm</a>		</div>

		<p>The comparison with paper reminds me of an incident a few weeks ago. &nbsp;I downloaded a PDF document and could print all except the first page, but trying to print the first page resulted in an obscure error message. &nbsp;After a while I noticed that the first page had something resembling a letterhead. &nbsp;There was nothing secret about the first page, and the provider makes the same thing available on paper as they do on their web site, but just because the thing looked like a letterhead maybe that was why the printer or driver rejected it. &nbsp;This is a multifunction printer whose firmware probably rejects attempts to copy paper money too (though I didn&#8217;t test it ^_^).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-452823">
				<div id="div-comment-452823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ema</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-452823">
			December 13, 2006 at 11:14 am</a>		</div>

		<p>The bad thing (or ironic) I read here is discussion about this.</p>
<p>Should be obvious that if you can move any bit in RAM you can do what you want with it. Magic of computer science?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-453043">
				<div id="div-comment-453043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-453043">
			December 14, 2006 at 2:56 am</a>		</div>

		<blockquote><p>
  I don&#8217;t see what this has to do with file</p>
<p>  permissions.
</p></blockquote>
<p>True. &nbsp;I think more than half the comments on this entry, starting with the very first comment, discuss reading and copying but neglected the connection with file permissions. &nbsp;Sorry that I got caught up in it yet again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-452993">
				<div id="div-comment-452993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061206-00/?p=28813#comment-452993">
			December 13, 2006 at 8:21 pm</a>		</div>

		<p>Just in time, this morning&#8217;s newspaper reports that the author of<br />
Winny was found guilty. &nbsp;The judge said that the guy posted the<br />
program publicly on his web site.</p>
<p>The judge forgot to say[*] how Winny was copied from the<br />
programmer&#8217;s web site to users&#8217; computers. &nbsp;Users were surely<br />
running Windows APIs, mostly from Internet Explorer but conceivably<br />
sometimes from Firefox or others. &nbsp;It&#8217;s not completely obvious<br />
whether the server was running Windows APIs from Internet Information<br />
Server, Windows APIs from Apache, Linux APIs from Apache, etc.<br />
&nbsp;Anyway, a lot more than Winny&#8217;s programmer participated in<br />
producing copying operations that provided the possibility of making<br />
illegal copies.</p>
<p>So why weren&#8217;t all the programmers of the rest of those tools also<br />
found guilty? &nbsp;Oh yeah, because they weren&#8217;t prosecuted. &nbsp;OK<br />
then, why weren&#8217;t they prosecuted? &nbsp;The answer was posted a few<br />
days ago in a different thread.</p>
<p>[* or maybe the newspaper forgot to report the judge saying it, but I kind of don&#8217;t think so.]</p>
<div class="post">[<i>I don&#8217;t see what this has to do with file<br />
permissions. If you want to editorialize on recent events, you can do<br />
it on your own blog. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>