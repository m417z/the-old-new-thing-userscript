<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1103583">
				<div id="div-comment-1103583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103583">
			January 30, 2014 at 7:35 am</a>		</div>

		<p>This indeed makes no sense at all. He notices that large event IDs crash his program and assumes that the IDs are the cause and not just the trigger.</p>
<p>He never bothered to check that his code doesn&#39;t work even in the case where it doesn&#39;t crash. It compiles, it runs, perfect.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1103593">
				<div id="div-comment-1103593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103593">
			January 30, 2014 at 7:40 am</a>		</div>

		<p>#define INVALID_PROCESSID ASFW_ANY if you need such a thing, otherwise treat it as a 32bit number, how hard can it be? ;)</p>
<p>Why did WinAPI usermode thread/process id&#39;s stay 32 bit when the kernel changed their version to &quot;size_t&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1103603">
				<div id="div-comment-1103603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103603">
			January 30, 2014 at 7:59 am</a>		</div>

		<p>@skSndW: For backwards compatibility, I&#39;d wager. &nbsp;How do you possibly change a function like GetCurrentProcessId() from returning a 32-bit value to returning a 64-bit value without breaking binary compatibility with existing programs? &nbsp;And of course source compatibility, too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1103623">
				<div id="div-comment-1103623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103623">
			January 30, 2014 at 8:50 am</a>		</div>

		<p>And can you imagine using task manager with 64-bit numbers in there?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1103633">
				<div id="div-comment-1103633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103633">
			January 30, 2014 at 9:16 am</a>		</div>

		<p>I always try to be charitable when reading Raymond&#39;s blog. &nbsp;I think to myself, &quot;surely, the poor, beleagered customer was just missing some key piece of information that lead him astray.&quot; &nbsp;But sometimes, I just can&#39;t help thinking, &quot;How do these people even have a job?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1103653">
				<div id="div-comment-1103653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Farnsworth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103653">
			January 30, 2014 at 9:47 am</a>		</div>

		<p>The only charitable interpretation I can come up with for this customer&#39;s confusion is that the customer&#39;s original request is unclear (whether that&#39;s customer or customer liaison on the route to Raymond is up for debate); possibly they meant &quot;I&#39;m seeing process IDs greater than 64,000; I was under the impression that process IDs cannot exceed 64,000, and would like help determining whether these large PIDs are a sign of a bug in my code, or if I need to handle them&quot;.</p>
<p>I can see how a customer who assumed that PIDs can&#39;t be greater than 64,000 would come up with the original problem statement.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1103663">
				<div id="div-comment-1103663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103663">
			January 30, 2014 at 9:55 am</a>		</div>

		<p>@Adam Rosenfield: I was talking about 64 bit processes, wow64 would still be 32 bit of course.</p>
<p>It would prevent 32 bit processes calling OpenProcess on high PID&#39;s but the kernel guys made the change and since usermode did not the only way passed 4 billion threads now is a new NT subsystem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-odd thread-alt depth-1" id="comment-1103673">
				<div id="div-comment-1103673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103673">
			January 30, 2014 at 9:58 am</a>		</div>

		<p>LOL!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1103683">
				<div id="div-comment-1103683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103683">
			January 30, 2014 at 10:19 am</a>		</div>

		<p>Well if the NT team were to assert that ProcessId is always &lt; 64000, they would know they were looking for a memory corruption bug.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1103693">
				<div id="div-comment-1103693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103693">
			January 30, 2014 at 10:40 am</a>		</div>

		<p>My question is, how did the customer get the false assumption that process IDs can&#39;t be higher than 64,000? &nbsp;Have they not seen a busy system? &nbsp;In my work, I tend not to make assumptions about OS objects like process identifiers. &nbsp;I start a process, it gets a numerical ID from the OS; when I query for the ID, I just make sure that it fits into the data type that I throw it into. &nbsp;None of this &quot;must be less than an arbitrary limit&quot; or &quot;must be divisible by 2 / 4/ whatever&quot; foolishness. &nbsp;I&#39;ve seen several long-running Windows systems that have processes with IDs in the 6 decimal digit range.</p>
<p>Pre-emptive snarky comment: &quot;long-running Windows system&quot; is what, 3 days? &nbsp;Pre-emptive answer: hardly. &nbsp;My Windows 7 clients regularly stay up for more than a month, and would be running longer were it not for IT-mandated updates. &nbsp;And Windows NT4 and 2000? &nbsp;Embedded systems running those OSs have run for years.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1103703">
				<div id="div-comment-1103703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103703">
			January 30, 2014 at 11:06 am</a>		</div>

		<p>@skSdnW: So was I. &nbsp;Imagine I compile a 64-bit program and ship it off to the world. &nbsp;That program calls GetCurrentProcessId or OpenProcess, passing 32-bit values back and forth with kernel32.dll. &nbsp;It works great on existing Windows versions.</p>
<p>Now imagine that Windows 9 comes out. &nbsp;How could Windows 9&#39;s version of kernel32.dll possibly return a 64-bit value to my program? &nbsp;The only way would to do so be to introduce a new API (say, GetCurrentProcessId64() or GetCurrentProcessIdEx() etc.) and deprecate the old API; but the old API would need to stick around for old programs which aren&#39;t getting recompiled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1103713">
				<div id="div-comment-1103713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103713">
			January 30, 2014 at 11:28 am</a>		</div>

		<p>@Adam Rosenfield: The ship has already sailed which is why I said that we need a new usermode subsystem to move past 32 bit.</p>
<p>My question is, why was GetCurrentProcessId not changed when everything else in the WinAPI moved to INT/LONG/DWORD_PTR during porting to IA64. And if 32 bit is enough for everybody, why is the kernels CLIENT_ID struct not 32 bit as well?</p>
<div class="post">[<em>How would you marshal a 64-bit process ID to a 32-bit process? Process IDs are global, so they are meaningful to pass between processes. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1103733">
				<div id="div-comment-1103733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103733">
			January 30, 2014 at 11:35 am</a>		</div>

		<p>&gt;My Windows 7 clients regularly stay up for more than a month</p>
<p>I see you&#39;re not using MS security suite, which is causing memory leak in the kernel. Though even without it, there is CONFIGMGR memory leak.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1103753">
				<div id="div-comment-1103753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103753">
			January 30, 2014 at 12:22 pm</a>		</div>

		<p>@Raymond: Yes, that is a problem. WOW64 is not perfect and a 32bit application on a 64 bit host is never going to be as good as a native app if we are talking task mangers/debugging tools etc but in general, how much of a problem would it be? If CreateProcess in a 32bit app makes sure the PID fits in 32 bits that would probably take care of most issues.</p>
<p>If they are global across all NT subsystems then why did CLIENT_ID have to grow? Kernel only worker threads would be the only possible thing that could ever have such a high TID.</p>
<div class="post">[<em>You often need to communicate with an application you didn&#39;t yourself launch. It may have been launched indirectly via DCOM, or you may have done a FindWindow to find it, or you might be doing UI automation. (And I don&#39;t know why CLIENT_ID grew, since it didn&#39;t need to. My guess is that for the same reason <a href="http://blogs.msdn.com/b/oldnewthing/archive/2008/02/28/7925962.aspx">process IDs are a multiple of 4</a>.) -Raymond]</em></div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1103763">
				<div id="div-comment-1103763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103763">
			January 30, 2014 at 12:22 pm</a>		</div>

		<p>@alegr1: no, I&#39;m not using MS&#39; security suite. &nbsp;I&#39;m using IT&#39;s mandated security suite from another vendor. &nbsp;I use these machines (Win7 32- and 64-bit boxes, one each) daily for work and only have to reboot for required Windows updates.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx odd alt thread-odd thread-alt depth-1" id="comment-1103783">
				<div id="div-comment-1103783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103783">
			January 30, 2014 at 12:52 pm</a>		</div>

		<p>The programmer might have been used to Unix or Linux systems where the PID is normally limited to 32,768.</p>
<p>This was also for backward compatibility when programs assumed PIDs would all fit into signed 16-bit integers. These days it can be changed to be much larger.</p>
<p>It might be interesting to find out how Windows managed the transition from 16-bit PIDs to 32-bit. And why wouldn&#39;t the same method work to migrate to a 64-bit value?</p>
<div class="post">[<em>The transition was trivial because 16-bit Windows didn&#39;t have PIDs. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1103813">
				<div id="div-comment-1103813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103813">
			January 30, 2014 at 2:14 pm</a>		</div>

		<p>[The transition was trivial because 16-bit Windows didn&#39;t have PIDs. -Raymond]</p>
<p>getpid() returns SOMETHING. (And yes it really is called getpid. Look in the 16 bit C library.) I always thought it was the segment address of the PSP or something stupid like that.</p>
<div class="post">[<em>getpid is not part of the 16-bit Windows API. It&#39;s something invented by the C runtime folks to mimic unix. I have no clue what they used. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1103833">
				<div id="div-comment-1103833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">perhaps it's a documentation issue</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103833">
			January 30, 2014 at 4:21 pm</a>		</div>

		<p>To be fair to the customer, it doesn&#39;t look like EventLog.WriteEntry() actually makes use of the message table resource as far as I can tell, looking at the same documentations the customer probably looked at:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/e29k5ebc(v=vs.110).aspx">msdn.microsoft.com/&#8230;/e29k5ebc(v=vs.110).aspx</a></p>
<p><a rel="nofollow" target="_new" href="http://support.microsoft.com/kb/307024">support.microsoft.com/&#8230;/307024</a></p>
<p>Seems like this method just writes the string directly; it looks like it is actually EventLog.WriteEvent() that uses the message table, if I understand the documentation correctly. &nbsp;Therefore I can see how a customer may mistakenly just think the eventId is just an arbitrary value they can use any way they like, since essentially the documentation available doesn&#39;t really seem to provide any evidence otherwise.</p>
<p>That doesn&#39;t excuse the customer since the documentation clearly points out the supported range of eventId values and the resulting exception type, and it doesn&#39;t take too many brain cells to realize the solution of putting the process ID into the string instead of shoehorning it into eventId. &nbsp;(But even then, I can see the customer may have authored existing tools for processing event log entries for which such a change would be a breaking change they would like to avoid if possible, hence the odd question.)</p>
<p>Bottom line: okay yes it is a very strange question, but now I looked at it more carefully, maybe the customer isn&#39;t quite as stupid as it seems? &nbsp;[And then I see they asked about 64000 rather than 65535 or 65536 and I lose my respect again ;p]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1103843">
				<div id="div-comment-1103843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Boyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103843">
			January 30, 2014 at 9:32 pm</a>		</div>

		<p>&quot;Is broccoli supposed to be white? Because I have some white broccoli here.&quot;</p>
<p>&quot;Uh, no. That&#39;s cauliflower.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1103863">
				<div id="div-comment-1103863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Engywuck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103863">
			January 31, 2014 at 2:04 am</a>		</div>

		<p>[And then I see they asked about 64000 rather than 65535 or 65536 and I lose my respect again ;p] &#8212; well, perhaps the customer asked about &quot;64k&quot; and the support person changed it to 64000? ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1103893">
				<div id="div-comment-1103893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The_Assimilator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103893">
			January 31, 2014 at 4:14 am</a>		</div>

		<p>Although the person who asked the question is obviously clueless, this problem wouldn&#39;t exist at all if the EventLog.WriteEntry() method&#39;s parameters were defined correctly. Currently the eventId parameter is defined as an Int32, but the documentation says that the method will throw an ArgumentException if &quot;eventID is less than zero or greater than UInt16.MaxValue&quot;. Well guess what data type is guaranteed to be between 0 and 65535&#8230; you guessed it, UInt16. So why is eventId a UInt16 and not an Int32?</p>
<p>Yes, I know there&#39;s the old &quot;unsigned types aren&#39;t CLS-compliant because some CLR languages don&#39;t support unsigned types&quot; but that&#39;s always been a stupid rule. Why not simply declare the affending languages non-CLS-compliant instead of foisting their cruft on everyone else?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1103913">
				<div id="div-comment-1103913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103913">
			January 31, 2014 at 4:40 am</a>		</div>

		<p>@perhaps it&#39;s a documentation issue</p>
<p>Well that helps explain why they thought the code works at all. Because they sent a specific string, the ID wasn&#39;t needed to lookup an event in the table. In the event viewer, the user can see the message and the event ID, so all the information the customer wanted does show up in the event viewer. Of course, it&#39;s showing up in completely the wrong way, and the end-user won&#39;t be able to do things like filter on the event ID to find all instances of a specific type of error, but it does get the error message and the process ID in the log.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1103943">
				<div id="div-comment-1103943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Elliott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1103943">
			January 31, 2014 at 7:18 am</a>		</div>

		<p>getpid() in 16-bit Windows is a wrapper for GetCurrentTask() (exported from KERNEL.EXE).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-1104643">
				<div id="div-comment-1104643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1104643">
			February 5, 2014 at 7:24 am</a>		</div>

		<p>@The_Assimilator: The 1.x versions of Visual Basic .NET did not handle non-CLS-compliant types (specifically, they couldn&#39;t handle unsigned types, except for Byte, and didn&#39;t support signed 8-bit values). EventLog.WriteEntry dates back to .NET 1.0, and presumably uses Int32 for that parameter so that Visual Basic could call it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1104853">
				<div id="div-comment-1104853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The_Assimilator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140130-00/?p=1923#comment-1104853">
			February 6, 2014 at 12:41 am</a>		</div>

		<p>@Mike Dimmick: As I said, I know all of the original reasons for this. But the fact is that it&#39;s 2014 and the CLI specification (ECMA-335) STILL classifies unsigned types as non-CLS-compliant is farcical. Granted this would be a breaking change, .NET 1.0 is not even supported by Microsoft anymore, so it&#39;s effectively frozen &#8211; hence it would be easy to make this change in the newer versions of the framework, because the old versions would remain unaffected.</p>
<p>As for EventLog.WriteEntry() &#8211; there&#39;s no reason an overload that takes a UInt16 can&#39;t be created for future .NET versions, and the current version marked as [Obsolete]. Then new code will pass in UInt16, current code that passes in UInt16 will work, and current code that passes in Int32 will still work but will get a compiler warning.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>