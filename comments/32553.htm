<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (52)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-340133">
				<div id="div-comment-340133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340133">
			January 24, 2006 at 10:47 am</a>		</div>

		<p>Polling doesn&#8217;t kill performance. People kill performance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340143">
				<div id="div-comment-340143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jwf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340143">
			January 24, 2006 at 10:51 am</a>		</div>

		<p>Take regmon for a spin and watch explorer.exe itself apparently poll tons of network tcp/ip related registry settings every few seconds on an &quot;idle&quot; XP SP2 laptop.</p>
<p>I assume this has something to do with either the firewall or wifi? Seems pretty lame on the performance front.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-angryrichard even thread-even depth-1" id="comment-340183">
				<div id="div-comment-340183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AngryRichard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340183">
			January 24, 2006 at 11:15 am</a>		</div>

		<p>Even better is the &quot;poll then screen update&quot; trick &lt;cough&gt;Taskman&lt;/cough&gt;&lt;cough&gt;Process Explorer&lt;/cough&gt;</p>
<p>I once had TS pegging an entire CPU on a quad proc because Taskman was running on the server&#8217;s desktop.  That&#8217;s frugal cycle management!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340193">
				<div id="div-comment-340193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.johntopley.com/' rel='external nofollow' class='url'>John Topley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340193">
			January 24, 2006 at 11:17 am</a>		</div>

		<p>Does the Taskbar clock get updated using polling?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340203">
				<div id="div-comment-340203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340203">
			January 24, 2006 at 11:29 am</a>		</div>

		<p>So what is the alternative?</p>
<p>Especially where waiting for data to turn up in a database is concerned?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-340223">
				<div id="div-comment-340223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340223">
			January 24, 2006 at 11:38 am</a>		</div>

		<p>Use a notification-based mechanism, of course.</p>
<p>I already discussed how the clock updates. <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2003/08/29/54728.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2003/08/29/54728.aspx</a> Observe that it is based on notifications not polling.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-340233">
				<div id="div-comment-340233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340233">
			January 24, 2006 at 11:46 am</a>		</div>

		<p>jwf: Mark Russinovich noticed this in April last year: <a rel="nofollow" target="_new" href="http://www.sysinternals.com/blog/2005/04/explorers-registry-polling.html" rel="nofollow">http://www.sysinternals.com/blog/2005/04/explorers-registry-polling.html</a>. It appears to be caused by the Network Connection icon(s).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340303">
				<div id="div-comment-340303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Allen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340303">
			January 24, 2006 at 1:09 pm</a>		</div>

		<p>If there were a way for the database to send a message to a program, a lot of problems would go away.</p>
<p>My data processor service wouldn&#8217;t have to constantly poll the database for new jobs. </p>
<p>My database-driven web sites could caching.</p>
<p>Ok, so there is only two problems. But they are both huge.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340313">
				<div id="div-comment-340313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340313">
			January 24, 2006 at 1:13 pm</a>		</div>

		<p>Is there another technique other than employing an extended stored procedure, in the case of SQL Server, to make a remote call to a process to notifiy it of updates? And, if there are potentially multiple processes interested in those updates?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340333">
				<div id="div-comment-340333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340333">
			January 24, 2006 at 1:57 pm</a>		</div>

		<p>I actually discovered some sample code in the MSDN help that used polling in demonstrating how to use a non-blocking API!</p>
<p>I&#8217;ll have to wait until I get home before I can dig up the URL, though&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340363">
				<div id="div-comment-340363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sebastian Redl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340363">
			January 24, 2006 at 2:45 pm</a>		</div>

		<p>Jim, you could write update/insert triggers that create some system-wide notification. I believe it is possible, on Windows, to register a window message that is then usable in all processes, and broadcast this message to the entire system.<br />
<br />If not, can&#8217;t event objects be allocated system-wide? And can&#8217;t you release all threads waiting on such an object at once? (Note the race condition here, though.)<br />
<br />As a last resort, you could make an RPC to an update server, which then distributes the notification to all registered applications. That solves the multiple application problem, but at the expense of more coding from you. (It&#8217;s a reusable mechanism, though.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340373">
				<div id="div-comment-340373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Randolpho</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340373">
			January 24, 2006 at 2:54 pm</a>		</div>

		<p>Jonathan wrote:<br />
<br />&quot;Polling doesn&#8217;t kill performance. People kill performance.&quot;</p>
<p>Sledghammer has this to say:</p>
<p>&quot;No, Bullets kill performance.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340393">
				<div id="div-comment-340393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mr. Ed</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340393">
			January 24, 2006 at 3:08 pm</a>		</div>

		<p>A whole 3MB?  Unless you get Terminal Server running on a Gameboy, how can this be a problem?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340403">
				<div id="div-comment-340403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew Feldstein</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340403">
			January 24, 2006 at 3:31 pm</a>		</div>

		<p>Sebastian, how does the update server learn when to broadcast the systemwide message?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340413">
				<div id="div-comment-340413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jad</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340413">
			January 24, 2006 at 3:37 pm</a>		</div>

		<blockquote><p>
  A whole 3MB? Unless you get<br />
  <br />&gt; Terminal Server running on a<br />
  <br />&gt; Gameboy, how can this be a<br />
  <br />&gt; problem? </p>
<p>With all due respect, that reasoning is why file servers with 4GB of RAM are now &quot;standard&quot;.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340433">
				<div id="div-comment-340433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340433">
			January 24, 2006 at 4:15 pm</a>		</div>

		<blockquote><p>
  &gt; A whole 3MB? Unless you get<br />
  <br />&gt;&gt; Terminal Server running on a<br />
  <br />&gt;&gt; Gameboy, how can this be a<br />
  <br />&gt;&gt; problem? </p>
<p>&gt;With all due respect, that reasoning is why<br />
  <br />&gt;file servers with 4GB of RAM are<br />
  <br />&gt;now &quot;standard&quot;.</p>
<p>And that is as far as you can go. Try installing more RAM into a Windows server and some weird random crashes start happening. Same goes for processors: I have read about how funny stuff happens when you have more than 8 processor in a box. Even the high-end Windows Server version (Enterprise Datacenter or whatever it is called now) won&#8217;t handle that much well.<br />
  <br />Therefore, I see hilarious Raymond&#8217;s 800-users TS example&#8230; No Windows server can handle that much users load. But Raymond is right: polling kills and should be avoided at all, if possible.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340453">
				<div id="div-comment-340453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://epicureangeek.com' rel='external nofollow' class='url'>Danh Dang</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340453">
			January 24, 2006 at 4:58 pm</a>		</div>

		<p>800 users Terminal Server?  And each of the users are running Office 2000 right? What kind of hardware are these servers running?  :-) Even if you have over 4GB of RAM, Windows only allow 2GB for applications by default unless your app uses AWE or PAE.  Eric, not sure why your servers crash with 8 procs, but I know Unisys has a 32 procs server running windows 2003 server.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340463">
				<div id="div-comment-340463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jerry Pisk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340463">
			January 24, 2006 at 5:05 pm</a>		</div>

		<p>Registered messages are fine if your application runs on the same server as your database. But for real applications those won&#8217;t work. And in a corporation with overzealous IT team your DB server is not allowed to make any connections to any other servers so notifications are not an option at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340473">
				<div id="div-comment-340473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340473">
			January 24, 2006 at 5:44 pm</a>		</div>

		<blockquote><p>
  With all due respect, that reasoning is why file servers with 4GB of RAM are now &quot;standard&quot;.</p>
<p>FILE servers? Unless you have a huge amount of users or have some insane performance requirements, serving FILES never requires more than the OS recommeded minimum. The hard drive is almost certianly faster than the network, so only small read buffers are needed to maintain throughput. 4GB? More like 512MB, if that.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-340483">
				<div id="div-comment-340483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340483">
			January 24, 2006 at 6:01 pm</a>		</div>

		<p>I&#8217;ve seen 32-way Windows servers with 32GB of RAM running just fine on Windows 2000 Datacenter Server.</p>
<p>As for polling the database, SQL Server 2005 has some great solutions for just that problem. Have a look here:</p>
<p><a rel="nofollow" target="_new" href="http://www.microsoft.com/sql/prodinfo/overview/whats-new-in-sqlserver2005.mspx" rel="nofollow">http://www.microsoft.com/sql/prodinfo/overview/whats-new-in-sqlserver2005.mspx</a></p>
<p>Specially, check out the section on &quot;Query Notification.&quot; Basically, you given SQL Server a command, and it notifies you if the results of that command ever change. It&#8217;s absolutely brilliant!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340513">
				<div id="div-comment-340513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://about:blank' rel='external nofollow' class='url'>silkio</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340513">
			January 24, 2006 at 6:52 pm</a>		</div>

		<p>Jonathan Allen Said:</p>
<p>&quot;If there were a way for the database to send a message to a program, a lot of problems would go away. &quot;</p>
<p>There is. You&#8217;ve got triggers in MS SQL and, I believe, My SQL. Oracle, I understand, may also allow java callbacks. If you&#8217;re talking about MS Access though &#8230; :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340553">
				<div id="div-comment-340553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://qstuff.blogspot.com/' rel='external nofollow' class='url'>Justin Olbrantz (Quantam)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340553">
			January 24, 2006 at 8:56 pm</a>		</div>

		<p>&lt;i&gt;800 users Terminal Server? And each of the users are running Office 2000 right? What kind of hardware are these servers running? :-) Even if you have over 4GB of RAM, Windows only allow 2GB for applications by default unless your app uses AWE or PAE.&lt;i&gt;</p>
<p>While you&#8217;re right that 3 MB for 800 instances is very little compared to like the 80 GB of RAM required for 800 instances of a hypothetical program that takes 10 MB RAM per instances, I think you misunderstand the 2 GB limit. The 2 GB program limit is PER PROCESS. While the 2 GB limit (assuming that the 3 GB option is not enabled) will prevent you from running a single program that uses 3 GB RAM, you could easily run 10 programs that require 300 MB each.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340563">
				<div id="div-comment-340563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://qstuff.blogspot.com/' rel='external nofollow' class='url'>Justin Olbrantz (Quantam)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340563">
			January 24, 2006 at 9:03 pm</a>		</div>

		<p>&lt;i&gt;FILE servers? Unless you have a huge amount of users or have some insane performance requirements, serving FILES never requires more than the OS recommeded minimum. The hard drive is almost certianly faster than the network, so only small read buffers are needed to maintain throughput. 4GB? More like 512MB, if that.&lt;/i&gt;</p>
<p>&#8216;Never&#8217; is always wrong. How much RAM a file server &quot;needs&quot; depends on what files you&#8217;re serving. Ideally you&#8217;d want the entire file system (at least the part that you serve) in RAM at all times. If that&#8217;s not possible (i.e. you have much more data you access than RAM), then the more RAM the better, as it means a higher percentage of the data is kept in cache, reducing disk access.</p>
<p>You try running the MSDN Library web server (which has several gigs of data, as well as heavy traffic, I&#8217;d imagine) on 512 MB RAM, and we&#8217;ll see how many hours before you want your mommy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340573">
				<div id="div-comment-340573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340573">
			January 24, 2006 at 9:10 pm</a>		</div>

		<p>Talking about polling&#8230;</p>
<p>It happens that I&#8217;m going to write an object wrapper in C++ for controlling the phone recorder card. The card comes with a set of APIs. From the menu it doesn&#8217;t mention whether the driver will generate any event to be handled, so we figure that &quot;the way&quot; to handle it is to set a timer and check eo see if each line channel rings or not (by running RingDetect() on each channel)when the timer &quot;ticks&quot;.</p>
<p>I hope it can be done in better way, but can&#8217;t figure out how to do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340583">
				<div id="div-comment-340583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://qstuff.blogspot.com/' rel='external nofollow' class='url'>Justin Olbrantz (Quantam)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340583">
			January 24, 2006 at 9:27 pm</a>		</div>

		<p>An amendment to my previous post (lest Stu think I completely sidestepped his point about network vs. disk throughput):</p>
<p>Even if the disk drives on the server are faster than the network (which, admittedly, will be the case on most server, which have connections slower than about 50 MBps), seek time is the real killer. Even with modern, fast hard drives, seek time can be 7-10 ms. That limits your serving to 100-150 uncached requests/second. On a 10 MBps line running at full throughput, the average request only needs to be smaller than about 100 KB to kill a server, given the constraint of seek time. Once you start an I/O request queue on a server like that, it&#8217;s all over (this is assuming that that level of traffic is sustained, and not just a short spike of activity).</p>
<p>Note that my example was illustrating this point, as the MSDN Library contains a large amount of data contained in small files, and many different files are likely to be accessed simultaneously (by different clients).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340383">
				<div id="div-comment-340383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Randolpho</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340383">
			January 24, 2006 at 3:00 pm</a>		</div>

		<p>Joke over, I&#8217;d just like to point out that there *are* valid reasons to poll, but only on a macroscopic (in terms of CPU time) scale. The best example I can think of offhand is automatic email checking. That, technically, counts as polling. You wait 5 minutes (or so), connect to the POP server, download any new mail, and disconnect. </p>
<p>Yes, it&#8217;s a far cry from waiting for a system update via polling, but it&#8217;s still polling. :)</p>
<p>Also, Jonathan Allen asked about database update notification rather than polling. If I remember correctly from that launch event I went to last month, SQL Server 2005 will do this for you. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340493">
				<div id="div-comment-340493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340493">
			January 24, 2006 at 6:07 pm</a>		</div>

		<p>Recently I HAD to go from a passive-wait design to a polled design and it *helped* performance, here&#8217;s why (and I agree it is a particular case)</p>
<p>(The OS was not Windows and it was a relatively slow processor, but I think it could happen elsewhere.)<br />
<br />It was a networked application whose sole purpose was to receive (and process) UDP frames as fast as possible, but without hogging too much CPU since there were other applications running.<br />
<br />1st &#8216;design&#8217;: while(1) { select() =&gt; receive }<br />
<br />This design was the more cpu friendly but did not pull enough performance because returning to select ate 500us at least between two receives, whereas polling only cost 50us. So what did I do?<br />
<br />I mitigated damages that way:<br />
<br />2nd &#8216;design&#8217;: while(1) { select() =&gt; for(i=1; i&lt;100; i++) { receive, break if nothing } }</p>
<p>I still &#8216;lost&#8217; 500us each time the app called select() but even if the UDP frames were spaced with less than 500us I didn&#8217;t lose frames because of the small OS bufferisation.<br />
<br />That way the application could have high performance when the network was heavily used and not wasting cpu when there was no network transfer.<br />
<br />It only wasted cpu when the network was lightly used, and even then it didn&#8217;t waste that much. And I guess it could have detected network usage and adapted but in fact I could not afford to lose UDP frames so maybe the adaptation delay would have penalized me if/when the bandwith abruptly increased.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340613">
				<div id="div-comment-340613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340613">
			January 25, 2006 at 2:38 am</a>		</div>

		<p>@Nawak:</p>
<p>Would something like:<br />
<br />while(1){ioctlsocket(s,FIONREAD,&amp;cb);if(!cb)select(&#8230;)else recv(&#8230;);}<br />
<br />work?</p>
<p>Well, ioctlsocket is the winsock subset of bsd ioctl<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340623">
				<div id="div-comment-340623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">FlashDirt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340623">
			January 25, 2006 at 4:44 am</a>		</div>

		<p>Connect a removable flash media reader like a Dazzle flash card reader (or is it Zio! now ?!) to your XP (sp2 or otherwise) system and you&#8217;ll see explorer poll the device every second for media presence.</p>
<p>What would Raymond suggest as an alternate mechanism to the explorer team?</p>
<p>I understand polling sucks&#8230;but..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340633">
				<div id="div-comment-340633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rod Widdowson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340633">
			January 25, 2006 at 7:25 am</a>		</div>

		<blockquote><p>
  What would Raymond suggest as an alternate mechanism to the explorer team? </p>
<p>Directory notification change (or whatever it is called in user mode).  Open the directory and get it to complete the IRP when something changes.</p>
<p>None of which accounts for explorer&#8217;s desire to be absolutely absolutely absolutely certain that desktop.ini doesn&#8217;t exist (look at sfilter output &#8211; explore continually tries to open desktop.ini)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340643">
				<div id="div-comment-340643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Oldwood</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340643">
			January 25, 2006 at 8:19 am</a>		</div>

		<p>Wasn&#8217;t it Access that used PeekMessage() incorrectly instead of the usual GetMessage() loop under Windows 3.1, thereby causing Windows 3.1 to always be busy and not able to write .ini file changes etc&#8230; It was a common thing to do then and with MsgWaitForSingleObject() surely you can still do this kind of thing in the UI thread quite efficiently now, or not?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340683">
				<div id="div-comment-340683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340683">
			January 25, 2006 at 11:11 am</a>		</div>

		<p>Also: 0% CPU usage means nothing, there&#8217;s not enough granularity to measure very small usage. The minimum I&#8217;ve seen reported is about 0.9%.</p>
<p>Many apps exploit this and think they&#8217;re not doing damage; but they are overloading the kernel (which has to check every timer interrupt whether to wake them up), and most importantly, they are trashing the cache. If they use 0.5% and all of it is cache trashing, at least another 0.5% will be wasted by an app doing useful work &quot;restoring&quot; its own cache, so to speak.</p>
<p>The granularity of reporting should be improved. Heck, I&#8217;ve seen this cause problems already: DOSBox (and other low-level emulators) usually run at a frequency of around 1000 Hz, and sometimes Windows fails to account for their CPU time, so it shows 20% but they are using 80%. If you have a CPU with variable frequency, Windows will reduce the frequency when it sees 20%, but then suddenly it &quot;saturates&quot; and goes all the way up to 100%. It dithers between those two settings until you lock it :)</p>
<p>A nice way to check the &quot;quality&quot; of an application is to watch its &quot;context switch&quot; performance counter (available per thread). Sysinternal&#8217;s Process Explorer can do it. It scares me when I see apps that do 100 or 1000 switches per second, yet register 0% CPU usage.</p>
<p>Microsoft apps usually do decently, with notable exceptions such as Windows Media Player (even when non playing and minimized, although most media players do that too).</p>
<p>Also, to check for the ultimate shame, if an app registers about 100 switches per second, but that number raises to 1000 when you open a media file, it means it was doing sleep(1)s&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-340913">
				<div id="div-comment-340913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Swaim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340913">
			January 25, 2006 at 4:25 pm</a>		</div>

		<p>I&#8217;m not sure about SQL Server, but Oracle has a stored procedure package you can use to block queries until they get triggered by something else. We used that to build a fairly sophisticated change notification system that worked without polling. (It even handled multiple clients that consumed change notification messages at different rates.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-340923">
				<div id="div-comment-340923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-340923">
			January 25, 2006 at 4:50 pm</a>		</div>

		<p>@Chris Becke:</p>
<p>Yes it would also work but since my socket is already non-blocking, I prefer &quot;receive&quot; to &quot;if something then receive&quot;, because receive will also have to check if there&#8217;s something to receive anyway, so basically your code do the same thing as mine but check twice for data presence. I admit it&#8217;s more clear though.<br />
<br />But now I understand why you suggested that code: I didn&#8217;t explain clearly why I used a &quot;for(100)&quot; (and not a &quot;for(1000)&quot; or &quot;10000&quot;). I should have said that. It&#8217;s because the code also have to react to commands it receives through a pipe, so the pipe is also part of the select&#8217;s fd_sets. Therefore to keep a minimum of reactivity, I had to set an upper limit for the number of consecutive receives that go without selecting both the command pipe and the socket.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341013">
				<div id="div-comment-341013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-341013">
			January 25, 2006 at 10:50 pm</a>		</div>

		<p>&quot;but in fact I could not afford to lose UDP frames so maybe the adaptation delay would have penalized me if/when the bandwith abruptly increased.&quot;</p>
<p>Just out of curiosity, can you share the code that you wrote to guarantee reception of UDP frames when the frame is corrupted by another computer sending a packet at the same time?   :)</p>
<p>If you &quot;can&#8217;t afford&quot; to lose packets, then you may as well give up and go home because lost packets are impossible to completely prevent. Maybe you could afford the extra processor usage to minimise lost packets and that&#8217;s cool, but you stil didn&#8217;t actually guarantee reception of every packet that ever got transmitted &#8211; and merely .</p>
<p>Cheong: The &quot;better way&quot; is to get the vendor to write their interface properly.  You can only do as well as the underlying system allows &#8211; and theirs is probably either badly documented or broken.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341033">
				<div id="div-comment-341033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-341033">
			January 25, 2006 at 11:24 pm</a>		</div>

		<blockquote><p>
  You try running the MSDN Library web server (which has several gigs of data, as well as heavy traffic, I&#8217;d imagine) on 512 MB RAM, and we&#8217;ll see how many hours before you want your mommy.</p>
<p>But that&#8217;s a WEB SERVER, not a FILE SERVER (although simple web servers could be classified as file servers.) In my book, a FILE sever is a sever that provides read and/or write access to static files stored on secondary storage, be that through SMB/CIFS, NFS, FTP or even HTTP.</p>
<p>If the sever is running a database query service, serving dynamic web pages, providing some sort of remote application system or other such things then it is more than just a FILE server.</p>
<p>Pure file serving is neither CPU or RAM intensive, it is network-bound, so there is no real need for multiple CPUs or gigs of RAM.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341043">
				<div id="div-comment-341043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://qstuff.blogspot.com/' rel='external nofollow' class='url'>Justin Olbrantz (Quantam)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-341043">
			January 26, 2006 at 1:25 am</a>		</div>

		<p>[i]But that&#8217;s a WEB SERVER, not a FILE SERVER (although simple web servers could be classified as file servers.) In my book, a FILE sever is a sever that provides read and/or write access to static files stored on secondary storage, be that through SMB/CIFS, NFS, FTP or even HTTP.</p>
<p>If the sever is running a database query service, serving dynamic web pages, providing some sort of remote application system or other such things then it is more than just a FILE server.</p>
<p>Pure file serving is neither CPU or RAM intensive, it is network-bound, so there is no real need for multiple CPUs or gigs of RAM.[/i]<br />
<br />I was making a couple of assumptions about the MSDN Library server, which may or may not be correct. 1) the pages of the library are primarily static, individual web pages, 2) web page servers quality as file servers, as long as they don&#8217;t do a large amount dynamic content generation.</p>
<p>Agreed, file servers are not CPU intensive. Nor are they RAM intensive in the sense a MMORPG server would be, where it has to store massive amounts of rapidly changing state data; but the fact that they can often be I/O-bound means that large amounts of RAM may be needed for caches. I previously posted some rough calculations (well, the results, as the formulas themselves are trivial) showing how quickly a hard drive can get bogged down by serving lots of small files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341213">
				<div id="div-comment-341213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Luther Baker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-341213">
			January 26, 2006 at 2:34 pm</a>		</div>

		<p>I am interested in how this relates to GAME programming.</p>
<p>I&#8217;ve started working through a few books and am currently using the following variation of the message loop:</p>
<p>   BOOL bval = TRUE;<br />
<br />   while(TRUE)<br />
<br />   {<br />
<br />      bval = ::PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE);<br />
<br />      if (bval)<br />
<br />      {<br />
<br />         if (msg.message == WM_QUIT)<br />
<br />            break;<br />
<br />         ::TranslateMessage(&amp;msg);</p>
<p>         ::DispatchMessage(&amp;msg);<br />
<br />      }<br />
<br />      else<br />
<br />      {<br />
<br />            // irrelavant code snipped here &#8230;</p>
<p>            tickCount = ::GetTickCount();<br />
<br />            if (tickCount &gt; tickTrigger)<br />
<br />            {<br />
<br />               tickTrigger = tickCount +</p>
<p>                 GameEngine::GetFrameDelay();<br />
<br />               mainFrame.GameCycle();<br />
<br />            }<br />
<br />         }<br />
<br />      }<br />
<br />   }</p>
<p>Conceptually, it seems that this hammers the CPU? Is there another approach to implementing decent fps type action without contantly polling ticks etc in every loop iteration?</p>
<p>If this is off topic, please ignore &#8230;</p>
<p>Thanks,</p>
<p>-Luther</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341193">
				<div id="div-comment-341193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-341193">
			January 26, 2006 at 2:14 pm</a>		</div>

		<p>@Anonymous Coward</p>
<p>&quot;If you &quot;can&#8217;t afford&quot; to lose packets, then you may as well give up and go home because lost packets are impossible to completely prevent&quot;</p>
<p>*I* know, but I am not the PHB that sold the product. In fact in the final application the total system may afford to lose frames, but what was sold was: no frame loss on our system! Every valid frame that enter the nic shall be processed! The fact that if you consider the whole system there *will* be lost frames was totally irrelevent to the final client. Their contract said that we shall not lose frames!<br />
<br />With such high expectations (that you cannot negotiate after the boss agreed to fulfill the client&#8217;s dream), the client may well have to sue Cisco (or whatever brand of switch they use) for &#8216;frame-stealing&#8217; ;)</p>
<p>The &quot;no frame-loss&quot; requirement really made the product more expensive but I don&#8217;t care since it&#8217;s not my money and since in the end we managed to do it (from NIC to App) with the incredibly high throughput the PHB sold. And it was really an interesting job! Lots of things learned (from the NIC chip configuration to the OS tuning etc.)</p>
<p>I would like to add something about the clients&#8230; they&#8217;re the kind of people that believe that because the NIC is 100 Mbps, they can *have* 100 Mbps delivered by/to an application. So just to be on the safe side they took 96 Mpbs as the throughput they would get from an FTP server (run on the same kind of anemic hardware we were struggling with (and they *knew* we were struggling with it)) and computed the time it would take to download their gigabytes of files and sold *that time* to their respective client!</p>
<p>You cannot imagine how warm it is for me to know that, knowing the pricks they are!</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-341243">
				<div id="div-comment-341243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-341243">
			January 26, 2006 at 5:00 pm</a>		</div>

		<p>@Luther, that loop is crazy. Why would the game simply not just run as fast as it can? Frame-rate independant code is not *that* difficult to get right, and seeing as how GetTickCount can be off by up to 10ms anyway, you&#8217;d get much smoother animations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341333">
				<div id="div-comment-341333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-341333">
			January 27, 2006 at 6:50 am</a>		</div>

		<p>The loop is crazy because if the GameCycle() runtime exceeds the GetFrameDelay() time, then the game will start to run at half speed.</p>
<p>Its not crazy because, to make it run as fast as it can will needlessly burn all the CPU.</p>
<p>And, frame rate independent code might work well for 3d shooters. But for 2d games that use frame animated sprites as resources, having a cinsistent gamewide framerate tied to the art resources is important to avoid unpleasant beat effects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341383">
				<div id="div-comment-341383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">basic rulez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-341383">
			January 27, 2006 at 12:06 pm</a>		</div>

		<p>I doubt that TS can handle 800 sessions even without any running applications. Every single session allocate &gt;3 mb each, so where&#8217;s the actual problem here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341493">
				<div id="div-comment-341493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">avid coder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-341493">
			January 27, 2006 at 6:11 pm</a>		</div>

		<p>It seems to me that notification-based mechanism can only work if what you&#8217;re monitoring notifies you of change, so other than polling for information are there any other alternatives?  Just as Randolpho mentioned automatic email checking requires polling, well because you don&#8217;t get notified by the server when new email arrives (or notification is beyond your control). It doesn&#8217;t seem like there&#8217;s an alternative other than polling, if notification is out of your control, and you (your software etc) are not notified.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341973">
				<div id="div-comment-341973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jameskew.blogspot.com' rel='external nofollow' class='url'>James Kew</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-341973">
			January 31, 2006 at 12:46 am</a>		</div>

		<p>FWIW, there *is* no way other than polling to do media detection in USB mass storage devices. USB mass storage is basically SCSI over USB, and the way you check for media presence is to poll with SCSI TEST_UNIT_READY commands.</p>
<p>What&#8217;s more, USB Flash keys typically lie about being removable &#8212; ie, they say they&#8217;re removable-media drives when really they&#8217;re not &#8212; so Windows *has* to poll them. </p>
<p>I believe they do this because identifying as removable also means that Windows turns off write caching by default, making them more resilient in the face of surprise removal.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-342763">
				<div id="div-comment-342763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Techboy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-342763">
			February 2, 2006 at 5:55 pm</a>		</div>

		<p>I had a think about that &#8211; what we really need is a way to just sit idle and then say &quot;OH WAIT WE GOT SOMETHIN&quot; when something happens and then send that on. Like,</p>
<p> int main() {<br />
<br /> // &#8230;<br />
<br />inethandle::wait(&quot;hello&quot;);<br />
<br /> // &#8230;<br />
<br /> }</p>
<p>void hello() {<br />
<br />// handle packet that we received&#8230;<br />
<br />}</p>
<p>Of course that might already exist for a case like that, I&#8217;ve never done much programming like that.. but you see what I mean.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-342773">
				<div id="div-comment-342773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wil Stark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-342773">
			February 2, 2006 at 6:31 pm</a>		</div>

		<p>Recently I found the explorer polls the hard disks every 60 seconds, apparently to determine if disk space is low so it can pop up a nice warning balloon or some-such.  Using regmon, I determined that setting the DWORD registry key HKCUSoftwareMicrosoftWindowsCurrentVersionPoliciesExplorer|NoLowDiskSpaceChecks to 1 and restarting explorer turns of this behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-344923">
				<div id="div-comment-344923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/02/10/529525.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-344923">
			February 10, 2006 at 10:00 am</a>		</div>

		<p>It clogs up the messaging system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-358593">
				<div id="div-comment-358593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/drnick/archive/2006/03/22/557642.aspx' rel='external nofollow' class='url'>Nicholas Allen's Indigo Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-358593">
			March 23, 2006 at 11:55 am</a>		</div>

		<p>Continuing from yesterday&#8217;s article about IChannelFactory, today we&#8217;re looking at the server side of&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-376463">
				<div id="div-comment-376463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/05/03/589110.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-376463">
			May 3, 2006 at 10:00 am</a>		</div>

		<p>The non-GUI way of scheduling code to run on a thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-398473">
				<div id="div-comment-398473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://devauthority.com/blogs/gkhanna/archive/2006/01/25/1574.aspx' rel='external nofollow' class='url'>Inside and Out...</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-398473">
			July 10, 2006 at 10:24 am</a>		</div>

		<p>Raymond Chen has a nice blog entry that discusses it.<br />Must read.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-409013">
				<div id="div-comment-409013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://smallcode.weblogs.us/2006/08/15/an-approach-to-api-calls-optimization/' rel='external nofollow' class='url'>smallcode&raquo;Blog Archive &raquo; An approach to API calls optimization</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-409013">
			August 14, 2006 at 9:00 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://smallcode.weblogs.us/2006/08/15/an-approach-to-api-calls-optimization/" rel="nofollow">http://smallcode.weblogs.us/2006/08/15/an-approach-to-api-calls-optimization/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531663">
				<div id="div-comment-531663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://cpfh.wordpress.com/2006/01/25/performance-implication-of-polling/' rel='external nofollow' class='url'>Performance implication of Polling &laquo; CPFH&#8230;</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060124-17/?p=32553#comment-531663">
			July 29, 2007 at 4:30 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://cpfh.wordpress.com/2006/01/25/performance-implication-of-polling/" rel="nofollow">http://cpfh.wordpress.com/2006/01/25/performance-implication-of-polling/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>