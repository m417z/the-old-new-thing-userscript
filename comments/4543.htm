<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1052853">
				<div id="div-comment-1052853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1052853">
			April 26, 2013 at 7:31 am</a>		</div>

		<p>Does anybody not like return-on-failure?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052863">
				<div id="div-comment-1052863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1052863">
			April 26, 2013 at 7:47 am</a>		</div>

		<p>Generally speaking, I prefer return-on-failure, but am comfortable with any of those three styles (return-on-error, chained success, nested if&#39;s); but my favorite is to use C++ and some sort of RAII mechanic (such as lambdas + ScopeGuard to generate the auto-exit-cleanup-on-success in combination with return-on-failure, so that the later failures in the chain still undo the former successes).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052873">
				<div id="div-comment-1052873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1052873">
			April 26, 2013 at 7:48 am</a>		</div>

		<p>Hate is such a strong word. &nbsp;But in all fairness, the highly-nested-if-statements style does make me about equally unhappy as it makes fans of the chained-success style.</p>
<p>@Maurits: I love return-on-failure. &nbsp;It&#39;s like gotos without the gotos. &nbsp;But in this case, you&#39;d need to make sure to use RAII to avoid resource leaks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052883">
				<div id="div-comment-1052883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1052883">
			April 26, 2013 at 8:02 am</a>		</div>

		<p>Am I the only one who would have written that as throw-on-failure (combined with RAII)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052903">
				<div id="div-comment-1052903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1052903">
			April 26, 2013 at 9:26 am</a>		</div>

		<p>Throw on failure is a gray area, in my book. &nbsp;</p>
<p>I like it for a lot of things, but in a case like this, the wrapper function is essentially giving the same basic interface as the function its wrapping&#8230; so I&#39;d probably choose to do as Raymond did, and put it in a low-level WinAPI extensions library, then, if I wanted throw-on-failure, I&#39;d further wrap the interface in C++ using perhaps std::initialize_list that threw on failure, to make it entirely RAII and C++ friendly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052983">
				<div id="div-comment-1052983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1052983">
			April 26, 2013 at 10:42 am</a>		</div>

		<blockquote><p>
  &gt; So to be fair, I will choose a coding style that nobody likes.
</p></blockquote>
<p>The wisdom of Solomon.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052993">
				<div id="div-comment-1052993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1052993">
			April 26, 2013 at 10:44 am</a>		</div>

		<p>I&#39;ve worked on several projects where return anywhere other than the end of the function was not permitted. &nbsp;So, yes, there are some people who do not like return-on-failure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1053043">
				<div id="div-comment-1053043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1053043">
			April 26, 2013 at 11:25 am</a>		</div>

		<blockquote><p>
  &gt; I will choose a coding style that nobody likes
</p></blockquote>
<p>Just like everybody else.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1053083">
				<div id="div-comment-1053083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kjh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1053083">
			April 26, 2013 at 11:48 am</a>		</div>

		<p>&quot;Does anybody not like return-on-failure?&quot;</p>
<p>Yes. There are, believe it or not, still hardcore proponents of SESE (single entry, single exit) out there. I&#39;m not one of them but several of my university CS profs were.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1053093">
				<div id="div-comment-1053093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1053093">
			April 26, 2013 at 12:02 pm</a>		</div>

		<blockquote><p>
  I&#39;m not one of them but several of my university CS profs were.
</p></blockquote>
<p>Probably because the graph looks nicer :-)</p>
<p>(I seethe with indignity when someone suggests that the opinion of a code analysis tool is worth more than the opinion of me, a practitioner in the art of designing, implementing, shipping, AND SUPPORTING said code, over what makes code &#39;better&#39; structured)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1053133">
				<div id="div-comment-1053133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Derlin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1053133">
			April 26, 2013 at 3:59 pm</a>		</div>

		<p>I once worked on a project with a Single Entry, Single Exit coding standard. &nbsp;Some of our functions checked for quite a few error conditions, so this made the nested ifs quite frustrating. &nbsp;I proceeded to write a giant switch statement where the code would break after setting an appropriate error code. &nbsp;I was accused of violating the spirit of the coding standard, by using a &quot;goto&quot; without the keyword &quot;goto&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1053143">
				<div id="div-comment-1053143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1053143">
			April 26, 2013 at 5:29 pm</a>		</div>

		<p>@Derlin a similar meme is to have a big &quot;do { &#8230; } while (FALSE);&quot; around the function, with break-on-failure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1053153">
				<div id="div-comment-1053153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1053153">
			April 26, 2013 at 6:24 pm</a>		</div>

		<p>Maurits: The advantage of a &quot;switch&quot; is that you can violate the spirit of Single-Entry just as easily as you can violate the spirit of Single-Exit!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1053163">
				<div id="div-comment-1053163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1053163">
			April 26, 2013 at 8:24 pm</a>		</div>

		<p>It&#39;s interesting how it took until Windows Vista to expose this feature that&#39;s been in the native NT API since at least NT 4.0 to the Win32 layer. &nbsp;Another feature exposed by these attribute lists in Windows Vista is parent process &#8211; NT 4.0&#39;s NtCreateProcess function already let you specify the parent process. &nbsp;These may even go as far back as NT 3.1, but I don&#39;t have a way to know.</p>
<p>Here&#39;s a feature I&#39;d like to see for Windows 9, that would be an actual new feature: the ability to put a job object as an attribute. &nbsp;Right now, if you want explicitly to put a child process into a job you create but are not in, you have to CreateProcess as suspended then AssignProcessToJobObject. &nbsp;This leaves a small window inside which crashing the parent process could result in leaving the child process suspended as a zombie.</p>
<p>@Maurits [MSFT]: Except that Visual Studio will complain about the conditional expression being constant&#8230; &gt;.&lt; &nbsp;As a result, I tend to use &quot;for (;;)&quot; with a &quot;break;&quot; at the end.</p>
<p>I wish C++ had Java&#39;s syntax of &quot;break label;&quot; and &quot;continue label;&quot; to break or continue a loop other than the current innermost one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1053193">
				<div id="div-comment-1053193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">me2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1053193">
			April 27, 2013 at 5:16 pm</a>		</div>

		<blockquote><p>
  &gt; I wish C++ had Java&#39;s syntax of &quot;break label;&quot; and &quot;continue label;&quot; to break or continue a loop other than the current innermost one.
</p></blockquote>
<p>it is called &quot;goto&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1053253">
				<div id="div-comment-1053253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mario</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1053253">
			April 29, 2013 at 3:41 am</a>		</div>

		<p>one question&#8230; why did you use reinterpret_cast instead of static_cast in:</p>
<p>LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList =</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; reinterpret_cast&lt;LPPROC_THREAD_ATTRIBUTE_LIST&gt;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(HeapAlloc(GetProcessHeap(), 0, size));</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1053373">
				<div id="div-comment-1053373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130426-00/?p=4543#comment-1053373">
			April 29, 2013 at 8:25 am</a>		</div>

		<p>The original meaning of &quot;single-entry single-exit&quot; has nothing to do with having only one return instruction in the function. It has to do with having multiple entry points in a function and multiple return addresses, both not made possible with structured languages like plain C/C++.</p>
<p><a rel="nofollow" target="_new" href="http://programmers.stackexchange.com/questions/118703/where-did-the-notion-of-one-return-only-come-from/118793#118793" rel="nofollow">programmers.stackexchange.com/&#8230;/118793</a></p>
<p>So please, call it &quot;one return only&quot;.</p>
<p>In practice, it&#39;s stupid doctrine. Imagine forcing one return only in languages that implicitly return from the last executable statement: you&#39;d have to declare a return variable, an extra last statement and assign to that variable instead of letting the value(s) be returned :P blah</p>
<p>DISCLAIMER: I&#39;m not an unconditional fan of multiple return instructions either, I adopt whatever makes the easiest to read and/or maintain, rarely ever thinking about performance because it doesn&#39;t matter for 99.99% of cases, for which profiling will aid better than wild assumptions.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>