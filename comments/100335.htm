<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-ian-m-goldby even thread-even depth-1 parent" id="comment-1371655">
				<div id="div-comment-1371655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Ian+Goldby' rel='external nofollow' class='url'>Ian Goldby</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181127-00/?p=100335#comment-1371655">
			November 27, 2018 at 7:21 am</a>		</div>

		<p>I&#8217;ve always believed (but admittedly never bothered to check) that if you write in C something like static const int lookup[] = { &#8230; long list of numbers &#8230; } then the compiler does all the heavy lifting; the array is generated in its final form as part of the executable image and there&#8217;s no runtime cost to creating and initialising the array. I suppose my first question is &#8220;is this actually the case with modern C compilers?&#8221; and my second question is &#8220;what is the C# equivalent?&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-jeremytais odd alt depth-2" id="comment-1371675">
				<div id="div-comment-1371675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181127-00/?p=100335#comment-1371675">
			November 27, 2018 at 1:46 pm</a>		</div>

		<p>Yes, that is more or less how it works on C arrays (or C++ arrays).</p>
<p>Note that a C# list is much closer to a C++ std::vector, and in C++ the code:<br />
    std::vector myVect = { 3, 4, 5, 6} is going to create a std::inititlizer_list and run a constructor on std::vector. I am not really sure at all the details that are involved there.  It is at least possible that in the case of integer literals, that the equivilent code that runs in C++ the static array as in C with a memcpy to copy the data into the std::vector.</p>
<p>In C#, I am less certain what the code<br />
    int[] x = new int[] { 1, 2, 3, 4}</p>
<p>actually does.  At a minimum the array would be on the heap and need to be copied out there.  (since there is no such thing as a const array in C#, a copy has to be made)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1" id="comment-1371695">
				<div id="div-comment-1371695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181127-00/?p=100335#comment-1371695">
			November 27, 2018 at 5:06 pm</a>		</div>

		<p>This kind of initilization is particularly useful if you want to return list of complex nested object with LINQ queries.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tyler-szabo odd alt thread-even depth-1" id="comment-1371885">
				<div id="div-comment-1371885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Tyler+Szabo' rel='external nofollow' class='url'>Tyler Szabo</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181127-00/?p=100335#comment-1371885">
			November 29, 2018 at 1:09 am</a>		</div>

		<p>That&#8217;d be handy for initializing sets with a custom comparer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-rkpatrick even thread-odd thread-alt depth-1" id="comment-1372005">
				<div id="div-comment-1372005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RKPatrick' rel='external nofollow' class='url'>RKPatrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181127-00/?p=100335#comment-1372005">
			November 30, 2018 at 9:31 am</a>		</div>

		<p>I like these a lot&#8230;it&#8217;s nice to learn new stuff about .Net, even after working with it for so long.  I&#8217;d been using .Concat(&#8230;) to achieve the same results, but I like the semantics of the initializer quite a bit more, since it&#8217;s not building an expression and hooking into the LINQ infrastructure (it&#8217;s a bit of a heavy hand for this task)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>