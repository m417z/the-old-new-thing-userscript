<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1302997">
				<div id="div-comment-1302997" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">OldFart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1302997">
			July 21, 2017 at 7:50 am</a>		</div>

		<p>Yea!  CLR Week Ex!</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-s-m-joshi-02 odd alt depth-2 parent" id="comment-1303016">
				<div id="div-comment-1303016" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303016">
			July 21, 2017 at 8:04 am</a>		</div>

		<p>Surely, CLRWeeksEx</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1304285">
				<div id="div-comment-1304285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1304285">
			July 31, 2017 at 6:56 am</a>		</div>

		<p>NtCLRWeekEx</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1303055">
				<div id="div-comment-1303055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303055">
			July 21, 2017 at 8:54 am</a>		</div>

		<p>await CLRWeek2();</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1303076">
				<div id="div-comment-1303076" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303076">
			July 21, 2017 at 11:11 am</a>		</div>

		<p>Well played.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1303106">
				<div id="div-comment-1303106" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303106">
			July 21, 2017 at 12:57 pm</a>		</div>

		<p>You mean a new value from CLRWeekFactoryManagerExecutionPolicyFactory.</p>
<p>Sorry, my day job uses Java.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1303065">
				<div id="div-comment-1303065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303065">
			July 21, 2017 at 10:13 am</a>		</div>

		<p>Those Windows guys crack me up. I still remember years ago, providing feedback about the use of the DEVMODE structure by print drivers to store global data (like, entire font tables), rather than limiting it to document-specific data, resulting in file size bloat by program (like Excel) that saved the DEVMODE structure in the file.</p>
<p>They took the feedback constructively, but unfortunately decided instead of just moving the global data somewhere else, bifurcated the whole DEVMODE-related part of the API into &#8220;DEVMODE with all that junk&#8221; and &#8220;DEVMODE without all that junk&#8221;, overcomplicating everyone&#8217;s lives.</p>
<p>And now, presented with the need for an event that _knows_ about the possibility of asynchronous completion of handlers (a rare but valid scenario), they introduce this weird concept of a &#8220;deferral&#8221; for the object, when making the event handler return a Task would actually work just fine, and would be far more expressive and consistent with the TPL model.</p>
<p>The presumed &#8220;problem&#8221; &#8212; &#8220;that the return value from all but the last event handler is not used&#8221; &#8212; is no problem at all. That statement is true only for na√Øve invocations of the delegate. It is in fact possible to observe _all_ of the return values, if one invokes each member of the event&#8217;s delegate&#8217;s invocation list separately. And indeed, that&#8217;s exactly what&#8217;s demonstrated in this Stack Overflow answer: <a href="https://stackoverflow.com/a/27763068/3538012" rel="nofollow">https://stackoverflow.com/a/27763068/3538012</a> (yes, that&#8217;s me).</p>
<p>Oh well&#8230;that&#8217;s Windows for you. Fighting every step of the way to undo the API simplification work the C# and .NET teams put so much effort into. &#8220;What? We&#8217;re going to have a whole new platform, covering mobile, desktop, and everything else? Well, we can&#8217;t possibly leverage all that work the .NET folks already did&#8230;we&#8217;ll have reinvent all those wheels!&#8221; Sigh&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-chd1 odd alt depth-2 parent" id="comment-1303475">
				<div id="div-comment-1303475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ChDF+T' rel='external nofollow' class='url'>ChDF T</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303475">
			July 24, 2017 at 6:18 pm</a>		</div>

		<p>Disclaimer: The following is based on speculation based on the assumption, that there <i>was</i> a reason to design the API in this way.</p>
<p>While your proposal (return Tasks from event handlers) is a neat solution for the problem, the deferral object based approach has the advantage of not braking existing code and conventions.<br />
UWP was intended as successor of Windows 8-style-apps, so it seems critical to maintain source code compatibility. Changing the return type of most event handlers would have caused a lot of compiler errors when porting a project to UWP.<br />
Additionally raising a traditional event (returning void) involves less boiler plate code and as noted in a comment below, declaring an event using a delegate with a non-void return type is problematic in vb.net.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1303715">
				<div id="div-comment-1303715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303715">
			July 25, 2017 at 11:02 am</a>		</div>

		<p>Sorry, I don&#8217;t understand what you mean (and I don&#8217;t mean because &#8220;breaking&#8221; is misspelled).</p>
<p>The deferral-based pattern works only with _new_ event types, because you still need the special event args type to use it. So there&#8217;s no &#8220;old code&#8221; to break. Any code using the deferral pattern is new code, and that new code can just as easily use a Task-based event handler as the new event args type.</p>
<p>Concerns about raising the event and not being able to implement such events are similarly unworthy. Implementation of such events needs to be done just once; it&#8217;s simple to create a template or helper method that will do it, just as we used to have to do in C# for regular events before the ?. operator came along. Besides, it&#8217;s not like implementing the deferral approach is a cake-walk. In fact, I&#8217;d argue it&#8217;s _more_ complicated, due to the stateful nature and lack of compiler support for dealing with that state.</p>
<p>And who cares if you can _implement_ such events in VB.NET? Should the world of .NET and Windows be dragged down just because of some arbitrary restriction found in one language? There aren&#8217;t going to be many scenarios where the event needs to be implemented, and for those, it&#8217;s reasonable enough to just say &#8220;you&#8217;ll have to do that in some language other than VB.NET&#8221;. I doubt there are many Windows components being implemented in VB.NET anyway, and if this pattern comes up in third-party components, all the better if people actually using VB.NET lobby to improve the language to remove that particular restriction.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4 parent" id="comment-1303735">
				<div id="div-comment-1303735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303735">
			July 25, 2017 at 11:37 am</a>		</div>

		<p>On the other hand, it means that the documentation for delegates would say &#8220;The return value of the delegate is the value returned by the last handler, unless the delegate is used for a WinRT event that returns a Task, in which case the tasks returned by the individual handlers are aggregated and the return value is a new Task that completes when all the aggregated tasks complete.&#8221; And good luck with C++ and JavaScript.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5 parent" id="comment-1303895">
				<div id="div-comment-1303895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303895">
			July 26, 2017 at 8:22 am</a>		</div>

		<p>&#8220;it means that the documentation for delegates would say&#8221;</p>
<p>Sorry, why would it say that? The implementation of _delegates_ doesn&#8217;t have to change. It&#8217;s just the code that _uses_ delegates, for _those specific events_. And for those, so what? They are odd-ball events however you look at it. They either have to document the (IMHO definitely) awkward &#8220;deferral&#8221; design, or the (arguably not so) awkward &#8220;Task&#8221; design. One way or the other, there&#8217;s some boilerplate that&#8217;s going to have to go into the documentation, but it only has to be for the event, and using the &#8220;Task&#8221; design, the boilerplate doesn&#8217;t have to introduce any new concepts. It just leverages the existing and very usable TPL idioms.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-5" id="comment-1303916">
				<div id="div-comment-1303916" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303916">
			July 26, 2017 at 9:14 am</a>		</div>

		<p>News flash: C++ and JavaScript don&#8217;t use TPL. WinRT is language-agnostic. In particular, JavaScript event handlers don&#8217;t return a value at all, so the discussion of the correct return type is moot.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1303075">
				<div id="div-comment-1303075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bombel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303075">
			July 21, 2017 at 10:20 am</a>		</div>

		<p>It is nice when you can modify type of arguments for handler, however, if you cannot do that, you can always make some nasty hacks: <a href="https://blog.adamfurmanek.pl/2017/01/14/async-wandering-part-4-awaiting-for-void-methods/" rel="nofollow">https://blog.adamfurmanek.pl/2017/01/14/async-wandering-part-4-awaiting-for-void-methods/</a><br />
Also, returning a Task from event handler is not available in VB.NET since it doesn&#8217;t allow return values.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1303126">
				<div id="div-comment-1303126" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Gilbert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303126">
			July 21, 2017 at 2:28 pm</a>		</div>

		<p>Huh, so if you use another CLR language to create a type with an event whose delegate type has a return value, that type literally cannot be consumed by VB.NET?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1303135">
				<div id="div-comment-1303135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Gilbert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303135">
			July 21, 2017 at 2:37 pm</a>		</div>

		<p>I have just tested this and found it to be untrue.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1303145">
				<div id="div-comment-1303145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303145">
			July 21, 2017 at 2:51 pm</a>		</div>

		<p>&#8220;returning a Task from event handler is not available in VB.NET since it doesn&#8217;t allow return values&#8221; &#8212; non sequitur. That is, while it&#8217;s true that an event _declared_ by a VB.NET type cannot use a delegate type with a return values (an arbitrary and unfortunate restriction in the VB.NET language, IMHO), a VB.NET event _handler_ certainly can return a Task object. Nothing in the language prohibits that.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1303326">
				<div id="div-comment-1303326" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303326">
			July 24, 2017 at 7:23 am</a>		</div>

		<p>VB.NET has pretty good parity with C# .NET these days.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1303415">
				<div id="div-comment-1303415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303415">
			July 24, 2017 at 10:31 am</a>		</div>

		<p>&#8220;VB.NET has pretty good parity with C# .NET these days&#8221; &#8212; non sequitur. Yes, VB.NET has &#8220;pretty good parity&#8221; with C#. But that doesn&#8217;t change the fact that, in VB.NET, you can&#8217;t declare an event in a class where the delegate type for the event includes a non-void return type.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1303096">
				<div id="div-comment-1303096" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Fee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303096">
			July 21, 2017 at 12:46 pm</a>		</div>

		<p>I&#8217;m having difficulty parsing the following sentence after the warning:<br />
// operators and will run synchronously.</p>
<p>Operators and what?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1303115">
				<div id="div-comment-1303115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303115">
			July 21, 2017 at 1:51 pm</a>		</div>

		<p>That&#8217;s not a sentence after the warning. It is a continuation of the warning text. Full text: &#8220;This async method lacks &#8216;await&#8217; operators and will run synchronously.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1303186">
				<div id="div-comment-1303186" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Haim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170721-00/?p=96665#comment-1303186">
			July 22, 2017 at 3:35 am</a>		</div>

		<p>Another reason to use &#8220;async void&#8221; when designing a function is that you simply don&#8217;t care about the return value of a function, nor an exception that may be thrown. This gives an optimization chance to the compiler because now there is no task object to allocate, set , lock, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>