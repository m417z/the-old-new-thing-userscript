<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1310186">
				<div id="div-comment-1310186" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170922-00/?p=97065#comment-1310186">
			September 22, 2017 at 12:19 pm</a>		</div>

		<p>Well, without knowing the internals of a critical section and just by reading the article&#8217;s title (not even the subtitle), my psychic powers told me it was due to a null pointer, possibly because they were accessing an uninitialized critical section, or maybe because of memory corruption. Anyway, debugging is necessary to find the final cause. But if it only happens after running for a week, good luck with that. Another of those fun bugs where you end up reading code in hope of finding something that could cause the observed problem (and you fix some unrelated bugs in the way).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1310235">
				<div id="div-comment-1310235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170922-00/?p=97065#comment-1310235">
			September 24, 2017 at 2:12 am</a>		</div>

		<p>The physical hardware they were running on was *vanishingly* unlikely to be uniprocessor &#8211; but the VM they were running in might have been.  </p>
<p>I suspect a *lot* of servers these days are running inside VMs &#8211; and if you don&#8217;t need multi-threaded throughput, a uniprocessor machine eliminates quite a lot of potential problems.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-2 parent" id="comment-1310237">
				<div id="div-comment-1310237" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170922-00/?p=97065#comment-1310237">
			September 24, 2017 at 4:03 am</a>		</div>

		<p>That depends on the meaning of &#8220;uniprocessor systems&#8221;. Its been a while since we had special uniprocessor kernel builds. A modern system might support hot swappable CPUs so the core count is not fixed at boot.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1310265">
				<div id="div-comment-1310265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170922-00/?p=97065#comment-1310265">
			September 24, 2017 at 7:52 am</a>		</div>

		<p>I discovered a long time ago the uniprocessor kernel has a deadlock bug the multiprocessor bug doesn&#8217;t. If you try to read a handle from one thread and close it from another it will deadlock until the read finishes (which could be never). The multiprocessor kernel won&#8217;t deadlock on this.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1310305">
				<div id="div-comment-1310305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170922-00/?p=97065#comment-1310305">
			September 25, 2017 at 8:30 am</a>		</div>

		<p>Basically, uniprocessor kernels make a good number of optimizations based on the fact that there are only a processor, and thus, you can make some assumptions, like &#8220;read-modify-store instructions are always atomic&#8221;, or &#8220;there can&#8217;t be race conditions without context switches&#8221;. This allows you to save some instructions, and in some cases, even avoid switching to/from kernel mode. Which improves performance. But, as with every optimization, you risk introducing new bugs.</p>
<p>Anyway, the Windows kernel should be the most tested piece of software of history. Are you sure it really was a bug, and not a side effect of some documented behavior?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1310405">
				<div id="div-comment-1310405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170922-00/?p=97065#comment-1310405">
			September 26, 2017 at 6:00 pm</a>		</div>

		<p>If you can get a thread into an uninterruptible sleep it&#8217;s a security bug. I don&#8217;t remember trying terminate process to try to unwedge it but that thread was stuck in kernel.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>