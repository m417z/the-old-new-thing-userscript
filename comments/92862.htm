<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1223351">
				<div id="div-comment-1223351" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223351">
			January 18, 2016 at 7:35 am</a>		</div>

		<p>Exercise: With the provided algorithm, an empty part can only occur at the beginning and at the end, since partial cannot be equal to third and third * 2 simultaneously.</p>
<p>As such, check if we&#8217;re not in the first or last index before adding partitions up.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1223371">
				<div id="div-comment-1223371" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223371">
			January 18, 2016 at 8:18 am</a>		</div>

		<p>Given that empty parts have value 0, empty parts are only valid where the sum of the array is 0, and in that case third and third * 2 are both 0, so partial can be equal to both simultaneously.</p>
<p>For example, given: [-1, -1, 0, 2, -1, 1]</p>
<p>You can have:<br />
1: [], [], [-1, -1, 0, 2, -1, 1]<br />
2: [], [-1, -1, 0, 2], [-1, 1]<br />
3: [-1, -1, 0, 2], [], [-1, 1]<br />
4: [-1, -1, 0, 2], [-1, 1], []<br />
5: [-1, -1, 0, 2, -1, 1], [], []</p>
<p>Answer 3 has an empty part in the middle.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1223432">
				<div id="div-comment-1223432" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223432">
			January 18, 2016 at 9:22 am</a>		</div>

		<p>Right.  We could &#8220;normalize&#8221; the values such that the lowest would be 0, e.g. [0, 0, 1, 3, 0, 2], and apply this principle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1224011">
				<div id="div-comment-1224011" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Raidri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1224011">
			January 20, 2016 at 2:53 am</a>		</div>

		<p>You are missing one:<br />
6: [], [-1, -1, 0, 2, -1, 1], []</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1" id="comment-1223711">
				<div id="div-comment-1223711" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223711">
			January 18, 2016 at 10:10 pm</a>		</div>

		<p>Btw, I think it&#8217;s wrong to say &#8220;the hint is wrong&#8221;. The hint only directs you to a more convoluted way to solve the problem, but if you&#8217;re doing it right, you can follow the hint to solve it.</p>
<p>Just like in many case where the interview questions has hint to use recursive function, but the question can also be solved without recursive function. Both way should be correct as long as &#8220;the instruction to use recursive function&#8221; is not written in the main part of question.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1223911">
				<div id="div-comment-1223911" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223911">
			January 19, 2016 at 11:16 am</a>		</div>

		<p>Exercise (second take): The total == 0 must be special cased.  In this case, we increment partitions for each partial == 0, and return Math.max(0, partitions &#8211; 2).</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1223931">
				<div id="div-comment-1223931" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Holger Stenger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223931">
			January 19, 2016 at 3:07 pm</a>		</div>

		<p>Can you elaborate how you would count partitions for this special case?</p>
<p>The worst case is when all partials are 0 which happens when all array elements are 0. Luckily we can give explicit formulas for this case. For an array of length 0 containing only 0 the number of partitions with zero-length segments is \sum_{i=0}^n \sum_{j=0}^i 1 = (n+1)*(n+2)/2, without zero-length segments we have \sum_{i=2}^{n-1} \sum_{j=1}^{i-1} 1 = (n-2)*(n-1)/2, using index transformations and the identity \sum_{i=1}^n = n*(n+1)/2.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1223941">
				<div id="div-comment-1223941" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jswolf19</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223941">
			January 19, 2016 at 5:17 pm</a>		</div>

		<p>If empty partitions are legal, then this algorithm doesn&#8217;t take into account empty partitions at the beginning and end of the input array (assuming I&#8217;m running the code in my head correctly ^^;).<br />
For example, given the array [0,0,0], the algorithm outputs 6, but should be 10.</p>
<p>[], [], [0, 0, 0]<br />
[], [0], [0, 0]<br />
[], [0, 0], [0]<br />
[], [0, 0, 0], []<br />
[0], [], [0, 0]<br />
[0], [0], [0]<br />
[0], [0, 0], []<br />
[0, 0], [], [0]<br />
[0, 0], [0], []<br />
[0, 0, 0], [], []</p>
<p>Exercise: I think just swapping the ifs in the current algorithm would do it for you.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1223951">
				<div id="div-comment-1223951" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jswolf19</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223951">
			January 19, 2016 at 5:21 pm</a>		</div>

		<p>&#8220;doesn’t take into account empty partitions at the beginning and end of the input array&#8221; should be &#8220;doesn’t take into account empty partitions at the beginning of the input array&#8221;, as it does take into account the ones at the end&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1223961">
				<div id="div-comment-1223961" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jswolf19</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223961">
			January 19, 2016 at 5:26 pm</a>		</div>

		<p>Exercise (second take): You would just want to not go to the end of the array.<br />
i &lt; a.length &#8211; 2 should do it ^^;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1223981">
				<div id="div-comment-1223981" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jswolf19</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223981">
			January 19, 2016 at 5:45 pm</a>		</div>

		<p>Exercise (third take, and having hopefully learned not to click &#8220;Post Comment&#8221; buttons so hastily):</p>
<p>You *do* want to swap the ifs (which removes the counting of empty parts in the middle), and you want to loop to the penultimate array item, so a.length &#8211; 1 instead of a.length &#8211; 2, but you only want to add to firstpart if there are at least 2 elements left (to remove the counting of empty parts at the end), so you could add a condition to the first if statement, or special case out the final partitions increment check.</p>
<p>  for (i = 0; i &lt; a.length &#8211; 1; i++) {<br />
    partial += a[i];<br />
    if (partial == third * 2) partitions += firstpart;<br />
    if (partial == third &amp;&amp; i &lt; a.length &#8211; 2) firstpart++;<br />
  }</p>
<p>or</p>
<p>  for (i = 0; i &lt; a.length &#8211; 2; i++) {<br />
    partial += a[i];<br />
    if (partial == third * 2) partitions += firstpart;<br />
    if (partial == third) firstpart++;<br />
  }<br />
  partial += a[a.length &#8211; 1];<br />
  if (partial == third * 2) partitions += firstpart;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>