<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1279395">
				<div id="div-comment-1279395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279395">
			January 6, 2017 at 8:54 am</a>		</div>

		<p>Typo alert:  The ยน footnote is in the body twice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1279415">
				<div id="div-comment-1279415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279415">
			January 6, 2017 at 1:49 pm</a>		</div>

		<p>What kind of a real world task would require a code that is sorting &#8220;heavy&#8221; objects? All me had to do is to sort pointers by keys, any general purpose library can handle this excellently.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1279425">
				<div id="div-comment-1279425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279425">
			January 6, 2017 at 1:50 pm</a>		</div>

		<p>Even if you&#8217;re sorting pointers, the calculation of the sort key can be expensive.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1279435">
				<div id="div-comment-1279435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279435">
			January 6, 2017 at 2:02 pm</a>		</div>

		<p>My objects are coming with keys in their hands. If they made it up to be an unordered bunch of objects, then I will extract their sorting preferences and put it into std::map. No way to fancy algorithms in my code base.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4" id="comment-1279445">
				<div id="div-comment-1279445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279445">
			January 6, 2017 at 2:06 pm</a>		</div>

		<p>Then you&#8217;re lucky. I have a bunch of objects that I need to sort by things like &#8220;distance to nearest ATM which matches the criteria specified by the user&#8221;. Those objects didn&#8217;t come with those keys in their hands. I have to generate the keys when the user clicks Submit.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1279455">
				<div id="div-comment-1279455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279455">
			January 6, 2017 at 2:11 pm</a>		</div>

		<p>If I have to sort my pointers by heavy predicate, std::sort is good enough. Algorithm that is doing least possible comparisons was not yet found. And my code base is not a scientific playground, we have to guarantee quality and performance.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1279465">
				<div id="div-comment-1279465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279465">
			January 7, 2017 at 5:00 am</a>		</div>

		<p>&#8220;If I have to sort my pointers by heavy predicate, std::sort is good enough&#8221;<br />
Since that can be several orders of magnitudes be less efficient than the shown code here I guess you either don&#8217;t have really heavy predicates or your performance targets are weaker than Raymonds. </p>
<p>Caching keys for the comparison is a pretty standard approach &#8211; .NET&#8217;s OrderBy does it out of the box (so I guess there&#8217;s one standard function that does it ;) ). I&#8217;d usually sort pointers if I have heavy objects, but the apply_permutation` solution is intriguing &#8211; there are situations where this would give better performance and simplify the code.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1279495">
				<div id="div-comment-1279495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279495">
			January 9, 2017 at 6:27 am</a>		</div>

		<p>I&#8217;ve implemented something very similar to the code here to sort a list of OOP COM objects by a user selected property. The previous implementation (std::sort + custom predicate) did 2 * N log N COM calls, the new one had N, which resulted in a huge speed up.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1279496">
				<div id="div-comment-1279496" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279496">
			January 9, 2017 at 10:47 am</a>		</div>

		<p>Decorate, celebrate, don&#8217;t undecorate until March&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>