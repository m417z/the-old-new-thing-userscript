<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-312903">
				<div id="div-comment-312903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-312903">
			October 14, 2005 at 10:47 am</a>		</div>

		<blockquote><p>
  For one thing, leaving junk behind to be<br />
  <br />&gt; cleaned up is just plain sloppy. It suggests<br />
  <br />&gt; that your program is too lazy (or stupid) to<br />
  <br />&gt; keep track of its own resources and has<br />
  <br />&gt; abdicated this to the safety net. It&#8217;s like<br />
  <br />&gt; throwing your clothes on the floor because you<br />
  <br />&gt; know your mother will eventually come by to<br />
  <br />&gt; pick it up and put it away.</p>
<p>I guess garbage collection is evil, then, too, right?  After all, leaving your allocated memory around for the garbage collector to pick up is the same sort of &quot;sloppy&quot;.</p>
<p>(True, garbage collection isn&#8217;t a safety net.  And the &quot;safety net&quot; reason, and the &quot;massive clean-up will take forever&quot; reason, are both good reasons to clean up your GDI objects.  But I don&#8217;t think this one is.  One language&#8217;s &quot;sloppy&quot; is another language&#8217;s &quot;feature which will save a lot of programmer time&quot;.)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-312923">
				<div id="div-comment-312923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-312923">
			October 14, 2005 at 11:03 am</a>		</div>

		<p>The garbage collector is designed to be very efficient at cleaning up behind you, and that is its purpose. The managed programming model is to put the burden of object lifetime management on the garbage collector, which gladly accepts this responsibility.</p>
<p>The window manager was not designed to be very efficient at cleaning up behind you, because that&#8217;s not its purpose. The unmanaged programming model is to put the burden of object lifetime management on the application.</p>
<p>Use each tool as it was intended.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-312933">
				<div id="div-comment-312933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-312933">
			October 14, 2005 at 11:12 am</a>		</div>

		<p>Well a secure operative system is intended to cleanup leaked resources (to make them available for other programs) so it&#8217;s not using in another way than intended. </p>
<p>Also the application programmer can save much time and use it to go on the market before competition and/or improve the program in other ways. Also I find it difficult that users will blame the application if the system becomes a little slower after it has been closed, they most probably will blame the 160 useless gigabytes of useless software they&#8217;ve installed or spyware or in the end windows itself (thus supporting fast resources recollecting ultimately becomes your problem and not the application programmers one).</p>
<p>The last thing a user will evaluate of a software program is how much time it takes to close..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-312943">
				<div id="div-comment-312943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-312943">
			October 14, 2005 at 11:40 am</a>		</div>

		<p>&quot;You don&#8217;t want to reward the people who are abusing you.&quot;</p>
<p>While I agree that you don&#8217;t necissarily want to encourage poor programming habits, in the long run this doesn&#8217;t exactly punish the develper, because if they are taking advantage of the system in this way, they don&#8217;t really care or know anyway. What it does is punishes the end user who needs to use the software.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-312953">
				<div id="div-comment-312953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Derek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-312953">
			October 14, 2005 at 11:56 am</a>		</div>

		<p>Kat, that&#8217;s not at all true.  Users notice when their system regularly hangs immediately after closing a particular app.  What they don&#8217;t know is why it happens.  (I&#8217;m sure there are other potential reasons as well.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-312983">
				<div id="div-comment-312983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-312983">
			October 14, 2005 at 1:29 pm</a>		</div>

		<p>&quot;For one thing, leaving junk behind to be cleaned up is just plain sloppy&quot;<br />
<br />Counterarguments:<br />
<br />&#8211; Why would I risk slowing down my exit code by swapping in code and/or data, knowing that the system <em>must</em> do the work, too?<br />
<br />&#8211; Why should every developer spend time writing, debugging and optimizing cleanup code, if Microsoft could do it correctly once, and Microsoft&#8217;s work would be easier because the OS knows that there is nothing running anymore in the application?<br />
<br />&#8211; Why would I spend time writing and debugging cleanup code if I could also spend that time on features, usability, whatever?</p>
<p>And yes, I do know that there often are valid arguments in favor of cleaning up things, but leaving junk behind to be cleaned up not always is sloppy.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-312993">
				<div id="div-comment-312993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-312993">
			October 14, 2005 at 1:34 pm</a>		</div>

		<p>When your component is loaded, used, and unloaded, you need to clean up everything when you&#8217;re unloaded. You have to write this cleanup code anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-313013">
				<div id="div-comment-313013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313013">
			October 14, 2005 at 2:20 pm</a>		</div>

		<p>Would you have a run-down of GDI table sizes and desktop heap, on a per OS basis? (including x64 and Vista of course&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-313023">
				<div id="div-comment-313023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313023">
			October 14, 2005 at 2:39 pm</a>		</div>

		<p>As Raymond pointed out, if your component is being loaded and unloaded a lot in the same process context, cleanup is required.</p>
<p>Also, Windows programming in general is full of software that can&#8217;t run longer than 24 hours because of resource leaks.</p>
<p>Read this post by Larry O.  Learn from how he got burned by doing something that was &quot;just good enough&quot;.</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/larryosterman/archive/2005/10/14/481137.aspx" rel="nofollow">http://blogs.msdn.com/larryosterman/archive/2005/10/14/481137.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-313033">
				<div id="div-comment-313033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Almost Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313033">
			October 14, 2005 at 4:43 pm</a>		</div>

		<p>My favourite text editor leaks GDI resources slowly over time.  After a really long editing session, the window manager slows to a crawl.  (Closing and reopening the offending program solves that issue).</p>
<p>Developers should cleanup their resources as they use them.  Waiting for the end to come would result in even more ill-behaved programs that the slow the system while they are running.</p>
<p>I&#8217;ll be happen when eventually all programming is done in a managed garbage collected environment and these issues become a thing of the past.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-313053">
				<div id="div-comment-313053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leona Helmsley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313053">
			October 14, 2005 at 6:31 pm</a>		</div>

		<p>When I check out of a good hotel, I only pack up what I want to take with me.  I don&#8217;t expect to have to clean up.  That is the job of the maid.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-313073">
				<div id="div-comment-313073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313073">
			October 14, 2005 at 8:40 pm</a>		</div>

		<p>I am stunned to see so many people defending resource leaks.</p>
<p>Please let me know what programs you work on so I will know what to stay away from.</p>
<p>I mean, come on people, you requested a limited OS resource (GDI object, USER object, memory, etc).  Are you seriously so lazy that you can&#8217;t even bother to give it back when you are done with it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-313093">
				<div id="div-comment-313093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.foxyshadis.com' rel='external nofollow' class='url'>foxyshadis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313093">
			October 14, 2005 at 10:41 pm</a>		</div>

		<p>It is terribly annoying when a program that has 200 megs in leaked resources (like firefox 1.0x) closes and has to page in all of that just to release it. I have no idea if that&#8217;s the fault of the program&#8217;s resource freeing or the system&#8217;s safety net kicking in though.</p>
<p>It&#8217;s much more annoying trying to do other things while the program that leaked all over my ram gets paged in and out in the first place, of course. Resource leaks of any sort are usually the only things that have me genuinely complaining to developers, rather than just requesting or complimenting.</p>
<p>Remember, managed memory isn&#8217;t a panacea, you can leak resources just as badly in a managed environment with bad scope, broken pools, or incorrectly destructing. Firefox is built in a managed framework on top of C++ and was proof of that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-313103">
				<div id="div-comment-313103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Purplet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313103">
			October 15, 2005 at 4:39 am</a>		</div>

		<p>Actually firefox is quite fast and didn&#8217;t give me a problem once. (It&#8217;s funny because I first switched from IE to Opera for a leak problem which happened on Win2000 only &#8211; as now probably solved)</p>
<p>Second I think there is a double misunderstanding between defenders and attackers of leaked resources. Of course resources allocated temporarily must be freed, otherwise your program has a limited life-span before crashing and slows the system to a crawl.</p>
<p>The question, however raises in multiple facets, I think, for those &quot;always on&quot; resources &#8211; whose lifetime should effectively end at the program end. Like dynamically loaded plugins/scripts, configuration data, main data structures, etc.</p>
<p>Third, a funny thought of mine, yesterday.<br />
<br />Let&#8217;s suppose for whatever reason, that my program has some absurd data structure like a map&lt;string, map&lt;string, vector&lt;int&gt;&gt;&gt; allocated  at startup (or during program use but never released because always used &#8211; not all programs are of the file/new/open/save kind..). If the structure is quite complex, releasing its memory could be quite expensive (all string, vector and maps destructors which are in any case useless, all those heap operations, etc). There is an high chance that by leaving it unallocated means that the OS just VirtualFree some number of memory blocks. It has the potential of being really really faster. Also if for whatever reason the structure is paged out on disk, it doesn&#8217;t really need to page in the allocated and soon to be freed memory. There is the problem of non executed destructors, but this is hardly a problem if brain was used when programming (a destructor should only contain instructions which releases other allocated resources). </p>
<p>And fourth I don&#8217;t really think for a big portion of the software market really matters if the PC reacts badly immediately after closing a program. For example I guess that for videogames it&#8217;s a no problem. For 3d modeling software the same (and believe me, 3dsmax surely leaves something to be released, but that&#8217;s is the smallest of its problems). </p>
<p>That said, on a programmer&#8217;s point of view, even leaks not compromising program functionality (always-on resources) should be fixed. On a real life point of view, spending less money/time in development, or adding a new feature, or fixing *real* bugs may be wiser. </p>
<p>So my opinion : given infinite time/budget, even the smallest and non influential resource leak should be solved. In real life, things may change depending on a thousand factors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-313133">
				<div id="div-comment-313133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Puckdropper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313133">
			October 15, 2005 at 7:44 pm</a>		</div>

		<p>You mean this is bad:<br />
<br />concordance::~concordance()<br />
<br />  {<br />
<br />    //I&#8217;m too lazy to write this now.<br />
<br />    }</p>
<p>[I know it is&#8230; ;-)]</p>
<p>I&#8217;m willing to bet not all resource leaks are as easy to spot as my code example above.  Is there anything a programmer/developer can do to make sure he&#8217;s getting everything?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-313163">
				<div id="div-comment-313163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313163">
			October 16, 2005 at 1:36 pm</a>		</div>

		<p>&quot;You don&#8217;t want to reward the people who are abusing you.&quot;</p>
<p>So what about all those abusive apps you&#8217;ve rewarded in the name of back-compatability?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-313173">
				<div id="div-comment-313173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313173">
			October 16, 2005 at 1:44 pm</a>		</div>

		<p>They still run, but the apps that follow the rules run better.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-313183">
				<div id="div-comment-313183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.xerxesb.no-ip.org' rel='external nofollow' class='url'>Rex</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313183">
			October 16, 2005 at 9:31 pm</a>		</div>

		<blockquote><p>
  Because when you design a system, you focus<br />
  <br />&gt;on optimizing the case where people are<br />
  <br />&gt;using your system responsibly and in the<br />
  <br />&gt;manner intended. You don&#8217;t want to reward the<br />
  <br />&gt;people who are abusing you.</p>
<p>Funny you say that&#8230;.i remember several posts of yours telling of how the Windows 95 team spent considerable time and resources fixing programs that didnt work in Windows 95 (eg: SimCity) because they were misbehaving and performing non-standard system operations. The OS was changed in a lot of these cases to check if the offending program was running and would change the system environemnt to keep the user application happy.</p>
<p>i&#8217;d just be curious to know where you would draw the line between system design and legacy compatibility, given the above example?</p>
<p>ta</p>
<p>-x</p>
<p>(ps&#8230;not trying to have a go at anyone)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-313193">
				<div id="div-comment-313193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313193">
			October 16, 2005 at 9:38 pm</a>		</div>

		<p>I think people are misinterpreting the sense of &quot;reward&quot; here. I mean reward relative to using the system as designed. You never want to be in the position where doing the wrong thing gives you an advantage. SimCity did the wrong thing, but it was not rewarded with any advantage over a program that does the right thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-313213">
				<div id="div-comment-313213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lamb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313213">
			October 17, 2005 at 9:05 am</a>		</div>

		<p>It&#8217;s far from clear that&#8217;s there&#8217;s any benefit to having a long-winded one shot cleanup in the shutdown phase of an /application/. Aside from the fact that Windows arbitrarily punishes the user if you don&#8217;t do it, why should you?</p>
<p>Raymond, IMO there&#8217;s no way to achieve your goal here. It&#8217;s always going to be cheaper for me to let the OS discard all my long term resources automatically than for me to free 99.9% of it by painstaking means and then let the OS finish off. We can guess that this will be true by looking at a smaller system. Suppose I have a fixed size allocator, e.g. because I use thousands of small fixed size structures. Your argument says that at the end of the program I should individually free up all the remaining allocations. But actually it&#8217;s always going to be faster to just throw the whole lot away, and scaled up that means it&#8217;s faster to let the OS throw all my allocations away too.</p>
<p>Of course you can arbitrarily punish behaviour that you don&#8217;t like, but the people who then get hurt are users. The guys who wrote Unreal Tournament don&#8217;t care that you saved say 20 man days by doing it your way, they certainly aren&#8217;t going to spend extra man days on their project to help you out but the user who exits UT2k4 and finds her machine unresponsive for 5 seconds is going to blame Microsoft, after all Microsoft sold her a supposedly multitasking OS.</p>
<p>This sort of laziness in the interface code is what causes people to assert that e.g. BeOS is &quot;faster&quot;. It&#8217;s not faster, benchmarks confirm that, but it feels faster because the designers optimised to keep the UI responding. Users appreciate that.</p>
<p>In 1995 it might have been impressive that your UI clean-up doesn&#8217;t hang RC5 calculations, or (taking an example from early Mac OS) that your menu drawing code doesn&#8217;t freeze TCP/IP networking. This is 2005, desktop computers have come a long way in 10 years, it&#8217;s time UI house-keeping didn&#8217;t hang the UI either. Add this to Vista&#8217;s bug list Raymond, I guarantee it won&#8217;t be the least important thing &quot;fixed&quot; before they ship it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-313243">
				<div id="div-comment-313243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-313243">
			October 17, 2005 at 10:47 am</a>		</div>

		<p>I think people are still missing my point. I&#8217;m not talking about cleaning up memory on the heap (which can be cleaned up at one go by destroying the heap). I&#8217;m talking about systemwide shared resources like window handles. It&#8217;s not like the system can just &quot;destroy the window manager&quot; when your process exits.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-314373">
				<div id="div-comment-314373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob Riemersma</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-314373">
			October 20, 2005 at 7:58 am</a>		</div>

		<p>I think you may be misunderstanding your market.</p>
<p>Garbage-collected environments seem to be targeted at LOB developers (Cobol, Java, .Net) who want to deal with the platform as a simplified abstraction.  So just as Joe Cobol saw the computer as a decimal and text machine, a .Net guy wants to leave these kinds of cleanup as an excercise for the underlying platform (i.e. &quot;magic&quot;).</p>
<p>I don&#8217;t mean that as a criticism, more of an observation of the cat that&#8217;s been let out of the bag.  Sort of inevitable in the &quot;give &#8217;em an inch&#8230;&quot; vein.  It is a question of the expectation level that has been set.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-316463">
				<div id="div-comment-316463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MaxMax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051014-19/?p=33763#comment-316463">
			October 26, 2005 at 5:40 pm</a>		</div>

		<p>So, it seems that we (the programmers) should do the cleanup&#8230; So now I&#8217;ll ask:<br />
<br />How do you Unlock a LockResource? Is it safe to free a Resource that has been Locked?<br />
<br />Is it safe to use FreeResource (it&#8217;s deprecated)? Because it would be much easier to use a single function instead of a collection of five. If yes/no, what are the differences between FreeResource and DestroyAcceleratorTable/DestroyObject/&#8230;?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>