<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-332623">
				<div id="div-comment-332623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332623">
			December 22, 2005 at 10:11 am</a>		</div>

		<p>I think I would class that as a bug, especially as it is corrected when the range is changed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-332633">
				<div id="div-comment-332633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.radixtwo.com' rel='external nofollow' class='url'>Ytram</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332633">
			December 22, 2005 at 10:19 am</a>		</div>

		<p>I would tend to agree with Stu.  If it was a configurable property of the control, then it would be something you simply change to perform the way you want.</p>
<p>I think it&#8217;s worth noting that the updown control in .NET winforms does not behave the way Raymond described.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-332643">
				<div id="div-comment-332643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">skr&#229;llan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332643">
			December 22, 2005 at 10:23 am</a>		</div>

		<p>It&#8217;s both counter-intuitive AND illogic when the behaviour is inverted to the scrollbar.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-332663">
				<div id="div-comment-332663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jelovic.com' rel='external nofollow' class='url'>Dejan Jelovic</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332663">
			December 22, 2005 at 10:52 am</a>		</div>

		<p>The designers of some Windows API calls should be shot and left on an anthill to die.</p>
<p>Which brings me to a question: Is there a reason, in the 32-bit Windows world, to have a one API call perform multiple separate functions?</p>
<p>A typical function that needs to be broken up is LoadImage. It loads bitmaps, cursors and icons, from files and resources. To use it you must know in advance what type of resource you are loading, and you must cast its result to the desired type.</p>
<p>Is there a reason why we don&#8217;t have six functions (LoadBitmapFromFile, LoadBitmapResource, etc.) as entry points instead of this monstrousity?</p>
<p>Dejan</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-332673">
				<div id="div-comment-332673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Binsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332673">
			December 22, 2005 at 11:16 am</a>		</div>

		<p>I actually inverted the response of the updown control when I used it in a custom component, to make sure that it does work intuitively&#8230;</p>
<p>Thanks for telling me where this came from, that almost made it a logical choice! :D</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-332683">
				<div id="div-comment-332683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.csc.calpoly.edu/~bfriesen/' rel='external nofollow' class='url'>Brian Friesen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332683">
			December 22, 2005 at 11:17 am</a>		</div>

		<p>I&#8217;ve always wondered why spinner controls behave this way.  Thanks for the explanation Raymond.</p>
<p>Brian<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-332693">
				<div id="div-comment-332693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.apptranslator.com/blog' rel='external nofollow' class='url'>Serge Wautier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332693">
			December 22, 2005 at 12:24 pm</a>		</div>

		<p>This behaviour is a <em>blessing</em> : That way, devs (and testers) have a fairly immediate feedback when they forget to set the range (because there&#8217;s no such thing as a valid default range).</p>
<p>BTW, I always believed it was the reason for this behaviour: Force programmers to set the range.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cornedbee odd alt thread-odd thread-alt depth-1" id="comment-332703">
				<div id="div-comment-332703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CornedBee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332703">
			December 22, 2005 at 1:37 pm</a>		</div>

		<p>Serge: If the designers wanted to achieve this, I do hope they&#8217;d have been smart enough to set the default range to 0-0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-332713">
				<div id="div-comment-332713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fox Cutter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332713">
			December 22, 2005 at 1:52 pm</a>		</div>

		<p>skr&#229;llan: Actually this is exactly the same way a scroll bar behaves. Using a text file for example, if line 100 is at the top of the screen and you click up on the scroll bar like 99 is now at the top. </p>
<p>It just seems correct because the contests of the screen moved up even though the offset from the top of the page went down. The up-down control just shows more of it and it breaks the users mental picture of how the world works.</p>
<p>Luckily it is a very easy fix.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-332723">
				<div id="div-comment-332723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jerry Pisk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332723">
			December 22, 2005 at 2:16 pm</a>		</div>

		<p>I&#8217;m too lazy to try it &#8211; does the behavior change even if I change the range to 0 &#8211; 100? In either case it&#8217;s an obvious bug, different behavior based on set range is just wrong. Oh and is this documented, that the controls behave differently based on what range they&#8217;re set to?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-332733">
				<div id="div-comment-332733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://shazware.com' rel='external nofollow' class='url'>Steve Hazel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332733">
			December 22, 2005 at 2:25 pm</a>		</div>

		<p>if i recall, MSDN specifically states that this behavior is to force the app developer to set the range.  And if you ask me, the Win32 API is almost a perfect OS API.  Listen to all these java wimps whine&#8230;  Shame on you&#8230;:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-332653">
				<div id="div-comment-332653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332653">
			December 22, 2005 at 10:45 am</a>		</div>

		<p>It *is* a configurable property. See UDM_SETRANGE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-332763">
				<div id="div-comment-332763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyralessa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332763">
			December 22, 2005 at 7:19 pm</a>		</div>

		<p>And then there&#8217;s the .NET PrintPreviewDialog.  The up button scrolls to higher-numbered pages, and the down button scrolls to lower-numbered pages.</p>
<p>Trouble is, this being a document, you&#8217;d expect that you&#8217;d scroll down to page forward through it, just like you do in Word&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-332783">
				<div id="div-comment-332783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332783">
			December 22, 2005 at 9:10 pm</a>		</div>

		<blockquote><p>
  The up-down control is a victim of Windows&#8217;<br />
  <br />&gt; reversed y-axis.</p>
<p>Why isn&#8217;t the progress control a victim too?  If a progress bar is horizontal then it grows in order of increasing x.  If a progress bar is vertical then it grows in order of DECREASING y.  When you properly set the range of a vertical progress bar, it still grows in order of decreasing y.  If you want it to grow in order of increasing y then you get to roll your own because there&#8217;s no setting for it.</p>
<p>&gt; (Let&#8217;s leave right-to-left languages out<br />
  <br />&gt; of the picture for the purpose of this<br />
  <br />&gt; discussion.)</p>
<p>Ditto.  When I was taught that mathematical definitions of which axis is x and which is y depend on which country&#8217;s mathematical definitions you use, the example involved a country whose language is left-to-right.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-332803">
				<div id="div-comment-332803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://aundh.blogspot.com' rel='external nofollow' class='url'>JamesW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332803">
			December 23, 2005 at 2:40 am</a>		</div>

		<p>@Dejan Jelovic<br />
<br />&#8216;Which brings me to a question: Is there a reason, in the 32-bit Windows world, to have a one API call perform multiple separate functions? &#8216;</p>
<p>The HtmlHelp API is my &#8216;favourite&#8217; example of this. You get one function:</p>
<p>HWND HtmlHelp(<br />
<br />  HWND    hwndCaller,<br />
<br />  LPCSTR  pszFile,<br />
<br />  UINT    uCommand,<br />
<br />  DWORD   dwData<br />
<br />);</p>
<p>which does completely different things depending on which one of twenty values is placed in uCommand. Data is exchanged to and fro by casting strings, structs, whatever so that it fits into dwData. Who dreamt this one up? To the anthill with them!<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-332813">
				<div id="div-comment-332813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332813">
			December 23, 2005 at 5:16 am</a>		</div>

		<p>Well I may feed the troll, but I must note that anthill proposing dolt plainly doesn&#8217;t know what he&#8217;s talking about.</p>
<p>He obviously never did real systems programming in C and with real memory constrains and with the goal that API survives through the releases. Otherwise, he&#8217;d spare us from himself on this occasion.</p>
<p>An API call is a &quot;doorway&quot; between the user and the system. The smaller the door, the better it can be controlled: you don&#8217;t want to expose what you don&#8217;t have to. But the same stands for the number of the doors. When the C-style DLL based API is designed, the good thing is to spare the number of the function calls, even if the single API call branches to other functions inside of the DLL (for example, less GetProcAddress calls are needed to use your DLL in some scenarios). So the memory is really spared by reducing the number of API functions. Not to mention that the interface retained higher flexibility  &#8212; adding one more enumerated value for existing API function makes much less problems during the new releases of the API than always adding new function calls.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-332823">
				<div id="div-comment-332823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.soulsphere.org/' rel='external nofollow' class='url'>fraggle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332823">
			December 23, 2005 at 5:58 am</a>		</div>

		<p>So basically, the Windows developers were lazy and simplicity of implementation won over simplicity of interface?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-332833">
				<div id="div-comment-332833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://aundh.blogspot.com' rel='external nofollow' class='url'>JamesW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332833">
			December 23, 2005 at 6:37 am</a>		</div>

		<p>&#8216;dding one more enumerated value for existing API function makes much less problems during the new releases of the API than always adding new function calls. &#8216;</p>
<p>Taken to it&#8217;s logical conclusion we end up with each dll having a single exposed function:</p>
<p>DWORD DoStuff(COMMAND_ENUM, void* inOut);</p>
<p>Yes, that&#8217;s much better.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-332843">
				<div id="div-comment-332843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mirobin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332843">
			December 23, 2005 at 6:55 am</a>		</div>

		<p>James, that is pretty much how OS calls were made on my old Atari ST.  Set a few registers, trigger an interrupt, and check the registers again to fetch the result.  The interrupt handler had a giant jump table that took the various inputs and made the call you specified.</p>
<p>The C libraries that provided a friendly face on the OS calls were nothing more than a bunch of inline assembly functions &#8230;</p>
<p>Ah, the days when you could poke around at the hardware and have fun &#8230; :)</p>
<p>There IS a reasonable amount of compartmentalization you can make with an API design, especially when software will be written targeting multiple generations of your platform.  Delay load hell anyone?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-332903">
				<div id="div-comment-332903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://aundh.blogspot.com' rel='external nofollow' class='url'>JamesW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332903">
			December 23, 2005 at 11:49 am</a>		</div>

		<p>mirobin</p>
<p>That&#8217;s pretty much what the syscall interface does on OSes today. Load up some registers and trigger a switch to kernel mode. On Windows one register takes a value to determine the system service required and another takes a pointer to the parameters. A syscall/sysenter instruction does the rest. ntdll provides the friendly face hiding the assembly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-332933">
				<div id="div-comment-332933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332933">
			December 23, 2005 at 5:47 pm</a>		</div>

		<p>My all time favorite is this:</p>
<p>HRESULT IDirect3DDevice9::SetRenderState(<br />
<br /> D3DRENDERSTATETYPE State,<br />
<br /> DWORD Value<br />
<br />);</p>
<p>To see why, head on over to the documentation:</p>
<p>Values for the this render state are floating-point values. Because the IDirect3DDevice9::SetRenderState method accepts DWORD values, your application must cast a variable that contains the value, as shown in the following code example.</p>
<p>pDevice9-&gt;SetRenderState(D3DRS_FOGSTART, *((DWORD*) (&amp;fFogStart)));<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-332953">
				<div id="div-comment-332953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-332953">
			December 24, 2005 at 2:46 pm</a>		</div>

		<p>Interesting&#8230;  I always assumed it was backwards because it was implemented as a one-line listbox.  If a listbox contained the values 1, 2, 3, 4, then pressing the up arrow would move you to a lower number.  Another example is if you press the up arrow on a scrollbar, the position is decreased.  It&#8217;s just being (wrongly) consistent with the other controls.<br />
<br />Your (0,0) explaination makes no sense to me &#8212; everything in Windows would be backwards if that was the case.  I think you are just making this up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-333013">
				<div id="div-comment-333013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vince P</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-333013">
			December 25, 2005 at 10:34 pm</a>		</div>

		<p>Tony said:</p>
<p>&gt;Your (0,0) explaination makes no sense to me &#8212; everything in Windows would be backwards if that was the case. I think you are just making this up. </p>
<p>I say:<br />
<br />&lt;sarcasm&gt;Yeah, sure .. he&#8217;s just making it up. Had nothing better to do.&lt;/sarcasm&gt;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-333033">
				<div id="div-comment-333033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PatriotB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-333033">
			December 26, 2005 at 12:01 am</a>		</div>

		<p>JamesW re: HtmlHelp():</p>
<p>From what I understand, the HtmlHelp() function was designed to be as similar to the existing WinHelp() function as possible, hence the messiness.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-333053">
				<div id="div-comment-333053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ash</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-333053">
			December 26, 2005 at 5:29 am</a>		</div>

		<p>Did anyone try using the spinner on the &quot;partition size&quot; entry in W2k&#8217;s Disk manager?</p>
<p>Ok, Raymond knowns how to explain WHY things are the way they are, but when you are partitioning your HDD on w2k and using the spinner the largest partition size you get is 7 MBs, and it goes down to NEGATIVE values from there on, I think you won&#8217;t be amuzed.</p>
<p>The fact is the world doesn&#8217;t care about the amuzing logical/illogical games that some MS programmer is endulging.</p>
<p>I know it&#8217;s probably not Raymond&#8217;s problem and he probably never intended to defend anyone, but this just goes a long way to show you even a critical part of Windows is badly broken because of this problem.</p>
<p>AND FOUR SERVICE PACKS DIDN&#8217;T FIX IT!</p>
<p>Perhaps Raymond needs to write an internal email explaining WHY it is important to FIX this in production code even though it IS LOGICAL (according to him, at least.)</p>
<p>-Ash</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-333073">
				<div id="div-comment-333073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.michael-puff.de' rel='external nofollow' class='url'>Michael puff</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-333073">
			December 26, 2005 at 11:53 am</a>		</div>

		<p>Ui. That was my suggested topic. ;) Two days later I found out myself, that if you set the range, it behaves like it is supposed to be. Thanks for your explanation. But if you don&#8217;t know that you could go crazy about it. :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-333103">
				<div id="div-comment-333103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vince P</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-333103">
			December 26, 2005 at 8:24 pm</a>		</div>

		<p>Ash&#8217;s comments are interesting.  He&#8217;s B&amp;M about how this needs to get fixed&#8230; but how can it be &quot;fixed&quot; the broken behavior is what is now expected (in the cases where the ranges weren&#8217;t changed).. if MS suddenly &quot;fixed&quot; this &quot;critical&quot; problem then all those application would suddenly start doing the opposite thing.</p>
<p>Ash, how could you justify such hysterics to get this fix when the cure would be worse than the disease?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-333233">
				<div id="div-comment-333233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://com2kid.blogspot.com' rel='external nofollow' class='url'>com2kid</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-333233">
			December 29, 2005 at 12:53 pm</a>		</div>

		<p>0,0 at the upper left corner is perfectly logical, if you look back to CRTs.  CRTs shoot a beam across the screen, left to right, top to bottom, in the same order that you read a page.  In the early days of programming, when the programming actually had to deal with the CRT output directly, having coordinates start at the upper left made sense.</p>
<p>This is true if you look at command lines, the cursor starts in the upper left corner, when going to design GUIs, programmers just kept the same coordinate system, as the early GUIs also had to deal directly with the CRT as well.</p>
<p>Of course now days we are almost completely divorce from dealing with CRTs directly, but the upper left as 0,0 design idea is still useful, as when reading documents (the current interface metaphor), that is where our eyes head.  Of course there are exceptions to this rule (languages that read right to left), but with only four directions available, any configuration imaginable is only a sign flip away (so long as the given UI component allows us to flip directions!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-334553">
				<div id="div-comment-334553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051222-12/?p=32873#comment-334553">
			January 4, 2006 at 9:35 pm</a>		</div>

		<p>Thursday, December 29, 2005 12:53 PM by com2kid<br />
<br />&gt; 0,0 at the upper left corner is perfectly<br />
<br />&gt; logical</p>
<p>Yes, and furthermore it&#8217;s usually no problem.</p>
<p>&gt; left to right, top to bottom, in the same<br />
<br />&gt; order that you read a page</p>
<p>That depends on which &quot;you&quot; you&#8217;re talking to.  If reading a printed page on dead trees, then the usual order of reading is from top to bottom and from right to left.  In countries that aren&#8217;t either the world&#8217;s largest (by population) or historically influenced by that one, the order tends to prioritize horizontal, but either left-to-right or right-to-left depending again on which &quot;you&quot; you&#8217;re talking to.</p>
<p>Computer displays usually tend to prioritize horizontal except when applications such as Microsoft Word are preparing documents intended to be published on dead trees.  But again the left-to-right or right-to-left depends on which &quot;you&quot;.</p>
<p>Technical textbooks, even when printed on dead trees, tend to use the same orderings as computer displays instead of mass market books, magazines, and newspapers.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>