<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1218771">
				<div id="div-comment-1218771" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Vine [MSFT]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218771">
			December 14, 2015 at 7:52 am</a>		</div>

		<p>Ahhh the grotty corners of C++. I personally love to delve into undefined, implementation defines and unspecified behavior. Infact, one of my favorite small interview questions is getting the candidate to think about these things &#8211; given the definitions of them give or analyse examples of each of them and think about the dangers they may pose to your program.</p>
<p>It even gets better when you realize undefined behavior goes &#8220;back in time&#8221;&#8230; things that should&#8217;ve happened before the &#8216;undefined&#8217; behavior hit may never actually happen&#8230; it logically follows on if you think about compiler optimizations.</p>
<p>And remember Vines Law of Undefined Behavior: Any non-trivial C++ program has undefined behavior. Seriously though, having been in the industry for many years I&#8217;ve never seen any reasonably sized project not include some undefined behavior if you look hard enough and are pedantic enough. Scary if you thiink about it too hard.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1218832">
				<div id="div-comment-1218832" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218832">
			December 14, 2015 at 10:34 am</a>		</div>

		<p>For those scratching their heads, Raymond showed how undefined behavior can go back in time last year: <a href="https://blogs.msdn.microsoft.com/oldnewthing/20140627-00/?p=633/" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20140627-00/?p=633/</a> .</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1218781">
				<div id="div-comment-1218781" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218781">
			December 14, 2015 at 8:23 am</a>		</div>

		<p>I wrote that code 14 years ago in class to prove an apparently preposterous statement about Big-O. There&#8217;s no way you were in that class that day. How did you get it?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-matthew-manelahotmail-com odd alt depth-2 parent" id="comment-1218791">
				<div id="div-comment-1218791" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matthew+Manela' rel='external nofollow' class='url'>Matthew Manela</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218791">
			December 14, 2015 at 8:35 am</a>		</div>

		<p>What was the apparently preposterous statement?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1218861">
				<div id="div-comment-1218861" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218861">
			December 14, 2015 at 12:12 pm</a>		</div>

		<p>I&#8217;m not quite sure but I think I outright claimed factorial was constant time.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-2" id="comment-1218831">
				<div id="div-comment-1218831" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218831">
			December 14, 2015 at 9:45 am</a>		</div>

		<p>That&#8217;s where Raymond inadvertently lets us in on his time machine.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1218801">
				<div id="div-comment-1218801" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218801">
			December 14, 2015 at 9:13 am</a>		</div>

		<p>I wonder if any existing sufficiently-optimising compilers already perform transformation #1, by unrolling sufficiently many initial iterations (i.e. more than 12) to spot the undefined behaviour and just exit there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1218811">
				<div id="div-comment-1218811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218811">
			December 14, 2015 at 9:27 am</a>		</div>

		<p>Your table contains values that exceed the range of &#8220;int&#8221;.  It&#8217;d be better to have the table be of unsigned numbers, then return static_cast&lt;int&gt;(results[n]).</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1219101">
				<div id="div-comment-1219101" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://programmerman.net' rel='external nofollow' class='url'>Nick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219101">
			December 15, 2015 at 12:26 pm</a>		</div>

		<p>Undefined behavior is undefined. He put in a value that exceeds Int.MaxValue specifically to get the same undefined behavior that the factorial() function had doing the math itself.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3" id="comment-1219151">
				<div id="div-comment-1219151" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219151">
			December 15, 2015 at 5:09 pm</a>		</div>

		<p>No, it&#8217;s a genuine bug. I was hoping nobody would notice.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1218842">
				<div id="div-comment-1218842" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218842">
			December 14, 2015 at 11:13 am</a>		</div>

		<p>You could get really pedantic and say that you can do this for any kind of algorithm.<br />
A real computer is not a Turing machine but always finite, more like a linear bounded automaton.<br />
The halting problem is decidable for that. For a fixed input size you can say the algorithm runs in constant time, with the constant being the maximum required time for any input. Of course, in general that &#8220;constant&#8221; will be ridiculously large.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1218851">
				<div id="div-comment-1218851" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218851">
			December 14, 2015 at 12:02 pm</a>		</div>

		<p>True, but for factorial, the number of inputs for which a defined output exists is extremely low, which makes the problem interesting.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-3 parent" id="comment-1218921">
				<div id="div-comment-1218921" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218921">
			December 14, 2015 at 6:06 pm</a>		</div>

		<p>Yup. One can write a program to output value of Pi up to 300 decimal places instantaneously in similar way too.</p>
<p>3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-4 parent" id="comment-1218931">
				<div id="div-comment-1218931" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218931">
			December 14, 2015 at 6:09 pm</a>		</div>

		<p>Oh, look. We have a much wider screen space here. :)</p>
<p>Maybe we need word-break: break-all for .comment-body class.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1218941">
				<div id="div-comment-1218941" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218941">
			December 14, 2015 at 6:21 pm</a>		</div>

		<p>Unfortunately, word-break: break-all breaks too aggressively. It will happily split a medium-length word if it happens to come close to the end of a line. Maybe break-word will work.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1219092">
				<div id="div-comment-1219092" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmytro Dziuma</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219092">
			December 15, 2015 at 12:00 pm</a>		</div>

		<p>For such problems with fixed input size you can use memoization in most cases.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1218951">
				<div id="div-comment-1218951" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.excastle.com/' rel='external nofollow' class='url'>Joe White</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218951">
			December 14, 2015 at 7:10 pm</a>		</div>

		<p>I may be missing something obvious, but what does &#8220;EDOM&#8221; mean?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1219021">
				<div id="div-comment-1219021" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christopher Harrison</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219021">
			December 15, 2015 at 8:00 am</a>		</div>

		<p>Domain error: the argument is out of the domain of the function (modulo machine precision, in this case)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1219041">
				<div id="div-comment-1219041" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219041">
			December 15, 2015 at 8:53 am</a>		</div>

		<p>Domain error: <a href="http://en.cppreference.com/w/c/error/errno_macros" rel="nofollow">http://en.cppreference.com/w/c/error/errno_macros</a></p>
<p>Standard library functions in math.h set errno to EDOM if you call them with input parameters outside of the function&#8217;s domains (but only if you&#8217;ve enabled it by setting the flag MATH_ERRNO in the math_errhandling global).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1218971">
				<div id="div-comment-1218971" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">me</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218971">
			December 15, 2015 at 12:49 am</a>		</div>

		<p>The overflow case is not really undefined behavior. I don&#8217;t think anyone sane would take advantage of overflowing factorial calculations, but the overflow of multiplications is actually defined behavior. The assembly instruction MUL with 32-bit operands, actually does the multiplication and stores the result in the 64-bit register pair eax:edx, but C++&#8217;s * operator takes only the lower 32-bits from eax and discards edx. The MulDiv function uses this (defined) functionality.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1219011">
				<div id="div-comment-1219011" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219011">
			December 15, 2015 at 7:46 am</a>		</div>

		<p>It may be defined by the CPU, but it is undefined by the C/C++ language specification. Other CPUs may behave differently. (For example, the Alpha AXP does not have an edx register.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1218981">
				<div id="div-comment-1218981" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218981">
			December 15, 2015 at 2:33 am</a>		</div>

		<p>I find it easier to notice that 2ⁿ! ends in 2ⁿ-1 zero bits (in other prime bases pⁿ! would end in (pⁿ-1)/(p-1) zeros).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1219022">
				<div id="div-comment-1219022" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jrb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219022">
			December 15, 2015 at 8:21 am</a>		</div>

		<p>Here is a better way to do it with C++14. This works in Visual Studio 2015. This will work with any integer type.</p>
<p>#include </p>
<p>template<br />
constexpr T cfact(unsigned f) {<br />
	return f?cfact(f &#8211; 1)*f : 1;<br />
}</p>
<p>template<br />
constexpr T factorial_max_helper(T value_so_far, unsigned f) {<br />
	return std::numeric_limits::max() / value_so_far &lt; f ? f &#8211; 1 : factorial_max_helper(value_so_far*f, f + 1);<br />
}</p>
<p>template<br />
T factorial_helper(unsigned f, std::index_sequence indices) {<br />
	static constexpr T ar[] = { cfact(Indices)&#8230; };<br />
	return ar[f];<br />
}</p>
<p>template<br />
T factorial(unsigned f) {<br />
	return factorial_helper(f, std::make_index_sequence&lt;factorial_max_helper(1, 1) + 1&gt;{});<br />
}</p>
<p>You use it like this</p>
<p>#include<br />
int main() {</p>
<p>	unsigned i = 1;<br />
	std::cout &lt;&gt; i;<br />
	volatile auto r = factorial(i);<br />
	std::cout &lt;&lt; r &lt;&lt; &quot;\n&quot;;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1219032">
				<div id="div-comment-1219032" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jrb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219032">
			December 15, 2015 at 8:28 am</a>		</div>

		<p>Sorry, formatting got messed up. You can see the code at <a href="https://gist.github.com/jbandela/7fab41efe7cc37d7aef4" rel="nofollow">https://gist.github.com/jbandela/7fab41efe7cc37d7aef4</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1219581">
				<div id="div-comment-1219581" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">FrankHB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219581">
			December 16, 2015 at 10:24 pm</a>		</div>

		<p>It would be better to have explicit overflow behavior by need of users, since many people are still not aware of this &#8230;</p>
<p><a href="https://groups.google.com/a/isocpp.org/forum/?fromgroups#!topic/std-proposals/oQUOtYX4R3o" rel="nofollow">https://groups.google.com/a/isocpp.org/forum/?fromgroups#!topic/std-proposals/oQUOtYX4R3o</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1219861">
				<div id="div-comment-1219861" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Patrick Star</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219861">
			December 18, 2015 at 5:31 am</a>		</div>

		<p>If this code was part of a network service, or say, exposed to content in a web browser with some API, it would let an attacker read memory past the end of the array. Which, depending on what&#8217;s there, could very well be used to defeat ASLR.<br />
So, bad practice.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>