<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1356225">
				<div id="div-comment-1356225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356225">
			August 10, 2018 at 7:58 am</a>		</div>

		<p>I assume, &#8220;shift left&#8221; and &#8220;shift right&#8221; is defined to match the usual arithmetic meaning (shifting left =&gt; multiply byf 2), or do they even flip this, to match their bit numbering?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1356275">
				<div id="div-comment-1356275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356275">
			August 10, 2018 at 12:25 pm</a>		</div>

		<p>Yes, the shift left and right have the usual arithmetic meaning.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1356265">
				<div id="div-comment-1356265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://keyj.emphy.de/' rel='external nofollow' class='url'>KeyJ</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356265">
			August 10, 2018 at 8:39 am</a>		</div>

		<p>I&#8217;m wondering what hardware engineers think of rlwinm and friends.<br />
Are they straightforward to implement and we should ask ourselves why other ISAs didn&#8217;t have such instructions? Or are they a nightmare to implement, and a case could be made against having these instructions at all?<br />
How would one implement them in the first place? The rotation part is simple, it&#8217;s the mask/insert part that makes me wonder.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1356425">
				<div id="div-comment-1356425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356425">
			August 12, 2018 at 1:59 pm</a>		</div>

		<p>The hardware is fairly straightforward.</p>
<p>It basically exposes the nuts and bolts of one of the standard barrel shifter architectures (google &#8220;Energy-delay tradeoffs in 32-bit static shifter designs&#8221; for a paper that covers it). The mask generation is already there (the PPC version is more flexible than usual, but not in a way that adds significant complexity), so is a bunch of multiplexers that perform the masked insertion on the final output stage, since they&#8217;re necessary to implement arithmetic shifts anyway (logical shifts and rotates could make do with just a bunch of ANDs).</p>
<p>The reason other ISAs don&#8217;t have this has little to do with the circuity (this is rarely ever the reason) and everything to do with how many bits it takes to encode these instructions. Two 5-bit register numbers, three 5-bit immediates for the shift distance and mask begin/end positions, and two more bits to encode the variants (&#8220;rlwinm&#8221;, &#8220;rlwinm.&#8221;, &#8220;rlwimi&#8221;, &#8220;rlwimi.&#8221;) makes for 27 bits used; that&#8217;s 1/32th of the entire 32-bit opcode space (which is expensive real estate that you never get to take back!) dedicated to shifts. The original PPC designers clearly deemed that worthwhile, other ISAs thought differently.</p>
<p>PPC then got burned a few years later when they defined the 64-bit version. Direct 64-bit equivalents would need 6-bit shift distances and mask positions, for an extra 3 bits taken. But 30 bits (1/4 of the opcode space) is just too much. So 64-bit PPC keeps the same underlying HW for 64-bit shifts but doesn&#8217;t let you encode all combinations of the mask begin/end immediates anymore, just certain combinations deemed valuable (the 32-bit versions of instructions are still there and keep their generality though).</p>
<p>64-bit ARM (A64 encoding) found a good compromise: it has 3 basic &#8220;bitfield move&#8221; instructions (BFM, SBFM, UBFM) that usually disassemble to one of 15 (!) different aliases. BFM corresponds to PPC &#8220;rlwimi&#8221;, UBFM corresponds to PPC &#8220;rlwinm&#8221;, and SBFM has no direct equivalent in PPC and is effectively a &#8220;rlwinm&#8221; with sign extension of the result. But unlike PPC which lets you specify the shift amount and mask begin/end independently, A64 only gives you variants that either move a contiguous bitfield from anywhere to a field starting at bit 0, or a contiguous bitfield starting at bit 0 to anywhere. That means you only need two immediates (saving 6 bits, which puts us in totally manageable territory for instruction lengths), and the general anywhere-to-anywhere operation, if desired, can be done in two steps. (Move the target bits to bit 0 in the first step, and from there to their final destination in the second).</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1356505">
				<div id="div-comment-1356505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356505">
			August 13, 2018 at 8:27 am</a>		</div>

		<p>That is fascinating!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-even depth-1" id="comment-1356295">
				<div id="div-comment-1356295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356295">
			August 10, 2018 at 2:11 pm</a>		</div>

		<p>Once I learned a couple of things about PowerPC <a href="https://codegolf.stackexchange.com/a/87000/9298" rel="nofollow">for a code golf</a>, and I distinctly remember the awe discovering this mad instruction that could do the strangest things to bitfields. Along with barrel shifter you get for free in a lot of ARM instructions, it made me think that these RISCy architectures try to compensate complex instructions with creative usage of shifts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even thread-odd thread-alt depth-1 parent" id="comment-1356345">
				<div id="div-comment-1356345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356345">
			August 11, 2018 at 4:10 pm</a>		</div>

		<p>I don&#8217;t know how others feel, but this instruction doesn&#8217;t feel very RISC-like to me.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1356385">
				<div id="div-comment-1356385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew Moskevitz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356385">
			August 12, 2018 at 6:26 am</a>		</div>

		<p>It is called Reduced ISC not Minimal ISC&#8230;  :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1356395">
				<div id="div-comment-1356395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356395">
			August 12, 2018 at 7:09 am</a>		</div>

		<p>RISC is defined by minimising addressing modes, only performing memory access with dedicated load/store instructions, and minimising interlocks.  There&#8217;s nothing in these instructions that violates the core RISC values.  They don&#8217;t access memory, they don&#8217;t have exotic addressing modes, they access at most two source registers and one destination register (plus condition/exception codes if applicable).  The only thing that&#8217;s a bit un-RISC is that rlwimi implicitly uses its destination as a source.  The mask generation isn&#8217;t actually particularly complex in silicon &#8211; it&#8217;s no worse than a full lookahead barrel shifter.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1356355">
				<div id="div-comment-1356355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Younes Manton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356355">
			August 11, 2018 at 8:37 pm</a>		</div>

		<p>&gt; Exercise: How would you do a division by a power of two that rounds toward positive infinity?</p>
<p>How about this:</p>
<p>; r3 = dividend, quotient rounded to +inf<br />
; r4 = divisor_log2<br />
sraw r5, r3, r4<br />
oris  r3, r3, 0x8000<br />
sraw r3, r3, r4<br />
addze r3, r5</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1356785">
				<div id="div-comment-1356785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356785">
			August 17, 2018 at 7:02 am</a>		</div>

		<p>If you can assume that the value is not 0x80000000, then</p>
<p>subf ra, ra, 0<br />
sraw rd, ra, rb (or rlwinm if rb is a constant)<br />
subf rd, rd, 0</p>
<p>But if 0x80000000 is a possibility, then I was going to add 2^rb-1 before shifting, but it looks like your solution is cleverer.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1356415">
				<div id="div-comment-1356415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356415">
			August 12, 2018 at 10:20 am</a>		</div>

		<p>I&#8217;m reminded of OISC instruction sets (which have exactly one instruction and therefore do not need opcodes).  The traditional one instruction is &#8220;subtract and branch if less than or equal to zero,&#8221; but I have to wonder how much complexity you would need to add to rlwinm to make it Turing-complete all by itself.  Probably just some branch semantics, but maybe if you can use the program counter as a destination, you don&#8217;t even need that.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>