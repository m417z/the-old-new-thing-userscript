<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1154773">
				<div id="div-comment-1154773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154773">
			October 9, 2014 at 7:30 am</a>		</div>

		<p>Some time indeed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154793">
				<div id="div-comment-1154793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154793">
			October 9, 2014 at 8:07 am</a>		</div>

		<p>I suppose it&#39;s possible to map it with a device driver but if somebody pulls that they get what they deserve.</p>
<p>(Device drivers can access memory above the licensed memory limit so this is trivial in comparison.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154833">
				<div id="div-comment-1154833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154833">
			October 9, 2014 at 8:59 am</a>		</div>

		<p>&quot;If the 64KB zone did not exist, then somebody could pass a buffer that straddles the 2GB boundary, and the kernel mode validation layer would have to detect that unusual condition and reject the buffer.&quot;</p>
<p>How does it help? If I pass a 128k buffer that starts at 127k below the 2gb boundary then it will still straddle the boundary.</p>
<p>If you can&#39;t write that kind of validation and test it properly then you&#39;re probably not supposed to be writing operating systems.</p>
<div class="post">[<em>If you have a no-man&#39;s land, then the straddled buffer will hit a no-access page, and validation will fail automatically. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154843">
				<div id="div-comment-1154843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154843">
			October 9, 2014 at 9:48 am</a>		</div>

		<p>@smf &#8211; right, the processor will catch the attempt. &nbsp;No software need check this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1154853">
				<div id="div-comment-1154853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154853">
			October 9, 2014 at 10:24 am</a>		</div>

		<p>@smf: The Windows kernel checks that every page of every buffer parameter passed to a system call is accessible before starting work on the request.</p>
<p>&quot;When a user-mode application calls the Nt or Zw version of a native system services routine, the routine always treats the parameters that it receives as values that come from a user-mode source that is not trusted. The routine thoroughly validates the parameter values before it uses the parameters. In particular, the routine probes any caller-supplied buffers to verify that the buffers are located in valid user-mode memory and are aligned properly.&quot;</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff565438(v=vs.85).aspx">msdn.microsoft.com/&#8230;/ff565438(v=vs.85).aspx</a></p>
<p>Drivers are supposed to call the Zw version of the routine if the data is already in kernel space and/or has been validated already, or the Nt version if the data originated from user-mode and needs to be validated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154863">
				<div id="div-comment-1154863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">s</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154863">
			October 9, 2014 at 10:55 am</a>		</div>

		<p>@smf &#8211; since you need to do the page accessibility check anyway, getting the check for straddling the address space for free is nice though. You always get fewest bugs in the code you didn&#39;t need to write.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154873">
				<div id="div-comment-1154873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154873">
			October 9, 2014 at 12:13 pm</a>		</div>

		<p>&quot;[If you have a no-man&#39;s land, then the straddled buffer will hit a no-access page, and validation will fail automatically. -Raymond]&quot;</p>
<p>Is the memory above 2gb marked as valid and therefore excluded because of a different check?</p>
<div class="post">[<em>Since the check is made in kernel mode, the memory above 2GB is valid to kernel mode. The validation code checks that the buffer does not end above the 2GB boundary. So technically, the no-man&#39;s land isn&#39;t required, but it&#39;s nice to have defense in depth. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle odd alt thread-odd thread-alt depth-1" id="comment-1154883">
				<div id="div-comment-1154883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154883">
			October 9, 2014 at 12:30 pm</a>		</div>

		<p>@smf: Raymond&#39;s last sentence should hint to the answer to this:</p>
<p>&quot;(Obviously, the no-man&#39;s land moves if you set the /3GB switch.)&quot;</p>
<p>In other words, this is in reference to a 32-bit process&#39;s address space on a 32-bit OS. &nbsp;In that context, the memory above 2GB isn&#39;t accessible to the process anyway and would fail regardless. &nbsp;If you&#39;re on a 64-bit OS or use the /3GB switch on a 32-bit OS, then the no-mans land moves to right before the 4GB or 3GB barrier, respectively. &nbsp;I would presume that a 64-bit process would have a similar no-man&#39;s land at the end of its address space, though it would be a lot harder to hit up against (well, barring intentionally doing so, of course).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154893">
				<div id="div-comment-1154893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154893">
			October 9, 2014 at 1:58 pm</a>		</div>

		<p>Wouldn&#39;t it work just as well to have the no-man&#39;s land be page at 2GB (or /3GB)? If you tried to access every page of a buffer and hit the one at 2GB, it would still fault before accessing any actual kernel memory.</p>
<p>Of course you can&#39;t change it now, because there&#39;s probably some important app that crashes if you give it that chunk of addresses.</p>
<div class="post">[<em>One page would have been enough for this purpose, but allocation granularity is 64KB, so taking one page off the table is the same as taking 64KB off the table because there is no way to allocate the other 60KB. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1154903">
				<div id="div-comment-1154903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154903">
			October 9, 2014 at 2:56 pm</a>		</div>

		<p>Simply probing usermode pages is not good enough. You have to copy the data from usermode buffers while under try/except block to your internal buffers. This also makes probing unnecessary.</p>
<p>If you only probe pages, they can become invalid in the meantime if another thread unmaps them.</p>
<p>Probing only makes sense for MmProbeAndLock pages function on an MDL, to prepare the MDL for an I/O operation.</p>
<div class="post">[<em>Yes, if you are capturing the entire buffer, then probing is redundant. If you&#39;re capturing only part of it, you still want to ensure the whole buffer is valid. Or maybe you&#39;re not capturing it at all but you plan on <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/05/12/10163578.aspx">writing to it later</a>, so you want to fail up front if possible. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154913">
				<div id="div-comment-1154913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154913">
			October 9, 2014 at 3:01 pm</a>		</div>

		<p>@Gabe: &quot;Wouldn&#39;t it work just as well to have the no-man&#39;s land be page at 2GB (or /3GB)?&quot;</p>
<p>No, because of the Alpha quirk.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154933">
				<div id="div-comment-1154933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Muzer_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154933">
			October 9, 2014 at 4:28 pm</a>		</div>

		<p>@Henke37 &quot;Some time indeed.&quot; &#8211; I was nine years old when that linked article was published.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154943">
				<div id="div-comment-1154943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">j b</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154943">
			October 9, 2014 at 4:44 pm</a>		</div>

		<p>@muzer&#8230;</p>
<p>&quot; I was nine years old when that linked article was published.&quot;</p>
<p>So when I was your age, I was halfway in my IT studies, two and a half years to go. Not that THAT neecessarily indicates anything significant. I would just like to mention it :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154953">
				<div id="div-comment-1154953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Muzer_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154953">
			October 9, 2014 at 5:28 pm</a>		</div>

		<p>@j b: Well, I&#39;m now halfway through my Masters undergrad degree in Computer Science (I&#39;m on the third year of a four-year course), so yeah, sounds about right :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154963">
				<div id="div-comment-1154963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154963">
			October 9, 2014 at 5:39 pm</a>		</div>

		<p>Does the 64K VirtualAlloc() granularity discussed in the referenced article still exist in modern versions of Windows? I&#39;ve been trying to find references to it but the current VirtualAlloc() docs, <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa366887%28v=vs.85%29.aspx">msdn.microsoft.com/&#8230;/aa366887%28v=vs.85%29.aspx</a>, only talk about page granularity, while older (1990s) MSDN discussions were quite explicit about it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154973">
				<div id="div-comment-1154973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154973">
			October 9, 2014 at 8:10 pm</a>		</div>

		<p>@Dave. The documentation you link to says to call the GetSystemInfo() function to determine the address granularity of the host system. On my test machine it reports 64kb. 64-bit Windows Server 2008 R2 (Standard) with Intel processor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154983">
				<div id="div-comment-1154983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154983">
			October 9, 2014 at 9:34 pm</a>		</div>

		<p>Evan: What I&#39;m saying is that now that Alpha is no longer supported, you could move the no-man&#39;s land to the first page of kernel memory without affecting the buffer validation code.</p>
<p>Obviously there&#39;s no reason to do that &#8212; if you&#39;re that desperate for address space, just use 64 bits &#8212; just that it is possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154923">
				<div id="div-comment-1154923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154923">
			October 9, 2014 at 4:02 pm</a>		</div>

		<p>@Gabe:</p>
<p>Raymond&#39;s &quot;One page would have been enough for this purpose&quot; response made me realize I may have misread your question. If you&#39;re asking why the dead space isn&#39;t a single page, the 64K size answers. If you&#39;re asking why the dead space isn&#39;t *at* 2GB instead of just below it (regardless of size), that&#39;s because of the Alpha quirk and how loading addresses in the (2GB &#8211; 64KB) to 2GB range takes an extra instruction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154993">
				<div id="div-comment-1154993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Engywuck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1154993">
			October 10, 2014 at 12:13 am</a>		</div>

		<p>@Gabe: especially if some programs rely on this implementation detail (and it&#39;s quite probable at least some LOB ones do). At least it would take quite an effort to ensure that noone is inconvenienced too much by it, so the -100 points probably never get to a point where they see the 0 line :-)</p>
<div class="post">[<em>#define INVALID_POINTER_VALUE 0x7FFFFFFF<br />-Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155003">
				<div id="div-comment-1155003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1155003">
			October 10, 2014 at 3:39 am</a>		</div>

		<p>&quot;[Since the check is made in kernel mode, the memory above 2GB is valid to kernel mode. The validation code checks that the buffer does not end above the 2GB boundary. So technically, the no-man&#39;s land isn&#39;t required, but it&#39;s nice to have defense in depth. -Raymond]&quot;</p>
<p>The problem I see with defence in depth is that if you need it then how much defence do you actually have. Unless the exploit for each defence is mutually exclusive (so both defences cannot possibly be breached at the same time), then it&#39;s no better than security through obscurity.</p>
<p>I can&#39;t argue that an extra 64k or the cycles taken by the check would be noticeable if you took one of the defences down, but I am worried that you think that either of them is breachable at all.</p>
<p>If the page check can be breached below 2gb then there are privacy issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155013">
				<div id="div-comment-1155013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1155013">
			October 10, 2014 at 5:37 am</a>		</div>

		<p>@smf:</p>
<p>The question here is how much defence do you think they have for the kernel/user boundary? When we have some major security issue here, do you think that they would do something like just use the buffer unchecked? There is more checks than you think, but the no mans land adds an extra level that can&#39;t be ignored because it will end up as a page fault generated by the processor.</p>
<p>So no, the situation is nowhere near as bleak as you imagine. This gives even more defence in a situation where you can never have enough. It is also independent of the code that can be messed up, since it would be a hardware generated event.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155083">
				<div id="div-comment-1155083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1155083">
			October 10, 2014 at 2:08 pm</a>		</div>

		<p>[If you have a no-man&#39;s land, then the straddled buffer will hit a no-access page, and validation will fail automatically. -Raymond]</p>
<p>WriteFileGather has the unique ability to write to a buffer out of order. I sure hope I&#39;m not declaring a zero day here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155203">
				<div id="div-comment-1155203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1155203">
			October 10, 2014 at 10:12 pm</a>		</div>

		<p>Joshua: The buffer validation happens before the system call even begins executing.</p>
<p>I&#39;m not sure where WriteFileGather comes into play, though, because a write operation reads from a buffer. Perhaps you meant ReadFileScatter? Either way, the problem doesn&#39;t even apply here because the scatter/gather functions take a list of pages &#8212; not a single contiguous buffer. That is, if you wanted it to use a 40k buffer, you would have to pass in a list of 10 pointers (one for each page).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155263">
				<div id="div-comment-1155263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1155263">
			October 11, 2014 at 2:44 pm</a>		</div>

		<p>@Crescens2k</p>
<p>If there is code that can be messed up then it could just as easily be wrong when the buffer doesn&#39;t straddle no mans land.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155293">
				<div id="div-comment-1155293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1155293">
			October 12, 2014 at 2:29 am</a>		</div>

		<p>@foo: Thanks, somehow I glossed over that while looking for an explicit mention of a value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155303">
				<div id="div-comment-1155303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1155303">
			October 12, 2014 at 3:37 am</a>		</div>

		<p>@Paul</p>
<p>It doesn&#39;t appear to improve the efficiency as the code that tests for the buffer ending in kernel space is still run. If the buffer straddles no mans land then it&#39;s way less efficient taking the CPU exception.</p>
<p>Better add some if (1==1) checks to it, just in case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155283">
				<div id="div-comment-1155283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1155283">
			October 12, 2014 at 1:37 am</a>		</div>

		<p>@smf</p>
<p>Code that is wrong and has a buffer that doesn&#39;t straddle no mans land is indeed possible, this is however a very easy and efficient way of preventing problems by code that causes a buffer that *does* straddle this 64k. There will certainly be other checks in place to prevent invalid / malicious code doing other things, however a single 64k block used this way allows the hardware to trap the edge cases very efficiently and in a way that cannot be avoided at the software level (Raymond says this in the article / comment responses). </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155333">
				<div id="div-comment-1155333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1155333">
			October 12, 2014 at 7:20 am</a>		</div>

		<p>@smf</p>
<p>The whole point of the article is the fact that this is &quot;defence in depth&quot;, this is an area where a potential exploit *could* exist and this 64k buffer means if the executing code was compromised the hardware itself would provide an additional level of protection. As Raymond is poining out in the article, 64k is deemed a worthwhile trade-off for the additional protection it offers. If you seem to think being extra safe on a critical boundary is the same as doing a 1 == 1 then you are obviously missing the point of the article. </p>
<p>This is an *additional* level of protection that protects in a different way to whatever checks already exist.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155543">
				<div id="div-comment-1155543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Farnsworth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883#comment-1155543">
			October 14, 2014 at 5:56 am</a>		</div>

		<p>@smf</p>
<p>The point is that the kernel does three things with a userspace buffer before starting a syscall:</p>
<p> 1. Check that it starts in user address space.</p>
<p> 2. Check that it ends in user address space.</p>
<p> 3. Check that each page within the buffer is accessible, as confirmed by the CPU.</p>
<p>Checks 1 and 2 should be sufficient. However, if there&#39;s a fencepost error in either 1 or 2, allowing a buffer to enter non-user address space by 1 page, check 3 will catch it as long as there&#39;s at least 1 page black hole space between user address space and kernel address space. As Windows has an existing 16 page black hole (due to the Alpha limitation), and there&#39;s no significant gain from removing this black hole, it might as well stay in place and catch rare cases where the first two checks fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>