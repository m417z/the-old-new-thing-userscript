<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-738193">
				<div id="div-comment-738193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738193">
			May 22, 2009 at 10:13 am</a>		</div>

		<p>I&#8217;m sure glad you were able to figure out what the customer was complaining about. &nbsp;That&#8217;s an impressive display of detective work. &nbsp;All that talk about &quot;events in the right order&quot; certainly distracted me from the real problem.</p>
<p>Of course, another way to solve the problem would have been the traditional producer/consumer pattern where the consumer gets a signal and processes the list until there are no entries left, then goes back to waiting on the event. &nbsp;Given the limited context provided, I think this pattern would have solved the problem without requiring a semaphore.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-738383">
				<div id="div-comment-738383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738383">
			May 22, 2009 at 12:42 pm</a>		</div>

		<p>I bet they used a semaphore, but in the end, didn&#8217;t really understand why.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-738443">
				<div id="div-comment-738443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738443">
			May 22, 2009 at 3:20 pm</a>		</div>

		<p>I think that part of the confusion comes from the fact that events can be auto-reset or manual-reset. &nbsp;With manual-reset, it&#8217;s pretty clear that two simultaneous signals will be equivalent to one. &nbsp;With something like auto-reset, it&#8217;s reasonable for someone to expect that signal + reset happens atomically, and that signalling means &quot;dequeue exactly one waiter&quot;, hence two simultaneous calls would dequeue (up to) two waiting contexts.</p>
<p>Of course even with the above semantics you still won&#8217;t detect multiple signals while there are no waiters. &nbsp;So there is still brokenness in the algorithm above. &nbsp;But, even so, I think the semantics of auto-reset is still an interesting detail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-738463">
				<div id="div-comment-738463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738463">
			May 22, 2009 at 3:57 pm</a>		</div>

		<p>perhaps people should be required to pass a test before writing any multi-threaded code.. I wonder if their list/queue (whatever structure they used..) was even correctly locked for multi-threaded reader/writer access..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-738483">
				<div id="div-comment-738483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738483">
			May 22, 2009 at 4:34 pm</a>		</div>

		<blockquote><p>
  &gt; perhaps people should be required to pass a test before writing any multi-threaded code..
</p></blockquote>
<p>Difficult in this day and age given that both C# and Java are threaded by default ( unless on a Java smart card ).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-738493">
				<div id="div-comment-738493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738493">
			May 22, 2009 at 5:01 pm</a>		</div>

		<p>One thing people should remember: there is no ordering between multiple threads and events. Unless you explicitly make it so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-738563">
				<div id="div-comment-738563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kbiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738563">
			May 22, 2009 at 5:49 pm</a>		</div>

		<p>Anon,</p>
<p>Even with auto-reset events, two simultaneous signals will appear as one. There is no guarantee that the processing thread will receive CPU time right after the first signal.</p>
<p>I am not sure what the person was trying to accomplish, but usually we just have the processing thread work the queue until empty. In that way, you don&#8217;t need a semaphore and you don&#8217;t lose &quot;events&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-738623">
				<div id="div-comment-738623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738623">
			May 22, 2009 at 6:21 pm</a>		</div>

		<p>What an unbelievably complex and pompous response to a simple question&#8230; And a response that doesn&#8217;t even answer the question.</p>
<p>If I throw two tomatoes at you, can I assume they will splash on your face in the order I threw them?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-738643">
				<div id="div-comment-738643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738643">
			May 22, 2009 at 6:39 pm</a>		</div>

		<p>How can a question that makes no sense be a simple question?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-738653">
				<div id="div-comment-738653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GrumpyYoungMan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738653">
			May 22, 2009 at 6:53 pm</a>		</div>

		<p>@David</p>
<p>Boy, did you ever miss the point. &nbsp;The answer is trivial to find for anybody who&#8217;s halfway competent. &nbsp;There&#8217;s no need to post it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-738663">
				<div id="div-comment-738663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738663">
			May 22, 2009 at 8:47 pm</a>		</div>

		<p>The real flaw in Raymond&#8217;s answer is that it violates one of Dilbert&#8217;s Law&#8217;s: &quot;Never [engage in a long discussion] with time-wasting morons&quot;.</p>
<p>The correct answer is &quot;No&quot;.</p>
<p>Raymond wasted a bunch of words answering a question that was unrelated to the user&#8217;s actual problem.</p>
<p>But it should have been obvious to him that this was probably the case, because the question so mind-numbingly demonstrates a complete lack of understanding of what events are. Sometimes there really are stupid questions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-738693">
				<div id="div-comment-738693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bruno Martinez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738693">
			May 22, 2009 at 10:54 pm</a>		</div>

		<p>I just thought a related question: &nbsp;If thread A signals two events that thread B is waiting for both with WaitForMultipleObjects, is B guaranteed to wake on the first signaled event?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-738753">
				<div id="div-comment-738753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zzz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738753">
			May 23, 2009 at 9:22 am</a>		</div>

		<p>looking at various definitions of &quot;event&quot;s it&#8217;s rather obvious the windows &quot;event&quot; is not an even at all and is a very poor choice of word for what the mechanism described here is meant for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-738773">
				<div id="div-comment-738773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738773">
			May 23, 2009 at 9:53 am</a>		</div>

		<p>Ray Trent, your post displays a complete lack of understanding of the way people learn.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-738893">
				<div id="div-comment-738893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738893">
			May 24, 2009 at 5:03 pm</a>		</div>

		<p>I&#8217;m willing to bet that part of Raymond&#8217;s job description is something like &quot;people pay you to answer their questions, don&#8217;t be an ass about it.&quot;</p>
<p>I&#8217;ld also say that Raymond is good at his job, while many commenters here feel free to be insulting because they&#8217;re not going to be held accountable for their own desperate need to make themselves feel better by being jerks.</p>
<p>And while it&#8217;s true that there are stupid questions, refusal to ask the question is much worse &#8211; I&#8217;ld rather answer a thousand stupid questions than deal with the consequences of a thousand people not bothering to find out that they didn&#8217;t know as much as they thought they knew.</p>
<p>Also, I have nothing but respect for people who can work tech support, where the only time people contact them is when they don&#8217;t know something &#8211; which means you get nothing but questions that you already know the answer to, and hence can easily start to consider to be &quot;stupid questions&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-738903">
				<div id="div-comment-738903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-738903">
			May 24, 2009 at 7:21 pm</a>		</div>

		<p>interesting post.</p>
<p>It was nice the customer wrote back to say thanks, so many people don&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-739203">
				<div id="div-comment-739203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-739203">
			May 26, 2009 at 11:36 am</a>		</div>

		<p>Bruno, I believe the documented answer is &#8216;no&#8217;, and that is the only answer you should rely on.</p>
<p>In practice, Windows initiates a reschedule when signalling an object, if there are threads waiting on that object &#8211; at least checking whether to make a thread runnable, though not necessarily pre-empting the current thread. (The thread[s] made runnable may be a lower priority, even after priority boosting, or may have affinity on a different processor core, or perhaps another core is free.) That would mean that the waiting thread would already be released and marked runnable after the first SetEvent call, before the second was processed.</p>
<p>However, we also know that the kernel may borrow threads (e.g. to deliver I/O completions for asynchronous I/O that the thread started) and when this happens, the thread isn&#8217;t actually waiting. See <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2005/01/05/346888.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2005/01/05/346888.aspx</a> for details. In this case the thread will check the state of objects when it goes back to waiting, and it may then happen to check object B before object A.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-739703">
				<div id="div-comment-739703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Golden hammer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090522-00/?p=18193#comment-739703">
			May 28, 2009 at 2:25 am</a>		</div>

		<p>Repeat after me:</p>
<ol>
<li>
<p>Threads are Hard</p>
</li>
<li>
<p>Threads are not magic bullets</p>
</li>
<li>
<p>Threads introduce WHOLE NEW CLASSES of bugs</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>