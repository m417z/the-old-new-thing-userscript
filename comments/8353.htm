<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (36)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-965633">
				<div id="div-comment-965633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965633">
			February 8, 2012 at 7:09 am</a>		</div>

		<p>The real reason the server goes down at night is because the cleaning crew unplugs it to plug in the vacuum cleaner.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965643">
				<div id="div-comment-965643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Larry Hosken</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965643">
			February 8, 2012 at 7:18 am</a>		</div>

		<p>&quot;Why does the LoadLibrary search algorithm continue if an invalid directory or drive letter is put on the PATH?&quot;</p>
<p>If the user&#39;s aiming the gun footward, engage the safety.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965653">
				<div id="div-comment-965653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965653">
			February 8, 2012 at 7:31 am</a>		</div>

		<p>Putting a server share in your PATH is just asking for trouble. &nbsp;Aside from the security issues, do you really want to be hitting the network for every call to LoadLibrary or CreateProcess?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965663">
				<div id="div-comment-965663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965663">
			February 8, 2012 at 7:38 am</a>		</div>

		<p>&quot;Why does the LoadLibrary search algorithm continue if an invalid directory or drive letter is put on the PATH?&quot;</p>
<p>All the software uninstallers that would break your system because they forget to clean up PATH. &nbsp;And at first you&#39;d think that this is safe &#8211; if it&#39;s a local directory that doesn&#39;t exist, you should still get 100% reproducible behavior, right? &nbsp;I.e. if C:dirFfoo.dll does not exist, it will never exist today or tomorrow, so keep searching.</p>
<p>Specifically, LoadLibrary thinks it has established with complete certainty that the file does NOT exist, instead of an error determining whether the file is usable, or even if it is present or missing in the first place.</p>
<p>But by the logic in Raymond&#39;s article, this is a bug if LoadLibrary does this. &nbsp;Because a missing local file does NOT establish with certainty that a file does not exist. &nbsp;What about mapped network drives? &nbsp;What about removable USB devices? &nbsp;What about removable drives mounted into NTFS paths on the main volume? &nbsp;The local file system can be very intermittent, too! &nbsp;Servers go up and down and so do local drives.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965673">
				<div id="div-comment-965673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965673">
			February 8, 2012 at 7:39 am</a>		</div>

		<p>If you&#39;re intending to load &quot;C:dir2foo.dll&quot; &nbsp; then you call LoadLibrary(&quot;C:dir2foo.dll&quot;).</p>
<p>If you call &nbsp;LoadLibrary(&quot;foo.dll&quot;) &nbsp;then you don&#39;t care where it comes from and loading &nbsp;C:dir2foo.dll &nbsp;instead of \serversharefoo.dll is perfectly acceptable.</p>
<div class="post">[<i>What if you don&#39;t control the call to LoadLibrary? (Implicit dependency.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965683">
				<div id="div-comment-965683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965683">
			February 8, 2012 at 7:44 am</a>		</div>

		<p>I note that if the network share is UP but the attacker can remove foo.dll from it, the file in C:dir2 will be loaded. &nbsp;A different sort of attack, but this time LoadLibrary has no way of knowing anything is wrong. &nbsp;Or the attacker could always take down the server as in Raymond&#39;s example, and then stick their own server up containing whatever files they want the user&#39;s computer to load on demand.</p>
<p>Of course, you shouldn&#39;t be setting up permissions/env variables to allow non-admins to plant or remove DLLs from folders on the PATH anyway, I would think. &nbsp;Or even putting network shares in PATH to begin with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965693">
				<div id="div-comment-965693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965693">
			February 8, 2012 at 7:45 am</a>		</div>

		<p>&quot;And maybe that was your DLL planting attack: If you can convince the system to reject all the versions on the PATH by some means, you can then get LoadÂ­Library to look in the current directory, which is where you put your attack version of foo.dll.&quot;</p>
<p>Isn&#39;t that just a &#39;other side of the airtight hatch&#39; problem though? If you have the permission to sabotage the PATH locations, you have permission to inject your DLL high in the PATH order already (either through the filesystem or by changing the environment variable). I can agree with the rest of your article about predictability, but I can&#39;t see the security hole.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965703">
				<div id="div-comment-965703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965703">
			February 8, 2012 at 8:15 am</a>		</div>

		<p>@Mark: If LoadLibrary kept going when the network server was unreachable, then you could force a failure there (which just requires some control of part of the network in between) to cause the application to load from the current directory instead. You wouldn&#39;t need any control over the path or any folders higher in the path than the network share.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965713">
				<div id="div-comment-965713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965713">
			February 8, 2012 at 8:17 am</a>		</div>

		<p>@Mark:</p>
<p>PATH=C:dir1;\server1share;\server2share;C:dir2</p>
<p>Suppose your DLL is on server1. An attacker on the local network (but outside your machine and with no write access to server1, thus outside your security context) could take down server1 (by flooding it, for instance), and thus make LoadLibrary read from server2 (which it might have write access to).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965723">
				<div id="div-comment-965723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965723">
			February 8, 2012 at 8:21 am</a>		</div>

		<p>GAK! Don&#39;t put network shares in your path.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965743">
				<div id="div-comment-965743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965743">
			February 8, 2012 at 8:56 am</a>		</div>

		<p>I see a lot of people with the overriding mentality &quot;errors are bad, so stop them happening&quot;. Let it look in other paths, suppress exceptions, try your best despite bad input, etc&#8230; It is important to think about the consequences of this! That is why I love your blog so much, Raymond, you&#39;re making these people think. That is, if they read it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965753">
				<div id="div-comment-965753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">blah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965753">
			February 8, 2012 at 9:13 am</a>		</div>

		<p>+100 Joshua.</p>
<p>This should not even be supported. From the pitiful speed of the network redirector to the Hoover Dam-sized security hole this creates&#8230; facepalm.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965763">
				<div id="div-comment-965763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965763">
			February 8, 2012 at 9:50 am</a>		</div>

		<p>&quot;Why does the LoadLibrary search algorithm continue if an invalid directory or drive letter is put on the PATH?&quot;</p>
<p>So that Windows 8 will still run Lotus 1-2-3?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-965773">
				<div id="div-comment-965773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965773">
			February 8, 2012 at 10:15 am</a>		</div>

		<p>Windows should stop supporting PATH for new software. Want new features &#8211; stop using hacks. Otherwise this stuff will go on. The ISVs are retarded.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965783">
				<div id="div-comment-965783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phil W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965783">
			February 8, 2012 at 10:25 am</a>		</div>

		<p>@alegr1: Completely agree, PATH is a terrible non-deterministic way to find files.</p>
<p>@mark: If you are a limited user who can copy a Dll to a location that&#39;s in the path of a program that an administrator runs, then you can get your Dll code running as administrator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965793">
				<div id="div-comment-965793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965793">
			February 8, 2012 at 10:26 am</a>		</div>

		<p>But, a user can change their own copy of the path:</p>
<p>cd pathtobaddll</p>
<p>path=%cd%;%path%</p>
<p>Doesn&#39;t that mean</p>
<p>program_to_run.exe</p>
<p>will load foo.dll from pathtobaddllfoo.dll if it exists?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965813">
				<div id="div-comment-965813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965813">
			February 8, 2012 at 11:09 am</a>		</div>

		<p>@algerl: PATH is important to software development utilities.</p>
<p>@PhilW: The non-determinism is important here. It&#39;s the only way that scripting languages can deal with utilities being installed in different locations on different machines. This is not UNIX nor Plan9. We can&#39;t put everything in /bin even if we wanted to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965823">
				<div id="div-comment-965823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jas71_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jas71@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965823">
			February 8, 2012 at 11:35 am</a>		</div>

		<p>&quot;Putting a server share in your PATH is just asking for trouble. &nbsp;Aside from the security issues, do you really want to be hitting the network for every call to LoadLibrary or CreateProcess?&quot;</p>
<p>When I started as a WinNT sysadmin (holiday job while in high school), the existing machines were all diskless (Win3.1 booted from NetWare). Life in that scenario without running software from the network is rather boring, not to mention unproductive.</p>
<p>Even now, we have centrally-stored applications run from the servers. The obvious things like Office and Firefox are local, but do you really want AutoCAD and Visual Studio on the Modern Languages machines&#39; hard drives? It varies per process of course, rather than system-wide, but yes, even now quite a few of our programs run that way.</p>
<p>Ray: Now you&#39;re on the same side of the security barrier. Of course, the ability to disable/disconnect &quot;server&quot; (from Raymond&#39;s machine&#39;s perspective at least) is pretty close to the ability to impersonate it instead: if I can connect, I can name my machine server and create a public share with my malicious DLL on. I recall one compromised machine, around 2000/2001, where the attacker configured it to hijack every single IP address on the subnet for nefarious purposes!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965833">
				<div id="div-comment-965833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965833">
			February 8, 2012 at 11:43 am</a>		</div>

		<p>@Joshua</p>
<p>This is mistake. Take for example path=c:python</p>
<p>What if I setup python only to support specific web server, and I have two or three such web server on the same machine? Definitely I dont want any of three pythons to appear on path: there is no way to tell which is which.</p>
<p>It is always better to setup relative path if possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965843">
				<div id="div-comment-965843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Don Reba</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965843">
			February 8, 2012 at 11:52 am</a>		</div>

		<p>This just in: Kernel32 is implemented in Prolog!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965853">
				<div id="div-comment-965853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965853">
			February 8, 2012 at 12:03 pm</a>		</div>

		<p>I&#39;m surprised at the number of people who view &quot;don&#39;t put network paths in %PATH%&quot; as a no-brainer. I&#39;m in a different environment (mostly Linux-based, using AFS which has fairly agressive client-side caching, and working from the shell means the shell keeps a hash of the location common commands, so it can be incorrect), but probably half the software I run is over the network. I have 18 directories in $PATH, and 6 of those are network drives. (One doesn&#39;t exist, and one is &#39;.&#39;.) That includes all of the 3rd through 6th items in the path, all of which actually appear before /usr/bin.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965873">
				<div id="div-comment-965873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965873">
			February 8, 2012 at 2:34 pm</a>		</div>

		<p>@Evan: But do you also set $LD_LIBRARY_PATH to include non-local AFS directories? &nbsp;DLLs/shared libraries loading from a network share are a much bigger danger, especially on Windows. &nbsp;%PATH% on Windows serves double-duty for locating executables and DLLs, while Linux separates those out into $PATH and $LD_LIBRARY_PATH.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965883">
				<div id="div-comment-965883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965883">
			February 8, 2012 at 4:41 pm</a>		</div>

		<p>Why does LoadLibrary search the PATH in the first place ? PATH is modified by lot of installers &#8211; it is a very brittle and a huge security hole to load dlls using PATH (and current directory)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965893">
				<div id="div-comment-965893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965893">
			February 8, 2012 at 5:17 pm</a>		</div>

		<p>The argument here is that an attacker could take down a network share and thus punt LoadLibrary() down to the next entry in PATH, where the evil DLL is located. The thing is, this problem is just as true if there are no network paths in PATH. Maybe it&#39;s slightly easier to cause the network to go down and punt searches down PATH, but it might also be fairly easy to dump a DLL in one of the non-network entries of PATH. This type of &quot;security feature&quot; does not stop those. The fact of the matter is that searching around essentially random directories for libraries is dangerous regardless of whether they are on a network drive or not.</p>
<div class="post">[<i>You&#39;ve shown that it&#39;s a bad idea to put a world-writable directory on the PATH. -Raymond</i>],/DIV&gt;</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965903">
				<div id="div-comment-965903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965903">
			February 8, 2012 at 6:30 pm</a>		</div>

		<p>@anton: Do you think PATH is an environment variable for nothing? This allows configuration of sub-contexts that use other variants of such things. In a sane environment, you&#39;d have 3 Phthons and each web server (or app-pool) would have its own idea of PATH. This is arranged in the site specific configuration to launch the app-pool with a different path than the system one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965803">
				<div id="div-comment-965803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Avi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965803">
			February 8, 2012 at 10:37 am</a>		</div>

		<p>@Ray:</p>
<p>That doesn&#39;t matter. &nbsp;The user could have just loaded their evil DLL directly using their own stub program. &nbsp;Or they could have put the evil code directly into an EXE and run it.</p>
<p>The issues others point out are ways to get *other* users to use the evil DLL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965923">
				<div id="div-comment-965923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xpclient</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965923">
			February 8, 2012 at 10:50 pm</a>		</div>

		<p>Is there some kind of utility or tool which notifies the user in a balloon tip or some other style when an app modifies the system path?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965933">
				<div id="div-comment-965933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965933">
			February 9, 2012 at 12:53 am</a>		</div>

		<p>That&#39;s what I love about the comments here &#8211; the core topic is the LoadLibrary function, but all the focus is on the inconsequential tangential implementation detail used in the example (executable code on a network share).</p>
<p>I can imagine a focus group put together by Ford to discuss the driving ergonomics of their new concept car, and everyne spends all day shouting about the fact that it has been fitted with summer tyres, but it&#39;s the middle of December (and then even ignoring the fact that they&#39;re in the Southern Hemisphere).</p>
<p>Maybe the DLL is on the network. Maybe the whole application is network deployed, but the connection goes down while LoadLibrary is called. Maybe it&#39;s on a removable drive, or a drive mapped into C:mntDisk1 which is disconnected, or a directory which was deleted by your cat walking over your keyboard&#8230; it doesn&#39;t matter, that&#39;s not the point!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965973">
				<div id="div-comment-965973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-965973">
			February 9, 2012 at 7:56 am</a>		</div>

		<p>@Evan: never put &#39;.&#39; (or an empty value) in $PATH. It is a well-known security risk. One typo while the current directory is writeable by someone else, and you could be running an attacker&#39;s code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966163">
				<div id="div-comment-966163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-966163">
			February 9, 2012 at 4:49 pm</a>		</div>

		<p>It&#39;s not backtracking, but linear search. Backtracking is a recursive algorithm that traverses the search tree; it&#39;s exponential in the worst case (like in the article by Eric Lippert). Here you have a linear list of directories that are checked in a loop.</p>
<div class="post">[<i>We&#39;re still exploring a tree. In this case, the tree is fishbone-shaped. If you explore a rib and hit a dead end, the algorithm does not backtrack back to the spine. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966193">
				<div id="div-comment-966193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-966193">
			February 9, 2012 at 11:48 pm</a>		</div>

		<p>[We&#39;re still exploring a tree. In this case, the tree is fishbone-shaped. If you explore a rib and hit a dead end, the algorithm does not backtrack back to the spine. -Raymond]</p>
<p>You could also define a single directory as a tree of directories. Not useful in any way though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-966203">
				<div id="div-comment-966203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-966203">
			February 10, 2012 at 1:23 am</a>		</div>

		<p>I can&#39;t understand how a disconnected K: network share is different from security POW from a disconnected \srvk network share in my PATH.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-966213">
				<div id="div-comment-966213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-966213">
			February 10, 2012 at 1:26 am</a>		</div>

		<p>@Cesar that&#39;s Windows for you: . is always waiting for you on the rear end of the PATH!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966323">
				<div id="div-comment-966323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-966323">
			February 10, 2012 at 11:11 am</a>		</div>

		<p>There seems to be an exception to this rule with ERROR_BAD_EXE_FORMAT: if the first .dll it finds is a valid format but doesn&#39;t match the architecture, it will keep trying.</p>
<p>This is unfortunately very important to those of us who have both 32-bit and 64-bit Oracle client applications on our machine &#8211; Oracle named the 32-bit and 64-bit DLLs the same thing, and they both need to be on the PATH.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966433">
				<div id="div-comment-966433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-966433">
			February 11, 2012 at 2:58 am</a>		</div>

		<p>@Raymond: Why does the LoadLibrary search algorithm continue if an invalid directory or drive letter is put on the PATH?</p>
<p>This one is obvious &#8211; because LoadLibrary can&#39;t tell if the error returned by trying to open the DLL was caused by:</p>
<p>1) The path is invalid (or drive invalid)</p>
<p>2) The path is valid, but the DLL doesn&#39;t exist.</p>
<p>I&#39;d presume the logic would be that LoadLibrary tries the first directory in PATH, appends the DLL name, then tries to CreateFile() it or similar. CreateFile() would then return the file doesn&#39;t exist.</p>
<p>In the server case, the CreateFile() would a different error (like unable to connect to server) which LoadLibrary can interpret as &quot;I can&#39;t determine if the file exists or not&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966413">
				<div id="div-comment-966413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120208-00/?p=8353#comment-966413">
			February 10, 2012 at 10:29 pm</a>		</div>

		<p>@Adam: blah blah LD_LIBRARY_PATH blah blah</p>
<p>Yes, I also have AFS directories in LD_LIBRARY_PATH. I also fail to see how libraries are more dangerous, at least if someone uses a lot of command line tools. There are several network places where a malicious program could slip an &#39;ls&#39; and23:26 2/8/2012 have it get picked up before the system one. Some are even writable by me &#8212; e.g. I have a ~/bin and ~/lib, both of which appear before the system directories.</p>
<p>(To be honest I could probably drop a couple of the paths from my LD_LIBRARY_PATH now, but they were necessary at some point.)</p>
<p>@Cesar: &quot;never put &#39;.&#39; (or an empty value) in $PATH. It is a well-known security risk.&quot;</p>
<p>I know that&#39;s good practice. For me though, not having . there is a well-known PITA. The slightly-increased security risk from doing so is worth the convenience. (I *do* follow that when I&#39;m root, though.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>