<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1168603">
				<div id="div-comment-1168603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168603">
			December 26, 2014 at 7:27 am</a>		</div>

		<p>A nonsensical bug needs a nonsensical conclusion: It just makes sense!</p>
<p>As a colleague of mine once said, when a program works illogically, don&#39;t try to fix it by using logic. Illogical problems need illogical solutions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1168613">
				<div id="div-comment-1168613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168613">
			December 26, 2014 at 7:56 am</a>		</div>

		<p>If this sort of error happened more than once, could that point to a processor erratum?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1168633">
				<div id="div-comment-1168633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168633">
			December 26, 2014 at 8:16 am</a>		</div>

		<p>Does the dump capture the code, or just the data? If it doesn&#39;t capture the code, could it be that the code on disk on the victim&#39;s computer was corrupted, or that the code on the victim&#39;s memory (the disk cache to be more precise) was corrupted?</p>
<p>Another possible culprit: interrupts. An interrupt can happen anywhere, and a broken interrupt handler could either fail at restoring the state (unlikely since it&#39;s heavily exercised common code), or more likely corrupt the state save area (I don&#39;t know how it&#39;s on Windows, but on Linux the state save area is part of the kernel stack).</p>
<p>Yet another possible culprit: SMI interrupts. They can happen anywhere (even when normal interrupts are disabled), what they do can depend on the motherboard and BIOS revision, they do mysterious things in response to unknown inputs (for instance, a temperature threshold being crossed could result in a fan speed adjustment, both the input and output being via magic undocumented registers), and they come from the BIOS (which does not have a reputation for code quality).</p>
<p>And how about this one? The code might have been running under virtualization (does the dump have DMI strings which could reveal the presence of a VM?), and the virtualization software&#39;s JIT could have a bug which mistranslates a particular sequence of instructions.</p>
<p>And there&#39;s the always-popular &quot;blame a virus&quot; option: some sort of badware hooking the software, and failing to correctly emulate the code it replaced.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1168643">
				<div id="div-comment-1168643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EduardoS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168643">
			December 26, 2014 at 8:22 am</a>		</div>

		<p>The counting is incorrect:</p>
<p>00007fff`21af2d22 = &nbsp;0; Ok</p>
<p>00007fff`21af2d21 = -1; Ok</p>
<p>00007fff`21af2d1f = -3; Ok; Did you skiped -2 because it was already disassembled in the correct path?</p>
<p>00007fff`21af2d1e = -4; Ok; </p>
<p>00007fff`21af2d1e = -5; Ops&#8230; Shouldn&#39;t be -6? You skiped the correct return address</p>
<p>00007fff`21af2d1e = -6; Ops&#8230; Shouldn&#39;t be -7?</p>
<p>Also, I am not sure you can blame overclocking for it, but I am sure you don&#39;t have enough information to point the exact reason.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1168673">
				<div id="div-comment-1168673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168673">
			December 26, 2014 at 1:05 pm</a>		</div>

		<p>@Cesar: I&#39;d say that VM bug still counts as (emulated) hardware error ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1168683">
				<div id="div-comment-1168683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168683">
			December 26, 2014 at 5:52 pm</a>		</div>

		<p>Did you have full (user) memory dump but not minidump only, so you can be sure that instructions you see are really were in user&#39;s memory, but not loaded by your debugger from your local symbols/images store? I&#39;ve seen &#39;magic&#39; crashes due to few bytes corrupted of executable disk image placed on flash stick (think same can happen with HDD/SDD). This would explain double-lightning-strike: just virtually replace 2 bytes @21af2d20 with xor al, al (30 c0 ) and you will get same crash if I didn&#39;t miss something important.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1168693">
				<div id="div-comment-1168693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168693">
			December 26, 2014 at 7:46 pm</a>		</div>

		<p>However, from &#39;the byte in question was not captured in the dump,&#39; I can assume that dump was not full so /me 90% sure that either image was corrupted on disk either FS cache memory corruption occurred, so couple of executions crashed in same place. However one of the simple but useful tests after inserting new RAM into you computer &#8211; is to perform cached copy of several tens GB of files and to compare results with fc /b. Sometimes system works rather stable but couple of faulty bytes of RAM poison your data.. drop by drop..</p>
<div class="post">[<em>The minidump captures the bytes near the crashing EIP, so if the code were corrupted in memory/on disk, the corrupted values would have been captured. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1168743">
				<div id="div-comment-1168743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rgorton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168743">
			December 27, 2014 at 9:44 am</a>		</div>

		<p>The odds are high that pCereal-&gt;Crackle(false) or part of pCereal-&gt;Pop(uId) is running the desctructor for pCereal, and the random values in memory are mostly correct. &nbsp;You might try explicitly setting the pCereal pointer to be 0xdeadbeefdeadbeef or some such in the desctructor.</p>
<p>The second most likely case is that there is a multi-threaded race condition</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1168763">
				<div id="div-comment-1168763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168763">
			December 27, 2014 at 11:10 am</a>		</div>

		<p>[The minidump captures the bytes near the crashing EIP, so if the code were corrupted in memory/on disk, the corrupted values would have been captured. -Raymond]</p>
<p>If only corrupted cache page was not reset&#39;ed after crash and reloaded from image before dump. But chances to happen that twice even more reduces chances of all that disaster (if code in both dumps was checked).</p>
<p>BTW its also interesting to see Pop()&#39;s code. And code that checks result of Pop(). Another possible reason is erroneous decrementing of some on-stack value inside Pop(), so return address was decremented by 10, so after return from Pop() rip occasionally pointed to 10 bytes before than it should be.</p>
<p>Corrupted rax could be explained by optimizer treated return value to fit into byte instead of full-sized HRESULT. Showing coede of call&#39;ing Pop and checking its result would give hint if that can be true or eax can&#39;t has such value and in such case whole guess is incorrect.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1168793">
				<div id="div-comment-1168793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stephen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168793">
			December 27, 2014 at 9:35 pm</a>		</div>

		<p>Try !chkimg or capture 16 bytes before and 16 bytes after the EIP, perhaps it&#39;s inline hooked :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1168813">
				<div id="div-comment-1168813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168813">
			December 28, 2014 at 1:24 pm</a>		</div>

		<p>Killer{R}: highly unlikely the corrupted page would be freed and then reloaded from disk while the process is crashing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1168823">
				<div id="div-comment-1168823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168823">
			December 28, 2014 at 1:53 pm</a>		</div>

		<p>IMHO there is lim(0/0). Upper 0 &#8211; is probability to happen two different hardware malfunctions appeared as crash on same instruction, lower 0 &#8211; probability of one malfunction * probability to happen that things with cache page preemption. However there is nothing strange to happen that &#8211; &#39;process crashing&#39; means that crashed process&#39;s thread stopped execution (went to wait to something), then another process being launched (debugger, werfault etc) and then that another process reads memory of crashed one. Under low memory condition cache can be shrinked easily in between to get some place for debugger&#39;s stuff. Another example: its usual situation when got full (kernel) memory dump in which PEB/TEB/stack of some (usually, thanks 2 Murphy&#39;s law &#8211; most important) process is paged out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1168853">
				<div id="div-comment-1168853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168853">
			December 29, 2014 at 12:19 am</a>		</div>

		<p>I read somewhere something similar to the following: The crash dump is generated by immediately page out the current memory at the time of crash as separate file. (The memory is blurred one so I can&#39;t find a direct reference)</p>
<p>So I think at the time a process is crashed, the dump file is very very unlikely to be a freed and reloaded one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1168863">
				<div id="div-comment-1168863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EduardoS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168863">
			December 29, 2014 at 3:04 am</a>		</div>

		<p>Killer{R}, if a given processor model is overclocked it is more likely to fail in some cases, let&#39;s call &quot;critical path&quot;, and it is perfectly plausible to two users overclock the same model of a processor.</p>
<p>The only thing I think is strange about this theory is the fact of the least significant byte or the second short instruction in decoding window being the &quot;critical path&quot;, yet, still a plausible theory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1168883">
				<div id="div-comment-1168883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168883">
			December 29, 2014 at 6:21 am</a>		</div>

		<p>Overclocking? &nbsp;BUT IT WORKS WITH EVERYTHING ELSE!!!!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1168893">
				<div id="div-comment-1168893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168893">
			December 29, 2014 at 6:57 am</a>		</div>

		<p>&gt; 00007fff`21af2c43 e8e0e40f00 call nosebleed!CNosebleed::OnFrimble</p>
<p>Should be &#8230;::CanFrumble, surely</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1168903">
				<div id="div-comment-1168903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">C V</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168903">
			December 29, 2014 at 10:33 am</a>		</div>

		<p>Gotta wonder what the WER diagnostic checklist looks like.</p>
<p>1) Check for HRESULT</p>
<p>2) Check for exceptions in minidump</p>
<p>&#8230;</p>
<p>100) Ask Raymond</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1168983">
				<div id="div-comment-1168983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1168983">
			December 29, 2014 at 11:28 pm</a>		</div>

		<p>Quote: &quot;As to what sort of hardware failure could have occurred: This particular failure was reported twice, so a cosmic ray is less likely to be the culprit (because you have to get lightning to strike twice) than overheating or overclocking.&quot; Or this =&gt; <a rel="nofollow" target="_new" href="http://www.zdnet.com/article/flipping-dram-bits-maliciously/#ftag=YHFb1d24ec">http://www.zdnet.com/&#8230;/flipping-dram-bits-maliciously</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1169143">
				<div id="div-comment-1169143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1169143">
			December 30, 2014 at 5:59 pm</a>		</div>

		<p>@Danny: Except you&#39;re running kernel code, since all programs are now loaded in random address, there are gaps in between and that problem will most likely only affect your program.</p>
<p>If you&#39;re writing kernel code, you probably wouldn&#39;t want to repetitively read from the same address on RAM (unless you&#39;re doing it on purpose and taken special measure, the location should have been loaded to cache on CPU so repetitive read to RAM on motherboard is not needed)</p>
<p>So you can safely say that for most people, that is non-issue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169153">
				<div id="div-comment-1169153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141226-00/?p=43293#comment-1169153">
			December 30, 2014 at 8:31 pm</a>		</div>

		<p>There&#39;re no confidence what physical addresses and &#39;gaps&#39; between them are used for particular process&#39;s working set. Furthermore &#8211; they continuously shuffled due to paging. So its a real security risk, &#8211; at least it gives probability to crash system (DoS) by code running as unprivileged account. More interesting if its possible to perform some &#39;predictable&#39; corruption and say change some specific &#39;0&#39; to &#39;1&#39; in memory, that will give you root access or something like that :)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>