<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1306995">
				<div id="div-comment-1306995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1306995">
			August 23, 2017 at 7:19 am</a>		</div>

		<p>That splitting the memory down the middle near the beginning of the article reminds me of how the word-indirect addressing modes work on the 68000 family of processors: sign-extending a 16-bit word to a 32-bit long to either give you access to the lowest possible or highest possible 32KB of the processor&#8217;s address space. On the Sega Genesis, the game cartridge is mapped to the bottom of memory (it&#8217;s the boot ROM) and the 64KB of general purpose RAM are mapped to the top, so games will often access the top of RAM using the word-indirect modes; in disassemblies, this comes up as something along the lines of move.w (#$FFFFFEDC).w,d0. Using the same for the low 32KB of ROM (for instance, in function-call instructions) is also common, but I&#8217;m not sure how common&#8230; (I have also seen games use other similar &#8220;tricks&#8221; to save bytes in function calls, though.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1306996">
				<div id="div-comment-1306996" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1306996">
			August 23, 2017 at 7:37 am</a>		</div>

		<p>So, Windows programs compiled for Alpha could allocate and use anything within the full 64-bit space, but then could only make OS calls with pointers within the 32-bit-compatible space? Somehow that surprises me, though it makes some amount of sense as a transitioning to 64-bit strategy, if the only 64-bitness stuff is within individual programs.</p>
<p>Was this also true when using 32-bit Windows on the Itanium and/or AMD64 processors? Or were they different enough that they had to be more &#8220;all or nothing&#8221;?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1307005">
				<div id="div-comment-1307005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307005">
			August 23, 2017 at 8:19 am</a>		</div>

		<p>The Alpha does not have a 32-bit mode. It is all 64-bit mode all the time. Windows NT had to set up 64-bit page tables and a 64-bit address space, but voluntarily chose to use only the 32-bit part of the address space. Since it was a voluntary restriction, you could also voluntarily choose to use some of it after all.</p>
<p>On the other hand, x86-64 is a separate mode from x86-32. if the processor is in 32-bit mode, then you set up 32-bit page tables and a 32-bit address space, and 64-bit addresses simply don&#8217;t exist. Indeed, x86-64 and x86-32 encode instructions differently, so you can&#8217;t even execute the same instructions.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1307025">
				<div id="div-comment-1307025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307025">
			August 23, 2017 at 1:37 pm</a>		</div>

		<p>But people can and do (on non-Microsoft OS) run x86_64 processors in &#8220;long mode&#8221; and then use 32-bit addresses.  See <a href="https://en.wikipedia.org/wiki/X32_ABI" rel="nofollow">https://en.wikipedia.org/wiki/X32_ABI</a></p>
<p>This seems essentially the same as what Windows NT did on the Alpha.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4" id="comment-1307037">
				<div id="div-comment-1307037" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307037">
			August 23, 2017 at 2:15 pm</a>		</div>

		<p>Yup. But 32-bit Windows on x86-64 does not do that. 32-bit Windows uses the processor in x86-32 mode. (Because if it used the processor in x86-64 mode with 32-bit pointers, then it wouldn&#8217;t run on 32-bit CPUs.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt depth-4 parent" id="comment-1307045">
				<div id="div-comment-1307045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307045">
			August 23, 2017 at 3:57 pm</a>		</div>

		<p>This reminds me of /LARGEADDRESSAWARE:NO supported in Windows.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1307046">
				<div id="div-comment-1307046" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307046">
			August 23, 2017 at 4:31 pm</a>		</div>

		<p>Which, surprisingly, works on 64 bit Windows programs last I checked. I think these days the system DLLs are loaded above the 2GB barrier anyways but other than that the flag forces stuff below 2GB so you really could do 32 bit pointers.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jan-ringos odd alt depth-4 parent" id="comment-1307085">
				<div id="div-comment-1307085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jan+Ringo%C5%A1' rel='external nofollow' class='url'>Jan Ringo≈°</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307085">
			August 24, 2017 at 12:31 am</a>		</div>

		<p>It would be amazing to have X32 ABI with all it&#8217;s benefits version of Windows. Of course, one would need to recompile all the software akin to ARM version of Windows (before CHPE that is), but I could live with that, even if it would come only in a Server Core flavor.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-msn even depth-5" id="comment-1307105">
				<div id="div-comment-1307105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307105">
			August 24, 2017 at 1:38 am</a>		</div>

		<p>You don&#8217;t need kernel support for that. It&#8217;s not like 64-bit NT even has any 32-bit system calls. You would probably want to add some &#8220;FAR&#8221; pointer support to your compiler though to call the normal 64-bit API libraries. You could really get away with only calling ntdll and user32 which never allocates memory for you so you just always pass in a 32-bit address (but Raymond may send an assassin to kill you for such blatant use of an undocumented interface). Alternatively you could just make the process a normal 32-bit process and then switch in and out of 64-bit code with a long jump to 0x23/0x33 to call 32-bit apis if you can live with the extra performance penalty. That is also undocumented, but at least it&#8217;s not using any api&#8217;s that might be unstable. In that case there is probably also some interesting questions about registering unwind data properly if your PE is a 32-bit PE.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-even depth-1" id="comment-1307015">
				<div id="div-comment-1307015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307015">
			August 23, 2017 at 12:01 pm</a>		</div>

		<p>I believe that it was Visual C++ 5.0 that added __ptr64 support, which PVOID64 etc in turn uses.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1307065">
				<div id="div-comment-1307065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307065">
			August 23, 2017 at 6:58 pm</a>		</div>

		<p>I think I&#8217;m missing something obvious.  Why just 8TB?  That&#8217;s only 43 bits.  Who stole the rest?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1307067">
				<div id="div-comment-1307067" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">haltiamreptar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307067">
			August 23, 2017 at 7:38 pm</a>		</div>

		<p>The original alpha only broke out 43 of the 64 address lines, and early cpus were required to keep the unimplemented bits 0.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1307076">
				<div id="div-comment-1307076" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307076">
			August 23, 2017 at 7:47 pm</a>		</div>

		<p>Address lines are for physical addresses; this is about virtual address space. The Alpha 21064 &#8220;only&#8221; had 34 physical address lines (16GB of physical memory max), 21164 had 40-bit physical (1TB), not sure if this ever got increased later; the 43-bit virtual address space limit is for other reasons.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1307075">
				<div id="div-comment-1307075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307075">
			August 23, 2017 at 7:40 pm</a>		</div>

		<p>64-bit processors have 64-bit pointers but generally don&#8217;t allow arbitrary 64-bit values as addresses. Instead, they usually have some subset of the address space that can be mapped, and addresses outside that range are always considered invalid.</p>
<p>This is because extra address bits have a real cost in hardware. These are extra bits that need extra wires to be passed around the chip; they make some important caches (mostly TLBs) larger and slower because they now need to accept, store and compare larger addresses; and having larger addresses makes the virtual-&gt;physical address translation more involved.</p>
<p>So all existing implementations of 64-bit architectures don&#8217;t actually do full 64-bit addresses, they do somewhat less, and increase them as memory sizes go up. The idea being that while it&#8217;s really hard to increase pointer sizes (since it causes all kinds of binary compatibility problems), increasing virtual address space size while leaving pointer size the same requires some changes to the OS but is almost completely invisible to app code, as long as apps don&#8217;t try to be clever and bit-pack other values in pointers, because they know real addresses are only a subset of the entire 64-bit space.</p>
<p>Current x86-64 CPUs have a 48-bit address space (an extension to 57-bit has recently been specified). 64-bit ARM (AArch64) can&#8217;t currently do more than 56 bits (and has a mode where the top 8 bits are explicitly ignored by the CPU and can be used by the app for pointer tagging).</p>
<p>x86-64 uses a tree-structured page table scheme (implemented in hardware) where the smallest page size is 4 kilobytes (that takes care of the bottom 12 bits) and subsequent translation levels add 9 bits each (512 entries because each level of translation is effectively an array of pointers, and 512 entries * 8 bytes/pointer = 4096 bytes neatly fits inside a single page). First-level gives us 12+9=21 bits of address space, then 30, 39, and 48 (the current limit) for a 4-level tree walk. (That&#8217;s also why the extension is to the odd-sounding 57 instead of 56 bits; that&#8217;s one more tree level.)</p>
<p>Alpha also typically used a tree-structured page table (&#8220;software&#8221;/firmware, implemented in PALcode) with 8KB pages and subsequent levels adding 10 bits each (again, 1024 entries times 8 bits equals 8K, so that individual translation tables are exactly one page). One tree level gives us 13+10=23 bits, then 33, and finally 43 bits for a 3-level tree walk. Had Alpha stuck around long enough to get extended for another round, it likely would have gotten a 53-bit address space next, and then 63 after that.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao even depth-3" id="comment-1307095">
				<div id="div-comment-1307095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307095">
			August 24, 2017 at 1:06 am</a>		</div>

		<p>I believe technically the physical/virtual address space is supposed to depend on the page size. It is just that the vast majority of implementations only support the 8K page size. Of course, even with SList based on 64-bit cmpxchg 44-bit virtual addressing was possible, and the Alpha used LL/SC instead so you didn&#8217;t need the sequence number only the depth.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1307375">
				<div id="div-comment-1307375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307375">
			August 25, 2017 at 7:39 pm</a>		</div>

		<p>Well that was a very thorough answer.  Thank you.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1307115">
				<div id="div-comment-1307115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307115">
			August 24, 2017 at 3:25 am</a>		</div>

		<p>Surely if the processor had generally given you zero-extending for free (instead of sign-extending), then that would work in much the same way, the only difference being where you needed to map the pages?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1307145">
				<div id="div-comment-1307145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.farnz.org.uk/' rel='external nofollow' class='url'>Simon Farnsworth</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307145">
			August 24, 2017 at 8:45 am</a>		</div>

		<p>It would, but it would also create issues if you wanted to expand the virtual space in use.</p>
<p>With sign extension and the Windows NT memory map for Alpha, a future Alpha 64-bit Windows continues to split memory down the middle &#8211; 0x00000000`00000000 to 0x7FFFFFFF`FFFFFFFF is &#8220;user memory&#8221; and 0x80000000`00000000 through 0xFFFFFFFF`FFFFFFFF is &#8220;OS memory&#8221;.</p>
<p>With zero extension, you have awkwardness in the first 4GB &#8211; 0x00000000`00000000 to 0x00000000`7FFFFFFF is user memory, 0x80000000`00000000 to 0x00000000`FFFFFFFF is OS memory, then you&#8217;re back to user memory until (say) 0x80000000`7FFFFFFF, then OS memory again. The boundaries are more awkward in this scheme, and it&#8217;s harder for the OS to grow from 2GB user address space to larger address spaces.</p>
<p>FWIW, this is why x86-64 canonical addresses are sign extended (and the CPU is expected to fault if the top N bits for a processor implementing 64-N bits of virtual address space are not identical); it avoids the messy split when you want to extend virtual address space.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1307155">
				<div id="div-comment-1307155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tinker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307155">
			August 24, 2017 at 9:00 am</a>		</div>

		<p>The architecture series deserve their own tag. Just sayin&#8217;.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1307195">
				<div id="div-comment-1307195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170823-00/?p=96875#comment-1307195">
			August 24, 2017 at 5:53 pm</a>		</div>

		<p>Seconded</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>