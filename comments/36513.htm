<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-253373">
				<div id="div-comment-253373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cataraxia.com/' rel='external nofollow' class='url'>Kristoffer Henriksson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253373">
			February 7, 2005 at 7:14 am</a>		</div>

		<p>Flags are bad; they have a limited number of values depending on the data type being stored to.</p>
<p>That said if there was room to add another flag it should not have caused a problem assuming older operating systems just ignored flags that didn&#8217;t exist at the time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-253393">
				<div id="div-comment-253393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253393">
			February 7, 2005 at 7:29 am</a>		</div>

		<p>Sorry to be offtopic; this comment is really directed at any knowledgeable Windows user here.</p>
<p>Today, I noticed a weird file sorting bug in explorer. I have a bunch of files with decimal numbers at the beginning, and explorer would sort them in a completely confusing and unpredictable way. (First I figured it might be using lexicographic ascii ordering, but that is wrong. It turns out that a simple ascii sort would produce correct results in this example):</p>
<p>0.1-&#8230;<br />
<br />0.2-&#8230;<br />
<br />0.15-&#8230;</p>
<p>Any explanations?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-253403">
				<div id="div-comment-253403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253403">
			February 7, 2005 at 7:35 am</a>		</div>

		<p>Flags are good, you have a limited amount of memory and a flag lookup is more importantly infinitely faster than some kind of look-up in a list of attributes, or a tree, or whatever.</p>
<p>But, of course, space is limited in a 32-bit value. If I had to choose between &quot;flags are bad&quot; and &quot;flags are good&quot;, I would vote for &quot;flags are good&quot;. They can actually be more maintainable than a lot of different boolean values stored at different places or at different levels, but relating to the same object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-253423">
				<div id="div-comment-253423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Potter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253423">
			February 7, 2005 at 7:46 am</a>		</div>

		<p>M: I think Explorer tries to be smart and sort numerically when it sees filenames that have a common prefix or suffix. If you look at &quot;0.&quot; as just a prefix rather than a number, the 1, 2, and 15 are sorted numerically.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-253433">
				<div id="div-comment-253433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253433">
			February 7, 2005 at 8:12 am</a>		</div>

		<p>The first thing to realize here is that this part of the filename is probably taken as the file extension.</p>
<p>The behavior I get when I have decimal endings in file extensions would indicate that they are compared as if they were padded with a character between &#8216;9&#8217; and &#8216;A&#8217;. One effect of this is that decimal numbers are sorted in decimal order.</p>
<p>Note that the order from a dir without sorting, which I think does no extra sorting after the Windows file enumeration itself, will not list them in this order.</p>
<p>So, the real question is &#8212; what kind of relevance is attributed to file extension/file type in explorer when sorting is done by name? :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-253443">
				<div id="div-comment-253443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cataraxia.com/' rel='external nofollow' class='url'>Kristoffer Henriksson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253443">
			February 7, 2005 at 8:26 am</a>		</div>

		<p>To clarify: exposing flags to end users (programmers) is bad. By all means use flags in your internal implementation but you will be better off if you hide the flags from the user.</p>
<p>Pseudo code:<br />
<br />Window.SetAttribute(DS_SHELLFONT, true);</p>
<p>Window.SetAttribute(DS_EXAMPLE, true); </p>
<p>As opposed to<br />
<br />Window.SetAttribute(DS_SHELLFONT | DS_EXAMPLE);</p>
<p>In example 1 we have a virtually unlimited number of values and the programmer is forced to set values to either true or false and it is significantly easier to keep programmers from toggling values they shouldn&#8217;t be able to.</p>
<p>In example 2 we&#8217;re limited to 32 possible values and the logic to determine whether an attribute is set is not intuitive.</p>
<p>Saying that bad code (attributes not stored on an object when they should be) is worse than good code (attributes stored on an object when they should be) is a given.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-253453">
				<div id="div-comment-253453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.valhallalegends.com/arta' rel='external nofollow' class='url'>Arta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253453">
			February 7, 2005 at 8:57 am</a>		</div>

		<p>I don&#8217;t think that an &#8216;absolute&#8217; comparison of these two approaches is valid. They have different design goals.</p>
<p>The first: fool-proof, but bulky &amp; slow(er)<br />
<br />The second: fast &amp; compact, but more error-prone</p>
<p>As is nearly always the case, the &#8216;best&#8217; approach depends on the context.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-253473">
				<div id="div-comment-253473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://perlmonks.org/?node=theorbtwo' rel='external nofollow' class='url'>James Mastros (theorbtwo)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253473">
			February 7, 2005 at 9:46 am</a>		</div>

		<p>Why wasn&#8217;t the rule from the beginning that unknown flag bits being set were silently ignored?  If you were designing the API from scratch today, would you do it that way &#8212; is it just something that was not thought of at the time &#8212; or is there a reason for making undefined bits being set an error?</p>
<p>Similarly, why do so many APIs, like CoInitialize, have reserved-always-NULL parameters?  Are these truly NOPs, or does passing non-NULL in this parameter have some undocumented use?  Why wasn&#8217;t this parameter resused instead of introducing CoInitializeEx (which also has an lpReserved, for no /apparent/ reason)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-253483">
				<div id="div-comment-253483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253483">
			February 7, 2005 at 10:08 am</a>		</div>

		<p>&quot;Why wasn&#8217;t the rule from the beginning that unknown flag bits being set were silently ignored?&quot;</p>
<p>For inputs to the OS I agree, it would be useful to have the API ignore undefined bits with the idea that later versions may define them.</p>
<p>For apps, you know that some app will make bad assumptions like unused bits are zero. In later versions of the API, when the unused bits become used, that app will do something dumb. You could discourage that by having unused bits return random values. Then people will post in blogs demanding to know what the undocumented bits mean since they aren&#8217;t zero.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-253513">
				<div id="div-comment-253513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253513">
			February 7, 2005 at 10:34 am</a>		</div>

		<p>James, re CoInitialize:  The &quot;reserved&quot; parameter used to have meaning&#8211;it used to be a pointer to a Malloc if I recall correctly.  But eventually it wasn&#8217;t needed anymore, so they turned it into reserved.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-253533">
				<div id="div-comment-253533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253533">
			February 7, 2005 at 11:27 am</a>		</div>

		<blockquote><p>
  Why wasn&#8217;t the rule from the beginning that unknown flag bits being set were silently ignored? If you were designing the API from scratch today, would you do it that way &#8212; is it just something that was not thought of at the time &#8212; or is there a reason for making undefined bits being set an error? </p>
<p>I&#8217;d probably require that any undefined bits be zero. After seeing Raymond&#8217;s experience with the sloppy version and seeing the intel manuals that demand a zero in all reserved fields, I can&#8217;t really see doing it any other way.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-253543">
				<div id="div-comment-253543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Allen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253543">
			February 7, 2005 at 11:36 am</a>		</div>

		<p>0.1-&#8230;<br />
<br />0.2-&#8230;<br />
<br />0.15-&#8230; </p>
<p>Looks fine to me. Of course, I&#8217;m used to seeing things like &quot;Section 0, Paragragh 15&quot; or &quot;verion 0, subverion 15&quot; being written as 0.15. I don&#8217;t I&#8217;ve ever used decimal numbers in a filename.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-253573">
				<div id="div-comment-253573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253573">
			February 7, 2005 at 3:39 pm</a>		</div>

		<p><a target="_new" href="http://support.microsoft.com/default.aspx?scid=kb;en-us;319827" rel="nofollow">http://support.microsoft.com/default.aspx?scid=kb;en-us;319827</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-253463">
				<div id="div-comment-253463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253463">
			February 7, 2005 at 9:01 am</a>		</div>

		<p>Of course, Windows&#8217; window/dialog style flags *are* ~20 years old&#8230; so it I&#8217;d say any &quot;bad&quot; usage of flags is excusable&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-253493">
				<div id="div-comment-253493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253493">
			February 7, 2005 at 10:28 am</a>		</div>

		<p>&quot;Ignoring undefined flags&quot; &#8211; for the same reason structure sizes are checked strictly.</p>
<p><a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2003/12/12/56061.aspx" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2003/12/12/56061.aspx</a></p>
<p>We learned this lesson the hard way &#8211; many apps passed uninitialzed garbage as flags and got away with it because the flags were ignored. Along comes the next version of Windows that *gives the flag meaning*, and now the app crashes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-253523">
				<div id="div-comment-253523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253523">
			February 7, 2005 at 11:11 am</a>		</div>

		<p>Hmm&#8230; About those strict struct sizes &#8211; I got bitten by that a week ago. I spent a whole day trying to figure out why my tracking tooltips don&#8217;t work. The regular tooltips work fine, but not the tracking tooltips. Turns out I was using the XP structure sizes on Win2000. The TOOLINFO structure is defined:<br />
<br />typedef struct tagTOOLINFOA {<br />
<br />    UINT cbSize;<br />
<br />    UINT uFlags;<br />
<br />    HWND hwnd;<br />
<br />    UINT_PTR uId;<br />
<br />    RECT rect;<br />
<br />    HINSTANCE hinst;<br />
<br />    LPSTR lpszText;<br />
<br />#if (_WIN32_IE &gt;= 0x0300)<br />
<br />    LPARAM lParam;<br />
<br />#endif<br />
<br />#if (_WIN32_WINNT &gt;= 0x0501)<br />
<br />    void *lpReserved;<br />
<br />#endif<br />
<br />} TTTOOLINFOA, NEAR *PTOOLINFOA, *LPTTTOOLINFOA;</p>
<p>But the documentation (even the online MSDN) doesn&#8217;t mention the lpReserved. Also, the size TTTOOLINFO_V2_SIZE is not defined, there is TTTOOLINFOA_V2_SIZE and TTTOOLINFOW_V2_SIZE versions, but not UNICODE independent version.</p>
<p>The bigger question is, why do some features work with the XP size, and some don&#8217;t?</p>
<p>Ivo<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-253603">
				<div id="div-comment-253603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253603">
			February 7, 2005 at 9:26 pm</a>		</div>

		<p>Apple had some fun when earlier 68k chips ignored upper bits in addresses since they couldn&#8217;t address that much memory.  Various developers used to use the upper bits as a type field, such as specifying if the remaining bits were a point or an integer.  Then along came a new chip that could address the memory and paid attention to the upper bits and all sorts of programs crashed so they had to introduce various compatibility hacks.  (Somewhere inside Apple is Raymond&#8217;s counterpart :-)</p>
<p>This kind of &quot;trick&quot; is very common for Lisp environments.  Nowadays you can pull the same trick but using the lower bits instead.  For example you know memory allocations are going to be 4 byte aligned so you can use the lower 2 bits to indicate the type of whatever is pointed to.  Remember to set the bits to zero when doing the memory access.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-253683">
				<div id="div-comment-253683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253683">
			February 8, 2005 at 6:18 am</a>		</div>

		<p>Jonathan: IIRC, the reason the pointer to the malloc was removed was because it wasn&#8217;t possible to set it.  Originally, there was a CoSetMalloc to go along with CoGetMalloc &#8211; the idea was that you could change the allocator used by COM to suit the needs of your application.</p>
<p>Unfortunately, there were a bunch of apps/shell extensions that relied on the fact that the shell used LocalAlloc() for it&#8217;s implementation of IMalloc and they called LocalFree on the memory (instead of calling CoGetMalloc and using that value).</p>
<p>And when someone tried to replace the default allocator, blam!</p>
<p>So the parameter was pulled to ensure that apps couldn&#8217;t misbehave in that way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-253783">
				<div id="div-comment-253783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253783">
			February 8, 2005 at 9:00 am</a>		</div>

		<blockquote><p>
  Cooney: I&#8217;d probably require that any undefined bits be zero. After seeing Raymond&#8217;s experience with the sloppy version and seeing the intel manuals that demand a zero in all reserved fields, I can&#8217;t really see doing it any other way. </p>
<p>But then you&#8217;ve lost the ability to cleanly handle future flags.</p>
<p>The reason Kristoffer Henriksson suggested that the OS ignore unknown flags was so that programs written for later OSs (say Win2K) could set those flags without it affecting their ability to run on an older OS (say NT4) which didn&#8217;t handle the flag.</p>
<p>If we follow your suggestion to require unused flags be set to zero, we are back to not being able to pass flags to NT4 that might be valid on Win2k, but not valid on NT4.  I assume that would require the API to return an error if it saw a non-zero value for a flag it didn&#8217;t support, since if the API didn&#8217;t enforce the requirement, we are back to the problem Raymond listed with Apps passing random flags because they aren&#8217;t forced to do otherwise.</p>
<p>If the OS threw an error on an unknown flag it would require all apps to choose to:<br />
  <br />1) never select flags older OSs didn&#8217;t support,<br />
  <br />2) select new flags knowing it would prevent the program from running on older OSs,<br />
  <br />3) add code to detect which OS you were on in order to choose which flags to throw.</p>
<p>Handling forward and backward compatibility is just a tricky thing to do&#8230;
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-253633">
				<div id="div-comment-253633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253633">
			February 8, 2005 at 1:06 am</a>		</div>

		<p>&gt; We learned this lesson the hard way &#8211; many<br />
<br />&gt; apps passed uninitialzed garbage as flags<br />
<br />&gt; and got away with it because the flags were<br />
<br />&gt; ignored. Along comes the next version of<br />
<br />&gt; Windows that *gives the flag meaning*, and<br />
<br />&gt; now the app crashes.</p>
<p>That is true.  That also explains why Windows XP checks some supposedly ignored structure members and returns errors if those members are not zero &#8212; later versions of Windows might use them for something.  Now if MSDN would say that those members should be zero instead of saying that those members are ignored, programmers would understand faster why they were getting error returns.</p>
<p>Sorry I don&#8217;t remember which APIs I was getting hit by because it was about two years ago.  Though I have a feeling that it would be productive to search for the word &quot;ignore[d]&quot; in the Windows API section of MSDN.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-253893">
				<div id="div-comment-253893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve P</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-253893">
			February 8, 2005 at 1:06 pm</a>		</div>

		<p>Sounds reasonable to me.</p>
<p>If you&#8217;re supposedly supporting an older operating system, then you should be making sure your code actually works on said operating system.</p>
<p>The older OS has no idea how important those random bits might be, so all it can (and should) do is throw an error.</p>
<p>Think of it like a function that is only available in later versions. Should the older OS simply ignore it because it isn&#8217;t available? :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-254183">
				<div id="div-comment-254183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://aboutthe&quot;trick&quot;usedbylisps' rel='external nofollow' class='url'>jbn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-254183">
			February 9, 2005 at 2:09 pm</a>		</div>

		<p>I think gnu emacs does that too, with is why there&#8217;s a silly limit on the size of editable files having to fit on 26 bits or something (you could find the exact number by looking at the source code).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-268473">
				<div id="div-comment-268473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/03/30/403711.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050207-00/?p=36513#comment-268473">
			March 30, 2005 at 8:57 am</a>		</div>

		<p>Walk the template header and do what it says.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>