<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-787593">
				<div id="div-comment-787593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787593">
			November 19, 2009 at 7:10 am</a>		</div>

		<p>I don&#8217;t know what irony you are looking for, but I assume the assignment operator for CComPtr calls AddRef(); there is probably an Attach() method that does what the customer really wants to do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787603">
				<div id="div-comment-787603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787603">
			November 19, 2009 at 7:12 am</a>		</div>

		<p>SHCreateMemStream must AddRef before it returns the stream. operator= must also AddRef before it stores the pointer in the CComPtr.</p>
<p>Hence, you end up with an extra AddRef = Memory Leak.</p>
<p>Solution would be to use whatever member function allows you to attach to a CComPtr without AddRefing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787613">
				<div id="div-comment-787613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mathew Grabau</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787613">
			November 19, 2009 at 7:15 am</a>		</div>

		<p>According to MSDN the SHCreateMemStream function acts like a less functional CreateStreamOnHGlobal. The notes don&#8217;t include anything on modifying the freeing procedure, which in CreateStreamOnHGlobal is controlled by the parameter BOOL fDeleteOnRelease. My guess is that SHCreateMemStream adopts the functionality as if fDeleteOnRelease (which can&#8217;t be changed) is set to FALSE. This would mean that the caller is responsible for freeing the memory once it is used. The smart pointer, while taking care of AddRef/Release I guess it doesn&#8217;t take care of freeing the memory block used for the interface call itself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787623">
				<div id="div-comment-787623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787623">
			November 19, 2009 at 7:32 am</a>		</div>

		<p>Mathew, the documentation says that SHCreateMemStream &quot;does not allow direct access to the stream contents&quot; (no &nbsp;GetHGlobalFromStream), so the caller has no way to free the memory.</p>
<p>Btw., this function is another one with the ominous &quot;might be altered or unavailable in subsequent versions of Windows&quot; warning. I&#8217;m wondering about the policy behind these warnings, is Microsoft really planning a break from the old routine and going to risk breaking backward compatibility just to save a few bytes and a bit of a maintenance burden?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787643">
				<div id="div-comment-787643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mathew Grabau</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787643">
			November 19, 2009 at 7:40 am</a>		</div>

		<p>Erik thanks for clarifying that &#8211; I misread the documentation for the first parameter to that function. Now looking at it closer I see that it&#8217;s the initialization for the buffer. My bad.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787653">
				<div id="div-comment-787653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Laura T.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787653">
			November 19, 2009 at 8:20 am</a>		</div>

		<p>SHCreateMemStream returns IStream with refcount +1</p>
<p>The = operator of CComPtr addrefs again (via AtlComPtrAssign ).. IStream refcount is now +2</p>
<p>The destructor of the CComPtr releases the IStream.. refcount is now +1 and it will leak.</p>
<p>CComPtr.Attach(::SHCreateMemStream(utf8Xml, cbUtf8Xml); would work.. Attach does not increment refcount.</p>
<p>Smart pointers need smart users :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787663">
				<div id="div-comment-787663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Laura T.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787663">
			November 19, 2009 at 8:35 am</a>		</div>

		<p>.. and for the irony.. for me it is that without smart pointers no memory leak. Too smart.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787693">
				<div id="div-comment-787693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787693">
			November 19, 2009 at 9:31 am</a>		</div>

		<p>This is a good rebuttal to 640k&#8217;s insistence that programmers need not understand the libraries they use. I won&#8217;t use any smart-pointer class that I haven&#8217;t stepped through in a debugger. I&#8217;ve been burned by too many of them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787703">
				<div id="div-comment-787703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe S.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787703">
			November 19, 2009 at 9:53 am</a>		</div>

		<p>This is one of those issues that will never come up if you stick to defining variables at the point of initialization instead of at top of block:</p>
<p>CComPtr&lt;IStream&gt; pMemoryStream = ::SHCreateMemStream(utf8Xml, cbUtf8Xml);</p>
<div class=post>[<i>Assuming it&#8217;s possible. It might be a member variable, or the variable might be used outside the scope in which it is initialized. In these cases you&#8217;re forced to declare and initialize separately. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787713">
				<div id="div-comment-787713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787713">
			November 19, 2009 at 9:54 am</a>		</div>

		<p>From looking at the MSDN documentation for SHCreateMemStream, it looks like a function that was not intended to be a public API.</p>
<p>A good API design would be to return an HRESULT and set an out parameter. &nbsp;That would also not confuse users of smart-pointers who do not understand smart pointers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787723">
				<div id="div-comment-787723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787723">
			November 19, 2009 at 10:08 am</a>		</div>

		<p>I know it uglies-up the code a bit but I prefer my smart wrapper objects to be explicit about what they&#8217;re doing.</p>
<p>Rather than use operator= and attach(), I&#8217;d rather have methods called SetAndTakeRef() and SetAndAddRef() or similar.</p>
<p>Then you don&#8217;t have to look at the docs or implementation to know what&#8217;s going on; you can&#8217;t be confused when switching between different classes/behaviours; and you&#8217;re reminded of what&#8217;s going on whenever you use the methods.</p>
<p>I think it&#8217;s better to have slightly uglier source than to end up with ugly behaviour like leaks and double-releases.</p>
<p>Of course, in a managed languages this problem doesn&#8217;t exist with basic references, so I&#8217;m not saying C# should get rid of its assignment operator. C++ ain&#8217;t such a language, though, and trying to make it look like one seems more dangerous &amp; obfuscating than clever &amp; simple.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787733">
				<div id="div-comment-787733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dwj</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787733">
			November 19, 2009 at 10:10 am</a>		</div>

		<p>The Application Verifier link is broken.</p>
<p>(Current) MSDN page: &nbsp;<a href="http://msdn.microsoft.com/en-us/library/ms220948.aspx" target=_new rel=nofollow rel="nofollow">http://msdn.microsoft.com/en-us/library/ms220948.aspx</a></p>
<p>Download: <a href="http://www.microsoft.com/downloads/details.aspx?familyid=c4a25ab9-649d-4a1b-b4a7-c9d8b095df18&amp;displaylang=en" target=_new rel=nofollow rel="nofollow">http://www.microsoft.com/downloads/details.aspx?familyid=c4a25ab9-649d-4a1b-b4a7-c9d8b095df18&#038;displaylang=en</a></p>
<div class=post>[<i>Fixed. Thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787743">
				<div id="div-comment-787743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle Sluder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787743">
			November 19, 2009 at 11:02 am</a>		</div>

		<p>The fact that this:</p>
<p>Foo f = Bar();</p>
<p>is completely unequivalent to this:</p>
<p>Foo f;</p>
<p>f = Bar();</p>
<p>is one of the worst misfeatures of C++. &nbsp;I am very glad that modern language design (including C#) instead favors one pattern of assignment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787753">
				<div id="div-comment-787753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787753">
			November 19, 2009 at 12:00 pm</a>		</div>

		<p>@Kyle Sluder: It&#8217;s not really any different in C#. This line:</p>
<p>int x = 123;</p>
<p>is different from these lines:</p>
<p>int x;</p>
<p>x = 123;</p>
<p>At least, they are unless the optimizer steps in. Ditto reference types:</p>
<p>Foo f = new Foo();</p>
<p>f = olderFoo;</p>
<p>But ignoring that, how else could C++ have been designed?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787773">
				<div id="div-comment-787773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787773">
			November 19, 2009 at 12:15 pm</a>		</div>

		<p>I was a bit hasty&#8230; immutable value types in C# are different than scalar types in C++. My first example isn&#8217;t really applicable. There is still a difference between initialization and assignment, though, and the question of how else C++ would have been designed is still valid. I&#8217;ve probably already gone too far off into the weeds, anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787793">
				<div id="div-comment-787793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787793">
			November 19, 2009 at 1:38 pm</a>		</div>

		<p>The annoying thing about smart pointers is that even if you eschew them because the complexity just isn&#8217;t worth the benefit, you still have to share code with people who 1) don&#8217;t agree, so they use them, and 2) think they&#8217;re a magic bullet that lets them stop thinking. &nbsp;Life would be simpler if my less-talented coworkers just leaked regular pointers. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-787813">
				<div id="div-comment-787813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787813">
			November 19, 2009 at 2:03 pm</a>		</div>

		<p>&quot;Assuming it&#8217;s possible. It might be a member variable, or the variable might be used outside the scope in which it is initialized. In these cases you&#8217;re forced to declare and initialize separately. -Raymond&quot;</p>
<p>I use a lot of boost::shared_ptr (now std::tr1::shared_ptr) and the standard usage for that kind of thing is like this:</p>
<p>shared_ptr&lt;MyClass&gt; m_SomeMemberVariable;</p>
<p>&#8230;</p>
<p>shared_ptr&lt;MyClass&gt; temp(new MyClass());</p>
<p>m_SomeMemberVariable(temp);</p>
<p>In fact, shared_ptr doesn&#8217;t even have an implicit constructor that takes a T* &#8211; you can only explicity construct it (like I&#8217;ve done here). That means something like:</p>
<p>m_SomeMemberVariable = new MyClass();</p>
<p>doesn&#8217;t even compile. It requires extra typing, and sometimes an extra variable, but it helps to avoid this particular bug. Of course, it&#8217;s too late for CComPtr, now, though&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787823">
				<div id="div-comment-787823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787823">
			November 19, 2009 at 2:31 pm</a>		</div>

		<p>Erik: functions with that disclaimer are previously undocumented APIs that Microsoft used in Internet Explorer, Office or other applications, and was forced to document as part of some antitrust settlement or another</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787833">
				<div id="div-comment-787833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">quixver</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787833">
			November 19, 2009 at 3:45 pm</a>		</div>

		<p>&quot; Laura T.</p>
<p>&#8211;</p>
<p>Smart pointers need smart users :)</p>
<p>&quot;</p>
<p>+1 for the post.</p>
<p>in addition &#8211; i move we bring in idiot proof pointers as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787843">
				<div id="div-comment-787843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787843">
			November 19, 2009 at 7:37 pm</a>		</div>

		<p>In my experience, programmers are always tempted to write functions that return COM pointers, instead of returning them in a parameter and returning an HRESULT, often to save lines of code. &nbsp;The problem then is the ambuiguity; did the programmer addref the pointer or not? &nbsp;I&#8217;ve seen both.</p>
<p>The correct code for this case here of course is</p>
<p>pMemoryStream.p = ::SHCreateMemStream(utf8Xml, cbUtf8Xml);</p>
<p>but, that&#8217;s just something you need to learn.</p>
<p>In an ideal world, smart pointer would be part of the API</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787853">
				<div id="div-comment-787853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787853">
			November 19, 2009 at 7:57 pm</a>		</div>

		<p>@ulric: The rule is &quot;the function returning the pointer must addref&quot;. Of course, that requires people playing by the rules&#8230; (CWnd::GetControlUnknown being the most prominet violator, but also without much company).</p>
<p>@NT: you have to think about reference count when you cross the raw/smart border &#8211; this also requires that you understand reference counting in general.</p>
<p>Beyond that, raw pointers just require to much boilerplate code. And yes, I am one of those people who insist on using them, and I stop thinking about reference counts once I have a smart pointer and I&#8217;ve ruled out circles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-787783">
				<div id="div-comment-787783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787783">
			November 19, 2009 at 1:38 pm</a>		</div>

		<p>&gt; CComPtr&lt;IStream&gt; pMemoryStream = ::SHCreateMemStream(utf8Xml, cbUtf8Xml);</p>
<p>Actually this leaks for the same reason that naked assignment does. &nbsp;CComPtr&lt;IFoo&gt;::CComPtr(IFoo *pFoo) calls pFoo-&gt;AddRef() just as CComPtr&lt;IFoo&gt;::operator=(IFoo </p>
<p>*) does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787873">
				<div id="div-comment-787873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787873">
			November 19, 2009 at 10:17 pm</a>		</div>

		<p>CComPtr author(s) made an idiotic choice to have a direct conversion from a raw pointer and AddRef there. This is wrong because there isn&#8217;t any agreeable default of what such a conversion should do. Some people need an AddRef an some don&#8217;t. As a result many people are bitten by bugs like the one above. There is also a reverse bug &#8212; crashing because of an extra Release(). A good smart pointer would disallow the conversion and require the caller to specify the exact intent in one way or another.</p>
<p>It isn&#8217;t hard to find a decent COM compatible smart pointer that doesn&#8217;t suffer from this problem. I wish the monkeys who wrote and maintain ATL were replaced by some at least half decent C++ library designers. Preferably from the industry instead of the usual ex-interns that bake in MS for many years without learning anything not in MS source base.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787893">
				<div id="div-comment-787893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787893">
			November 20, 2009 at 12:37 am</a>		</div>

		<p>Marvin: If you want to make the programmer specify the intent in every potentially ambiguous situation, then you can just tell him to use raw pointers.</p>
<p>For example, suppose the pointer is going out of scope. Should it be automatically released, or not? Decisions, decisions&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787903">
				<div id="div-comment-787903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">President Pleasence</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787903">
			November 20, 2009 at 2:06 am</a>		</div>

		<p>Y-You are the&#8230; Duke of New&#8230; New York. You&#8217;re A-Number One.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787883">
				<div id="div-comment-787883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">piersh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787883">
			November 19, 2009 at 10:56 pm</a>		</div>

		<p>this is just BAD API DESIGN.</p>
<p>seriously, what kind of COM API is this:</p>
<p>IStream *SHCreateMemStream( &nbsp; &nbsp; &nbsp;</p>
<p> &nbsp; &nbsp;const BYTE *pInit,</p>
<p> &nbsp; &nbsp;UINT cbInit</p>
<p>);</p>
<p>it should have been</p>
<p>HRESTUL SHCreateMemStream( &nbsp; &nbsp; &nbsp;</p>
<p> &nbsp; &nbsp;const BYTE *pInit,</p>
<p> &nbsp; &nbsp;UINT cbInit,</p>
<p> &nbsp; &nbsp;[out] IStream **ppStream</p>
<p>);</p>
<p>and there would have been NO confusion.</p>
<p>I understand that you guys couldn&#8217;t load OLE32.DLL into explorer in win95 because of the whole 4MB thing but you could at least have followed the idioms.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787913">
				<div id="div-comment-787913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-787913">
			November 20, 2009 at 4:39 am</a>		</div>

		<p>Gecko tends to require that a raw T* does not have an extra reference and introduces a type already_AddRefed&lt;T&gt; for when you want to return the sole reference to an object. The generated code seems to be about the same as for a T** outparam.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-788063">
				<div id="div-comment-788063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-788063">
			November 21, 2009 at 2:17 am</a>		</div>

		<p>Duke of New York, you are mistaken. Forcing somebody to *choose* automatic behavior is not the same as forcing somebody to manually do everything. If you want an automatic transmission car to go backward you have to put the stick into R, if you want to go forward you have to use D. However you don&#8217;t need worry about switching between 1,2,3,4 and 5. See the difference?</p>
<p>A decent smart pointer would require user to write something like this:</p>
<p>DecentPtr pStream = AddRefPtr(SHCreateBlahBlah(&#8230;.));</p>
<p>or</p>
<p>DecentPtr pStream = AttachPtr(SHCreateBlahBlah(&#8230;.));</p>
<p>but will *not* compile</p>
<p>DecentPtr pStream = SHCreateBlahBlah(&#8230;.);</p>
<p>These are your R and D. After you made your choice everything else proceeds automatically.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-788363">
				<div id="div-comment-788363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Greg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091119-00/?p=15963#comment-788363">
			November 24, 2009 at 7:20 am</a>		</div>

		<p>The *real* lesson here is that Microsoft APIs are so insane and poorly designed that writing to them is a complete nightmare.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>