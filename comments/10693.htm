<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-912773">
				<div id="div-comment-912773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912773">
			May 11, 2011 at 7:14 am</a>		</div>

		<p>Gotta love those double-null terminated strings! &nbsp;Personally, they never caused me any trouble and always made perfect sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912783">
				<div id="div-comment-912783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912783">
			May 11, 2011 at 7:23 am</a>		</div>

		<p>This falls under the category of marshaling, but I think it&#39;s worth calling out that they&#39;re also useful if you have the data in shared memory. &nbsp;You can just share the double-null-terminated strings straight up between processes with no gotchas. &nbsp;If you used an array of pointers instead, that wouldn&#39;t work because the processes have different address spaces. &nbsp;And like you said, you could use an array of integer offsets instead of pointers, but that&#39;s even more cumbersome.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-912823">
				<div id="div-comment-912823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912823">
			May 11, 2011 at 8:53 am</a>		</div>

		<p>As mentioned in the other discussion, it&#39;s a perfectly simple paradigm as long as you approach it as &quot;list of strings terminated by an empty string&quot; and don&#39;t subscribe to the double-null voodoo misdescription.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912863">
				<div id="div-comment-912863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912863">
			May 11, 2011 at 9:24 am</a>		</div>

		<p>Sometimes I triple null terminate my strings just to be safe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-912873">
				<div id="div-comment-912873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912873">
			May 11, 2011 at 9:45 am</a>		</div>

		<p>Wow. Just when I thought C strings couldn&#39;t get any worse, I run across this article, and the earlier one behind the first link!</p>
<p>How many of the problems with double-null-terminated strings (including the problem of including a blank string in the middle of the array) would vanish instantly if the string-array type was based on Pascal strings instead? (Or some variant on the basic concept that can handle strings longer than 255 bytes?)</p>
<div class="post">[<i>Great, change it to &quot;array of counted strings, terminated by a zero-length string.&quot; You still have the problem of including a blank string in the middle of the array. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912883">
				<div id="div-comment-912883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912883">
			May 11, 2011 at 10:20 am</a>		</div>

		<p>&gt; [Great, change it to &quot;array of counted strings, terminated by a zero-length string.&quot; You still have the problem of including a blank string in the middle of the array. -Raymond]</p>
<p>He did not go far enough with his change of the concept. How about a counted array of counted strings? (That is, the array begins with a size_t giving the number of strings, and each string is prefixed with a size_t giving the string&#39;s size.)</p>
<div class="post">[<i>Sure, you could do that too. But a counted array of null-terminated strings works just as well; the pascal-ness was a red herring. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-912893">
				<div id="div-comment-912893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912893">
			May 11, 2011 at 10:47 am</a>		</div>

		<p>&gt; [Sure, you could do that too. But a counted array of null-terminated strings works just as well; the pascal-ness was a red herring. -Raymond]</p>
<p>No, c strings doesn&#39;t works just as well, pascal strings can contain null chars.</p>
<div class="post">[<i>But that has nothing to do with the representation of a collection of strings. (I&#39;m not arguing for/against C-style vs. pascal-style strings. I&#39;m just pointing out that &quot;switch to pascal style&quot; doesn&#39;t address the original problem.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912903">
				<div id="div-comment-912903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EvanED</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912903">
			May 11, 2011 at 11:00 am</a>		</div>

		<p>nil: That&#39;s still a red herring in the sense that moving from a single string to a list of strings (be it counted or terminated by an empty string) doesn&#39;t introduce any issues that weren&#39;t already around if you have just a single null-terminated string.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-912913">
				<div id="div-comment-912913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912913">
			May 11, 2011 at 1:20 pm</a>		</div>

		<p>It would&#39;ve been much healthier if the total size were stored in the begginning of this blob, like ole strings or pascal strings. Nowadays, there is no simple (i.e. without a loop) way to find that third parameter for memcpy. No analog of strlen(). Maybe this is whyFor this very reason %PATH% uses ; and $path uses :</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912923">
				<div id="div-comment-912923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">davep</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912923">
			May 11, 2011 at 2:01 pm</a>		</div>

		<p>Mason Wheeler: &quot;Wow. Just when I thought C strings couldn&#39;t get any worse, I run across this article, and the earlier one behind the first link.&quot;</p>
<p>The double-null-terminated strings are not very common. Don&#39;t panic. It&#39;s unlikely that they will cause your children to drop out of school and become hippies.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-912833">
				<div id="div-comment-912833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912833">
			May 11, 2011 at 9:07 am</a>		</div>

		<p>I actually *like* the double null terminated strings.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912933">
				<div id="div-comment-912933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912933">
			May 11, 2011 at 6:31 pm</a>		</div>

		<p>Just want to ask: Since there are fixed char size Unicode strings (such as UCS-2/UTF-32) that can contain null bytes, is there any established method for handling nulls for them in null terminated strings (or double null terminated ones)? Or should we just seek other possible methods like passing offsets when we need to pass the strings through the boundaries?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-912963">
				<div id="div-comment-912963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912963">
			May 12, 2011 at 2:40 am</a>		</div>

		<p>I hardly had any problem with double-null terminated strings.</p>
<p>It gets tricky when you start having TRIPLE-null terminated strings, such as OPENFILENAME&#39;s filter list (actually a list of pairs of strings, terminated by a pair of empty strings).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912953">
				<div id="div-comment-912953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912953">
			May 12, 2011 at 12:55 am</a>		</div>

		<p>@Cheong:</p>
<p>This is not a problem because UCS-2 &quot;double-null-terminated strings&quot; are terminated by two null UCS-2 *characters* (not bytes).</p>
<p>Like Raymond said, the easier and more consistent way of describing this concept is: The list of null-terminated strings is terminated by the first empty string. (Therefore, in case of UCS-2, you have four null bytes at the end. But if the entires list is empty, only two null bytes are there.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913063">
				<div id="div-comment-913063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-913063">
			May 12, 2011 at 1:31 pm</a>		</div>

		<p>Yes, I meant a counted array of counted strings, like Cesar said. &nbsp;I suppose I didn&#39;t explain it well enough. &nbsp;That would allow for empty strings in the middle of the list. &nbsp;And making the individual strings Pascal (counted) strings instead of C strings has a definite advantage if this is used for marshalling: if you know the length up front, you can copy the bytes around much faster because you don&#39;t have to do it one byte at a time testing each one for null.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com0003400182d76c6f odd alt thread-odd thread-alt depth-1" id="comment-913183">
				<div id="div-comment-913183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Richard+Russell' rel='external nofollow' class='url'>Richard Russell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-913183">
			May 13, 2011 at 2:52 pm</a>		</div>

		<p>@Medinoc: &quot;It gets tricky when you start having TRIPLE-null terminated strings, such as OPENFILENAME&#39;s filter list&quot;</p>
<p>I don&#39;t think that requires a triple-null terminated string. &nbsp;The docs only say &#39;The last string in the buffer must be terminated by two NULL characters&#39;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>