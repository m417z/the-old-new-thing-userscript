<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1114733">
				<div id="div-comment-1114733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1114733">
			March 21, 2014 at 7:15 am</a>		</div>

		<p>First possible cause: Someone else did the special thing.</p>
<p>Second possible cause: He just used any symbol in the library contained obj file normally.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1114823">
				<div id="div-comment-1114823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1114823">
			March 21, 2014 at 8:07 am</a>		</div>

		<p>I encountered a similar situation on unix and had to create a dummy function that called all the functions that might get called when dynamic libraries (shared objects) get loaded. &nbsp; Then I had to call put in a call to the dummy function in the main code in a way that it didn&#39;t get optimised out, &nbsp;something like if day of the month =32 then call dummy function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1114833">
				<div id="div-comment-1114833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1114833">
			March 21, 2014 at 8:08 am</a>		</div>

		<p>It sure would be nice if__decl­spec(dll­export) were extended so we didn&#39;t have to use a module definition file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1114893">
				<div id="div-comment-1114893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1114893">
			March 21, 2014 at 8:45 am</a>		</div>

		<p>I take it the Windows linker doesn&#39;t have an equivalent of -Wl,&#8211;whole-archive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115013">
				<div id="div-comment-1115013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Curran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115013">
			March 21, 2014 at 11:11 am</a>		</div>

		<p>My guess for the exercise is that something else has a reference to it, probably some other module in the library.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115153">
				<div id="div-comment-1115153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Barry Kelly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115153">
			March 21, 2014 at 8:42 pm</a>		</div>

		<p>The confusion could be avoided by considering dllexport symbols encountered during object linking as roots (the workings of a smart linker is a lot like the tracing phase of a simple garbage collector, up to and including allocating addresses).</p>
<p>But that would create the opposite problem, where people who link in random static libraries for their static utilities, and wonder where all these dll exports came from.</p>
<div class="post">[<em>That is exactly what happens. The problem is that the dllexport symbols is never encountered if its containing OBJ is never referenced. Just like GC. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115163">
				<div id="div-comment-1115163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jonwil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115163">
			March 21, 2014 at 11:53 pm</a>		</div>

		<p>I wish there was an easy way to get a list of all the obj files in a lib file AND all the ones that actually got linked into the exe.</p>
<p>I have been bitten before with the whole &quot;obj files that aren&#39;t referenced but which contain important static data initializers don&#39;t get pulled in&quot; thing (which is another variant of this dllexport issue)</p>
<div class="post">[<em>You can sort of extract this information from the (voluminous) output of LINK /VERBOSE. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115193">
				<div id="div-comment-1115193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115193">
			March 22, 2014 at 12:57 am</a>		</div>

		<p>If you reference any other symbol in the obj file, the whole obj file will be included in the image, so the dllexport-ed function will actually get exported.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115203">
				<div id="div-comment-1115203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115203">
			March 22, 2014 at 3:41 am</a>		</div>

		<p>Firefox used to have a file dlldeps-xul.cpp for this very purpose, but they finally got around to getting rid of it last November. (They&#39;d actually stopped using intermediate static libs some time ago in favour of response files for other reasons.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115253">
				<div id="div-comment-1115253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stickboy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115253">
			March 22, 2014 at 7:56 pm</a>		</div>

		<p>&quot; __decl&shy;spec(dll&shy;export) does not influence the linking process.&quot;</p>
<p>But *shouldn&#39;t* it?</p>
<p>&quot;The best solution is to use an explicit DEF file&#8230;&quot;</p>
<p>Alas, that doesn&#39;t work well for C++ classes. =(</p>
<div class="post">[<em>One does not change the ground rules for linking lightly. A lot of stuff depends on those rules. For example, it makes &quot;cleaning up unused LIBs&quot; much more difficult. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115273">
				<div id="div-comment-1115273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115273">
			March 23, 2014 at 10:06 am</a>		</div>

		<p>@stickboy: You can&#39;t export C++ classes from DLL. Well, you can, but then any application that wants to use this DLL must use exactly the same version of runtime library (Debug/Release distinctions also matter).</p>
<p>Maybe not, but after a day of access violations caused with the difference in implementations of std::vector and std::string in main app and the DLL, we decided to rebuild that library from source as a static library — it took just a quarter of a day!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115283">
				<div id="div-comment-1115283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115283">
			March 23, 2014 at 12:04 pm</a>		</div>

		<p>@Joker_vD:</p>
<p>Well, that is also possible to do with regular functions if you don&#39;t think about compatibility. That is where the problem usually lies. Because the versions of the standard C++ library is tied to the compiler version, it is possible to see heavy changes between releases. On the other hand, if you were to have a well versioned class with version compatibility in mind then it would be less of a problem.</p>
<p>The biggest of the versioning issues with the standard C++ library is down to the mix of protected/private members and public members. This could lead to inlined members calling a private/protected member that may not exist in a different version and cause problems. There is one major class based version independent technology in Windows, and that is the dreaded COM. If you look at some of those implementations then you notice some of the reasons why it is version independent.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115313">
				<div id="div-comment-1115313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115313">
			March 23, 2014 at 6:06 pm</a>		</div>

		<p>@Joker_vD: At least under Linux that problem has been pretty much solved with a standard ABI and backwards compatible standard library versioning, as I understand it (someone correct me if I&#39;m wrong). So it&#39;s not really an insurmountable problem even in C++..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115323">
				<div id="div-comment-1115323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115323">
			March 23, 2014 at 11:34 pm</a>		</div>

		<p>@Crescens2k: Well, I wish you were one of the Connector/C++ developers, because that thing has some severe memory problems with std::string and std::vector: one workaround is to always pass c_str() to it. Now, a fresh developer comes in, sees all this, sees that there is overload with std::string instead of const char*, removes all c_str()&#8230; and the application now crashes. &quot;Hilarity ensues&quot;.</p>
<p>@voo: Nothing is an insurmountable problem unless it&#39;s undecidable or has exponential complexity. However, good luck with trying to make Microsoft, Borland, Intel, Metrowerks, and those who maintain GCC/Clang/etc. ports to use one standard ABI. First of all, you&#39;d have to invent that ABI, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115333">
				<div id="div-comment-1115333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115333">
			March 24, 2014 at 1:03 am</a>		</div>

		<p>@Joker_vD: That is already the case. ICC, GCC and clang all use the following ABI [<a href="http://mentorembedded.github.io/cxx-abi/abi.html" rel="nofollow" target="_new">mentorembedded.github.io/&#8230;/abi.html</a>]</p>
<p>Note that while it is called the &quot;Itanium ABI&quot;, it is used for x86-32, x86-64, ARM, POWER, etc.</p>
<div class="post">[<em>But that ABI assumes that all components agree on the contents of each class (and dictates how the memory layout for the agreed-upon class shall be performed). It doesn&#39;t dictate, for example, what a std::string should look like. So you still have a problem if two modules are linked together with conflicting definitions of std::string. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115413">
				<div id="div-comment-1115413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115413">
			March 24, 2014 at 12:15 pm</a>		</div>

		<p>Yes, indeed the problem with a situation when two modules are linked together with conflicting definitions of std::string is because each module has its own set of std::string&#39;s methods (including constructor), that have completely different ideas about how a string&#39;s intestines are laid out.</p>
<p>But I think it is possible to solve this problem by using one unique module with std::string&#39;s methods, that would return a pointer to an opaque structure, which could be passed as a &quot;this&quot; parameter to those methods&#8230; wait a second.</p>
<p>Why, oh why does it always turn into COM? It&#39;s like when you steal all the parts from a sewing machines factory, and then you start to assemble them, but no matter how you put them together, you always get a machinegun.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115453">
				<div id="div-comment-1115453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115453">
			March 24, 2014 at 3:31 pm</a>		</div>

		<p>&gt; But I think it is possible to solve this problem by using one unique module with std::string&#39;s methods, that would return a pointer to an opaque structure, which could be passed as a &quot;this&quot; parameter to those methods&#8230; wait a second.</p>
<p>Because that isn&#39;t the problem with COM.</p>
<p>The problem with COM is imposing a particular threading model, the tie-in to the event pump, the registration of classes &amp; interfaces, and so forth. There can exist an ABI that does the first part w/o the second. For an obvious stupid example, everything invokes as call-by-name (like reflection does now). Better can be done with an hour&#39;s thought.</p>
<div class="post">[<em>There are many parts to COM. You can use COM without registering classes. (Just use custom factories.) And if you never marshal, then apartments and interface registration don&#39;t enter the picture either. It turns out most COM code doesn&#39;t involve marshaling. The nasty parts of COM come from the marshaling. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115463">
				<div id="div-comment-1115463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115463">
			March 24, 2014 at 3:59 pm</a>		</div>

		<p>@Joshua:</p>
<p>Of course it can, but also remember that COM was designed for language independence. This would be tough to compare it to a standard ABI for C++.</p>
<p>The problem with an ABI like this is getting it some traction.</p>
<p>I also disagree with those problems. If you control things correctly, you can get away without registering classes and setting to a particular threading model. You don&#39;t require anything to use the techniques of COM, these things are only required when you start using the runtime services.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115473">
				<div id="div-comment-1115473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115473">
			March 24, 2014 at 4:10 pm</a>		</div>

		<p>Try this one on for size. If you remove all the stuff required for registration and marshalling, it then becomes reasonably obvious to consider that one may now add methods to interfaces without breaking anything. Try to do it with interface registration not designed in advance to support it.</p>
<p>What was wanted: fix the brittle base class problem with a resilient ABI.</p>
<p>What was obtained: COM.</p>
<p>What should have been done: fixups for vtable offsets.</p>
<div class="post">[<em>Um, if you add a method to an interface, how do you know whether the object supports the old interface or the new one? Presumably you still need the &quot;Interfaces are immutable&quot; rule. Not sure what you mean by fixups for vtable offsets, but it&#39;s largely beside the point because no compiler supports them. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115493">
				<div id="div-comment-1115493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115493">
			March 24, 2014 at 6:29 pm</a>		</div>

		<p>[Um, if you add a method to an interface, how do you know whether the object supports the old interface or the new one?]</p>
<p>Good question actually. We&#39;re talking about a restricted subset of the problem where this doesn&#39;t happen (Upgrading the standard library).</p>
<p>The stated problem can be solved by load-time vtable construction (code for this would have to go in the generated portion of DLLMain for the obvious reason) and checking if the function is null before calling it. This of course assumes you know what to do about receiving an old version of the interface.</p>
<p>[Not sure what you mean by fixups for vtable offsets]</p>
<p>The offset of the function address in the vtable is not known until the loader loads the EXE and DLLs into memory.</p>
<p>Depending on how you build your vtables, one more fixup for object size may be required (whether vtables contain the object size is an implementation detail).</p>
<p>Copy constructor looks like Object(const Object &amp;src) { src.CloneTo(this); } so that copy constructor can be virtual. Other constructors get the same treatment.</p>
<p>There, cross-DLL all-vfunction brittle base class solved. No registration to break.</p>
<p>Total elapsed time: 55 minutes.</p>
<div class="post">[<em>You can sketch it out in 55 minutes if you ignore the design constraints. Fixups for vtable offsets would mean that (1) all vtable offsets must be encoded as 32-bit values, which prevents them from being compile-time constants that can be encoded optimally. This is especially painful on architectures which cannot encode 32-bit immediates. They would have to burn a register. (2) Changing all compilers to generate code differently. (3) Massively increasing the number of fixups generated per module. This is a problem for some architectures like MIPS and ia64 which forbid fixups in the code segment. (4) Incurring copy-on-write penalties at load time. One of the design constraints of COM was that it be implementable with the existing C/C++ toolchain. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115623">
				<div id="div-comment-1115623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140321-00/?p=1433#comment-1115623">
			March 25, 2014 at 6:57 am</a>		</div>

		<p>&quot;The stated problem can be solved by load-time vtable construction (code for this would have to go in the generated portion of DLLMain for the obvious reason) and checking if the function is null before calling it.&quot;</p>
<p>&quot;The offset of the function address in the vtable is not known until the loader loads the EXE and DLLs into memory.&quot;</p>
<p>Aren&#39;t those cases where immutable interfaces would greatly simplify things?</p>
<p>I don&#39;t think I need to go deeply into the first. But for the second, while you may not know the absolute address, you know the offset. If you look at libraries like ATL, they build the QI around this concept making a tabular form of the interfaces it supports using static_cst. The immutable interfaces rule will guarantee not only the interface is going to contain the same member functions, but also they are going to be in the same order.</p>
<p>It will also force a various compatibility things into the class itself, since the definition of the new class would end up being sufficiently different from the old to be able to check at compile time if you upgrade an interface.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>