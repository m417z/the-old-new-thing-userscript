<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1295275">
				<div id="div-comment-1295275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295275">
			May 5, 2017 at 7:24 am</a>		</div>

		<p>That&#8217;s the easy case. I understand that some of your posts are of an easier level but I have a hard time imagining a programmer proficient ebough to use a debugger and yet not smart enough to see the preceding lines.</p>
<p>The mysterious cases we encounter again and again involve either inlining or tail-call optimizations. In the first case, the call is invisible inthe source because it is actually within another function that got inlined. In the second case, the calling function is not on teh stack because it removed all traces of itself before calling as a tail optimization.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1295285">
				<div id="div-comment-1295285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295285">
			May 5, 2017 at 7:35 am</a>		</div>

		<p>If you think tail call is bad, try crashing in a trampoline.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1295286">
				<div id="div-comment-1295286" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295286">
			May 5, 2017 at 8:48 am</a>		</div>

		<p>I was thinking of the -1 thing in the 6502 all the time while reading the article. I learned it the hard way while trying to implement a BRK instruction handler to implement virtual instructions, but that&#8217;s another story for another time :-) .</p>
<p>Surely most programmers didn&#8217;t get those luxuries, because the most widely used 6502 debugger, the Apple II Monitor, didn&#8217;t have them. Wozniak managed to fit a basic OS with switchable I/O streams (remember typing 1  to direct Monitor&#8217;s output to the printer on slot 1 or 3  to activate the 80-column card on slot 3?), a basic toolbox, a debugger and a disassembler, all of it in just under 2 KB of ROM!</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1295295">
				<div id="div-comment-1295295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thomas Hate</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295295">
			May 5, 2017 at 10:23 am</a>		</div>

		<p>On the 6502 topic though: since most instructions are multi-byte, PC-1 is rarely the start of the line before. It&#8217;s much more often half or two-thirds of the way through it.</p>
<p>This pedantic point, I could not contain.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1295345">
				<div id="div-comment-1295345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295345">
			May 5, 2017 at 3:06 pm</a>		</div>

		<p>The 6502 only has one subroutine call instruction (JSR, opcode 0x20), only with absolute addressing mode (meaning that the operand is always a 16-bit address, two bytes wide), so you can safely assume that the address stored in the stack is the second byte of the call address, and that the previous instruction (the JSR) is two bytes before. In case you doubt if the call has been forged by, say, pushing a 16-bit address to the stack and then jumping to the subroutine, you can double check that the byte two bytes before the pointed address contains a 0x20.</p>
<p>If you are writing an interrupt service routine, things can get more interesting, because, obviously, the program can be interrupted at any point (the code interrupted may not even be in your own code, but in the OS or the firmware). But in that context, stack dumps don&#8217;t make so much sense.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1295356">
				<div id="div-comment-1295356" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295356">
			May 5, 2017 at 4:20 pm</a>		</div>

		<p>&#8220;The 6502 only has one subroutine call instruction (JSR, opcode 0x20)&#8221;</p>
<p>Officially, but&#8230;&#8230;</p>
<p>PHA<br />
TXA<br />
PHA<br />
RTS</p>
<p>It&#8217;s impossible to find the calling instruction on any cpu.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1295447">
				<div id="div-comment-1295447" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295447">
			May 7, 2017 at 4:45 am</a>		</div>

		<p>This is a synthetic JMP rather than a JSR.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1295455">
				<div id="div-comment-1295455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Farnsworth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295455">
			May 7, 2017 at 6:55 am</a>		</div>

		<p>There&#8217;s no way to save PC without using JSR &#8211; while you could JSR to a synthetic JMP like the one you&#8217;ve described, you&#8217;d still know where the calling instruction was.</p>
<p>You could work around this by pushing the intended return address and JMPing to a subroutine, if you were obfuscating things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1295465">
				<div id="div-comment-1295465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295465">
			May 7, 2017 at 7:29 am</a>		</div>

		<p>An IRQ also saves it. The could then do some stack cleanup followed by a CLI and a JMP.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1295506">
				<div id="div-comment-1295506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Farnsworth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295506">
			May 8, 2017 at 3:09 pm</a>		</div>

		<p>To abuse an IRQ needs external hardware that supports generating an IRQ on demand, and is thus a system property, not a 6502 property.</p>
<p>Not that that would stop people writing &#8220;copy protection&#8221; systems for games and the like&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1295315">
				<div id="div-comment-1295315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295315">
			May 5, 2017 at 12:09 pm</a>		</div>

		<p>This seems pretty obvious, but the same applies also when using continuation passing style and similar trickeries in which case the return address usually has nothing to do with what called you. </p>
<p>One of the most prominent examples of this is C#&#8217;s async implementation which can lead to lots of confusion among programmers during debugging sessions. Admittedly it does make debugging more complicated since some valuable information is lost.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1295445">
				<div id="div-comment-1295445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Cohn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295445">
			May 6, 2017 at 9:19 pm</a>		</div>

		<p>Lambdas and shared_ptr make it great fun in C++, too.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1295335">
				<div id="div-comment-1295335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295335">
			May 5, 2017 at 2:26 pm</a>		</div>

		<p>Funnily enough, in the last month I&#8217;ve just been looking at adding fancy features to a 6502 debugger.  It would be fun, but I don&#8217;t do enough 6502 debugging to really justify the effort.  Though every time I do, I wish the debugger was better.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1295355">
				<div id="div-comment-1295355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295355">
			May 5, 2017 at 3:10 pm</a>		</div>

		<p>These days, the debuggers built into emulators are wonderful. They allow code and data breakpoints, memory and register examination and change, and step-by-step interactive execution. Many emulators have snapshot capabilities, which let you capture a known state and go back to it as many times as needed. All those features are nearly impossible to implement in a native debugger, running in the same machine.</p>
<p>We live wonderful times!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1295366">
				<div id="div-comment-1295366" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295366">
			May 6, 2017 at 3:24 am</a>		</div>

		<p>If having a return address minus one makes 6502 stack traces better, why can&#8217;t x86 debuggers subtract one from return addresses before calculating the source line number?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-msn odd alt depth-2" id="comment-1295375">
				<div id="div-comment-1295375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295375">
			May 6, 2017 at 4:09 am</a>		</div>

		<p>The length of call instructions varies wildly on x86, so it would have to use heuristics to try and guess where the previous instruction started.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1295385">
				<div id="div-comment-1295385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295385">
			May 6, 2017 at 9:21 am</a>		</div>

		<p>@Neil: Yeah, that would be nice, but they would also have to rename the column from &#8220;Return address&#8221; to &#8220;Approximate caller address&#8221;.</p>
<p>@poizan42: The debugger doesn&#8217;t need to find the exact call instruction. It just needs to find something that is part of the call instruction, so it can convert it to a symbol better.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-msn odd alt depth-3" id="comment-1295415">
				<div id="div-comment-1295415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295415">
			May 6, 2017 at 1:52 pm</a>		</div>

		<p>That&#8217;s assuming that symbols are available. I was thinking a bit about that, it would be inconsistent to show call address when symbols are available and return address when they are not. Maybe a better solution would be to add another column and show both, a heuristic probably wouldn&#8217;t be so bad then either.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1295815">
				<div id="div-comment-1295815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://ilovepa.ws' rel='external nofollow' class='url'>Tony Konzel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170505-00/?p=96116#comment-1295815">
			May 11, 2017 at 8:20 am</a>		</div>

		<p>In the course of working with 6502 code, I started to see this little quirk used to implement a cheap jump table. Get low byte from a table using an index register, push it, get high byte with the same register, push it, RTS. Just had to be careful that the addresses in the table were all the desired address &#8211; 1.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>