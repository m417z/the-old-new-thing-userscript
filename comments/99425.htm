<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1355575">
				<div id="div-comment-1355575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355575">
			August 6, 2018 at 7:41 am</a>		</div>

		<p>Looking forward to the rest of this series!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1355585">
				<div id="div-comment-1355585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355585">
			August 6, 2018 at 7:41 am</a>		</div>

		<p>&#8220;Integer exception register&#8221;?  It&#8217;s alway &#8220;fixed point exception register&#8221; in the IBM docs.  Also &#8220;fixed point unit&#8221; rather than &#8220;integer unit&#8221;, etc.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1355625">
				<div id="div-comment-1355625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355625">
			August 6, 2018 at 10:43 am</a>		</div>

		<p>The column is called &#8220;Notes&#8221;, not &#8220;Official name&#8221;. The purpose of these notes is to provide just enough information so you can debug problems, not to provide official documentation. If I called it &#8220;Fixed point exception register&#8221; it would be less obvious what that means.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-3 parent" id="comment-1355635">
				<div id="div-comment-1355635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355635">
			August 6, 2018 at 10:57 am</a>		</div>

		<p>Fixed point normally implies decimal numbers which are not whole, which use a format that does not let the decimal point move. For example a 32:32 format, where 32 bits are used for the portion left of the decimal point, and 32 bits are used for the portion right of the decimal point.<br />
While you can see integer numbers as a special case of fixed point numbers where 0 bits are used for the portion right of the decimal point. Fixed point doesn&#8217;t normally imply integer.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle even depth-4" id="comment-1355665">
				<div id="div-comment-1355665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355665">
			August 6, 2018 at 1:30 pm</a>		</div>

		<p>While true, the terminology is so rarely used that it would take most people a few minutes for that to click (I know when I read Vas&#8217; comment I initially read it as &#8216;floating point&#8217;, and even then didn&#8217;t make the connection until I read yours, thinking it was some kind of instruction-level IBM-specific term).  Integer is a term everyone uses and is immediately obvious, and that&#8217;s ideal for blogs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1355685">
				<div id="div-comment-1355685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355685">
			August 6, 2018 at 4:02 pm</a>		</div>

		<p>Well, the &#8220;fixed point unit&#8221; expression has an historical root. Back in the early 50s, all computations were made in integer units, using integer binary arithmetic. As most of these computers were oriented to scientific applications, they needed to manipulate real numbers in some way, so they used integers scaled by a constant factor. Note that these were binary integers, not decimal ones.</p>
<p>When IBM introduced their first computer with floating point unit (the IBM 704) in 1954, the integer unit was called &#8220;fixed point unit&#8221;, in contrast to the newer &#8220;floating point unit&#8221;. That denomination was carried all along IBM&#8217;s mainframe family until the POWER architecture, from where it was inherited by the PowerPC.</p>
<p>Now, this blog is called The Old New Thing. So don&#8217;t sue me for telling stories older than most readers (including myself!).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1355735">
				<div id="div-comment-1355735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Julien Oster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355735">
			August 6, 2018 at 10:13 pm</a>		</div>

		<p>A bit off topic, but maybe still interesting (it kind of fits the theme of this blog): The notation I usually deal with would be 64:32 for what you mean, i.e. 64bit word size, 32bit of that as fraction size. This notation allows for seemingly counter-intuitive things of a fraction size bigger than the (total!) word size, or even negative fraction sizes.</p>
<p>Fraction sizes bigger than the word size itself are useful when the magnitude of the numbers you want to be able to represent are smaller than 1, e.g. if you only want to represent numbers from 0 to 0.125 (not including), then the first three fractional bits (0.5, 0.25, 0.125) are always zero, and you can e.g. use 16:19 for 16bit precision of numbers between 0 and 0.125.</p>
<p>Negative fraction sizes are useful when you have big numbers that you don&#8217;t care about the full precision that the usually necessary integer word size would give you, e.g. 8:-1 allows you to represent numbers between 0 and 512 instead of 0 to 256 that 8bit would usually give you, but only the even numbers. With 8:-2, you&#8217;re up to 0-1024, but you lose the distinction between the first two lower bits.</p>
<p>MATLAB uses this fixed point notation, and at least some FPGA environments use it as well when constructing e.g. fixed point filters.</p>
<p>In that notation, 32:32 would allow representation of 2^32 different numbers between 0 and 1 (exclusive).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1355615">
				<div id="div-comment-1355615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355615">
			August 6, 2018 at 10:23 am</a>		</div>

		<p>Sweet, another ISA series!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1355655">
				<div id="div-comment-1355655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355655">
			August 6, 2018 at 12:34 pm</a>		</div>

		<p>Which SPR number is fpscr?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1355725">
				<div id="div-comment-1355725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355725">
			August 6, 2018 at 7:57 pm</a>		</div>

		<p>Trick question. fpscr is not a SPR at all!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1355675">
				<div id="div-comment-1355675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355675">
			August 6, 2018 at 1:37 pm</a>		</div>

		<p>&#8220;Here we go again&#8221;.  A reference to a recent movie, perhaps?  :-)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-bboorman odd alt depth-2" id="comment-1355835">
				<div id="div-comment-1355835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355835">
			August 7, 2018 at 2:25 pm</a>		</div>

		<p>Or perhaps a Whitesnake song from the late 1980&#8217;s.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1 parent" id="comment-1355715">
				<div id="div-comment-1355715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355715">
			August 6, 2018 at 6:20 pm</a>		</div>

		<p>I wonder, since there is a Mac development division inside Microsoft (I still remember running IE5 on old iMac), did you heard anyone trying to run NT4 on pre-OSX Mac?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1355745">
				<div id="div-comment-1355745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355745">
			August 6, 2018 at 11:36 pm</a>		</div>

		<p>Won&#8217;t work.  On traditional PowerPC (including the 600 series and 7400 series) you can&#8217;t run a big endian OS on a little endian motherboard and vice versa.  WinNT and Solaris for PowerPC run little endian, MacOS runs big endian, and AIX is available for either.</p>
<p>The reason is that traditional PowerPC in little endian mode doesn&#8217;t actually do little endian memory access within (64-bit) doublewords.  It just twiddles the low three bits of the address so that as long as you only do aligned accesses for anything bigger than bytes (halfword/word/doubleword) you&#8217;ll see little endian semantics (incidentally the MAME emulator uses the same trick when emulating a little endian guest on a big endian host and vice versa).  On a little endian motherboard, you wire the 64-bit data bus with the byte order inverted, and as long as software keeps accesses aligned, it all works.</p>
<p>I say &#8220;traditional&#8221; because some 750 derivatives and the newer POWER chips that implement PPC64LE can actually run in a true little endian mode.  But that happen until long after Windows NT stopped running on PowerPC.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1355755">
				<div id="div-comment-1355755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Sutherland</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355755">
			August 7, 2018 at 3:48 am</a>		</div>

		<p>I don&#8217;t know about NT4, but I seem to recall the Xbox OS is NT-based, so it definitely ran on PowerMac G5s for a while &#8211; they were the first developer kits! <a href="https://www.journaldulapin.com/2015/01/25/this-power-mac-g5-is-almost-a-xbox-360/" rel="nofollow">https://www.journaldulapin.com/2015/01/25/this-power-mac-g5-is-almost-a-xbox-360/</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1355765">
				<div id="div-comment-1355765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355765">
			August 7, 2018 at 7:17 am</a>		</div>

		<p>Raymond wrote &#8220;Among other things, the bits in a register are numbered from most-significant to least-significant: Bit 0 is the high-order bit, and bit 31 is the low-order bit. &#8221;</p>
<p>Is this for real??? At the assemby/machinecode level? How on earth did this get handled at the &#8216;C&#8217; level? Once RAM (a 32-bit word) is moved into the CPU, I would have expected bit 0 to BE bit 0 (2^0) and bit 31 to BE bit 31 (2^31). Anything else would be nuts. To then reverse bit ordering in bytes seems just plain insane! Please elaborate.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1355775">
				<div id="div-comment-1355775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355775">
			August 7, 2018 at 8:02 am</a>		</div>

		<p>You can&#8217;t address individual bits in C.  Taking the address of a bitfield is illegal.</p>
<p>Bit ordering only matters for certain assembly instructions, where the processor docs say that this instruction performs operation X on bits Y-Z.  It&#8217;s the compiler&#8217;s job to understand the CPU&#8217;s bit ordering and translate the C code to the instructions with the correct bit numbers in them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1355985">
				<div id="div-comment-1355985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355985">
			August 8, 2018 at 1:41 pm</a>		</div>

		<p>I believe bit numbering in C is an implementation defined behavior.</p>
<p>Is bit 0 the left-most bit or the right-most bit?  Little endian says bit 0 is the right most bit, while big endian says bit 0 is the left most bit.</p>
<p>Which &#8220;endianness&#8221; is better may depend on what you have been exposed to.  All PC (Intel/AMD) processors are little endian.  But it hasn&#8217;t always been that way.  Most of the systems I used when I started programming (at the time, in assembly) were big endian.</p>
<p>See &#8220;https://en.wikipedia.org/wiki/Endianness&#8221;.</p>
<p>Usless trivia &#8212; network byte order is big endian!  So when your PC sends a TCP packet to another PC, the multi-byte fields in the headers get flipped on the sending computer, then get flipped again on the receiveing computer.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1356065">
				<div id="div-comment-1356065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1356065">
			August 9, 2018 at 4:20 am</a>		</div>

		<p>Endianness generally refers to byte ordering for multi-byte values in RAM.  Numbering of bits within a value is separate.  The Motorola 68000 family uses big endian byte ordering (address of a word is address of its most significant byte, more significant bytes at lower memory addresses), but it numbers bits within a value starting at 0 for least significant bit and increasing towards more significant bits.  It doesn&#8217;t really make a difference for C since bit instructions can&#8217;t be generated directly.  The compiler can generate them when you test against a one-bit mask, set/clear/invert an individual bit, etc. and it knows how the target CPU numbers bits.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>