<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1156283">
				<div id="div-comment-1156283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lars</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156283">
			October 17, 2014 at 7:08 am</a>		</div>

		<p>It is not okay to call LoadLibrary in a global constructor, because the loader lock is held at the time (cf. countless discussions of DllMain in this blog)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156293">
				<div id="div-comment-1156293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Graham</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156293">
			October 17, 2014 at 7:16 am</a>		</div>

		<p>For global objects in an exe, what about programs that are (at least, according to the compiler / linker options) statically linked to the C runtime? Do they still actually rely on a separate DLL, or is there another method used in this case?</p>
<p>Actually, why is the lackey necessary? Since the CRT ultimately calls main(), couldn&#39;t it just destruct the global objects once the call to main() returns? </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156303">
				<div id="div-comment-1156303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156303">
			October 17, 2014 at 7:23 am</a>		</div>

		<p>@Graham: Not all processes ever return from main(). What about processes that use exit() or ExitProcess()?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156313">
				<div id="div-comment-1156313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156313">
			October 17, 2014 at 7:40 am</a>		</div>

		<p>@ZLB: exit is also in the C runtime so it could just call the destructors. On ExitProcess, global destructors aren&#39;t called anyway, are they?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156323">
				<div id="div-comment-1156323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hildar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156323">
			October 17, 2014 at 7:47 am</a>		</div>

		<p>ExitProcess() documentation says it sends DLL_DETACH to all .dlls. which includes the C runtime DLL.</p>
<p>So yes, global destructors should get run. ((And returning from main just calls ExitProcess))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156333">
				<div id="div-comment-1156333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156333">
			October 17, 2014 at 7:48 am</a>		</div>

		<p>@Sven2 &#8211; are you confusing ExitProcess (which does allow shutdown processing, including global destructors, to occur) and TerminateProcess (which doesn&#39;t)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156343">
				<div id="div-comment-1156343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156343">
			October 17, 2014 at 7:56 am</a>		</div>

		<p>What happens when you link with libcmt (/MT)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156363">
				<div id="div-comment-1156363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156363">
			October 17, 2014 at 8:32 am</a>		</div>

		<p>&gt; Is it okay to call LoadÂ­Library from within constructors of global C++ objects inside a DLL? Currently we am seeing weird behavior when doing so.</p>
<p>Much more critical is:</p>
<p>Is it okay to call FreeLibrary from within destructors of global C++ objects inside an EXE?</p>
<p>From what Raymond said, I&#39;d say no&#8230; (And no&#8230; I didn&#39;t knew that)</p>
<p>Since we&#39;re destroying the app anyway, it technically isn&#39;t necessary to call FreeLibrary anyway (I guess windows will do that anyway)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156383">
				<div id="div-comment-1156383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156383">
			October 17, 2014 at 9:02 am</a>		</div>

		<p>&quot;Is it okay to call FreeLibrary from within destructors of global C++ objects inside an EXE?&quot;</p>
<p>Since its not ok to call FreeLibrary in DllMain you shouldn&#39;t.</p>
<p>This is a good blog post though as process shutdown is quite a complex subject with lots of hidden gotchas!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-odd thread-alt depth-1" id="comment-1156393">
				<div id="div-comment-1156393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156393">
			October 17, 2014 at 9:42 am</a>		</div>

		<p>I wouldn&#39;t exclude that the customer put the LoadLibrary inside the constructor of a global object in a misguided attempt to work around the restrictions of not using LoadLibrary inside DllMain &#8211; I&#39;ve seen this kind of reasoning in the past on SO (<a rel="nofollow" target="_new" href="http://stackoverflow.com/q/2674736/214671">stackoverflow.com/&#8230;/214671</a>). </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156403">
				<div id="div-comment-1156403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156403">
			October 17, 2014 at 12:18 pm</a>		</div>

		<p>Is it legal in .exe files linked to the .lib version of the Visual C++ CRT to have a TLS callback that calls _c_exit() on DLL_PROCESS_DETACH? &nbsp;(Assuming that _c_exit is what I meant; I mean the function that triggers global destructors.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156413">
				<div id="div-comment-1156413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tomashu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156413">
			October 17, 2014 at 3:56 pm</a>		</div>

		<p>I had put breakpoint in destructor and it get called by onexit terminator inside doexit. Not from some dll.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156423">
				<div id="div-comment-1156423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jonwil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156423">
			October 17, 2014 at 6:17 pm</a>		</div>

		<p>I have 2 binaries here, one is a .exe compiled with Visual C++ 2013 and linked to the DLL CRT.</p>
<p>The other is a .exe compiled with Visual Studio 6 and statically linked.</p>
<p>In the case of the dynamically linked exe, the up-stack from the destructor of a global object is the function doexit in msvcr120d.dll then exit (also in msvcr120d.dll) then __tmainCRTStartup in my executable (i.e. the entry point to the program)</p>
<p>In the case of the statically linked exe, the up-stack is the same (doexit then exit then the the CRT startup function</p>
<p>So the whole &quot;the C runtime dll uses its dllmain to call destructors&quot; thing is incorrect&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156433">
				<div id="div-comment-1156433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156433">
			October 17, 2014 at 8:17 pm</a>		</div>

		<p>@jonwil: interesting, but what happens if main() calls ExitProcess rather than returning?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156453">
				<div id="div-comment-1156453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Visitor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156453">
			October 19, 2014 at 1:20 pm</a>		</div>

		<p>Is it legal to use &quot;am&quot; after &quot;we&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156463">
				<div id="div-comment-1156463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156463">
			October 20, 2014 at 5:55 am</a>		</div>

		<p>How does it stop them from running if _Exit, quick_exit, or abort are called (all of which explicitly do not cause static destructors to run)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156473">
				<div id="div-comment-1156473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156473">
			October 20, 2014 at 6:52 am</a>		</div>

		<p>&quot;what happens if main() calls ExitProcess&quot;: Why should the C runtime care? ExitProcess() is not part of the CRT API. It&#39;s just one of many OS calls where you&#39;re on your own. I think ExitProcess should terminate the process the same way as TerminateProcess(GetCurrentProcess) would do (regarding C objects).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm odd alt thread-odd thread-alt depth-1" id="comment-1156523">
				<div id="div-comment-1156523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156523">
			October 20, 2014 at 10:47 am</a>		</div>

		<p>A few years ago I got hit by one of these &quot;Dll contains a global object whose constructor tries to load a DLL&quot; hangs in a binary-only third-party component. &nbsp;The component had a global object that did something with winsock, and that winsock function tried to load a DLL. &nbsp;This only happened on machines at one particular company, it had something to do with how they had their network set up. &nbsp;We never did figure out exactly what it was. &nbsp;Fixing that was not fun, since I couldn&#39;t get any help from the component supplier. &nbsp;I ended up having to hook that call to the winsock function and basically make the call not happen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156573">
				<div id="div-comment-1156573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zack</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156573">
			October 20, 2014 at 2:29 pm</a>		</div>

		<p>If memory serves, C++2011 and possibly also C++1999 require all destructors for static-storage-duration objects in the EXE (neither of these standards have a concept of DLLs, so to them there is no other kind) to be executed as-if &lt;tt&gt;atexit(curry(destructor, object))&lt;/tt&gt; had been called for each such object immediately after its constructor succeeds. &nbsp;This is observable by (in the simplest case) a program that has one file- and one function-scope static object, both with destructors, and also registers a plain atexit() callback from main() before calling the function containing the function-scope static object. &nbsp;The plain callback must execute after the function-scope object&#39;s destructor but before the file-scope object&#39;s destructor.</p>
<p>As such, I am curious whether and how MSVC&#39;s handling of atexit callbacks is different from its handling of destructors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156623">
				<div id="div-comment-1156623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156623">
			October 21, 2014 at 7:15 am</a>		</div>

		<p>Zack,</p>
<p>A few years ago I had reason to play with atexit and as I recall, all the global objects had their desctructors registered with atexit. &nbsp;</p>
<div class="post">[<em>Precisely. MSVC uses atexit to drive destructors. That&#39;s why the action is triggered by the C runtime DLL: Because the C runtime DLL is where exit functions are triggered. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156743">
				<div id="div-comment-1156743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156743">
			October 21, 2014 at 11:56 am</a>		</div>

		<p>Funny, when I was looking at the atexit stuff, I was fairly sure that the atexit routines were driven by a return from main/WinMain. &nbsp;Of course I had statically linked the CRT in that project.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1156793">
				<div id="div-comment-1156793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1156793">
			October 21, 2014 at 4:59 pm</a>		</div>

		<p>[Precisely. MSVC uses atexit to drive destructors. That&#39;s why the action is triggered by the C runtime DLL: Because the C runtime DLL is where exit functions are triggered. -Raymond]</p>
<p>Last time I checked, atexit actions only run on exit() or return from main(). Why bother supporting ExitProcess which requires registering for DLL_PROCESS_DETACH, if atexit contract doesn&#39;t require it? exit() can call those atexit handlers.</p>
<div class="post">[<em>You&#39;re saying that MSVC should not bother supporting anything beyond the minimum required by the standard? I suspect that there are apps which rely (perhaps inadvertently) on ExitProcess running global destructors. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1157053">
				<div id="div-comment-1157053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823#comment-1157053">
			October 22, 2014 at 4:27 pm</a>		</div>

		<p>We come to the conclusion that your app, or whatever, should be in a DLL, and EXEs should just be stubs that depend on it and call a specific function with specific arguments, probably parsed from the command line. &nbsp;If the command line is not parsed by the DLL itself, that is, since some common entry points already may do so, such as DllInstall and anything made to be invokable from rundll32.exe.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>