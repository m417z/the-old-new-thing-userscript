<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1205991">
				<div id="div-comment-1205991" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205991">
			September 4, 2015 at 7:18 am</a>		</div>

		<p>Or you delay-load kernel32.dll. This causes the missing symbol to become NULL. So the code reads (InitializeCriticalSectionEx)?(InitializeCriticalSectionEx (args):(InitializeCriticalSection(args));</p>
<p>The MS linker cannot delay-load kernel32.dll but third party linkers can. The resulting binary is valid because it both early-loads and delay-load kernel32.dll.</p>
<div class="post">[<em>And how do you think delay-load works? I&#39;ll tell you: It uses LoadLibrary and GetProcAddress. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1205981">
				<div id="div-comment-1205981" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205981">
			September 4, 2015 at 7:20 am</a>		</div>

		<p>Or you just don&#39;t bother with the whole stupid Universal Apps concept in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1205971">
				<div id="div-comment-1205971" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205971">
			September 4, 2015 at 7:21 am</a>		</div>

		<p>Hmmm&#8230;. I&#39;m not sure I follow the logic here.</p>
<p>Instead of having 2 versions of your library, one for each platform, you now have 1 version of your library&#8230; plus 2 versions of your support library, one for each platform. And your users, instead of linking to either ContosoXP.dll or ContosoStore.dll, have to link to ContosoCore.dll *and* either one of the support libraries.</p>
<p>I&#39;m not convinced you&#39;ve simplified things. Surely the 2 self-contained libraries approach is *more* simple than the 1 complete library + 2 support libraries.</p>
<p>As for the compilation phase, you should still only need to compile each file once. In each case compile core1.c, core2.c, core3.c, winxp.c and store.c into their respective .obj files. For the support library approach, you link core1.obj, core2.obj and core3.obj into one library, winxp.obj into another, and store.obj into the third library. While for the 2-library approach, you link core1.obj, core2.obj, core3.obj and winxp.obj into one library, and core1.obj, core2.obj, core3.obj and store.obj into the second. Done.</p>
<p>I realise that whole-program optimisations mean that linking can be a slower process than it used to be, so doing that over core1.o, core2.o and core3.o twice could technically give you a significant build hit, but you almost certainly don&#39;t need to switch that on for work-in-progress dev builds.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1205961">
				<div id="div-comment-1205961" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Avenida</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205961">
			September 4, 2015 at 7:26 am</a>		</div>

		<p>lol at the idea that Windows XP reaching end-of-life means developers have the luxury of no longer supporting it</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1205951">
				<div id="div-comment-1205951" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205951">
			September 4, 2015 at 7:29 am</a>		</div>

		<p>There is no problem in computer science that can&#39;t be resolved by adding another layer of indirection&#8230; except the problem of too many layers of indirection.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1205941">
				<div id="div-comment-1205941" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205941">
			September 4, 2015 at 7:30 am</a>		</div>

		<p>Karellen, it&#39;s not that &quot;users, instead of linking to either ContosoXP.dll or ContosoStore.dll, have to link to ContosoCore.dll *and* either one of the support libraries.&quot;</p>
<p>It&#39;s that users of ContosoCore link only to ContosoCore. They have to provide ContosoXP in their package for XP but not to link to ContosoXP.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1205931">
				<div id="div-comment-1205931" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205931">
			September 4, 2015 at 7:36 am</a>		</div>

		<p>Or not? I guess I have to understand for me too who is user here and who links what.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1205901">
				<div id="div-comment-1205901" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205901">
			September 4, 2015 at 9:06 am</a>		</div>

		<p>One advantage of the stub library method is that multiple components can make use of the same set of compatibility stubs. So application developers get to link against ContosoNetworking, ContosoLogging, ContosoUtils and (ContosoXPSupport|ContosoStoreSupport), rather than ContosoNetworkingXP, ContosoLoggingXP, ContosoUtilsXP&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1205891">
				<div id="div-comment-1205891" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205891">
			September 4, 2015 at 9:16 am</a>		</div>

		<p>The thing is that ContosoCore.dll will still be different no matter what, because it can&#39;t use LoadLibrary, so the import tables must be different.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1205881">
				<div id="div-comment-1205881" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205881">
			September 4, 2015 at 9:47 am</a>		</div>

		<p>I&#39;ve got the same problem as John Doe. &nbsp;When you link ContosoCore.dll you bake in the choice of ContosoXPSupport.dll or ContosoStoreSupport.dll. &nbsp;So you&#39;ve now got four DLLs.</p>
<p>I suspect I&#39;m missing the point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1205871">
				<div id="div-comment-1205871" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205871">
			September 4, 2015 at 10:22 am</a>		</div>

		<p>@laonianren, @John Doe:</p>
<p>ContosoCore.dll could just link to ContosoSupport.dll. The appropriate helper library gets added to the package with the name ContosoSupport.dll.</p>
<p>Example: The Windows HAL is always in hal.dll, but there are/were (I haven&#39;t bothered checking on recent versions) several different HALs shipped with Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1205861">
				<div id="div-comment-1205861" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205861">
			September 4, 2015 at 10:37 am</a>		</div>

		<p>The solution is exactly what Falcon says, the fancy word for what is being described here is The Bridge Pattern.</p>
<p>We leverage this heavily in our system to provide a HAL like assembly for our industrial hand-held scanners which have various implementations on how to interact with the scanning mechanism, at deployment time the correct assembly is chosen and then renamed to ScannerWedge.dll like Raymond&#39;s example this allows us to keep our library identical while parts that are at high rates of change (a particular manufacture loves to ship out new handhelds every year, every-time with a different API) are swapped out as needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1205851">
				<div id="div-comment-1205851" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205851">
			September 4, 2015 at 10:40 am</a>		</div>

		<p>&quot;Runtime dynamic linking (Load&shy;Library, Get&shy;Proc&shy;Address) is not permitted in universal Windows apps, which means that for universal Windows apps, you must have an entry for Initialize&shy;Critical&shy;Section&shy;Ex in your import table. But if that function is in your input table, then it won&#39;t load on Windows XP.&quot;</p>
<p>Runtime dynamic linking is allowed in Metro/Modern/Universal programs, just only with your own libraries, not system libraries. &nbsp;See LoadPackagedLibrary. &nbsp;GetProcAddress is allowed, but you&#39;re not supposed to be able to get HMODULEs to anything but yourself, or via LoadPackageLibrary. &nbsp;(However, VirtualQuery can be used nefariously, a hole in the design.)</p>
<div class="post">[<em>Even if you didn&#39;t have VirtualQuery, you can just scan memory in your address space looking for kernel32&#39;s header, so blocking VirtualQuery doesn&#39;t close any holes. Everything is already in-process. You&#39;re on the other side of the airtight hatchway. These are just obstacles to warn you to stay away from the things that aren&#39;t supported. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1205841">
				<div id="div-comment-1205841" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205841">
			September 4, 2015 at 11:00 am</a>		</div>

		<p>[And how do you think delay-load works?]</p>
<p>I am able to write a delay-load stub for kernel32.dll that only uses allowed APIs from <a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/windows/apps/mt186421.aspx">msdn.microsoft.com/&#8230;/mt186421.aspx</a> . LoadLibrary() is not allowed, but GetModuleFileNameA() is. GetProcAddress() is allowed, but it would be a non-issue if it wasn&#39;t.</p>
<p>And yes, I did know about the VirtualQuery hole. Incidentally, InitializeCriticalSection() is on the list so I presume you&#39;re using it as a proxy for another function that&#39;s not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1205821">
				<div id="div-comment-1205821" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205821">
			September 4, 2015 at 1:42 pm</a>		</div>

		<p>&quot;Even if you didn&#39;t have VirtualQuery&#8230;other side of the airtight hatchway&#8230;&quot;</p>
<p>Mhmm, I know =^-^=</p>
<p>There does seem to be some degree of support for delay-loaded APIs/DLLs for Universal applications: QueryOptionalDelayLoadedAPI. &nbsp;However, I don&#39;t know much about it.</p>
<p>Sadly, our program can&#39;t be a Universal application, because it updates itself, and because it does runtime code generation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1205811">
				<div id="div-comment-1205811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205811">
			September 4, 2015 at 3:03 pm</a>		</div>

		<p>&gt; and because it does runtime code generation.</p>
<p>That&#39;s what finding the VirtualQuery() hole was all about, to make it possible to get a reference to VirtualProtect() to enable runtime code generation for Universal applications.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1205801">
				<div id="div-comment-1205801" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205801">
			September 5, 2015 at 4:20 am</a>		</div>

		<p>Presumably there&#39;s going to be at least one symbol that the library user needs to import from ContosoXP or ContosoStore respectively to make it load, otherwise ContosoCore won&#39;t know which one to use?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-odd thread-alt depth-1" id="comment-1205791">
				<div id="div-comment-1205791" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205791">
			September 5, 2015 at 7:38 am</a>		</div>

		<p>@Avenida: The end of support of Windows XP is only meaningful for Microsoft, not independent software developers. ISVs wanting to earn money must support every operating system that the user is probably running. Microsoft itself has no such mandate because it is a rich company that can turn a blind eye on that portion of income in exchange for acting consistently.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1205771">
				<div id="div-comment-1205771" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205771">
			September 6, 2015 at 5:16 am</a>		</div>

		<p>@Fleet Commander: I think you have the motivation wrong. Things fall out of support when supporting them becomes more expensive than the income generated from them. Some companies budget for a certain amount of extra support beyond the tipping point, others strictly stop as soon as it&#39;s not worth it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1205761">
				<div id="div-comment-1205761" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205761">
			September 6, 2015 at 5:18 am</a>		</div>

		<p>@Fleet Command: I disagree, you should only support the customers choice of operating system if there is a compelling reason to do so. You should also charge legacy customers for the extra costs that you incur. Making your apps run on the latest operating system is much more important. If you focus on your legacy customers then you are just as likely to lose market share to someone that is focussing on the latest operating system and when your legacy customers are forced to buy a new machine they are just as likely to go for the more up to date software your competitor came out with.</p>
<p>Every time we set a minimum OS and then backtracked, it always caused huge support issues going forward. If XP EOL didn&#39;t make your company sell your customers on the benefits of a new operating system then your company is pretty much doomed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1205751">
				<div id="div-comment-1205751" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205751">
			September 6, 2015 at 2:08 pm</a>		</div>

		<p>@boogaloo: Suddenly supporting a new (or old) system always causes issues. But I have some experience supporting XP and if you do it from the outset there are hardly any issues at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1205741">
				<div id="div-comment-1205741" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205741">
			September 6, 2015 at 7:00 pm</a>		</div>

		<p>Regarding software can drop support for WinXP&#8230; as (not so) remotely related note, my project was just allowed to drop support for IE6 a few months ago.</p>
<p>It could be expected most ISVs have to continue to support it at least 5 years (or 10 years for those unfortunate enough) after the EOL of WinXP.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1205731">
				<div id="div-comment-1205731" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ask</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205731">
			September 7, 2015 at 1:48 am</a>		</div>

		<p>create 2 release configurations of your static lib, one with WINXP preprocessor definition. In the code:</p>
<p>#ifdef WINXP</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Initialize­Critical­Section();</p>
<p>#else</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Initialize­Critical­SectionEx();</p>
<p>#endif</p>
<p>build and ship two libraries separately via installer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1205721">
				<div id="div-comment-1205721" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205721">
			September 7, 2015 at 5:38 am</a>		</div>

		<p>@anon/cheong00: I disagreed that you _MUST_ support old operating systems. If you are already supporting a huge number of customers running XP and you don&#39;t plan on rewriting your application to require any new technologies then sure continue supporting XP, but I&#39;d say that was a big risk as someone could come in and eat your lunch. Like any risk it may pay off, it may not. If you can come up with a compelling reason why your application should stop supporting XP then you can sell that to your existing customers as well as your old. I&#39;ve seen developers rely on Vista unpopularity to stay with XP but then Windows 7 came out and it was embarrassing seeing explaining how XP was better. It&#39;s normally because they rely on truly horrible technologies and third party components which makes their application unreliable on newer operating systems. Microsoft do still support XP and will produce updates for it until 2019 ( <a rel="nofollow" target="_new" href="http://www.microsoft.com/en-gb/download/details.aspx?id=11196">http://www.microsoft.com/&#8230;/details.aspx</a> ). They do exactly what the ISVs should do, support something if it makes financial sense. If the last time a customer paid money to Microsoft was when they bought their PC in 2001 then I think it&#39;s justifiable that support can be pulled. An ISV will usually get a yearly support/license fee, but you should pass on any increased costs for supporting old operating systems. You will need to test on each operating system, keep skills current on each operating system, keep old hardware capable of running old operating systems etc. Even if you freeze your XP customers on old versions then you should charge extra for working on those old versions. Once people realise they are paying extra and just buying a new machine will cut that cost as well as making all their software run quicker you will see people upgrade. Of course you then get the problem of printer drivers etc, but it&#39;s really the ISVs fault for letting their customers stagnate so long.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1205611">
				<div id="div-comment-1205611" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205611">
			September 7, 2015 at 6:44 pm</a>		</div>

		<p>Well, like most other developers the final say is on my boss, not me. As long as we have support contracts on companies that uses WinXP, we can&#39;t simply drop support from it or will face legal issue.</p>
<p>And for reason on why people keep using WinXP, the most common reason is that they&#39;re using software which&#39;s vendor no longer exist and cannot run on Vista+, and they cannot allocate budget for finding other to rewrite it.</p>
<p>Believe me, the situation is more common than you&#39;d like to know, especially when there is / would be low economic season (people believe there is one coming already).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1205601">
				<div id="div-comment-1205601" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Boris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205601">
			September 7, 2015 at 10:29 pm</a>		</div>

		<p>I just read &#39;retargetable&#39; as &#39;regrettable&#39;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1205341">
				<div id="div-comment-1205341" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205341">
			September 9, 2015 at 5:00 am</a>		</div>

		<p>@Boogaloo: ‘someone could come in and eat your lunch.’</p>
<p>That could always happen and has a lot more to do with the actual software you (and that ‘someone’) write than which operating systems you do and don&#39;t support. API-wise, Windows XP provides everything you actually *need*, and software developed for XP runs without a hitch on newer operating systems. (In my experience at least. I guess this would heavily depend on the assumptions you make about the target system when developing.) If you wanted to use bits of those newer operating systems, it would likely be for non-essential things that don&#39;t interfere with the rest of the software and can easily be turned off for Windows XP. I&#39;ve never had cause to do so myself though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1205331">
				<div id="div-comment-1205331" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skyborne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150904-00/?p=91661#comment-1205331">
			September 9, 2015 at 7:11 am</a>		</div>

		<p>XP support is always interesting. I broke some XP customers in the wake of Heartbleed, made another new SHA-1 cert to fix them, and only later discovered that SP3 supported SHA-2 for TLS. &nbsp;However, the accidental break encouraged them to start a Win7 rollout, so we were free to go back to SHA-2 last fall.</p>
<p>As for IE6, even the parent megacorp has updated its minimum spec to IE7/Vista. I&#39;m hoping they can get a faster transition to Win7 than &quot;1 year after MS EOL&quot; because of Vista&#39;s relative unpopularity.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>