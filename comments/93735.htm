<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1253605">
				<div id="div-comment-1253605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253605">
			June 23, 2016 at 11:18 am</a>		</div>

		<p>Very nice write up.  I particularly like the perfect summary at the end.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1253615">
				<div id="div-comment-1253615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253615">
			June 23, 2016 at 11:37 am</a>		</div>

		<p>How does va_arg work on the Windows x86-64 calling convention?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-2" id="comment-1254255">
				<div id="div-comment-1254255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1254255">
			June 28, 2016 at 2:50 pm</a>		</div>

		<p>It is probably implementation defined. I think it would be legal (but crazy) to not spill the registers to the space provided to you but since C99 has va_copy you have to save those registers anyway so why make it more complicated than you have to?</p>
<p>At the ABI level the only gotcha is that floats must be passed in XMM* _and_ R* by the caller.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1253665">
				<div id="div-comment-1253665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253665">
			June 23, 2016 at 3:56 pm</a>		</div>

		<p>I&#8217;ve always wondered why the MIPS O32 ABI reserves stack space for its four register parameters, and I guess the reasons were the same. That was long before ANSI C, but is there really still enough prototype-less code around that it should be a concern when designing a modern ABI?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1253685">
				<div id="div-comment-1253685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253685">
			June 23, 2016 at 5:00 pm</a>		</div>

		<p>My guess is that there&#8217;s a lot of scientific code that falls into this category. Scientific code is often really old.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1253705">
				<div id="div-comment-1253705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253705">
			June 24, 2016 at 6:59 am</a>		</div>

		<p>There&#8217;s probably a lot of accidental code like that too. I don&#8217;t know what MSVC allows when compiling in C mode, but at least GCC will let you call functions without them having been declared; the calls (I think) will work as long as you call them with the right types. It gives you a warning, but how many projects have tons of warnings?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1253875">
				<div id="div-comment-1253875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253875">
			June 25, 2016 at 4:09 am</a>		</div>

		<p>I don&#8217;t like the x64 calling convention because it makes writing assembly code by hand too hard. And it&#8217;s very, very hard to do it right with proper exception support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1253975">
				<div id="div-comment-1253975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253975">
			June 27, 2016 at 9:54 am</a>		</div>

		<p>I still don&#8217;t like it.  In practice, 32 bytes in every function is going to translate to garbage most of the time.</p>
<p>See what I did there?  Anecdote, but so is your claim, or your claim&#8217;s source.</p>
<p>Show me the data.</p>
<p>Despite the lack of more testing, there&#8217;s someone agreeing with actual observations (note: a bit old, it doesn&#8217;t compare with optimized code, etc): <a href="http://www.viva64.com/en/b/0069/" rel="nofollow">http://www.viva64.com/en/b/0069/</a></p>
<p>So, Windows 64-bit ABI is basically optimizing for printf, or similar, to be able to spill the 4 registers.</p>
<p>It could be so that you&#8217;d require the caller to fill the shadow space with the actual 4 arguments for varargs (not for prototypeless), so they&#8217;d be automatically spilled (which they most probably will be at some point), but no.</p>
<p>Caller: here&#8217;s 32 bytes for you, my dear friend.<br />
(read: they made me do it)<br />
Callee: how kind of you to have thought out of my needs<br />
(read 1: what made them think I&#8217;d really need or want those bytes, gruh!)<br />
(read vararg func: brainz! [ zombie drooling and chewing ])<br />
(read unprototyped function: what? where? ah, )</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1254045">
				<div id="div-comment-1254045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1254045">
			June 28, 2016 at 3:59 am</a>		</div>

		<p>Windows 64 bit ABI isn&#8217;t just optimizing for printf. They chose the best balance to cope with all situations, while only supporting one calling convention.</p>
<p>Address space is 4 billion times cheaper on 64 bit than 32 bit while the cost of executing instructions is roughly the same.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1254605">
				<div id="div-comment-1254605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1254605">
			June 30, 2016 at 8:13 am</a>		</div>

		<p>The memory point is moot if you have a single memory-monster application.</p>
<p>If you have several applications, you gain substantial memory by running them in 32-bit. More so with managed environments that don&#8217;t compress object pointers.  Or if your applications has recursive algorithms.  Or if&#8230;</p>
<p>Well, I could go on and on, but you should start to see there are obviously more losing points about using 64-bit than 32-bit in terms of memory usage.  In practice, you can count on needing at least double the memory when transitioning from 32-bit to 64-bit.  Having 32 bytes on every stack, optimized or not, ends up counting further against the 64-bit memory consumption myth myth.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1254305">
				<div id="div-comment-1254305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1254305">
			June 29, 2016 at 5:29 am</a>		</div>

		<p>Your link says this :<br />
&#8220;You should not worry if your 64-bit program consumes more stack memory. There is much more physical memory in 64-bit systems. The stack with the size 2 Mbytes on a 64-bit system with 8 Gbytes of memory takes fewer percent of memory than 1 Mbyte of stack in a 32-bit system with 2 Gbytes.&#8221;</p>
<p>So, apart from a point of view of &#8220;pureness&#8221;, why do you care so much ?<br />
And how would you support variadic functions otherwise ?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>