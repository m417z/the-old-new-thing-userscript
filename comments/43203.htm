<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1170273">
				<div id="div-comment-1170273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170273">
			January 7, 2015 at 7:42 am</a>		</div>

		<p>Why did MS not put this inside a #ifndef _WIN64? What about when you ported to ARM? ARM64 is probably your last chance for it to happen at compile time.</p>
<div class="post">[<em>That would have made it harder to port code that unwittingly relied on the BSTR cache. Also, it would have been a difference between 32-bit and 64-bit Windows that would be really hard to debug if you happen to stumbled across it. Imagine getting a bug that reproduces only only on the 64-bit ARM version of the program. Too bad your VMs are all x86 and x64. Gratuitous differences between 32-bit and 64-bit behavior results in things like <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/12/18/10378851.aspx">Pinball being dropped from the product</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170293">
				<div id="div-comment-1170293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">grommit</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170293">
			January 7, 2015 at 8:18 am</a>		</div>

		<p>Time fror SysAllocStringEx</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170303">
				<div id="div-comment-1170303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DavidE</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170303">
			January 7, 2015 at 8:39 am</a>		</div>

		<p>That kind of thing has been around a long time. When I worked at MIPS (1985), one of the compiler folks had rewritten malloc/realloc for better performance, but it turned out that it broke a couple of fundamental Unix utilities (diff, and one other I forget). I don&#39;t remember the details, but it seems like the programs relied on realloc always returning the same or a higher-value address, and code relied on that for performance. I know &#8211; bad coding in the first place, but we couldn&#39;t break things like that if we expected people to buy our systems.</p>
<p>There was a similar weirdness with nroff/troff that was due to them relying on adjacent global variable declarations to be adjacent in memory. This code was written before structs existed. MIPS had a concept of small and large data segments, and the variables in question used a mixture of sizes. We ended up having to add a compiler directive to force everything into the large segment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170313">
				<div id="div-comment-1170313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170313">
			January 7, 2015 at 8:53 am</a>		</div>

		<p>So many problems in computing are only &quot;hard&quot; because we refuse to abandon compatibility when it is necessary.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170323">
				<div id="div-comment-1170323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170323">
			January 7, 2015 at 8:59 am</a>		</div>

		<p>You can disable it per-process via SetOaNoCache() &#8212; We asked for this because the cache tends to grow to a collection of the largest BSTRs encountered by your application over time &#8212; not good for a server application.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170333">
				<div id="div-comment-1170333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170333">
			January 7, 2015 at 9:04 am</a>		</div>

		<p>&#8211; can&#39;t get rid of the BSTR because</p>
<p>+ can&#39;t get rid of the BSTR cache because</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1170343">
				<div id="div-comment-1170343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170343">
			January 7, 2015 at 9:12 am</a>		</div>

		<p>@Raymond: Application Verifier could catch this?</p>
<div class="post">[<em>Cool, Application Verifier found a bug in a program you bought in 2001 from a company that no longer exists. Now what? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170353">
				<div id="div-comment-1170353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170353">
			January 7, 2015 at 11:05 am</a>		</div>

		<p>[Cool, Application Verifier found a bug in a program you bought in 2001 from a company that no longer exists. Now what? -Raymond]</p>
<p>If it&#39;s got a latent heap corruption bug and no fix forthcoming for vendor, it ought to be on the short list to replace. It&#39;s one thing at the application level where bwcompat-heap &amp; already proposed appshim would fix it, but at the pluglin level it&#39;s just too dangerous too leave around.</p>
<div class="post">[<em>I think you&#39;ll find that in practice, the list to replace is long, not short. (Also, it&#39;s expensive to replace something. In addition to procuring the replacement, you have to integrate it into your workflow and retrain all your employees to use the new system. And how do you know the new system doesn&#39;t have the same bug?) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170363">
				<div id="div-comment-1170363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170363">
			January 7, 2015 at 11:42 am</a>		</div>

		<p>@skSdnW: I&#39;m pretty sure some new, yet uninvented, architecture is going to emerge sooner or later. Never assume that ARM64 will be the last.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1170373">
				<div id="div-comment-1170373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170373">
			January 7, 2015 at 12:11 pm</a>		</div>

		<p>@Raymond: Only MS and a couple of ported open source apps could be affected on ARM. For x86/AMD64 the train has left the station but you could maybe remove/reduce the caching if the app has a Supported OS GUID in the manifest?</p>
<p>@Azarien: Even today on ARM Win32 is basically dead and MS wants to force you over to WinRT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170383">
				<div id="div-comment-1170383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170383">
			January 7, 2015 at 12:19 pm</a>		</div>

		<p>@ skSdnW</p>
<p>WinRT, in its current implementation, is merely a layer over the top of Win32. &nbsp;Even MSFT lacks the resources to convert WinRT to a full OS right now. &nbsp;They have bigger fish to fry. &nbsp;Win32 is going to be here for quite a while.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170393">
				<div id="div-comment-1170393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170393">
			January 7, 2015 at 12:23 pm</a>		</div>

		<p>skSdnW: You can&#39;t remove caching for apps that declare it because they may load plug-ins that don&#39;t support it. You may not directly support plug-ins, but standard file dialogs load them.</p>
<p>Imagine if your app crashed as soon as somebody tried to use the &quot;Save As&quot; dialog. You might want to tell your user that they should just stop using their broken shell extension, but your user will probably just use a competitor&#39;s app that doesn&#39;t crash. Or more likely your user isn&#39;t going to help you debug the problem to determine the root cause; they will just think your app is broken and uninstall it without telling you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1170423">
				<div id="div-comment-1170423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170423">
			January 7, 2015 at 1:57 pm</a>		</div>

		<p>@Gabe: The GUID in the manifest already changes API behavior. If we take &quot;Save As&quot; as an example, <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh848036(v=vs.85).aspx">msdn.microsoft.com/&#8230;/hh848036(v=vs.85).aspx</a> says IPersistFile::Save will fail the call if the path is relative and the app has a Win8 or later GUID. It is not unusal for shell extensions to deal with IPersistFile (IShellLink etc).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170443">
				<div id="div-comment-1170443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IdahoJacket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170443">
			January 7, 2015 at 5:33 pm</a>		</div>

		<p>How could a program rely on the cache behavior? &nbsp;I could see a performance impact, but not a correctness issue. &nbsp;It&#39;s probably just a lack of imagination on my part, though.</p>
<div class="post">[<em>SysFreeString(bstr); bstr[0] = L&#39;x&#39;; /* inadvertently relies on the cache */ -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170473">
				<div id="div-comment-1170473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170473">
			January 8, 2015 at 2:41 am</a>		</div>

		<p>Is this one of those cases where the cache could be 99% removed and replaced with a &quot;stub&quot; version that behaves as though a cache were present but never actually uses it; e.g: a hypothetical &quot;isBSTRCached&quot; returns false, and adding a BSTR to the cache is just a nop? &nbsp;Or are there rogue programs that actually go partying on the internals of the cache?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170453">
				<div id="div-comment-1170453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170453">
			January 7, 2015 at 7:44 pm</a>		</div>

		<p>[And how do you know the new system doesn&#39;t have the same bug?)]</p>
<p>At least that part&#39;s the obvious. The application verifier doesn&#39;t find it when doing the same thing. And since my other constraints limited the problem to library component or shell plugin, and I believe application vendors should be able to pre-apply shims from the list it reduces to just shell plugin. I hate buggy shell plugins; they&#39;re just too dangerous for everybody. Let&#39;s just say that when moving GetOpenFileName and GetSaveFileName out-of-process starts to sound like a good idea you&#39;ve got a problem. It&#39;s a whole lot easier to run into than calling SetOaNoCache() at program startup anyway. All you have to do is link with /LARGEADDRESSAWARE. Ah gee that 64-bit compiled plugin somehow managed to *still* not be LARGEADDRESSAWARE (I&#39;ve seen it).</p>
<div class="post">[<em>Corporations with this problem tend to have very few choices available. (These are niche products, not mainstream packages. And very often, it&#39;s a custom program written just for that company; there is no alternative at all.) It is likely that every possible replacement also has problems. Now what? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170493">
				<div id="div-comment-1170493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170493">
			January 8, 2015 at 5:40 am</a>		</div>

		<p>mh: there may well be, but the more obvious problem is use-after-free, because cached entries don&#39;t move in memory.</p>
<div class="post">[<em>Yup, I sort of mentioned that in the linked article (&quot;heap corruption bugs&quot;). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170523">
				<div id="div-comment-1170523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170523">
			January 8, 2015 at 7:29 am</a>		</div>

		<p>I wish Windows Explorer provided a shell extension manager the way web browsers do with plugins and extensions, or at least warned you when somebody tried to install one. I&#39;m careful, but I&#39;ve been bitten many times. The last one, a few weeks ago, a shell extension from a security suite that came with a fingerprint reader started overnight crashing Explorer every time it tried to display the context menu for any link. Six months after being installed. Go figure who is to blame when you haven&#39;t installed anything recently: it took me a while of fiddling with RegEdit to find it. Definitely, out of reach for the average user, and even for many brick-and-mortar shop computer technicals. And yes, there are utilities that can help you. But if you don&#39;t know they exist (like the average user), they are of no use.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170573">
				<div id="div-comment-1170573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170573">
			January 8, 2015 at 9:01 am</a>		</div>

		<p>&quot;Cool, Application Verifier found a bug in a program you bought in 2001 from a company that no longer exists. Now what?&quot;</p>
<p>Well, at least I&#39;d know that the applications I&#39;m buying in 2015 didn&#39;t have this (class of) bug, thereby preventing problems in the future.</p>
<p>The fact that information from AppVerifier would be moot (non-actionable) in a significant fraction of cases is no excuse for not performing the test at all.</p>
<p>Also, a system where Open/Save dialogs didn&#39;t load plugins would not be terribly problematic. &nbsp;Such a system would surely have a button (with keyboard shortcut) for &quot;Open Explorer Window here&quot;, where the plugins would be loaded, which would handle pretty much all cases where plugins are needed. &nbsp;And the improved performance of Open/Save dialogs in the 95% use cases should balance the additional effort needed to load the full interface the 5% of the time when you intend to interact with a plugin. &nbsp;That additional effort being pretty low, since it&#39;s not spawning a new process, just requesting the already-running shell to create a new window. &nbsp;In fact, since plugins have already run their initialization code in the shell process, the overall performance might be better even when the Explorer window does get opened&#8230; and then plugin authors wouldn&#39;t need to mess with long-running helper services to cache metadata to reduce per-process initialization time (thinking of TSVNcache.exe, but there are others).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170613">
				<div id="div-comment-1170613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170613">
			January 8, 2015 at 12:56 pm</a>		</div>

		<p>[Cool, Application Verifier found a bug in a program you bought in 2001 from a company that no longer exists. Now what? -Raymond]</p>
<p>Sometimes it&#39;s true that you&#39;re just stuck and can&#39;t do anything. &nbsp;However, the further away from 2001 you get, the more likely it is that you can or must do something anyway. &nbsp;It&#39;s also the case that ignorance leads to stagnancy: &quot;We still use Foo Deluxe 2001 because it has no bugs and is compatible with Windows X&quot;.</p>
<p>In some ways compatibility constraints are just a spiral into mediocrity.</p>
<div class="post">[<em>If compatibility were abandoned, then the solution that most companies choose would probably be &quot;Don&#39;t upgrade Windows.&quot; In a sense, the behavior was preserved in 64-bit Windows in order preserve source code compatibility. &quot;You want to port your app to 64-bit Windows? Great. Just fix these pointer truncation problems, and you&#39;re all set!&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170643">
				<div id="div-comment-1170643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170643">
			January 8, 2015 at 2:45 pm</a>		</div>

		<p>There are two options (for Microsoft, not for Raymond)&#8230; either the behaviour is removed at some point, or it isn&#39;t.</p>
<p>If it isn&#39;t, then it will carry on to the very last version of Windows.</p>
<p>If it is, then the x64 transition would have been a good time to do it. Not a perfect time, but when every application has to be thoroughly tested and/or code-reviewed anyway (to catch things like converting pointers to DWORDs), a good time. There&#39;s no mixed-bitness DLL loading, so you would know there are no &quot;program turns off BSTR caching; DLL relies on it&quot; problems, as &quot;program turns off BSTR caching&quot; implies a 64-bit program and &quot;DLL relies on it&quot; implies a 32-bit DLL. If someone had a legacy program from 2001, then good for them, it will keep working because it&#39;s 32-bit.</p>
<p>Not that Raymond has anything to do with that decision.</p>
<p>@Nico: when it&#39;s 2050, then people will be using programs written in 2035 that rely on BSTR caching (if Windows is still around).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170683">
				<div id="div-comment-1170683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170683">
			January 8, 2015 at 9:05 pm</a>		</div>

		<p>Anonymous Coward: The harder you make it to port apps to 64-bit, the fewer people who will do it.</p>
<p>&quot;Why don&#39;t you have a 64-bit version of your app? It&#39;s just a simple recompile!&quot;</p>
<p>&quot;We tried that, but we couldn&#39;t figure out why the 64-bit version randomly crashed, so we abandoned it.&quot;</p>
<p>I have a client who started upgrading to Windows XP in 2007. They just finished their upgrade to Windows 7 sometime last year. They are in the middle of moving off IE8 right now. Now imagine what the upgrade schedule for this organization would look like if MS didn&#39;t care so much about backwards compatibility!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170663">
				<div id="div-comment-1170663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170663">
			January 8, 2015 at 2:57 pm</a>		</div>

		<p>@Nico: Haven&#39;t you learned anything from reading this blog? Windows is optimized for mediocrity, optimized for old buggy program from last millennium. When the platform team is confronted with a bug, they *always* choose backwards compatibility, never to ease development of new applications.</p>
<p>This is know a technical debt, and makes the resource requirement for all new development escalate exponentially long term. Short term it often a profit though, but this has been going on for ages, at least since win32s.</p>
<p>win32 api has had many chances to &quot;upgrade&quot; to clean 64-bit, but this path is is never chosen, and it will never be chosen. If you want a clean 64-bit api you have to look elsewhere.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170773">
				<div id="div-comment-1170773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170773">
			January 9, 2015 at 11:30 am</a>		</div>

		<p>@Gabe</p>
<p>When we finally start fining companies dozens of billions, or even trillions, of dollars for knowing refusal to maintain security to industry standards, they&#39;ll actually start upgrading &#8212; and fixing security flaws.</p>
<div class="post">[<em>And then people will complain that the government is interfering too much. My personal physician&#39;s office still runs on Windows XP. If you fine him billions of dollars, he&#39;ll go bankrupt. (Actually, more likely is that his malpractice insurance premiums will skyrocket and he will have to stop practicing medicine.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170803">
				<div id="div-comment-1170803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150107-00/?p=43203#comment-1170803">
			January 9, 2015 at 2:01 pm</a>		</div>

		<p>@Raymond</p>
<p>$50/ea to replace the machines in that office with refurbished Pentium-D based machines running Win7.</p>
<p>$100/ea to replace the machines with Core2-based ones.</p>
<p>But, of course, it costs $0 to put your patient data at risk.</p>
<p>Granted, the machines are already infected. In general, if your identity is ever stolen, the most likely culprit is your CPA (Many of them are still running Win9x) or doctor&#39;s office. (Not minor data breaches, mind, but full-scale ID theft.)</p>
<div class="post">[<em>Large clinics tend to set things up so that every computer is identical. It&#39;s hard enough supporting a network of 1000 identical computers, now imagine if every single one of those machines is running different hardware. (Especially since the specialized software may be supported only on certain types of hardware.) At least the shut off Internet access to all the computers, and no USB sticks are allowed. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>