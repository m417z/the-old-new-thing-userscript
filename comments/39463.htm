<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-171663">
				<div id="div-comment-171663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Serge Wautier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-171663">
			May 6, 2004 at 7:41 am</a>		</div>

		<p>Raymond, XADD link broken !</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-171673">
				<div id="div-comment-171673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-171673">
			May 6, 2004 at 7:54 am</a>		</div>

		<p>Hm, works for me. It&#8217;s not important; you can go to any old XADD page.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-171693">
				<div id="div-comment-171693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Montgomery</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-171693">
			May 6, 2004 at 8:41 am</a>		</div>

		<p>Raymond,</p>
<p>The link is broken for me as well.  For anyone who cares, here&#8217;s a link that does work:</p>
<p><a target="_new" href="http://courses.ece.uiuc.edu/ece291/archive/fall2001/books/labmanual/inst-ref-xadd.html" rel="nofollow">http://courses.ece.uiuc.edu/ece291/archive/fall2001/books/labmanual/inst-ref-xadd.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-171723">
				<div id="div-comment-171723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc Wallace</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-171723">
			May 6, 2004 at 9:14 am</a>		</div>

		<p>Eeeew.  I really did not want to know that.</p>
<p>Sounds exactly like what was done back in the x86/x87 days, when you weren&#8217;t sure you had an FPU.  I still have memories of tracing way down into compilers, only to find &quot;#ifdef IS_FPU&quot; blocks where one side was one line, the other was inline ASM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-171793">
				<div id="div-comment-171793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Day</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-171793">
			May 6, 2004 at 10:22 am</a>		</div>

		<p>Hmmm&#8230; I replaced most of Microsoft&#8217;s Z-80 FORTRAN library, to use an AM9511 math coprocessor. Even converting between Microsoft and IEEE floating point format for each operation it was faster overall.</p>
<p>Does this qualify for an eeeew?:)</p>
<p>(This wasn&#8217;t a Microsoft project &#8211; Microsoft didn&#8217;t even know about it as far as I know.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-171873">
				<div id="div-comment-171873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith Moore [exmsft]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-171873">
			May 6, 2004 at 1:21 pm</a>		</div>

		<p>Geesz, calling into kernel-mode and disabling interrupts just to manipulate a LONG seems a bit extreme.</p>
<p>Hmm&#8230; I was just about to ask why the legacy 80386 support couldn&#8217;t just protect all InterlockedXxx() functions with a single global critical section. Then I realized that, under NT at least, critical sections are implemented using the InterlockedXxx() functions.</p>
<p>GRRRRR&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-171893">
				<div id="div-comment-171893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-171893">
			May 6, 2004 at 1:40 pm</a>		</div>

		<p>Consider:</p>
<p>initial value: L = 9<br />
<br />Thread A:  InterlockedIncrement(&amp;L);<br />
<br />Thread B:  L = 3</p>
<p>If A executes before B, then the result is L = 3; if B executes before A then the result is L = 4. Since both operations are atomic, these are the only possible results.</p>
<p>But what if you used a critical section instead of a kernel trap? Then this would be possible:</p>
<p>A: EnterCriticalSection<br />
<br />A: load eax = L (loads 9)<br />
<br />A: eax++ (eax = 10 now)<br />
<br />B: L = 3<br />
<br />A: L = eax (L = 10, overwriting 3 [not 9])<br />
<br />A: LeaveCriticalSection<br />
<br />A: return eax (returns 10)</p>
<p>L now has the impossible value 10. Atomicity has been violated.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-171943">
				<div id="div-comment-171943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Catatonic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-171943">
			May 6, 2004 at 2:46 pm</a>		</div>

		<p>It must be painful to run Windows 98 on a 386, but I did used to make do with a 386sx running Windows 95.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-171953">
				<div id="div-comment-171953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Tejada</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-171953">
			May 6, 2004 at 2:50 pm</a>		</div>

		<p>As Keith Moore suggests, for the Win9x case they could have implemented InterlockedXXXXXX using a simple xchg semaphore common to all InterlockedXXXXXX functions:</p>
<p>InterlockedIncrement(DWORD* addend)<br />
<br />    mov ebx, [addend]<br />
<br />loop:<br />
<br />    mov eax, 1<br />
<br />    ; lock prefix makes it also work in multiproc (yeah, not very useful in 9x)<br />
<br />    ; ilocksem is a variable which guarantees serialization to Interlocked funcs<br />
<br />    lock xchg [ilocksem], eax<br />
<br />    cmp eax, 0<br />
<br />    je loop </p>
<p>    ; Now it&#8217;s safe to increment addend<br />
<br />    mov eax, [ebx]<br />
<br />    inc eax<br />
<br />    mov [ebx], eax<br />
<br />    ; Free the semaphore<br />
<br />    mov [ilocksem], 0<br />
<br />    ; result already in eax, so we are ok<br />
<br />}</p>
<p>That would be so much faster than a ring switch.</p>
<p>The problem with this approach, is this sentence of the MSDN:<br />
<br />&quot;The threads of different processes can use this mechanism if the variable is in shared memory.&quot;</p>
<p>This would mean that [ilocksem] needs to be in memory area shared among all processes (in case two processes use InterlockedXXXXX over a shared &quot;addend&quot;), and also means that a process could manually set it to 1 and starve all processes trying to use InterlockedXXXXX functions, which is bad.</p>
<p>Other approaches would be possible, like only share [ilocksem] among processes which already share some memory; for the rest of the cases [ilocksem] would be a per process variable.<br />
<br />This would mean that a process can only hang (by setting [ilocksem] to 1) another process it shares memory with (which is not that bad).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-171963">
				<div id="div-comment-171963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Tejada</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-171963">
			May 6, 2004 at 3:05 pm</a>		</div>

		<p>Oh, yes, and as Raymond says, serializing InterlockedXXXX functions won&#8217;t cover the case where a process accesses addend directly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172043">
				<div id="div-comment-172043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-172043">
			May 7, 2004 at 6:53 am</a>		</div>

		<p>Atomicity guarantees are described here.</p>
<p><a target="_new" href="http://msdn.microsoft.com/library/en-us/dllproc/base/interlocked_variable_access.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/dllproc/base/interlocked_variable_access.asp</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172013">
				<div id="div-comment-172013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith Moore [exmsft]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-172013">
			May 7, 2004 at 2:20 am</a>		</div>

		<p>Interesting, Raymond. I was focused on just the interlocked case.</p>
<p>So I must ask: Does the system make *any* atomicity guarantees when mixing interlocked non-interlocked operations?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172023">
				<div id="div-comment-172023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith Moore [exmsft]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-172023">
			May 7, 2004 at 2:21 am</a>		</div>

		<p>Interesting, Raymond. I was focused on just the interlocked case.</p>
<p>So I must ask: Does the system make *any* atomicity guarantees when mixing interlocked non-interlocked operations?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172213">
				<div id="div-comment-172213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-172213">
			May 7, 2004 at 12:39 pm</a>		</div>

		<p>That page doesn&#8217;t seem to be fully accurate. It discusses the atomicity of 32-bit and 64-bit read/writes, but then states: &quot;Reads and writes to variables of other sizes are not guaranteed to be atomic on any platform.&quot; On x86, reads/writes to 8-bit and properly-aligned 16-bit variables are also atomic, at least according to the Intel manual. Quote here: <a target="_new" href="http://lists.freebsd.org/pipermail/freebsd-smp/2003-September/000334.html" rel="nofollow">http://lists.freebsd.org/pipermail/freebsd-smp/2003-September/000334.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172223">
				<div id="div-comment-172223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-172223">
			May 7, 2004 at 12:59 pm</a>		</div>

		<p>A particular CPU may guarantee it but Win32 doesn&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172233">
				<div id="div-comment-172233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040506-00/?p=39463#comment-172233">
			May 7, 2004 at 1:09 pm</a>		</div>

		<p>I took &quot;not guaranteed to be atomic on any platform&quot; to mean &quot;not guaranteed to be atomic on any CPU&quot;. I guess by &quot;any platform&quot; they really mean &quot;32-bit or 64-bit Windows in general&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>