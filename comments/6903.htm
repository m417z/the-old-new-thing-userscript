<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1004213">
				<div id="div-comment-1004213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004213">
			August 9, 2012 at 7:25 am</a>		</div>

		<p>&quot;the exception most likely came from a plug-in&quot;&#8230; So you want to use C++ in your ATL code? Well, you need to work a bit on what exceptions can be thrown from your code (C++ is BAD when it comes to that), and catch them systematically on any COM boundary. It&#39;s not that hard (says the guy who managed to let these babies slip through said COM boundary). (BTW, although you can turn exceptions off, C++ without exceptions is not C++ if you ask me :-)).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004223">
				<div id="div-comment-1004223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/brad.westness_4000_gmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>brad.westness@gmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004223">
			August 9, 2012 at 7:51 am</a>		</div>

		<p>So is SysFader a holdover from the old IE 5.5 era &quot;page transitions&quot; feature?</p>
<div class="post">[<i>Nope. Those happen in-frame (so you can&#39;t run them on a background thread). It&#39;s the menu fade-out animation. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004233">
				<div id="div-comment-1004233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004233">
			August 9, 2012 at 8:02 am</a>		</div>

		<p>@Goran: &quot;although you can turn exceptions off, C++ without exceptions is not C++ if you ask me&quot;</p>
<p>I never really understood what turning off exceptions means.</p>
<p>What happens when a std::vector&lt;T&gt;.push_back() call fails because it runs out of memory? It should throw std::bad_alloc, but that&#39;s disabled?!?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-xpclientgmail-com odd alt thread-odd thread-alt depth-1" id="comment-1004243">
				<div id="div-comment-1004243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/xpclient' rel='external nofollow' class='url'>xpclient</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004243">
			August 9, 2012 at 8:44 am</a>		</div>

		<p>Aren&#39;t there more invisible windows to blame in Windows 8?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1004253">
				<div id="div-comment-1004253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004253">
			August 9, 2012 at 10:05 am</a>		</div>

		<p>&quot;SysFader is a helper window used by Internet Explorer&quot; does IE even know that this window exists? The IE/OE/Explorer menuband is/was a toolbar+HMENUs and I&#39;m guessing the fade window (fade or slideout added in 2k) is part of the native menu implementation?</p>
<p>Why not include the name of the module where the exception occurred? It might not work for ATL thunks but in situations where the module is known I&#39;d rather be told about that and not a random window title.</p>
<div class="post">[<em>The fade-out is IE-provided. This is where IE wants to emulate the system menu fade-out for things that aren&#39;t HMENUs. And think about it: What happens if you blame the crashing module? Answer: You end up blaming the messenger. Module A passes an invalid parameter to module B, so module B crashes and gets blamed. &quot;Why does kernel32 crash all the time?&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004263">
				<div id="div-comment-1004263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004263">
			August 9, 2012 at 10:26 am</a>		</div>

		<p>&quot;What happens when a std::vector&lt;T&gt;.push_back() call fails because it runs out of memory? It should throw std::bad_alloc, but that&#39;s disabled?!?&quot;</p>
<p>My question exactly&#8230; I&#39;ve never bothered to turn exceptions off and see what happens. &nbsp;Probably something very ugly. &nbsp;It just seems like breaking the language, and the &quot;wrong&quot; thing to do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andrewrichards even thread-even depth-1" id="comment-1004273">
				<div id="div-comment-1004273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndrewRichards' rel='external nofollow' class='url'>AndrewRichards</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004273">
			August 9, 2012 at 10:38 am</a>		</div>

		<p>FYI: The new version of ProcDump (v5) (soon to be released) prints the &#39;msc&#39; exception names when it logs exceptions (1st or 2nd chance).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004293">
				<div id="div-comment-1004293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004293">
			August 9, 2012 at 11:05 am</a>		</div>

		<p>@AC, @JamesJohnston: AFAIK, when you turn off exceptions, the compiler simply does not emit the stack unwinding stuff for your functions. If you call a function which throws, your destructors will not be called, and it might misbehave in other ways. So if you turn off exceptions, you must avoid calling code which can throw.</p>
<p>Yes, this means you cannot use a lot of the STL. But if you are using C++ just to write directly to the Win32 API and call or implement some COM code (more easily than you would do in C), and are using a non-STL allocator like malloc or HeapAlloc, you can get away with disabling exceptions. Disabling exceptions (and disabling RTTI, another thing you can do in some compilers) allow you to use a subset of C++ as a &quot;better C&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004303">
				<div id="div-comment-1004303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004303">
			August 9, 2012 at 11:43 am</a>		</div>

		<p>There used to be an option in Internet Explorer that I would uncheck (Allow Page Transitions) which I thought was related to allowing pages to visually blend from one page to another&#8230; or something.</p>
<p>I hate menu animations of all kinds, so I turn off everything named &quot;naimate&quot;, &quot;fade&quot;, and &quot;slide&quot; in Windows Explorer Visual Effects. &nbsp;Wow, my windows respond faster! &nbsp;Smooth scrolling is also off, and Wow! &nbsp;My &quot;page-down&quot; happens faster!</p>
<p>If I have fewer processes running, that&#39;s good too, but I don&#39;t expect the fader or the animation code to really be crashing, which echoes what Raymond says here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004313">
				<div id="div-comment-1004313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004313">
			August 9, 2012 at 1:01 pm</a>		</div>

		<p>If this is a known problem, why not get the IE people to change the Window name from &quot;SysFader&quot; to &quot;A background thread in Internet Explorer encountered a problem&quot;.</p>
<p>That way this heuristic will stop confusing people when stuff goes wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004323">
				<div id="div-comment-1004323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul M. Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004323">
			August 9, 2012 at 1:03 pm</a>		</div>

		<p>@Matt: Cute, but then the Spy++ surfers will inundate support with &quot;bug&quot; reports.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1004343">
				<div id="div-comment-1004343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004343">
			August 9, 2012 at 3:03 pm</a>		</div>

		<p>Wait? Who thought that creating long-living windows in an arbitrary worker thread is a good idea?</p>
<div class="post">[<i>Not the IE guys. the SysFader window is destroyed when fading is complete. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004353">
				<div id="div-comment-1004353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004353">
			August 9, 2012 at 4:01 pm</a>		</div>

		<p>Wasn&#39;t SysFader a minor villain in the second Star Wars trilogy?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-xpclientgmail-com odd alt thread-odd thread-alt depth-1" id="comment-1004363">
				<div id="div-comment-1004363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/xpclient' rel='external nofollow' class='url'>xpclient</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004363">
			August 10, 2012 at 12:00 am</a>		</div>

		<p>Page transitions were unfortunately removed from IE9 just because they were not a &quot;standard&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004373">
				<div id="div-comment-1004373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/bdv_4000_inec.ru/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>bdv@inec.ru</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004373">
			August 10, 2012 at 12:26 am</a>		</div>

		<p>IF OS trusts program to provide human-readable information about itself, then instead of hunting for hidden windows more straightforward and simple approach would be just getting program name from EXE VersionInfo</p>
<div class="post">[<i>If you had more than one copy of the program running (e.g. Acrobat Reader) then you don&#39;t know which one crashed. If the crash occurred in a plug-in, then it will be blamed on the host application. And it also leads to questions like &quot;<a href="http://blogs.msdn.com/b/oldnewthing/archive/2009/02/12/9413816.aspx" rel="nofollow">What does the COM Surrogate do and why does it keep crashing?</a>&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004383">
				<div id="div-comment-1004383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ExceptionCurious</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004383">
			August 10, 2012 at 2:36 am</a>		</div>

		<p>It seems that Google Chrome doesn&#39;t use C++ exceptions either (<a rel="nofollow" target="_new" href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Exceptions" rel="nofollow">google-styleguide.googlecode.com/&#8230;/cppguide.xml</a>)</p>
<p>But I wonder how these complex systems (IE, Chrome) handle error conditions (e.g. what happens when something fail deep inside some function? Do error codes bubble up until the main program loop?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004393">
				<div id="div-comment-1004393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004393">
			August 10, 2012 at 4:16 am</a>		</div>

		<p>@ExceptionCurious Gecko (Firefox) avoids C++ exceptions too. In order to work with STL, it provide its own malloc that simply aborts on OOM. Its other errors are often represented with error codes but sometimes methods just return a boolean success flag.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004433">
				<div id="div-comment-1004433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004433">
			August 10, 2012 at 8:01 am</a>		</div>

		<p>&quot;If you call a function which throws, your destructors will not be called, and it might misbehave in other ways.&quot;</p>
<p>I would at least hope at least the process gets nuked from orbit at the time the exception is thrown, rather than allowing the program to continue and exhibit undefined behavior&#8230;</p>
<p>What I don&#39;t get is why everyone is avoiding exceptions in the first place. &nbsp;I don&#39;t buy the arguments against exceptions in Google Chrome. &nbsp;Sounds like an excuse not to use RAII. &nbsp;C# doesn&#39;t even have a concept like RAII apart from the limited &quot;using&quot; block, and people have been throw exceptions there for years&#8230;</p>
<div class="post">[<i>In order for the runtime to nuke the process from orbit, the function would need a &quot;catch(&#8230;)&quot; which defeats the purpose of disabling exception handling. (I.e., to &quot;disable exception handling&quot; you &quot;enable exception handling&quot;?) Code which interoperates with other languages (or compilers or even versions of compilers) cannot use synchronous C++ exceptions because the C++ synchronous exception ABI is not standardized and can vary from compiler to compiler, compiler version to compiler version. And of course it doesn&#39;t work in languages that aren&#39;t C++! If you control your program top to bottom and can guarantee that all code was compiled at the same time with the same compiler, then more power to you. But applications which have a plug-in model don&#39;t have that luxury. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004483">
				<div id="div-comment-1004483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004483">
			August 10, 2012 at 9:03 am</a>		</div>

		<p>&quot;In order for the runtime to nuke the process from orbit, the function would need a &quot;catch(&#8230;)&quot; &quot;</p>
<p>No, it would not. &nbsp;I&#39;m just saying that the compiler should translate the &quot;throw&quot; into throwing a CPU exception, rather than a no-operation. &nbsp;Divide by zero. &nbsp;Cause an access violation. &nbsp;Anything. &nbsp;Since there&#39;s no exception handler, the process should then die right at the &quot;throw&quot;. &nbsp;That way I know right away there&#39;s a problem. &nbsp;I really don&#39;t care, I just wouldn&#39;t want to ignore the throw and keep pretending like nothing happened!</p>
<p>I also know the C++ ABI is not standardized. &nbsp;But this lack of ABI extends beyond exception handling. &nbsp;If you have to call another library made with a different compiler and/or compiler version, then do it through a C interface (which, by definition, has no C++ exceptions). &nbsp;For every web browser I know, plug-ins go through a C interface (including COM). &nbsp;Whether plug-ins use C++ or the browser uses C++ is inconsequential, as long as they stick to a C interface (which includes not allowing exceptions to pass through the interface).</p>
<p>Your argument can really be generalized into &quot;don&#39;t use C++, because it doesn&#39;t have an ABI&quot; &#8211; like this: &nbsp;&quot;Code which interoperates with other languages &#8230; cannot use any C++ features because the C++ ABI is not standardized and can vary from compiler to compiler&#8230;..&quot; &nbsp;Picking on one specific C++ feature only because of ABI concerns seems silly &#8211; you could just as easily pick on templates, inheritance, etc.</p>
<p>I think it&#39;s a lot more productive to use C++ inside the project, and just stick with C for the external interface, using &#39;extern &quot;c&quot;&#39; and trapping any exceptions. &nbsp;That seems a lot easier than cluttering all the core classes with error code checks, dealing with constructors that can&#39;t throw exceptions any more, etc.</p>
<div class="post">[<i>The compiler would have to walk the stack somehow and see &quot;Oh, wait, this function on the stack does not implement an exception handler, so I will call <code>terminate</code>.&quot; But the way most C++ implementations walk the stack is by having each function with a catch block register itself on a linked list of activation records. So every function that doesn&#39;t have exception handling would still have to register an exception handler so that the exception dispatch code can find it. You can&#39;t have the throw detect its caller at compile time because the caller isn&#39;t known until runtime. What happens when you throw across a function with no exception handler is that the frame is simply not seen in the search for a handler. It&#39;s not an explicit nop; it&#39;s an implicit one. It&#39;s like saying &quot;People who don&#39;t sign up for the newsletter don&#39;t receive information from us (it&#39;s a nop). We should notify our communications director when we send out a newsletter and there are people who haven&#39;t signed up.&quot; (And yes, you need to make sure no C++-ness escapes your language boundary. But most of them are easy to contain because they aren&#39;t possible in the first place. You don&#39;t pass classes as method parameters across language boundaries because there&#39;s no way to express them in a language-independent way. But it is very easy to accidentally throw an exception across language boundaries. See all the people asking questions about why their C++ exception thrown across a wndproc doesn&#39;t work!) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004533">
				<div id="div-comment-1004533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004533">
			August 10, 2012 at 10:08 am</a>		</div>

		<p>I was under impression that compiler/libraries would use WinAPI SEH instead of C++ exception handling if disabled. (similar syntax too)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-1004553">
				<div id="div-comment-1004553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004553">
			August 10, 2012 at 10:52 am</a>		</div>

		<p>According to a discussion that a group of us had the other day, the reason that Google originally didn&#39;t allow exceptions was that they were too expensive. &nbsp;That is now generally no longer the case, but they have a multi-million line codebase that is not exception-safe, so they can&#39;t just start using exceptions in it without having to go through and update everything to be exception-safe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004523">
				<div id="div-comment-1004523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004523">
			August 10, 2012 at 9:52 am</a>		</div>

		<p>&quot;But it is very easy to accidentally throw an exception across language boundaries. See all the people asking questions about why their C++ exception thrown across a wndproc doesn&#39;t work!&quot;</p>
<p>Too true! &nbsp;LOL&#8230; &nbsp;Of course, eliminating exceptions project-wide brings new complications. &nbsp;For example, how to handle failing constructors? &nbsp;Do you just construct a &quot;zombie&quot; class that can&#39;t do anything? &nbsp;Do you require that constructors do nothing, and have an &quot;Initialize&quot; function instead (e.g. Google style guide)? &nbsp;The entire thing feels like an ugly hack. &nbsp;Either way, now you have to remember to check the state of a class on entry of every member function:</p>
<p>HRESULT Class::Member() { if (!initialized) { return E_FAIL; } /* snip */ }</p>
<p>If it&#39;s a simple class that won&#39;t need to require/support reinitialization later, I find it easiest just to perform initialization in the constructor and throw if it fails. &nbsp;Then the rest of the class can always assume that it has been correctly initialized (i.e. the &quot;if (!initialized)&quot; check can be removed).</p>
<p>And what about STL and boost? &nbsp;Do you just ignore all that and reinvent the wheel with something that doesn&#39;t use exceptions? &nbsp;(e.g. vector::push_back might have to reallocate heap memory, which could fail &#8211; throwing a bad_alloc exception. &nbsp;But if you don&#39;t have exceptions, what&#39;s it supposed to do? &nbsp;Some vector constructors might throw, too. &nbsp;Do we make our own custom vector STL container that requires an Initialize function call before using it? &nbsp;What about STL class copy constructors / assignment operators, which call copy constructors / assignment operators on contained objects &#8211; what if the copy constructor fails? &nbsp;Forget the STL; how will *you* handle errors in your copy constructors and assignment operators?)</p>
<p>I guess everything is a trade-off. &nbsp;Personally, I&#39;d rather use exceptions, rather than deal with reinventing the STL, etc. &nbsp;Trying to rip out exceptions completely feels too much like breaking the entire language.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004673">
				<div id="div-comment-1004673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120809-00/?p=6903#comment-1004673">
			August 12, 2012 at 8:34 am</a>		</div>

		<p>@JamesJohnson</p>
<blockquote><p>
  &gt;&gt; &quot;For example, how to handle failing constructors?&quot;
</p></blockquote>
<p>In this paradigm, constructors are never allowed to fail (although new Object() can still fail in the new() due to OOM).</p>
<p>If your object is complicated and might legitimately throw (e.g. CMyAwesomeFileStream), you have an Init() that is allowed to return a HRESULT, or a static constructor, e.g.:</p>
<p>CMyAwesomeFileStream fs;</p>
<p>HRESULT hr = fs.OpenRead(&quot;C:/foo.txt&quot;); // effectively Init</p>
<p>if(!SUCCEEDED(hr)) &#8230;</p>
<p>or</p>
<p>CMyAwesomeFileStream* fs = NULL;</p>
<p>HRESULT hr = CAwesomeFileStreamFactory.CreateFileStream(&amp;fs, &quot;C:/foo.txt&quot;);</p>
<p>if(!SUCCEEDED(hr)) &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>