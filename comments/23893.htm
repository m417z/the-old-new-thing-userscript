<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-586773">
				<div id="div-comment-586773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-586773">
			January 8, 2008 at 10:34 am</a>		</div>

		<p>KB 925336 (<a rel="nofollow" target="_new" href="http://support.microsoft.com/kb/925336" rel="nofollow">http://support.microsoft.com/kb/925336</a>) is a good story of such a blunder.</p>
<p>There is a function in ADVAPI32 (SaferIdentifyLevel) which checks the digital signature on a file, given its path.</p>
<p>Unfortunately, it also mapped it to virtual memory, thus it failed with files approaching 1GB in size (in 32-bit processes).</p>
<p>Without KB925336 fix trying to open a large (1GB+) EXE file from a network share will result in a cryptic error (unless you disable the signature verification in Group Policy).</p>
<p>The KB article, however, only mentions a similar Windows Installer issue, which is caused by the same problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586813">
				<div id="div-comment-586813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hayden</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-586813">
			January 8, 2008 at 11:29 am</a>		</div>

		<p>Augh! Memory mapped files is one of those &quot;I-have-an-infinitely-big-Unix-box&quot; paradigms that people should never learn. Yes, reading in the file in bufferSize chunks and parsing it is a bit harder, but let&#8217;s be grown-ups here!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586903">
				<div id="div-comment-586903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-586903">
			January 8, 2008 at 1:22 pm</a>		</div>

		<p>AB: I think Visual Studio 2005 SP1 hit this.</p>
<p>Joe: Once you &quot;overcome&quot; the address space limitation (which produces a fairly quick error message), you hit the physical RAM limitation (which throws you into paging frenzy, from which there&#8217;s rarely a way out). I expect that once the former is resolved with 64-bit, we&#8217;ll have more of the latter&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586963">
				<div id="div-comment-586963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-586963">
			January 8, 2008 at 2:35 pm</a>		</div>

		<p>Hayden: Why is memory mapping such a bad idea? I&#8217;ll grant, if you write for 32 bit it&#8217;s an awful idea, but if you are writing a 64 bit program I&#8217;ve heard that it is often more efficient to rely on memory mapping. &nbsp;It&#8217;s not like the OS actually reads the whole file into memory at once. &nbsp;Memory mapping lets the OS handle caching more efficiently and greatly simplifies many uses of file data. &nbsp;What&#8217;s not to like?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586973">
				<div id="div-comment-586973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-586973">
			January 8, 2008 at 2:43 pm</a>		</div>

		<p>Not only are HDs smaller than 20GB laughably small, they are literally laughably small. The only HD I could find (new, not used) smaller than 20GB is 8GB and weighs 13g. Just the other day I was joking with a friend about how the amount of storage that fits on his big toe is orders of magnitude larger than his first HD (20MB).</p>
<p>I remember how I used to like making files larger than 4GB to see what would break. I couldn&#8217;t do this until NT 3.51 came out with file compression because 4GB disks didn&#8217;t exist at the time (or they cost thousands of dollars). As I recall, even DIR couldn&#8217;t add up files properly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586993">
				<div id="div-comment-586993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-586993">
			January 8, 2008 at 3:28 pm</a>		</div>

		<p>Josh:Using memory mapping is &quot;OK&quot; in 64-bit programs, if performance is not that critical.</p>
<p>One of the problems with memory mapping is that the &quot;reads&quot;, although cached, are inherently synchronous. Thus, wise use of overlapped asynchronous I/O, combined with application-level caching, is always faster and less resource-intensive, although much more difficult to implement.</p>
<p>There is a reason SQL Server uses asynchronous overlapped I/O, sets FILE_FLAG_NO_BUFFERING, and uses its own caching scheme instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-587023">
				<div id="div-comment-587023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587023">
			January 8, 2008 at 4:32 pm</a>		</div>

		<p>@AB: At this point there&#8217;s the obligatory pointing out that the only people who write SQL Server are the members of the SQL Server Team. The number of times the rest of the world needs to approach that sort of performance is small enough that saving development time will almost certainly win out.</p>
<p>Knowing about the performance caveats is good, as long as people don&#8217;t use that as an excuse to trot out the vastly more complex solution because &quot;it&#8217;s faster&quot;, or discard the easy solution altogether because &quot;it might be slow&quot;. In particular, the vast majority of applications will not run into performance problems by synchronously accessing files (and indeed, the vast majority do just that).</p>
<p>Aside from the &gt;4G breakage, another non-performance related concern is that the only way to do error handling for memory-mapped files is to use structured exception handling, which will not give you any opportunity for determining the cause of the error and which may not fit in with the rest of your error-handling strategy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-587043">
				<div id="div-comment-587043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587043">
			January 8, 2008 at 4:55 pm</a>		</div>

		<p>JM: In fact, you can retrieve the address, the access type, and the error code (NTSTATUS) from an EXCEPTION_IN_PAGE_ERROR (0xC0000006) exception [ <a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/aa363082" rel="nofollow">http://msdn2.microsoft.com/en-us/library/aa363082</a>(VS.85).aspx ]</p>
<p>(sorry for going a bit offtopic)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-587053">
				<div id="div-comment-587053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587053">
			January 8, 2008 at 5:19 pm</a>		</div>

		<p>&gt; Augh! Memory mapped files is one of those &#8220;I-have-an-infinitely-big-Unix-box&#8221; paradigms that people should never learn. Yes, reading in the file in bufferSize chunks and parsing it is a bit harder, but let&#8217;s be grown-ups here!</p>
<p>Hehe, I have a 64 bit linux box &#8211; find me a file that&#8217;s more than about 8 exabytes :) Sure, it&#8217;s a gotcha, but it won&#8217;t matter in 5 years.</p>
<div class=post>[<i>If you&#8217;re going to write 64-bit-only software then more power to you. Then again, your 64-bit linux software doesn&#8217;t have to worry about the WIN32_FIND_DATA structure anyway, so it&#8217;s not clear why you&#8217;re commenting here. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-587063">
				<div id="div-comment-587063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587063">
			January 8, 2008 at 5:27 pm</a>		</div>

		<blockquote><p>
  I remember how I used to like making files larger than 4GB to see what would break. I couldn&#8217;t do this until NT 3.51 came out with file compression because 4GB disks didn&#8217;t exist at the time (or they cost thousands of dollars). As I recall, even DIR couldn&#8217;t add up files properly.
</p></blockquote>
<p>This reminds me of raymond&#8217;s story about testign the limits of NTFS back in those days. LVM allowed a big pile of raid boxes to be ganged together to form a single FS and it only took about 3 days to write a file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-587083">
				<div id="div-comment-587083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587083">
			January 8, 2008 at 6:09 pm</a>		</div>

		<p>This is the sort of thing that generally I don&#8217;t worry about &#8212; I just use the 32-bit versions. &nbsp;This is because I can count the number of times I&#8217;ve needed to support larger files on the fingers of one foot (not a typo). &nbsp;But then, I don&#8217;t write programs that manipulate media files, either. &nbsp;(Or a shell/directory type program, for that matter.)</p>
<p>Still, I keep it in the back of my mind, just in case :)</p>
<div class=post>[<i>Even if you don&#8217;t manipulate media files, somebody might just try to File.Open a file bigger than 4GB and you need to do be careful not to do anything stupid. That&#8217;s my point. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-587113">
				<div id="div-comment-587113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sandman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587113">
			January 8, 2008 at 6:24 pm</a>		</div>

		<p>&lt;I&gt;your 64-bit linux software doesn&#8217;t have to worry about the WIN32_FIND_DATA structure anyway,&lt;/I&gt;</p>
<p>Well he could be writing it using libwine, maybe for portability. (But there are much better ways).</p>
<p>But more usefully &#8211; what about windows64 only software &#8211; not that I can find MapViewofFile64() (or equiv) on msdn . In this space in would be sensible to think about remember to use the 64 bit function.</p>
<p>At least I assume there is one? Or has it been left out for some reason ?</p>
<div class=post>[<i>Um, try MapViewOfFile. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586823">
				<div id="div-comment-586823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-586823">
			January 8, 2008 at 11:35 am</a>		</div>

		<p>Didn&#8217;t early versions of GNU/Hurd map the entire *filesystem* into memory?</p>
<p>On a related note, even parsers that don&#8217;t map the entire file into memory can have problems, e.g. (pseudo-C):</p>
<p>while(!end_of_data(file)){</p>
<p> &nbsp;if(check_data_validity(file)) add_data_to_array(file);</p>
<p>}</p>
<p>Since this amounts to actually loading the entire file into memory (as opposed to just mapping it) in some situations (RAM+Pagefile &lt; 4GB) it could run out into problems even faster.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-587153">
				<div id="div-comment-587153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587153">
			January 8, 2008 at 8:25 pm</a>		</div>

		<p>[If you&#8217;re going to write 64-bit-only software then more power to you. Then again, your 64-bit linux software doesn&#8217;t have to worry about the WIN32_FIND_DATA structure anyway, so it&#8217;s not clear why you&#8217;re commenting here. -Raymond]</p>
<p>It&#8217;s not like your blog is inapplicable to unix &#8211; it&#8217;s mostly windows (and fish) centric, but the topics address specific instances of common problems.</p>
<div class=post>[<i>But saying &#8220;Solve the problem of the constrained 32-bit address space by using a 64-bit address space&#8221; doesn&#8217;t really help somebody who has a 32-bit system. It&#8217;s like responding to an article about how to conserve memory with &#8220;Solve the problem of running out of memory by adding more memory.&#8221; A true statement which misses the point of the exercise. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-587163">
				<div id="div-comment-587163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587163">
			January 8, 2008 at 8:38 pm</a>		</div>

		<p>@sandman: if Raymond&#8217;s terse answer does not satisfy, consider that Microsoft&#8217;s aim was to keep 32-bit and 64-bit code source compatible. When the Win64 effort started, a number of new types which are 32-bit on 32-bit systems and 64-bit on 64-bit systems were introduced. Then, Windows APIs were adjusted to use these types where appropriate.</p>
<p>In new versions of the SDK, after these changes were made, MapViewOfFile was modified so that the dwNumberOfBytesToMap parameter is now a SIZE_T (not a DWORD). In turn that&#8217;s a typedef for ULONG_PTR which is a pointer-sized number, i.e. matches the system address size.</p>
<p>MapViewOfFile already supported 64-bit offsets into the file. This change only affects the number of bytes you can map in one go.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-587173">
				<div id="div-comment-587173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://hexatron.com' rel='external nofollow' class='url'>hexatron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587173">
			January 8, 2008 at 9:54 pm</a>		</div>

		<p>I recently ported a program to 64bits. I was really fearing the part where StackWalk was called (to produce a detailed state when something went wrong).</p>
<p>The 64bit version is StackWalk64, and there are a bunch of other functions that become function64.</p>
<p>Simply renaming those functions worked&#8211;first time.</p>
<p>(Well, registers are now named Esp instead of Rsp, etc)</p>
<p>I was amazed, dumbfounded, delighted, and left early. My heartiest thanks to whoever busted their butts to make this happen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-587183">
				<div id="div-comment-587183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cereal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587183">
			January 8, 2008 at 10:13 pm</a>		</div>

		<p>I&#8217;ve always wondered how mmap/CreateFileMapping is supposed to make file parsing any easier? &nbsp;It doesn&#8217;t solve</p>
<ul>
<li>Misaligned data on architectures where that matters</li>
<li>
<p>Struct packing problems</p>
</li>
<li>
<p>I/O errors in situations where exception handling is cumbersome</p>
</li>
</ul>
<p>Although file mapping is a good solution to some very narrowly-defined problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-587203">
				<div id="div-comment-587203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Cheng</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587203">
			January 8, 2008 at 11:48 pm</a>		</div>

		<p>AB: I think SQL Server (and most other database server) do application-level buffer due to the complex MVCC / ACID requirements. Unless your application is on a dedicated server, it&#8217;s not a good idea to allocate a large pool of cache in application level..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-587213">
				<div id="div-comment-587213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587213">
			January 9, 2008 at 12:01 am</a>		</div>

		<p>@Daniel Cheng: I meant &quot;application-level caching&quot; in its broadest sense.</p>
<p>While SQL Server caches &#8216;raw&#8217; database pages themselves, working with any huge data structure without mapping it entirely into address space is also a form of &quot;caching&quot;, just implemented differently.</p>
<p>For media files, for example, you usually only need to &quot;cache&quot; stream metadata.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-587223">
				<div id="div-comment-587223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587223">
			January 9, 2008 at 12:54 am</a>		</div>

		<p>Given Microsoft&#8217;s (very laudable) attempts to maintain transparent backwards-compatibility if at all possible, I wonder how long it&#8217;ll be before some sufficiently large cu$tomer request a small hack to MapViewOfFile(), just a minor change, won&#8217;t affect anything else, and we&#8217;d really appreciate it&#8230; and I wonder how many people in whichever group would have to implement this would plan on taking their annual leave at about this time?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-587233">
				<div id="div-comment-587233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587233">
			January 9, 2008 at 2:04 am</a>		</div>

		<p>Actually, mapping files into memory can be used to help solve a class of problems that is a bit more difficult using the stream-of-bytes representation (read/write or ReadFile/WriteFile). Just like stream-of-bytes method can be more useful in a different set of problems.</p>
<p>First, think of cases where a file actually represents in-memory data. For example, perhaps an operating system wants to load an executable image into memory. Sure it could read the headers, figure out where the sections are, allocate memory, copy the file to RAM&#8230; or it can read the headers, map the regions of the file to the right place, and let the MMU handle it.</p>
<p>Or perhaps you have a big array-like data structure, where bits may change inside it. It&#8217;s an array because you know it&#8217;s randomly read and written to. So, you can in your initialization, open the file, read it all into memory, close it, then on shutdown, reopen the file, save it all, and exit. Or do the much simpler method of open the file, map it into memory (note &#8211; no storage allocated!), then on shutdown, unmap the memory (which also happens to close and commit any unflushed changes to the disk file).</p>
<p>If you are processing data linearly, say, a video file, the stream-of-bytes method is perfect. If however you&#8217;re going to read the entire file into memory in the first place, maybe memory mapping is better. It can certainly avoid having to allocate that much RAM storage, and at the very least, random reads/writes all over the place doesn&#8217;t mean you need to do seeks and writes and reads continually.</p>
<p>They&#8217;re used for different things, and somethings, the stream of bytes is the perfect way of doing things, for other things, seeing the entire file at once is ideal. Especially if all you&#8217;re doing is copying the file to RAM in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-587273">
				<div id="div-comment-587273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587273">
			January 9, 2008 at 7:32 am</a>		</div>

		<p>Worf:</p>
<p>Don&#8217;t get too caught up in a single OS/Computer thinking.</p>
<p>I agree that a small set of problems involve directly mapping a file into ram, however, that should be only for the OS and not applications. &nbsp;Applications should take an agnostic approach and not depend on a certain byte ordering or memory layout.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-587363">
				<div id="div-comment-587363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sandman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587363">
			January 9, 2008 at 12:20 pm</a>		</div>

		<p>&lt;i&gt;Applications should take an agnostic approach and not depend on a certain byte ordering or memory layout.&lt;/i&gt;</p>
<p>Agreed. But that doens&#8217;t make memory mapping useless &#8211; you just need to ensure you use wrapper functions to access any binary fields. As a previous poster pointed out it all depends on your processing model.</p>
<p>@Mike Dimmink.</p>
<p>I thought of that &#8211; but the msdn on MapViewofFile() list as in the win32 API &#8211; so I assumed (wrongly) it was the 32bit size_t. That will teach me.</p>
<p>But if 32bit and 64bit are compatible then why are then any taxes to pay. As long as you check that your not try to map is sane &#8211; which is where we started I guess. I thought about testing against (size_t)(-1)/4 but that is huge on a 64 bit system &#8211; but I&#8217;m not sure whether it is unreasonable huge in <em>all</em> cases for ever.</p>
<div class=post>[<i>This tax&nbsp;is only&nbsp;tangentially related&nbsp;to 64-bit Windows. If you test only the nFileSizeLow then you are buggy with files larger than 4GB. You can make this mistake on both 32-bit and 64-bit Windows. I&#8217;m sorry I brought up memory-mapped files. Once again, people focus on the colorful details and miss the point of the article. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-587423">
				<div id="div-comment-587423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bramster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587423">
			January 9, 2008 at 1:03 pm</a>		</div>

		<p>[Even if you don&#8217;t manipulate media files, somebody might just try to File.Open a file bigger than 4GB and you need to do be careful not to do anything stupid.]</p>
<p>Indeed. &nbsp;I have to sort files larger than 4GB. .</p>
<p>I have to be very, very careful with my 32-bit programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-587553">
				<div id="div-comment-587553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://taxes.poemshop.info/2008/01/08/taxes-files-larger-than-4gb/' rel='external nofollow' class='url'>Taxes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587553">
			January 9, 2008 at 5:15 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://taxes.poemshop.info/2008/01/08/taxes-files-larger-than-4gb/" rel="nofollow">http://taxes.poemshop.info/2008/01/08/taxes-files-larger-than-4gb/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-587603">
				<div id="div-comment-587603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587603">
			January 9, 2008 at 7:28 pm</a>		</div>

		<p>Hehe, the previous trackback is funny :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-587543">
				<div id="div-comment-587543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DriverDude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587543">
			January 9, 2008 at 4:40 pm</a>		</div>

		<p>&quot;Once again, people focus on the colorful details and miss the point of the article. -Raymond&quot;</p>
<p>Because we all hate taxes.</p>
<p>Though I&#8217;m not sure this is just a &quot;tax&quot; in the manner of , e.g, the power management tax. An app that is ignorant of power management is an inconvience to users but generally isn&#8217;t a bug. An app that incorrectly handles files &gt; 4GB has a bug, or can lose data if it incorrectly truncates large files.</p>
<p>I would say it is a *requirement*, at a minimum, to correctly reject large files if an app doesn&#8217;t want to be &gt;4GB clean.</p>
<p>And we have to worry about legacy file formats too, such as .ZIP that has a 32-bit file size limit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-587613">
				<div id="div-comment-587613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587613">
			January 9, 2008 at 7:54 pm</a>		</div>

		<p>[Even if you don&#8217;t manipulate media files, somebody might just try to File.Open a file bigger than 4GB and you need to do be careful not to do anything stupid.]</p>
<p>My point was that in the apps where I&#8217;ve even *got* a File-&gt;Open (rare), typical interaction with the file would be &quot;open, read 32 bytes, close, display messagebox &#8216;Invalid file&#8217;&quot; (since the magic number in the header wouldn&#8217;t be there since it can&#8217;t be one of my files if it&#8217;s that big). &nbsp;None of which need to worry about 64-bit file lengths :)</p>
<p>I realise I&#8217;m probably a corner case though.</p>
<p>(Although a different 64-bit thing did bite me recently. &nbsp;time_t changed from 32 bits in VC6 to 64 bits in VC8, which broke one of my data structures. &nbsp;But never mind, I got it sorted out in the end. &nbsp;My fault for not paying attention to the &quot;breaking changes&quot; notes, probably.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-587833">
				<div id="div-comment-587833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-587833">
			January 10, 2008 at 12:26 pm</a>		</div>

		<p>Errors similar to this seem to abound. &nbsp;I tried to install a patch to a customer contact software program about a year ago, and it failed with a &quot;not enough free disk space&quot; error. &nbsp;Strange, since the disk had 32 GB free.</p>
<p>It turns out that if the amount of free space on the installation target disk was close to a multiple of 4 GB, the installer (not MSI but one of the other 2 big ones) would fail saying &quot;not enough free disk space&quot;. &nbsp;</p>
<p>The workaround was to create a huge file on your C drive to take up space. &nbsp;The installer was eventually patched to fix the arithmetic. &nbsp;</p>
<p>Apparently, big numbers are hard for (some) programmers to understand&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-589003">
				<div id="div-comment-589003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">file &gt; mem</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-589003">
			January 12, 2008 at 10:33 pm</a>		</div>

		<p>Mapping a file to memory is ALWAYS a bad idea. In 16-bit DOS this was a bad idea. In 32-bit windows this is a bad idea. In 64-bit windows this is a bad idea. DONT DO IT. Use buffering/streaming instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-589203">
				<div id="div-comment-589203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codeka.com/blogs/' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080108-00/?p=23893#comment-589203">
			January 14, 2008 at 3:52 am</a>		</div>

		<p>&quot;file &gt; mem&quot;: Are you one of those people who also think the goto statement is &quot;evil&quot;?</p>
<p>Memory mapping has it&#8217;s advantages and disadvantages, just like anything else. To say &quot;DON&#8217;T DO IT&quot; is premature and rather limiting.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>