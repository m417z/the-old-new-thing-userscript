<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-archangelpip even thread-even depth-1" id="comment-1275795">
				<div id="div-comment-1275795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161205-00/?p=94855#comment-1275795">
			December 5, 2016 at 7:32 am</a>		</div>

		<p>I suppose RegCreateKeyEx is also an exception to that pattern too. It works in a similar way to CreateFile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1275815">
				<div id="div-comment-1275815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161205-00/?p=94855#comment-1275815">
			December 5, 2016 at 8:32 am</a>		</div>

		<p>I was hoping for a reference to an easy way to prevent these kind of errors. I generally work in the Java world nowadays, where there are still some &#8220;old-fashioned&#8221; APIs like this, but modern IDEs use annotations on such things and show warnings when using the wrong type, even when it&#8217;s just using an int and would compile fine. Is there still nothing similar in the C/C++ Windows API world? Some sort of compiler flag or #define or something to detect these kinds of problems?</p>
<p>If I were to start work on a brand-new Windows application, is there a Raymond-approved template I should start from of symbols to define and files to include to use &#8220;current&#8221; development instead of all the defaults that are in there for backwards compatibility?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-zlynx even depth-2 parent" id="comment-1275816">
				<div id="div-comment-1275816" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161205-00/?p=94855#comment-1275816">
			December 5, 2016 at 9:44 am</a>		</div>

		<p>Well yes. C++11 has strongly typed enums. There&#8217;s some good information here <a href="http://stackoverflow.com/questions/12581064/enum-vs-strongly-typed-enum" rel="nofollow">http://stackoverflow.com/questions/12581064/enum-vs-strongly-typed-enum</a></p>
<p>But fixing this in the Windows API is not possible because of the lack of a time machine. In theory Microsoft could produce yet another API wrapper. But would anyone use it?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1275845">
				<div id="div-comment-1275845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161205-00/?p=94855#comment-1275845">
			December 5, 2016 at 2:07 pm</a>		</div>

		<p>The &#8220;problem&#8221; with C++ enums is that they&#8217;re mutually exclusive. You can&#8217;t use them for bitwise flags that are supposed to be ORd together.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1275875">
				<div id="div-comment-1275875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161205-00/?p=94855#comment-1275875">
			December 6, 2016 at 2:18 am</a>		</div>

		<p>It is possible to use them for flags as well, a standard for the boiler plate code would be good (or an extension to c++ so it&#8217;s not even necessary).</p>
<p><a href="https://github.com/jweyrich/cxx-boilerplate/blob/master/include/cxxboiler/enum_flags.h" rel="nofollow">https://github.com/jweyrich/cxx-boilerplate/blob/master/include/cxxboiler/enum_flags.h</a></p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1275925">
				<div id="div-comment-1275925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161205-00/?p=94855#comment-1275925">
			December 6, 2016 at 7:25 am</a>		</div>

		<p>That particular implementation doesn&#8217;t help, as it (as far as I can tell) uses &#8220;operator int() const { return i; }&#8221; to return the value back to the rest of the application as an &#8220;int&#8221;&#8230; which completely defeats the goal of using an enum to distinguish between PAGE_* values and FILE_MAP_* values.</p>
<p>I&#8217;m also very suspect of it implementing operator+()/operator-()/operator++()/operator&#8211;(). Those operations make no sense in terms of switching groups of bits on and off.</p>
<p>It&#8217;s also a bad overload of the enum abstraction, as the point of an enum is to enumerate all possible (and only those possible) values. If &#8220;a | b&#8221; is an allowed value, the enumeration would need to contain a member with that value for it to make sense as an enumeration. At which point you might as well use that member, rather than ORing two other members together. A separate abstraction (&#8220;bitflags&#8221;?) might make sense, but given C++&#8217;s aversion to introducing new keywords so as to not break existing code, that seems unlikely. (But &#8220;nullptr&#8221; made it, so&#8230; Or, &#8220;bitor enum&#8221; maybe &#8211; would make about as much sense as some of the historic overloads for &#8220;static&#8221; or &#8220;auto&#8221;. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1276415">
				<div id="div-comment-1276415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161205-00/?p=94855#comment-1276415">
			December 9, 2016 at 1:28 am</a>		</div>

		<p>&#8220;That particular implementation doesn’t help, as it (as far as I can tell) uses “operator int() const { return i; }” to return the value back to the rest of the application as an “int”… which completely defeats the goal of using an enum to distinguish between PAGE_* values and FILE_MAP_* values.&#8221;</p>
<p>Any type safe solution would require you to change the API calls to take an enum instead of an int, Then int() won&#8217;t be called.</p>
<p>&#8220;It’s also a bad overload of the enum abstraction, as the point of an enum is to enumerate all possible (and only those possible) values.&#8221;</p>
<p>No, that isn&#8217;t the point of an enum. However I agree that a type that contains bit fields (including enum bit fields) is a better solution.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1276285">
				<div id="div-comment-1276285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161205-00/?p=94855#comment-1276285">
			December 7, 2016 at 1:08 pm</a>		</div>

		<p>Providing an API that is a collection of enum values with simple ways to query and set value is pretty trivial. In Java there is EnumSet (<a href="https://docs.oracle.com/javase/7/docs/api/java/util/EnumSet.html" rel="nofollow">https://docs.oracle.com/javase/7/docs/api/java/util/EnumSet.html</a>) which does exactly that.</p>
<p>I don&#8217;t really see where compiler support would be necessary except to avoid some small syntactic sugar.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1275825">
				<div id="div-comment-1275825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161205-00/?p=94855#comment-1275825">
			December 5, 2016 at 11:37 am</a>		</div>

		<p>At the system call interface level, FILE_MAP_READ (SECTION_MAP_READ) is just an access mask bit like SYNCHRONIZE.  So yes, OpenFileMapping has an access mask that you want to use for the handle.</p>
<p>However, why MapViewOfFile takes FILE_MAP_* instead of PAGE_* is a mystery to me: NtMapViewOfSection takes PAGE_* flags.  So MapViewOfFile is internally just translating the flags rather pointlessly.</p>
<p>Also, Raymond&#8217;s footnote only applies to Win32, not the NT API.  NtCreateSection takes both SECTION_MAP_* and PAGE_* flags.  The SECTION_MAP_* flags are the access mask for the handle returned by NtCreateSection.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1275826">
				<div id="div-comment-1275826" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161205-00/?p=94855#comment-1275826">
			December 5, 2016 at 8:25 pm</a>		</div>

		<p>I guess you&#8217;d better tell the Win32 team that it&#8217;s time to dust off that time machine.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kwadwomi even thread-odd thread-alt depth-1" id="comment-1275865">
				<div id="div-comment-1275865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Master+Programmer' rel='external nofollow' class='url'>Master Programmer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161205-00/?p=94855#comment-1275865">
			December 5, 2016 at 4:39 pm</a>		</div>

		<p>Mixing flags is an issue a static analyzer could probably find. It would require the function to be annotated with the flags it accepts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt thread-even depth-1 parent" id="comment-1275836">
				<div id="div-comment-1275836" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161205-00/?p=94855#comment-1275836">
			December 6, 2016 at 2:15 am</a>		</div>

		<p>Well, this is a bit of a grey area. First, you can fill in all of the blanks if you really want, so:<br />
enum class rw {none, read, write, read_write};<br />
This means that you can if you want. The other thing is that you can also write bitwise operator functions for this type of enum. This allows you to use enums as bitmasks.<br />
The problem here is the first bit. Writing out all states of an enum is a pain, so if you are not planning on reading the value directly then you can skip the writing out of all the states and have just the bitwise operators.<br />
But I understand though, I would be more than tempted to use a class type to do this instead.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1275885">
				<div id="div-comment-1275885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161205-00/?p=94855#comment-1275885">
			December 6, 2016 at 2:43 am</a>		</div>

		<p>Meh, this was meant to be a reply to Karellen&#8217;s post further up, but somehow it got displaced down here.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>