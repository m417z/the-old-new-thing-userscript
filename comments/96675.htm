<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1303336">
				<div id="div-comment-1303336" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Haim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303336">
			July 24, 2017 at 7:34 am</a>		</div>

		<p>I think the first thing people should learn when they are introduced to multi-threading programing is that asynchronous IO != IO on another thread.<br />
so many problems could have been solved before they even came to being.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-practicalvb odd alt thread-odd thread-alt depth-1 parent" id="comment-1303345">
				<div id="div-comment-1303345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Rising' rel='external nofollow' class='url'>Rising</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303345">
			July 24, 2017 at 7:40 am</a>		</div>

		<p>Raymond, will you be showing us the code for the AccessToken class?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1303405">
				<div id="div-comment-1303405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303405">
			July 24, 2017 at 10:15 am</a>		</div>

		<p>I leave that as a simple exercise.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1303447">
				<div id="div-comment-1303447" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303447">
			July 24, 2017 at 2:26 pm</a>		</div>

		<p>The implementation is basically a wrapper around a SemaphoreSlim with the AcquireAsync returning preferably a struct that implements IDisposable.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1303506">
				<div id="div-comment-1303506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marco</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303506">
			July 25, 2017 at 2:23 am</a>		</div>

		<p>As interfaces usually cause the struct values to be boxed, it is worth noting that the IDisposable.Dispose() is a special case in Microsoft&#8217;s implementation.</p>
<p>&#8220;A call to IDisposable.Dispose on a struct is generated as a constrained virtual call, which most of the time does NOT box the value. A constrained virtual call on a value type only boxes the value if the virtual method is NOT implemented by the type. The only circumstances under which a virtual method can be unimplemented by the value type is when the method is, say, ToString, and implemented by the base class, System.ValueType.&#8221;</p>
<p>See: <a href="https://stackoverflow.com/questions/2412981/if-my-struct-implements-idisposable-will-it-be-boxed-when-used-in-a-using-statem" rel="nofollow">https://stackoverflow.com/questions/2412981/if-my-struct-implements-idisposable-will-it-be-boxed-when-used-in-a-using-statem</a><br />
See also: <a href="https://ericlippert.com/2011/03/14/to-box-or-not-to-box/" rel="nofollow">https://ericlippert.com/2011/03/14/to-box-or-not-to-box/</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1303465">
				<div id="div-comment-1303465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Koopa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303465">
			July 24, 2017 at 4:37 pm</a>		</div>

		<p>Isn&#8217;t it in referencesource anyway?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1303355">
				<div id="div-comment-1303355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303355">
			July 24, 2017 at 8:12 am</a>		</div>

		<p>There are third-party managed thread-pool classes floating around on the internet.  We used one when we had radically different response requirements for a particular set of activities.  We left the out-of-box thread pool to do regular work, but we dispatched our &#8220;special&#8221; work to the other pool.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1303375">
				<div id="div-comment-1303375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Schaeffer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303375">
			July 24, 2017 at 8:39 am</a>		</div>

		<p>I had to create a quick-and-dirty thread pool because the .NET thread pool was throttling new creation at one thread per half second while I was stuck calling blocking I/O that someone else wrote. The whole program start would lock up and I&#8217;d look like a lazy idiot. That thing really is a stinking turd worthy of contempt for the embarrassment it caused me. .NET Core replaced the guts with WinRT but you can&#8217;t create new thread pools with WinRT. You have to go custom or you have to P/Invoke the Vista thread pool. It does work now, really well.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-msn even depth-3" id="comment-1303395">
				<div id="div-comment-1303395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303395">
			July 24, 2017 at 9:55 am</a>		</div>

		<p>Why are you abusing the thread pool in the first place? The whole point of it is to execute short tasks. If you need to keep spawning new threads then spawn a new thread instead of abusing the thread pool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1303435">
				<div id="div-comment-1303435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303435">
			July 24, 2017 at 1:27 pm</a>		</div>

		<p>Why are P/Invoking to make a thread pool? Thread.Create() yours to do with what you please.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1303365">
				<div id="div-comment-1303365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303365">
			July 24, 2017 at 8:24 am</a>		</div>

		<p>I assume sql server isn&#8217;t single treaded an can execute multiple, long-running, queries in parallell. A server (vm or physical) usually has s lot of cores, sometimes it might even be hard to saturate all with meaningful work load. Multiple parallell calls from a cliant might actually increase performance, as long as the sql server isn&#8217;t overloaded.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-andycadley2 odd alt depth-2" id="comment-1303485">
				<div id="div-comment-1303485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303485">
			July 24, 2017 at 8:48 pm</a>		</div>

		<p>Raymond&#8217;s suggestion of &#8220;async at the top&#8221; can probably help prevent saturation from the top level, but I&#8217;d suspect query tuning could probably help fix it from the bottom too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1303486">
				<div id="div-comment-1303486" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303486">
			July 24, 2017 at 11:56 pm</a>		</div>

		<p>If all of the queries are similar/identical, you might just be adding more lock contention by parallelizing the activity, rather than achieving performance gains.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1303385">
				<div id="div-comment-1303385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fred</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303385">
			July 24, 2017 at 8:42 am</a>		</div>

		<p>Man, the link at the top is textbook thermonuclear social skills. More posts should have that tag.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1303496">
				<div id="div-comment-1303496" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://paulomorgado.net/' rel='external nofollow' class='url'>Paulo Morgado</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303496">
			July 25, 2017 at 2:05 am</a>		</div>

		<p>I wonder what Stephen Toub (<a href="https://social.msdn.microsoft.com/profile/Stephen+Toub+-+MSFT" rel="nofollow">https://social.msdn.microsoft.com/profile/Stephen+Toub+-+MSFT</a>) and Stephen Cleary (<a href="http://blog.stephencleary.com/" rel="nofollow">http://blog.stephencleary.com/</a>) would say about that suggestion. What&#8217;s the benefit of the state machine here?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1304146">
				<div id="div-comment-1304146" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.solsoftsolutions.com' rel='external nofollow' class='url'>Mark S</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1304146">
			July 28, 2017 at 10:49 am</a>		</div>

		<p>About the suggestion to use &#8216;async&#8217;?  The key to understand is that async I/O is a different animal that isn&#8217;t consuming threads in the normal way. See this post, for example: <a href="https://blog.stephencleary.com/2013/11/there-is-no-thread.html" rel="nofollow">https://blog.stephencleary.com/2013/11/there-is-no-thread.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1303516">
				<div id="div-comment-1303516" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303516">
			July 25, 2017 at 5:28 am</a>		</div>

		<p>I understand that this article is probably more about async, but why not use normal threads for the Database requests? (dedicated database threads seems to be one of MSDN-text-book examples of when NOT to use the .NET thread pool)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1303747">
				<div id="div-comment-1303747" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://aloiskraus.wordpress.com/' rel='external nofollow' class='url'>Alois Kraus</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675#comment-1303747">
			July 25, 2017 at 1:17 pm</a>		</div>

		<p>An alternative is that you start your SQL queries as long running tasks which will never exhaust the threadpool because TPL will simply create a new thread for each long running task. I guess the customer is already having some way to control the number of concurrent SQL queries to not overwhelm the database. </p>
<p>            Task.Factory.StartNew( () =&gt; {  Sql &#8230; }, TaskCreationOptions.LongRunning);</p>
<p>This will &#8220;waste&#8221; a new thread but since the latency this construct is in the region of 0.1ms it is for slow SQL queries a non issue. The superior ThreadPool task enqueue performance plays in this case no role and you can do old fashioned manual thread creation.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>