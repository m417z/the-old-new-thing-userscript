<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1334365">
				<div id="div-comment-1334365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334365">
			April 26, 2018 at 8:02 am</a>		</div>

		<p>I had to write this code once. I had some project that needed a slightly different codepath if its executable image was projectname.exe or projectname.vshost.exe (and yes it was the actual controlling variable &#8212; debug attach to process behaved normally) so I just checked for my executable image name.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mzzt odd alt depth-2 parent" id="comment-1334385">
				<div id="div-comment-1334385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334385">
			April 26, 2018 at 8:13 am</a>		</div>

		<p>I&#8217;ve done stuff like this. Most notably when working with WinForms and inheriting from built-in components, you&#8217;ll find design-time code sometimes will execute portions of your inherited class code you never intended to be run at design time and break the design time experience. I think there are a couple flags&#8230; this.DesignMode and and some LicenseSomething class&#8230; that together can be used to detect design mode. That&#8217;s the approach I usually use. Then I just bypass any inherited code so my custom code won&#8217;t run at design time and do things like mess with the control&#8217;s size.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1334425">
				<div id="div-comment-1334425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334425">
			April 26, 2018 at 10:57 am</a>		</div>

		<p>Ah yes; we solved this a &#8220;simpler&#8221; way. The code that messed up in design time was modified to check for application not initialized and do nothing in that case (RPC calls in design time can fail rather spectacularly when the local RPC endpoint isn&#8217;t started yet).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mzzt odd alt thread-odd thread-alt depth-1 parent" id="comment-1334375">
				<div id="div-comment-1334375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334375">
			April 26, 2018 at 8:10 am</a>		</div>

		<p>You can also use preprocessor directives to ensure the diagnostic code is only compiled into DEBUG builds and not RELEASE so that your delivery does not have these tools exposed (if that is what you want).</p>
<p>But as stated you want to be careful since RELEASE could then contain bugs you&#8217;d never find by testing DEBUG. So following the advice of being able to disable the diagnostic tools even in a DEBUG build is wise.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1334555">
				<div id="div-comment-1334555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334555">
			April 27, 2018 at 10:00 am</a>		</div>

		<p>The only issue with this suggestion is that it is possible to run the debug build independent of the IDE. So if you just check that it is a debug build then things may fail spectacularly if you run the debug build without a debugger attached.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1334395">
				<div id="div-comment-1334395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334395">
			April 26, 2018 at 8:29 am</a>		</div>

		<p>If you want to have a &#8216;diagnostic/developer mode&#8217;, its better to switch it on with a command line arg.</p>
<p>I&#8217;d also recommend leaving this in your release builds too. It will come in useful when you are trying to resolve an issue on a customers machine over a remote control session.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1334405">
				<div id="div-comment-1334405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334405">
			April 26, 2018 at 9:41 am</a>		</div>

		<p>The advice here is good:  choose your mode explicitly rather than implicitly inferring one from the environment.</p>
<p>But, as we&#8217;ve learned prior, running under a debugger already changes things about how your program runs.  <a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653</a></p>
<p>A really hacky way to accomplish the task originally posed would be to detect whether your process is using the debug heap or the regular heap.  :-S</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1334445">
				<div id="div-comment-1334445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334445">
			April 26, 2018 at 12:54 pm</a>		</div>

		<p>You can also get this behavior for free just via Visual Studio.  I&#8217;ve seen people complain about C# bugs that &#8220;disappear&#8221; under the debugger because the debugger display support for reading object properties causes things like lazy initialization to not be so lazy, or static fields and properties to be initialized at a very different time than they would be under normal execution.</p>
<p>This also reminds me of a story told by a EE professor in school about how in one of his own final projects as an undergrad, his team found that their mass of breadboards and wires would only function correctly if a multimeter was attached at a certain place.  Without enough time left to figure out the real cause, they just left it connected during pass-off with the TA.</p>
<p>So, if you run into this problem with your software, just ship your product with WinDbg and have it set to attach automatically when the program is launched! :)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1334455">
				<div id="div-comment-1334455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R P (MSFT)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334455">
			April 26, 2018 at 1:37 pm</a>		</div>

		<p>This reminds me of my intro to assembly class in college. It was taught on a VAX 11, and I at one point wrote a program that didn&#8217;t work when run, but ran perfectly under the debugger. </p>
<p>After hours of troubleshooting, I discovered that the VAX debugger initialized all of the registers to zero at startup, and my code was failing to clear a register before accumulating into it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt depth-2" id="comment-1334495">
				<div id="div-comment-1334495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334495">
			April 26, 2018 at 6:38 pm</a>		</div>

		<p>Humm&#8230; IMO this approach is worst than to just &#8220;touch&#8221; any class that you believe is lazy initializing and can cause problems in the constructor, and convert any LINQ queries to array before accessing it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command even thread-odd thread-alt depth-1" id="comment-1334515">
				<div id="div-comment-1334515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334515">
			April 27, 2018 at 6:46 am</a>		</div>

		<p>I remember having a problem loading my Windows Live Hotmail. (That&#8217;s what it was called back then.) I even authorized Microsoft support to access my account. (I didn&#8217;t give them any username or password though.) But they couldn&#8217;t reproduce the problem, whereas I managed to use several VPNs (back then, public VPN wasn&#8217;t a thing) to verify that this problem could occur from anywhere in the world.</p>
<p>I guess it was one those problems that couldn&#8217;t be reproduced from within Microsoft campus.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1334615">
				<div id="div-comment-1334615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://www.broadheath.com/' rel='external nofollow' class='url'>Frank Wilhoit</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334615">
			April 27, 2018 at 3:56 pm</a>		</div>

		<p>Following a chain of links, I came to a four-year-old post alluding to a customer who wanted to be able to tell whether their DLL had been loaded by a service.  Many comments touched upon this and other which-execution-context scenarios, without ever mentioning one obvious rationale for such curiosities: the detection of licensing violations.  You want to run our software as a service?  That&#8217;s extra.  Or maybe we deploy all of our modules, but you only get to run the ones you have paid for.  Or maybe our licensing enforcement depends upon a service that is irresistibly tempting to tamper with.  Etc., etc., etc.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1334645">
				<div id="div-comment-1334645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334645">
			April 27, 2018 at 7:24 pm</a>		</div>

		<p>&#8220;You want to run our software as a service? That’s extra.&#8221;</p>
<p>I wouldn&#8217;t mind one bit if this were difficult/impossible to enforce!</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1334735">
				<div id="div-comment-1334735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aged .Net Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334735">
			April 29, 2018 at 6:21 am</a>		</div>

		<p>That seems a fairly vandalicious attitude towards the commercial reality that if customers don&#8217;t pay the producer doesn&#8217;t stay in business.  </p>
<p>Using a service as an intermediary would be the obvious technique to attempt to bypass multi-user licensing and let a single-user license support multiple actual users.</p>
<p>Stealing isn&#8217;t nice.  If you don&#8217;t like the licensing arrangements on offer, buy somebody else&#8217;s product whose licensing you approve of.  If you can&#8217;t find that in the marketplace, there&#8217;s probably a reason.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1334765">
				<div id="div-comment-1334765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1334765">
			April 29, 2018 at 10:43 pm</a>		</div>

		<p>The original comment specifically mentioned charging extra for the ability to run the software as a service, as opposed to a &#8220;regular&#8221; application. That would be analogous to selling someone a vehicle and declaring that they must not use it for business purposes unless they pay the manufacturer/dealer more money.</p>
<p>Similarly, if I want to run it on a different OS using a compatibility layer, I have a right to do that &#8211; they may not provide support for it, but that&#8217;s different from forbidding it altogether!</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1335875">
				<div id="div-comment-1335875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180426-00/?p=98605#comment-1335875">
			May 6, 2018 at 11:43 pm</a>		</div>

		<p>I&#8217;ll just mention that &#8211; at least here &#8211; the cost of registering your vehicle is indeed greater if you use it for any commercial purpose than if it is just for personal transport. OK, that money isn&#8217;t going to the manufacturer, but still&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>