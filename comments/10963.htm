<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-906853">
				<div id="div-comment-906853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MSS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-906853">
			April 12, 2011 at 7:20 am</a>		</div>

		<p>Could it be because using InterlockedOr would actually write to memory and therefore with trash the cache ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-906863">
				<div id="div-comment-906863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MSS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-906863">
			April 12, 2011 at 7:22 am</a>		</div>

		<p>Arghhh, meant &quot;will trash&quot; instead of &quot;with trash&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works even thread-even depth-1" id="comment-906883">
				<div id="div-comment-906883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-906883">
			April 12, 2011 at 7:44 am</a>		</div>

		<p>Is the use case for the lock-free patterns for high-performance, multi-core, multi-thread code ? I&#39;m struggling to see the usecase where one could apply this. Are there general benefits to using lock-less code? &nbsp;(Other than &quot;most folks don&#39;t grok locks&quot;)</p>
<p>(Granted, I&#39;m working on an ARM project where there are no user-level &quot;atomic&quot; operations, so all my multi-threaded code is pthreads with locks).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-906893">
				<div id="div-comment-906893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-906893">
			April 12, 2011 at 7:50 am</a>		</div>

		<p>Regardless of memory contents, CMPXCHG thrashes remote (on other processor) cache anyway. The cache coherency protocol is the biggest cost of interlocked operations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-906923">
				<div id="div-comment-906923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Herron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-906923">
			April 12, 2011 at 8:59 am</a>		</div>

		<p>You don&#39;t need an interlocked read because &quot;direct reads and writes of properly aligned LONGs are atomic&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-906933">
				<div id="div-comment-906933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-906933">
			April 12, 2011 at 9:05 am</a>		</div>

		<p>What would an interlocked read do in the first place? What would it consider as a failure? Is there any memory read failure that is unique to an interlocked read anyway?</p>
<p>Either the old value is there or, wait, what would the definition of old and new be anyway? There is only one value involved: whatever value there was at the time you read the memory.</p>
<p>This is all under the assumption that the memory area can be read atomically. If that assumption doesn&#39;t hold then you&#39;ve got bigger issues than this series are supposed to deal with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-906943">
				<div id="div-comment-906943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-906943">
			April 12, 2011 at 9:16 am</a>		</div>

		<p>@nathan_works I&#39;d say if you know what you&#39;re doing and you know you don&#39;t lock often at the system you&#39;re programming behaves exactly as you expect it to, fine. Still having lock-free constructs can result in immense improvements in the behaviour of some application. Windows programs had real problems with locks before, see:</p>
<p><a rel="nofollow" target="_new" href="http://www.bluebytesoftware.com/blog/2006/12/15/AnticonvoyLocksInWindowsServer2003SP1AndWindowsVista.aspx" rel="nofollow">http://www.bluebytesoftware.com/&#8230;/AnticonvoyLocksInWindowsServer2003SP1AndWindowsVista.aspx</a></p>
<p>There&#39;s no question that lock-free can be made much better than the solution with unnecessary locks, what I didn&#39;t get is the advantages of lock free initialisation which happens only once in the life of the program. However if you&#39;re not making the application that serves a single user (but some server-style one) and you&#39;d otherwise have to lock for every access to some variable or some data structure, switching to lock-free can give you immensely better program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-906953">
				<div id="div-comment-906953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-906953">
			April 12, 2011 at 9:25 am</a>		</div>

		<p>#define InterlockedReadAcquire(longptr) (MemoryBarrier(), *(longptr))</p>
<p>No need for InterlockedReadRelease.</p>
<div class="post">[<i>Close. Your memory barrier is on the wrong side of the read. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-906973">
				<div id="div-comment-906973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sean</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-906973">
			April 12, 2011 at 9:30 am</a>		</div>

		<p>@ken &#8211; interlocked read is used for the memory barrier, not for the atomic read</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-906983">
				<div id="div-comment-906983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-906983">
			April 12, 2011 at 9:46 am</a>		</div>

		<p>Suggestion: post code that comes from something that actually compiled.</p>
<p>Doing so would avoid mistakes such as writing &quot;originalValue&quot; in one part of the code, and then writing &quot;oldValue&quot; elsewhere. &nbsp;I think we can assume what you really meant, but IMHO it&#39;s better for the code to not require assumptions for comprehension.</p>
<p>Same thing came up in an earlier post in this series (code used an undeclared variable named &quot;m_ccsAlloc&quot; in <a target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/06/10150261.aspx" rel="nofollow">blogs.msdn.com/&#8230;/10150261.aspx</a>). &nbsp;We can guess what that variable is, but it&#39;s better if it&#39;s right there in black and white.</p>
<div class="post"><i>These were not meant to be real programs. They are illustrating the principle. Consider the implied exercise &quot;These code fragments are for pattern demonstration and therefore cannot be compiled as-is. (At least until compilers can fill in &quot;&#8230;&quot; with actual working code.) Given what you&#39;ve learned, fix any errors.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-906993">
				<div id="div-comment-906993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Derek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-906993">
			April 12, 2011 at 10:10 am</a>		</div>

		<p>@pete.d</p>
<p>So long as Raymond is taking the time to educate us all, I don&#39;t really care if he takes the time to compile all of his samples. &nbsp;If it&#39;s a choice between fewer posts with 100%-correct code or more posts with the occasional error, I&#39;ll take the more posts option.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907003">
				<div id="div-comment-907003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907003">
			April 12, 2011 at 10:13 am</a>		</div>

		<p>@Derek:</p>
<p>Education doesn&#39;t work if the communication is flawed. &nbsp;The people who are in most need of the education are also the least likely to be able to infer what the correct meaning is.</p>
<p>In any case, it&#39;s merely a suggestion. &nbsp;I know it&#39;s popular to brown-nose around here, but surely Raymond is capable of choosing himself whether it makes sense for his code examples to work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907013">
				<div id="div-comment-907013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">djlin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907013">
			April 12, 2011 at 10:39 am</a>		</div>

		<p>Taking a stab at the exercise: This will give you both acquire and release semantics when you might only want one?</p>
<p>(Sorry if this is a duplicate &#8212; the first time I hit the button the page reloaded with no post and the text box filled.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907023">
				<div id="div-comment-907023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shane</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907023">
			April 12, 2011 at 1:02 pm</a>		</div>

		<p>In the first block of code, shouldn&#39;t &quot;oldvalue&quot; be &quot;originalvalue&quot; ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907053">
				<div id="div-comment-907053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907053">
			April 12, 2011 at 2:44 pm</a>		</div>

		<p>@Raymond: Consider the implied exercise &quot;These code fragments are for pattern demonstration and therefore cannot be compiled as-is. (At least until compilers can fill in &quot;&#8230;&quot; with actual working code.) Given what you&#39;ve learned, fix any errors.&quot;</p>
<p>Suit yourself. &nbsp;Personally, I think there&#39;s a big difference between incomplete (which is perfectly appropriate) and simply wrong. &nbsp;I&#39;m not suggesting the code examples themselves be compilable as-is. &nbsp;But they ought to at least be copied from code that <em>does</em> compile, so that they are at least self-consistent.</p>
<p>But hey…it&#39;s your blog. &nbsp;If that&#39;s the persona and attitude you want to portray publicly, that&#39;s your prerogative.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907063">
				<div id="div-comment-907063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Some Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907063">
			April 12, 2011 at 3:30 pm</a>		</div>

		<p>This is not a &quot;copy and paste stuff that works by magic&quot; blog. This is most definately a &quot;here&#39;s something neat, look up the details and learn how it actually works before you use it&quot; blog.</p>
<p>And with something as complex as lock-free algorithms, anyone who can&#39;t figure out the occasional typo for themselves doesn&#39;t know enough to use the info, anyway.</p>
<p>Like most people, I appreciate the effort Raymond has put into his blog, and hope a few complainers aren&#39;t going to put him off.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907073">
				<div id="div-comment-907073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">benski</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907073">
			April 12, 2011 at 3:41 pm</a>		</div>

		<p>Exercize Answer: InterlockedOr is going to write to memory unnecessarily, always.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907083">
				<div id="div-comment-907083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907083">
			April 12, 2011 at 3:55 pm</a>		</div>

		<p>Characterizing me as a &quot;complainer&quot; is stupid. &nbsp;I&#39;m not complaining. &nbsp;I&#39;m suggesting to Raymond, for his own information, that he&#39;s sending a wrong message. &nbsp;There&#39;s a difference.</p>
<p>Fact is: with something as complex as lock-free algorithms, there really is no place whatsoever for carelessness.</p>
<p>Hypothetically, knowing nothing else about a person, if that person can&#39;t be trusted to post code that is even consistent with itself, they may not really be a person one would want to trust to help get one&#39;s lock-free algorithms correct. &nbsp;They are hard enough to get right even when one is being careful and methodical in their implementation. &nbsp;Any carelessness or lack of concern for rigorousness is a recipe for disaster.</p>
<p>That all said: &nbsp;I don&#39;t know that one shouldn&#39;t trust Raymond on this stuff, nor do I even have any reason to actually believe that. &nbsp;I&#39;ve worked as a Microsoft employee with him directly in the past (~15 years ago) and he seemed then, and still seems today, a smart, reliable person. &nbsp;But I know that if I didn&#39;t know those things about Raymond already and came across these articles cold, I&#39;d sure think twice before trusting them, given the carelessness applied to the code examples.</p>
<p>As I said, if that&#39;s the image Raymond wants coming across in public, that&#39;s his prerogative. &nbsp;I&#39;m not now, nor will I ever, _complain_ that he&#39;s doing so. &nbsp;I simply offer these comments in the event that Raymond himself would like to reflect on the reality of the situation, and decide for himself whether or not that&#39;s a reality with which he&#39;s comfortable.</p>
<p>I sure hope he understands the point I&#39;m trying to make better than &quot;SomeGuy&quot; and Derek do.</p>
<p>And you guys need not worry: one thing I&#39;m sure of is that Raymond has a strong enough sense of self-worth that nothing I&#39;ve written here is going to affect his decision whether to continue writing this blog or not. &nbsp;In fact, the suggestion that it might is simply ludicrous. &nbsp;Get a grip.</p>
<div class="post">[<i>I appreciate the corrections. But saying &quot;You should at least compile the code&quot; makes no sense when the &quot;code&quot; consists of clearly non-compilable fragments like &quot;newValue = &#8230; calculate the desired new result based on originalValue and other captured values &#8230;&quot; and &quot;InterlockedCompareExchangeXxx&quot;. A better reason for not trusting me with lock-free algorithms is that <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/06/10150261.aspx" rel="nofollow">my first lock-free algorithm was wrong</a>. (And my second <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/08/10151258.aspx" rel="nofollow">wasn&#39;t much better</a>.) As I noted, this is a &quot;taking the toaster apart&quot; series, not a &quot;how to build a toaster&quot; series. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907093">
				<div id="div-comment-907093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907093">
			April 12, 2011 at 4:29 pm</a>		</div>

		<p>@Raymond: &hellip;saying &quot;You should at least compile the code&quot; makes no sense&hellip;</p>
<p>You&#39;re right. &nbsp;That statement makes no sense. &nbsp;But then, I never actually wrote that.</p>
<p>My very first message actually read &quot;post code that comes from something that actually compiled&quot;. &nbsp;In a follow-up, I wrote &quot;ought to at least be copied from code that _does_ compile&quot;.</p>
<p>At no time did I ever claim the code posted should compile as-is.</p>
<p>Perhaps it&#39;s too much to ask that what I write is read according to the words I wrote, rather than making up some other interpretation that makes it sound like I don&#39;t have a clue. &nbsp;If so, I apologize for having ever bothered. &nbsp;Silly me.</p>
<div class="post">[<i>If I took it from code that compiled, I&#39;d have to rename the variables (from their actual names to placeholder names), remove the business logic, clean up what&#39;s left, and by that point it&#39;s more work than just writing the non-compilable code. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907103">
				<div id="div-comment-907103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907103">
			April 12, 2011 at 4:37 pm</a>		</div>

		<p>With how difficult this topic is in the first place, the people who are likely to get anything out of it are the ones who can infer the &#8230;s and the Xxxs in the code. I also think that this kind of thing isn&#39;t copy pastable is a good thing, since if you can&#39;t write the code yourself, then introducing it into a codebase is the worst thing you can do. All you would end up is adding a pile of code that nobody understands and is too afraid to touch just in case it breaks.</p>
<p>I&#39;ve found the entire series really good. They have been a really informative few posts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907113">
				<div id="div-comment-907113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907113">
			April 12, 2011 at 7:37 pm</a>		</div>

		<p>I had this variable that was a public global in a .NET Class. A maintenance programmer was doing code cleanup and mechanically converted it to a property. I told him to change it back.</p>
<p>Calling InterlockedIncrement on a property compiles. The resulting code is not interlocked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907123">
				<div id="div-comment-907123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907123">
			April 12, 2011 at 7:59 pm</a>		</div>

		<p>&quot;Calling InterlockedIncrement on a property compiles. The resulting code is not interlocked.&quot;</p>
<p>Accessing the variable via a class field isn&#39;t interlocked either. The property the maintenance programmer changed it to was equivalent.</p>
<p>In fact, had you left the change to a property, that would have allowed for encapsulating in a single place whatever thread safety you needed in the property code. &nbsp;As a field, all the accessing code has to be fixed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907133">
				<div id="div-comment-907133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907133">
			April 13, 2011 at 12:37 am</a>		</div>

		<p>&quot;Calling InterlockedIncrement on a property compiles. The resulting code is not interlocked.&quot;</p>
<p>How does it compile? It certainly doesn&#39;t compile in C# ! You need to pass the variable by reference, which isn&#39;t possible for properties in C#. So if you aren&#39;t using C# you maybe should review if the language you are using is a good choice for lock-free algorithms &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907143">
				<div id="div-comment-907143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907143">
			April 13, 2011 at 1:38 am</a>		</div>

		<p>And no, I have no idea how I overlooked the clearly erroneous claim that &quot;calling InterlockedIncrement on a property compiles&quot;. &nbsp;Reading it now, it&#39;s a statement that is completely different from whatever I read it as before. &nbsp;Mea culpa.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907163">
				<div id="div-comment-907163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Not Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907163">
			April 13, 2011 at 3:18 am</a>		</div>

		<p>@pete.d: I would imagine the type of developer that actually considers using a lock-free algorithm, let alone knowing that such a thing exists, would be smart enough to be able to correct the misnamed variables themselves.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907263">
				<div id="div-comment-907263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">doug.kavendek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907263">
			April 13, 2011 at 8:19 am</a>		</div>

		<p>pete.d, you sound like loads of fun. &nbsp;Personally, this off-topic ranting is a lot more distracting than a mis-named variable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907273">
				<div id="div-comment-907273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907273">
			April 13, 2011 at 8:24 am</a>		</div>

		<p>Sorry, pete.d but you can call InterlockedIncrement on a class-level variable thanks to byref. The vb.net compiler will also allow passing a property byref and generate code that reads the property into a local variable, passes the local variable byref, and assigns the result to the property.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907353">
				<div id="div-comment-907353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907353">
			April 13, 2011 at 1:36 pm</a>		</div>

		<p>I&#39;m running these examples through my head and have a question: isn&#39;t there still a possibility of a deadly embrace scenerio where one thread acquires a resource but is switched out for another thread that acquires the same resource (which is in turn switched out&#8230;?) Wouldn&#39;t the acquisition check at the end of the try/commit/try again continually fail, or am I missing something?</p>
<p>@pete.d: Sometimes the examples in this blog are meant solely to show how an algorithm works: in other words, they&#39;re written in pseudocode! I appreciate this because it means that I don&#39;t have to spend extra work separating the non-essentials from the essentials; it may be &quot;lazy&quot; coding but I don&#39;t mind because it allows me to be &quot;lazy&quot; too.</p>
<div class="post">[<i>The The acquisition check fails if some other thread made progress, so you can&#39;t get stuck here forever because progress is made (by <span style="text-decoration:underline;">somebody</span></i>) at each iteration. -Raymond<i></i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907233">
				<div id="div-comment-907233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907233">
			April 13, 2011 at 7:35 am</a>		</div>

		<p>@everyone who posted essentially this same sentiment (assuming it&#39;s really more than one person): &quot;I would imagine the type of developer that actually considers using a lock-free algorithm, let alone knowing that such a thing exists, would be smart enough to be able to correct the misnamed variables themselves.&quot;</p>
<p>That&#39;s a completely illogical way of thinking. &nbsp;Following that kind of reasoning, the type of developer that actually considers using a lock-free algorithm can figure it out all by their lonesome, without help from Raymond or anyone else. &nbsp;Why bother with the articles at all then?</p>
<p>I get Raymond&#39;s reply. &nbsp;The upshot of his explanation is basically simply that he&#39;s lazy, pedagogically speaking, and frankly that&#39;s his prerogative (as I already said). &nbsp;He doesn&#39;t want to bother starting from real code (*) to ensure that what he posts is actually valid (in any sense of the word, whether we&#39;re talking just about compiling the code, or even about getting it to do what it&#39;s supposed to). &nbsp;I admit, that takes time, and for someone who wants to post an article a day and still has a real job, I guess that&#39;s just too much trouble.</p>
<p>(*) (note that I never said the code should be production code…just that it should exist as real code…the reluctance to rename contents of production code is simply a proxy for not wanting to bother writing a proper, standalone code example in the first place)</p>
<p>But for the readers of the blog to make these foolish rationalizations? &nbsp;That&#39;s silly. &nbsp;There&#39;s no educational justification for the carelessness, and any argument that relies on the prior knowledge or skill of the person supposedly being educated falls flat. &nbsp;The fact is, the effectiveness of the article is limited by the accuracy of its contents, regardless of the audience. &nbsp;It&#39;s true that the smarter the audience, the less important correctness is. &nbsp;But it&#39;s also true that the smarter one is relying on one&#39;s audience to be, the less that audience really needs the article in the first place. &nbsp;You don&#39;t get one without the other.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907403">
				<div id="div-comment-907403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907403">
			April 13, 2011 at 6:22 pm</a>		</div>

		<p>@Joshua: &quot;Sorry, pete.d but you can call InterlockedIncrement on a class-level variable thanks to byref. The vb.net compiler will also allow passing a property byref and generate code that reads the property into a local variable, passes the local variable byref, and assigns the result to the property.&quot;</p>
<p>Ah, okay. &nbsp;Yet another example of VB.NET going to extra trouble to allow you to do something you shouldn&#39;t be doing in the first place. &nbsp;Though, I wouldn&#39;t be surprised if that feature existed as a backward-compat thing (i.e. I&#39;m sure they do have a good reason for the feature…doesn&#39;t mean I have to like it though).</p>
<p>Not that I have anything against VB.NET personally, but I&#39;ll stick with C#, thank you very much.</p>
<p>@doug.kavendek:</p>
<p>&quot;Ranting&quot;? &nbsp;Give me a break. &nbsp;If it weren&#39;t for all the suck-ups trying to defend the indefensible, there wouldn&#39;t even be a discussion on the issue I raised, and the truth is I acknowledged Raymond&#39;s explanation and respect his position on the question, even if it&#39;s not the choice I&#39;d make. &nbsp;That&#39;s pretty much the opposite of a rant.</p>
<p>As for being &quot;fun&quot;, well…for some odd reason, entertaining the lot of you wasn&#39;t ever something I was worried about. &nbsp;I can be &quot;fun&quot; when it&#39;s time for being fun, and a pain in the ass when people around me are acting like idiots.</p>
<p>See if you can guess which mode I&#39;ve been in here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907553">
				<div id="div-comment-907553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110412-00/?p=10963#comment-907553">
			April 14, 2011 at 2:37 pm</a>		</div>

		<p>I wasn&#39;t aware that being a pain in the ass on teh internets was something to aspire to, you should be proud.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>