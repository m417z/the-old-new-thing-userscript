<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-442383">
				<div id="div-comment-442383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-442383">
			November 14, 2006 at 12:30 pm</a>		</div>

		<p>I don&#8217;t normally complain about documentation but here it would have been pretty helpful to know that blitting from a monochrome DC to a colour one could be recoloured by setting the background and text colours of the destination DC. That information isn&#8217;t in MSDN, and I must have missed it when reading your blog. It isn&#8217;t even particularly clear from your linked article.</p>
<p>Indeed, the naive expectation would be that it would use the original colours, i.e. white and black in the monochrome DC would be white and black in the destination DC. I&#8217;ll have to test it out on CE to see whether this bug was replicated over there ;)</p>
<div class=post>[<i>I got the information from <a href="http://msdn.microsoft.com/archive/en-us/dnargdi/html/msdn_transblt.asp" rel="nofollow">this MSDN article</a>. It&#8217;s also mentioned incidentally in SetBkColor and SetTextColor. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-442733">
				<div id="div-comment-442733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob Gray</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-442733">
			November 15, 2006 at 2:49 am</a>		</div>

		<p>This may be slightly offtopic:</p>
<p>If you were making some graphics-intensive win32 application, and had to use GDI/GDI+, would it be faster to perform things like alpha blended blits using GDI operations as you show here, or write some optimized code that does it all in one go and then displays the end result?</p>
<p>Can GDI(+) take advantage of hardware accellerated 2d operations (and do any modern graphics chips even support that nowadays :))?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-442873">
				<div id="div-comment-442873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-442873">
			November 15, 2006 at 12:12 pm</a>		</div>

		<p>Bob Gray: 2D accelerated operations are still around, but most modern graphics chips only support either 2D or 3D acceleration being enabled at one time. If, on Windows Vista, the Aero environment is currently turned on, the window surfaces (which are textures applied to the 3D model) are rendered in software with no 2D acceleration.</p>
<p>GDI 2D acceleration is a back-and-forth process, where the device driver can register a function with GDI for performing particular operations. However, if it turns out that the requested operation is too complex, the driver can call back into GDI for GDI to perform part of the processing; GDI will then call back into the driver for suboperations of the main task. For example, the driver might register a callback with GDI for drawing a path, but it might only support simple paths. If GDI passes a complex path, the driver calls back into GDI, which then calls the driver to perform the next step of processing (which might be a textured line segment, for example).</p>
<p>ClearType text rendering is, I suspect, all done by GDI &#8211; I don&#8217;t think 2D hardware is programmable enough to support the determination of the correct colours. The right colour for a pixel to get subpixel rendering right depends on both foreground and background colour, so you&#8217;d have to read back what the background colour is at that point.</p>
<p>Depending on how the hardware and driver work, it might be quicker to work on the image in RAM rather than constantly transferring operations and data to the graphics card and having them processed there, and potentially having to transfer results back to the CPU. It depends whether the improvement in rendering time offsets the latency of getting data to and from the device.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-442883">
				<div id="div-comment-442883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-442883">
			November 15, 2006 at 12:13 pm</a>		</div>

		<p>Annoyingly, the documentation for StretchBlt does in fact document the use of text and background colours, and did back in the October 2001 MSDN Library too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-442983">
				<div id="div-comment-442983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-442983">
			November 15, 2006 at 4:23 pm</a>		</div>

		<p>Mike, I&#8217;m not so sure that the hardware won&#8217;t support 2D and 3D acceleration at the same time.</p>
<p>This may not be using the card&#8217;s 2D acceleration features, but the Linux nvidia drivers have a RenderAccel option to turn on acceleration of 2D stuff (the X11 &quot;RENDER&quot; extension). &nbsp;I don&#8217;t know if this uses the card&#8217;s 2D acceleration or not, but since it&#8217;s there, and it is faster for some RENDER operations, I would assume it does.</p>
<p>This option can be turned on at the same time as hardware OpenGL support. &nbsp;And it even (seems to) work &#8212; I can run a (non-fullscreen) OpenGL program alongside a program using the RENDER extension, and as far as I can tell, they both get accelerated.</p>
<p>Now maybe this depends more on the driver than the hardware. &nbsp;It would also depend on the target of the 2D operations, which may explain why Aero does what you&#8217;re seeing. &nbsp;Rendering OpenGL stuff to a texture hasn&#8217;t been well supported until very recently in nvidia&#8217;s driver (if it even works now; I guess I&#8217;m not sure whether it does), and the GLX texture_from_pixmap extension (to get the card to build an OpenGL texture from the contents of a window) is also quite new.</p>
<p>In short: just because you can&#8217;t get the card to accelerate building a texture from a set of 2D operations doesn&#8217;t necessarily mean the card can&#8217;t do 2D and 3D acceleration at the same time. &nbsp;I don&#8217;t know for sure that it can, though, either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-442853">
				<div id="div-comment-442853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-442853">
			November 15, 2006 at 11:56 am</a>		</div>

		<p>&#8220;The background color is also used when converting bitmaps from color to monochrome and vice versa.&#8221; &#8220;The text color is also used in converting bitmaps from color to monochrome and vice versa.&#8221; That&#8217;s not exactly clear as to what happens. </p>
<p>As for the other article you linked to, it&#8217;s in the archive section, it dates from 1992 and isn&#8217;t in the offline copy of MSDN Library from October 2001 that I would have been using when I originally wrote it (in 2002). A common problem with MSDN is not so much that the information isn&#8217;t there, it&#8217;s that you don&#8217;t know that it&#8217;s there. I say this as someone who has a pretty good memory, has thoroughly read &#8220;Programming Windows, Fifth Edition&#8221;, &#8220;Programming Applications for Windows, Fourth Edition&#8221;, &#8220;Programming Server-Side Applications for Windows&#8221;, &#8220;Windows Internals, Fourth Edition&#8221;, and used to read every issue of MSDN Magazine. Since I started my Windows programming career around 1999-2000, I simply didn&#8217;t see that article. I wouldn&#8217;t have described what I was doing as &#8216;transparency&#8217; anyway, since I&#8217;m (potentially) changing *both* colours.</p>
<p>I realise there&#8217;s a hard trade-off: you can&#8217;t link to every possible article that uses a given API, you have to be selective. I&#8217;d still classify this as &#8216;obscure&#8217; and add some documentation to BitBlt (and presumably StretchBlt) to the effect that the current text and background colours are used when blitting a monochrome bitmap to a colour DC.</p>
<div class="post">[<i>Monochrome/color conversion is also mentioned in the documentation of the BITMAP structure. I&#8217;m still not sure where the best place for this information is. Having to mention it in every Blt function is fragile. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-443143">
				<div id="div-comment-443143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-443143">
			November 16, 2006 at 12:10 pm</a>		</div>

		<p>Well, whaddyaknow, it works on CE too. Thanks, that saves creating a couple of brushes and having to select one of them into the screen DC (which up until very recently was leaking a brush on every paint because I forgot to deselect it before deleting it and the DC &#8211; this code is double-buffered), and having to change brushes to change colours. Also saves having to explain a really obscure ternary raster op code.</p>
<p>Now to have the argument about whether it&#8217;s worth making the change&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>