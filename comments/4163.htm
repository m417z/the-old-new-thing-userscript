<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1059983">
				<div id="div-comment-1059983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1059983">
			June 5, 2013 at 7:54 am</a>		</div>

		<p>I&#39;m confused. &nbsp;16-bit Windows was co&ouml;peratively multi-tasked, so how can thread B retrieve the next message if thread A is still busy?</p>
<p>Thread A can yield control by calling GetMessage or SendMessage but in both of these cases the algorithm explicitly unblocks the input queue.</p>
<p>Under what circumstance can thread B be executing yet fail to retrieve an input message because thread A is still busy processing one?</p>
<div class="post">[<em>If you call <code>PeekMessage</code> with a filter that excludes all input, then the &quot;retrieve messages from the input queue&quot; code is never entered and the input queue remains locked. I didn&#39;t make that part clear in the article, sorry. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1059993">
				<div id="div-comment-1059993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1059993">
			June 5, 2013 at 8:12 am</a>		</div>

		<p>@laonianren: When ThreadA explicitly calls Yield() periodically while performing a computing intensive task in order to be nice to the rest of the system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060023">
				<div id="div-comment-1060023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060023">
			June 5, 2013 at 9:47 am</a>		</div>

		<p>&gt; Why does the actual rule permit any thread clear the wait state, instead of first checking that the inbound SendÂ­Message is coming from the thread that the input queue is waiting for? </p>
<p>As long as you have absolutely no follow-up questions, I would answer: &quot;to avoid deadlock?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060033">
				<div id="div-comment-1060033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060033">
			June 5, 2013 at 10:30 am</a>		</div>

		<p>@foo, yes, but a specific deadlock.</p>
<p>If you&#39;re processing a sent message that made you enter a modal dialog or pop-up menu, you have to handle input messages. You can only handle them if PeekMessage or GetMessage get input messages within SendMessage, or more properly, within the not-yet-finished processing of a sent message.</p>
<p>Otherwise, the modal dialog or pop-up menu would not react to input. If you require user action to close a modal dialog or pop-up menu (Esc, the X button, selecting a menu item, a shortcut, etc), then your application would freeze.</p>
<p>However, the OS would not freeze, you&#39;re yielding at PeekMessage or GetMessage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060053">
				<div id="div-comment-1060053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060053">
			June 5, 2013 at 5:40 pm</a>		</div>

		<p>C# 5&#39;s new asynchrony keywords hypothetically make it possible to launch modal dialog boxes without a blocking nested message loop. For instance, you could do something like this:</p>
<p>var result = await MessageBox.ShowAsync(&#8230;);</p>
<p>My only question is, why isn&#39;t the WPF team looking into things like this?</p>
<div class="post">[<em>Not really. The MessageBox class will still presumably have a window procedure, and if a message handler wants to await something, it will have to capture a continuation which includes a foreign stack, which violates the <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/09/10/10347674.aspx">everybody needs to be in on the joke</a> rule. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060063">
				<div id="div-comment-1060063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/bc_5F00_programming_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>bc_programming@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060063">
			June 5, 2013 at 10:50 pm</a>		</div>

		<p>Joshua: It is my understanding that async/await is merely a task-based implementation of threading that generates a state machine at compile-time, and that UI operations (such as msgbox) usually are performed on the main thread. At least, that is true for Win32 and Windows Forms, as far as I&#39;m aware. WPF may have changed this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060073">
				<div id="div-comment-1060073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jerome</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060073">
			June 6, 2013 at 12:10 am</a>		</div>

		<p>@Michael Burgwin</p>
<p>Joshua&#39;s argument still holds. There&#39;s nothing stopping you implementing your &quot;asynchronous wait&quot; however you like, wrapping Show or ShowDialog, and then when you&#39;re done, switch back to the GUI ExecutionContext (via an abstraction using TaskSchedulers). At the end, it will just end up doing a PostMessage back to the GUI thread of course, but along the way you can be on the ThreadPool, or using your own threads, however you implement it. I&#39;ve done something similar in Winforms.</p>
<p>Not sure how relevant this is though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060083">
				<div id="div-comment-1060083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jerome</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060083">
			June 6, 2013 at 12:16 am</a>		</div>

		<p>Oops. Writing nonsense&#8230; ExecutionContext should have been SynchronizationContext</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060093">
				<div id="div-comment-1060093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060093">
			June 6, 2013 at 3:38 am</a>		</div>

		<p>Let&#39;s say that we&#39;re running Win16, and applications A and B use libraries L and M respectively that create windows W and X respectively that handle private messages. Since we know the message is private, both libraries used WM_USERFIRST for the message number. Now if library L tries to peek for WM_USERFIRST in window W, application A will actually yield to application B because library M previously posted a WM_USERFIRST message to window X. If instead the libraries had used registered (i.e. different) window messages then this wouldn&#39;t have happened. Subtle!</p>
<div class="post">[<em>Not sure what you&#39;re getting at here. WM_USER is not an input message so the input queue code never runs. If Library L tries to peek for a message for window W, it may or may not yield to window X (depending on PM_NOYIELD), but the message number is irrelevant. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060103">
				<div id="div-comment-1060103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Allgaeuer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060103">
			June 6, 2013 at 4:22 am</a>		</div>

		<p>I don&#39;t understand why the addition of the message range filter to the algorithm is in consistent with the goal of serializing input.</p>
<p>Suppose we have Thread A and Thread B. They are attached. In the input queue, there is Message 1(Addressed to Thread A and of Type X), Message 2(Addressed to Thread B and of Type X) and Message 3(Headed to Thread A and of Type Y).</p>
<p>Now Thread A asks of a new Message of Type Y.</p>
<p>The algorithm will check Message 1 =&gt; wrong Type. Message 2 =&gt; Wrong address. Message 3 =&gt; BINGO.</p>
<p>Now the algorithm will check if the message belongs to some other thread: Nope!</p>
<p>The message will be returned.</p>
<p>In this case, Thread A bypasses Message 2 for Thread B.</p>
<p>Shouldn&rsquo;t the &quot;either belongs to some other thread or belongs to the current thread and&quot; added already at the point of adding the message range filter to the algorithm?</p>
<div class="post">[<em>This is okay because thread A said, &quot;Ignore messages of type X. I&#39;m interested only in messages of type Y, even if there is a message of type X that is higher priority.&quot; (This happens a lot. For example, peeking ahead to see if the ESC key has been pressed while processing a mouse drag operation. It is the way you &quot;peek into the future&quot;.) The serialization then occurs only among messages of type Y. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060133">
				<div id="div-comment-1060133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060133">
			June 6, 2013 at 8:19 am</a>		</div>

		<p>Hmmm. Who is this other Joshua. I don&#39;t know a way to do it for MessageBox, but for all other modal dialogs, CreateDialogBox can launch them without stacking a second message loop.</p>
<div class="post">[<em>There is no second message loop, but there is a second message procedure and therefore some frames out of your control if you decide to go async inside a message handler. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060203">
				<div id="div-comment-1060203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060203">
			June 6, 2013 at 2:50 pm</a>		</div>

		<p>&gt; Why does the actual rule permit any thread clear the wait state</p>
<p>To avoid a deadlock that involves another thread that in response to the first send message sends a message to a 3rd thread.</p>
<p>Why isn&#39;t this rule revised for 32-bit? Shouldn&#39;t the state change happen when SendMessage is called?</p>
<div class="post">[<em>The case of the forwarded message is the deadlock I had in mind. What if you are sending a message to another thread and that thread does <span style="text-decoration:underline;">not</span> request input? For example, you may simply have sent <code>LB_ADDSTRING</code> to add an item to a list box. You don&#39;t want to clear the input state yet. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060213">
				<div id="div-comment-1060213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060213">
			June 6, 2013 at 3:35 pm</a>		</div>

		<p>&gt; You don&#39;t want to clear the input state yet</p>
<p>But do I want to clear the input state if the sent message was sent by a thread that not related and does not share the same input queue?</p>
<div class="post">[<em>If it doesn&#39;t share the same input queue, then your queue is (probably) not locked, so the unlock is harmless. Yes, there is a small hole here, but the question is whether closing it is worth the complexity and introducing a <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/09/13/10348876.aspx">silent breaking change</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060243">
				<div id="div-comment-1060243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060243">
			June 7, 2013 at 3:25 am</a>		</div>

		<p>Sorry, I had failed to make the distinction of the input queue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060463">
				<div id="div-comment-1060463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060463">
			June 10, 2013 at 10:43 am</a>		</div>

		<p>I am missing some info. Can anyone please correct me?</p>
<p>But If one thread includes a message filter and chooses to see only selected messages, Will it block other threads while leaving unprocessed messages? Using this algorithm &quot;Look at the first message in the input queue and If the message belongs to some other thread, then stop. Return no message to the caller.&quot; . The other threads without a message filter always see the unprocessed message that is addressed to the thread which has a filter in the front of the queue.</p>
<div class="post">[<em>This is exactly the subject of <a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/06/10424006.aspx">tomorrow&#39;s article</a>, alluded to at the end of the article. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>