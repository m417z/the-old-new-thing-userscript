<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-988473">
				<div id="div-comment-988473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988473">
			May 31, 2012 at 8:14 am</a>		</div>

		<p>I&#39;d say that thread timers not accepting the passed-in ID for thread timers in CreateTimer was a mistake, but that&#39;s set in concrete now.</p>
<div class="post">[<i>It does accept the passed-in ID. You use it to reset an existing thread timer. This is called out in the SetTimer documentation. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988483">
				<div id="div-comment-988483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Guillaume</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988483">
			May 31, 2012 at 8:14 am</a>		</div>

		<p>&quot;Someone else&#39;s timer&quot; ? Even thread timers that are in another process (owned by the same user) ? That could be an interesting fault injection scenario !</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988503">
				<div id="div-comment-988503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988503">
			May 31, 2012 at 9:44 am</a>		</div>

		<p>[It does accept the passed-in ID. You use it to reset an existing thread timer. This is called out in the SetTimer documentation. -Raymond]</p>
<p>Yes, but it would be much better if error/null is returned in case of HWND_NULL/InvalidTimerID are passed. It is a little counterintuitive to provide an ID and get a new one in return. I guess timers were global back then.</p>
<p>PS.</p>
<p>Can&#39;t post using IE8</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988513">
				<div id="div-comment-988513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988513">
			May 31, 2012 at 9:47 am</a>		</div>

		<p>@Matteo Italia 31 May 2012 8:22 AM:</p>
<p>Or when you are running inside somebody else code. (when being library)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988523">
				<div id="div-comment-988523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988523">
			May 31, 2012 at 10:05 am</a>		</div>

		<p>So what&#39;s your proposal? while ( SetTimer( id ) != ERROR_SUCCESS ) ++id;? The point is, when you install a thread timer your code no longer controls which ID&#39;s are in use and which ones aren&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-988533">
				<div id="div-comment-988533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988533">
			May 31, 2012 at 11:00 am</a>		</div>

		<p>Anybody else noticed that Internet Explorer leaks systimers (those that make the carets blink) like crazy? And the carets don&#39;t blink anymore.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988543">
				<div id="div-comment-988543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988543">
			May 31, 2012 at 2:23 pm</a>		</div>

		<p>@alegr1</p>
<p>No. (IE9) Might be caused by third party program/plugin.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-odd thread-alt depth-1" id="comment-988493">
				<div id="div-comment-988493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988493">
			May 31, 2012 at 8:22 am</a>		</div>

		<p>@Guillaume: if you pass NULL to SetTimer/KillTimer you create/destroy a thread timer *of the current thread*, so there&#39;s no way you could destroy inadvertently a timer of another process; the scenario Raymond is talking about is when you are sharing your thread with code you don&#39;t wrote (e.g. a third party library/component/&#8230; that your code uses) that happens to use a thread timer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988553">
				<div id="div-comment-988553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988553">
			May 31, 2012 at 5:58 pm</a>		</div>

		<blockquote><p>
  That&#39;s exactly the information we were looking for. Thanks.
</p></blockquote>
<p>This sounds worryingly like &quot;So someone else&#39;s app crashes rather than ours. Thanks, we can safely ignore the problem&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988563">
				<div id="div-comment-988563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988563">
			May 31, 2012 at 6:29 pm</a>		</div>

		<p>Dave: It sounds to me like it will only crash their own app &#8212; assuming that their app uses thread timers, which I&#39;m guessing they actually don&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988573">
				<div id="div-comment-988573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988573">
			May 31, 2012 at 8:18 pm</a>		</div>

		<p>Well, technically all the information they needed was in the MSDN pages for SetTimer and KillTimer. Must say though that I couldn&#39;t have thought up a more oblique way of stating it all.</p>
<p>Also, the way SetTimer reacts to the id parameter is bad design. Either you want a new id, or you want to modify an existing id. In the first case if the id isn&#39;t zero, then the caller thinks we&#39;re in the second case, so the function should throw an exception because a bug has just been discovered.</p>
<p>Gabe, if the past is any predictor for the future, one day they will call some library that creates some thread timers behind the curtains.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988593">
				<div id="div-comment-988593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988593">
			June 1, 2012 at 3:56 am</a>		</div>

		<p>&gt;&gt;&gt; So what&#39;s your proposal? while ( SetTimer( id ) != ERROR_SUCCESS ) ++id;? The point is, when you install a thread timer your code no longer controls which ID&#39;s are in use and which ones aren&#39;t.</p>
<p>Exactly, if I *install* a timer then I don&#39;t know the ID so passing an ID should fail. In other words, to *create* a timer one should call SetTimer(0, 0) and calling SetTimer(0, InvalidID) should fail. You can still hit another timer accidentally but at least it won&#39;t leak.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988813">
				<div id="div-comment-988813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988813">
			June 3, 2012 at 12:56 am</a>		</div>

		<p>&quot;somebody else&#39;s timer&quot; -&gt; A timer in *your* process. Not somebody else&#39;s timer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988973">
				<div id="div-comment-988973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-988973">
			June 4, 2012 at 7:38 pm</a>		</div>

		<p>640k, that assumes that all timers in your process are yours. In practice they may not be since other code that you interface with may under the covers create timers of which you&#39;re unaware.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-989123">
				<div id="div-comment-989123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Manuel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-989123">
			June 5, 2012 at 10:06 am</a>		</div>

		<p>Actually, every process has an OWNER. Which usually isn&#39;t the developer who wrote the code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-989243">
				<div id="div-comment-989243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Manuel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120531-00/?p=7493#comment-989243">
			June 6, 2012 at 12:34 am</a>		</div>

		<p>So what? A soon as you host a common control in your dialog (for example, the progress bar or sysanimate32) or if you use the predefined dialogs for Open/Save/Printer Selection, you can have &quot;unwanted&quot; timers in your process. Many of them. Hopefully, they are all bound to some private window belonging to the control, and not to the thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>