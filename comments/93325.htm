<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (38)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1244575">
				<div id="div-comment-1244575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jonimoose.net' rel='external nofollow' class='url'>Jon</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244575">
			April 20, 2016 at 8:12 am</a>		</div>

		<p>It appears the code from scroll window under mouse is at least there in Windows 8.1 as you can activate the functionality via a registry edit. Sadly it does not appear to behave correctly with applications that are not DPI aware so on high resolution monitors you can only scroll while in the upper left corner of the window, I haven&#8217;t been able to test if this is solved in Windows 10 but it has meant that I am still relying on 3rd party solutions for this functionality in Windows 8.1</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1244585">
				<div id="div-comment-1244585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244585">
			April 20, 2016 at 8:15 am</a>		</div>

		<p>Wow, interesting. I read your intro and Douglas&#8217; original comment, and thought, well, having the input event go to the window with focus sounds like the right thing to do. I mean, that&#8217;s what focus is for. It sounds like what Douglas actually wants is for the scroll event to switch-focus-and-scroll, in the same manner that left-click event does switch-focus-and-click. (Either that, or Douglas wants focus-follows-mouse.) The current behaviour may have been dictated by history, but it seems to me to be the right behaviour anyway.</p>
<p>So there I was, about to stick up for the status quo, when with your final line, you mention that this is being fixed![0] I was not expecting that. I guess Douglas will be happy, but it still seems like strange behaviour to a (completely unaffected by the change) focus-follows-mouse user like me.</p>
<p>[0] For suitable values of &#8220;fixed&#8221; :-)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1244616">
				<div id="div-comment-1244616" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://cpjsmith.uk' rel='external nofollow' class='url'>Smithers</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244616">
			April 20, 2016 at 9:09 am</a>		</div>

		<p>I rather prefer the Douglas-approved behaviour, for two reasons. Firstly, as he says, things done with the mouse usually happen according to where the mouse is; things done with the keyboard happen according to focus. (Although the guy at the desk next to mine has a keyboard with a scroll wheel in it, but that&#8217;s just adding confusion.)</p>
<p>Secondly, I find this behaviour quite useful. I often find myself editing in one window (say, a text editor or IDE) according to something I&#8217;m reading in another window (browser showing feature requirements or a protocol specification). It&#8217;s quite handy to leave the focus on the document I&#8217;m typing in, but leave the mouse cursor hanging over the other window for when I need to scroll through it.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1244897">
				<div id="div-comment-1244897" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244897">
			April 21, 2016 at 5:34 am</a>		</div>

		<p>&#8220;things done with the mouse usually happen according to where the mouse is&#8221;</p>
<p>As I wrote, I don&#8217;t agree with this interpretation of the events that actually happen. In my experience, things done with the mouse usually happen according to where the focus is, with the caveat that things done with the mouse *first set focus to where the mouse is*, and then happen according to where the focus is. If scrolling with the mouse followed these rules, that would seem to fix Douglas&#8217; use-case, and be more consistent with other mouse behaviour.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1244816">
				<div id="div-comment-1244816" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244816">
			April 20, 2016 at 10:13 pm</a>		</div>

		<p>You can turn it off or on in Windows 10 using the &#8216;Mouse &amp; Touchpad&#8217; setting &#8216;Scroll inactive windows when I hover over them&#8217; :)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-entegygmail-com odd alt thread-even depth-1" id="comment-1244586">
				<div id="div-comment-1244586" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Entegy' rel='external nofollow' class='url'>Entegy</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244586">
			April 20, 2016 at 8:57 am</a>		</div>

		<p>I wonder what apps did break with the changes in Windows 10. That said, I love the change. Scrolling inactive windows is great for when you&#8217;re comparing objects in two windows side by side. (or 4 by 4 now in Windows 10 ;))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1244587">
				<div id="div-comment-1244587" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://cpjsmith.uk' rel='external nofollow' class='url'>Smithers</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244587">
			April 20, 2016 at 8:58 am</a>		</div>

		<p>I&#8217;m glad to hear that there&#8217;s at least some reason for this, as it&#8217;s been annoying me ever since I returned to sometimes using Windows after using exclusively Ubuntu for a couple of years. (Ubuntu [at least with the default GNOME/Unity interface] always scrolls whatever is under the mouse cursor, as Douglas desires.)</p>
<p>What I also find interesting is the way different applications in Windows respond to this. If Command Prompt has the focus, it scrolls no matter where the cursor is. If Visual Studio has the focus, it directs the scroll to whichever part of itself (source editor, output window etc.) the cursor lies over. Outlook follows Visual Studio&#8217;s lead if the cursor is over the window, but falls back to scrolling the panel with keyboard focus if the mouse is elsewhere.</p>
<p>Most interesting of all is Notepad++. If this application has the focus but the cursor is not over it, it apparently forwards the scroll message to whatever window does have the mouse&#8217;s attention, resulting in another application scrolling without having focus!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1244595">
				<div id="div-comment-1244595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://pianocheetah.com' rel='external nofollow' class='url'>Stephen Hazel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244595">
			April 20, 2016 at 9:01 am</a>		</div>

		<p>yeah that change in windows10 infuriated me.<br />
I like to be able to &#8220;spin&#8221; a numeric edit control up and down.  (focus on edit control, scroll up increases the number, down decreases it.)</p>
<p>but it turns out there&#8217;s a configuration buried in the new control panel to set it back to &#8220;the one right way&#8221;.</p>
<p>don&#8217;t ask me where it is.  I hate going in there.  It&#8217;s so slow with those scrolling dots now.  But it is in there somewhere.</p>
<p>so, yeah, I&#8217;m also infuriated by the control panel making me wait.  why can&#8217;t a control panel app cache everything it needs?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1244825">
				<div id="div-comment-1244825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244825">
			April 20, 2016 at 10:15 pm</a>		</div>

		<p>Windows key, type &#8216;mouse&#8217; click &#8216;Mouse and touchpad settings&#8217;, change setting &#8216;Scroll inactive windows when I hover over them&#8217;. No that deeply buried?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1244605">
				<div id="div-comment-1244605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">creaothceann</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244605">
			April 20, 2016 at 9:05 am</a>		</div>

		<p>Thankfully for us &lt;Win10 users there&#039;s tools like WizMouse that &quot;do the right thing&quot;.</p>
<p>By the way, was there really no other way to deliver information to the program? Off the top of my head, the OS could send several messages or provide a callback.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1244665">
				<div id="div-comment-1244665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244665">
			April 20, 2016 at 9:37 am</a>		</div>

		<p>You missed the part where the original implementation was not in the OS.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1244615">
				<div id="div-comment-1244615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244615">
			April 20, 2016 at 9:06 am</a>		</div>

		<p>The new Win10 behavior has ups and downs. Works well for &#8220;documents&#8221; like web pages, file managers, Word etc. Pain in the ass for &#8220;small&#8221; targets like combo boxes.</p>
<p>Incidentally, some may say that the mouse wheel was the last truly useful thing to come out of Microsoft :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1244626">
				<div id="div-comment-1244626" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VIMH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244626">
			April 20, 2016 at 9:19 am</a>		</div>

		<p>As always, a very interesting read.</p>
<p>I could have sworn, though, that in some previous setup of mine (I want to say it was in the Windows 95/98/98SE/Me series) that the scroll wheel DID scroll the control that was under the cursor.  I remember it being frustrating when I realized it no longer worked that way, but I can&#8217;t recall when that transition happened.</p>
<p>It *may* have been a function of a utility I bought called Flywheel back in the Windows 95 days that enabled mouse scrolling functionality in any program (back when, as you said, support wasn&#8217;t baked in)&#8230; but, I honestly thought it was much later than that era when it worked.  I wish I could remember, now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1244635">
				<div id="div-comment-1244635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244635">
			April 20, 2016 at 9:27 am</a>		</div>

		<p>I bought what was probably the first wheel mouse on the market (Genius EasyScroll), which came with it&#8217;s own software that delivered wheel messages to the window under pointer (and the same thing happened with every Genius mouse driver until around 2000). Once I switched to a non-Genius mouse, I was quite annoyed that scrolling under pointer no longer worked (and that there was no support for Alt+Tab with side button+wheel) &#8211; at first I used various programs I found around the internet, and then I ended up writing an AutoHotKey script that does this: <a href="https://eternallybored.org/misc/AHK/" rel="nofollow">https://eternallybored.org/misc/AHK/</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao even depth-2" id="comment-1244756">
				<div id="div-comment-1244756" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244756">
			April 20, 2016 at 12:52 pm</a>		</div>

		<p>Of course, Genius probably didn&#8217;t care about modifier keys.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1244655">
				<div id="div-comment-1244655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244655">
			April 20, 2016 at 9:35 am</a>		</div>

		<p>It is really hard to imagine that the original purpose of adding the wheel to the mouse would be to enable zooming. Was the MS Hardware team just always in CAD or something and constantly needed to zoom, and figured that everybody else must need that feature too? While I do use Ctrl+Wheel on occasion and have found it useful, I despise web sites that somehow capture the wheel event to make it zoom instead. (And I can&#8217;t for the life of me figure out why any sane browser would expose that event to the underlying pages for them to manipulate, but I digress.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1244765">
				<div id="div-comment-1244765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Max</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244765">
			April 20, 2016 at 1:03 pm</a>		</div>

		<p>It makes some sense. If someone is using a zoom-heavy application, they usually want to zoom on a specific location or point that&#8217;s already in view, so a zooming interaction that doesn&#8217;t rely on moving the mouse cursor to click on a &#8220;Zoom&#8221; button is a big boost in usability &#8211; it grants much more potential for control over where the zoom is centered. On the other hand, when you scroll you want to see something different, so being able to scroll without moving your mouse doesn&#8217;t grant anywhere near that same level of benefit as being able to zoom without moving the mouse. Of course, zooming could always be implemented via a keyboard command or separate tool option, so the addition of a new input method for zooming wasn&#8217;t a critical requirement, but the same is true for scrolling.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt depth-2" id="comment-1244807">
				<div id="div-comment-1244807" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244807">
			April 20, 2016 at 7:47 pm</a>		</div>

		<p><a href="http://web.archive.org/web/20070520061337/http://www.ericmic.com/history%20of%20the%20scroll%20wheel.htm" rel="nofollow">http://web.archive.org/web/20070520061337/http://www.ericmic.com/history%20of%20the%20scroll%20wheel.htm</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1244875">
				<div id="div-comment-1244875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244875">
			April 21, 2016 at 1:16 am</a>		</div>

		<p>Same here. I remember the first scroll wheel mouse I used was a new computer either at work or a university engineering co-op job way back when. At first I thought it would be an obtrusive nuisance, and within a half hour (or less) I was annoyed at vertical scroll bars for the screen pixels they wasted. (Of course scroll bars still have their use for dragging down/up large &#8216;distances&#8217;)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1244885">
				<div id="div-comment-1244885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244885">
			April 21, 2016 at 1:22 am</a>		</div>

		<p>&#8230; and of course they are also good for a visual cue as to how large the document is and the current view position. Actually,  scrollbars are still pretty useful.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1244915">
				<div id="div-comment-1244915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244915">
			April 21, 2016 at 6:49 am</a>		</div>

		<p>Exactly.  Even if I never click and drag on them anymore, I wouldn&#8217;t want to get rid of scroll bars for precisely this reason.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1245185">
				<div id="div-comment-1245185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1245185">
			April 22, 2016 at 1:34 pm</a>		</div>

		<p>If they were not click targets, scroll bars could be quite a bit narrower and still serve the purpose of determining document length and current position.</p>
<p>That said, I quite often drag the scroll thumb to scroll more quickly and precisely than the wheel allows, and I absolutely love the (inconsistently implemented) behavior with which I can drag the scroll thumb to reference another part of a document, then drag outside the bounds to cancel the scroll and snap back to my original position.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1244955">
				<div id="div-comment-1244955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244955">
			April 21, 2016 at 8:47 am</a>		</div>

		<p>&gt; I despise web sites that somehow capture the wheel event to make it zoom instead. (And I can’t for the life of me figure out why any sane browser would expose that event to the underlying pages for them to manipulate, but I digress.)</p>
<p>What websites even do this? The only ones I can think of are maps, and there I think that zooming is *absolutely* the right thing to do, to the point where if the wheel *didn&#8217;t* scroll, those sites would likely be be far more obnoxious.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1245005">
				<div id="div-comment-1245005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1245005">
			April 21, 2016 at 2:26 pm</a>		</div>

		<p>I&#8217;ve seen a few web-apps that do it&#8230; not always maps, but other non-standard widgets where the developer has decided that some sort of zoom behaviour is more appropriate in this app than scrolling would be. Sometimes they&#8217;re right, sometimes not&#8230; it&#8217;s usually acceptable if the app uses a drag-to-scroll model like maps&#8230; not so much if they don&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1245075">
				<div id="div-comment-1245075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1245075">
			April 22, 2016 at 4:59 am</a>		</div>

		<p>No, maps should work like other sites. I want the scrolling the wheel to pan vertically (and tilting the wheel if available to pan horizontally), just like every other application. It&#8217;s frustrating to me every time.</p>
<p>The worst case is when there&#8217;s an embedded map (I often run into it on the weather.gov local forecast page for example), where one is happily scrolling down the page and then it comes to where the map is embedded, and the wheel stops scrolling the page you&#8217;re on and zooms out the embedded map instead. (Bringing this almost back on topic, I guess you could say that it delivers the wheel event to what&#8217;s under the mouse rather than to the document as a whole.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk odd alt thread-even depth-1 parent" id="comment-1244675">
				<div id="div-comment-1244675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244675">
			April 20, 2016 at 9:42 am</a>		</div>

		<p>I always want the wheel to scroll the window that I am LOOKING AT.  The same with keyboard input; it should go to the window I am looking at.  I wonder how far off this kind of thing is, for mainstream adoption&#8230;.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-bboorman even depth-2" id="comment-1244905">
				<div id="div-comment-1244905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244905">
			April 21, 2016 at 6:14 am</a>		</div>

		<p>What if the window that you&#8217;re looking at is not the window with focus and is also not the window the mouse is hovering over? Take my situation &#8211; I have a 4 monitor setup &#8211; code IDE on one, outlook on the second, schematic tool on third and browser on the fourth. Often I lose the mouse and have to wiggle it and scan across the desktop to locate it. Made worse by new-style Office apps that don&#8217;t change title bar color anymore to indicate focus so you have no idea where you&#8217;re keystrokes and mouse events are going after being interrupted by the guy next to you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1244936">
				<div id="div-comment-1244936" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Engywuck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244936">
			April 21, 2016 at 7:59 am</a>		</div>

		<p>The problem would of course be if you look at one window and want to type in another. Say you read a file and want to &#8220;blind write&#8221; keypoints in a new file. Or if you read from a printed sheet of paper and type the text &#8211; which window should the keypresses go to?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-dwalker-wk even depth-3 parent" id="comment-1244965">
				<div id="div-comment-1244965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244965">
			April 21, 2016 at 9:52 am</a>		</div>

		<p>Well, now you are just throwing up obstacles!  </p>
<p>How about, &#8220;the wheel should scroll, or the keyboard should type, into the window that I want it to&#8221;?  That covers everything, and it should be easy to implement.  :-)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1245245">
				<div id="div-comment-1245245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan F</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1245245">
			April 23, 2016 at 7:02 am</a>		</div>

		<p>@DWalker Yes! So many times I&#8217;ve been looking at one window, typing, wondering where my keystrokes are. Or scrolling progressively harder and harder. Please MS. Can you read our minds?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1244975">
				<div id="div-comment-1244975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244975">
			April 21, 2016 at 10:23 am</a>		</div>

		<p>@DWalker: the system &#8220;knows&#8221; which window you&#8217;re looking at by the window that has focus.  Accurately tracking the window that you&#8217;re &#8220;looking&#8221; at would require some sophisticated eye-tracking systems (like the ones used in telemetry to gauge users&#8217; reactions to a new interface).  And even then, what would it do for those people who type while looking at the keyboard?  Where would their keyboard strokes go?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1244705">
				<div id="div-comment-1244705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244705">
			April 20, 2016 at 10:35 am</a>		</div>

		<p>The well-though applications (this category doesn&#8217;t include Windows Explorer) got rid of the old behavior already, independent of Windows version. Visual Studio and Acrobat Reader do this even on Windows 7. Chrome does it for the independent parts of browser window (which may not be real windows).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-1244715">
				<div id="div-comment-1244715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244715">
			April 20, 2016 at 11:14 am</a>		</div>

		<p>&#8220;The historical context is that the mouse wheel in Windows was introduced by the Microsoft Hardware team in 1996. This was not synchronized with an operating system release&#8221;<br />
Interestingly, the IntelliMouse was announced at around the same time as the release of NT4: <a href="http://news.microsoft.com/1996/07/22/microsoft-announces-microsoft-intellimouse/" rel="nofollow">http://news.microsoft.com/1996/07/22/microsoft-announces-microsoft-intellimouse/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1244785">
				<div id="div-comment-1244785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244785">
			April 20, 2016 at 2:22 pm</a>		</div>

		<p>And Kerbal Space Program does in fact use it for zoom as intended. Feels natural too.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1244815">
				<div id="div-comment-1244815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244815">
			April 20, 2016 at 10:01 pm</a>		</div>

		<p>A lot of games do, since the idea of zoom in/out tends to be more important to games than document-style vertical scrolling.</p>
<p>Out of curiosity, how many people have a mouse with a tilt-wheel, and what do you do with it? I just bought a new mouse, and it&#8217;s got one&#8230; but it doesn&#8217;t seem to do anything by default&#8230; I guess it has to be mapped to something?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1244805">
				<div id="div-comment-1244805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244805">
			April 20, 2016 at 7:23 pm</a>		</div>

		<p>This is often an annoyance for people who are used to the common Linux way, where mouse wheel events are delivered to the window under the mouse. But why does the Linux X server deliver events to the window under the mouse? For similarly hacky reasons!</p>
<p>Back then, Linux was often used with three-button mice (the middle button is often &#8220;paste selection&#8221;, or in a web browser, &#8220;open link in new window/tab&#8221;), but the X protocol allowed for five buttons (and in a slightly more limited way, many more buttons). It would have made more sense to treat the scroll wheel as the Z axis, but the protocol only had fields for the X and Y axis. So whoever added mouse wheel support simply mapped it to buttons 4 and 5 (and 6 and 7 if the mouse wheel can scroll sideways; 8 and 9 are the side buttons). The mouse button press/release events already have a field for the currently pressed modifier keys like Ctrl, so their state can be known even without keyboard focus.</p>
<p>Once you think of &#8220;scroll the mouse wheel&#8221; as &#8220;click a mouse button a number of times&#8221;, it&#8217;s clear why it&#8217;s delivered to the window under the mouse, exactly like any other mouse button click. Programs just had to learn to treat &#8220;button 4&#8221; as &#8220;scroll up&#8221; (or zoom if the Ctrl modifier flag is set in the event), and &#8220;button 5&#8221; as &#8220;scroll down&#8221;, and no new event type was needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1244895">
				<div id="div-comment-1244895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dox.com.au' rel='external nofollow' class='url'>Ian Yates</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244895">
			April 21, 2016 at 2:25 am</a>		</div>

		<p>I&#8217;m running Win 8.1 and tried this quickly.<br />
I have Chrome on one side of my screen and LinqPad on the other.<br />
If Chrome has keyboard focus, I can mouse over Chrome and scroll Chrome, but mousing over LinqPad scrolls neither app.<br />
If LinqPad has keyboard focus, then I can mouse over Chrome and scroll Chrome, and mouse over LinqPad and scroll LinqPad, and mousing over the bits of the desktop I can see with a scroll makes no change in either app.</p>
<p>Curious behaviour I hadn&#8217;t noticed.  I like the history lesson.  When a customer, or a new programmer, asks why something in our software is the way it is, I like to give the background and history, why we&#8217;ve preserved backwards compatibility but evolved it over time, etc &#8211; often inspired by these articles.  Of course, some people don&#8217;t appreciate it, but for those that do, they *really* appreciate the extra knowledge and I get kudos for really considering changes in our software rather than just breaking backwards compatibility all over the place  (or at least that&#8217;s how I like to see it!)</p>
<p>(just tested &#8211; IE 11 behaves the same way as Chrome).  </p>
<p>I could go look it up, but I have work to do&#8230;  It&#8217;d be interesting to see what applications do to globally handle these scroll messages.  Do, for example, WPF apps get this done by default and WinForms don&#8217;t (habits of the era?).  If you have an app that embeds an old widget, like a rich edit control, does the widget also have to buy into this newer behaviour if that&#8217;s what you want to provide to the user?</p>
<p>Enough pontificating :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1244896">
				<div id="div-comment-1244896" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160420-00/?p=93325#comment-1244896">
			April 21, 2016 at 3:33 am</a>		</div>

		<p>Maybe I don&#8217;t understand what GetCursorPos, GetMessagePos, GetAsyncKeyState and GetKeyboardState do, but I don&#8217;t see is why it doesn&#8217;t work for either a) the helper program to call GetCursorPos and GetAsyncKeyState to find out the state as it processes the hardware signal before dispatching the message or b) the recipient to call GetMessagePos and GetKeyboardState to find out the state at the time of the message.</p>
<p>If you had a spare block of 128 messages, you could use that to encode the keyboard state&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>