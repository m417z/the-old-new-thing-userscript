<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1 parent" id="comment-1274625">
				<div id="div-comment-1274625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274625">
			November 22, 2016 at 7:28 am</a>		</div>

		<p>Not criticizing the content of the article, but just to point out that this technique of course assumes that the new data completely overwrites the previous data. For example: What if the consumer is updating a record in a database? Perhaps the first data is updating the value in column 2 and the 2nd data wants to update the value in column 4?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1274665">
				<div id="div-comment-1274665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cullen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274665">
			November 22, 2016 at 9:06 am</a>		</div>

		<p>@Brian_EE: It’s not assuming that each piece of data replaces the previous one. the article specifically states that, in the opening paragraph.</p>
<p>“where there can be multiple work items, but each work item replaces the previous one”</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-bboorman even depth-3" id="comment-1274715">
				<div id="div-comment-1274715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274715">
			November 23, 2016 at 6:32 am</a>		</div>

		<p>You are correct. I missed that he explicitly stated that. I&#8217;m blaming the fog caused by the cold/flu medicines&#8230;. (Yay, winter.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1274626">
				<div id="div-comment-1274626" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274626">
			November 22, 2016 at 7:47 am</a>		</div>

		<p>Typo: &#8220;udpating&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1274635">
				<div id="div-comment-1274635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274635">
			November 22, 2016 at 8:00 am</a>		</div>

		<p>It should be pointed out that this algorithm is not lock-free unless you have a lock-free implementation of `Data::operator delete()`</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1274645">
				<div id="div-comment-1274645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274645">
			November 22, 2016 at 9:06 am</a>		</div>

		<p>Taking a lock in a destructor is incredibly poor form.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1274675">
				<div id="div-comment-1274675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274675">
			November 22, 2016 at 9:37 am</a>		</div>

		<p>Kevin, it&#8217;s not the destructor (which would be `Data::~Data()`, but `operator delete()`, the deallocation function which is the second behavior of using the C++ `delete` operator.  Deallocation functions working on shared heaps (and Raymond&#8217;s code doesn&#8217;t respect thread affinity of allocations, so his allocator must be free-threaded) very often take a lock.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4 parent" id="comment-1274685">
				<div id="div-comment-1274685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274685">
			November 22, 2016 at 11:39 am</a>		</div>

		<p>Would you be happier if RequestUpdate merely returned a bool saying whether or not the caller should delete the pointer? The point is that the communication channel does not introduce a lock between the producers and the consumer. If there&#8217;s another lock somewhere else, well, that&#8217;s a different problem. (After all, Update() itself may take a lock.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1274695">
				<div id="div-comment-1274695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274695">
			November 22, 2016 at 3:47 pm</a>		</div>

		<p>Well I guess it depends on what you are using lock-free for. Reducing the size of your lock graph is a valid reason as you suggested.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>