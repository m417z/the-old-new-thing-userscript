<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (30)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-487063">
				<div id="div-comment-487063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487063">
			March 29, 2007 at 11:01 am</a>		</div>

		<p>Is it usual for the &#8216;dwLen&#8217; parameter to come before &#8216;lpData&#8217;? I thought most buffer/size parameter pairs had the buffer parameter first.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-487113">
				<div id="div-comment-487113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487113">
			March 29, 2007 at 12:26 pm</a>		</div>

		<p>I have always wondered how the whole application compatibility thing works. &nbsp;Is there some documentation I can read about this somewhere? &nbsp;I wouldn&#8217;t have imagined a developer of a popular (presumably advanced) game just handing the source code over to Microsoft to check for bugs or whatever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-487123">
				<div id="div-comment-487123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nativecpp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487123">
			March 29, 2007 at 12:40 pm</a>		</div>

		<p>This is not actually related to GetFileVersionInfo but is somewhat related to buffer size. I am always confused (i.e. need to read MSDN) about MAX_PATH.</p>
<p>In GetTempFileName, the size should be MAX_PATH+1.</p>
<p>In GetWindowsDirectory, the size should be MAX_PATH</p>
<p>In GetModuleFileName, I am not sure since we can have long path (i.e. &quot;\?&quot;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-487133">
				<div id="div-comment-487133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487133">
			March 29, 2007 at 12:44 pm</a>		</div>

		<blockquote><p>
  &gt; I wouldn&#8217;t have imagined a developer of a popular (presumably advanced) game just handing the source code
</p></blockquote>
<p>This kind of bug doesn&#8217;t need the original source &#8211; but it does take work looking at the disassembled code (work that by all rights Microsoft probably shouldn&#8217;t have to expend, but that&#8217;s another drifted thread of conversation&#8230;). &nbsp;Strictly speaking, you can debug any code without source &#8211; it&#8217;s just usually more difficult.</p>
<p>What you do is notice that GetFileVersionInfo() causes a crash, then when you look in the disassembled code, you see that the result from &nbsp; &nbsp;GetFileVersionInfoSize() is being passed as the buffer size for a buffer that&#8217;s on the stack.</p>
<p>Since the stack-based buffer is allocated before the GetFileVersionInfoSize() call (by manipulating the stack pointer), you can deduce that the length being passed to GetFileVersionInfo() has no relationship to the actual size of the buffer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-487143">
				<div id="div-comment-487143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487143">
			March 29, 2007 at 1:08 pm</a>		</div>

		<p>Isn&#8217;t it much more likely that the programmer simply thought that 1024 bytes would always be quite enough?</p>
<p>Since games programmers are known to cut even more corners than others, that&#8217;s a much more probable cause than confusion about the meaning of the parameter.</p>
<p>I&#8217;ve seen so much code with hard-coded MAX_PATH buffers like that when manipulating files&#8230;</p>
<div class=post>[<i>In that case, don&#8217;t ask for the size in the first place since you&#8217;re just going to ignore it. Just call GetFileVersionInfo with a buffer size of 1024. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-487153">
				<div id="div-comment-487153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JeffCurless</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487153">
			March 29, 2007 at 1:08 pm</a>		</div>

		<p>And then windows would have become more bloated and crappy&#8230;.</p>
<p>I mean really, I wish I were a crappy coder, I would get a lot more done and then you guys could just fix it all for me!</p>
<p>And I&#8217;m a windows guy, I hate other OSes&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-487163">
				<div id="div-comment-487163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arno Schoedl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487163">
			March 29, 2007 at 1:24 pm</a>		</div>

		<p>I know I am nit-picking, but quite a few of these API functions (GetWindowText and RegistryQueryString functions are others), access multi-threaded resources. Usually, you first call a &#8230;Length, then allocate the buffer, then call &#8230; Noone guarantees though that the buffer size you queried first is the buffer size that is still required when the data is received. Strictly, you need a loop, checking whether your buffer was big enough and trying again in case it was not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-487173">
				<div id="div-comment-487173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487173">
			March 29, 2007 at 1:50 pm</a>		</div>

		<p>I know it is possible to debug a relatively simple problem like that without source code (in fact I have done it), but I just cannot imagine Microsoft (or any other company) stepping through and analyzing hundreds of lines worth of assembly code for hundreds of products written by hundreds of developers just to fix stupid mistakes like this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-487193">
				<div id="div-comment-487193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DriverDude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487193">
			March 29, 2007 at 2:29 pm</a>		</div>

		<p>&quot;&#8230;I just cannot imagine Microsoft (or any other company) stepping through and analyzing hundreds of lines worth of assembly code for hundreds of products written by hundreds of developers just to fix stupid mistakes like this.&quot;</p>
<p>Obviously MS thinks the cost of fixing other vendors&#8217; bugs is less than the cost of bad press saying &quot;the latest windows breaks my game!&quot;</p>
<p>That&#8217;s good for business. But then there&#8217;s little incentive for the 3rd party to learn and fix THEIR mistakes.</p>
<p>I&#8217;ve met sys admins who are so jaded about Windows they cannot understand why it cannot be MS fault when a service pack breaks an app. Until I explain those dumb stupid mistakes the app makes, like overwriting heap pointers, etc.</p>
<p>Read Nvidia graphic driver release notes sometime. There&#8217;s often a half-dozen errata of the form &quot;Game XYZ shows tearing when 4xAA is enabled. The game is using ABC function incorrectly. This is not a Nvidia bug.&quot;</p>
<p>Ever wonder how many people Nvidia has in their compatibility labs, playing games all day?</p>
<p>Microsoft Press should take Raymond&#8217;s Win32 postings and publish a book, &quot;1001 Win32 Bugs to Avoid&quot; &nbsp;:=)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-487203">
				<div id="div-comment-487203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ookii.org' rel='external nofollow' class='url'>Sven Groot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487203">
			March 29, 2007 at 3:29 pm</a>		</div>

		<p>&quot;I&#8217;ve seen so much code with hard-coded MAX_PATH buffers like that when manipulating files&#8230;&quot;</p>
<p>Considering that Windows Explorer itself can&#8217;t handle paths longer than that, I don&#8217;t think that&#8217;s really a problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-487213">
				<div id="div-comment-487213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487213">
			March 29, 2007 at 3:47 pm</a>		</div>

		<p>By the way Raymond, there&#8217;s a bug in GetFileVersionInfoSize (at least under Vista, not sure about previous versions) &#8211; if you call it on a file that is &gt; 4 gig in size it leaves a lock open on the file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-487223">
				<div id="div-comment-487223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Hensley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487223">
			March 29, 2007 at 4:03 pm</a>		</div>

		<p>&quot;Considering that Windows Explorer itself can&#8217;t handle paths longer than that, I don&#8217;t think that&#8217;s really a problem.&quot;</p>
<p>I would bet that explorer doesn&#8217;t handle it because there&#8217;s no benefit to displaying longer paths to the user. A file path that is not displayed to the user is a different matter.</p>
<p>Lots of developers will use MAX_PATH to declare the length of any string whatsoever. 260 is the new 80.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-487233">
				<div id="div-comment-487233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487233">
			March 29, 2007 at 4:38 pm</a>		</div>

		<p>&quot;That&#8217;s good for business. But then there&#8217;s little incentive for the 3rd party to learn and fix THEIR mistakes.&quot;</p>
<p>Every application has bugs, some more, some less. Often bugs occurs years after a release because an API has been misused but worked in the past. The vendor may already out of business then, or in most cases has no interest in releasing a bug fix. I bet most software vendors couldn&#8217;t even release a bugfix 5 years after the last one. In that case it might make sense for the OS to fix the problem. Microsofts own products are no exception here.</p>
<p>But I&#8217;d say the initial problem here is that the buffer and size parameter is swapped. It looks like the size parameter belongs to the handle and not to the buffer. The Win32 API is inconsistent here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-487243">
				<div id="div-comment-487243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anony Moose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487243">
			March 29, 2007 at 5:10 pm</a>		</div>

		<p>Nah, the devs obviously knew which param was the size &#8211; they just didn&#8217;t have a clue what to actually put in it, and didn&#8217;t even bother to check that the buffer was large enough. The Win32 API may be inconsistent here, but that&#8217;s not the cause of the problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-487183">
				<div id="div-comment-487183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487183">
			March 29, 2007 at 2:13 pm</a>		</div>

		<p>This is a variation on the same theme, that I&#8217;ve seen from time to time:</p>
<p> &nbsp; strncpy(dest, src, strlen(src)+1);</p>
<p>Well, I suppose they at least understand that they *want* to prevent buffer overflow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-487313">
				<div id="div-comment-487313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487313">
			March 30, 2007 at 1:27 am</a>		</div>

		<blockquote><p>
  &quot;260 is the new 80.&quot;
</p></blockquote>
<p>Surely you mean 81? ;)</p>
<p>By the way, those who speak about calling an API in a loop to get the right size don&#8217;t have a clue &#8212; most APIs can be called with 0 (zero), in that case required buffer length is returned. God forbid if we really had to call something several times in a loop for each of 50,000 files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-487333">
				<div id="div-comment-487333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487333">
			March 30, 2007 at 2:16 am</a>		</div>

		<p>Igor, the problem with requesting the buffer length before calling the API is that the size of the data may have changed between the two calls.</p>
<p>For example, let&#8217;s say that I&#8217;m trying to read a 100-byte registry value with RegGetValue(). I call it with a value of 0 for pcbData, and the function returns ERROR_MORE_DATA and tells me that I need 100 bytes. I then allocate the 100 byte buffer.</p>
<p>Assume that now some other process changes the registry value to 150 bytes. When I call RegGetValue again with my 100-byte buffer, I will get ERROR_MORE_DATA again and pcbData will now have 150. I have to call RegGetValue again with a reallocated 150-byte buffer, and hope that somebody didn&#8217;t make it bigger again.</p>
<p>This isn&#8217;t such a big problem with the registry because I know that a value can&#8217;t be more than 64k so I can just always have a buffer of maximum possible size. In Vista I could use a transaction to make sure nobody modifies the key while I&#8217;m looking at it. However, this is just an example of a situation where you have to call the API in a loop if you want to reliably get the necessary buffer size.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-487343">
				<div id="div-comment-487343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487343">
			March 30, 2007 at 2:16 am</a>		</div>

		<p>@Igor</p>
<blockquote><p>
  most APIs can be called with 0 (zero), in that case</p>
<p>  required buffer length is returned.
</p></blockquote>
<p>Yes, you call the function with 0, it tells you the required buffer size. Then a thread and/or process switch happens, another application changes a value in the registry. Then you get control back, allocate the memory using the size that was sufficient 20 milliseconds ago, call the function again with the new buffer, and end up with a truncated string and an ERROR_MORE_DATA status code. “Impossible! It told me I only need 42 bytes, I gave it 42 bytes and it says it’s not enough!?” Oh well, Windows API only gives a Read Committed transaction isolation level, not Repeatable Read.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-487263">
				<div id="div-comment-487263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DriverDude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487263">
			March 29, 2007 at 8:03 pm</a>		</div>

		<p>Andre, stop making excuses.</p>
<p>MSDN: &quot;dwLen: Specifies the size, in bytes, of the buffer pointed to by the lpData parameter.&quot;</p>
<p>In this case, there is no freaking way to be confused about what the size param is meant for. It does not make any sense to ask an API for the &quot;size of a handle&quot; &nbsp;There is no way to mixup the handle and size &#8211; one is a typedefed pointer, the other is an unsigned int. The compiler will tell you.</p>
<p>There are many other examples of &quot;get the sizeof data&quot; and then &quot;get the data&quot; &nbsp;Many APIs have such mechanisms, for many things &#8211; not just Win32.</p>
<p>MS has its share of bugs and poor docs, but this is the kind of mistake a first-year student makes.</p>
<p>If the vendor has no interest in fixing *their own bugs*, or if they cannot, then why is it Microsoft&#8217;s job to do it for them? (Other than being good for MS. But it doesn&#8217;t seem to improve overall software quality!)</p>
<p>Maybe Microsoft should hand-hold developers too?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-487353">
				<div id="div-comment-487353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lisianthus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487353">
			March 30, 2007 at 3:26 am</a>		</div>

		<p>If Raymond is referring to the game I think he is, I&#8217;m afraid I was involved in this particular disaster. :(</p>
<p>The truth is, we found out about this bug soon after ship, and we were very embarrassed that a fixed size buffer had been hard-coded. I&#8217;m pretty sure that the buffer was fixed with proper dynamic allocation in the very first patch, but by that time it was too late, given that many people never bother to update and we didn&#8217;t have a way to push a patch.</p>
<p>So, sorry for the lame code, and that&#8217;s one bug we&#8217;re not eager to repeat.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-487363">
				<div id="div-comment-487363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487363">
			March 30, 2007 at 4:09 am</a>		</div>

		<p>Gabe, thanks for the reminder of that particular (ugly) case.</p>
<p>Guess I never needed to read a registry key which someone is modifying at the same time. I believed that the registry has support for atomic operations. Obviously I was wrong.</p>
<p>I still don&#8217;t understand why system cannot allocate the proper buffer, copy the data and return the pointer and the length in one go. True it would require RegFreeData() API but you wouldn&#8217;t have to call the same API dozen times to get one value.</p>
<p>So that is the reason why people want to know absolute limits (Raymond posted recently about it) and why some programmers just adore allocating static buffers (like in this post only this one wasn&#8217;t big enough).</p>
<p>Furthermore, will the value you get in the end be the one you expected to get? Or should your application fail when you realize that value has changed? What about nasty applications which constantly jerk off through the registry (pretty much anything that sits in taskbar notification area)? How much do they affect the system performance? Should Microsoft introduce some limit of registy accesses per second per process?</p>
<p>Meditate upon that, I will.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-487373">
				<div id="div-comment-487373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487373">
			March 30, 2007 at 4:37 am</a>		</div>

		<p>Friday, March 30, 2007 1:27 AM by Igor</p>
<blockquote><p>
  By the way, those who speak about calling an</p>
<p>  API in a loop to get the right size don&#8217;t</p>
<p>  have a clue &#8212; most APIs can be called with 0</p>
<p>  (zero), in that case required buffer length is</p>
<p>  returned. God forbid if we really had to call</p>
<p>  something several times in a loop for each of</p>
<p>  50,000 files.
</p></blockquote>
<p>You&#8217;re the one without a clue. &nbsp;Read the MSDN page on GetModuleFileName and see what it returns. &nbsp;God forbid you to code what you have to code in order to get correct results, eh?</p>
<p>Don&#8217;t read the MSDN page on LoadString though. &nbsp;Don&#8217;t read the MFC LoadString code that calls the Win32 LoadString API in a loop in order to figure out whether it got the entire string or not. &nbsp;You&#8217;re obviously happier pretending that it doesn&#8217;t exist. &nbsp;(Those of us who have clues do wish that it didn&#8217;t have to exist.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-487393">
				<div id="div-comment-487393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.mark-ingram.com' rel='external nofollow' class='url'>Mark Ingram</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487393">
			March 30, 2007 at 5:29 am</a>		</div>

		<p>I really would hope that seasoned game programmers would not be making &quot;newbie&quot; mistakes like that. I hope they put it down to a placement student ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-487293">
				<div id="div-comment-487293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487293">
			March 30, 2007 at 12:17 am</a>		</div>

		<p>&gt; Just call GetFileVersionInfo with a buffer</p>
<p>&gt; size of 1024.</p>
<p>You&#8217;re right. &nbsp;The code in the article tricked me into being suspicious, so I looked it up.</p>
<p>* &nbsp;DWORD dwHandle,</p>
<p>* &nbsp;dwHandle</p>
<p>* &nbsp; &nbsp;This parameter is ignored.</p>
<p>OK, the wording&#8217;s there and it&#8217;s correct. &nbsp;But still, with or without a time machine, the thing isn&#8217;t</p>
<p> &nbsp; HANDLE hSomethingOrOther</p>
<p>which is always set to NULL and then ignored, and it isn&#8217;t</p>
<p> &nbsp; HANDLE hIgnored</p>
<p>which would make it more obvious to even a quick scanner. &nbsp;Of course the code in the article has its own unacceptable bug, but we can understand a bit why the original coder was confused.</p>
<p>Thursday, March 29, 2007 12:40 PM by nativecpp </p>
<p>&gt; In GetTempFileName, the size should be MAX_PATH+1.</p>
<p>It doesn&#8217;t hurt to do that (wastes an amount of memory equal to one TCHAR&#8217;s size) but MSDN says MAX_PATH is enough. &nbsp;(On the other hand, this MSDN page isn&#8217;t quite sure if it understands TCHARs, so I&#8217;m not quite sure if we should rely on its understanding of MAX_PATH. &nbsp;Maybe we should use MAX_PATH+1.)</p>
<p>&gt; In GetWindowsDirectory, the size should be MAX_PATH</p>
<p>Agreed.</p>
<p>&gt; In GetModuleFileName, I am not sure since we</p>
<p>&gt; can have long path (i.e. &quot;\?&quot;)</p>
<p>There is no apparent limit. &nbsp;Whatever file system the file was stored in, the file system might set a limit, but the GetModuleFileName has no apparent limit here. &nbsp;I think you have to put your call to GetModuleFileName in a loop, growing the buffer each time until the result length is shorter than the buffer length.</p>
<p>Thursday, March 29, 2007 3:29 PM by Sven Groot </p>
<p>&gt;&gt; &quot;I&#8217;ve seen so much code with hard-coded</p>
<p>&gt;&gt; MAX_PATH buffers like that when manipulating</p>
<p>&gt;&gt; files&#8230;&quot;</p>
<p>&gt;</p>
<p>&gt; Considering that Windows Explorer itself can&#8217;t</p>
<p>&gt; handle paths longer than that, I don&#8217;t think</p>
<p>&gt; that&#8217;s really a problem.</p>
<p>Wrong, very wrong. &nbsp;Here are some reasons, in the wrong order:</p>
<p>(1) &nbsp;Windows Explorer itself has problems with some paths shorter than that too.</p>
<p>(2) &nbsp;Paths can exist which can be longer than Windows Explorer can handle. &nbsp;It&#8217;s pretty trivial to crash telephones which were made with Windows CE prior to version 5, which doesn&#8217;t help customers much.</p>
<p>(3) &nbsp;It&#8217;s pretty trivial for malware to write pathnames longer than that, and it&#8217;s pretty wise for anti-malware to find them and deal with them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-487433">
				<div id="div-comment-487433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487433">
			March 30, 2007 at 9:09 am</a>		</div>

		<p>Seasoned game programmers might be very good at creating games but poor when working with Win32. &nbsp;When killing yourself to get those extra three frames per second, you tend to not care if your version info call is correct.</p>
<p>Sad but true.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-487443">
				<div id="div-comment-487443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-487443">
			March 30, 2007 at 9:15 am</a>		</div>

		<p>What would interest me is if all these compatibility hacks are dynamically loaded at the start of an application, or if they are statically integrated into the Windows APIs and therefore contributing to the alleged Windows &quot;bloat&quot;?</p>
<p>Does a compatibility fix overhead affect only the intended process or all running processes?</p>
<p>Are the compatibility fixes documented somewhere, or will API competitors like Wine or ReactOS always lack this features?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488023">
				<div id="div-comment-488023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-488023">
			March 31, 2007 at 4:52 am</a>		</div>

		<p>Norman, tsk, tsk, tsk&#8230;</p>
<p>I said <em>most</em> APIs (I admit I should have said some instead), but I surely didn&#8217;t say all of them and I also wish that this mess didn&#8217;t have to exist. If I hate something in programming that is reallocating memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488053">
				<div id="div-comment-488053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Messiant R</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-488053">
			March 31, 2007 at 12:39 pm</a>		</div>

		<p>The more I read about the experiences from the application compatibility labs/people, the more it makes me want to work alongside them</p>
<p>Keep those stories coming</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488073">
				<div id="div-comment-488073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sohail</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-488073">
			March 31, 2007 at 2:24 pm</a>		</div>

		<p>Is it just me or would all these problems go away if the Windows API had a FreeThisTypeOfPointer(Type*) function?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488183">
				<div id="div-comment-488183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chuck Chen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070329-00/?p=27453#comment-488183">
			April 2, 2007 at 1:59 am</a>		</div>

		<p>Mak,</p>
<p>The compatibility *hacks* are dynamically loaded at the start of an application. &nbsp;And they are only loaded for the intended processes, not for every running process.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>