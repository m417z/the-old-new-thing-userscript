<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (45)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-873493">
				<div id="div-comment-873493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873493">
			November 11, 2010 at 8:34 am</a>		</div>

		<p>Isn&#39;t the solution to call LoadLibrary with a full path before using any of the DLL&#39;s features? Then you get the benefits of delay-loading (saves you the trouble of messing with GetProcAddress) and you get full control of which DLL gets loaded.</p>
<div class="post">[<i>This assumes you can identify all the places you use a feature (i.e., there&#39;s no obscure code path where a feature can get used without first funnelling through your &quot;Load the library first&quot; function.) Probably easier is to write a <a href="http://msdn.microsoft.com/en-us/library/z9h1h6ty(VS.80).aspx" rel="nofollow">custom notification hook</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873503">
				<div id="div-comment-873503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pupu_platter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873503">
			November 11, 2010 at 8:37 am</a>		</div>

		<p>What if you call GetModuleFileName after using DelayLoad or LoadLibrary and check if the directory is legit?</p>
<p>This way you can also compare the module&#39;s directory to the current directory. If they are the same, and the current directory is some random location on the harddrive, you can suspect your program was attacked.</p>
<div class="post">[<i>Um, it&#39;s kind of too late after you load the DLL. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873513">
				<div id="div-comment-873513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873513">
			November 11, 2010 at 8:51 am</a>		</div>

		<p>Ugh. Time to break backwards compatibility and stop loading DLLs from the current directory.</p>
<p>[not only do programs which linked to the DLL in the traditional manner stop loading, but you&#39;ve also introduced a security vulnerability]</p>
<p>No, Microsoft introduced this security vulnerability. And since developers cannot defend against this one in all cases, only Microsoft can fix it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873543">
				<div id="div-comment-873543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Todd Greer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873543">
			November 11, 2010 at 9:32 am</a>		</div>

		<p>I presume that the way to use a custom notification hook here is to hook the dliNotePreLoadLibrary notification, try to load the DLL from a safe place, then throw an exception if it fails (sounds like a good approach). MSDN doesn&#39;t state whether it&#39;s ok to throw an exception from a custom notification hook. Is this documented anywhere?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873563">
				<div id="div-comment-873563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873563">
			November 11, 2010 at 10:03 am</a>		</div>

		<p>@Todd: I seem to recall that the delayloader hooks provide a way to report failure (e.g. returning a NULL pointer instead of an HMODULE). &nbsp;And the delayloader will translate that into an exception (possibly language-appropriate, probably SEH, depends on your compiler since it provides the delayloader).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873573">
				<div id="div-comment-873573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Todd Greer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873573">
			November 11, 2010 at 10:11 am</a>		</div>

		<p>@Ben: The notification and failure hooks can only return 0 (meaning &quot;proceed as usual&quot;) or a handle (meaning &quot;I&#39;ve done the work; just use this handle&quot;). While a 0 from a failure hook will let the process continue to fail, the only way for a notification hook to fail is to throw an exception.</p>
<p>The error hooks are specifically mentioned as being OK to throw exceptions from, but the documentation doesn&#39;t mention exceptions from notification hooks. I&#39;ve submitted a clarification request to MSDN.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873633">
				<div id="div-comment-873633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TheHims</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873633">
			November 11, 2010 at 12:29 pm</a>		</div>

		<p>What happens when a program that is trusted by the user, and lives in %ProgramFiles%, is copied by a malicious exploiter to %Temp%, and run from there, with copies of kernel32, etc? I guess the program can check that it should only run from a protected location such as %programfiles%, but to check that, does it not need to load kernel32? Is there a way to protect against this?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873643">
				<div id="div-comment-873643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TheHims</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873643">
			November 11, 2010 at 12:38 pm</a>		</div>

		<p>Just to clarify the previous comment on the trusted program, this becomes more interesting in an UAC situation, where malicious exploiter is trying to elevate %temp%trusted.exe. The elevation prompt does not show the program location by default, so the user may just hit &quot;Yes&quot;.</p>
<div class="post">[<i>You&#39;re already on the other side of the airtight hatchway. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873653">
				<div id="div-comment-873653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">a random passerby</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873653">
			November 11, 2010 at 12:39 pm</a>		</div>

		<p>Does this vulnerability even need the existence of an optional or delay-loaded DLL? Why couldn&#39;t an attacker rename an existing DLL and replace it with one of their own which simply emulates the DLL&#39;s API?</p>
<p>[You would break the application. -Pithy commenter]</p>
<p>So I use DllImport to load the original DLL and pass calls along to the original DLL, in addition to whatever I choose to do to exploit the other application, or intercept its data, or whatever devious thing I wanted to do.</p>
<div class="post">[<i>The difference is that renaming a DLL requires privileges beyond control of the current directory. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873663">
				<div id="div-comment-873663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873663">
			November 11, 2010 at 12:53 pm</a>		</div>

		<p>@TheHims: then well you just got busted. FYI, kernel32 and a few others cannot be attacked but the various MSVC* dlls can be attacked just fine. Since UAC is bustable out of the box now anyway, I just don&#39;t care about that one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873673">
				<div id="div-comment-873673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Windows *must* be modified to prevent DLLs loading from CWD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873673">
			November 11, 2010 at 12:53 pm</a>		</div>

		<p>Loading DLLs from the current directory is so uncommon, and such a pernicious security vulnerability, that it should be disabled by default. A system-wide enabling switch similar to the existing DLL load order one combined with an appcompat shim would be sufficient for backward compatibility. Security should trump compatibility.</p>
<div class="post">[<i>The hard part is identifying all the programs that require the shim. Most of which are probably not commercially available. Result: Company has to test <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/11/06/999999.aspx" rel="nofollow">9000 internal applications</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873683">
				<div id="div-comment-873683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873683">
			November 11, 2010 at 1:43 pm</a>		</div>

		<p>Once this potential security issue was identified, why did not OS add an option to LoadLibraryEx, like LOAD_LIBRARY_NO_CURRENT_DIR? This would let delay load avoid this problem all together on newer OS and old OS would simply ignore unknown flag.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873713">
				<div id="div-comment-873713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JonPotter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873713">
			November 11, 2010 at 2:12 pm</a>		</div>

		<p>&quot;Those people are indirectly saying &quot;Microsoft should introduce a new security vulnerability.&quot;</p>
<p>Would this be any worse than intentionally leaving an existing security vulnerability unfixed?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-873723">
				<div id="div-comment-873723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873723">
			November 11, 2010 at 2:15 pm</a>		</div>

		<p>[Actually, I was directing it to people who say &quot;Microsoft should make X an optional component.&quot; Those people are indirectly saying &quot;Microsoft should introduce a new security vulnerability.&quot; -Raymond]</p>
<p>If a DLL was removed from a future version of Windows couldn&#39;t it just be added to a list of DLLs which are never to be loaded from the CD?</p>
<p>(Not sure if the existing KnownDLLs list would do that already &#8212; it&#39;s usually used to list things which do exist, not which do not &#8212; but there could be another list if needed.)</p>
<p>Similarly, with the Vista/7 DWM DLL being a common one to attack, Microsoft could roll out a patch to XP which added that DLL to a list, although I guess you&#39;d risk breaking apps which loaded their own DLL with the same name. (They&#39;d break anyway when upgrading to Vista, though&#8230; Actually, doesn&#39;t that mean every single time a new system DLL is added to the OS people have to re-test their 9000 apps? Don&#39;t people have to do that anyway with every OS update, realistically?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873743">
				<div id="div-comment-873743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873743">
			November 11, 2010 at 3:02 pm</a>		</div>

		<p>I agree that this should be treated on the same level as Data Execution Prevention (DEP). &nbsp;If a program attempts to load a DLL from the current directory, a dialog box should pop up which states, &quot;Program X attempted to load component Y from &lt;Current Directory&gt;. &nbsp;Please contact the vendor for an update or click here for more information.&quot; &nbsp;Clicking here would say something like &quot;add the directory to the path&quot; or &quot;copy the dll to the executable folder&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873483">
				<div id="div-comment-873483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mijzelf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873483">
			November 11, 2010 at 7:28 am</a>		</div>

		<p>When using c++ dll&#39;s the only way to handle nonexistent dll&#39;s is delayload them, AFAIK. While it *could* be possible to manually import class interfaces, I wouldn&#39;t know how. So I suppose calling SetDllDirectory(&quot;&quot;) is the only way to be safe, then. (Which function has to be imported manually, because it&#39;s not always there)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873753">
				<div id="div-comment-873753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873753">
			November 11, 2010 at 3:37 pm</a>		</div>

		<p>&quot;Delayload is not for detecting functionality.&quot; You know that and I know that, but it won&#39;t stop being used that way until it stops working.</p>
<p>It&#39;s simple. When the program starts, run through the list of delayloads and check each one for existence [without actually loading it, so as not to defeat the supported purpose]. If any of them does not exist, crash the app.</p>
<div class="post">[<i>And then you get complaints from people whose perfectly correct app now crashes. &quot;I do an OS check before calling into a delay-loaded dwmapi.dll, and now you just crash my app outright even though I&#39;m doing the right thing.&quot; Can you guys go talk to the people who hate DPI virtualization and tell them to shut up? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873763">
				<div id="div-comment-873763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873763">
			November 11, 2010 at 3:47 pm</a>		</div>

		<p>Why do 64-bit dlls also load from current dir? If those who developed the first version of 64-bit windows had fixed this flaw once and for all, these problems whould not exist in the future. Now we have to wait for 128-bit windows to fix this security flaw.</p>
<div class="post">[<i>Porting to 64-bit is hard enough. You don&#39;t want to compound the problem by adding a bazillion subtle breaking changes. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873773">
				<div id="div-comment-873773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Whole</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873773">
			November 11, 2010 at 4:05 pm</a>		</div>

		<p>A query. I understand why current directory is a bad idea, but what about the path ? The path often contains directories which are writeable by everybody, so one could place a dll in this directory and execute the same attack against a program.</p>
<div class="post">[<i>If an attacker can write to a directory on the PATH then you have the same problem. So don&#39;t add an attacker-writeable directory to the PATH. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873783">
				<div id="div-comment-873783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873783">
			November 11, 2010 at 4:17 pm</a>		</div>

		<p>@Leo Davidson</p>
<p>You may be right about that, it took a lot of developers until UAC was introduced to actually start thinking about least privilages. Human nature is to stick with what is known until they are forced to change and then they change but complain loudly.</p>
<p>But still, complaining about it in these comments won&#39;t go towards changing anything. The better thing to do is rally people together and have everybody write well constructed arguments to relavent teams through email.</p>
<p>@Raymond</p>
<p>At least that application had some sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873793">
				<div id="div-comment-873793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873793">
			November 11, 2010 at 5:30 pm</a>		</div>

		<p>“I agree that this should be treated on the same level as Data Execution Prevention (DEP).”</p>
<p>You do realize that DEP is set to opt-in for Client editions of Windows 6.x?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873803">
				<div id="div-comment-873803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873803">
			November 11, 2010 at 6:02 pm</a>		</div>

		<p>Sorry for the off topic but you (mr Chen) is a hard man to get in contact with (by design i assume)</p>
<p>About your new c++ scratch program:</p>
<p>Did you know it has the behavior of getting flooded with WM_GETICON messages due to how the RegisterClass struct is setup ?</p>
<p>Is this a bug on windows part, or is it normal (by design) behavior to flood a program like this when RegisterClass struct is setup like that ?</p>
<p>Thanks for understanding and for answering (hopefully)</p>
<p>Jim</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873593">
				<div id="div-comment-873593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam V</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873593">
			November 11, 2010 at 10:20 am</a>		</div>

		<p>@Joshua:</p>
<p>He wasn&#39;t talking about *you*. The paragraph in question was talking about &quot;changing the list of files included with an operating system&quot;. I think it&#39;s safe to assume Raymond is pointing this comment at Microsofties, not regular developers.</p>
<div class="post">[<i>Actually, I was directing it to people who say &quot;Microsoft should make X an optional component.&quot; Those people are indirectly saying &quot;Microsoft should introduce a new security vulnerability.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873613">
				<div id="div-comment-873613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873613">
			November 11, 2010 at 10:37 am</a>		</div>

		<p>Once again, Raymond left too many &quot;obvious&quot; questions unanswered for me and since I am not knowledgeable enough to know the answers to all these obvious questions, I have to ask them&#8230;</p>
<p>DelayLoad is done by code placed there by the *linker*.</p>
<p>Where&#39;s the backwards compatibility problem here? The code isn&#39;t produced yet, can&#39;t you just remove current directory at this instant and be done with it? The program won&#39;t work? Yes, but it won&#39;t work from the beginning of its life, therefore it&#39;ll get fixed.</p>
<p>I assume that the &quot;current directory attack&quot; is newer than the DelayLoad and that&#39;s why people designing DelayLoad didn&#39;t think of explicitly removing the current directory from the search paths. Ok fragile programs are in the wild. I would have hoped the article ended with the good news that a new DelayLoad code has been introduced in VS2011 and that this problem will eventually fade away.</p>
<p>And I would have hoped that tests done by MS would have shown that when DelayLoad is used, it&#39;s not by those pesky LitWare folks always producing bug-riddled applications, and that in all the cases that matters for MS&#39;s clients, a shim could be introduced to patch the old, CurrentDir-loving, DelayLoad with the shiny new VS2011 DelayLoad at runtime.</p>
<p>It&#39;s apparently not the case and I wish Raymond had explained why it has not be done.</p>
<div class="post">[<i>The explanation is in the subject line. Delayload is not for detecting functionality. It&#39;s for loading a DLL that you <span style="text-decoration:underline;">already know is there</span>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873623">
				<div id="div-comment-873623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Snoshy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873623">
			November 11, 2010 at 11:02 am</a>		</div>

		<p>[Actually, I was directing it to people who say &quot;Microsoft should make X an optional component.&quot; Those people are indirectly saying &quot;Microsoft should introduce a new security vulnerability.&quot; -Raymond]</p>
<p>That seems a bit facetious; the act of making it optional is not the one introducing the security vulnerability. &nbsp;The vuln is introduced by incorrect usage of delay loading. &nbsp;Which brings me to the next point&#8230;</p>
<p>I see no reason for this discussion to be limited to the _detection_ of a delay loaded DLL. &nbsp;This is just a specific case of the more general problem that when you&#39;re delay loading a DLL without a fully-qualified path, you&#39;re introducing a security vulnerability unless you *know* that the required DLL exists in one of the locations 1-4 in your list. &nbsp;You&#39;ve already just mentioned this point in the comment above, but the title of the post is still misleading.</p>
<div class="post">[<i>If DLLs can move from the &quot;guaranteed to exist&quot; to the &quot;not guaranteed to exist&quot; category, then you will never *know* that a Windows-provided DLL exists in one of the locations on the list. (And it directly relates to the subject line, because if you *know* that the DLL exists, then you don&#39;t need to detect whether it exists.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873813">
				<div id="div-comment-873813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873813">
			November 11, 2010 at 7:19 pm</a>		</div>

		<p>[The Enterprise class application didn&#39;t take any chances. it called &quot;SetCurrentDirectory(&#39;extension-directory&#39;)&quot; before loading via relative paths (and all this happened before it spawned any worker threads). -Raymond]</p>
<p>They way I read the document, loading via relative path is the same as by absolute path, it will not be searched. Oh but you mean it loaded with just a name and it was deliberately in that directory. I doubt it will take all that long for said enterprise customer to realize they need to shim that app.</p>
<p>OK this can&#39;t be done in a hotfix, but it should be safe for a service pack. It will cause a lot less trouble then XPSP2 did.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873703">
				<div id="div-comment-873703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873703">
			November 11, 2010 at 2:10 pm</a>		</div>

		<p>@a random passer by</p>
<p>If you could do that to an application, why do it. This would mean you have write access to the program&#39;s application directory which would further imply bad administration. So it is quite possible that you either already allowed the bad person admin access to your system, or there is an easier way to attack.</p>
<p>This is talking about on a secure system where you have your programs installed into program files or some other secure location and bad people can&#39;t just go in and change vital files.</p>
<p>@Windows *must* be modified to prevent DLLs loading from CWD</p>
<p>Ok, so you feel so strongly that you name yourself this way. First complaining it about it here isn&#39;t likely to get it fixed. You&#39;d be better to give a well constructed argument to something like the Windows security team.</p>
<p>Secondly, is it uncommon? You may think it is uncommon because it is something you wouldn&#39;t do. But as Raymond said in yesterdays comments, an Enterprise class application used LoadLibrary on a relative path. So if it makes it&#39;s way into enterprise class applications then who knows how many smaller applications rely on this behaviour. It is so easy to use a relative path to a library assuming you are stll in the applications initial working directory since developers assume they will be executed through the link in explorer, not through the command line.</p>
<p>Yes this can be a vulnerability, but it is only one if the developer is sloppy, so instead of going running to Windows in this way, developers should first fix their bad habits so Windows doesn&#39;t have to go cleaning up after them. Since we should know by now, if you change something and an application breaks, the application isn&#39;t blamed, Windows is blamed.</p>
<div class="post">[<i>The Enterprise class application didn&#39;t take any chances. it called &quot;SetCurrentDirectory(&#39;extension-directory&#39;)&quot; before loading via relative paths (and all this happened before it spawned any worker threads). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-873733">
				<div id="div-comment-873733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873733">
			November 11, 2010 at 2:29 pm</a>		</div>

		<p>&quot;Yes this can be a vulnerability, but it is only one if the developer is sloppy&quot;</p>
<p>I disagree. It&#39;s an issue unless the developer is *exceptionally* on top of things. And even then only if they can audit every piece of third-party code they load, including code which may run before control is passed to their own code.</p>
<p>Spend five minutes running a few of the programs which ship with Windows, let alone things written by third parties, under Process Monitor and you&#39;ll find a hell of a lot of exes which accidentally probe the CD for DLLs. That even includes at least one exe configured to silently auto-elevate; one where you&#39;d think a bit of extra attention to that sort of thing had been paid.</p>
<p>Expecting developers to fix this in every app seems unrealistic. It&#39;s either going to stay an issue forever or be addressed by the OS itself one day.</p>
<p>Maybe the answer is for Windows 8 to tell people if their apps are relying on this deprecated behaviour so people can find them but they don&#39;t actually break; then have Windows 9 actually disable the behaviour by default. Seems the only way to me.</p>
<p>It also seems funny that the vulnerability is caused by apps doing exactly what they&#39;re being told not to do here (and elsewhere), and it&#39;s too risky to change the OS because lots of unknown apps could depend on it (although only one has been cited so far)&#8230; Aren&#39;t we then admitting that developers are never going to fix this themselves?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-873823">
				<div id="div-comment-873823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873823">
			November 11, 2010 at 11:34 pm</a>		</div>

		<p>@Todd: you cannot use NULL, it&#39;s reserved; but you can use INVALID_HANDLE, which is -1. This should be a good indication for all practical purposes.</p>
<p>And regarding PATH: any user can open command prompt, type</p>
<p>&nbsp;set path=c:hacked_dll_directory;%PATH%</p>
<p>and start any application she has been granted access to. In this sense, CWD is not more dangerous. As with executables, Windows simply assumes that there is .; in front of the %PATH%.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-873833">
				<div id="div-comment-873833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873833">
			November 12, 2010 at 2:54 am</a>		</div>

		<blockquote><p>
  As with executables, Windows simply assumes that there is .; in front of the %PATH%.
</p></blockquote>
<p>This leads to similar security vulnerabilities (specify a full path to CreateProcess(&#8230;) or you might not get the notepad.exe you were looking for&#8230;)</p>
<p>I will note in passing that Unix-ey OSes force you to type ./configure because . is not in the PATH by default (of course, you could add it to the path.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873843">
				<div id="div-comment-873843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mpbk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873843">
			November 12, 2010 at 3:03 am</a>		</div>

		<p>There exists for a while now a patch from Microsoft allowing you to remove CWD from the list of directories that are checked. &nbsp;We&#39;ve rolled this out company-wide. &nbsp;Surprisingly few things were broken.</p>
<p>1) Outlook 2003 (not 2007 or 2010). &nbsp;One DLL needed to show EML attachments didn&#39;t load.</p>
<p>2) CAD package SolidWorks can&#39;t load some extensions.</p>
<p>3) Google Chrome uses a bizarre method to load and update itself which relied on CWD and thus broke.</p>
<p>By judicious use of registry workarounds provided by the patch, we were able to allow cases 1-3 above to use CWD so long as the CWD was on the local machine and not a remote share or webdav host.</p>
<p>For those who say Microsoft should fix this, well, they&#39;ve provided the tools for you to right here. &nbsp;It&#39;s a nice FixIt package.</p>
<p><a rel="nofollow" target="_new" href="http://support.microsoft.com/kb/2264107" rel="nofollow">support.microsoft.com/&#8230;/2264107</a></p>
<div class="post">[<i>Interesting perspective. To me, three broken Tier-1 applications = horrible. That&#39;s three huge reasons why somebody won&#39;t upgrade. <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/11/20/1109012.aspx" rel="nofollow">Most people need only one</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-873853">
				<div id="div-comment-873853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873853">
			November 12, 2010 at 5:18 am</a>		</div>

		<p>@mpbk: Unfortunately, the FixIt change only configures the registry to change what happens on network drives.</p>
<p>A lot of people seem to ignore the local-drive scenario, which IMO is as much of a threat. (e.g. Download a zip with 1000 JPEGs and a DLL at the bottom, extract to a local folder, then double-click a JPEG without realising the DLL was even there.)</p>
<p>Also, thanks for sharing your findings. There&#39;s so little actual hard examples about this stuff which makes it difficult to judge what impact the change would have. I&#39;ve only had my own machine to go on, where nothing seems to have broken so far.</p>
<p>Earlier today I ran into and was reminded of the one issue/annoyance after making the change (for all drive types): RegSvr32.exe now fails to find DLLs via relative paths; you have to give it an absolute path. That might break some (shoddy) install scripts.</p>
<p>IMO, RegSvr32 should be updated to cope with this and at least allow &quot;regsvr32 .blah.dll&quot; to work even if &quot;regsvr32 blah.dll&quot; still doesn&#39;t. Right now neither works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk even thread-even depth-1" id="comment-873913">
				<div id="div-comment-873913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873913">
			November 12, 2010 at 8:35 am</a>		</div>

		<p>If a bad guy can write arbitrary code into your current directory, hasn&#39;t he already pwned your machine? &nbsp;Or am I missing something (which is likely)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873983">
				<div id="div-comment-873983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-873983">
			November 12, 2010 at 9:54 am</a>		</div>

		<p>11 Nov 2010 4:17 PM is not me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-874003">
				<div id="div-comment-874003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random User 423802</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-874003">
			November 12, 2010 at 10:29 am</a>		</div>

		<p>@Leo Davidson RE: regsvr32</p>
<p>(Most) install scripts that use regsvr32 are, by association, shoddy. Self-reg has proven to be nothing but a different demon from the same old DLL Hell. Half the time I install such a &quot;product&quot;, it decides to XCOPY and self-reg an older version of some COM component I already have on my system, and I have to go through and fix everything to it broke.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000300008794c744 odd alt thread-odd thread-alt depth-1" id="comment-874073">
				<div id="div-comment-874073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Wisefaq' rel='external nofollow' class='url'>Wisefaq</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-874073">
			November 12, 2010 at 5:56 pm</a>		</div>

		<p>@Raymond</p>
<p>&quot;[Interesting perspective. To me, three broken Tier-1 applications = horrible. That&#39;s three huge reasons why somebody won&#39;t upgrade. Most people need only one. -Raymond]&quot;</p>
<p>Having done a few of these desktop deployments, the reason I&#39;ve seen for an application stopping an upgrade is if there is no &quot;free&quot; workaround/fix available. &nbsp;If the customer has to buy a newer version of a product, that will delay a OS upgrade.</p>
<p>Case in point, I had a 700 seat WinXP upgrade halted because Outlook 97 would not work on WinXP.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson even thread-even depth-1" id="comment-874093">
				<div id="div-comment-874093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-874093">
			November 13, 2010 at 2:09 am</a>		</div>

		<p>@DWalker59: &quot;If a bad guy can write arbitrary code into your current directory, hasn&#39;t he already pwned your machine?&quot;</p>
<p>The current directory isn&#39;t a protected location. (We&#39;re not talking about the application&#39;s directory, e.g. in Program Files.)</p>
<p>A machine shouldn&#39;t be considered pwned the moment someone extracts a zip file on it, browses to a network drive or receives an email attachment. Doing any of those may land you in a situation where there&#39;s an EXE or DLL in the current directory. Unless you intentionally run that code you should be safe from it. The problem is that doing something else on some other file in the same directory (e.g. opening a JPEG) may cause you to inadvertently execute that code (which you may not even have noticed was there among the other files (especially if file extensions are hidden)).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk odd alt thread-odd thread-alt depth-1" id="comment-874103">
				<div id="div-comment-874103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-874103">
			November 13, 2010 at 11:41 am</a>		</div>

		<p>@Leo: Ah, that makes sense. &nbsp;I wasn&#39;t thinking about Program files, but thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk even thread-even depth-1" id="comment-874113">
				<div id="div-comment-874113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-874113">
			November 13, 2010 at 11:43 am</a>		</div>

		<p>@WiseFaq: &nbsp;Outlook 97 ran on Windows XP. &nbsp;There were a couple of patches to Outlook 97 that helped.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-874143">
				<div id="div-comment-874143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-874143">
			November 13, 2010 at 5:49 pm</a>		</div>

		<p>[You&#39;re already on the other side of the airtight hatchway. -Raymond]</p>
<p>But why does Windows allow users to pass this hatch? Or is Windows not airtight at all?</p>
<p>%APPDATA% and %LOCALAPPDATA% (both say DATA) were introduced many years ago, but Windows still does no &quot;chmod A-x&quot; on these directories (yes, I know that the owner could change it back, so it&#39;s not fool proof). Heck, there are current Microsoft products which place DLLs in these paths, and neither QA nor the famous SDL catches up!</p>
<p>OTOH: Windows XP introduced SAFER alias software restriction policies 9 years ago.</p>
<p>Turn it on for ALL users [0], set its default level to &quot;Disallowed&quot; and have it check DLLs too, but remove *.LNK from the list of executable files (else shortcuts in the start menu won&#39;t work).</p>
<p>@Brian</p>
<p>This is (sort of) DEP extended into the filesystem: users can&#39;t write to %SystemRoot% and %ProgramFiles% which are the only directories where they can execute from (yes, I know that this is limited to the file extensions known to SAFER, but that list can be extended).</p>
<p>BTW: this setting does NOT break &quot;Windows Logo&quot; compliant programs.</p>
<p>Turn it on, and if some application breaks, ask their vendor/developer why they don&#39;t follow a now 15 year old guidance!</p>
<p>[0] including Administrators, but change their %TEMP% and %TMP% to %SystemRoot%TEMP then, else many installers won&#39;t work.</p>
<p>@Leo Davidson</p>
<p>Apropos sloppy coding: on NT 5.x almost all system binaries have their copy in the &quot;DLLCache&quot; directory. Just run all .EXE found in there (so &quot;DLLCache&quot; is the &quot;application directory&quot;, i.e. #1 in DLL search path) and check which DLLs get loaded from &quot;DLLCache&quot; [1], although their path is VERY WELL known (hard-coded in SFCFILES.DLL).</p>
<p>It&#39;s frightening!</p>
<p>Defense in depth: nope! SDL: nope!</p>
<p>When done, check (for example) the registry key [HKLMSoftwareMicrosoftNetSh]:</p>
<p>why are all DLLs specified with just their filename there, not their very well known pathname?</p>
<p>BTW: don&#39;t try to fix this using REG_EXPAND_SZ and %SystemRoot%System32 as prefix.</p>
<p>Unfortunately some intern not aware of the &quot;better&quot; registry data types must have written the code in NETSH.EXE, so only REG_SZ and hard coded pathnames work.</p>
<p>If this sounds common: back in 2000 there was a problem with WINLOGON.EXE executing the wrong %SystemDrive%EXPLORER.EXE and %SystemDrive%USERINIT.EXE (see MSKB 269049). The obvious fix: &quot;use the pathname&quot; but led to MSKB 249321.</p>
<p>Fortunately you can have BOTH errors fixed: change REG_SZ to REG_EXPAND_SZ and use %SystemRoot%System32userinit.exe!</p>
<p>Unfortunately MSFT did it &quot;the Microsoft way&quot;, and cast that in concrete: since Windows XP the registry entry does NOT support REG_EXPAND_SZ any more. Honi soit&#8230;</p>
<p>[1] you can let SAFER do the work: turn it on and specify a logging file.</p>
<div class="post">[<i>The original question was &quot;What&#39;s to prevent an attacker from copying an EXE to another directory, planting DLLs in the new application directory, and then running it from there?&quot; The answer is &quot;Well if you assume an attacker can do that, then the attacker is working waaay too hard. <a href="http://blogs.msdn.com/b/oldnewthing/archive/2007/08/07/4268706.aspx" rel="nofollow">Just copy rogue.exe to the target directory under the name &quot;notepad.exe&quot; and run it</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-874153">
				<div id="div-comment-874153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-874153">
			November 13, 2010 at 7:54 pm</a>		</div>

		<p>[Just copy rogue.exe to the target directory under the name &quot;notepad.exe&quot; and run it. -Raymond]</p>
<p>That&#39;s why I started with %APPDATA% etc. and the question &quot;is Windows &nbsp;airtight&quot;: are &quot;exec&quot; rights in %USERPROFILE% really necessary for Windows&#39; proper function?</p>
<p>If not, why are they (still) granted in first place?</p>
<p>&quot;drive by&quot; malware abuses exactly this weakness.</p>
<p>The &quot;need to know&quot; principle was well known long before DOS (OK, that had no rights and privileges) and Windows development started.</p>
<p>In Server 2008 OTOH you have to enable almost every service you want to use, most of them are &quot;off&quot; by default or not installed at all.</p>
<div class="post">[<i>Remove execute permission and see what breaks. (Answer: A lot of stuff.) I&#39;m willing to be educated on how a Web site can execute stuff out of %APPDATA% without a security prompt first. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000300008794c744 odd alt thread-odd thread-alt depth-1" id="comment-874163">
				<div id="div-comment-874163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Wisefaq' rel='external nofollow' class='url'>Wisefaq</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-874163">
			November 13, 2010 at 11:34 pm</a>		</div>

		<p>@DWalker59</p>
<p>&quot;Outlook 97 ran on Windows XP. &nbsp;There were a couple of patches to Outlook 97 that helped.&quot;</p>
<p>Outlook 97 would corrupt roaming profiles under Windows XP. &nbsp;I don&#39;t believe Outlook 97 was supported on WinXP, so we were not able to ask Microsoft for help.</p>
<p>The workaround we used at the time was:</p>
<ol>
<li>Delete the roaming profile on the end users Windows XP PC.</li>
<li>
<p>Delete the end user&#39;s roaming profile from the server.</p>
</li>
<li>
<p>Reset the profuser.ini file for outlook (this triggers the outlook setting script to run at login, which sets up the clients outlook settings)</p>
</li>
<li>
<p>Get the user to sign onto a Windows NT4 PC so that their outlook settings will be created.</p>
</li>
</ol>
<p>This is because the only way for Outlook 97 to be configured into the user&#39;s profile, is via a Windows NT4 logon.</p>
<p>Outlook 97 will not work on Windows XP, unless the user has first logged onto a Windows NT4 PC.</p>
<ol>
<li>Once a Windows NT4 generated profile has been created for the end user, they are able to logon to the Windows XP PC.</li>
</ol>
<p>(until the end user&#39;s profile is corrupted, then you start at step 1 again).</p>
<p>The workaround was expensive in terms of customer downtime, and our support time.</p>
<p>We encouraged the customer to migrate to Outlook 2003. &nbsp;Which they weren&#39;t able to do until they upgraded their Exchange servers (v5.5 -&gt; something newer)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-874193">
				<div id="div-comment-874193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-874193">
			November 14, 2010 at 8:38 pm</a>		</div>

		<p>Gordon Fecyk published his advice and script there:</p>
<p><a rel="nofollow" target="_new" href="http://www.antiwindowscatalog.com/?mode=rant&amp;id=7" rel="nofollow">http://www.antiwindowscatalog.com</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-874183">
				<div id="div-comment-874183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-874183">
			November 14, 2010 at 7:36 pm</a>		</div>

		<p>[Remove execute permission and see what breaks. (Answer: A lot of stuff.) -Raymond]</p>
<p>Which stuff (besides &quot;directory traversal&quot;, which but doesnt really matter) breaks?</p>
<p>(Not only [*]) I did exactly this back in the last century under NT4 for the first time, and do it until now on my own systems, without breaking any applications.</p>
<p>Since XP and its SAFER rules I turn them on in every system I install (the script <a target="_new" href="http://home.arcor.de/skanthak/download/XP_SAFER.INF" rel="nofollow">home.arcor.de/&#8230;/XP_SAFER.INF</a> is part of my unattended installation). Guess what breaks there: NOTHING! (OK, I had one user who ran this script report that PDFXChange Viewer stopped working on 7 x64. The cause: PDFXChange Viewer is a 32bit application, but installs itself into %ProgramFiles%, not %ProgramFiles (x86)%&quot;. After manual installation into the correct path the application now works. Did I already state that I don&#39;t care when non Windows Logo compliant applications break?)</p>
<p>[*] At least Gordon Fecyk <a target="_new" href="http://www.pan-am.ca/" rel="nofollow">http://www.pan-am.ca/</a> was the other one.-)</p>
<p>[I&#39;m willing to be educated on how a Web site can execute stuff out of %APPDATA% without a security prompt first. -Raymond]</p>
<p>&quot;drive by&quot; downloads/malware works this way: first a stub is dropped below %LOCALAPPDATA% (to be precise: the &quot;Temporary Internet Files&quot; in case of Internet Explorer, the browser cache in case of 3rd party web browsers, and %TEMP% for other applications) and second some creative method used to let the OS execute this stub.</p>
<p>Do you take an IExpress installer as PoC? (Packages built with IExpress.exe extract themselves to %TEMP%&lt;some_dir&gt; and typically execute a &quot;RunDll32.Exe AdvPack.Dll,LaunchINFSection &lt;filename&gt;.INF,DefaultInstall&quot;. The latter is run without any &quot;security&quot; prompt.)</p>
<div class="post">[<i>Pretty much every installation program assumes that %TEMP% allows execution. Many auto-updaters make the same assumption. Also, per-user application installation needs execute permission on the user profile. (It is my understanding that these &quot;creative methods&quot; are themselves vulnerabilities, so removing execute from %TEMP% is a defense in depth issue rather than a primary defense measure.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-874463">
				<div id="div-comment-874463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101111-00/?p=12303#comment-874463">
			November 15, 2010 at 11:06 pm</a>		</div>

		<p>[Pretty much every installation program assumes that %TEMP% allows execution. Many auto-updaters make the same assumption. Also, per-user application installation needs execute permission on the user profile. (It is my understanding that these &quot;creative methods&quot; are themselves vulnerabilities, so removing execute from %TEMP% is a defense in depth issue rather than a primary defense measure.) -Raymond]</p>
<p>Guilty^Wcorrect in all cases.-)</p>
<p>I&#39;m willing to sacrifice/trade-in &quot;per-user application installation&quot; for security.</p>
<p>That&#39;s why I wrote</p>
<p>| including Administrators, but change their %TEMP% and %TMP% to %SystemRoot%TEMP then,</p>
<p>| else many installers won&#39;t work.</p>
<p>Apropos auto-updaters: most of them already need some &quot;broker&quot; process running with elevated rights. Take MSIEXEC.EXE as example, or &quot;automatic updates&quot;.</p>
<p>There&#39;s always a price to pay: if you let (l)users have full control then their PC will most probably get infested (take a look into your MUAs SPAM folder to see the result of that policy).</p>
<p>OTOH: I&#39;ve setup quite a number of Windows PCs with REALLY restrictive configuration for &quot;Joe Average&quot; in the last 12 years. These users typically fought malware before that, with AV, but without success. Afterwards, they NEVER had a problem with malware: the method(s) I describe here clearly seem to be^W^W^WARE an effective (counter) measure, far superior to AV software.</p>
<p>The only problem(s) my &quot;victims&quot; have to fight from time to time are bad written applications/installers, which most often just dont comply with &quot;Windows Logo&quot; (HP printer drivers are a notorious example).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>