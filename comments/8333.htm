<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-966263">
				<div id="div-comment-966263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966263">
			February 10, 2012 at 7:44 am</a>		</div>

		<p>Wow, thanks for the writeup and the peering into the internals. &nbsp;A factor of 80 improvement? &nbsp;Is that averaged over some large corpus of error strings and use cases, both long and short? &nbsp;In any case, that&#39;s impressive &#8212; was the previous version of FormatMessage really spending 98.75% of its time just dispatching access violations and VirtualQuery/VirtualAlloc?</p>
<p>The documentation on FormatMessage is a little confusing regarding the arguments array. &nbsp;In re the FORMAT_MESSAGE_ARGUMENT_ARRAY flag, it says that it can&#39;t be used with 64-bit integer values, yet the description of the Arguments parameter says that you need to pass a pointer to an array of DWORD_PTR values when you use that flag. &nbsp;On 64-bit Windows, a DWORD_PTR is a 64-bit integer, so these statements seem contradictory.</p>
<div class="post">[<i>No contradiction. You can&#39;t use <code>%1!I64d!</code> in a format. The DWORD_PTR is there so you can pass a string pointer to <code>%1</code>. (Think about the problems that would arise if 64-bit and 32-bit Windows packed 64-bit integers differently.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966273">
				<div id="div-comment-966273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966273">
			February 10, 2012 at 8:03 am</a>		</div>

		<p>Adam: Raymond likes to throw out &quot;example numbers&quot; which aren&#39;t based on actual data. (E.g. he usually refers to a program in question as &quot;Program Q&quot; or similar). That said, the page buffer reallocate method is extremely slow because of the context switch into the Kernel to satisfy the memory commit request, so I&#39;d not be surprised if between that and other machinery to do this that it&#39;d be 80 times faster in some cases.</p>
<div class="post">[<i>In this case, the number 80 came from actual measurements. I did not conduct the measurements so I don&#39;t know what the methodology was. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes even thread-even depth-1" id="comment-966283">
				<div id="div-comment-966283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966283">
			February 10, 2012 at 8:19 am</a>		</div>

		<p>I understand that somebody has to look at incoming vulnerability reports, even if they are absurd. Once you recognize that the report is describing the same issue that was reported dozens of times before, how much time and effort do you actually spend on the analysis?</p>
<div class="post">[<i>You have to verify that the previous analysis is still correct. Who knows, maybe a subsequent change to the function introduced a security issue. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966293">
				<div id="div-comment-966293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeremy Stanley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966293">
			February 10, 2012 at 8:37 am</a>		</div>

		<p>I find a 64KB allocation surprising. &nbsp;How many formatted messages fill more than even a single 4KB page? &nbsp;I guess (1) 64KB is the undocumented minimum virtual address space reservation, and (2) using the process heap is out of the question? &nbsp;I might have considered committing just the first 4KB page of the reservation, and then committing the rest in one fell swoop if the first-chance exception is hit. &nbsp;Then again, it sounds like avoiding the first-chance exception is a feature too, and RAM is cheap as free these days anyhow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jader3rd even thread-even depth-1" id="comment-966303">
				<div id="div-comment-966303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jader3rd' rel='external nofollow' class='url'>jader3rd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966303">
			February 10, 2012 at 9:20 am</a>		</div>

		<p>It&#39;s going to pain some people to read that in some ways Vista is faster than it&#39;s predecessors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966313">
				<div id="div-comment-966313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966313">
			February 10, 2012 at 10:37 am</a>		</div>

		<p>@Jeremy Stanley, regarding &quot;I might have considered committing just the first 4KB page of the reservation, and then committing the rest in one fell swoop if the first-chance exception is hit,&quot; that doesn&#39;t go well with the stated goal of using as little memory as possible. &nbsp;Allocating 60K when you are likely to only need 4 or 8 is wasteful (considering the timeframe.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966333">
				<div id="div-comment-966333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeremy Stanley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966333">
			February 10, 2012 at 11:19 am</a>		</div>

		<p>@Rick C, you misunderstand; I was suggesting this as an alternative to the newer Vista behavior, which was commit 64KB for every call. &nbsp;The idea was to keep (presumably) common &lt; 4KB cases efficient, but then handle big ones with just one &quot;page fault&quot; instead of fifteen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966343">
				<div id="div-comment-966343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966343">
			February 10, 2012 at 11:39 am</a>		</div>

		<p>Here&#39;s a (possibly naive) follow-up question. &nbsp;Why allocate a fixed buffer at all? &nbsp;Why not run through the formatting once to count the number of characters, allocate the exact amount of space needed, and then run through a second time to actually fill the buffer?</p>
<div class="post">[<i>See: TOCTTOU. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966353">
				<div id="div-comment-966353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966353">
			February 10, 2012 at 1:28 pm</a>		</div>

		<p>&quot;[See: TOCTTOU. -Raymond]&quot;</p>
<p>And? &nbsp;Somebody&#39;s going to change the parameters and cause the program to crash? &nbsp;Oh noes! &nbsp;Also, the entire registry API (blah blah time machine blah blah).</p>
<p>But yeah, 64KB is a reasonable size to allocate up front; simpler than the alternatives.</p>
<div class="post">[<i>You&#39;re lucky if it crashes. If you&#39;re unlucky, you have a remotely exploitable buffer overflow. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966363">
				<div id="div-comment-966363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966363">
			February 10, 2012 at 1:51 pm</a>		</div>

		<p>You still know the size of the buffer ahead of time so you shouldn&#39;t be in danger of an overflow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966373">
				<div id="div-comment-966373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian D.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966373">
			February 10, 2012 at 2:38 pm</a>		</div>

		<p>Why not update FormatMessage in XP to work the same as Vista to make those reports go away? &nbsp;Seems like a no brainer, especially if the machine has a GB or more. &nbsp;Keep the old method around for the smaller machines.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966383">
				<div id="div-comment-966383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966383">
			February 10, 2012 at 2:49 pm</a>		</div>

		<p>Ian D.: I&#39;m pretty sure the cost of regression-testing and distributing a new Kernel32 binary vastly outweighs the lost engineering time from the occasional &quot;security vulnerability.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-966393">
				<div id="div-comment-966393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966393">
			February 10, 2012 at 3:08 pm</a>		</div>

		<p>Oh, but sir&#8230; it&#39;s only wafer-thin&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966403">
				<div id="div-comment-966403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966403">
			February 10, 2012 at 3:17 pm</a>		</div>

		<p>@Ian:</p>
<p>Well, the reasoning for the cludge did not vanish, so how could you justify removing the cludge?</p>
<p>You cannot suddenly say &#39;Oh, and by the way, you must dump all your obsolete business-critical xp machines or live without security fixes.&#39;</p>
<p>There&#39;s going to be someone suing you for sure, besides the nice advertisement.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966423">
				<div id="div-comment-966423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966423">
			February 10, 2012 at 11:18 pm</a>		</div>

		<p>The &quot;commit on demand&quot; technique doesn&#39;t actually save any physical memory, because physical pages are allocated on demand anyway (at the time of first access). The only thing it saves in the FormatMessage example is a transient, extremely short-lived 60K spike in commit, which is for all practical purposes free, even on a 12 MB machine from 15 years ago.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966443">
				<div id="div-comment-966443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966443">
			February 11, 2012 at 6:48 am</a>		</div>

		<p>&quot;[See: TOCTTOU. -Raymond]&quot;</p>
<p>I don&#39;t follow. &nbsp;The concern is that the parameter values might change between your allocation and writing the string? That seems like an unusual edge case to me. &nbsp;Wouldn&#39;t be ok to just fail in that case? The output is unlikely to be consistent anyway.</p>
<div class="post">[<i>News flash: Unusual edge cases are where the security vulnerabilities tend to hang out. And sure you could decide to fail that case &#8211; but you now have to write code to detect that you are in that case. It&#39;s not a slam-dunk &quot;Just format it twice.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966463">
				<div id="div-comment-966463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966463">
			February 11, 2012 at 7:27 am</a>		</div>

		<p>What is this kind of stupid architectural limitations? On a 32-bit system, strings should be able to be 2^32-1 bytes long. On a 64-bit system, strings should be able to be 2^64-1 bytes long. And NO slack memory should be allocated, not a single byte. It should be 100% secure too. Please go back to the drawing board and learn how to program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966473">
				<div id="div-comment-966473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre de Fermat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966473">
			February 11, 2012 at 8:34 am</a>		</div>

		<p>@640K: I had a 32-bit system with a string of 2^32-1 bytes once. I would have made a truly marvellous screenshot as proof, but unfortunately, memory was too marginal to contain it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966483">
				<div id="div-comment-966483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966483">
			February 11, 2012 at 9:39 am</a>		</div>

		<p>I was wondering what these first-chance exceptions in format message were that was filling up my debugger logs. They didn&#39;t seem to be doing any damage to my app, so I ignored them, but I always wondered. Thanks for explaining.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966493">
				<div id="div-comment-966493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966493">
			February 12, 2012 at 9:01 am</a>		</div>

		<p>It would be interesting to here some rebuttal/comment on Pavel&#39;s claim that this was a symptom of over-optimization, where the underlying systems are not understood. Kind of like that story about optimizing based on profiling and end up making the idle loop x % faster&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966503">
				<div id="div-comment-966503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966503">
			February 12, 2012 at 9:25 am</a>		</div>

		<p>Anyway, the &quot;measure, allocate, fill&quot; pattern is common, but it only works when you can guarantee that nothing&#39;s going to be changed in another thread in the middle of the process. To be robust in that situation (which you have to be, if you&#39;re packaging up the whole thing in a library function), you&#39;d need to do it in a loop, or add an extra check. Some unix libc&#39;s strdup functions get this wrong (they use memcpy, which means they can silently truncate and not null-terminate a string in this situation &#8211; MSVCRT _strdup uses strcpy_s, which at least does a check and crashes.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966513">
				<div id="div-comment-966513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jas71_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jas71@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966513">
			February 12, 2012 at 11:28 am</a>		</div>

		<p>@Pierre: Not impossible &#8211; for that matter, of course, there&#39;s nothing to say a 32 bit system should be constrained to 2^32 bytes: you can do 64 or even 128 bit arithmetic. The same techniques were much more useful back in 16 bit days, of course, where limiting resources to 64 kilobytes would be a real problem: not much market for a word processor which dies on a 64k file, or an image editor which can&#39;t load a 640&#215;480 bitmap &#8211; but Windows added the Address Windowing Extensions, so 32 bit applications could access more RAM than would fit in a 32 bit address space.</p>
<p>The 80-fold speedup from removing this &quot;efficiency&quot; technique reminded me of working on an old VB application years ago. It performed a fairly simple calculation on a batch of numbers, displaying a progress indicator which slowly crept across the screen. Tasked with speeding it up, I profiled the code &#8230; 99% of the CPU time was going on drawing the progress bar itself! Remove that, the remaining code was fast enough there was no need for any progress indicator anyway&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966523">
				<div id="div-comment-966523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John von Neumann</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966523">
			February 12, 2012 at 1:09 pm</a>		</div>

		<p>@jas88: you forgot the simplest way of all to cheat &#8212; if the string is a C string, all we require is that the final byte in memory is a NUL. If that&#39;s the case, then all of memory can be interpreted as a string. I had such a string once and making a screenshot was fairly easy because it contained bytes that decoded to instructions for doing so&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher odd alt thread-odd thread-alt depth-1" id="comment-966673">
				<div id="div-comment-966673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333#comment-966673">
			February 13, 2012 at 7:38 pm</a>		</div>

		<p>Looks like a pretty smart way of doing it really (don&#39;t worry, I&#39;ll go back to being negative soon enough).</p>
<p>I&#39;d imagine if you put a metric on the number of calls that return without the first chance exception being raised &#8212; especially when the decision was made &#8212; it would probably be above 90%. &nbsp;In C/C++, generally programmers favor the built-ins, and the built-ins (printf family, etc.) don&#39;t generally route through FormatMessage because it would be a pain to translate the one set of semantics into the other. &nbsp;So for the 90% case where FormatMessage is being used to recover a message from the OS for an error code, and then invoked a second time to format the message for MessageBox, the 4k buffer would be totally adequate.</p>
<p>Also, if you were smart, you keep the buffer around because if the thread needed 20k on one call, chances are it might make that call again. &nbsp;I&#39;d think that would be a case you&#39;d probably optimize for (for the case of FormatMessage going to a log file &#8212; which would be the most common case where I&#39;d expect to see &gt; 4k messages, potentially in an inner loop).</p>
<p>In terms of counting &#8212; that seems like it would be really hard to do without two separate implementations of FormatMessage. &nbsp;Traditionally, one version of FormatMessageA/FormatMessageW called through to the other, didn&#39;t it? &nbsp;So lets say that I&#39;m on NT so FormatMessageA calls FormatMessageW, then does a Unicode to MBCS conversion. &nbsp;How do I count that for shift-JIS (and if you want to bring modern Windows into the mix, assume that there are surrogates in the unicode string).</p>
<p>Also, for each character position you have a switch and either an accumulate or a produce (at least, that&#39;s how I&#39;d expect it works inside). &nbsp;If you assume that, then you&#39;ve got this huge ass switch statement and accumulate/reduce logic that you&#39;ve got to repeat. &nbsp;And so you&#39;re really &#8212; during the counting pass &#8212; going to probably tokenize into a series of instructions, if you were going to do it that way. &nbsp;At that point, you&#39;re back to needing a variable sized buffer &#8212; but now you need two of them.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>