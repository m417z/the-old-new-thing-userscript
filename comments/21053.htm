<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-662783">
				<div id="div-comment-662783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662783">
			August 28, 2008 at 11:44 am</a>		</div>

		<p>&#8220;Suppose you have a window message that does some work and returns a HANDLE, but it can fail, and when it does, you want to return an error code.&#8221;</p>
<p>Congratulations. &nbsp;You&#8217;ve convinced me that Aaargh! was correct: you guys are in need of a major asswhooping.</p>
<div class=post>[<i>Feel free to use WPF if you find window messages absurd. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-662793">
				<div id="div-comment-662793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662793">
			August 28, 2008 at 1:42 pm</a>		</div>

		<p>I don&#8217;t find all window messages absurd, just the kind that behave like this. &nbsp;I can&#8217;t remember ever coming across one, though, so I suppose I&#8217;ll manage to survive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-662813">
				<div id="div-comment-662813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662813">
			August 28, 2008 at 1:59 pm</a>		</div>

		<p>John: If I understand you right, you&#8217;d like to either receive a valid handle or INVALID_HANDLE as a result. But what&#8217;s so horrible about adding more context to the result with a HRESULT?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-662833">
				<div id="div-comment-662833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662833">
			August 28, 2008 at 2:32 pm</a>		</div>

		<p>Seriously people, please put this into perspective. &nbsp;Raymond is not writing about a system the Microsoft just recectly designed. &nbsp;He is writing about a legacy system developed a long time ago, when computers were underpowered (yet very expensive). &nbsp;Packing more than one piece of information into one variable was the norm.</p>
<p>Congratulations to Aaargh!, Bao, and Levicki. &nbsp;I would bet money that if these guys developed Windows then it would have been worse. &nbsp;At best they would have built something on par.</p>
<p>That&#8217;s the way it is folks. &nbsp;If you started using computers in the late 90&#8217;s then you really have no context or understanding as to why software in the early 90&#8217;s and 80&#8217;s was written the way it was written.</p>
<p>But please, don&#8217;t let me stop all of you with your insightful hindsight-is-20/20 criticisms.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-662853">
				<div id="div-comment-662853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://marksowul.com' rel='external nofollow' class='url'>Mark Sowul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662853">
			August 28, 2008 at 2:55 pm</a>		</div>

		<p>Recall the comment responding to Aargh&#8217;s rant:</p>
<p>&quot;Clearly none of you [complaining] has ever read (or just plain has not understood) a single historical article Raymond has written, because every time, some clown says, &quot;why was this done in such a stupid way&quot; and every time the answer is &quot;because it had to run on a toaster with a 2 MHz processor and 5 bytes of RAM.&quot; &nbsp;Bonus points if the person also complains about how bloated software is nowadays.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-662873">
				<div id="div-comment-662873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrkMatter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662873">
			August 28, 2008 at 3:42 pm</a>		</div>

		<p>I&#8217;m not sure I see how &quot;history&quot; considerations fit into this. The function has a codomain that includes &quot;handles&quot; and &quot;errors&quot;. You need to be able to express them all, hence you divide the set of possible return values in such a way that they are easily distinguishable. What&#8217;s strange, wrong, weird, or unnatural about that? It&#8217;s how it has been done since the dawn of time, and it has always worked perfectly fine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-662893">
				<div id="div-comment-662893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662893">
			August 28, 2008 at 4:46 pm</a>		</div>

		<p>Aaargh!, Bao, and Levicki are heroes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-662903">
				<div id="div-comment-662903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Slippery Slope Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662903">
			August 28, 2008 at 4:53 pm</a>		</div>

		<p>Sure, stuffing handles and errors into the same return value might seem harmless. &nbsp;But it&#8217;s a slippery slope. &nbsp;Next thing you know, cats and dogs will be mating with each other and there&#8217;s not a damn thing you can do about it!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-662913">
				<div id="div-comment-662913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662913">
			August 28, 2008 at 5:17 pm</a>		</div>

		<p>&nbsp;// if this assertion fires, then somebody tried to</p>
<p>&nbsp;// pack an invalid handle!</p>
<p>&nbsp;assert((Lresult &amp; 1) == 0);</p>
<p>Or even assert((Lresult &amp; 3) == 0);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-662923">
				<div id="div-comment-662923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662923">
			August 28, 2008 at 7:14 pm</a>		</div>

		<p>&quot;Aaargh!, Bao, and Levicki are heroes.&quot;</p>
<p>Poor Norman&#8230; how quickly we forget.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-662933">
				<div id="div-comment-662933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Addict</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662933">
			August 28, 2008 at 7:55 pm</a>		</div>

		<p>..after I finish smoking my crack pipe. I&#8217;ve seen a lot of code in my life, but I&#8217;ve almost never seen a situation where this kind of trick has been needed, and in the places where it has been used, its use has been questionable.</p>
<p>Why??</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-662953">
				<div id="div-comment-662953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Messiant R</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662953">
			August 29, 2008 at 12:16 am</a>		</div>

		<p>This reminded me of the uninitialised floating point article you wrote not so long ago.</p>
<p>If we think of the hidden bit and the signaling NaN, the situation is quite similar as in this article: encoding different types of data inside a container type, and rely on the representation of the container data to indicate the type of the stored data.</p>
<p>Does it make for beautiful, easy to understand code? Not really, but we could simply see it as taking advantage of the contract that has been supplied to us. Which begs the question: if something that looks hackish is in fact reliable, is it really a hack? If yes, when does it move into the trick department?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-662983">
				<div id="div-comment-662983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662983">
			August 29, 2008 at 4:18 am</a>		</div>

		<p>&quot;Which begs the question: if something that looks hackish is in fact reliable, is it really a hack? If yes, when does it move into the trick department?&quot;</p>
<p>Yes, it is. &nbsp;It becomes a trick when it becomes difficult for somebody looking at the code without already knowing what&#8217;s going on to understand it.</p>
<p>This stuff clearly falls into that category.</p>
<p>I mean, OK, I&#8217;ve used this kind of stuff before (I once wrote a garbage collector that relied on using the empty two bits at the bottom of a pointer to an aligned memory block), but that doesn&#8217;t make it good practice, IMO.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663043">
				<div id="div-comment-663043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-663043">
			August 29, 2008 at 11:01 am</a>		</div>

		<p>Let&#8217;s be clear on something. &nbsp;I am not saying that the programming tricks described by Raymond should be used today. &nbsp;It is not the case that &quot;it worked in the past so let&#8217;s keep doing it that way.&quot; &nbsp;Clearly with Moore&#8217;s law giving us the gigs of clock cycles and RAM we can afford to write code for humans instead of computers (knowing that the code will be bigger and slower but also knowing that the increase doesn&#8217;t impact performance requirements).</p>
<p>However, rewind the calendar. &nbsp;This is how stuff was done back then because the alternative was that your program did&#8217;t run on the hardware of the day.</p>
<p>In fact, look at Part 3 of this series. &nbsp;Raymond shows a piece of code that is something most of us would write to deal with local and remote handles. &nbsp;He has an interface and two subclases to encapsulate the two kinds of handles and to provide type safety for those handles. &nbsp;But, look at how he critiques the design:</p>
<p>&quot;Your memory requirements have tripled and you added another level of indirection (costing you locality), just for that 1% case&quot;</p>
<p>Now pay real close attention. &nbsp;Given that it is the year 2008 AD, computers have become so powerful that the above performance hit described above is probably acceptable. &nbsp;So we can justify the design. &nbsp;However, go back a couple of decades and the above performance hit is absolutely unacceptable.</p>
<p>If you are going to continue arguing this then you are a lost cause. &nbsp;Engineering is about difficult trade offs. &nbsp;The complainers on this blog are clearly not engineers. &nbsp;They are just plain old programmers who think they have a clue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-662993">
				<div id="div-comment-662993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-662993">
			August 29, 2008 at 5:21 am</a>		</div>

		<p>That&#8217;s nice, but I think the best method is a variation on the two examples: Still pack all in one value (like the first example), but use the mapping of the second one (the one where the HANDLE is stored right-shifted) and use the high bit as the discriminating bit.</p>
<p>That way, we have either:</p>
<p>* a failed HRESULT, usable as-is.</p>
<p>* a succeeded HRESULT, whose lowest 31 bits are the HANDLE&#8217;s highest ones.</p>
<p>And the SUCCEEDED() and FAILED() macros work on them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663193">
				<div id="div-comment-663193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrkMatter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-663193">
			August 29, 2008 at 4:47 pm</a>		</div>

		<p>&quot;knowing that the code will be bigger and slower but also knowing that the increase doesn&#8217;t impact performance requirements&quot;</p>
<p>Clearly, it does. You just said it got bigger and slower. I would much rather my additional RAM, clock speed and cores go toward making my application faster, than for them to be wasted on your &quot;highly engineered&quot; code.</p>
<p>As has been stated in the comments to part 3, it&#8217;s not premature optimization unless it&#8217;s harder or more obscure to implement. And honestly, what Raymond has been describing here isn&#8217;t rocket science.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-663273">
				<div id="div-comment-663273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-663273">
			August 31, 2008 at 6:57 am</a>		</div>

		<p>From Raymond&#8217;s article:</p>
<p>&quot;How can you provide 33 bits of information with only 32 bits?&quot;</p>
<p>For 33 bits or more, pointers to a malloc&#8217;ed memory block are a solution.</p>
<p>However:</p>
<p>1) It requires the caller to free() the block, otherwise there&#8217;re memory leaks. That&#8217;s not possible if the message has to be backward compatible with some previous version of the software.</p>
<p>2) The caller has to be in the same process as the callee, which is likely, as handles are rarely valid in more than one process (except inherited handles).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663283">
				<div id="div-comment-663283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-663283">
			August 31, 2008 at 3:48 pm</a>		</div>

		<p>Why people keep mentioning me in negative context here even when I say nothing whatsoever?</p>
<p>Andy said : &quot;If I understand you right, you&#8217;d like to either receive a valid handle or INVALID_HANDLE as a result. But what&#8217;s so horrible about adding more context to the result with a HRESULT?&quot;</p>
<p>Few ideas off the top of my head:</p>
<ol>
<li>Because HANDLEs were supposed to be opaque and non-interpretable by the application and HRESULT is a value?</li>
<li>
<p>Because you are attempting to interpret the value of a HANDLE when you should only check whether you have INVALID_HANDLE_VALUE (or NULL)?</p>
</li>
<li>
<p>Because it defeats type-checking?</p>
</li>
<li>
<p>Because it makes your interface ambiguous?</p>
</li>
<li>
<p>Because there is a SetLastError()/GetLastError() API?</p>
</li>
<li>
<p>Because there is SetWindowLong()/GetWindowLong() API?</p>
</li>
<li>
<p>Because a message can contain a separate field for a full-blown error code?</p>
</li>
</ol>
<p>Pick one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-663303">
				<div id="div-comment-663303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/08/29/8904342.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-663303">
			August 31, 2008 at 11:05 pm</a>		</div>

		<p>Extending the namespace to cover new object types.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663393">
				<div id="div-comment-663393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-663393">
			September 1, 2008 at 4:27 pm</a>		</div>

		<p>&quot;1. Because HANDLEs were supposed to be opaque and non-interpretable by the application and HRESULT is a value?&quot;</p>
<p>A HANDLE is opaque, except the last 2 bits. This is conceptually ugly, but the only real stress it puts on the Windows implementation is a limit to 1073741824 kernel handles per process. Not a big deal.</p>
<p>&quot;3. Because it defeats type-checking?&quot;</p>
<p>Yep.</p>
<p>&quot;5. Because there is a SetLastError()/GetLastError() API?&quot;</p>
<p>Doesn&#8217;t work between threads.</p>
<p>&quot;6. Because there is SetWindowLong()/GetWindowLong() API?&quot;</p>
<p>Race condition if there&#8217;re concurrent threads sending messages to the same window.</p>
<p>&quot;7. Because a message can contain a separate field for a full-blown error code?&quot;</p>
<p>Do you mean using LPARAM as a pointer to an error code set on output?</p>
<p>Yes, that&#8217;s ok, however, I assume Raymond&#8217;s example is to be put in a context where the message parameters &amp; result must conform to a predefined interface, in that case, it&#8217;s not possible to redefine your parameters as you wish.</p>
<p>There&#8217;s also an inter-process communication issue, fortunately, it&#8217;s irrelevant as HANDLEs aren&#8217;t typically passed through processes boundaries.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-663453">
				<div id="div-comment-663453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Harris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-663453">
			September 2, 2008 at 7:42 am</a>		</div>

		<p>Messiant: &quot;Which begs the question: if something that looks hackish is in fact reliable, is it really a hack?&quot;</p>
<p>I wouldn&#8217;t call it reliable. It&#8217;ll fail if someone tries to return the result of GetCurrentProcess(), or any other sentinal value. This article and the previous one both assume the two bits are available for them to play with, and they play with them in conflicting ways. An elegant solution would be scalable and not conflict with other code.</p>
<p>Sometimes hacks are justified, eg for performance reasons, but let&#8217;s not pretend they aren&#8217;t hacks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663463">
				<div id="div-comment-663463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080828-00/?p=21053#comment-663463">
			September 2, 2008 at 7:43 am</a>		</div>

		<p>&quot;There&#8217;s also an inter-process communication issue, fortunately, it&#8217;s irrelevant as HANDLEs aren&#8217;t typically passed through processes boundaries.&quot;</p>
<p>Except for IPC object handles: Anonymous pipes, anonymous shared memory, etc. In brief, the very reason DuplicateHandle() can do interprocess. And very easy to pass through a Windows message.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>