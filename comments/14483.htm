<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-822523">
				<div id="div-comment-822523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100326-00/?p=14483#comment-822523">
			March 26, 2010 at 8:15 am</a>		</div>

		<p>I don&#8217;t have the knowledge pool of hundreds of application (MS might have a better clue on this) but I would have thought that, in the case of multiple threads having windows, the initial thread could be chosen as the real one to wait to go idle.</p>
<p>I&#8217;m sure there is some wily software out there where the main window thread ends up being some other thread and the initial thread handles the splash screen, but for most software, my guess is that the initial thread ends up being the main window thread.</p>
<p>I know that&#8217;s how I&#8217;ve coded it in the past (the startup code launching a thread to display the spalsh screen).</p>
<p>It&#8217;s a small improvement to an aguably unfixable function, but an improvement nonetheless.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-822533">
				<div id="div-comment-822533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100326-00/?p=14483#comment-822533">
			March 26, 2010 at 9:05 am</a>		</div>

		<p>@ Pierre:</p>
<p>There is a class of programs that invalidates your assumption that the initial thread is most likely to be the &quot;main&quot; thread: those which operate based primarily on modular plugins, with minimal built-in functionality. Here, the more usual case is that the initial thread performs fairly minimal activities, as the &quot;real&quot; thread is launched via a desired plug-in DLL.</p>
<p>Trying to apply extremely broad assumptions where there is no actual, logical constraint is a very, very bad practice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-822573">
				<div id="div-comment-822573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://henning.makholm.net/' rel='external nofollow' class='url'>Henning Makholm</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100326-00/?p=14483#comment-822573">
			March 26, 2010 at 11:33 am</a>		</div>

		<p>Is there a &#8220;not&#8221; too many in the first paragraph?</p>
<div class=post>[<i>Indeed there is. Fixed, thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-822583">
				<div id="div-comment-822583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://twitter.com/deskin' rel='external nofollow' class='url'>Deskin Miller</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100326-00/?p=14483#comment-822583">
			March 26, 2010 at 12:02 pm</a>		</div>

		<p>Back when the global busy/idle state was updated by each thread, would the state get updated (and how) when a thread exited? I&#8217;m envisioning a program where both threads are idle, then one becomes busy and the global state indicates busy; then that thread exits while still busy, leaving only one thread, which is in fact idle, but the global status indicates busy. </p>
<div class=post>[<i>No such cleanup took place when a thread exited. So you can&#8217;t even say that &#8220;busy&#8221; means that there is at least one busy thread! The flag was basically garbage for multi-threaded programs. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-822593">
				<div id="div-comment-822593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100326-00/?p=14483#comment-822593">
			March 26, 2010 at 1:41 pm</a>		</div>

		<p>I don&#8217;t understand the &quot;WaitForSingleObject&quot; reference. The link points to a post about GetDateFormat and this post is about WaitForInputIdle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-822613">
				<div id="div-comment-822613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Messiant R</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100326-00/?p=14483#comment-822613">
			March 26, 2010 at 8:20 pm</a>		</div>

		<p>@ Gabe</p>
<p>Surely WaitForInputIdle is meant instead of WaitForSingleObject.</p>
<p>And the link simply explains another case of description changing as a result of changes in functionality, the actual functions don&#8217;t matter.</p>
<div class=post>[<i>Fixed the function name, thanks. And the link target is correct, as you figured out. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>