<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1301205">
				<div id="div-comment-1301205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301205">
			July 3, 2017 at 7:09 am</a>		</div>

		<p>And here is why I&#8217;ve stopped using c++, preferring c#!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1301215">
				<div id="div-comment-1301215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Schroedl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301215">
			July 3, 2017 at 8:15 am</a>		</div>

		<p>Some pretty cool techniques here!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1301225">
				<div id="div-comment-1301225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301225">
			July 3, 2017 at 8:31 am</a>		</div>

		<p>Nice!  A great example and motivation for await and co_await &#8211; they make this kind of async continuation based work so much easier to read and write correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1301235">
				<div id="div-comment-1301235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rich</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301235">
			July 3, 2017 at 9:36 am</a>		</div>

		<p>that deserves a round of applause !</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1301255">
				<div id="div-comment-1301255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301255">
			July 3, 2017 at 12:00 pm</a>		</div>

		<p>I don&#8217;t like the idea of implementing the move constructor using the move assignment operator / std::swap().</p>
<p>The move constructor is required to leave &#8220;other&#8221; in a valid (but otherwise unspecified) state. This is so that the destructor can run correctly on the moved-from value. By swapping with an uninitialized *this, you leave behind uninitialized memory in other, and the destructor call has undefined behavior. Now, I&#8217;m not sure what the rules with ^ pointers are &#8212; if these are implicitly initialized to nullptr, the code here happens to be fine. But applying the same move constructor pattern to other classes is likely to result in subtle bugs.</p>
<p>A much less error-prone pattern for move constructors is to move-construct the members and then reset the state in other so that the destructor becomes a no-op:<br />
  unique_close(unique_close&amp;&amp; other)<br />
     : m_t(std::move(other.m_t))<br />
  {<br />
    other.m_t = nullptr;<br />
  }</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1301776">
				<div id="div-comment-1301776" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301776">
			July 11, 2017 at 7:30 am</a>		</div>

		<p>Hat pointers default-construct as <code>nullptr</code>, so we&#8217;re okay.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command even thread-odd thread-alt depth-1" id="comment-1301285">
				<div id="div-comment-1301285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301285">
			July 3, 2017 at 11:52 pm</a>		</div>

		<p>In a way, this post reminds me of my childhood: I used to read computer magazines that had Pascal or C source codes, then try to reproduce them in QBasic! Of course, those programming languages have a very rich and flexible type system and QBasic didn&#8217;t even have one-byte data types. Oh, the troubles!</p>
<p>Then I purchased a Borland Pascal license and left the QBasic world behind, just like a baby who leaves the restricted world of womb behind.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1301295">
				<div id="div-comment-1301295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ADev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301295">
			July 4, 2017 at 5:55 am</a>		</div>

		<p>Can&#8217;t wait for CoreRT to come and finaly get rid of that ancient and ugly C++</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even thread-odd thread-alt depth-1 parent" id="comment-1301305">
				<div id="div-comment-1301305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301305">
			July 4, 2017 at 6:18 am</a>		</div>

		<p>I&#8217;m pretty sure you could use the <code>default</code> move assignment and constructor here for <code>unique_close</code>, just declaring them automatically deletes the copy members making the type move only. In essence <code>unique_close(unique_close&amp;&amp; other) = default; </code> should do the trick.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1301556">
				<div id="div-comment-1301556" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301556">
			July 7, 2017 at 8:03 am</a>		</div>

		<p>No: the default implementation of &#8220;move&#8221; for primitive types such as handles is to copy the pointer.  This would result in double (and premature) free, when the moved-from object runs its destructor.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1301335">
				<div id="div-comment-1301335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301335">
			July 4, 2017 at 11:13 am</a>		</div>

		<p>I came up with this nice use of the coroutines TS recently (hopefully the formatting comes through):</p>
<p>template<br />
auto enumerate(T &amp;&amp; sequence)<br />
{<br />
    int n = 0;<br />
    for (auto &amp;&amp; item : sequence) {<br />
        co_yield std::make_pair(n, item);<br />
        ++n;<br />
    }<br />
}</p>
<p>I think I should be forwarding to make_pair, and I&#8217;m not sure the &amp;&amp; on item is right, but I&#8217;m not sure how to do this all correctly at this point. This is doable but far far more obnoxious without co_yield.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1301405">
				<div id="div-comment-1301405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm100</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301405">
			July 5, 2017 at 8:14 am</a>		</div>

		<p>the fact that this idiom keeps getting implemented over and over again just shows how useful &#8216;finally&#8217; would be in c++, but they stubbornly refuse to do it. &#8220;For the 50th time today &#8211; there&#8217;s no call for it&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jeremytais even thread-even depth-1" id="comment-1301435">
				<div id="div-comment-1301435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301435">
			July 5, 2017 at 11:57 am</a>		</div>

		<p>I have to confess that I have a LOCK #define for a CRITICAL_SECTION wrapper class that does exactly what your footnote 2 does (I wrote it years ago but still occasionally pull it out). </p>
<p>It is moral outrage, but still makes the critical section blocks so much easier to follow when reading the code.  And I remember clearly when I was puzzling that out and the feeling I had when I realized that I had to add a useless bool conversion operator to make it work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1301555">
				<div id="div-comment-1301555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301555">
			July 7, 2017 at 8:01 am</a>		</div>

		<p>BUG: The unique_close move constructor swaps an uninitialized member with the corresponding member of the source object.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>