<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1091963">
				<div id="div-comment-1091963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1091963">
			November 28, 2013 at 7:08 am</a>		</div>

		<p>&gt;How can you determine which interpretation is what the compiler actually does?</p>
<p>Decode the decorated name.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091983">
				<div id="div-comment-1091983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1091983">
			November 28, 2013 at 7:13 am</a>		</div>

		<p>The linker will decode the name for you if there&#39;s an error:</p>
<p>error LNK2019: unresolved external symbol &quot;void __cdecl something(char *,&#8230;)&quot; (?something@@YAXPADZZ) referenced in function _main</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091993">
				<div id="div-comment-1091993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1091993">
			November 28, 2013 at 7:21 am</a>		</div>

		<p>I&#39;d prefer that a variadic stdcall function was &quot;caller cleans required arguments, callee cleans the rest&quot;.</p>
<p>I mean, the ellipsis could just rightly mean &quot;caller cleans whatever was in &#8230;&quot; in every calling convention, and leave the rest alone.</p>
<div class="post">[<em>Why create extra work for no reason? The caller has to clean the variadic parameters, so it may as well clean up the fixed parameters at no extra cost. It&#39;s not like adding 12 takes longer than adding 8. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092003">
				<div id="div-comment-1092003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VinDuv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1092003">
			November 28, 2013 at 7:34 am</a>		</div>

		<p>After some testing, it appears that for variadic functions, MinGW gcc does not put the @x suffix (so the decoration is as if __cdecl was used). I guess it is the same thing with other compilers.</p>
<p>This &quot;@&lt;number of bytes of parameters&gt;&quot; suffix used by __stdcall offers some protection on calling a callee-clean function with the wrong number of parameters, which would result in stack corruption, so it makes sense for me to not use this decoration for functions which are not callee-clean (it would be messy if the callee-clean &quot;__stdcall void f(int x)&quot; and the caller-clean &quot;__stdcall void f(int x, &#8230;)&quot; had the same decorated name&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1092103">
				<div id="div-comment-1092103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">igorsk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1092103">
			November 28, 2013 at 1:59 pm</a>		</div>

		<p>Answer: compile that snippet, dump the object file and demangle (undecorate) the symbol name.</p>
<p>Undecoration of :- &quot;?something@@YAXPADZZ&quot;</p>
<p>is :- &quot;void __cdecl something(char *,&#8230;)&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092123">
				<div id="div-comment-1092123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric TF Bat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1092123">
			November 28, 2013 at 3:10 pm</a>		</div>

		<p>&gt; Wow that&#39;s a really bad explanation. Kind of the lazy developer explanation.</p>
<p>You speak of laziness as if it were a bad thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1092143">
				<div id="div-comment-1092143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1092143">
			November 28, 2013 at 3:49 pm</a>		</div>

		<p>[Why create extra work for no reason? The caller has to clean the variadic parameters, so it may as well clean up the fixed parameters at no extra cost. It&#39;s not like adding 12 takes longer than adding 8. -Raymond]</p>
<p>I can imagine a calle-cleaned variadic. One error in va_args and you unbalance the stack though.</p>
<div class="post">[<em>Not sure how that&#39;s possible, given that <code>int f(int i, ...) { return i; }</code> is a legal function. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092043">
				<div id="div-comment-1092043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bystander</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1092043">
			November 28, 2013 at 11:47 am</a>		</div>

		<p>&gt; My guess is that it&#39;s to make the compiler options /Gr (set default calling convention to __fastcall) and /Gz (set default calling convention to __stdcall) less annoying. </p>
<p>&gt; Automatic conversion of variadic functions to __cdecl means that you can just add the /Gr or /Gz command line switch to your compiler options, and everything will still compile and run (just with the new calling convention). </p>
<p>Wow that&#39;s a really bad explanation. Kind of the lazy developer explanation.</p>
<p>Here&#39;s a spec for the warning: &quot;If I explicitely (i.e. in source code) ask for a __stdcall convention, raise a warning if it can&#39;t be satisfied and is automatically changed to another convention.&quot;</p>
<p>Note that this warning would not be raised for default conventions such as /Gz. You could say Gz means set the default convention to __stdcall *where applicable*.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1092173">
				<div id="div-comment-1092173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1092173">
			November 29, 2013 at 4:49 am</a>		</div>

		<p>I can imagine a calling convention with callee-cleaned variadics: just pass a hidden argument with the number of bytes to pop from the stack.</p>
<p>I wonder how callee-cleaned variadics would work on x86, though. From a quick search, it appears that the ret instruction only takes an immediate, so there is no easy way to pop a variable number of parameters and return, since the return address has to be on the stack. This is unlike for instance ARM, where the return address can be on a register, so you can manipulate the stack freely before returning. That is probably the real reason why the Win32 calling conventions do not have callee cleaned variables: too complex to implement, and would only lose performance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092203">
				<div id="div-comment-1092203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1092203">
			November 29, 2013 at 8:03 am</a>		</div>

		<p>[Why create extra work for no reason? &#8230; -Raymond]</p>
<p>I see it the other way around: less work. A fastcall variadic function could put the required arguments in registers and push variadic arguments on the stack. So, in the case where the variadic arguments are not provided and not used, it&#39;s a plain fastcall (I know in x64 everything is cdecl).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1092223">
				<div id="div-comment-1092223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1092223">
			November 29, 2013 at 8:20 am</a>		</div>

		<p>@Cesar, I&#39;ve seen implementations of Lisp compile functions that pass the number of arguments in ECX/RCX, mainly for assertion. In theory, they could clean up the stack, and I think at least one actually does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092283">
				<div id="div-comment-1092283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1092283">
			November 29, 2013 at 11:49 am</a>		</div>

		<p>[Not sure how that&#39;s possible, given that int f(int i, &#8230;) { return i; } is a legal function. -Raymond]</p>
<p>It&#39;s not a legal stdcall function, and neither would it be a legal callee-cleaned variardic function.</p>
<div class="post">[<em>And how would a function tell the compiler how many bytes to remove upon return? And how would the compiler generate code that did that which didn&#39;t mess up the return address predictor? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1092313">
				<div id="div-comment-1092313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1092313">
			November 29, 2013 at 6:18 pm</a>		</div>

		<p>[And how would a function tell the compiler how many bytes to remove upon return?]</p>
<p>By using the address where the va_list variable ends up of course.</p>
<p>[And how would the compiler generate code that did that which didn&#39;t mess up the return address predictor? -Raymond]</p>
<p>There&#39;s no good reason to use this on a modern processor.</p>
<div class="post">[<em>And what if there is more than one va_list variable? And if there is no good reason to use this on a modern processor, why are you suggesting it? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092353">
				<div id="div-comment-1092353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1092353">
			November 30, 2013 at 6:52 am</a>		</div>

		<p>Looking back to what I stupidly wrote, let me correct; where you read:</p>
<p>&quot;caller cleans required arguments, callee cleans the rest&quot;</p>
<p>I really ment:</p>
<p>&quot;callee cleans required arguments, caller cleans the rest&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1092393">
				<div id="div-comment-1092393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harald van Dijk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1092393">
			December 1, 2013 at 1:03 am</a>		</div>

		<p>&gt; &quot;It&#39;s not a legal stdcall function, and neither would it be a legal callee-cleaned variardic function.&quot;</p>
<p>So if the function is declared separately, that declaration requires __cdecl, and perfectly valid standard C or C++ code that compiles on every other system needs Microsoft-specific additions to make it work there too?</p>
<p>&gt; &quot;By using the address where the va_list variable ends up of course.&quot;</p>
<p>Even ignoring the functions that don&#39;t need the variadic parameter values at all, what about those that use va_start and va_end, but nothing else, because they pass the va_list to a function such as vprintf?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092423">
				<div id="div-comment-1092423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131128-00/?p=2543#comment-1092423">
			December 1, 2013 at 4:39 pm</a>		</div>

		<p>[And if there is no good reason to use this on a modern processor, why are you suggesting it? -Raymond]</p>
<p>I can imagine != I think it&#39;s a good idea.</p>
<div class="post">[<em>Oh. This Web site is about practical programming. There&#39;s no point discussion a design that is impractical. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>