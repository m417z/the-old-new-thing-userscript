<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1306125">
				<div id="div-comment-1306125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306125">
			August 11, 2017 at 7:21 am</a>		</div>

		<p>I found this interesting, and in hindsight, probably obvious:  &#8220;Conditional branches backward are predicted taken. Conditional branches forward are predicted not taken.&#8221;  Something I never really thought about before, but I&#8217;m sure it&#8217;s true.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1306135">
				<div id="div-comment-1306135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David-T</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306135">
			August 11, 2017 at 7:33 am</a>		</div>

		<p>True for the Alpha AXP (presumably), definitely not true for modern CISC x86(-64) processors, which have ingenious branch prediction mechanisms.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1306136">
				<div id="div-comment-1306136" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306136">
			August 11, 2017 at 7:44 am</a>		</div>

		<p>It&#8217;s a fairly standard &#8220;starter algorithm.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1306165">
				<div id="div-comment-1306165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306165">
			August 11, 2017 at 8:49 am</a>		</div>

		<p>And I guess it&#8217;s one that works surprisingly well given its simplicity: most (if not all) backward jumps are at the end of loops, which are expected to run more than once (thus, it&#8217;s more probable that the branch is taken). But forward jumps are usually at conditional sentences, which, if written properly*, should have the general case at the &#8220;then&#8221; and the corner case at the &#8220;else&#8221;, so most times they won&#8217;t be taken (you see, the conditional branch at an &#8220;if&#8221; is taken to skip the &#8220;then&#8221; and go to the &#8220;else&#8221; or continue outside).</p>
<p>* IMHO, for readability of code, conditionals should be written that way. I&#8217;d say that static analysis in the compiler could sort them that way, but static analysis wasn&#8217;t so advanced in the 90s, and that time machine is still in the works&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1306195">
				<div id="div-comment-1306195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306195">
			August 11, 2017 at 9:21 am</a>		</div>

		<p>Interesting.</p>
<p>I think a majority of the conditionals I write are of the form &#8220;if (failure) return;&#8221; or &#8220;if (failure) break;&#8221; or &#8220;if (failure) continue;&#8221;, where most of the time the failure is unexpected, and the corner case is the &#8220;then&#8221;, while the general case is the (implicit) &#8220;else&#8221;.</p>
<p>And a large proportion of what&#8217;s left are &#8220;if (config_A) then&#8230; else if (config_B) then&#8230;&#8221; where the general case is unpredictable, and somewhat evenly matched between different setups, but will always be the same for any specific setup.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1306197">
				<div id="div-comment-1306197" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306197">
			August 11, 2017 at 10:00 am</a>		</div>

		<p>When cited the preferred order for thens and elses, I was talking about the situations where there is a general case and a corner case. Of course, there is no use in trying to order an if with no probable outcome (or one without an else!). But whenever I use a chain of ifs to test for several conditions, I try to sort them in order of probability, putting first the most probable ones (the code is easier to understand, and in the long run, you have to test less conditions to find the right case). The only exception is when testing for a case is expensive: then I try to put cheaper tests before (one of the few cases when I favor performance over style nowadays).</p>
<p>Anyway, when writing in a high level language, I try to have in mind how it may get translated into machine instructions and use that knowledge to write more efficient code. I guess how many programmers do that nowadays.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1306215">
				<div id="div-comment-1306215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306215">
			August 11, 2017 at 11:18 am</a>		</div>

		<p>I&#8217;m not sure I agree:<br />
if (!success) return;<br />
&#8230;stuff&#8230;<br />
return;<br />
is equivalent to:<br />
if (!success) {<br />
   return;<br />
}<br />
else {<br />
   &#8230;stuff&#8230;<br />
   return;<br />
}<br />
&#8230;it&#8217;s just that in this case the &#8216;else&#8217; is explicit rather than implicit. Note that this is also equivalent to:<br />
if (success) {<br />
   &#8230;stuff&#8230;<br />
}<br />
return;<br />
You can do a similar thing with &#8220;continue&#8221;, by reversing the test and nesting the remainder of the loop by one level.</p>
<p>You were saying that, if success is the common case, you&#8217;d pick version 3, because the common case is part of the &#8220;then&#8221; rather than the &#8220;else&#8221;. A number of my coworkers also prefer it, for reasons unknown. Whereas I prefer version 1.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1306216">
				<div id="div-comment-1306216" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306216">
			August 11, 2017 at 11:58 am</a>		</div>

		<p>In this case, version 3 has the advantage that it lets you have a single exit point in the function, apart from the if optimization. Maybe your coworkers use it because of that.</p>
<p>I prefer to only have exit points in two places: at the very beginning of the function, during parameter and condition validation (fail fast before doing any work!), and a single &#8220;work done&#8221; point at the last line, returning the value stored in a variable called &#8220;res&#8221; which is set previously at whichever execution path the function takes. It helps understanding the working of the function, and the single exit point lets you set a breakpoint you are sure will be hit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1306245">
				<div id="div-comment-1306245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306245">
			August 11, 2017 at 2:40 pm</a>		</div>

		<p>Of course, an optimizing compiler with knowledge of the target architecture&#8217;s branch predictor could convert any of these to the &#8220;right&#8221; conditional branch arrangement.  Ideally, you write what makes sense to you, and the compiler deals with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1306265">
				<div id="div-comment-1306265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306265">
			August 11, 2017 at 11:36 pm</a>		</div>

		<p>I&#8217;ve never understood the reasoning behind the &#8220;single exit point&#8221;. What is up with that?</p>
<p>Whereas having the code that makes up the actual intended logic of your function be only one or two indents in throughout the entire function body &#8211; that reads so much more cleanly to me than having pieces get gradually more and more indented, followed by a long string of &#8220;}&#8221; lines at the end. I find it makes your source control changesets much cleaner on average, too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1306266">
				<div id="div-comment-1306266" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306266">
			August 12, 2017 at 3:11 am</a>		</div>

		<p>Having a single exit point makes it easier to ensure that any temporary resources used during the function have been returned to their prior state. It&#8217;s mostly a hangover from when languages didn&#8217;t have mechanisms to handle that for you, and all the cleanup code had to be hand-written every time.</p>
<p>It&#8217;s worth noting though, that the compiler isn&#8217;t necessarily going to put your blocks in the order you wrote them in the program. For example, given the following code:</p>
<p>SomeTypeWithADestructor foo;<br />
if (shouldReturnEarly()) return;<br />
// &#8230; more code</p>
<p>There are kind of two ways the compiler could arrange things:<br />
&#8211; A block which invokes foo&#8217;s destructor, does anything else that needs to be done in the function epilogue, and returns. The if statement is a forwards conditional jump over this block if the shouldReturnEarly() returns false.<br />
&#8211; A forwards conditional jump that jumps to the part of the normal epilogue where foo&#8217;s destructor is called.</p>
<p>Since the function epilogue is largely the same for the early-return and normal-return cases, I would generally expect that the compiler would merge them and implement the early-return just as a conditional forward jump to the right part of the epilogue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1306355">
				<div id="div-comment-1306355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306355">
			August 13, 2017 at 11:11 pm</a>		</div>

		<p>My personal approach is generally to put the shorter of the two code blocks (&#8220;then&#8221; vs &#8220;else&#8221;) first, unless it turns out really awkard. I like having the &#8220;else&#8221; clause as close as possible, visually, to the root &#8220;if&#8221; statement, makes it harder to overlook.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1306366">
				<div id="div-comment-1306366" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306366">
			August 14, 2017 at 12:38 am</a>		</div>

		<p>@JDG</p>
<p>If you are putting so much code in your if {} block, that you can no longer see the else then you should be refactoring the code into functional methods. It depends on what the code is trying to do, people jump through hoops to get a single exit and then have to make up other rules which tangle the code further. You can certainly create spaghetti code without touching goto.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1306566">
				<div id="div-comment-1306566" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306566">
			August 16, 2017 at 2:31 am</a>		</div>

		<p>&#8220;the single exit point lets you set a breakpoint you are sure will be hit.&#8221;</p>
<p>In .NET as also as Delphi (at least in Debug builts) this is a non-issue. The compiler transforms early exists in jumps to the real exit, where the stack frame gets discarded. Just set a break point at the last &#8220;}&#8221; or &#8220;end;&#8221; or &#8220;End Sub&#8221;</p>
<p>&#8220;a single exit point makes it easier to ensure that any temporary resources&#8221;</p>
<p>Use try/finally or &#8220;using&#8221; for each and every locally allocated resource. Any language without such constructs is a pain.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1306357">
				<div id="div-comment-1306357" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306357">
			August 14, 2017 at 12:30 am</a>		</div>

		<p>@Karellen</p>
<p>Yeah, I don&#8217;t understand always using a single exit point. There are times when a single exit point is preferable and times when other patterns are preferable. The code should be clear enough to identify where the exit points are.</p>
<p>If you&#8217;re creating dense code with lots of ? and code jammed together so that you can miss the return statement, then you&#8217;re probably missing a whole lot more than the return when you&#8217;re reading as well.</p>
<p>I try to make my code read like english. My brain thanks me for that as it learnt english first.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1306206">
				<div id="div-comment-1306206" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306206">
			August 11, 2017 at 10:24 am</a>		</div>

		<p>Yes, I was thinking about the branch at the end of a loop.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1306156">
				<div id="div-comment-1306156" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deleted' rel='external nofollow' class='url'>Pierre B.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306156">
			August 11, 2017 at 8:01 am</a>		</div>

		<p>I have to say I&#8217;ve started to hate the assembler design: arithmetic op are in src1, src2, dst order, yet some other op like LDL the dst is the first operand. (Same for branch, where the destination register receiving the return address is put first.)</p>
<p>The brain has to constantly switch from dst-last to dst-first. Why didn&#8217;t they design stuff like LDL to have dst last?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1306175">
				<div id="div-comment-1306175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306175">
			August 11, 2017 at 8:50 am</a>		</div>

		<p>@Pierre<br />
Be thankful it&#8217;s not infix &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1306185">
				<div id="div-comment-1306185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306185">
			August 11, 2017 at 8:56 am</a>		</div>

		<p>I guess it mimics the physical layout of the encoded instruction. But I think you are right: it&#8217;s inconsistent, and makes reading and writing code a lot more difficult and error prone. Luckily, nowadays most code is generated by compilers, and you only have to look at it when debugging: last time I wrote production code in assembly was exactly 20 years ago (August 1997). That&#8217;s without taking into account a couple of games I have developed for the Apple II in my spare time, of course, but that&#8217;s an entirely different story&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1306295">
				<div id="div-comment-1306295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Lund</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306295">
			August 12, 2017 at 6:10 am</a>		</div>

		<p>LDGP?  Pseudo instructions in general?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1306316">
				<div id="div-comment-1306316" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805#comment-1306316">
			August 12, 2017 at 12:45 pm</a>		</div>

		<p>So I am finding quite a bit of what I thought I knew to be now quite undermined.</p>
<p>In particular, the Alpha processor is somehow a super-scalar processor that can&#8217;t read one memory address per instruction cycle. This is strange of its own (it must read one memory address per instruction cycle to execute an instruction) for any processor that has separate L1 and L2 caches.</p>
<p>I did some experiments on an alpha simulator that said that 2 instruction cycles per memory read was a fine amount and lowering it to one yielded hardly any gains, but now I expect that this is because all the compiled alpha code I had to run on the alpha simulator was designed for that. I&#8217;m pretty sure now that doing the same on an x86 would yield worse results.</p>
<p>In addition, their sillyness of using bzip2-0.0.1 for the simulation baseline probably took everything out of it. I suspect it never even got out of the getc() loop to the compression algorithm before the simulation terminated for length. Boo.</p>
<p>I&#8217;ve been kind of pampered as of late with the parallax spin processor and its 496 general purpose registers though. On that processor taking 3 instruction cycles to read or write memory is plenty fast enough.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>