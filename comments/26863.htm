<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-504443">
				<div id="div-comment-504443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504443">
			May 15, 2007 at 11:37 am</a>		</div>

		<p>This came up on the WiX mailing list recently, I think I may have said something similar.</p>
<p>Whether the string needs quoting if passed to CreateProcess depends on which argument the string represents! If it&#8217;s the first argument, lpApplicationName, it&#8217;s simply a path and shouldn&#8217;t be quoted; it should always be quoted if it&#8217;s the second argument, lpCommandLine. If passing both (recommended) you should still include the program in the command line (and quote it) so that argv[0] works.</p>
<p>It doesn&#8217;t do any harm to quote a path that doesn&#8217;t include spaces in a command line, so I always ensure that quote marks are used around any path.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-504453">
				<div id="div-comment-504453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504453">
			May 15, 2007 at 11:38 am</a>		</div>

		<p>Just thought I&#8217;d try and counter the recent nitpicking by saying thanks for keeping this blog going. I&#8217;ve found the programming related entries both interesting and very informative.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-504463">
				<div id="div-comment-504463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504463">
			May 15, 2007 at 11:38 am</a>		</div>

		<p>A win32 service I worked on and wrote the installer for had a customer reported issue about service start. The main part of the details were that the binary path in the serviceconfig-&gt;lpBinaryName (that corresponds to HKLMSystemCCSServices&lt;service name&gt;ImagePath) on win2000 server didn&#8217;t have quotes when the service was installed, and there were service start errors. Now I can&#8217;t recall the exact errors, but support reported &quot;add quotes to the path and that fixes it&quot;.</p>
<p>I was investigating it, and saw in 2003 SR 1 quotes were added to the path when the service was installed (via CreateService() api) but 2003 base did not add quotes. So for a legacy fix, I added quotes as a post-install action (if quotes weren&#8217;t there already).</p>
<p>Alas, my search-fu in our bug tracker failed &#8212; I can&#8217;t find what the customer was doing to cause the problem (and dummy me didn&#8217;t reference the defect # in my check-in notes). Mighta been a command line &quot;net start&quot; command, unsure. But there was a problem with image paths not being quoted in the registry. (boy, I&#8217;m ashamed to be a nit-picker with shaky details..)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-504473">
				<div id="div-comment-504473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504473">
			May 15, 2007 at 12:17 pm</a>		</div>

		<p>ImagePath entries are in fact command line, they&#8217;re getting passed to WinExec() (on NT4) or CreateProcess() as lpCommandLine (Win2K and beyond).</p>
<p>However, not adding the quotation marks does result in almost the correct behaviour. Almost as in: The service will start, but you&#8217;ll create some event entries and a potential security vulnerability.</p>
<p>Say your service is installed in &quot;C:FooBar Bazmy service.exe&quot;, but you added it without quotation marks. Then CreateProcess() will first try to load C:FooBar.exe, then &quot;C:FooBar Bazmy.exe&quot;, then &quot;C:FooBar Bazmy service.exe&quot;. Since the user will not have access to C:FooBar Baz, but might be allowed to create Bar.exe in C:Foo&#8230;</p>
<p>Particularly VmWare&#8217;s products have been vulnerable to this issue, since the default installation name is &quot;VmWare $ProductName&quot; and even further inside &quot;C:Program Files&quot; and &quot;C:Program FilesCommon Files&quot;, and the entry for the vmstor2 driver was typically added without quotation. On many installations, normal users were additionally given create-file&amp;folder access in C:Program Files&#8230; now it&#8217;s trivial to notice that creating C:Program FilesCommon.exe will give you a wonderful privilege escalation&#8230;</p>
<p>That having said: Always use quotation marks for services.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion even thread-even depth-1" id="comment-504483">
				<div id="div-comment-504483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504483">
			May 15, 2007 at 12:20 pm</a>		</div>

		<p>Nathan: that&#8217;s not a path, it&#8217;s a command line. Many services are implemented inside an executable that, by default, does something else, and needs an extra argument (-ntservice for example) to act as a service. See also svchost</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-504503">
				<div id="div-comment-504503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504503">
			May 15, 2007 at 1:07 pm</a>		</div>

		<p>Anon and Hyperion. What Anon describes I think was the problem &#8212; if there was something in some directory with a similar name (like the example &nbsp;&quot;c:program filescommon.exe&quot;) the service would fail to start. That rings a bell for my memory, and explains the problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-504523">
				<div id="div-comment-504523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504523">
			May 15, 2007 at 1:24 pm</a>		</div>

		<p>Obviously it can&#8217;t be changed now, but this whole quoting issue wouldn&#8217;t be an issue if CreateProcess had taken an array of strings for the command line instead of a single string. &nbsp;(And CreateProcess was probably designed before spaces in paths were possible, too.)</p>
<p>Command lines in the registry could be handled with either REG_MULTI_SZ values (if args need to be added), or with a (set of) REG_EXPAND_SZ or REG_SZ values. &nbsp;(You&#8217;d use a set of values if you need to pass multiple args.)</p>
<p>But this is all just wishful thinking, since that design isn&#8217;t going to change anymore. &nbsp;:-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-504583">
				<div id="div-comment-504583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504583">
			May 15, 2007 at 3:27 pm</a>		</div>

		<p>Dear BryanK, please adhere to Raymond&#8217;s philosophy and don&#8217;t try fixing something that isn&#8217;t broken. It&#8217;s trivial to check whether such entries exist, correct them at once and send a bug reporter to the developers.</p>
<p>Dear Adam: Don&#8217;t think so complicated. Quoting is idempotent, thus quoting a quoted string isn&#8217;t bad at all. And you can normalize it as well.</p>
<p>.NET does exactly the same parsing as CreateProcess or earlier WinExec or ShellExecute.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-504603">
				<div id="div-comment-504603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504603">
			May 15, 2007 at 4:41 pm</a>		</div>

		<p>Adam:</p>
<p>I am not sure, but I bet the framework uses the CommandLineToArgv API to split the command line string up. &nbsp;The rules for that API are documented in its reference, however there&#8217;s no guarantee that the framework actually uses it. &nbsp;You could probably find out for sure with any of ildasm, Reflector, or Rotor (if you want to accept the &quot;shared source&quot; license terms).</p>
<p>anonymous:</p>
<p>Huh? &nbsp;It obviously is broken: when a program needs to parse its command line, an OS needs to either (a) come up with rules for standard parsing and hope that every process follows them (and this fails on Windows, since not all processes handle quote-parsing the same way &#8212; although everything I can think of from Microsoft does), or (b) use an array of strings at both &quot;ends&quot; of the call. &nbsp;If the array had been used at both ends, then none of the quotes would have been needed.</p>
<p>As for &quot;it&#8217;s trivial to check whether such entries exist&quot;: &nbsp;Check where? &nbsp;If in the registry, how am I supposed to know what in the registry is interpreted as a command line by being passed to CreateProcess (and therefore needs quotes) versus what&#8217;s interpreted as a path (and therefore can&#8217;t have quotes)? &nbsp;Especially when I don&#8217;t have source to any of the programs that use the registry?</p>
<p>And not all command lines come from the registry, either: some of them are hardcoded into dumb programs, and others are retrieved from the command line. &nbsp;If cmd.exe passes a quoted string to a child, but the child doesn&#8217;t interpret the quotes correctly, that&#8217;s impossible to fix (without the source for the child).</p>
<p>As for &quot;file a bug report&quot; &#8212; yeah, that works well when the company that wrote the program is long-since dead&#8230;</p>
<p>Anyway, as I said, my comment isn&#8217;t good for anything in reality, because CreateProcess is here, and it won&#8217;t (and shouldn&#8217;t!) change. &nbsp;I&#8217;m just saying that if the interface had been designed differently, none of this quoting stuff would have been an issue, because there would be no quotes. &nbsp;The boundaries of individual arguments would have been delimited by the end-of-string markers in the array.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-504613">
				<div id="div-comment-504613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504613">
			May 15, 2007 at 4:48 pm</a>		</div>

		<p>Last anonymous: CreateProcess parses lpCommandLine only if lpApplicationName is NULL. ShellExecute[Ex] looks up the extension in the registry and expands the command line it finds there, then passes that to CreateProcess&#8217;s lpCommandLine argument; for the executable extensions .exe, .com the registry has &quot;%1&quot;, so lpCommandLine is simply the path to the executable.</p>
<p>CreateProcess gives up command-line parsing once it has found an executable to run. The entire command line is passed to the executable &#8211; for a Windows application, in WinMain&#8217;s lpCmdLine parameter. There is no other entry point definition &#8211; wWinMain, main and _wmain are all figments of the C runtime&#8217;s imagination. It&#8217;s the CRT which parses the command line into argv/argc (which it actually does with GetCommandLine rather than using the supplied parameter). See parse_cmdline() in crtsrcstdargv.c.</p>
<p>Likewise, .NET is doing the parsing itself. Inspect a .NET executable with dumpbin: you&#8217;ll see that the entry point is actually in the import directory! It points to mscoree.dll&#8217;s _CorExeMain function. If you have the Shared Source CLI 2.0, you can find the parsing code in the SegmentCommandLine function in clrsrcutilcodeutil.cpp.</p>
<p>The specific parsing of its command line is up to the program, but if it doesn&#8217;t follow the CRT&#8217;s rules, users will get confused. There&#8217;s also a CommandLineToArgvW routine which appears to follow the same rules.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-504623">
				<div id="div-comment-504623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504623">
			May 15, 2007 at 4:53 pm</a>		</div>

		<p>Didn&#8217;t see this when I started:</p>
<blockquote><p>
  [And what mechanism do you propose for asking each program &quot;Please quote this array of strings in a manner such that when I pass it to you on the command line, you will recover the original array&quot;? -Raymond]
</p></blockquote>
<p>Don&#8217;t ask the program, thereby sidestepping the whole problem. &nbsp;:-P</p>
<p>Because both ends are .net in this example, the .net people could have come up with their own quoting rules (because they still use CreateProcess under the hood, so they need to quote), and they could have applied them in both Process.Start and (in reverse) in the framework code that calls Main and passes it the array of Strings.</p>
<p>Of course that fails when a non-.net program runs a .net program, or vice versa. &nbsp;Probably the only solution to that is to document the quoting rules, so people know what they&#8217;re getting either way.</p>
<p>And with a time machine, you wouldn&#8217;t have to ask the child process in the Win32 case either, because instead of passing one long string, you&#8217;d pass the whole array in the code behind CreateProcess. &nbsp;(You&#8217;d probably want to lay the strings out next to each other for efficiency, but you wouldn&#8217;t want to require this.) &nbsp;But of course any of those ideas are impossible now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-504653">
				<div id="div-comment-504653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504653">
			May 15, 2007 at 5:41 pm</a>		</div>

		<p>Raymond &gt; Huh?</p>
<p>I want a function along the lines of:</p>
<p>string CreateCommandLine(IList&lt;string&gt; args);</p>
<p>that takes a list of args, and will convert them into a single string, such that when it is parsed and unquoted by the .NET runtime or the pre-main() argc/argv[] generator in the C runtime, they&#8217;ll get out what you stuffed in.</p>
<p>I also want an S.D.Process.Create() overload that takes an IList&lt;string&gt; argument for the parameters to pass on the commandline and calls CreateCommandLine() (or whatever) itself so I don&#8217;t have to.</p>
<p>Yes, you need to keep the single-string variant in place for executing legacy Win32 programs that do their own completely non-standard parsing of GetCommandLine(), but:</p>
<p>(1) you can&#8217;t remove functions anyway due to back-compat issues, and</p>
<p>(2) if a program parses the command line in a non-standard manner, how do they expect other programs to pass them arguments in a manner they can understand properly at the moment?</p>
<div class=post>[<i>But that assumes you &#8220;know&#8221; that the program you&#8217;re launching uses the .NET command line parser. It&#8217;s now reduced to a private agreement between two programs, not something the kernel should get involved in. If the .NET Framework wants to make it easy for one .NET-based program to talk to another .NET-based program, then more power to them. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-504673">
				<div id="div-comment-504673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504673">
			May 15, 2007 at 7:32 pm</a>		</div>

		<p>[But that assumes you &#8220;know&#8221; that the program you&#8217;re launching uses the .NET command line parser. It&#8217;s now reduced to a private agreement between two programs, not something the kernel should get involved in. If the .NET Framework wants to make it easy for one .NET-based program to talk to another .NET-based program, then more power to them. -Raymond]</p>
<p>I thought we were talking about command line parsing, not kernels. AFACT, all the kernel needs is the name of the binary to exec and a list of parameters.</p>
<div class=post>[<i>It was about the difference between paths and command lines, but BryanK turned it into a discussion of changing the way parameters are passed from one program to another, and my point is that CreateProcess (the subject of the original article) simply doesn&#8217;t care; it&#8217;s a private matter between the two programs. Perhaps I should have just deleted all the off-topic comments. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-504693">
				<div id="div-comment-504693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504693">
			May 15, 2007 at 8:50 pm</a>		</div>

		<p>Raymond,</p>
<p>All he wants is an API change in .NET. That .NET API would then take the array and quote it ITSELF, when passing it to the command line of any old app. The contract of the API would be that each item in the array as quotes wrapped around it; and that&#8217;s it.</p>
<p>I think this is reasonable.</p>
<div class="post">[<i>I agree that it is reasonable. But what does it have to do with knowing the difference between paths and command lines? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-504703">
				<div id="div-comment-504703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504703">
			May 15, 2007 at 9:45 pm</a>		</div>

		<blockquote><p>
  In fact it&#8217;s the opposite.
</p></blockquote>
<p>Sometimes.</p>
<p>&gt; Path names should not be quoted.</p>
<p>Sometimes.</p>
<p>&gt; Many places in the registry allow you to</p>
<p>&gt; specify a command line,</p>
<p>Right. &nbsp;And the first part of the command line might be intended to be a path name, in which case sometimes the path name does need to be quoted. &nbsp;The first time I had trouble with this was in [unnameable 2000], where a registry entry for Word had things right but one for [unnameable two words] was missing quotation marks. &nbsp;The resulting error message was really unhelpful, but you can sort of see how I also was unaware of the need for a &#8220;sometimes&#8221; in the solution.</p>
<p>I think most of your article makes things pretty much clear and I thank you for that explanation. &nbsp;Your blanket statements prevent that clarity until you add &#8220;sometimes&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-504573">
				<div id="div-comment-504573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504573">
			May 15, 2007 at 2:54 pm</a>		</div>

		<p>BryanK &gt; Not for Win32. They could have fixed it for .NET, but no. It&#8217;s still stupid &#8211;</p>
<p><a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/system.diagnostics.processstartinfo.arguments.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/system.diagnostics.processstartinfo.arguments.aspx</a></p>
<p>At least for Win32, programs were supposed to use GetCommandLine() instead of argc/argv[]. So although the command line was sent to new processes as a single string, it was received by them that way too.</p>
<p>In .NET*, command lines are still sent as a single string, but they&#8217;re picked up as an array of strings. Is there any documentation as to how the one is transformed to the other? Neither the link above, or any books I&#8217;ve read, or any other MSDN pages I&#8217;ve been able to find shed any light on the quoting/escaping rules used by .NET. The ProcessStartInfo link above doesn&#8217;t help, and neither do these two on the other side of the Create() call &#8211; Main():</p>
<p><a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/cb20e19t.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/cb20e19t.aspx</a></p>
<p><a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/acy3edy3.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/acy3edy3.aspx</a></p>
<p>Is there any written down set of quoting rules? Better yet, is there a function somewhere that will turn an array of strings into a properly quoted command line? Or is it just &quot;well, figure out something by yourself and MS will guarantee that whatever currently works will continue to do so.&quot;?</p>
<p>I especially like how none of the examples pass more than one argument to any new process, and none have spaces in the argument they do pass.</p>
<p>* Nitpickers corner**: Yes, I know this is whining about .NET in a not .NET blog. But the points I&#8217;m making/questions I&#8217;m asking are not directed at *you* Raymond. The whines are more towards MS in general, and the questions are to the other readers of your blog. I&#8217;m not expecting or asking *you* to do anything about it. But, it does relate to command lines, so I hope it&#8217;s on-topic enough to not be a complete waste of space.</p>
<p>** Hey, I kind of like this nitpicker&#8217;s corner thing. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-504593">
				<div id="div-comment-504593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504593">
			May 15, 2007 at 4:29 pm</a>		</div>

		<p>anonymous&gt; Quoting is not idempotent. Not sure where you get that idea. Quoting a quoted string does not give you the same string back. Quoting it again definitely doesn&#8217;t.</p>
<p>What do you mean, don&#8217;t think complicated? It *is* complicated. I&#8217;m asking for it to be *simplified*. Passing command line arguments as an array of strings, in the same format they&#8217;re accessed by the receiving program is *simpler* than trying to figure out how to squish them all together yourself.</p>
<div class=post>[<i>And what mechanism do you propose for asking each program &#8220;Please quote this array of strings in a manner such that when I pass it to you on the command line, you will recover the original array&#8221;? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-504733">
				<div id="div-comment-504733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yosi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504733">
			May 16, 2007 at 3:08 am</a>		</div>

		<p>Isn&#8217;t it a WTF that all other OS&#8217;s except Windows already figured out how to pass (and parse) command line about 10 years ago (see man exec())</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-504713">
				<div id="div-comment-504713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504713">
			May 16, 2007 at 12:26 am</a>		</div>

		<p>&gt; &gt; Many places in the registry allow you to</p>
<p>&gt; &gt; specify a command line,</p>
<p>&gt; Right. &nbsp;And the first part of the command line might be intended to be a path name</p>
<p>&gt; does need to be quoted.</p>
<p>Er, that&#8217;s a kind of a tautology. &quot;Command lines&quot; need to be quoted. Doesn&#8217;t matter whether you&#8217;re talking about parts of the command line that represent paths, or parts of the command that represent anything else.</p>
<p>I suppose the &quot;sometimes&quot; could come in when you&#8217;re talking about command lines that don&#8217;t contain spaces. But the nitpickes corner would look a bit silly:</p>
<p>&quot;Command lines need to be quoted*.</p>
<p>*except when they don&#8217;t.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-504773">
				<div id="div-comment-504773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yosi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504773">
			May 16, 2007 at 8:44 am</a>		</div>

		<p>Adam: in &#8220;10 years&#8221; I mean &#8220;long time ago&#8221;, not &nbsp;&#8220;in 1997&#8221;.</p>
<p>To the point, Unix does not have the same problem. All programs get<br />
argc/argv[]; exec() receive separated list of parameters; and all this<br />
have nothing to do how you put quotes (or escape chars) in shell.</p>
<div class="post">[<i>All programs receive separated list of parameters, but somebody has to convert a command line into that list. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-504753">
				<div id="div-comment-504753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-504753">
			May 16, 2007 at 5:45 am</a>		</div>

		<p>[I agree that it is reasonable. But what does it have to do with knowing the difference between paths and command lines? -Raymond]</p>
<p>It&#8217;s to do with the fact paths should just be paths. Whether they&#8217;re arguments to CreateFile() or CreateProcess() or S.D.Process.Create().</p>
<p>You shouldn&#8217;t /have/ to quote paths when passing them as a command line to CreateProcess(), as you shouldn&#8217;t have to pass a command line to CreateProcess(). That you do is a historical artifact of Dos/Win32, but one that could have been fixed for .NET. You should be able to pass all arguments, including argument 0 (the program name) as distinct unquoted strings, and not care if they happen to be paths. Then this wouldn&#8217;t be a problem going further forward.</p>
<p>Note that this *doesn&#8217;t* require a change to NtCreateProcess()*. If the kernel uses a single parameter for the command line, fine. But the userspace API could be a bit smarter, providing quoting for you. As an advantage, if it quoted the part that the kernel needs (arg 0) then the kernel doesn&#8217;t have to guess so much. If you pass &#8220;c:program filesfoo.exe&#8221; as arg0, userspace should quote that for you so that NtCreateProcess() doesn&#8217;t even look for &#8220;c:program&#8221;</p>
<p>Yosi &gt; Seeing as Unix exec() is documented as having passed arguments separately in the original programmer&#8217;s manual dated November 1971, you should have said &#8220;over 35 years ago&#8221;.</p>
<div class="post">[<i>unix has the same problem.  You don&#8217;t pass quotation marks to open(2); you do pass them to sh(1). Consider, for example, .vimrc:</p>
<p>set dir=~/vim backups<br />
set makeprg=&#8221;~/vim scripts/m&#8221; %</p>
<p>One of these settings uses quotation marks; the other doesn&#8217;t. I&#8217;m sorry I motivated the discussion with Windows. Now I understand that I should&#8217;ve used unix. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-505113">
				<div id="div-comment-505113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-505113">
			May 16, 2007 at 5:42 pm</a>		</div>

		<p>[All programs receive separated list of parameters, but somebody has to convert a command line into that list. -Raymond]</p>
<p>Yeah, and it&#8217;s a royal pain to do so, but somehow not as bad as you describe for windows. Also, it&#8217;s a small matter to change your shell if it bothers you enough.</p>
<p>[unix has the same problem. You don&#8217;t pass quotation marks to open(2); you do pass them to sh(1)]</p>
<p>open is an API call, sh is a command interpreter. You really don&#8217;t want your API calls deciding what you really meant, do you?</p>
<div class=post>[<i>Nitpick. s/sh(1)/system(3)/. Happy? I&#8217;m assuming my readers are smart enough to make these phenomenal leaps of logic. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-505243">
				<div id="div-comment-505243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mjb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-505243">
			May 16, 2007 at 9:49 pm</a>		</div>

		<p>Nitpick:</p>
<p>You lie Raymond!</p>
<p>&quot;I claim that Microsoft employees are perfect&quot;</p>
<p>See you did say it!</p>
<p>:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-505343">
				<div id="div-comment-505343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yosi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-505343">
			May 17, 2007 at 2:37 am</a>		</div>

		<p>[Nitpick. s/sh(1)/system(3)/. Happy? I&#8217;m assuming my readers are smart enough to make these phenomenal leaps of logic. -Raymond]</p>
<p>system(3) is designed to run sh(1). </p>
<p>&#8220;system() &nbsp;executes &nbsp;a command specified in string by calling /bin/sh -c&#8221;</p>
<p>I&#8217;m assuming that Raymond is smart enough to make this phenomenal leaps of logic.</p>
<div class="post">[<i>And therefore you need to know which strings are passed to open() and which strings are passed to system() because they are parsed differently. That&#8217;s my point. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-505353">
				<div id="div-comment-505353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-505353">
			May 17, 2007 at 2:54 am</a>		</div>

		<p>Yosi: What&#8217;s your point anyway? If it&#8217;s just to prove how smart you are, we don&#8217;t care. If it&#8217;s just to prove how much better Unix is than Windows, we don&#8217;t care. If it&#8217;s to annoy Raymond to the point that he stops blogging, then please stop.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-505463">
				<div id="div-comment-505463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://http://chainsawblues.vox.com/' rel='external nofollow' class='url'>Matt S Trout</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-505463">
			May 17, 2007 at 7:35 am</a>		</div>

		<p>Well, system() in perl takes a list which then gets passed straight through to the exec &#8211; this is considered reccomended over the single argument form for all the reasons already discussed.</p>
<p>To be honest I&#8217;m kinda surprised the windows equivalents don&#8217;t work the same way &#8230; wonder how win32 perl handles it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-506723">
				<div id="div-comment-506723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">blame other</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070515-00/?p=26863#comment-506723">
			May 22, 2007 at 6:36 am</a>		</div>

		<p>Sometimes you don&#8217;t know if the specified path is a command line or a simple path.</p>
<p>And often the application and/or apis can handle an extra pair of quotation marks anyway.</p>
<p>Sadly, I&#8217;ve seen many examples where apps are constructing command lines with unquoted paths, and if those paths has spaces they must be quoted by the user to compensate for the buggy app. Not a good solution I admit.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>