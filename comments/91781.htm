<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1208131">
				<div id="div-comment-1208131" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Muzer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150819-00/?p=91781#comment-1208131">
			August 19, 2015 at 7:17 am</a>		</div>

		<p>In the UNIX world, I&#39;m sure you&#39;ve heard of the famous &quot;Not a typewriter&quot; bug? Historically, sendmail, on various error conditions, would invariably get errno, regardless of whether or not the error actually came from a system call. Thus, trying to send an email to a person who didn&#39;t have an account on the server would produce the wonderful message &quot;user unknown: not a typewriter&quot;.</p>
<p>The &quot;typewriter&quot; in question is just another word for a teletype, ie an interactive terminal. The error is produced by the isatty() library function attempting to determine whether or not the terminal is interactive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208111">
				<div id="div-comment-1208111" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jimmy Queue</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150819-00/?p=91781#comment-1208111">
			August 19, 2015 at 7:27 am</a>		</div>

		<p>Raymond, What happens if you have multiple threads p/invoking functions from your managed app? Is there any scope for a context switch to another thread that does a p/invoke, before the original p/invokers call to GetLastWin32Error() is made, but after they&#39;ve invoked their win32 function?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208101">
				<div id="div-comment-1208101" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150819-00/?p=91781#comment-1208101">
			August 19, 2015 at 7:39 am</a>		</div>

		<p>@Jimmy Queue: GetLastError() returns a per thread value, I believe Marshal.GetLastWin32Error() does the same.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208091">
				<div id="div-comment-1208091" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150819-00/?p=91781#comment-1208091">
			August 19, 2015 at 7:40 am</a>		</div>

		<p>@Jimmy Queue</p>
<p>The last error is a thread-global variable, not a process-global variable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208081">
				<div id="div-comment-1208081" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150819-00/?p=91781#comment-1208081">
			August 19, 2015 at 7:41 am</a>		</div>

		<p>This is pretty much a reflection of what happens in pure unmanaged code with the same API. So if you&#39;re familiar with that you&#39;d likely catch this problem right away.</p>
<p>@Jimmy <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms679360(v=vs.85).aspx" rel="nofollow" target="_new">msdn.microsoft.com/&#8230;/ms679360(v=vs.85).aspx</a> I dunno about the managed function but GetLastError is thread safe according to that. And the way the function works with Raymond&#39;s example today suggests it is a thin wrapper around a p/invoke call so I would imagine it&#39;s fine. The managed function docs don&#39;t say for sure though.</p>
<div class="post">[<em>True, but the managed world has a few hidden gotchas. What looks like a C/C++ field access is actually a method call, and merely <span style="text-decoration:underline;">mentioning</span> a static class causes code to run! -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208071">
				<div id="div-comment-1208071" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jimmy Queue</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150819-00/?p=91781#comment-1208071">
			August 19, 2015 at 8:31 am</a>		</div>

		<p>Interesting, thanks for the responses guys! Yes, it makes a lot of sense to have GetLastError work on a per thread basis, a simple, yet elegant solution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208051">
				<div id="div-comment-1208051" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150819-00/?p=91781#comment-1208051">
			August 19, 2015 at 11:18 am</a>		</div>

		<p>@Raymond: Perhaps I&#39;m just being over-cautious, but ISTM a static class initializer should not be running around doing scary things like p/invoke&#8230;</p>
<p>(Of course, you can&#39;t *rely* on people following best practices, so it&#39;s certainly a valid concern)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208041">
				<div id="div-comment-1208041" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150819-00/?p=91781#comment-1208041">
			August 19, 2015 at 11:51 am</a>		</div>

		<p>Which raises the question when and where you think the corresponding native code should be loaded&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208031">
				<div id="div-comment-1208031" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken in NH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150819-00/?p=91781#comment-1208031">
			August 19, 2015 at 11:52 am</a>		</div>

		<p>@Kevin</p>
<p>Perhaps the static class does not explicitly call p/invoke, but can you guarantee it does not call some other method that does? The .NET Framework calls p/invoke whenever it needs to do Windows specific things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208021">
				<div id="div-comment-1208021" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Sowul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150819-00/?p=91781#comment-1208021">
			August 19, 2015 at 12:17 pm</a>		</div>

		<p>@Kevin &#8212; even a Trace.WriteLine will do it and that&#39;s hardly a scary thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208011">
				<div id="div-comment-1208011" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150819-00/?p=91781#comment-1208011">
			August 19, 2015 at 12:36 pm</a>		</div>

		<p>For some reason this doesn&#39;t really seem that crazy to me. &nbsp;I tend to think of GetLastError() as a second return value from the PInvokeCall() &#8212; that is, they&#39;re essentially one logical operation. &nbsp;It doesn&#39;t seem surprising that separating and putting code between them would cause problems. &nbsp;Stuff like the static constructor or field initializers is kind of sneaky, sure, but it still won&#39;t happen if you treat the Win32 method call and GetLastError() as a single operation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com0003400180b2af1b odd alt thread-odd thread-alt depth-1" id="comment-1208001">
				<div id="div-comment-1208001" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Cube+8' rel='external nofollow' class='url'>Cube 8</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150819-00/?p=91781#comment-1208001">
			August 20, 2015 at 12:55 am</a>		</div>

		<p>Actually, the program will not compile, highlighting the last line: lstError</p>
<p>:)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>