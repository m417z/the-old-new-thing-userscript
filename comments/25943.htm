<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-527623">
				<div id="div-comment-527623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Human wasteland.....</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-527623">
			July 19, 2007 at 10:45 am</a>		</div>

		<p>I got the distinct impression that the OP&#8217;s question related to the difference between leaking them, and freeing them. Not only that but allocating them and freeing them.</p>
<p>Presumably, in the foreground (cleanup manually), it takes longer to do them, because there is a bunch of stuff also happening in the background.</p>
<p>I&#8217;d also guess that in the background (cleanup leaks) it locks up the UI, because the thread that performs this function is promoted to a high level, hence the faster time.</p>
<p>I have no idea how much checking windows does, but if you create a window, all that has to be done is allocate, possibly zero memory, and intialise.</p>
<p>When you free, you at least have the overhead of merging free blocks on the heap, and otherwise maintaining the free list.</p>
<p>If windows does any checking at all, then it also has to look at and deal with anything that you added to the window.</p>
<p>Compared with a plain window created (a one shot excercise) deletion has to deal with all the things that could have been done (even if they were not) in order to return to a known state.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-527673">
				<div id="div-comment-527673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Human wasteland (again).....</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-527673">
			July 19, 2007 at 11:09 am</a>		</div>

		<p>Epilogue;</p>
<p>As for the validity of doing this, I always thought it was a bit like one of those &quot;cool guy&quot; twitches, like Elvis had.</p>
<p>I mean, whenever I&#8217;m writing an application, I always make sure that it creates 20,000 empty windows and abandons them, right before exit.</p>
<p>:))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-527733">
				<div id="div-comment-527733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-527733">
			July 19, 2007 at 12:13 pm</a>		</div>

		<p>This doesn&#8217;t mean you can&#8217;t have 20,000 items in your main window that the user can see/interact with &#8211; it just means they shouldn&#8217;t be windows.</p>
<p>A lot of people seem to be afraid of designing their own window classes. Maybe they&#8217;re afraid of WM_PAINT? I myself have no qualms over writing my own controls. I once wrote something similar to a masked edit control (I wanted a numeric input field with a decimal point in a fixed place, for inputting amounts of money) in C# on .NET Compact Framework, deriving only from Control. It doesn&#8217;t handle selections, but then it doesn&#8217;t need to in that application.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-527803">
				<div id="div-comment-527803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar Eduardo Barros</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-527803">
			July 19, 2007 at 12:56 pm</a>		</div>

		<p>Mike:</p>
<blockquote><p>
  It doesn&#8217;t handle selections, but then it doesn&#8217;t need to in that application.
</p></blockquote>
<p>That&#8217;s precisely why people do not want to design their own interface elements. There are too many details you can forget (perhaps you never use the keyboard and don&#8217;t notice it misbehaves when tabbing into it, perhaps it doesn&#8217;t work well in exotic locales you never heard of, perhaps it does something wrong on high-DPI screens, and so on), and it probably has more bugs (more widely used code receives more testing, and thus even obscure bugs on it will eventually be found by someone). It is better to reuse instead of creating your own. Of course, if there is nothing which fits your needs, you have no choice but to write it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-527843">
				<div id="div-comment-527843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom Parker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-527843">
			July 19, 2007 at 1:16 pm</a>		</div>

		<p>What a daft question.</p>
<p>Creation is just make something and dump it somewhere.</p>
<p>Destruction is always rummage around to find the thing you want to destroy and then destroy it. &nbsp;Unless you&#8217;re using an array (not usually a good choice) the rummage around it will take time often a time proportional to the number of items.</p>
<div class="post">[<i>Finding the thing isn&#8217;t hard. It&#8217;s untangling it from all the other stuff that&#8217;s hard. By analogy: Create a web page on your e-commerce site: Easy. Destroy that web page: Hard, because you have to go fix all the links to that page from elsewhere in the site. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-527863">
				<div id="div-comment-527863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.asvguy.com' rel='external nofollow' class='url'>Burak KALAYCI</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-527863">
			July 19, 2007 at 1:30 pm</a>		</div>

		<p>I get the point but I still think this is a valid question.</p>
<p>The question mentions destroying the windows and also leaking the handles, both. And it says window manager is actually faster in destroying the handles if leaked (with stalling side-effect). Destroying the handles yourself, as you are supposed to do, is slower.</p>
<p>10000 handles per process is excessive but lets say you have 10 processes using 2000 handles each (or 20 processes with 1000 handles each) and you get legit 20000 handles which will take quite a time to destroy. Will that be beyond design parameters? If yes, then I&#8217;d say even the possibility of having that many handles possible is bad design. If no, then why isn&#8217;t this optimized or takes so long (as opposed to creating them)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-527893">
				<div id="div-comment-527893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-527893">
			July 19, 2007 at 1:46 pm</a>		</div>

		<p>Doesn&#8217;t hacking stuff in the name of backwards compatibility also encourage people to do things they shouldn&#8217;t?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-527903">
				<div id="div-comment-527903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-527903">
			July 19, 2007 at 1:56 pm</a>		</div>

		<p>[Doesn&#8217;t hacking stuff in the name of backwards compatibility also encourage people to do things they shouldn&#8217;t?]</p>
<p>No, it avoids punishing users for the mistakes of developers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-527953">
				<div id="div-comment-527953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.asvguy.com' rel='external nofollow' class='url'>Burak KALAYCI</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-527953">
			July 19, 2007 at 2:39 pm</a>		</div>

		<blockquote><p>
  What a daft question.
</p></blockquote>
<p>If you had read recent related posts, you&#8217;d know that &#8216;finding&#8217; will indeed be easy. Bottom 16 bits of an handle is an index into a table.</p>
<p>In my experience, usually creation takes more time, you need to do initialization work. Destruction is, most of the times, just freeing some memory.</p>
<blockquote><p>
  It&#8217;s untangling it from all the other stuff that&#8217;s hard.
</p></blockquote>
<p>That would&#8217;ve been a better answer to a valid question.</p>
<p>The thing is called &#8216;Windows&#8217;, a window seems to me as the building block. I&#8217;d expect both creation and destruction of a window to be optimized fully.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-528013">
				<div id="div-comment-528013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CDarklock</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528013">
			July 19, 2007 at 3:08 pm</a>		</div>

		<p>I felt like the question was a little different, and came in two parts.</p>
<ol>
<li>Why, in 64-bit Windows, is it actually faster to leak window handles than to properly destroy them? (This seems obvious: think about how you destroy windows. You send a message. That yields control to the O/S, which then rond-robins through other available applications. When the O/S cleans up, it doesn&#8217;t send messages, it just kills the windows. Since it&#8217;s not yielding to other applications, it gets things done faster, but it&#8217;s also blocking the UI.)</li>
</ol>
<p>1a. (implied by the answer to 1) Why does the O/S block the UI at all? (Duh: so it can clean up faster. THIS is the &quot;optimising for abuse&quot; question. If you leak a little, the blockage is minimal. If you leak a lot, this is BAD and you should FIX it. Complaining about the blockage is like complaining that your Ford Focus is sluggish when towing a boat.)</p>
<ol>
<li>Why does the O/S have such a large performance difference between cleaning up 18,000 handles and cleaning up 20,000 handles? Take as read that either case is bad, but what is the underlying system that goes from &quot;works fine&quot; to &quot;sucks big time&quot; as you cross that line? </li>
</ol>
<p>I think question 2 is a valid question, not as someone designing an application who wants to know why exactly he shouldn&#8217;t create 20,000 windows, but as someone curious about a system who simply wants to understand it. The information probably has no practical use, but we&#8217;re geeks! We like to know how things work! Come on, man!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-528063">
				<div id="div-comment-528063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miles Archer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528063">
			July 19, 2007 at 4:21 pm</a>		</div>

		<p>Burak,</p>
<p>What the heck does &quot;optimized fully&quot; mean?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-528143">
				<div id="div-comment-528143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528143">
			July 19, 2007 at 6:09 pm</a>		</div>

		<p>Miles: &quot;Optimised fully&quot; means you put #pragma optimise=full just before that bit of the code, which sprinkles magic pixie dust on it to make it go faster.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-528153">
				<div id="div-comment-528153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.asvguy.com' rel='external nofollow' class='url'>Burak KALAYCI</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528153">
			July 19, 2007 at 6:19 pm</a>		</div>

		<p>&gt; What the heck does &quot;optimized fully&quot; mean?</p>
<p>Actually I meant, &#39;optimized to the maximum extent possible for performance and memory usage carefully calculating trade offs, removing any possible bloat&#39;. May be hand optimized in assembly for target CPUs, some internal structures or algorithms may be changed for better performance, even some parts can be redesigned, these sorts of things.</p>
<p>Of course, a profiler will show what part to optimize. But a window is a very common object in Windows, I&#39;d assume it&#39;s a good idea to optimize window creation and destruction, without doing any profiling.</p>
<p>If destroying 20000 window objects is taking too much time, it means destroying a single window is taking too much time.</p>
<p>Raymond says it&#39;s taking too much time, because it&#39;s not designed/optimized for that.</p>
<p>Why is there so many handles available if they aren&#39;t meant to be used (by many processes)? If they are meant to be used, why is Windows not optimized to handle destruction of window objects? I thought it was optimized, but Raymond says it isn&#39;t&#8230; (To be fair, this post mentions only leaked objects and I agree with the reasoning. On the other hand, the question also mentions normal window destruction with same results).</p>
<div class="post">[<i>Window creation/destruction is not part of any sane program&#39;s inner loop. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-528183">
				<div id="div-comment-528183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528183">
			July 19, 2007 at 6:47 pm</a>		</div>

		<blockquote><p>
  No, it avoids punishing users for the mistakes of developers.
</p></blockquote>
<p>You gotta punish someone, or would you have windows spend billions figuring out how to mollycoddle every guy who picked up a copy of VC++? Why shouldn&#8217;t a crappy application perform and behave crappily?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-528213">
				<div id="div-comment-528213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://runesbike.com/' rel='external nofollow' class='url'>Rune Moberg</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528213">
			July 19, 2007 at 7:38 pm</a>		</div>

		<p>As I mentioned in a previous comment, the app I work on happen to present the user with several pages of windows. The user will add window-by-window, page-by-page and we cut window handle usage to a bare minimum. Delphi&#8217;s TPanel control uses a handle, so we stopped using TPanel on our forms. Our own home-brewed custom controls only use a window handle if absolutely necessary. etc..etc..</p>
<p>Our worst enemy was the desktop heap size. We exhausted the desktop heap long before running out of handles. At one point (two years ago when I first asked) I also looked into handle usage, but it was a red herring as we didn&#8217;t use more than a couple of thousand handles (I don&#8217;t recall the number off-hand and some of our users might&#8217;ve touched the 10000 limit for all I remember)</p>
<p>For us it wasn&#8217;t about leaked handles. Some of our users track _a lot_ of information sources, and we left the window management to Windows&#8217;s window manager. (which I assume most developers do by default)</p>
<p>Which brings us full circle to my question on yesterday&#8217;s subject of the 10000 handle limit: At what point are we supposed to do the window manager&#8217;s job? (we&#8217;ve done that in our app now, so don&#8217;t worry about us anymore&#8230;)</p>
<p>As I see it, the 10000 handle limit was set in a time where 15&#8243; monitors were the norm. I think it is safe to assume the average windows installation uses a lot more handles now than, say, five years ago. Also note that some people like to use (waste) additional window handles for things like Winsock communication&#8230; (And I&#8217;ve never seen anyone from MS calmly explain why such a practice is bad &#8212; for all I know it could be the most efficient way of doing socket communication under Windows, but I hope it isn&#8217;t the case)</p>
<p>Pre-emptive defense: The default 32-bit desktop heap size will not accomodate more than approx 30 instances of IE 5.5 (showing a web page from a news site). So alright, the handle limit makes sense still, but I still dislike the default heap size. Both for the interactive desktops and the one for services. 64-bit Windows luckily solves this.</p>
<p>&#8212; </p>
<p>Rune (on vacation &#8212; going to see The Rolling Stones in Budapest tomorrow)</p>
<div class="post">[<i>If you&#8217;re looking for something specific like &#8220;You should switch when you reach 1793 windows&#8221; then you&#8217;re not going to find it. <a href="http://blogs.msdn.com/oldnewthing/archive/2005/03/15/395866.aspx" rel="nofollow">Windows are not cheap objects</a>, and that article discusses the trade-offs. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-528223">
				<div id="div-comment-528223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528223">
			July 19, 2007 at 7:43 pm</a>		</div>

		<blockquote>
<h1>pragma optimise=full</h1>
</blockquote>
<p>Topic suggestion: &quot;Top 10 #pragma commands you never knew&quot;</p>
<p>#pragma bugfree</p>
<p>#pragma youknowhatImean</p>
<p>#pragma hidefromboss</p>
<p>etc</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-528243">
				<div id="div-comment-528243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://runesbike.com/' rel='external nofollow' class='url'>Rune Moberg</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528243">
			July 19, 2007 at 7:51 pm</a>		</div>

		<p>&#8220;Window creation/destruction is not part of any sane program&#8217;s inner loop&#8221;</p>
<p>Funny you should say that&#8230;</p>
<p>It is now.</p>
<p>As we can&#8217;t hide/show windows when the user switches to a different page (because we exhaust the desktop heap), we effectively destroy a bunch of windows and create some new ones. (we define &#8220;page&#8221; as a collection of windows &#8212; the user can quickly switch to different information views this way)</p>
<p>Of course, it isn&#8217;t anywhere near 10000. Let us say a couple of hundred are destroyed and a couple of hundred are created. </p>
<div class="post">[<i>Zero to within experimental error. Not enough that will show up on profiling runs of typical usage. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-528283">
				<div id="div-comment-528283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528283">
			July 19, 2007 at 8:52 pm</a>		</div>

		<blockquote><p>
  If destroying 20000 window objects is taking too much time, it means</p>
<p>  destroying a single window is taking too much time.
</p></blockquote>
<p>That&#8217;s not nessecarily true. And in fact, in your original comment you explicitly point out:</p>
<blockquote><p>
  The sweet spot is somewhere between 10000 and 18000 handles.</p>
<p>  Any more than that and the window manager goes bananas.
</p></blockquote>
<p>So between 10,000 and 18,000 handles is &quot;fast&quot; but 20,000 is extremely slow &#8212; it&#8217;s clearly not a linear increase and therefore, destroying a single window is not nessecarily &quot;taking too much time&quot;.</p>
<p>For all we know, Windows might simply have a &quot;if (handle count &gt;= 20000) { do_it_really_slow(); }&quot; somewhere as a punishment for developers who do bad things. That&#8217;s what people are always asking for, isn&#8217;t it? Punish developers who write crappy software? Isn&#8217;t it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-528293">
				<div id="div-comment-528293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528293">
			July 19, 2007 at 9:07 pm</a>		</div>

		<p>Windows are not optimized for handling windows.</p>
<p>rotfl.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-528333">
				<div id="div-comment-528333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waste humanland.....</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528333">
			July 20, 2007 at 12:00 am</a>		</div>

		<p>What&#8217;s the beef here?</p>
<p>I&#8217;ve written a few controls for my sins, including, as it happens, a tree control.</p>
<p>It&#8217;s a scary prospect doing something like that when you consider all the things you could do wrong!!!!</p>
<p>Nevertheless, what I did in the end was to tile the thing up. So I have an object that can draw it&#8217;s self in a window (the control), and if I want to float that control higher up in the z-order, I create a new window on the desktop, which floats in the right place above the tree control. The little floating jobbie, gets its draw from the big tree control window.</p>
<p>O.K. that&#8217;s not complicated, but where exactly is the problem with having multiple disparate objects that draw into multiple disparate windows.</p>
<p>I always figured that windows windows are objects that reflect the hierachy of your application, rather than the tools to do the job.</p>
<p>Surely that&#8217;s what this is all about. Writing the code that does the difficult stuff, quickly. If you&#8217;re still constraining yourself to the Document / View model when you get down to the level of convolving bitmaps, you really cant expect to have the performance too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-528343">
				<div id="div-comment-528343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steelbytes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528343">
			July 20, 2007 at 12:07 am</a>		</div>

		<p>detouring from window handles back to the title of this blog entry &#8230;</p>
<p>one time you may want to optimize handling/cleanup of misuse of your app/os, is when it could otherwise lead to a Denial-Of-Service. &nbsp;If it takes 10mins to respond to a request, then that could be considered DoS</p>
<div class="post">[<i>Sometimes I wonder why I even bother with the Nitpicker&#8217;s Corner. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-528403">
				<div id="div-comment-528403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.morganalley.com' rel='external nofollow' class='url'>Dewi Morgan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528403">
			July 20, 2007 at 9:36 am</a>		</div>

		<p>Steelbytes has a point: DoSes should be &quot;fully optimised&quot; so that we can be DoSed faster! More seriously, if you optimised for the DoSing case, then the DoSser would have to write &quot;200,000&quot; instead of &quot;20,000&quot; &#8211; a whole &#8216;nother character! They&#8217;d never think of that!</p>
<p>Burak KALAYCI: &quot;optimised fully&quot; presumes there&#8217;s a &quot;fastest&quot; way to do something in all cases. But &quot;optimisation&quot; usually means &quot;picking the best tradeoff&quot;. Odds are, window destruction&#8217;s optimised for the case where few are destroyed (normal use), rather than lots (something broken). CDarklock points to one possible tradeoff: blocking the UI. I&#8217;m sure there&#8217;re others.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-528693">
				<div id="div-comment-528693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KenW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528693">
			July 20, 2007 at 1:55 pm</a>		</div>

		<p>Burak: &quot;If destroying 20000 window objects is taking too much time, it means destroying a single window is taking too much time.&quot;</p>
<p>Faulty logic. This makes as much sense as saying &quot;If $20,000 is too much money, then $1 is too much money.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-528713">
				<div id="div-comment-528713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.asvguy.com' rel='external nofollow' class='url'>Burak KALAYCI</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528713">
			July 20, 2007 at 2:51 pm</a>		</div>

		<blockquote><p>
  Window creation/destruction is not part of any sane program&#8217;s inner loop.
</p></blockquote>
<p>Exactly. When I run 20 instances of an app that uses 1000 windows, I&#8217;ll have all 20000 handles to destroy at the time I&#8217;m closing them&#8230; I understand that this would be heavy usage and Windows isn&#8217;t optimized for this. I was just surprised by the fact. There are so many handles available for use, but then you are not supposed to use them&#8230;</p>
<p>Dean Harding:</p>
<blockquote><p>
  in fact, in your original comment you explicitly point out
</p></blockquote>
<p>I wasn&#8217;t the one who asked the original question.</p>
<blockquote><p>
  it&#8217;s clearly not a linear increase
</p></blockquote>
<p>I hoped for the best and assumed it was linear.</p>
<p>Dewi Morgan:</p>
<blockquote><p>
  But &quot;optimisation&quot; usually means &quot;picking the best tradeoff&quot;.
</p></blockquote>
<p>The following was my description:</p>
<p>&#8216;optimized to the maximum extent possible for performance and memory usage carefully calculating trade offs, removing any possible bloat&#8217;</p>
<p>KenW:</p>
<blockquote><p>
  Faulty logic.</p>
<p>  &quot;If $20,000 is too much money, then $1 is too much money.&quot;
</p></blockquote>
<p>I&#8217;ll admit it&#8217;s incomplete. If you were to donate me $1 every millisecond, for the next 20000 milliseconds, then maybe $1 is too much money because $20000 is too much money :)</p>
<p>What I meant was pretty clear, I think.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-528753">
				<div id="div-comment-528753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528753">
			July 20, 2007 at 4:48 pm</a>		</div>

		<p>[You gotta punish someone, or would you have windows spend billions figuring out how to mollycoddle every guy who picked up a copy of VC++? Why shouldn&#8217;t a crappy application perform and behave crappily?]</p>
<p>I believe the classes of punishable entities are as follows:</p>
<p>User &#8211; Doesn&#8217;t care who gets punished as long as it&#8217;s not him.</p>
<p>Developer &#8211; Would rather the user not get punished but really doesn&#8217;t want to get punished himself, so he&#8217;d rather MS take the punishment.</p>
<p>MS &#8211; Doesn&#8217;t want to punish the user and in most cases punishing the developer is not an option (MS can&#8217;t force developers to do anything) so they have to eat the cost.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-528833">
				<div id="div-comment-528833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528833">
			July 20, 2007 at 11:51 pm</a>		</div>

		<p>&gt; When I run 20 instances of an app that uses 1000 windows,</p>
<p>&gt; I&#8217;ll have all 20000 handles to destroy at the time I&#8217;m closing them&#8230;</p>
<p>How do you know that&#8217;s the same situation, though? The only situation that has been tested so far is a *single process* destroying 20,000 windows. That&#8217;s not nessecarily the same as 20 processes destroying 1,000 windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-528853">
				<div id="div-comment-528853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.asvguy.com' rel='external nofollow' class='url'>Burak KALAYCI</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528853">
			July 21, 2007 at 8:35 am</a>		</div>

		<blockquote><p>
  How do you know that&#8217;s the same situation, though?
</p></blockquote>
<p>I don&#8217;t.</p>
<p>I hope DestroyWindow is optimized for destroying top level windows. (With that I mean, it treats the case as special, and takes advantage of the special situation when destroying childs).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-528953">
				<div id="div-comment-528953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">carlso</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-528953">
			July 22, 2007 at 10:35 pm</a>		</div>

		<p>&gt; Well, because you&#8217;re not supposed to leak 20,000 objects. Why optimize something that people aren&#8217;t supposed to be doing? That would just encourage them! </p>
<p>It is this kind of thinking that makes Windows behave so poorly much too often.</p>
<p>Your basic premise is flawed. &nbsp;You assume that if a program is leaking 20,000 objects, it is doing it on purpose and was designed that way. &nbsp;Most likely, a program is doing this because of some bug that the developer and testers did not come across. &nbsp;It is not an intended action of the program.</p>
<p>A well-designed OS can efficiently take care of good programs gone bad. &nbsp;A mediocre OS assumes that all programs will be well-behaved and never do anything outside the bounds of stated rules. &nbsp;When programs behave badly, often it is not intentional. &nbsp;But if you do not handle such cases efficiently, it is the user of your operating system that suffers. &nbsp;Saying that &#8220;we do not optimize for someone mis-using our system&#8221; is a cop out.</p>
<p>For example, it&#8217;s easy to settle for an O(n^2) algorithm by rationalizing that it&#8217;s okay because n will never be large. &nbsp;But you have no guarantee, do you. &nbsp;If you allow a program to create a condition where n is large, then you need a better algorithm to deal with the situation.</p>
<p>It&#8217;s interesting that most people&#8217;s view of Windows falls along the same lines. &nbsp;That is, in most cases, it performs well. &nbsp;But sometimes, it really stinks.</p>
<div class="post">[<i>You have to decide what you&#8217;re going to optimize for. An algorithm that works well for bad programs may not work well for good programs (e.g., constant overhead too high). Windows prefers to optimize for good programs. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-529463">
				<div id="div-comment-529463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">carlso</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070719-00/?p=25943#comment-529463">
			July 24, 2007 at 4:18 am</a>		</div>

		<p>&gt; You have to decide what you&#8217;re going to optimize for. An algorithm that works well for bad programs may not work well for good programs (e.g., constant overhead too high).</p>
<p>Perhaps you need two algorithms?</p>
<p>Progress is made when someone doesn&#8217;t accept their given constraints. &nbsp;Constraints provoke creativity and the creative solution.</p>
<div class="post">[<i>Two algorithms still has a cost. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>