<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1028963">
				<div id="div-comment-1028963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1028963">
			December 28, 2012 at 8:31 am</a>		</div>

		<p>Next up on crazy shenanigans found in code: manually digging up a reference to the heap lock and manually locking the heap.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1028973">
				<div id="div-comment-1028973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1028973">
			December 28, 2012 at 10:35 am</a>		</div>

		<p>Should be s/the/functional equivalents of the/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-chris-j-leonard even thread-even depth-1" id="comment-1028983">
				<div id="div-comment-1028983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Veltas' rel='external nofollow' class='url'>Veltas</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1028983">
			December 28, 2012 at 10:47 am</a>		</div>

		<p>&quot;Amazingly, I encountered one developer who thought that calling HeapÂ­Lock on a no-serialization heap would cause other heap operations on the heap to be blocked, even if they passed the HEAP_NO_SERIALIZATION flag to those operations.&quot;</p>
<p>Well that&#39;s not the biggest crime in the world. &nbsp;They sound similar, but I wouldn&#39;t necessarily know until I looked it up in the documentation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1028993">
				<div id="div-comment-1028993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DSN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1028993">
			December 28, 2012 at 2:47 pm</a>		</div>

		<p>Just from the name, it is not unreasonable to assume that the HEAP_NO_SERIALIZATION flag means that there is no <em>automatic</em> serialization, and that any required serialization must use the lock/unlock functions. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1029003">
				<div id="div-comment-1029003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr&#237;guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1029003">
			December 28, 2012 at 3:59 pm</a>		</div>

		<p>@Veltas: IMHO, you shouldn&#39;t use the HEAP_NO_SERIALIZATION flag (or any other one) without reading the documentation about it&#8230; I know, I know, it usually goes like this: 1) Write code 2) Test it 3) If it doesn&#39;t work, look up documentation. But it shouldn&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1029013">
				<div id="div-comment-1029013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1029013">
			December 28, 2012 at 10:52 pm</a>		</div>

		<p>@DSN I agree, that was actually my assumption as well before reading the documentation: HEAP_NO_SERIALIZATION means don&#39;t give me any synchronization except if explicitly demanded by the Lock function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1029023">
				<div id="div-comment-1029023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1029023">
			December 29, 2012 at 2:29 am</a>		</div>

		<p>@DSN: On the other hand, if HeapLock on NO_SERIALIZATION heap worked, it would give someone false impression that they still somehow locked the heap (it&#39;s called HeapLock after all). Maybe it really is better to fail and make sure people just can&#39;t do anything ambiguous.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1029033">
				<div id="div-comment-1029033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leibovich</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1029033">
			December 29, 2012 at 9:15 am</a>		</div>

		<p>It would be nice if the library would abort the program if it request locking the heap after passing HEAP_NO_LOCK, if the overhead isn&#39;t too great. Better fail early than later.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1029043">
				<div id="div-comment-1029043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1029043">
			December 29, 2012 at 5:35 pm</a>		</div>

		<p>It would appear that your comments section doesn&#39;t load properly on android 2.3, leading me to, for the second time in the past week, see that nobody had commented and offer some brilliant insight only to then go visit the page on my desktop machine and discover that my insight was less unique than I originally thought. &nbsp;I stand by its brilliance, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1029053">
				<div id="div-comment-1029053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cburn11</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1029053">
			December 29, 2012 at 6:25 pm</a>		</div>

		<p>@NT I have the same e/perien e with the stock android browser. Mozilla`s Android browser seems to display the comments correctly though-</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1029063">
				<div id="div-comment-1029063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wiseass</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1029063">
			December 30, 2012 at 3:53 am</a>		</div>

		<p>I want to nitpick the comment that led to the nitpicker&#39;s corner, and point out that his correction changes way too many lines :)</p>
<p>&quot;You never need to call functional equivalents of the HeapLock and HeapUnlock functions under normal operation.&quot;</p>
<p>&quot;But wait, functional equivalents of there&#39;s more. Holding the heap lock blocks all other threads&#8230;&quot;</p>
<p>:D</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1029083">
				<div id="div-comment-1029083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1029083">
			December 30, 2012 at 7:01 am</a>		</div>

		<p>I actually used HEAP_NO_SERIALIZATION once, on a private heap that was being used as an arena allocator so I didn&#39;t have to free memory in error condition (the normal path freed its memory anyway as it happened to avoid excessive memory consumption). It also had the nice side effect of making the code trivially provably leak free.</p>
<p>I suppose there could be another reasonable use of HEAP_NO_SERIALIZATION besides known single-thread heap but I&#39;m not currently aware of one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1029113">
				<div id="div-comment-1029113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/paulb_4000_rochester.rr.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>paulb@rochester.rr.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1029113">
			December 31, 2012 at 5:30 am</a>		</div>

		<p>I agree mostly with all the comments about Raymond&#39;s comment &quot;I encountered one developer who thought that&#8230;&quot;. In summary, holding beliefs about the behaviour of a call without reading the documentation, especially about a non-standard flag you decided to use, is most certainly poor practice. I don&#39;t agree with Raymond&#39;s tone implying that it is laughable, though.</p>
<div class="post">[<em>The laughable part was following the logic through to its conclusion: &quot;If I manually call <code>Heap&shy;Lock</code>, then that means that even when I pass the <code>HEAP_NO_SERIALIZATION</code> flag, the call will wait for the heap lock. Which means that all heap operations block on the heap lock even if I pass the no-serialization flag. In other words, the no-serialization flag has no effect.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1029503">
				<div id="div-comment-1029503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1029503">
			January 1, 2013 at 4:50 pm</a>		</div>

		<p>I think the incorrect mental model that allowed HeapLock to work with HEAP_NO_SERIALIZATION was that asking for no serialization actually used a R/W lock. Normal operations invoke the R-lock while HeapLock invokes the W-lock. This model would allow a HeapLock operation to block while a HeapAlloc or HeapFree were going on (or another operation protected by HeapLock), while not serializing HeapAlloc or HeapFree operations.</p>
<p>Of course, I can&#39;t explain why you would want those semantics or why somebody would assume them.</p>
<div class="post">[<em>Of course, HeapLock/Unlock existed decades before R/W locks, and W locks are not recursive, so you end up deadlocking against yourself. And I still don&#39;t understand why people think &quot;If I pass the no-serialization flag, I will get serialization (just not as much as usual).&quot; What would be the point of partial serialization? (Concurrent access to a no-serialization heap is expressly forbidden.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030643">
				<div id="div-comment-1030643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1030643">
			January 3, 2013 at 4:11 pm</a>		</div>

		<p>Yes, that would be my expectation. &nbsp;I agree that the expectation that other calls will be blocked is bogus. &nbsp;You ask for no-serialization, you do the serialization yourself. &nbsp;I would just have expected to be able to implement my own serialization using HeapLock and HeapUnlock. &nbsp;Guess not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030633">
				<div id="div-comment-1030633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121228-00/?p=5703#comment-1030633">
			January 3, 2013 at 3:59 pm</a>		</div>

		<p>The thinking isn&#39;t &quot;If I pass the no-serialization flag, I will get serialization (just not as much as usual),&quot; it&#39;s &quot;If I pass the no-serialization flag, no serialization is done *for me*, so obviously I need to manually lock and unlock the heap.&quot; &nbsp;What&#39;s not obvious is that &quot;no serialization&quot; means &quot;don&#39;t serialize (and also make manually calling lock/unlock fail to do anything).&quot;</p>
<div class="post">[<em>Okay, I can see how one might think that the &#39;no serialization&#39; flag means &quot;Do not call <code>Heap&shy;Lock</code> automatically. I have to call it manually if I want to serialize heap access.&quot; But then where does the expectation that calling <code>Heap&shy;Lock</code> will block other calls into the heap (even if they pass the no-serialization flag)? Wouldn&#39;t the expectation be &quot;I have to call <code>Heap&shy;Lock</code> manually if I want to serialize heap access&quot;? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>