<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1262225">
				<div id="div-comment-1262225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Craig</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160825-00/?p=94165#comment-1262225">
			August 25, 2016 at 7:56 am</a>		</div>

		<p>&#8220;Ideally, we&#8217;d use Interlocked­Exchange­Release if such a thing existed.&#8221;<br />
You seem to be using InterlockedExchange as an atomic store.  You aren&#8217;t looking at the old value in this example.<br />
If your compiler supports C11 (yes, C11, not C++11), then you can do this to get the effect you want:<br />
  atomic_store_explicit(&amp;OwnerThread, 0, memory_order_release);<br />
With C++11, you can do the same thing, but you need to use atomic all over the place, and that would make calling WakeByAddressSingle (WBAS) and WaitOnAddress (WOA) more awkward.</p>
<p>I do think you should be using a full InterlockedCompareExchange in your enter function.  Typically, locks provide full sequential consistency, and not just acquire-release guarantees.  The WakeByAddressSingle provides the full seq-cst guarantee on the exit side of things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1262235">
				<div id="div-comment-1262235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lucidfox</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160825-00/?p=94165#comment-1262235">
			August 25, 2016 at 8:58 am</a>		</div>

		<p>So what happens if the owning thread signals the address between the entering thread calling InterlockedCompareExchangeAcquire and WaitOnAddress?</p>
<p>Imagine this sequence:</p>
<p>1. Thread A calls InterlockedCompareExchangeAcquire and sees that the owning thread is neither 0 nor itself.<br />
2. Thread B leaves the ALTCS and calls WakeByAddressSingle.<br />
3. Thread A calls WaitOnAddress.</p>
<p>Since thread A missed the wake, it seems to me that it will be stuck waiting on a now-unowned ALTCS, possibly forever.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1263315">
				<div id="div-comment-1263315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160825-00/?p=94165#comment-1263315">
			September 2, 2016 at 8:13 am</a>		</div>

		<p>When thread A calls WaitOnAddress, the WaitOnAddress function notices that the value is already different from the undesirable value and returns immediately.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ipoverscsi odd alt thread-even depth-1 parent" id="comment-1262255">
				<div id="div-comment-1262255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ipoverscsi' rel='external nofollow' class='url'>ipoverscsi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160825-00/?p=94165#comment-1262255">
			August 25, 2016 at 12:02 pm</a>		</div>

		<p>I&#8217;m a little confused by the use of InterlockedCompareExchangeAcquire() in the EnterAltCs() implementation.</p>
<p>If I understand acquire/release correctly, the acquire semantics means that no code below that statement can moved via optimization above the acquire line.  But looking at the sequence of operations and how the data flows through the function, it would seem impossible for any statement to be re-ordered and maintain correct behavior. </p>
<p>It seems that the implementation implies acquire/release semantics by it&#8217;s very nature, so why even use the somewhat weaker InterlockedCompareExchangeAcquire()?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1262285">
				<div id="div-comment-1262285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160825-00/?p=94165#comment-1262285">
			August 25, 2016 at 2:57 pm</a>		</div>

		<p>There are several orderings involved and they are only loosely coupled:</p>
<p>The order of operations in the instructions emitted by the compiler.  As you say, data dependencies imply the correct order in this case.</p>
<p>The order in which the instructions are executed by the CPU.</p>
<p>The order in which writes to memory are flushed from cache to main memory.</p>
<p>The order in which writes to memory become visible to other CPUs.</p>
<p>The Acquire/Release semantics are needed in this case to constrain the last ordering.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1262305">
				<div id="div-comment-1262305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160825-00/?p=94165#comment-1262305">
			August 25, 2016 at 3:38 pm</a>		</div>

		<p>It&#8217;s Acquire because there&#8217;s no need to wait for writes that occurred outside the critical section to be retired before the critical section is entered. Those writes happened outside the critical section; they are already unordered!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1262446">
				<div id="div-comment-1262446" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kme</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160825-00/?p=94165#comment-1262446">
			August 28, 2016 at 7:51 pm</a>		</div>

		<p>ipoverscsi: It needs to be Acquire because the entire EnterAltCs() function needs to have Acquire semantics in the code that it&#8217;s called from.  You can&#8217;t have writes inside the critical section being migrated before the call that enters the critical section.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-winterberg odd alt thread-odd thread-alt depth-1" id="comment-1262275">
				<div id="div-comment-1262275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Michael+Winterberg' rel='external nofollow' class='url'>Michael Winterberg</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160825-00/?p=94165#comment-1262275">
			August 25, 2016 at 1:52 pm</a>		</div>

		<p>This being the blog that it is, I&#8217;m assuming the answer is going to be &#8220;what do you think?&#8221;, but:<br />
Relating to the thought of &#8220;InterlockedExchangeRelease would be nice if it existed&#8221;, starting possibly with the Windows 8 SDK, winnt.h gained several intriguingly named functions, like ReadAcquire, WriteRelease. However, they&#8217;re not documented. Are they not documented because they&#8217;re not supported? Or are they not documented because &#8220;oops, missed them&#8221;?<br />
Since you&#8217;ve had two opportunities to use them alongside other Win8+ features, I&#8217;m assuming not supported, but there seems to be little harm in asking for clarification.<br />
It also seems like they&#8217;re only defined for desktop apps, but these three functions are listed as supported for Store apps, too. So that&#8217;d be another reason for you not using them.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>