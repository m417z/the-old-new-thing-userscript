<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-206803">
				<div id="div-comment-206803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-206803">
			August 31, 2004 at 8:57 am</a>		</div>

		<p>What a great article!  I am going to sit down and run some tests and really sink my teeth into this subject for some work I have to do later next week.  What a great resource your site has become.  Thanks!  Finally,  for one am glad you do not use smart pointers in you examples.  Not that I do not use raw pointers in my work, it just makes it easier to follow.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-206813">
				<div id="div-comment-206813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Filip</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-206813">
			August 31, 2004 at 10:38 am</a>		</div>

		<p>You may call me pedantic &#8230; but I tried to compile your program:</p>
<p>  if (SUCCEEDED(CoInitialize(NULL))) { &lt;&#8211; Missing parenthesis</p>
<p>and </p>
<p>        if (RegQueryValueW(hkPub, szKey, szCLSID, &amp;l) == ERROR_SUCCESS)<br />
<br />        { &lt;== Missing bracket</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-206863">
				<div id="div-comment-206863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-206863">
			August 31, 2004 at 6:18 pm</a>		</div>

		<p>Seriously, a lower-case l is a terrible name for an identifier, whether or not you intend for your code to be read by humans.</p>
<p>Now just to be snarky, having observed cases of &quot;if ([&#8230;] == ERROR_SUCCESS)&quot; and &quot;if (SUCCEEDED([&#8230;]))&quot; in the same code sample, I can&#8217;t help wondering.  Shouldn&#8217;t the latter macro have been ERROR_SUCCEEDED?  Or ERRORED_SUCCESSFULLY?<br />
<br />Too bad this one doesn&#8217;t have a screenshot:<br />
<br /><a target="_new" href="http://www.sonic.net/~ezzell/Error%20Messages/Nothing_Goes_Wrong_Like_Success.htm#Nothing_Like_Success" rel="nofollow">http://www.sonic.net/~ezzell/Error%20Messages/Nothing_Goes_Wrong_Like_Success.htm#Nothing_Like_Success</a><br />
<br />but this one does:<br />
<br /><a target="_new" href="http://home.comcast.net/~anon4321/niceone.gif" rel="nofollow">http://home.comcast.net/~anon4321/niceone.gif</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-206873">
				<div id="div-comment-206873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-206873">
			August 31, 2004 at 6:46 pm</a>		</div>

		<p>It&#8217;s called ERROR_SUCCESS because it&#8217;s an error code (and therefore must be named ERROR_something) but no error occurred. What would you call it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-206893">
				<div id="div-comment-206893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">darwou</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-206893">
			August 31, 2004 at 10:44 pm</a>		</div>

		<blockquote><p>
  Now just to be snarky, having observed<br />
  <br />&gt; cases of &quot;if ([&#8230;] == ERROR_SUCCESS)&quot;<br />
  <br />&gt; and &quot;if (SUCCEEDED([&#8230;]))&quot; in the same<br />
  <br />&gt; code sample, I can&#8217;t help wondering.<br />
  <br />&gt; Shouldn&#8217;t the latter macro have been<br />
  <br />&gt; ERROR_SUCCEEDED? Or ERRORED_SUCCESSFULLY?</p>
<p>SUCCEEDED() is unrelated to ERROR_SUCCESS.</p>
<p>HRESULTS are not Win32 errors.</p>
<p>ERROR_SUCCESS is the Win32 error code indicating success. It is defined as 0.</p>
<p>Win32 API errors are positive integers. For example, ERROR_NOT_ENOUGH_MEMORY is defined as 8.</p>
<p>On the other hand, an HRESULT is an error returned from a COM interface or API. </p>
<p>S_OK is the error code that indicates success. It is also defined as 0. </p>
<p>However, HRESULT codes representing errors are all negative. For example, E_OUTOFMEMORY is defined as 0x8007000E.</p>
<p>SUCCEEDED() and FAILED() are both macros designed to work only with HRESULT. They check to see if the error code is negative to determine whether to return TRUE or FALSE.</p>
<p>Hence, you must NEVER use either macro with the error code returned from a Win32 API like RegEnumKeyW or RegQueryValueW().<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-207173">
				<div id="div-comment-207173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-207173">
			September 1, 2004 at 7:15 pm</a>		</div>

		<p>8/31/2004 6:46 PM Raymond Chen</p>
<p>&gt; It&#8217;s called ERROR_SUCCESS because it&#8217;s an<br />
<br />&gt; error code [&#8230;] What would you call it?</p>
<p>I would have defined return codes or status codes instead of error codes.  I would have allowed the possibility of a successful return code or successful status code.  I would probably call the thing SUCCESS or STATUS_SUCCESS.  Despite my cynicism, I think there were known cases of operations performing as intended even before the codes here were designed as error codes. </p>
<p>For comparison:  When programs under VMS returned a value whose meaning meant a warning level but success, the fault was in those programs not the OS.  The OS did define a value whose meaning meant a success level together with success.  The OS came with impeccable documentation of this fact.  Some programs even obeyed it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-207413">
				<div id="div-comment-207413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-207413">
			September 2, 2004 at 9:34 am</a>		</div>

		<p>And that&#8217;s what the NT team did &#8211; with STATUS and HRESULT codes.  But the registry stuff predates NT. The only thing the NT team could do with the registry stuff was come up with names for things that already existed.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>