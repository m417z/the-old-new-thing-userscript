<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1057133">
				<div id="div-comment-1057133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130517-00/?p=4323#comment-1057133">
			May 17, 2013 at 7:15 am</a>		</div>

		<p>Why did this have to be special cased, why not just use UIS_SET?</p>
<p>Does anyome know where UISF_ACTIVE is used and what it looks like?</p>
<div class="post">[<em>You might want to change your user name. Generally speaking, telling somebody that they suck is not going to make them interested in interacting with you in a positive way. They&#39;re not going to bother checking whether you&#39;re being ironic. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1057183">
				<div id="div-comment-1057183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130517-00/?p=4323#comment-1057183">
			May 17, 2013 at 8:28 am</a>		</div>

		<p>I&#39;ll take a crack.</p>
<p>&quot;Exercise: Why is it important to create and initialize the child windows before sending the WM_UPDATE&shy;UI&shy;STATE message?&quot;</p>
<p>So that the message can propagate to them. They can&#39;t receive it if they don&#39;t exist!</p>
<p>Any accelerators are going to be displayed in child labels, menus, buttons&#8230;</p>
<p>&quot;Exercise: Why can&#39;t the window manager do this automatically after WM_CREATE returns?&quot;</p>
<p>I assume to allow the programmer to have control over it. &nbsp;Also probably legacy software support.</p>
<p>&quot;Exercise: Explain the behavior this customer observes.&quot;</p>
<p>Sounds like a case where the dialog is being hidden and reshown instead of destroyed, and this is affecting whether or not the UPDATEUISTATE message is sent?</p>
<p>Honestly my GUI experience is mostly .NET, minimal with the C APIs. &nbsp;So my guess here is really a stab in the dark.</p>
<div class="post">[<em>Correct on #1. For #2, think about how dialog boxes are created. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1057203">
				<div id="div-comment-1057203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ajgelado_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>ajgelado@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130517-00/?p=4323#comment-1057203">
			May 17, 2013 at 9:08 am</a>		</div>

		<p>&quot;Exercise: Explain the behavior this customer observes.&quot;</p>
<p>The customer launches the program using keyboard (Enter on the icon, Ctrl+F9 on Visual Studio, etc.), so the last event is a keyboard one.</p>
<div class="post">[<em>Yup, that was the reason. They were launching the program from the command prompt (therefore the last input was the Enter key). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1057273">
				<div id="div-comment-1057273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130517-00/?p=4323#comment-1057273">
			May 17, 2013 at 2:13 pm</a>		</div>

		<p>&quot;Exercise: Why can&#39;t the window manager do this automatically after WM_CREATE returns?&quot;</p>
<p>Well, from the CREATESTRUCT documentation for lpCreateParams&quot; member.</p>
<p>&quot;If the window is being created from a dialog template, this member is the address of a SHORT value that specifies the size, in bytes, of the window creation data. The value is immediately followed by the creation data.&quot;</p>
<p>Since the CREATESTRUCT is only given to CreateWindow(Ex) and not stored anywhere else, the information that the window manager and anything else needs would be gone after the WM_CREATE message has finished processing.</p>
<div class="post">[<em>Not sure how the CREATESTRUCT is involved. The question is &quot;Why can&#39;t the window manager initialize the UI states when the window returns from its WM_CREATE handler?&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1057303">
				<div id="div-comment-1057303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130517-00/?p=4323#comment-1057303">
			May 17, 2013 at 9:12 pm</a>		</div>

		<p>I obviously over thought this. It has been a hard week and I was looking for problems where they didn&#39;t exist.</p>
<p>Well, the dialog controls need to exist before it initialises the UI states, but from what I understand of the dialog creation procedure, it is:</p>
<p>Get dialog template from somewhere (either resource, or via parameter)</p>
<p>Create main dialog window using CreateWindowEx.</p>
<p>Create child controls for dialog window using CreateWindowEx.</p>
<p>Send WM_INITDIALOG message to the main dialog window.</p>
<p>Show the window if the visible flag is set.</p>
<p>For DialogBox only, run its own message pump.</p>
<p>Since the WM_CREATE message is sent to a window before CreateWindowEx returns. By the time the WM_CREATE handler returns there are no controls at all. This means the window manager can&#39;t do it automatically after WM_CREATE finishes processing because the controls don&#39;t exist and the UI state initialisation requires the child controls to exist first.</p>
<p>Hopefully I haven&#39;t overthought things this time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1057913">
				<div id="div-comment-1057913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130517-00/?p=4323#comment-1057913">
			May 23, 2013 at 6:17 am</a>		</div>

		<p>@Crescens2k, I think you got it right. The *Dialog* functions do quite a bit of work behind the scenes. One is to create the dialog, another is to create the controls. It sends a WM_INITDIALOG for initialization, since the WM_CREATEs were handled already, and then a WM_UPDATEUISTATE if the initialization was successful (note: the dialog procs are a bit different than the window procs, in the return argument and in not calling a default proc).</p>
<p>Once you justify &quot;Why is it important to create and initialize the child windows before sending the WM_UPDATEUISTATE message?&quot;, you can answer the second question with &quot;Because is it important to create and initialize the child windows before sending the WM_UPDATEUISTATE message.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>