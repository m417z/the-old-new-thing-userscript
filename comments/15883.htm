<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-789623">
				<div id="div-comment-789623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789623">
			November 27, 2009 at 8:05 am</a>		</div>

		<p>Also, the multiple heaps approach confuses the Leak Detection Tools. For example, if I need to load some data</p>
<p>into some memory structures &#8211; I create a class with a HANDLE initialized with HeapCreate(&#8230;) and I&#8217;ll allocate all</p>
<p>my data from this allocator. That&#8217;s what MSDN suggests. And that works wonders for performance &#8211; in class</p>
<p>destructor I simply call HeapDestroy() instead of thousands calls to free()/delete, etc. Clean and fast! However,</p>
<p>I am constantly getting the &quot;bugs&quot; assigned to me which say: &quot;A lot of leaks reported in module XYZ! (my module)&quot;.</p>
<p>I am tired of explaining the situation to SQA guys, actually&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-789663">
				<div id="div-comment-789663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789663">
			November 27, 2009 at 9:26 am</a>		</div>

		<p>Today&#8217;s post is right on what I am currently working on.</p>
<p>I wasted a day trying to figure out why STLport seemed to leak each and every allocation to end up discovering it does its own pooling/caching in the back. Why can&#8217;t these guys just use the OS&#8217;s allocator and let it do its job is beyond me. It has been optimized for this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-789683">
				<div id="div-comment-789683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789683">
			November 27, 2009 at 9:34 am</a>		</div>

		<p>This is one of several reasons I find the memory-leak tools to be really frustrating.</p>
<p>Even the ones that cost thousands of dollars &#8212; at least the two or three high-end ones I&#8217;ve tried &#8212; throw up so many false-positives that it&#8217;s very time consuming to sift through them looking for the legitimate problems.</p>
<p>(And that&#8217;s if they don&#8217;t fall over completely on a large/complex project.)</p>
<p>It&#8217;s a very difficult problem to solve, to be fair to them, but when they ask $$$$ for solutions that don&#8217;t really work I don&#8217;t have much sympathy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-789693">
				<div id="div-comment-789693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789693">
			November 27, 2009 at 10:09 am</a>		</div>

		<p>I fully agree Teo. Microsoft should expose APIs using counted strings and deprecate the old ones.</p>
<p>As to whether the BSTR way of implementing counted strings is a panacea, well I&#8217;ve had my doubts on that, but it&#8217;s a million times better than the C way.</p>
<p>Some weirder parts of the BSTR way are obviously there for some compatibility with the C way, which is funny since from VB you can&#8217;t actually call a DLL function that needs a C string without some conversion taking place (for the &#8230;A functions this is conversion to the local code page, for the &#8230;W functions this is copying the contents to a Byte array). Unless you write a typelib, but most people don&#8217;t bother.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-789703">
				<div id="div-comment-789703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JohnQPublic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789703">
			November 27, 2009 at 10:31 am</a>		</div>

		<p>Was it not a design goal of BSTR to have a common allocator/deallocator function that everyone could agree on when working with strings? &nbsp;I suppose everyone could have relied on CoTaskMemAlloc/CoTaskMemFree for strings, but BSTR seems like it was tailor made for this purpose.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-789753">
				<div id="div-comment-789753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789753">
			November 27, 2009 at 12:31 pm</a>		</div>

		<blockquote><p>
  &gt; I fully agree Teo. Microsoft should expose APIs using counted strings and deprecate the old ones.
</p></blockquote>
<p>Why bother? Support for OLE and even the Win32 API is archiac legacy stuff. .NET is the way forward. Surely? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-789763">
				<div id="div-comment-789763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jdanielsmith.spaces.live.com' rel='external nofollow' class='url'>J. Daniel Smith</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789763">
			November 27, 2009 at 12:39 pm</a>		</div>

		<p>@porter: +1 (although perhaps not the most popular stance at this blog).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-789643">
				<div id="div-comment-789643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789643">
			November 27, 2009 at 8:52 am</a>		</div>

		<p>I find quite amusing and embarrising at the same time that, on the lowest levels, NT uses counted strings in the form of UNICODE_STRING structure, and basically evety high-level language uses counted strings, be they std::basic_string&lt;&gt;, BSTR, Delphi&#8217;s string, .net String etc. But they *must* talk to each other using null-terminated interface of Win32 API middle-man:(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-789843">
				<div id="div-comment-789843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Friday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789843">
			November 27, 2009 at 9:20 pm</a>		</div>

		<p>Can OANOCACHE be used for non-debug purposes?</p>
<p>To improve stability and/or speed?</p>
<p>Don&#8217;t look at me like that, I&#8217;m not a programmer. :) I just haven&#8217;t seen it non-debugging context and am curious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-789853">
				<div id="div-comment-789853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789853">
			November 27, 2009 at 11:37 pm</a>		</div>

		<p>I&#8217;m having similar problems with SHGetKnownFolderIDList and other shell functions. They create multiple memory allocations, probably for caching purposes.</p>
<p>Anybody knows how to make the shell free its caches on shutdown? So I can see what the true leaks are? OANOCACHE has no effect in this case.</p>
<div class=post>[<i>I believe the checked build of Windows does what you want. (Sometimes I wonder why we make a checked build since it seems nobody runs it.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-789953">
				<div id="div-comment-789953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789953">
			November 29, 2009 at 2:30 pm</a>		</div>

		<p>[I believe the checked build of Windows does what you want. (Sometimes I wonder why we make a checked build since it seems nobody runs it.) -Raymond]</p>
<p>Well, only MSDN subscribers even has access to checked builds of Windows.</p>
<div class=post>[<i>Then subscribe to MSDN. <a href="http://msdn.microsoft.com/aa718661.aspx" rel="nofollow">There are many benefits to being an MSDN subscriber</a>. For example, you get to be one of those &#8220;customers&#8221; I often write about. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-789963">
				<div id="div-comment-789963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789963">
			November 29, 2009 at 3:04 pm</a>		</div>

		<p>[I believe the checked build of Windows does what you want. (Sometimes I wonder why we make a checked build since it seems nobody runs it.) -Raymond]</p>
<p>Rename it to &quot;Windows Debug Build&quot;? AFAIK the term &quot;checked&quot; isn&#8217;t a common synonym for &quot;debug&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-789973">
				<div id="div-comment-789973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789973">
			November 29, 2009 at 4:06 pm</a>		</div>

		<p>&gt; Rename it to &quot;Windows Debug Build&quot;? AFAIK the term &quot;checked&quot; isn&#8217;t a common synonym for &quot;debug&quot;.</p>
<p>IIRC, it&#8217;s not actually a debug build, though. &nbsp;It&#8217;s just the release build with assertions and similar diagnostic *checks* enabled. &nbsp;The debug build is something else.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-789983">
				<div id="div-comment-789983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789983">
			November 29, 2009 at 5:29 pm</a>		</div>

		<p>&quot;IIRC, it&#8217;s not actually a debug build, though. &nbsp;It&#8217;s just the release build with assertions and similar diagnostic *checks* enabled. &nbsp;The debug build is something else.&quot;</p>
<p>Larry Osterman has the story:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/larryosterman/archive/2005/08/31/458572.aspx" rel="nofollow">http://blogs.msdn.com/larryosterman/archive/2005/08/31/458572.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-790013">
				<div id="div-comment-790013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-790013">
			November 30, 2009 at 3:43 am</a>		</div>

		<p>BSTRs themselves can have null characters which makes them different from regular C style null terminated strings. This could have been a requirement to create this new string type?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-790003">
				<div id="div-comment-790003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-790003">
			November 29, 2009 at 11:44 pm</a>		</div>

		<p>&gt;&gt; Sometimes I wonder why we make a checked build since it seems nobody runs it</p>
<p>Well, for user-mode stuff it is not that helpful but for kernel-mode it&#8217;s a life saver. Most certainly *somebody does* run it, like us :-P</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>