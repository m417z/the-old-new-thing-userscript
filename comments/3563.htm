<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1071603">
				<div id="div-comment-1071603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071603">
			August 8, 2013 at 7:48 am</a>		</div>

		<p>Actually, that is not a problem.</p>
<p>The base class is fully constructed, so if the derived constructor throws, the base destructor is invoked.</p>
<div class="post">[<em>I think you&#39;ve confused C++ with C#. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071623">
				<div id="div-comment-1071623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071623">
			August 8, 2013 at 8:30 am</a>		</div>

		<p>Shouldn&#39;t Derived&#39;s ctor be protected too?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071633">
				<div id="div-comment-1071633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/anil_4000_lambdah.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>anil@lambdah.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071633">
			August 8, 2013 at 9:18 am</a>		</div>

		<p>This blog post was a good reminder to me to re-read <a rel="nofollow" target="_new" href="http://www.parashift.com/c++-faq-lite/exceptions.html">http://www.parashift.com/&#8230;/exceptions.html</a></p>
<p>The amount of gotchas in c++ is frustrating at times.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jader3rd odd alt thread-odd thread-alt depth-1" id="comment-1071643">
				<div id="div-comment-1071643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jader3rd' rel='external nofollow' class='url'>jader3rd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071643">
			August 8, 2013 at 9:21 am</a>		</div>

		<p>I&#39;ve never seen a constructor add itself to a collection. This sounds like another great reason to never do so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071653">
				<div id="div-comment-1071653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bret Kuhns</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071653">
			August 8, 2013 at 9:32 am</a>		</div>

		<p>Although your static factory method is a good start, it can be easy for derived types to do incorrectly or not at all. The entire &quot;construct, register, return&quot; pattern is very ad hoc across a hierarchy of types. Unfortunately, because the `Create()` method is static, you can&#39;t use polymorphism to implement the virtual template pattern.</p>
<p>An ideal solution to the problem you presented would be to have a `SomeClassFactory` class that can follow the &quot;construct, register, return&quot; pattern across a hierarchy of types. For example,</p>
<p>public class SomeClassFactory {</p>
<p> &nbsp; &nbsp;public Make() {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;SomeClass obj = ConstructObj();</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;RegisterObj(obj);</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;return obj;</p>
<p> &nbsp; &nbsp;}</p>
<p> &nbsp; &nbsp;protected virtual SomeClass ConstructObj() {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;return new SomeClass(&#8230;);</p>
<p> &nbsp; &nbsp;}</p>
<p> &nbsp; &nbsp;protected virtual SomeClass RegisterObj(SomeClass obj) {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;Cache.Register(obj);</p>
<p> &nbsp; &nbsp;}</p>
<p>}</p>
<p>Now you can subclass `SomeClassFactory` on the protected virtuals to do the appropriate construction and registration steps while enforcing a consistent &quot;construct, register, return&quot; pattern.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071703">
				<div id="div-comment-1071703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071703">
			August 8, 2013 at 12:50 pm</a>		</div>

		<p>Along the lines of what jader3rd said, that constructor looks like a good example of an SRP violation to me.</p>
<p>On another note, it&#39;s also interesting to see how features of ORMs like NHibernate and EF interact with auto-properties in C# to encourage accessing partially constructed objects. &nbsp;For example</p>
<p>public class Customer</p>
<p>{</p>
<p> &nbsp; public Customer(string name)</p>
<p> &nbsp; {</p>
<p> &nbsp; &nbsp; &nbsp;this.Name = name; // ruh-roh &#8211; invoking virtual member on a partially constructed object</p>
<p> &nbsp; }</p>
<p> &nbsp; // must be virtual to allow the dynamically generated</p>
<p> &nbsp; // ORM proxy to override the member for change tracking</p>
<p> &nbsp; public virtual string Name { get; set; }</p>
<p>}</p>
<p>Of course, this situation can be avoided by implementing the property long-hand, but then you are missing out on the wonderfulness of auto-properties.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071713">
				<div id="div-comment-1071713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071713">
			August 8, 2013 at 1:24 pm</a>		</div>

		<p>A search for &quot;our long national nightmare&quot; brings up this [much funnier] link first: <a rel="nofollow" target="_new" href="http://www.theonion.com/articles/bush-our-long-national-nightmare-of-peace-and-pros,464/">http://www.theonion.com/&#8230;/bush-our-long-national-nightmare-of-peace-and-pros,464</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071723">
				<div id="div-comment-1071723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071723">
			August 8, 2013 at 1:44 pm</a>		</div>

		<p>&quot;Of course, this situation can be avoided by implementing the property long-hand, but then you are missing out on the wonderfulness of auto-properties.&quot;</p>
<p>Um&#8230; I think &quot;boo hoo&quot; is the appropriate response here.</p>
<p>As Franklin might have said, those who would give up essential correctness to purchase small keystroke savings deserve neither correctness nor keystroke savings.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071753">
				<div id="div-comment-1071753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Sowul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071753">
			August 8, 2013 at 3:20 pm</a>		</div>

		<p>@Gabe &#8211; that article is scarily prescient, isn&#39;t it? &nbsp;(Note the date).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071773">
				<div id="div-comment-1071773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071773">
			August 8, 2013 at 8:22 pm</a>		</div>

		<p>@JM, It may not seem like a big deal, there is more than just a small keystroke savings. If you choose not to use the auto-property, then you need to back the property with an explicitly declared private field. Since the field is private, you cannot lean on the compiler to verify your mappings match your entities (especially those that do not conform to conventions). You trade one form of correctness for another. While I agree that calling virtual methods from a constructor is a more dangerous thing to do than having a mapping fail, it is still an unfortunate and non-obvious confluence of features.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072143">
				<div id="div-comment-1072143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1072143">
			August 9, 2013 at 1:31 pm</a>		</div>

		<p>Mark Sowul: The Onion is quite amazing in its ability to predict the future: <a rel="nofollow" target="_new" href="http://www.theonion.com/articles/f-everything-were-doing-five-blades,11056/">http://www.theonion.com/&#8230;/f-everything-were-doing-five-blades,11056</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072193">
				<div id="div-comment-1072193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1072193">
			August 9, 2013 at 4:25 pm</a>		</div>

		<p>There&#39;s an unfortunate error in the linked article: Virtual calls in base-constructors for C++ get the appropriate implementation (of the level which you just initialize), they are not disallowed. At least he&#39;s right about C# always pretending the final object was already constructed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072213">
				<div id="div-comment-1072213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1072213">
			August 9, 2013 at 5:05 pm</a>		</div>

		<p>@Gabe, Mark Sowul: &quot;The Onion is quite amazing in its ability to predict the future&quot;</p>
<p>There are a number of such cases. One of my favorites: <a rel="nofollow" target="_new" href="http://www.theonion.com/articles/nation-celebrates-full-week-without-deadly-mass-sh,29293/" rel="nofollow">http://www.theonion.com/&#8230;/nation-celebrates-full-week-without-deadly-mass-sh,29293</a></p>
<p>If you remember the time when NYPD cops shot at someone and managed to hit 8 or so passer-bys, that article was published the day *before* that. It was *not* published with the &quot;Update: Never Mind&quot;.</p>
<p>There&#39;s another forum I frequent where there is a user with the name &quot;The Onion is Prophetic&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1073043">
				<div id="div-comment-1073043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Y</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1073043">
			August 15, 2013 at 2:50 am</a>		</div>

		<p>The CLR can be loaded dynamically into an existing process. Does it verify that the first 64k are really unmapped?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>