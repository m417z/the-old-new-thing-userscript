<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1063173">
				<div id="div-comment-1063173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063173">
			June 26, 2013 at 7:18 am</a>		</div>

		<p>&quot;&#8230;being forced to deploy the debug version of the program into production because that&#39;s the only build that works.</p>
<p>Unfortunately, they may have already reached that point&#8230;&quot;</p>
<p>Huh? I think it&#39;s the other way around. This appears to be one of those rare moments where two wrongs make a right. At least the way I define &quot;works&quot;, which is that &quot;the program will run without crashing&quot;.</p>
<p>Only the debug code has the error-code checking that the user (code author) desired, but that error-code checking is flawed and would crash the program if present. So it&#39;s the retail build that has a better chance of doing the right thing.</p>
<p>(Granted, we don&#39;t know what the retail build actually does based on the error code, but presumably it reacts less harshly to a non-zero state than just crashing the program outright).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1063183">
				<div id="div-comment-1063183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cullen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063183">
			June 26, 2013 at 7:24 am</a>		</div>

		<p>@pete.d The way the customer asked the question makes it clear that they have experienced a &#39;crash&#39; in production, caused by this assert firing. &nbsp;Therefore, they must have deployed the debug code to a client.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1063193">
				<div id="div-comment-1063193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jk.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063193">
			June 26, 2013 at 8:01 am</a>		</div>

		<p>Or they have their own ASSERT macro that does the same thing in release as debug</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1063213">
				<div id="div-comment-1063213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063213">
			June 26, 2013 at 9:02 am</a>		</div>

		<p>It would be helpful if the documentation on the SEM_NOOPENFILEERRORBOX called out that that only refers to loading DLLs with LoadLibrary(). &nbsp;People would get quite upset if every call to CreateFile() on a non-existent file resulted in a message box instead of it failing with ERROR_FILE_NOT_FOUND.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1063223">
				<div id="div-comment-1063223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063223">
			June 26, 2013 at 9:39 am</a>		</div>

		<p>The Subversion project made a policy decision that assertions would be left enabled in release builds. The thinking was that if an assertion failed, the system was in an undefined state so any further processing might result in data loss. &nbsp;Better to fail fast, even in release builds.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1063233">
				<div id="div-comment-1063233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063233">
			June 26, 2013 at 11:41 am</a>		</div>

		<p>@mikeb: &quot;The Subversion project made a policy decision that assertions would be left enabled in release builds.&quot;</p>
<p>To me, this would be indicative of poor planning and/or sub-standard unit testing during development. If you feel that the assertions are still needed, then obviously you didn&#39;t test your code thoroughly enough under all use-cases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1063243">
				<div id="div-comment-1063243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063243">
			June 26, 2013 at 12:02 pm</a>		</div>

		<p>@Brian_EE: &quot;To me, this would be indicative of poor planning and/or sub-standard unit testing during development. If you feel that the assertions are still needed, then obviously you didn&#39;t test your code thoroughly enough under all use-cases.&quot;</p>
<p>Or it&#39;s an acknowledgement that from a realistic point of view, &quot;test[ing] your code thoroughly enough under all use-cases&quot; is literally impossible. (Or, less flippiantly, that the Subversion team&#39;s standard for what &quot;enough&quot; means is stricter than yours.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx odd alt thread-odd thread-alt depth-1" id="comment-1063253">
				<div id="div-comment-1063253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063253">
			June 26, 2013 at 12:20 pm</a>		</div>

		<p>@mikeb: Not everyone runs with ECC RAM and some people overclock their CPUs. So &quot;impossible&quot; program states do happen.</p>
<p>A few extra verification checks are a good idea for most programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1063263">
				<div id="div-comment-1063263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063263">
			June 26, 2013 at 1:19 pm</a>		</div>

		<p>I&#39;ve been known to ship with assertions on, even in release compiles. Well done asserts don&#39;t slow things down that much.</p>
<p>One large product we make, we decided to ship the debug build (linked against release libraries) because the release build fails with a send to microsoft error on the database server keeling over while the debug build shows an error box with the unhandled exception in it and lets the user continue (after fixing the database server).</p>
<p>@mikeab: Exactly. Especially if the assertions are being used to check sanity of the backing store. Hitting an assert() on corrupting backing store is probably better than corrupting it worse.</p>
<p>@Brian_EE: (insert repetition of backing store)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1063273">
				<div id="div-comment-1063273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063273">
			June 26, 2013 at 3:02 pm</a>		</div>

		<p>I wish SetErrorMode had a way to pass heap corruption and other errors to our exception handler, rather than __fastfail. &nbsp;We have our own error reporter program that we use to send crash logs to us; it classifies them in a manner that&#39;s useful to us. &nbsp;We&#39;ve found that more and more types of crashes in our program are going to Windows Error Reporter instead of us. &nbsp;This is due to things like __fastfail and the SetUnhandledExceptionFilter(NULL) call in __report_gsfailure.</p>
<p>We understand the security reason behind not going through Win32 exception handling, particularly on x86-32, but if we could set one of our programs to handle crashes rather than Windows Error Reporter, it&#39;d be awesome. &nbsp;We have a SysDev account, but SysDev is a very slow web site that takes a week or more to show crashes for a new release.</p>
<p>For personal use, I also wish there were a way to enable alignment faults on x86-32/64, as it assists in emulator performance when emulating CPUs that fault on misaligned accesses. &nbsp;There is an RFLAGS flag for alignment checking in ring 3, but the documentation for SetErrorMode seems to imply that such faults aren&#39;t sent to the application level.</p>
<p>We often have beta versions of our program released to customers with assertions enabled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1063203">
				<div id="div-comment-1063203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">floyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063203">
			June 26, 2013 at 8:48 am</a>		</div>

		<p>@pete.d You are missing a vital detail here: The &quot;error-code checking&quot; as you call it does in fact *set* the error mode. In a release build they are running with a random error mode, in contrast to the debug build. Hence, only the debug build runs in a well defined environment.</p>
<p>.f</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1063283">
				<div id="div-comment-1063283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063283">
			June 26, 2013 at 6:07 pm</a>		</div>

		<p>@Myria: I know. The fault tolerant heap bit me. I followed the test what you ship mantra, and I had a double free bug. It didn&#39;t break until deployed on a Windows 2003 server. I wish there was a good way to tap the fault tolerant checks on release build so it fails fast. I ended up wrapping malloc and re-implementing the sentinel (it&#39;s not hard to do). For me, the overrun barrier is 0x1C 0x0D which is not likely to occur otherwise when processing 7 bit ASCII.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1063293">
				<div id="div-comment-1063293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuriy Gettya</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063293">
			June 26, 2013 at 6:57 pm</a>		</div>

		<p>@Joshua: you can always disable FTH for the process: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2012/01/25/10260334.aspx">blogs.msdn.com/&#8230;/10260334.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1063303">
				<div id="div-comment-1063303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063303">
			June 26, 2013 at 7:28 pm</a>		</div>

		<p>To me, I&#39;d think it&#39;s intentional to place the ASSERT() there to make sure noone is releasing debug version chain of program to production. That main program should also have a call to set it to 0 if debug.</p>
<p>I think it this way because he doesn&#39;t set the error mode to 0 in this line of code.</p>
<p>Btw, it&#39;s right that he should probably move the call out the ASSERT and instead just assert the value returned to allow it set the mode in production code too. But hey, we all have moment&#39;s that our mind don&#39;t work clearly and mistaken one way of code is equivalent of another. :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1063323">
				<div id="div-comment-1063323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063323">
			June 27, 2013 at 6:21 am</a>		</div>

		<p>@Evan: &quot;Or it&#39;s an acknowledgement that from a realistic point of view, &quot;test[ing] your code thoroughly enough under all use-cases&quot; is literally impossible.&quot;</p>
<p>Come work on equipment that people&#39;s lives depend on, and you&#39;ll have a different point of view of thorough unit testing of software. Line by line code reviews, verification testing with the debugger where you inject error cases, no dead code, etc etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1063383">
				<div id="div-comment-1063383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063383">
			June 27, 2013 at 7:27 am</a>		</div>

		<p>@Brian</p>
<p>I think the key phrase is &quot;realistic point of view.&quot; In the equipment you&#39;re talking about, those tests are critical. In a massive open-source project that doesn&#39;t fly planes, fire a missile or control a pacemaker, it would be unrealistic to expect that level of testing, and it would be impossible to implement without losing the vast majority of your developers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1063393">
				<div id="div-comment-1063393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063393">
			June 27, 2013 at 7:30 am</a>		</div>

		<p>If you&#39;re writing in an environment where it&#39;s that important, you probably should not use Windows, which is the subject of this blog.</p>
<p>No slight on Windows; it&#39;s just that doing a line-by-line review of your code, and ignoring the several-million-lines of not-your-code, seems to be in contradiction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1063483">
				<div id="div-comment-1063483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063483">
			June 27, 2013 at 10:23 am</a>		</div>

		<p>@Brian_EE: Certainly, in a high-risk environment, many rules are different. &nbsp;The software I work on won&#39;t kill anyone if it crashes &#8211; it merely annoys the customer. &nbsp;It is far more important for us to make a compelling product that mostly works rather than a simplistic product that works perfectly. &nbsp;We know it&#39;s a tradeoff, and have calibrated according to our particular situation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1063503">
				<div id="div-comment-1063503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063503">
			June 27, 2013 at 11:01 am</a>		</div>

		<p>@Brian_EE:</p>
<p>One key testing advantage you get when working on equipment that people&#39;s lives depend on is that you get to test on the precise equipment and configurations that the software will run on. That&#39;s generally not possible with software that&#39;s delivered to be run on whatever machine the user installs it on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1063523">
				<div id="div-comment-1063523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063523">
			June 27, 2013 at 1:23 pm</a>		</div>

		<p>I&#39;ve never understood why so many programmers have this funny idea that &quot;no bugs in my code, it&#39;s perfect!&quot; and managers think &quot;no bugs in our product, it&#39;s perfect!&quot;. &nbsp;When I hear about a problem in some part of a system that I&#39;ve recently worked on, I immediately start thinking about ways that it might have been my fault. &nbsp;Even if you&#39;re fresh out of school, past experience should have given you plenty of examples of times you&#39;ve written flawed code.</p>
<p>But then I get called a faithless pessimist when I suggest we verify something on our end before we blame the vendor/customer :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1063443">
				<div id="div-comment-1063443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063443">
			June 27, 2013 at 8:12 am</a>		</div>

		<p>If I had a nickel for every time I heard this contradiction:</p>
<p>&quot;my code is flawless, therefore internal errors in it should not crash the app&quot;.</p>
<p>You have to understand that *your* code probably is the most buggiest in the whole ecosystem, although with any type of integration, always &quot;trust but verify&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1063473">
				<div id="div-comment-1063473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063473">
			June 27, 2013 at 9:38 am</a>		</div>

		<p>The reason I leave the assertions in the shipping code is that my code *is* flawless: &nbsp;assert(something) is my continued claim of that lack of flaws, and the non-occurrence of assertion-failure terminations demonstrates the truth of my claim.</p>
<p>Semi-joking, of course, but people lose sight of what &#39;assert&#39; literally means: the programmer claims that a certain condition must necessarily hold, otherwise his code is defective.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1063893">
				<div id="div-comment-1063893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">j b</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130626-00/?p=3983#comment-1063893">
			June 28, 2013 at 1:52 pm</a>		</div>

		<p>@Nicolas,</p>
<p>Those claiming &#39;no bugs&#39; are often right &#8211; _provided_ that the program is used the way it was intended to be used. (End user level) &quot;testers&quot; temd to be useless to the project after half a year &#8211; that is the maximum time required to (unknowingly) learn to use the sofware as intended, not not as intended.</p>
<p>The best end user level test is the &quot;five year old test&quot;: Put a five year old at the keyboard, tell him to play around any way he wants to, and for every way he can make the program crash, and show daddy how he did it, he will get an ice cream cone&#8230; One of my fellow workers actually used this technique on a regular basis. (His sons were somewhat older, like ten years, but playing with that piece of software required somewhat higher competence.) Several mornings, he came to work presenting error situations discovered by his sons. And the sons did get their awards (which was somewhat more than an ice cream cone.)</p>
<p>Bugs are like things that disappear: The reason why things disappear and cannot be found is that people search in places where those things are NOT. If people would only search in places where the things ARE, then the things wouldn&#39;t get lost&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>