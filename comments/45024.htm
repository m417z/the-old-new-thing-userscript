<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1190904">
				<div id="div-comment-1190904" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1190904">
			May 27, 2015 at 7:07 am</a>		</div>

		<p>Surely there&#39;s a bit of a concern here (though perhaps not a flaw in the security model as designed), in that the &quot;real&quot; XYZ.EXE may be digitally signed by a party that the user trusts and is willing to run code from, but the attacker&#39;s pwned.exe masquerading as XYZ.EXE won&#39;t be. It almost makes me want to have the Digital Signatures tab of the Properties for a file to give a warning if there are DLLs in the same directory that aren&#39;t signed or are signed by a different party. Almost.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190914">
				<div id="div-comment-1190914" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1190914">
			May 27, 2015 at 7:08 am</a>		</div>

		<p>Well there was this antivirus bypass back in the day that involved static linking against .lib files derived from system DLLs. This did, of course, have to be prepared against the patch level of the target machine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190924">
				<div id="div-comment-1190924" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1190924">
			May 27, 2015 at 7:24 am</a>		</div>

		<p>TRWTF is installing things into e.g. C:Games without applying proper security to it (i.e. it&#39;s world-writable, or at least writable-by-non-admins). &nbsp;This is fairly common in the PC gaming space. &nbsp;I think some installers may even do it out of the box.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1190934">
				<div id="div-comment-1190934" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1190934">
			May 27, 2015 at 7:46 am</a>		</div>

		<p>That&#39;s a fundamental flaw of Windows security model: whatever the user runs is considered as trusted as the user. This assumption is wrong for about fifteen years already. Microsoft missed a chance to sandbox applications. Windows 8 apps model is too late and still doesn&#39;t protect from legacy apps. UAC is just a kludge.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190944">
				<div id="div-comment-1190944" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1190944">
			May 27, 2015 at 8:06 am</a>		</div>

		<p>@alegr1: Have you looked at the Windows 10 support for Win32 in Store Apps? It looks like it&#39;s all about sandboxing legacy apps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190954">
				<div id="div-comment-1190954" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1190954">
			May 27, 2015 at 8:14 am</a>		</div>

		<p>@alegr1: Unix traditionally does precisely the same thing. &nbsp;You can fake it with lots of little user accounts, but that&#39;s&#8230; ugly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190964">
				<div id="div-comment-1190964" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dtm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1190964">
			May 27, 2015 at 8:46 am</a>		</div>

		<p>@Nick: there is no sandboxing going on in Centennial, at least not in my understanding. The App-V-like sequencer is used to find out what the installer does to the target system, and access to certain storage locations (%APPDATA%, HKCU) is subsequently redirected. Of course the app needs to go through the Store submission process (except in case of sideloading). But once the application is deployed, no further security mechanisms apply.</p>
<p>@alegr1: you can accomplish what you want with Software Restriction Policies.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190974">
				<div id="div-comment-1190974" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1190974">
			May 27, 2015 at 11:18 am</a>		</div>

		<p>@alegr1</p>
<p>So nothing the user runs should be considered trusted by the user? Why should I have to jump through numerous additional security hoops just because some idiots run quite literally any executable anyone provides them?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1191004">
				<div id="div-comment-1191004" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191004">
			May 27, 2015 at 1:32 pm</a>		</div>

		<p>@alegr1:</p>
<p>Besides wanting to have a random rant at UAC, why did you mention it? UAC has nothing to do with this situation at all. In fact, the real fallacy here is thinking that UAC is anything more than a way to force developers into writing programs that are limited user account aware.</p>
<p>Now the thing which was introduced with Vista that I think really is underused on the desktop, especially with regards to downloaded files is the integrity levels. An example of this is suppose you downloaded an executable from the internet, and the web browser marked the file as came from another computer. Well, Windows could have changed it so that these files got executed with low integrity by default. Of course that would probably have had a huge backlash because of breakage and stuff, but that is most likely the best thing for this situation.</p>
<p>Other than that, to get an executable file on the system then the attacker must have had physical/remote access to the machine. This means that any kind of sandboxed environment could have been bypassed because in a sense, the machine has already been pwned.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle odd alt thread-odd thread-alt depth-1" id="comment-1191044">
				<div id="div-comment-1191044" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191044">
			May 27, 2015 at 2:53 pm</a>		</div>

		<p>@James Picone: I have a hard time buying this argument. &nbsp;Under what circumstance is it ever a good idea to place executable binaries in a world-writable location? &nbsp;If you&#39;re planning on supporting updates, your program should have an update wrapper executable that gets admin privileges as needed. &nbsp;Plenty of applications do this, games aren&#39;t special in any way with this requirement. &nbsp;I&#39;ve seen several games use UAC for their updaters, so this isn&#39;t impossible to do. &nbsp;Cumbersome? &nbsp;Sure, but being a good programmer means you take the security of your software and users into account.</p>
<p>The same argument can be applied to where data gets stored. &nbsp;User-specific data goes to AppData, system-specific data goes to ProgramData, and user-owned files goes in one of the user libraries (usually either Documents or Games). &nbsp;The Linux world has had these different layers of separation for ages, and from a security standpoint this makes good sense. &nbsp;If, as a user, you want that data stored on a different drive, you can always use symlinks to the SSD (very few games would even notice, since this is handled on the NTFS layer).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1191064">
				<div id="div-comment-1191064" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Emjayen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191064">
			May 27, 2015 at 5:50 pm</a>		</div>

		<p>@Joshua Would&#39;ve been easier (and likely more stealth-ier) just to invoke native services directly via syscall. The dispatch table barley changes between releases anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1191074">
				<div id="div-comment-1191074" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191074">
			May 27, 2015 at 5:53 pm</a>		</div>

		<p>Applications need to run in a sandbox with privileges assigned to them by a signed manifest. They should only be able to communicate with applications within their sandbox. Only MS-signed executables should be able to function outside a sandbox, even if ran from administrator desktop. Access to resources should be controlled by a manifest. Those controllable resources are file system (limited directories, limited file extensions and operations), network stack (ability to listen, ability to communicate with a fixed server or with an arbitrary server), etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190984">
				<div id="div-comment-1190984" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1190984">
			May 27, 2015 at 11:20 am</a>		</div>

		<p>@Kevin</p>
<p>Writing to, say, c:games is fine. What idiots have traditionally done (See: Valve, Steam) is place things into %ProgramFiles% and then set them globally-writeable.</p>
<p>Or, alternately, they place things into %ProgramFiles% and then tell users to disable all of the security on the machine rather than, say, spending five minutes to place the thing where it *actually belongs*.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1191094">
				<div id="div-comment-1191094" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Picone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191094">
			May 27, 2015 at 6:41 pm</a>		</div>

		<p>@alegr1 I don&#39;t know about you, but I quite like having a general-purpose computing device. I&#39;m not sure that&#39;s compatible with that security model.</p>
<p>Obvious objections:</p>
<p>&#8211; What about scriptability? How do you write, say, AutoHotKey under that model?</p>
<p>&#8211; It can sometimes be really, really useful to intercept an application&#39;s DLL calls and/or directly modify the application&#39;s code. The most obvious contemporary example is x360ce, which is a general-purpose application that proxies a dinput controller to an xinput controller so you can use it for modern games. It&#39;s amazingly great, and it works by proxying the xinput dll. Other things worth mentioning are the Skyrim Script Extender and dsfix, which add modding capabilities to Skyrim and make Dark Souls and Dark Souls 2 playable, respectively. How do you do something like that in your brave new security world?</p>
<p>&#8211; This application requires the following privileges: [list of every privilege possible]</p>
<p>&#8211; The fundamental problem in the loop is almost always the user &#8211; how much does signing and sandboxing limit the damage someone can do by downloading some signed malware and then saying &#39;yeah, sure, it can do everything it wants&#39;? That can still grab any files on the HDD, send spam, etc. About the best I can see is that you&#39;ve successfully prevented that malware hooking the web browser and sniffing bank account passwords. Well, unless it&#39;s a plugin for their web browser.</p>
<p>&#8211; When developing, how do you run code to test it? Do you need to ensure you can sign something before you can run any code? How do you write a debugger?</p>
<p>&#8211; Does limiting a computer&#39;s external attack surface to MS-signed executables actually help? Surely most wide-spread malware is already targeting bits of Windows that will, under this scheme, be MS-signed (possible exception &#8211; internet explorer).</p>
<p>It almost makes you think that the Slashdot paranoia about iPhone walled-gardens is justified.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1191104">
				<div id="div-comment-1191104" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Picone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191104">
			May 27, 2015 at 6:50 pm</a>		</div>

		<p>@Cheong00</p>
<p>You misunderstand &#8211; Minecraft just stores its executable in %AppData% and runs it from there, for whatever reason. It performs updates by downloading the most recent version of the executable and then running that one. It&#39;s Java, so someone using that as an attack would have to break the JRE at least.</p>
<p>I&#39;m not complaining about installers. I&#39;m complaining about all the other times something might want to write into Program Files. I&#39;m also complaining about the various locations data gets stored now that the obvious and convenient location isn&#39;t available. I guess having the game elevate every time you run it would also solve the problem, but that&#39;s throwing the baby out with the bathwater.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1191124">
				<div id="div-comment-1191124" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191124">
			May 27, 2015 at 8:34 pm</a>		</div>

		<p>@James Picone:</p>
<p>It&#39;s cool to have a computer to screw around, if you know what you&#39;re doing. 99.9% of users don&#39;t know what they&#39;re doing, and I grew tired of having to know what I&#39;m doing in order to keep my computers alive and healthy and safe and cozy and warm.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1191034">
				<div id="div-comment-1191034" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Picone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191034">
			May 27, 2015 at 1:55 pm</a>		</div>

		<p>@Anon: The actual outcome of your policy if it were enforced would be that everybody would install to some nonstandard location &#8211; say, C:programs &#8211; and nobody installs into %ProgramFiles%, and we&#39;re in the exact same situation of users having write access to a directory with programs in it (the horror!) but minus any of the benefits of %ProgramFiles%.</p>
<p>Games are *particularly* bad for the %ProgramFiles% model, what with very often wanting to write into their own directory (for example, because they&#39;ve patched), and there are significant downsides to %AppData% being used as general storage location for everything (rather hard to actually find where any given program stores its data &#8211; there are roughly three locations I have to check for any given game to find savefiles, I have to be very careful to make sure %AppData% is on a disc that I want huge clumps of hard-to-move data dropped onto, it means some games don&#39;t get the full benefits of running on an SSD because anything they want to easily write to must be in %AppData% and you probably don&#39;t want %AppData% on an SSD, no locality of storage, etc.)</p>
<p>tl;dr: Program Files not being world-writable is utterly awful in some significant use-cases. If you&#39;re installing Steam on a machine, making %ProgramFiles% world-writable is probably sensible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1191054">
				<div id="div-comment-1191054" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Picone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191054">
			May 27, 2015 at 3:19 pm</a>		</div>

		<p>@MNGoldenEagle</p>
<p>Personal desktop computer, where it&#39;s highly unlikely that another user of the computer is malicious, and if they are they have physical access and a number of other non-computer mechanisms for causing trouble. In the extreme case, it&#39;s the personal desktop computer of one person.</p>
<p>Wrapper executables and UAC and so on is cumbersome, as you&#39;ve admitted, and provides approximately zero actual security in this case. Games where this kind of thing is relevant are almost always used in this kind of context. What&#39;s an actual example threat that this stops? The best I can come up with is that I share a computer with an idiot and they download and execute malware from the internet, and for some reason they don&#39;t have administrator access (and thus can&#39;t UAC elevate for the malware, which they will if prompted, almost certainly). Most common case for that setup I can come up with is parents with a kid, and there are better approaches to stopping problems there (like, for example, not letting your kid download executables from the &#39;net unsupervised if they&#39;re young, or teaching your kid about not being an idiot if they&#39;re old).</p>
<p>So now if I want to find some file a game has stored somewhere on the system, I need to check Appdata/Local, Appdata/Roaming, AppData/LocalLow for a subdirectory that looks like it might be promising (and which won&#39;t be named something immediately obvious, it&#39;s probably named after the company that made the game, or maybe their publisher), and yes it could be in any or all of those three. Also I need to check the documents folder in case there&#39;s something in there. Of course, many games will write in several of those locations, often different data, so I need to dig through the directory trees to find what I&#39;m looking for. God help you if they keep stuff you want to modify in the registry.</p>
<p>Compare to the previous model, now deprecated, where the folder with the game&#39;s data in it contains subdirectories that contain any relevant game-related data, and maybe they write something into the registry. Settings-in-the-registry having mostly died is very much a good thing, but the loss of any kind of locality of file is not. There&#39;s a reason people disable this and *** about it and so on, and it&#39;s not a general hostility to microsoft or security features. It&#39;s because it&#39;s incredibly annoying, takes up a significant amount of time, and has just given game devs new and interesting ways to be terrible (Did you know Minecraft updates by downloading the new versions into %AppData% and executing them from there?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1191134">
				<div id="div-comment-1191134" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191134">
			May 28, 2015 at 12:38 am</a>		</div>

		<p>@James Picone:</p>
<p>You should be complaining about installers though. An installer should set up the environment in such a way that it makes it capable of running the application.</p>
<p>Having to make Program Files world writable shows that an installer has failed, because not only does it make all other applications inside Program Files a target, but it shows that the installer hasn&#39;t completed its job.</p>
<p>Now the real thing an installer should do in this case, is if it wants to install to Program Files but also write to its own directory, then it should modify the ACL on the directory, or a sub directory and put all the files it wants to write to there. Another option is to make the files exist from the start and modify the ACL on those files to allow limited users to write to it. In fact, I am always surprised that actually changing the ACL of the directory/file very rarely gets mentioned, and instead people complain about other things, like having to elevate.</p>
<p>Program Files as a convenient location hasn&#39;t gone, it is just that people still haven&#39;t moved along with it and started doing things correctly. They still like to take the quickest/easiest over the best.</p>
<p>Steam or other games is the same here. While the default is to install to Program Files, is it really that much of an issue to add a new library in the root directory, i.e. C:SteamLibrary? The same with other games, installing them outside of Program Files also helps.</p>
<p>One of these options allows for the game directory to be writable but at the same time it keeps the security of the system as high as it can be. One of the biggest issues with security on any system is actually users, and reducing security anywhere is always a sign that something is wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1191144">
				<div id="div-comment-1191144" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191144">
			May 28, 2015 at 12:59 am</a>		</div>

		<p>@alegr: you&#39;re free to use an iPad or some Android or Windows RT-based tablet then &#8211; they&#39;ll give you exactly what you want.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1191084">
				<div id="div-comment-1191084" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191084">
			May 27, 2015 at 6:32 pm</a>		</div>

		<p>(Did you know Minecraft updates by downloading the new versions into %AppData% and executing them from there?)</p>
<p>Actually downloading the new versions of installer into %AppData% and executing them from there is enough. The properly manifested installer should invoke UAC consent prompt, and from there things goes as what you think it should be if otherwise.</p>
<p>Do you think creating proper manifest file *one time only* is difficult task? IMO it&#39;s significantly easier than getting the performance right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1191234">
				<div id="div-comment-1191234" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191234">
			May 28, 2015 at 7:30 am</a>		</div>

		<p>@Darran Rowe</p>
<p>Perfect description of the problem there. Valve now recommends, despite still installing to a bad location, exactly that &#8212; they want you to set up a Steam Library in a non-protected location.</p>
<p>@James Picone</p>
<p>If developers didn&#39;t behave in stupid ways, you wouldn&#39;t have to check three locations. They would ALWAYS put user-modified files where they belong &#8212; in the appropriate subdirectory of %UserProfile% on Windows, or ~ on Linux/OSX. Developers should adhere to the standard of the OS, the OS shouldn&#39;t break itself to suit the developers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1191414">
				<div id="div-comment-1191414" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random User 90934752</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191414">
			May 28, 2015 at 2:53 pm</a>		</div>

		<p>Arguably:</p>
<p>Games should start following the normal install rules(/guidelines/suggestions/hallucinations). If it was installed per-machine by an admin into FOLDERID_ProgramFiles, it should only be able to be patched by an admin. Otherwise, per-user installs should go into FOLDERID_UserProgramFiles, can be patched by the owning user, and has no impact on any other user. If the dev wants to be fancy, they can offer a third, hybrid approach where an admin can install a base into FOLDERID_ProgramFiles and let users selectively override with patch files in FOLDERID_UserProgramFiles (auto-cleanup, etc., let as an exercise).</p>
<p>In any case, user data should go under the user&#39;s data folder. Shared data (local high-scores, etc.) is fuzzier; off-hand I would say it should only be an option in one of the scenarios where an admin did the install, and put it under the common data folder with the installer setting the appropriate permissions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 odd alt thread-odd thread-alt depth-1" id="comment-1191434">
				<div id="div-comment-1191434" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191434">
			May 28, 2015 at 3:23 pm</a>		</div>

		<p>@Darran Rowe: Fiddling the permissions under Program Files can lead to security vulnerabilities, it&#39;s a trusted location for things like UIPI, not to mention actually making the kind of vulnerabilities that Raymond&#39;s post describes a reality.</p>
<p>It&#39;s much better and easier to use the right locations for creating files in the first place. You don&#39;t have to write awkward ACL code, you don&#39;t have to worry about multiple users, it just works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1191484">
				<div id="div-comment-1191484" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191484">
			May 28, 2015 at 7:41 pm</a>		</div>

		<p>@AndyCadley:</p>
<p>I think you managed to misunderstand the context of the post somewhat. In no way did I say that making an application directory writable is a good thing. I never said that an application should prefer to write to its own directory over the per user directories. The theme of my post was more to do with how to limit the stupidity that you had to deal with when you are installing other applications.</p>
<p>My post was in direct response to someone saying that if you use a games platform like Steam, making the Program Files directory is probably the most sensible. As you may or may not know, games, especially older games, do stupid things. My post was completely about keeping Program Files completely locked up, but at the same time being flexible enough to allow games or applications that decide to write to its own directory happy and working.</p>
<p>Of course, as a caveat, there are times when an application may want to make its settings writable, but storing them per user may not be the best idea. This can occur if the settings involved are global, placing them inside the per user settings isn&#39;t right. In these cases, making a sub directory of the application writable is the way to go.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1191634">
				<div id="div-comment-1191634" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random User 90934752</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191634">
			May 29, 2015 at 8:50 am</a>		</div>

		<p>Agreed, Anon. But much of what I said applies there as well.</p>
<p>The LoB I routinely work with was originally created for maybe Win95, probably Win 3.x, and has evolved completely ad-hoc and everywhere except the installer. It takes the approach of creating it&#39;s own folders in the root of the specified drive. It doesn&#39;t change any permissions on it&#39;s own, but heaven help you if you don&#39;t go back and grant at least Modify access to Authenticated Users.</p>
<p>Both the installer and it&#39;s auto-update stub (actually, the same EXE that changes behavior based on its name) have other permissions and per-user issues (COM, etc.), so we try to do all out installs and updates with a custom MSI. But that doesn&#39;t resolve the actual program expecting users to be able the write in the core folder. They only just in the past year or two moved part of the user-modifiable data to a folder under the user&#39;s profile; and I mean the profile (%USERPROFILE%), not either of the user&#39;s AppDatas.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1191654">
				<div id="div-comment-1191654" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Max</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191654">
			May 29, 2015 at 12:44 pm</a>		</div>

		<p>@James Picone:</p>
<p>Ideally, games wouldn&#39;t create files that the user needs to manually find and modify outside of the game. Unless you&#39;ve run into some massive bug, a user shouldn&#39;t even really need to know the default location of a game&#39;s config files or save files, let alone go digging around in the filesystem for them. Of course, the reality is somewhat different, but bad coding isn&#39;t an excuse to engage in bad practices as a workaround for the problems caused by program issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1191594">
				<div id="div-comment-1191594" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191594">
			May 29, 2015 at 6:54 am</a>		</div>

		<p>@James Picone: Whoa, WHOA! Making %ProgramFiles% world-writable is NEVER reasonable. However, making your own subdirectory thereof is, in some circumstances.</p>
<p>The ideal for applications would be giving them a &quot;portable&quot; mode, which keeps everything in the application&#39;s directory *without elevating* (which forces it to be put in a user-writable (and preferably user-specific) directory, which is good for a &quot;portable&quot; application).</p>
<p>The &quot;portable mode&quot; setting should be determined by a configuration file in the application&#39;s directory, since that&#39;s the only place a &quot;portable&quot; application is supposed to store anything.</p>
<p>And another good thing is the application outright telling you where it puts its config, preferably with a button/menu item to directly open the directory in an Explorer window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1191604">
				<div id="div-comment-1191604" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191604">
			May 29, 2015 at 6:57 am</a>		</div>

		<p>Somehow we&#39;ve gotten into a discussion of games.</p>
<p>Steam was an *example*, because it is one of the most wide-spread applications.</p>
<p>Games were an *example*, because they very frequently don&#39;t write user-owned-files to the correct location(s).</p>
<p>Games are *NOT*, however, the largest offender.</p>
<p>LOB-applications are the largest offender (most of them written in garbage languages with frameworks which make it more difficult to produce well-formed applications), and there are millions upon millions of them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1191684">
				<div id="div-comment-1191684" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Xtreem Gam3r</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1191684">
			May 29, 2015 at 5:58 pm</a>		</div>

		<p> &nbsp;&quot;Ideally, games wouldn&#39;t create files that the user needs to manually find &#8230; outside of the game &#8230; Unless you&#39;ve run into some massive bug &#8230; &quot;</p>
<p>Most games do not provide a facility to move saved games to another machine (or user account), so it becomes necessary to find them outside of the game. &nbsp;</p>
<p>It used to be simple, they were in the directory of the game itself! &nbsp;But, it is way better to have multiple user accounts, with protections, so changes in the OS to improve that feature, if it means multiple places to search for the files, that is not a problem. &nbsp; </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243536">
				<div id="div-comment-1243536" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150527-00/?p=45024#comment-1243536">
			May 29, 2015 at 6:11 pm</a>		</div>

		<p><a rel="nofollow" target="_new" href="http://blog.trendmicro.com/trendlabs-security-intelligence/new-wave-of-plugx-targets-legitimate-apps/">blog.trendmicro.com/&#8230;/new-wave-of-plugx-targets-legitimate-apps</a> Is the concern discussed in this &quot;vulnerability&quot; An adversary is using clean programs as their persistence mechanism, since if a user looks at the program, they will see a legit signed application in the ASEP. It is not a vulnerability, other than the program itself has a DLL Load Order Vulnerability. <a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/windows/desktop/ff919712(v=vs.85).aspx">msdn.microsoft.com/&#8230;/ff919712(v=vs.85).aspx</a> </p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>