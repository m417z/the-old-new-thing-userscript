<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-henke even thread-even depth-1 parent" id="comment-1370125">
				<div id="div-comment-1370125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henke37' rel='external nofollow' class='url'>Henke37</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181107-00/?p=100155#comment-1370125">
			November 7, 2018 at 10:21 am</a>		</div>

		<p>This sounds eerily familiar. Not the ordering, but the rest. It reminds me of c++ global objects and their initialization order.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1370135">
				<div id="div-comment-1370135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181107-00/?p=100155#comment-1370135">
			November 7, 2018 at 10:23 am</a>		</div>

		<p>Indeed, this is how C++ global object initialization is implemented in the Microsoft compiler.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-simon_clarkstone even thread-odd thread-alt depth-1" id="comment-1370145">
				<div id="div-comment-1370145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Simon+Clarkstone' rel='external nofollow' class='url'>Simon Clarkstone</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181107-00/?p=100155#comment-1370145">
			November 7, 2018 at 1:46 pm</a>		</div>

		<p>I&#8217;m expecting something like:</p>
<p>for (INITIALIZER *i = &amp;firstInitializer + 1; i &lt; &amp;lastInitializer; i++) {<br />
  (**i)();<br />
}</p>
<p>That distant rumbling sound was comp.lang.c exploding.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-even depth-1" id="comment-1370195">
				<div id="div-comment-1370195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181107-00/?p=100155#comment-1370195">
			November 8, 2018 at 6:10 am</a>		</div>

		<p>Source code linker placement directives like this are well known (and used a lot) in the embedded world. As Raymond himself has been known to say &#8211; &#8220;How cute.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuffa8 even thread-odd thread-alt depth-1" id="comment-1370335">
				<div id="div-comment-1370335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/uffa8' rel='external nofollow' class='url'>uffa8</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181107-00/?p=100155#comment-1370335">
			November 10, 2018 at 1:26 am</a>		</div>

		<p>problem here if we write<br />
    const INITIALIZER initializer_fn = fn;<br />
and no reference to <b>address</b> of <em>initializer_fn</em> &#8211; compiler not generate variable for <em>initializer_fn</em><br />
for force generate variable we can use fake local function (<em>unreferenced local function has been removed</em>):</p>
<p>    static void fakeFn() { if (&amp;initializer_fn) __debugbreak(); }</p>
<p>where we reference <b>address</b> <em>&amp;initializer_fn</em></p>
<p>also instead <em>#pragma section(&#8220;mydata$x&#8221;, read)</em> and <em>__declspec(allocate(&#8220;mydata$x&#8221;)) const INITIALIZER x = fn;</em> better use<br />
    #pragma const_seg(&#8220;mydata$x&#8221;)<br />
    const INITIALIZER x = fn;<br />
    static void fakeFn() { if (&amp;x) __debugbreak(); }</p>
<p>so complete [code can look like](<a href="https://pastebin.com/32RehATA" rel="nofollow">https://pastebin.com/32RehATA</a>) </p>
<p>    #define echo(x) x</p>
<p>    #define random_var echo(__)echo(__LINE__)</p>
<p>    #define MAKE_VAR(x) static void echo(fakeFn)echo(__LINE__)() { if (&amp;x)__debugbreak(); }</p>
<p>    #define ADD_INITIALIZER(section, function) \<br />
    	    __pragma(const_seg(section)) \<br />
	    static INITIALIZER random_var = function; \<br />
	    MAKE_VAR(random_var)</p>
<p>    typedef void (__cdecl * const INITIALIZER)();</p>
<p>    #pragma const_seg("mydata$a")<br />
    INITIALIZER firstInitializer = 0;</p>
<p>    #pragma const_seg("mydata$z")<br />
    INITIALIZER lastInitializer = 0;</p>
<p>    void InitializeAllTheThings(INITIALIZER * pfbegin, INITIALIZER * pfend) {<br />
	    do {<br />
		    if (INITIALIZER initializer = *pfbegin++) initializer();<br />
	    } while(pfbegin &lt; pfend);<br />
    }</p>
<p>    void InitializeAllTheThings()<br />
    {<br />
	    InitializeAllTheThings(&amp;firstInitializer, &amp;lastInitializer);<br />
    }</p>
<p>    void __cdecl someFunc1();<br />
    void __cdecl someFunc2();<br />
    void __cdecl someFunc3();</p>
<p>    #pragma warning(disable : 4505) // unreferenced local function has been removed</p>
<p>    ADD_INITIALIZER(&quot;mydata$u&quot;, someFunc1)<br />
    ADD_INITIALIZER(&quot;mydata$u&quot;, someFunc2)<br />
    ADD_INITIALIZER(&quot;mydata$c&quot;, someFunc3)</p>
<p>    #pragma warning(default : 4505) // unreferenced local function has been removed</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>