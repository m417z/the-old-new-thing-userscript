<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1252095">
				<div id="div-comment-1252095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Max</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252095">
			June 10, 2016 at 7:44 am</a>		</div>

		<p>Just my two cents, it seems the &#8220;offending&#8221; code compares the index against TLS_MINIMUM_AVAILABLE, is that what it looks like ? And also, while we&#8217;re on the subject, why is the maximum amount of TLS slots, as per MSDN, 1088 ? I mean, it does not look like a &#8220;perfect&#8221; number in terms of 2-based numeric system, simply curious :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-raykoopa odd alt thread-odd thread-alt depth-1 parent" id="comment-1252115">
				<div id="div-comment-1252115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Ray+Koopa' rel='external nofollow' class='url'>Ray Koopa</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252115">
			June 10, 2016 at 8:46 am</a>		</div>

		<p>I found a quite old article about TlsGetValue when just searching for that together with the 64 constant&#8230; <a href="https://support.microsoft.com/en-us/kb/94804" rel="nofollow">https://support.microsoft.com/en-us/kb/94804</a><br />
&#8220;Although one TLS index is usually sufficient, a process may have up to TLS_MINIMUM_AVAILABLE indexes (guaranteed to be greater than or equal to 64).&#8221;<br />
Cool, but that doesn&#8217;t help dumb-me&#8230; x&#8217;3 I&#8217;m now really excited for the next part, damn this weekend!</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-ted-2 even depth-2 parent" id="comment-1252116">
				<div id="div-comment-1252116" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Glassware' rel='external nofollow' class='url'>Glassware</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252116">
			June 10, 2016 at 10:22 am</a>		</div>

		<p>The fact that the number 64 was mentioned as a kind of guarantee in the documentation leads me to believe that someone misread the documentation.  This kind of thing happens a lot if you know you need to write tests for return values, but at the same time you are in a rush and don&#8217;t scrutinize the results.</p>
<p>My guess is, poor developer is tasked to make sure all Windows API calls have their return values checked.  Developer reads documentation and sees &#8220;Guaranteed to be greater than 64&#8221;, but he (or she) notices that all the values in the real world are low numbers less than 64.  So the developer just sets a limit and says &#8220;Return a failure if the number is &gt; 64&#8221;.  Because the code doesn&#8217;t break in the real world, this is harmless.</p>
<p>Note that two things have to happen before this becomes an app crash:<br />
&#8211; First, someone has to write a piece of code that uses this shared function with the mistaken assumption about 64 and assumes that it always succeeds, and<br />
&#8211; Second, the behavior of Windows needs to change in some fashion so that apps in practice get numbers above 64.</p>
<p>Basically, if the consumer of this incorrect code had tested for -1, they would get a false negative success and could throw an error saying &#8220;This app is out of TLS slots!&#8221; which would be easier to figure out.  If Windows kept on returning low numbers, this problem wouldn&#8217;t get triggered.  But since it has worked in the past, it&#8217;s easy for new circumstances to trigger the problem.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1252135">
				<div id="div-comment-1252135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252135">
			June 11, 2016 at 1:20 am</a>		</div>

		<p>My money is on the developer was just dumb &amp; ran the allocator to find the highest value it returned on his computer and then put that in the code and never tested it.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-raykoopa even depth-4 parent" id="comment-1252195">
				<div id="div-comment-1252195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Ray+Koopa' rel='external nofollow' class='url'>Ray Koopa</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252195">
			June 13, 2016 at 12:57 am</a>		</div>

		<p>But since Raymond says it&#8217;s an application compatibility problem, I understood it as if this code worked in earlier versions of Windows, but doesn&#8217;t anymore, so something in Windows changed and this weird code doesn&#8217;t work anymore?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1252675">
				<div id="div-comment-1252675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252675">
			June 14, 2016 at 2:22 pm</a>		</div>

		<p>Yes, old versions of windows old return values up to 64. New versions return higher values. Windows is guaranteed to always return up to 64, but there is no guarantee it will return higher values. But it can if it wants.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even depth-2" id="comment-1252215">
				<div id="div-comment-1252215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252215">
			June 13, 2016 at 2:38 am</a>		</div>

		<p>Some while ago, the TLS slots were less abundant. See <a href="http://www.nynaeve.net/?p=181" rel="nofollow">http://www.nynaeve.net/?p=181</a> (circa 2007): </p>
<p>&gt; The TlsSlots array in the TEB is a part of every thread, which gives each thread a guaranteed set of 64 thread local storage indexes. Later on, Microsoft decided that 64 was not enough TLS slots to go around and added the TlsExpansionSlots array, for an additional 1024 TLS slots. The TlsExpansionSlots array is demand-allocated in TlsAlloc if the initial set of 64 slots is exceeded.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1252145">
				<div id="div-comment-1252145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252145">
			June 11, 2016 at 2:09 am</a>		</div>

		<p>I&#8217;m old fart enough to know 64 is original Windows 95 tls index limitation. 80 (64+16) is Windows 98 limitation and 1088 (64+1024) is modern Windows limitation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1252205">
				<div id="div-comment-1252205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252205">
			June 13, 2016 at 1:56 am</a>		</div>

		<p>What tool do you use to disassemble and annotate? IDA? Or just windbg and notepad? Or does windbg contain powerful rename and annotate functions?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1252305">
				<div id="div-comment-1252305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252305">
			June 13, 2016 at 9:54 am</a>		</div>

		<p>ntsd and notepad.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1 parent" id="comment-1252225">
				<div id="div-comment-1252225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252225">
			June 13, 2016 at 2:43 am</a>		</div>

		<p>Actually, I have never understood the importance of system-backed TLS. Why is it better than a user-defined map [thread_id: dictionary], where the dictionary simply maps (thread local) variable names and values?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1252685">
				<div id="div-comment-1252685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252685">
			June 14, 2016 at 2:30 pm</a>		</div>

		<p>@Alex Cohn: After you have made a thread safe dictionary that is fast, all you&#8217;ve done is duplicated the thread local storage api.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alexcohn even depth-3 parent" id="comment-1252855">
				<div id="div-comment-1252855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252855">
			June 16, 2016 at 1:34 am</a>		</div>

		<p>No, there is no need to keep a fast thread safe dictionary. You only need mutex&#8217;ed (actually, a multi-reader, single-writer) table to store per-thread dictionaries. Each of these dictionaries is guaranteed to have single-threaded access.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mike-winterberg odd alt depth-4" id="comment-1252875">
				<div id="div-comment-1252875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Michael+Winterberg' rel='external nofollow' class='url'>Michael Winterberg</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252875">
			June 16, 2016 at 5:02 pm</a>		</div>

		<p>TlsGetValue has basically the same execution time as GetCurrentThreadId. Using google benchmark to probably imperfectly measure, on my machine, I get 4ns per call to GetCurrentThreadId() and 5ns for TlsGetValue. Using an SRWLOCK in shared mode to protect a std::map or std::unordered_map, the time roughly triples. concurrency::combinable (as implemented today, a lock free hash map indexed by key) could be close to TlsGetValue, but the modulus in the lookup is brutal, so it&#8217;s about double.</p>
<p>Since there were / are many libraries that depend on global state and used / use TLS to avoid that, &#8220;implement a lock-free power-of-two hash map in order to get on-par performance in 1993&#8221; (or whenever TlsAlloc was introduced) was probably deemed excessive, especially if the OS is already going to allocate a bunch of thread local state anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher even depth-2 parent" id="comment-1252706">
				<div id="div-comment-1252706" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252706">
			June 14, 2016 at 3:41 pm</a>		</div>

		<p>If you are not using pointers, cleanup is nicer.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alexcohn odd alt depth-3 parent" id="comment-1252835">
				<div id="div-comment-1252835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252835">
			June 16, 2016 at 1:01 am</a>		</div>

		<p>Does TLS get destroyed automatically when a thread is closed?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mike-winterberg even depth-4" id="comment-1252885">
				<div id="div-comment-1252885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Michael+Winterberg' rel='external nofollow' class='url'>Michael Winterberg</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252885">
			June 16, 2016 at 5:17 pm</a>		</div>

		<p>&#8220;If you are not using pointers&#8221;, yes (or possibly earlier, when the thread exits). When TLS in Win32 was designed, DllMain was probably viewed as the way to go for cleanup of TLS data with non-trivial cleanup. At least one non-Win32 platform offers &#8220;run this function on thread exit&#8221; to provide cleanup of dynamically allocated TLS data. Windows provides almost identical functionality for fiber local storage.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1252786">
				<div id="div-comment-1252786" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.andreybazhan.com' rel='external nofollow' class='url'>Andrey Bazhan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252786">
			June 15, 2016 at 1:22 pm</a>		</div>

		<p># command can save you the hassle with s and u commands</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1253065">
				<div id="div-comment-1253065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1253065">
			June 17, 2016 at 11:08 am</a>		</div>

		<p>Not sure how # saves any hassle. It is much slower, stops once it hits an invalid page, and gets confused by data in the code segment.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1253115">
				<div id="div-comment-1253115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.andreybazhan.com' rel='external nofollow' class='url'>Andrey Bazhan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1253115">
			June 18, 2016 at 5:12 am</a>		</div>

		<p>Yeah, it&#8217;s true. But when you have like 100 hits it&#8217;s really tedious to do it all manually. So, it got me thinking what could be done about it and here it is:<br />
.foreach ( Address { s -[1]b 31410000 3151e000 9c 69 50 31 } ) { u Address &#8211; 2 L1 }</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4" id="comment-1253145">
				<div id="div-comment-1253145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1253145">
			June 18, 2016 at 4:08 pm</a>		</div>

		<p>If there were 100 hits, I would have scripted it. But there were only six hits.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>