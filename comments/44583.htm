<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1177363">
				<div id="div-comment-1177363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bradley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150226-00/?p=44583#comment-1177363">
			February 26, 2015 at 7:50 am</a>		</div>

		<p>Is there any benefit to calling it with thread affinity?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1177403">
				<div id="div-comment-1177403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150226-00/?p=44583#comment-1177403">
			February 26, 2015 at 8:49 am</a>		</div>

		<p>&gt; Windows 8 added &#8230;</p>
<p>Which means 10 years before we can use it. The Old New Thing is aptly named.</p>
<p>We might as well consider it a law of computing. 10 years must pass between when MS adds a kernel-level feature and Enterprise-grade commercial software can take advantage of it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1177443">
				<div id="div-comment-1177443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Colin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150226-00/?p=44583#comment-1177443">
			February 26, 2015 at 9:56 am</a>		</div>

		<p>@Joshua so um don&#39;t use a thread pool</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1177453">
				<div id="div-comment-1177453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150226-00/?p=44583#comment-1177453">
			February 26, 2015 at 10:04 am</a>		</div>

		<p>I wonder if there&#39;s anybody who can explain the thread affinity aspects of this API. I don&#39;t see why it would have it in the first place.</p>
<p>I also don&#39;t understand why you&#39;d need a flag to make it agnostic &#8212; surely any program that operates correctly with affinity will operate correctly without affinity, right? I&#39;d hate to imagine there are programs that rely on spurious event signals when threads exit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1177463">
				<div id="div-comment-1177463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150226-00/?p=44583#comment-1177463">
			February 26, 2015 at 10:12 am</a>		</div>

		<p>&gt; surely any program that operates correctly with affinity will operate correctly without affinity, right?</p>
<p>Sure, but if the program was OK with affinity, the OS can free up the notification resources when the thread exits. If the program requested REG_NOTIFY_THREAD_AGNOSTIC, the OS has to keep those resources until the key handle is closed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1177483">
				<div id="div-comment-1177483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jvert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150226-00/?p=44583#comment-1177483">
			February 26, 2015 at 10:41 am</a>		</div>

		<p>@Gabe, Originally this API was modeled after the async I/O pattern. You could think of it as queuing an async read which completes when the notification fires. Async I/O has the same thread affinity behavior. In retrospect, maybe not the best decision, but that is the rationale. </p>
<p>Note this API dates from NT3.1 around 1992 and predates things like thread pools and completion ports. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1177493">
				<div id="div-comment-1177493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150226-00/?p=44583#comment-1177493">
			February 26, 2015 at 11:19 am</a>		</div>

		<p>@Joshua: You have a point, but if Win10 really is offered a free upgrade for Win7 onwards (at least on client machines, not servers) then actually you probably can start writing software to the Win10 API next year.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1177503">
				<div id="div-comment-1177503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150226-00/?p=44583#comment-1177503">
			February 26, 2015 at 5:05 pm</a>		</div>

		<p>@jvert: for &quot;async I/O&quot;, read &quot;alertable I/O&quot;. Asynchronous I/O is the umbrella term.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1177563">
				<div id="div-comment-1177563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150226-00/?p=44583#comment-1177563">
			February 27, 2015 at 7:16 am</a>		</div>

		<p>@Ken Hagan: It must be nice not writing any business software.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1177753">
				<div id="div-comment-1177753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jas88</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150226-00/?p=44583#comment-1177753">
			February 28, 2015 at 3:41 am</a>		</div>

		<p>What would be nice here is some sort of backwards compatibility shim &#8211; so we could all use &quot;Reg­Notify­Change­Key­ValueThreadAgnostic&quot;, which on Windows 8+ is a straight API call, and on earlier versions provides an equivalent through a wrapper (maybe routing the Reg­Notify­Change­Key­Value call to a compatibility worker thread, which can then use its own event and signal the event passed).</p>
<p>It&#39;s something I like from the web development field: rather than coding for the lowest common denominator across the board, code for newer facilities then use some sort of polyfill to compensate on older platforms. Better for the legacy platforms to bear the burden of obsolescence, rather than hold everyone else back!</p>
<p>@voo: It seems a shame for Microsoft to improve the API like this &#8211; only for us to have to ignore it for years because it&#39;s not back-ported. On the other hand, I suppose for some business software, you could just keep selling the Windows 7 era software to Windows 7 users, while you develop new versions for Windows 10: unless it&#39;s something like accountancy, where the tax rules change regularly so you have to stay current, will many companies that refuse to upgrade other software be a good market for upgrades to your own?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1177793">
				<div id="div-comment-1177793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150226-00/?p=44583#comment-1177793">
			February 28, 2015 at 8:00 pm</a>		</div>

		<p>@jas88: *Most* new features in *most* APIs (that aren&#39;t under your control) can&#39;t be used for some time until all of your customers have upgraded. That doesn&#39;t mean that they shouldn&#39;t get new features &#8211; having the feature in 5 years is better than never having the feature.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>