<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1184603">
				<div id="div-comment-1184603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184603">
			April 13, 2015 at 7:11 am</a>		</div>

		<p>Plausable solution: order of creation. NT wasn&#39;t multiuser until NT4 Terminal Server add-on.</p>
<p>Exercise: dumbbell wave</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184623">
				<div id="div-comment-1184623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184623">
			April 13, 2015 at 7:18 am</a>		</div>

		<p>Exercise: CROSS_PROCESS is older than SAME_LOGON, and is more permissive due to backwards compatibility.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184633">
				<div id="div-comment-1184633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NotThisMind</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184633">
			April 13, 2015 at 7:19 am</a>		</div>

		<p>Because the Cross Process was first designed to actually imply sharing memory between processes?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184643">
				<div id="div-comment-1184643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Crowther @ Work</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184643">
			April 13, 2015 at 7:22 am</a>		</div>

		<p>At a guess because CryptProtectMemory pre-dates multi-simultaneous users versions of Windows?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184653">
				<div id="div-comment-1184653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184653">
			April 13, 2015 at 8:17 am</a>		</div>

		<p>Because the enumerations themselves are encrypted?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 odd alt thread-odd thread-alt depth-1" id="comment-1184683">
				<div id="div-comment-1184683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184683">
			April 13, 2015 at 10:30 am</a>		</div>

		<p>I&#39;d assume because the predecessor, RtlEncryptMemory, specified the original versions and lacked SAME_LOGON originally? </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184703">
				<div id="div-comment-1184703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184703">
			April 13, 2015 at 10:39 am</a>		</div>

		<p>Windows NT has been multi-user since 1989 &#8212; in other words, multi-user security was designed in from Day One rather than added as an afterthought. Now it may not have had the concept of multiple window stations when it was first released in 1993, but it has always had different user contexts and impersonation.</p>
<p>While NT 3.1 could not has supported multiple users running interactive Windows applications, it was certainly possible to have a file server that had multiple users logged in all in the same process (using impersonation to act as the logged in user) or, to have a telnet server that had different user processes running as different users. The CRYPT­PROTECT­MEMORY_SAME_LOGON option would have been useful even then, had the API existed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184713">
				<div id="div-comment-1184713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184713">
			April 13, 2015 at 12:07 pm</a>		</div>

		<p>I see two ways in which the design could have originated:</p>
<p>Theory 1: dwFlags was originally a BOOL, named fAllowCrossProcess or something. &nbsp;Programs passing TRUE for this parameter would be interpreted by the modern version as passing CRYPTPROTECTMEMORY_CROSS_PROCESS, while simultaneously extending the function to support the later additional feature CRYPTPROTECTMEMORY_SAME_LOGON.</p>
<p>Theory 2 (IMO more likely): dwFlags was originally intended to be a flags parameter, but now doesn&#39;t really mean &quot;flags&quot;. &nbsp;Only one flag was defined at first, CRYPTPROTECTMEMORY_CROSS_PROCESS. &nbsp;Eventually, the meaning of dwFlags morphed into meaning &quot;scope&quot; rather than &quot;flags&quot;. &nbsp;The absence of the former &quot;flag&quot; had to be given a name, hence CRYPTPROTECTMEMORY_SAME_PROCESS. &nbsp;The same-machine scope was left as the former flag&#39;s name, CRYPTPROTECTMEMORY_CROSS_PROCESS. &nbsp;The new functionality was added as CRYPTPROTECTMEMORY_SAME_LOGON.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184723">
				<div id="div-comment-1184723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184723">
			April 13, 2015 at 12:28 pm</a>		</div>

		<p>Because the people naming the flags were viewing the world through kernel-colored glasses?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1184733">
				<div id="div-comment-1184733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184733">
			April 13, 2015 at 12:51 pm</a>		</div>

		<p>@AndyCadley: The original function in ADVAPI32 goes back to Win2000.SP3 as far as I can tell so I don&#39;t see how the lack of multiple logons/runas/terminal server could be the reason. MSDN documents the RTL_ENCRYPT_OPTION_SAME_LOGON flag with no version notes and the Wine implementation is just a stub so somebody has to dig out a VM to really find out&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184743">
				<div id="div-comment-1184743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184743">
			April 13, 2015 at 1:18 pm</a>		</div>

		<p>&gt; #include &lt;stdio.h&gt; // horrors! mixing C and C++!</p>
<p>I think if you include &lt;assert.h&gt;, it becomes valid C11.</p>
<p>As for the exercise, I&#39;m going to guess that originally only CRYPT­PROTECT­MEMORY_SAME_PROCESS and CRYPT­PROTECT­MEMORY_CROSS_PROCESS, so the common part was &quot;PROCESS&quot;, and not &quot;SAME&quot;. And when they added a new enumerator, it didn&#39;t fit the previous convention, but they didn&#39;t change the convention (or the numbers), because backwards compatibility.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184753">
				<div id="div-comment-1184753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesJohnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184753">
			April 13, 2015 at 1:31 pm</a>		</div>

		<p>I give up. &nbsp;At first I thought that the function would exist since the early dates, and the newest flag added with NT 4.0 Terminal Server.</p>
<p>Then I saw that the API itself didn&#39;t exist until Vista/Server 2003. &nbsp;The reasoning of @Roman makes perfect sense, but normally I&#39;d have expected this situation over a period of years, whereas it appears in this case it happened during the timespan of the Server 2003 beta period. &nbsp;I guess they didn&#39;t decide to add SAME_LOGON until too late in the beta process to make any kind of breaking change.</p>
<p>Also this seems to be very limited in security, just to try to limit the damage of a successful attack. &nbsp;There are lots of opportunities to grab the memory before/after the encryption. &nbsp;If the user can&#39;t do that, then they couldn&#39;t read it either if it was just sitting around unencrypted in RAM 100% of the time (see: airtight hatchway). &nbsp;For example, here we have a race condition where the memory is unencrypted before the call to CryptProtectMemory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184663">
				<div id="div-comment-1184663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184663">
			April 13, 2015 at 9:59 am</a>		</div>

		<p>Considering that CryptProtectMemory until Vista and Server 2003, I&#39;m going to go out on a limb and say that this *didn&#39;t* pre-date NT4/multiuser Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184783">
				<div id="div-comment-1184783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184783">
			April 13, 2015 at 5:15 pm</a>		</div>

		<p>Ref: Wine</p>
<p>I suspect the &quot;stub&quot; technically meets the API contract of this API, which is why they got away with it, ignoring the fact it makes it useless.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184803">
				<div id="div-comment-1184803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184803">
			April 13, 2015 at 7:32 pm</a>		</div>

		<p>Is it true that SAME_LOGON can be broader than CROSS_PROCESS? For example a RPC server impersonating a remote client?</p>
<p>Then the higher enumeration value makes more sense. (Normally I&#39;d have gone with the creation-order theory though)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 odd alt thread-odd thread-alt depth-1" id="comment-1184813">
				<div id="div-comment-1184813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184813">
			April 13, 2015 at 8:44 pm</a>		</div>

		<p>@skSdnW: True, but since it was originally an undocumented function AFAIK I&#39;d assume what happens went along the lines of Dev A creates function internally with options for Same Process/Cross Process, other Devs start using it. Dev B points out a scenario Dev A forgot, leading to an additional new option (Same Logon). Dev A decides it&#39;s not worth renaming the previous options, because it&#39;s a breaking change and the function isn&#39;t intended to be exposed publicly anyway. Then function get exposed publicly with weird names.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184843">
				<div id="div-comment-1184843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184843">
			April 14, 2015 at 1:44 am</a>		</div>

		<p>@Joshua</p>
<p>Probably because no Wine developer was bothered to implement it when there are much more important API calls. Priorities, and limited developer time&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184853">
				<div id="div-comment-1184853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184853">
			April 14, 2015 at 3:54 am</a>		</div>

		<p>@Joshua: also, it&#39;s not an emulator, so they only implement the bits that people actually need. (So for instance they might completely ignore the scope.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184893">
				<div id="div-comment-1184893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184893">
			April 14, 2015 at 7:48 am</a>		</div>

		<p>The target audience of Wine is not developers. &nbsp;It&#39;s end users. &nbsp;They don&#39;t care about security, correctness, etc. &nbsp;I imagine a lot of the Wine API swallows calls like this one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184943">
				<div id="div-comment-1184943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184943">
			April 14, 2015 at 10:27 am</a>		</div>

		<p>Propose.. Maybe their best-fit enumeration values and names are what they are. Too bad for you</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184953">
				<div id="div-comment-1184953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1184953">
			April 14, 2015 at 12:23 pm</a>		</div>

		<p>@Kevin: In this case no matter. Unlike on Windows, crash dumps are off by default on Wine so you only get the security leak if you ask for it. Also, trying to ReadProcessMemory cross-user will fail no matter what as cross-user processes can&#39;t even see each other.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1185173">
				<div id="div-comment-1185173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1185173">
			April 15, 2015 at 11:34 pm</a>		</div>

		<p>&quot;After I encrypt memory with CryptProtectMemory, can I move it around?&quot; Yes you can. But why bother anyway? Just move the data as it is, because Windows and cryptography is the same as NASA and Mars human expedition; a big company on a big subject with zero results so far.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1185243">
				<div id="div-comment-1185243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150413-00/?p=44253#comment-1185243">
			April 16, 2015 at 10:07 am</a>		</div>

		<p>Joshua: The security leak isn&#39;t just in crash dumps &#8212; it&#39;s in any way that your memory can leak out. For example, the memory may get paged to disk or written to the hibernation file.</p>
<p>Another way your memory can leak out is via uninitialized memory or buffer overread errors. This is how Heartbleed happened. You simply ask the SSL server for a random chunk of its memory and it sends it to you. If the keys are all encrypted except for the brief period of time when they&#39;re in use, getting a random chunk of OpenSSL&#39;s memory isn&#39;t too useful. If the keys are all sitting around in memory in plain text, a random chunk of memory can include things like private keys!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>