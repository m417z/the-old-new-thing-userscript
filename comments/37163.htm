<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-231563">
				<div id="div-comment-231563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231563">
			December 1, 2004 at 7:42 am</a>		</div>

		<p>Bitplanes used to provide more flexibility than packed pixels &#8211; it&#8217;s easy to support, say, 3 or 5 planes whereas it would be impractical to pack groups of 3 or 5 bits into bytes. It also makes it easy to implement masked blitter operations, since the 1-bit mask will have the same format as the n-bit buffer. The real down-side is of course the difficulty of manipulating individual pixels. The Amiga only supported the planar format and part of the challenge of implementing fast 3D games was in limiting the need to rewrite a word of memory for the multiple pixels that shared it. One way to do this was to render to a &quot;chunky&quot; (byte-per-pixel) virtual frame buffer and convert that into bitplanes when each frame was complete. I implemented the conversion in assembler and got it down to 256 bytes which will just fit in the 68030 instruction cache. However it&#8217;s actually faster to offload part of the work to the blitter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231573">
				<div id="div-comment-231573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.benwatson.org' rel='external nofollow' class='url'>Ben Watson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231573">
			December 1, 2004 at 7:54 am</a>		</div>

		<p>A related concept is when creating mipmaps to store multiple resolutions for textures in graphics programming. A bitmap is created and split into four quadrants. Three of them hold the split R, G, and B values. The 4th quadrant is split again into 4 quadrants, etc. storing the texture at half-resolution. This process is repeated recursively until a single pixel is represented. This allows for very efficient storage of textures in multiple resolutions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231583">
				<div id="div-comment-231583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alfons</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231583">
			December 1, 2004 at 8:04 am</a>		</div>

		<p>|this was an enormous improvement over the CGA</p>
<p>&lt;chuckle&gt;</p>
<p>Sorry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231613">
				<div id="div-comment-231613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231613">
			December 1, 2004 at 8:33 am</a>		</div>

		<p>Heh. This reminds me of graphics programming on Commodore Amiga systems. I didn&#8217;t realise that EGA worked that way too, as at that point I was only just starting to tinker with these &quot;IBM Compatible PC&quot; things.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231623">
				<div id="div-comment-231623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">8-bit Dinosaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231623">
			December 1, 2004 at 8:38 am</a>		</div>

		<p>And don&#8217;t forget about ZX Spectrum &#8211; which had display lines interleaved and separate memory for the fore/back color of each 8&#215;8 square.</p>
<p>I also have some vague memories of blitting data around B000:0000 on Hercules Monochrome (or compatible :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231643">
				<div id="div-comment-231643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.bigbeardy.co.uk' rel='external nofollow' class='url'>Mat Hall</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231643">
			December 1, 2004 at 9:49 am</a>		</div>

		<p>Bitplanes had other advantages &#8212; the Amiga&#8217;s &quot;dual playfield&quot; mode was great for scrolling things over static backgrounds, it made some &quot;demoeffects&quot; trivial (additive blends, etc.), saved RAM in the days when that mattered (why use a whole byte if you only want 8 colours?), the cunning Hold-and-Modify mode (producing an effective 24-bit display from 8-bits) and some others that escape me for the moment.</p>
<p>The big drawback, as previously mentioned, was that when things progressed from 2D to 3D and drawing individual pixels became a neccessity it all got a bit complicated.  However, one saving grave was using the Copper to adjust the palette of individual scan lines on the fly &#8212; you could swap the entire CLUT every 2? scanlines, so on an AGA machine (with a 256 colour mode) you could effectively produce a 256&#215;128 &quot;chunky&quot; display.  While this may sound terrible, it produced some reasonable DOOM clones that ran on a stock A500, a much lower spec than you needed for a PC to run DOOM reasonably&#8230;</p>
<p>I could blither on and on about the Amiga, but even I must admit that it&#8217;s pretty much a dead platform.  Sad, but true&#8230;  (Although one day I&#8217;ll try to hold Bill Gates to his promise of porting MS Office to the Amiga once sales reached a million, which he conveniently forgot about when the time came. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231653">
				<div id="div-comment-231653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231653">
			December 1, 2004 at 10:06 am</a>		</div>

		<p>Mat Hall: I know it was a typo but &quot;saving grave&quot; is appropos. The grave seems to be the only thing that will save programmers from backwards compatibility hacks and bits of cruft hanging off the API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231663">
				<div id="div-comment-231663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231663">
			December 1, 2004 at 10:39 am</a>		</div>

		<p>Wow, I haven&#8217;t heard the word &quot;nibble&quot; in years. Kids today just say &quot;four bits&quot; ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231673">
				<div id="div-comment-231673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">doynax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231673">
			December 1, 2004 at 10:44 am</a>		</div>

		<p>What always annoyed me (as a game coder) is that these planar bytes has a big endian bit order. This makes shifting graphics around horisontally a pain as you have to compensate for the fact that you&#8217;re actually using a little endian cpu.<br />
<br />In other words you couldn&#8217;t just use the shift instructions for units larger than bytes but you had you also had to swap the bytes around before and after doing it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231683">
				<div id="div-comment-231683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231683">
			December 1, 2004 at 10:53 am</a>		</div>

		<p>About the only reason I can see for bitplanes is that if you&#8217;re writing text to the display, you can write the same data to 3 or 4 different locations depending on the color you want to get, rather than doing any &quot;complex math&quot;.</p>
<p>Sad thing is, with a little ingenuity and wasting a bit of memory, you can get exactly the same speed of operation (if not faster) by using a combination of XORs and ANDs on a bitmap.</p>
<p>I certainly can&#8217;t see any hardware reason people would want to split up colors that way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231693">
				<div id="div-comment-231693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231693">
			December 1, 2004 at 11:12 am</a>		</div>

		<p>&quot;I certainly can&#8217;t see any hardware reason people would want to split up colors that way.&quot;</p>
<p>Indeed the hardware is the reason for planarity. If you go planar, then you can use the same circuitry to control each of the four guns and run them in parallel. And the latching model lets you fit the entire aperture into 64K.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231703">
				<div id="div-comment-231703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231703">
			December 1, 2004 at 11:27 am</a>		</div>

		<p>Mat,</p>
<p>I remember playing a game called &quot;The Citadel&quot; late in my time as an Amiga person. I was quite impressed by it; it used the technique you described, I believe.</p>
<p>It was a bit slow (on my A500+), but it worked pretty well. Its engine was a raycaster like Wolf3D.</p>
<p>I didn&#8217;t see an A1200 until much later, and I&#8217;ve never developed for one. Consequently, I don&#8217;t know much about the AGA chipset.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231723">
				<div id="div-comment-231723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231723">
			December 1, 2004 at 1:32 pm</a>		</div>

		<p>Btw, there was an indescribably clever idea that David Weise and Chuck Whittmer had w.r.t. the EGA that allowed writing an arbitrarily colored pixel in a single write that involved misusing the color select latch (IIRC) &#8211; this change allowed for tripling the redisplay speed of Windows (one other advantage of the EGA was that it used dual ported memory, which meant you could write to the display directly without flickering, but the disadvantage of htis is that memory writes are very slow).</p>
<p>The coolest thing was that the IBM hardware engineers who had designed the card swore up and down that you couldn&#8217;t write arbitrarily colored pixels in a single write until we showed them how to do it :).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231733">
				<div id="div-comment-231733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gene Hamilton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231733">
			December 1, 2004 at 1:40 pm</a>		</div>

		<p>Nintendo did something like on the NES.  It also had another table that added another two bits but applied them to 32&#215;32 regions of the screen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231773">
				<div id="div-comment-231773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Blobby</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231773">
			December 1, 2004 at 1:57 pm</a>		</div>

		<p>I remember discovering this EGA quirk when I was starting PC programming with QuickBasic&#8230;  I was POKEing (was it POKE in QB?  I can&#8217;t remember&#8230; I do remember I had to do some kind of segment selection first) bytes into video memory, and couldn&#8217;t understand why I kept changing the colour of one pixel instead of drawing new pixels side by side.  Eventually I figured it out, but it made me regret not buying the EGA/VGA reference guide a lot sooner.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231783">
				<div id="div-comment-231783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stuart Brockman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231783">
			December 1, 2004 at 2:02 pm</a>		</div>

		<p>So thats why GEM Desktop&#8217;s menus used to cycle through colours as they disappeared!<br />
<br />They weren&#8217;t attempting a &quot;fade&quot; effect, they were just writing each colour seperately and being very slow about it&#8230; Odd that it still did it on a VGA setting though&#8230; it must have been designed for EGA.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231823">
				<div id="div-comment-231823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lowercase josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231823">
			December 1, 2004 at 8:00 pm</a>		</div>

		<p>VGA used planes as well (sometimes), notably for its standard 640x480x16 color mode.  There were some weirder modes you could get by programming the registers directly, some where each pixel was 2 bits wide and 4 planes deep.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231833">
				<div id="div-comment-231833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard Mulder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231833">
			December 1, 2004 at 11:59 pm</a>		</div>

		<p>Aah, this brings back memories of Michael Abrash and Mode-X.</p>
<p>320x240x256, square pixels, double buffering, hardware smooth scrolling. And indeed, 2 bits wide, 4 planes deep. Which allowed you to draw 4 pixels at a time in unchained mode.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231863">
				<div id="div-comment-231863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Petr Kadlec</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-231863">
			December 2, 2004 at 6:05 am</a>		</div>

		<p>IIANM the classic Mode 13h (320x200x256) had bitplanes, too. They were just &quot;hidden in the logic&quot;, as the addressing mode made that transparent.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-232073">
				<div id="div-comment-232073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-232073">
			December 2, 2004 at 7:22 pm</a>		</div>

		<p>Raymond wrote:<br />
<br />&gt; Indeed the hardware is the reason for<br />
<br />&gt; planarity. If you go planar, then you can<br />
<br />&gt; use the same circuitry to control each of<br />
<br />&gt; the four guns and run them in parallel. And<br />
<br />&gt; the latching model lets you fit the entire<br />
<br />&gt; aperture into 64K. </p>
<p>Thinking about it, you may save yourself a few gates that way &#8211; not many.</p>
<p>Gut feel tells me that I could do either one in the same number of gates &#8211; which means that it may have been a decision based on parts availability.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-300203">
				<div id="div-comment-300203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/08/23/455089.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041201-00/?p=37163#comment-300203">
			August 23, 2005 at 10:00 am</a>		</div>

		<p>It goes back to byte alignment.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>