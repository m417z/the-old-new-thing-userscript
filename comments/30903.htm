<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-390213">
				<div id="div-comment-390213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.werkema.com' rel='external nofollow' class='url'>Sean W.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390213">
			June 12, 2006 at 10:42 am</a>		</div>

		<p>Does this imply that SendMessage(HWND_BROADCAST) is a (minor) security hole? &nbsp;If an application can use something like SendMessage(HWND_BROADCAST, WM_USER+1, 0, 0) to potentially send every other app into a tizzy in the worst-case scenario, wouldn&#8217;t this be an easy target for things like viruses, worms, and ActiveX malware? &nbsp;Certainly it seems to violate the virtual-machine principle of &quot;process X must be prohibited from doing anything that would damage the execution of a random process Y&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-390223">
				<div id="div-comment-390223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">davidacoder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390223">
			June 12, 2006 at 10:56 am</a>		</div>

		<p>So, the natural question is: Why allow it? Are there situations where broadcasting these messages actually makes sense? Or is this for backward compatability? But that would be strange, to be backward compatible with regards to clearly wrong behaviour of apps :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-390233">
				<div id="div-comment-390233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arlie Davis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390233">
			June 12, 2006 at 11:00 am</a>		</div>

		<p>No, it isn&#8217;t a security hole. &nbsp;Think about it. &nbsp;By the time a piece of code has the ability to call SendMessage, it has access to the entire Win32 API. &nbsp;There&#8217;s no need to convince some other process to do something for you &#8212; you can already do it directly.</p>
<p>All processes run in a specific window station (see CreateWindowStation) and a specific desktop (see CreateDesktop). &nbsp;SendMessage (and many other user32.dll APIs) can only work between processes within the same Desktop. &nbsp;Apps that have different security contexts never run in the same desktop. &nbsp;Therefore, you can&#8217;t use this to get around security.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-390243">
				<div id="div-comment-390243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Coleman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390243">
			June 12, 2006 at 11:02 am</a>		</div>

		<p>Good article about what not to do. &nbsp;</p>
<p>Joe Newcomer has a couple of great windows message articles on his MVP site.</p>
<p><a rel="nofollow" target="_new" href="http://www.flounder.com/messaging.htm" rel="nofollow">http://www.flounder.com/messaging.htm</a><br />
<br /><a rel="nofollow" target="_new" href="http://www.flounder.com/messages.htm" rel="nofollow">http://www.flounder.com/messages.htm</a></p>
<p>To play devil&#8217;s advocate, Raymond, these things aren&#8217;t readily evident in the MSDN. &nbsp;</p>
<div CLASS=post>[<i>I consider it a &#8220;So what did you expect?&#8221; type of issue. I mean, broadcasting <code>WM_COMMAND</code>? What did you expect would happen? -Raymond</i>]</div>
<p>I&#8217;ve come across Win32 code that still uses WM_USER for it&#8217;s<br />
messaging. &nbsp;Is that a Bad Thing? &nbsp;You bet, but it worked fine<br />
in Win95 when the app was first developed and there was &#8220;no reason to<br />
change it&#8221;. &nbsp; Some &#8220;tips&#8221; tell developers to broadcast WM_USER<br />
messages to prevent multiple instances of the app running. &nbsp;<br />
&nbsp;Again, I&#8217;m sure that worked at some point, but no longer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman even thread-even depth-1" id="comment-390253">
				<div id="div-comment-390253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390253">
			June 12, 2006 at 11:10 am</a>		</div>

		<p>So why doesn&#8217;t SendMessage filter out the messages that aren&#8217;t intended for broadcast?</p>
<p>Also, w.r.t. SendMessage being a security hole &#8211; SendMessage sends messages to the apps on the sam desktop as the caller of SendMessage, since the desktop is considered a security boundary, there&#8217;s no security hole because any app on the desktop can send ANY message to any other app on the desktop.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-390263">
				<div id="div-comment-390263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390263">
			June 12, 2006 at 11:27 am</a>		</div>

		<p>Most of the time, when people broadcast WM_USER or WM_APP messages, they should be calling RegisterWindowMessage and broadcasting that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-390273">
				<div id="div-comment-390273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Name required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390273">
			June 12, 2006 at 11:29 am</a>		</div>

		<p>&quot;Apps that have different security contexts never run in the same desktop.&quot; &nbsp;Actually they can. &nbsp;Services can be granted the &#8216;interact with desktop&#8217; priviledge. &nbsp;Also the RunAs feature puts different contexts on the same desktop. &nbsp;Exploits of this feature are called shatter attacks: <a rel="nofollow" target="_new" href="http://www.microsoft.com/technet/archive/security/news/htshat.mspx" rel="nofollow">http://www.microsoft.com/technet/archive/security/news/htshat.mspx</a></p>
<p>A while back I experemented with locking down XP with LUA. &nbsp;RunAs was just as important to me as sudo is on a unix system. &nbsp;My solution to the shatter attack was to CreateDesktop a second virtual desktop (setting a custom ACL on it) to do my RunAs activity. &nbsp;SwitchDesktop is extremely fast compared to the &#8216;switch user&#8217; feature.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-390333">
				<div id="div-comment-390333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://www.darklock.com/blog/' rel='external nofollow' class='url'>Caliban Darklock</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390333">
			June 12, 2006 at 1:56 pm</a>		</div>

		<p>Why not disable HWND_BROADCAST for all but the half-dozen messages designed for it? Because then nobody can design a new message for it except Microsoft. </p>
<p>It&#8217;s unlikely that many applications have command IDs in the 0x3000-0x4FFF range, for example. If you defined a message somewhere in that range, you could potentially create an open standard for some message to do something neat with HWND_BROADCAST. Very few applications would conflict with it, so it would be a reasonably responsible choice. But if only the six identified messages can use HWND_BROADCAST, you can&#8217;t do that at all. </p>
<p>My personal instinct on this is to have a flag on the window somewhere that says &quot;accept non-standard broadcasts&quot;. If the application doesn&#8217;t set that, it gets the six standard broadcasts only. If it does, it gets anything anyone wants to broadcast. The question is whether this is a big enough problem to make such a change on a global level.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-390343">
				<div id="div-comment-390343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390343">
			June 12, 2006 at 2:49 pm</a>		</div>

		<p>Why bother restricting it? Sure, people can do stupid things, but what if it makes sense to broadcast a message in certain situations?</p>
<p>For example, WM_SYSCOMMAND with wParam=SC_MINIMIZE should minimize all windows, but wParam=SC_NEXTWINDOW doesn&#8217;t make sense. Should broadcasts be disallowed for some WM_SYSCOMMAND commands but not others?</p>
<p>What if I&#8217;m running an app on a version of Windows Embedded where I know that the only windows will be mine? Should I have to circumvent the message broadcast filter now?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-390373">
				<div id="div-comment-390373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390373">
			June 12, 2006 at 3:50 pm</a>		</div>

		<blockquote><p>
  For example, WM_SYSCOMMAND with wParam=SC_MINIMIZE should minimize all windows</p>
<p>What if some of the windows are disabled or hidden? &quot;Congratulations, you just presented the program with an impossible situation and it very well may crash as a result.&quot;
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-390383">
				<div id="div-comment-390383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390383">
			June 12, 2006 at 4:44 pm</a>		</div>

		<p>How often does this happen? (I presume it does, since Raymond is writing about it.) It would be easy to restrict broadcast to the few messages designed for it, plus anything in the RegisterWindowMessage range. Would that be sufficient? What if broadcast were permitted to windows whose associated executable lived in the same folder as the broadcaster? (OK, that creates problems with defining the broadcaster, since a bad EXE may use a decent DLL to actually dispatch the broadcast.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-390393">
				<div id="div-comment-390393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390393">
			June 12, 2006 at 5:04 pm</a>		</div>

		<p>To everyone recommending restricting the messages that may be broadcast:</p>
<p>Aren&#8217;t there issues with broadcasting even those &quot;designed-to-be-broadcast&quot; messages, too? &nbsp;For one, if any window is hung, the rest of the system hangs too, waiting for the hung window to respond, right? &nbsp;(Or is it just that the sending process hangs until all messages have been completely broadcast? &nbsp;Either way, it&#8217;s not all that great.)</p>
<p>Actually, that may only be for SendMessage; PostMessage (if it allows you to post to HWND_BROADCAST) may not be affected by another hung window. &nbsp;(Though the entire system might be, I&#8217;m not sure; it probably just depends on the window manager.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-390403">
				<div id="div-comment-390403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390403">
			June 12, 2006 at 5:14 pm</a>		</div>

		<p>The Tortoise CVS context menu extension sends a WM_COMMAND with wParam=41504 to the host application after a source control operation is finished. Explorer uses 41504 to refresh its windows, in my application 41504 is in the command range for displaying Internet favorites. Imagine, 41504 would delete files without notice&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-390293">
				<div id="div-comment-390293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390293">
			June 12, 2006 at 11:49 am</a>		</div>

		<p>&gt; Apps that have different security contexts never run in the same desktop.</p>
<p>I do not believe this is correct.</p>
<p>If you&#8217;re running as a completely non-privileged user, but you have a service running as localsystem with &quot;allow service to interact with the desktop&quot; turned on, then this is a large problem. &nbsp;Actions that you as a user cannot take can be taken by the service (because it&#8217;s localsystem).</p>
<p>The desktop is a message boundary, yes, but different security contexts *do* run on the same desktop. &nbsp;List of services logging on as localsystem with access to my desktop right now (2K Pro):</p>
<p>apcupsd &nbsp;(I should submit a patch to them to fix this; the only reason it&#8217;s on the desktop is to show the status of the UPS, which can be done from another process.)<br />
<br />ASMAgent &nbsp;(some dumb &quot;track what software you have installed&quot; program required by corporate)<br />
<br />Distributed Transaction Coordinator<br />
<br />Fax Service &nbsp;(manual, off)<br />
<br />Iap &nbsp;(some dumb Dell thing that I should try getting rid of, to see what that would do)<br />
<br />Internet Connection Sharing (manual, off)<br />
<br />Machine Debug Manager<br />
<br />Netmeeting Remote Desktop Sharing (manual, off)<br />
<br />Network Connections<br />
<br />Print Spooler<br />
<br />Protected Storage (!!! &nbsp;This holds cert private keys&#8230;)<br />
<br />QoS RSVP &nbsp;(manual, off)<br />
<br />Remote Access Auto Connection Manager (manual, off)<br />
<br />Remote Access Connection Manager (manual, on)<br />
<br />Remote Administrator (our local remote management program; it needs local desktop access so remote control works)<br />
<br />Removable Storage<br />
<br />Routing and Remote Access (disabled)<br />
<br />RunAs Service<br />
<br />Still Image Service<br />
<br />Task Scheduler<br />
<br />Utility Manager &nbsp;(manual, off)</p>
<p>I&#8217;m not even sure what many of these services do, but I doubt that many of them need access to the desktop. &nbsp;It&#8217;s not usually that hard to have a separate program running on the desktop that talks to the localsystem service (using e.g. sockets, not some kind of RPC that&#8217;s based on windows messages), and does whatever desktop stuff is required.</p>
<p>Notably missing from this list is our virus scanner program; apparently McAfee is smart enough to do their stuff differently, or something. &nbsp;All their services log on as localsystem, but run on their own desktop (as it should be).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-390443">
				<div id="div-comment-390443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://wendyhome.com' rel='external nofollow' class='url'>::wendy::</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390443">
			June 12, 2006 at 8:05 pm</a>		</div>

		<p>discalimer &#8211; I&#8217;m not a programer<br />
<br />ignore this question if its glaringly obvious.</p>
<p>if people (developers) are sending broadcast messages then pressumably they had an intention, &nbsp;perhaps a &#8216;need&#8217; to do this action that raymond deftly explians just doesn&#8217;t make sense based on how windows are coded.</p>
<p>what&#8217;s the need?<br />
<br />Is there an implication that there could be value in having some form of broadcast message? &nbsp;would that open-up developer creativity or cause potential chaos.</p>
<p>just wondering&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-390453">
				<div id="div-comment-390453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390453">
			June 12, 2006 at 8:30 pm</a>		</div>

		<p>&quot;No, it isn&#8217;t a security hole. &nbsp;&#8230; By the time a piece of code has the ability to call SendMessage, it has access to the entire Win32 API.&quot;</p>
<p>True, any app can call any Win32 API if it can SendMessage. That does not mean all apps receive equal treatement for all API! </p>
<p>Just one example, many firewalls are selective about which apps have network access &#8211; like the Windows firewall.</p>
<p>Hypothetical example, IE can open outbound connections. Windows firewall will block my spyware and prompt user. My app uses SendMessage to convince IE to open a connection and send personal info to my server. Sure, I can create a thread in the IE process to do the same &#8211; but what if I don&#8217;t have debug privs?</p>
<p>What if the app is on Windows&#8217; DEP exception list? Those are precisely the apps where a stack-smashing or heap overflow attack will work!</p>
<p>Traditional ACL security contexts are NOT THE ONLY things that needs to be secured.</p>
<p>SendMessage is an example why Shatter attacks are so dangerous.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-390463">
				<div id="div-comment-390463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390463">
			June 12, 2006 at 8:37 pm</a>		</div>

		<blockquote><p>
  The ones that are actually designed to be<br />
  <br />&gt; broadcast are as follows:</p>
<p>Thank you for starting that list.<br />
  <br />What is your opinion of this one:<br />
  <br /><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/power/base/wm_powerbroadcast.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/power/base/wm_powerbroadcast.asp</a></p>
<p>Monday, June 12, 2006 11:10 AM by LarryOsterman<br />
  <br />&gt; there&#8217;s no security hole because any app on<br />
  <br />&gt; the desktop can send ANY message to any other<br />
  <br />&gt; app on the desktop.</p>
<p>Hmm, thank you for pointing this out. &nbsp;Even with RunAs and the the additional verification steps being presented by Vista beta 2, shatter attacks DO remain. &nbsp;For example you&#8217;ve properly edited and compiled a driver using your limited privilege account, but when you need to install the driver you need to do a RunAs. &nbsp;Once that command prompt or other window pops up on the desktop, it will obey any commands that are sent to it by the limited privilege virus.</p>
<p>Monday, June 12, 2006 3:50 PM by A<br />
  <br />&gt;&gt; For example, WM_SYSCOMMAND with<br />
  <br />&gt;&gt; wParam=SC_MINIMIZE should minimize all<br />
  <br />&gt;&gt; windows<br />
  <br />&gt;<br />
  <br />&gt; What if some of the windows are disabled or<br />
  <br />&gt; hidden? &quot;Congratulations, you just presented<br />
  <br />&gt; the program with an impossible situation and<br />
  <br />&gt; it very well may crash as a result.&quot;</p>
<p>Yeah, good question. &nbsp;What if you click on the icon that says &quot;show desktop&quot; ( == minimize all windows) but some windows are disabled or hidden? &nbsp;Some of the windows might even be Control Panel dialogs which are never capable of being minimized, and/or are disabled and/or have property sheets open but hidden behind them. &nbsp;When you click Show Desktop, does that present Windows with an impossible situation?</p>
<p>Monday, June 12, 2006 5:04 PM by BryanK<br />
  <br />&gt; Aren&#8217;t there issues with broadcasting even<br />
  <br />&gt; those &quot;designed-to-be-broadcast&quot; messages,<br />
  <br />&gt; too? &nbsp;For one, if any window is hung, the<br />
  <br />&gt; rest of the system hangs too, waiting for<br />
  <br />&gt; the hung window to respond, right?</p>
<p>I think so. &nbsp;I think this has been a reason why attempts to shut down or hibernate result in hangs if Internet Explorer or occasionally other applications are open at the time.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-390493">
				<div id="div-comment-390493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">And nothing else shatter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390493">
			June 13, 2006 at 3:29 am</a>		</div>

		<blockquote><p>
  &gt; Yet you sent the window a message as if to say that the user selected it anyway, which is impossible. Congratulations, you just presented the program with an impossible situation and it very well may crash as a result. </p>
<p>We have two bugs here :<br />
  <br />first, that message should not be broadcasted because it doesn&#8217;t know which action will cause in other windows.<br />
  <br />On the other hand we have an application relying on user interface status (a menu disabled/enabled) to keep track of its internal state which is plain wrong.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-390843">
				<div id="div-comment-390843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390843">
			June 13, 2006 at 1:34 pm</a>		</div>

		<p>&quot;What if you click on the icon that says &quot;show desktop&quot; ( == minimize all windows) but some windows are disabled or hidden?&quot;</p>
<p>IIRC, &quot;Show Desktop&quot; is just like the old &quot;Minimize All Windows&quot; command, except it also temporarily brings Explorer&#8217;s &quot;desktop&quot; window to the top. This effectively hides all windows, without presenting them with any impossible situations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-390963">
				<div id="div-comment-390963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060612-00/?p=30903#comment-390963">
			June 13, 2006 at 4:13 pm</a>		</div>

		<p>To &quot;And nothing else shatter&quot;&#8230;</p>
<p>&gt; On the other hand we have an application relying on user interface status (a menu disabled/enabled) to keep track of its internal state which is plain wrong.</p>
<p>I disagree. There&#8217;s a difference between defending against end-users and defending against applications. For example, there are valid reasons for using the debugging APIs against applications that you didn&#8217;t write, but obviously you have to be careful because you can&#8217;t expect the app&#8217;s author to defend against your mistakes in this area!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>