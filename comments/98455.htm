<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1332295">
				<div id="div-comment-1332295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180406-00/?p=98455#comment-1332295">
			April 6, 2018 at 7:54 am</a>		</div>

		<p>In some ways, it reminds me of Base/Displacement addressing on S/360.  S/360 used that scheme because any 32 bit address could be represented in 16 bits.  The first four bits represented a 32 bit register and the remaining 12 bits was the added displacement from the base.</p>
<p>When S/360 was designed, memory was the most expensive component.</p>
<p>Of course, we didn&#8217;t have to worry about any load delays.  I imagine that could cause more than a couple of hard to find bugs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1332305">
				<div id="div-comment-1332305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180406-00/?p=98455#comment-1332305">
			April 6, 2018 at 9:25 am</a>		</div>

		<p>LW t0,8(t1)</p>
<p>Worst syntax ever!  I wonder if it was inspired by C arrays where you can write buffer[8] as 8[buffer].</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1332325">
				<div id="div-comment-1332325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180406-00/?p=98455#comment-1332325">
			April 6, 2018 at 9:44 am</a>		</div>

		<p>Well, you might think it&#8217;s the worst, but it&#8217;s also very popular among multiple assembly languages. (And I prefer it over syntax like <code>LW t0, t1, 8</code>.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1332335">
				<div id="div-comment-1332335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180406-00/?p=98455#comment-1332335">
			April 6, 2018 at 10:56 am</a>		</div>

		<p>So I did some reading.  I didn&#8217;t realise this style of address offset is actually very common being x86 AT&amp;T syntax.  I still don&#8217;t like it though!</p>
<p>Having done 6502 before ARM I found ARM-style LW t0,[t1,#8] somewhat natural in its use of #.  And LW t0,[t1,t2] is still moderately readable because it&#8217;s obvious which bits are getting added together.  Though I think Intel got it right: use a plus sign to represent addition.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1332345">
				<div id="div-comment-1332345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180406-00/?p=98455#comment-1332345">
			April 6, 2018 at 10:57 am</a>		</div>

		<p>Clearly you haven&#8217;t seen AT&amp;T syntax for x86 memory operands.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1332355">
				<div id="div-comment-1332355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dandan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180406-00/?p=98455#comment-1332355">
			April 6, 2018 at 12:54 pm</a>		</div>

		<p>More like the C syntax was inspired by assembly. You have your history quite backwards.</p>
<p>Of course, the correct syntax would be (lw t0 (+ t1 8)).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1332375">
				<div id="div-comment-1332375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180406-00/?p=98455#comment-1332375">
			April 6, 2018 at 5:18 pm</a>		</div>

		<p>68k assembly had similar syntax:</p>
<p>MOVE.L 8(a0), d0</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1332405">
				<div id="div-comment-1332405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Clarkstone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180406-00/?p=98455#comment-1332405">
			April 7, 2018 at 6:13 pm</a>		</div>

		<p>This reminds me of reading a paper on the world&#8217;s first CAD program, <a href="https://en.wikipedia.org/wiki/Sketchpad" rel="nofollow">Sketchpad</a>. The authour spent a few pages describing what we now call structs and C&#8217;s -&gt; operator, because they were unfamiliar to programmers at the time. C&#8217;s -&gt; operator is now thought of as &#8220;get struct pointer, add field offset, fetch/store at the resulting address&#8221;, but in Sketchpad was implemented using addressing modes normally used to index arrays at static addresses with registers (the sort of arrays that Fortran etc programs would use lots of).</p>
<p>Nowadays, if you want the equivalent of C&#8217;s -&gt; operator then &#8220;field_offset(pointer_register)&#8221; is a weird syntax, but if you want to index an array at a static address using a register then &#8220;array_start(index_register)&#8221; is normal Algol-descendant syntax, especially because you&#8217;d be using a named constant for array_start.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1332455">
				<div id="div-comment-1332455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180406-00/?p=98455#comment-1332455">
			April 9, 2018 at 1:23 am</a>		</div>

		<p>Oh, those antiquated relics from the Heroic (or, as some would call it, Dark) Age of the CS! They belong in the museum, but alas, one doesn&#8217;t simply change the assembler syntax.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>