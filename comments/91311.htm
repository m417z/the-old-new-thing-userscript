<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1197531">
				<div id="div-comment-1197531" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197531">
			October 21, 2015 at 7:34 am</a>		</div>

		<p>While waiting for the next part, there is no rule that you can&#39;t just create a brand new stream a second time and unmarshal that.</p>
<div class="post">[<em>This assumes that you have a way to communicate with the original thread to say &quot;Hey, can you marshal the object for me again?&quot; But if you had that connection, you wouldn&#39;t need to be messing with explicit marshaling anyway! You would just have a method called <code>GiveMeTheObjectAgain(IObject** result)</code> and let the standard marshaler do the work. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197491">
				<div id="div-comment-1197491" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;amp;#39;Grijan&amp;amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197491">
			October 21, 2015 at 8:38 am</a>		</div>

		<p>Footnote 1 isn&#39;t referenced anywhere in the article. I assume that it should be referenced near the end of the answer to the first question, but I may be wrong.</p>
<div class="post">[<em>Footnote 1 is actually a dangling reference from <a href="http://blogs.msdn.com/b/oldnewthing/archive/2015/10/20/10648886.aspx">the previous article</a>. This series was originally one giant article, and then I decided to break it up, and what you&#39;re seeing is a remnant that didn&#39;t get cleaned up properly. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197471">
				<div id="div-comment-1197471" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197471">
			October 21, 2015 at 9:12 am</a>		</div>

		<p>I feel like these articles are muddling the difference between multi-threaded objects (which can be called from the MTA) and free-threaded objects (which can be called from any apartment). Multi-threaded objects are very common; free-threaded objects are rare and tricky to create.</p>
<div class="post">[<em>You&#39;re right. I&#39;m being sloppy. Multi-threaded objects and free-threaded objects are not the same thing. (Free-threaded objects should more properly be called &quot;free-marshalled objects&quot; since they marshal for free.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197461">
				<div id="div-comment-1197461" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">T</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197461">
			October 21, 2015 at 9:16 am</a>		</div>

		<p>&gt; How do you avoid a deadlock? </p>
<p>If I interpreted my callstacks correctly, COM knows other threads call into your thread while you&#39;re waiting, similarly to how QueueUserAPC works. So instead of your thread just waiting, it instead executes whatever other threads want it to do while it waits.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197451">
				<div id="div-comment-1197451" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197451">
			October 21, 2015 at 9:19 am</a>		</div>

		<p>@Ben: Shouldn&#39;t multithreaded objects work as neutral/free threaded objects as long as they don&#39;t internally store and use COM pointers to other objects?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197441">
				<div id="div-comment-1197441" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197441">
			October 21, 2015 at 9:23 am</a>		</div>

		<p>@T: Or you get RPC_E_CANTCALLOUT_ININPUTSYNCCALL</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197421">
				<div id="div-comment-1197421" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197421">
			October 21, 2015 at 9:51 am</a>		</div>

		<p>@SI: Yes, a multi-threaded object becomes free-threaded by aggregating the free-threaded marshaler and making sure it doesn&#39;t store any pointers to other COM objects.</p>
<p>I&#39;m just saying that free-threaded objects are a very special case, and let&#39;s not confuse them with the more common case of vanilla multi-threaded objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197411">
				<div id="div-comment-1197411" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197411">
			October 21, 2015 at 10:26 am</a>		</div>

		<p>@Ben, @SI,</p>
<p>You&#39;re confusing things just like Raymond explained.</p>
<p>An object declares the types of apartment it supports with the ThreadingModel configuration:</p>
<p>&lt;none&gt;: main STA</p>
<p>Apartment: any STA</p>
<p>Free: MTA</p>
<p>Both: any STA, MTA or NA (yes, both three!)</p>
<p>Neutral: NA</p>
<p>What you are probably talking about is the hack that was common before the neutral apartment, which consists of setting the TheadingModel to Both and aggregating the free-threaded marshaler.</p>
<p>The major drawback of the FTM is that you must, manually (read that again), marshal or pass through the global interface table every interface pointer you get on or return from the FTMed object.</p>
<p>Another drawback is that the FTMed object&#39;s lifetime is still bound to the apartment where it was created.</p>
<p>The neutral apartment solves both these problems with lightweight proxy/stubs that avoid full marshaling for the object itself and performing only apartment bookkeeping. &nbsp;Since it&#39;s an apartment, objects created in other apartments passed to or returned from the NA will be marshaled as usual with the optimizations Raymond just mentioned in this blog post according to the underlying thread&#39;s current apartment. &nbsp;However, a thread only ever runs in the NA temporarily, either through activation (class object) or through neutral object method calls.</p>
<p>You can hack your way into having an NA thread by entering an STA or the MTA and calling a method on a ThreadingModel = Neutral object that performs whatever you want indefinitely. &nbsp;You can just as well achieve this with registration-free COM to achieve e.g. a CoInitializeEx2 that can make a thread belong to a NA-over-[STA|MTA]. &nbsp;However, since this is only useful in practice to activate ThreadingModel = Both objects in the NA, you might as well have a TheardingModel = Neutral object that simply calls CoGetClassObject or CoCreateInstance[Ex] for you.</p>
<p>Since there are much more documented sources of aggregating the FTM and so few about the NA, we&#39;ll live in the dark COM ages forever. &nbsp;Even Windows Store Apps simply added an extension to the STA (ASTA, or Application STA) that blocks unrelated (i.e. top-level re-entrancy) calls (probably, what the STA should have been from the start).</p>
<p>@Raymond, why is the neutral apartment taboo outside COM+? &nbsp;In COM&#39;s base documentation, the only mention of NA is in the CoInitialize[Ex], CoGetCallerTID, CoFreeUnusedLibrariesEx, APTTYPE, APTTYPEQUALIFIER and InprocServer32 articles, none of which develops any further about it.</p>
<div class="post">[<em>The neutral apartment was added after the other apartments became well-established, so everybody forgets to invite him to the party. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197401">
				<div id="div-comment-1197401" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197401">
			October 21, 2015 at 10:33 am</a>		</div>

		<p>Raymond, is there a reason to have already two articles about marshaling, but no mention of the Global Interface Table?</p>
<div class="post">[<em>Simple. I use marshaling a lot. I don&#39;t use the Global Interface Table, so I don&#39;t feel qualified to write about it. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197371">
				<div id="div-comment-1197371" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197371">
			October 21, 2015 at 11:39 am</a>		</div>

		<p>@Raymond, I understand that, but the documentation has had 15 years to catch up with the implementation of the neutral apartment. &nbsp;Not 15 days, 15 weeks or even 15 months.</p>
<p>On the same vein, ASTA already had 3 years for documentation to catch up. &nbsp;We mostly only see mentions like the neutral apartment, and the most complete documentation is titled in such a way that it seems to be solely about DirectX.</p>
<p>Someone who hasn&#39;t known Windows almost like since ever will have both a hard time understanding apartments correctly and a hard time catching up with what the ASTA is.</p>
<p>I guess these are actual instances where the old thing is still new.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197361">
				<div id="div-comment-1197361" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197361">
			October 21, 2015 at 11:43 am</a>		</div>

		<p>@Raymond, I was expecting you&#39;d use the GIT a lot, since it recognizes objects marked with IAgileObject.</p>
<p>For what cases do you use marshaling the most, if I may ask?</p>
<div class="post">[<em>Getting an object from one thread to another as a one-time operation. The GIT is overkill for that sort of thing. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197351">
				<div id="div-comment-1197351" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197351">
			October 21, 2015 at 2:30 pm</a>		</div>

		<p>[(Free-threaded objects should more properly be called &quot;free-marshalled objects&quot; since they marshal for free.) -Raymond]</p>
<p>I really hope this doesn&#39;t mean a Free-threaded object can&#39;t be marshaled across processes.</p>
<div class="post">[<em>Okay, so they really should be called &quot;free-inproc-marshalled objects&quot; since they marshal within a process for free (the C++ model). They still need help from COM for out-of-process marshaling. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197331">
				<div id="div-comment-1197331" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197331">
			October 21, 2015 at 4:10 pm</a>		</div>

		<p>So marking utility COM objects which don&#39;t have any internal state as free threaded to avoid (in-process) marshaling is perfectly fine. So is having free threaded more complex COM objects with internal state, which are thread safe, and are used by STA / MTA objects. They just need to marshal any and all remote interfaces before using them.</p>
<p>Since COM events are just COM calls to remote interfaces, I&#39;ve been assuming that any marshaling issues for free threaded -&gt; specific source event object also needs to be dealt with to send events, is this the case?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197321">
				<div id="div-comment-1197321" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197321">
			October 21, 2015 at 4:39 pm</a>		</div>

		<p>Raymond, does your answer to &quot;What happens if the threads associated with the originating apartment exit while the second apartment still has an outstanding reference to the object via a proxy?&quot; apply in the case where the object is out-of-proc? So say ClientProcessThreadA creates ServerProcessObject, marshals it to ClientProcessThreadB, and then ClientProcessThreadA dies. Will ClientProcessThreadB still be able to use the unmarshaled interface, or will it get RPC_E_SERVER_DIED_DNE? I would expect the former, not the latter. Thank you.</p>
<div class="post">[<em>When ClientProcessThreadA creates ServerProcessObject, the originating apartment is in the server. ClientProcessThreadA merely has a proxy to the server object. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197311">
				<div id="div-comment-1197311" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197311">
			October 21, 2015 at 4:43 pm</a>		</div>

		<p>There&#39;s something I really don&#39;t get. So unmarshalling an apartment-threaded object from a different thread creates a proxy that forwards all calls to the original thread.</p>
<p>But how does it do that? That original thread could be doing arbitrary things. How does the proxy coerce it into doing the method call?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197301">
				<div id="div-comment-1197301" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew w. </cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197301">
			October 21, 2015 at 6:27 pm</a>		</div>

		<p>@Roman, </p>
<p>That&#39;s why STAs are required to pump messages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197261">
				<div id="div-comment-1197261" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197261">
			October 22, 2015 at 10:04 am</a>		</div>

		<p>@SI, yes.</p>
<p>&quot;They just need to marshal any and all remote interfaces before using them.&quot;</p>
<p>That&#39;s a really big &quot;just&quot;. &nbsp;Every method of an FTMed object must marshal interface pointers it stores immediately to make sure the marshaling is done in the correct apartment, or that the proxy is running in the correct apartment to call the object&#39;s marshaler, and it must unmarshal stored interface pointers it uses or returns.</p>
<p>Manual marshaling due to aggregating the FTM is &quot;just&quot; that. &nbsp;On the other hand, you only need one mistake to generate a miserable debugging session to someone in the future, perhaps yourself. &nbsp;Of Course™, you should be able to identify the HRESULT in a blink.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197251">
				<div id="div-comment-1197251" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197251">
			October 22, 2015 at 10:04 am</a>		</div>

		<p>@Roman, the proxy to an STA object usually posts messages (as if through PostMessage) to the COM window in the object&#39;s STA thread. &nbsp;If the method is marked as input_sync (good luck finding documentation), the message is instead sent (as if through SendMessage in an MTA thread or as if through SendMessageCallback or SendNotifyMessage in an STA). &nbsp;Note that within the same STA, you don&#39;t even have a proxy, so calls are direct.</p>
<p>Read carefully, there&#39;s a real difference between posted messaged and sent messages.</p>
<p>The STA thread must pump messages with a minimum of GetMessage (or PeekMessage with PM_REMOVE) and DispatchMessage.</p>
<p>Taking messages from the queue as soon and fast as possible makes desktop Windows happy about application responsiveness and processes messages sent from other threads, while DispatchMessage will pass posted messaged along to the destination window&#39;s WindowProc.</p>
<p>In turn, the WindowProc of the COM window will unmarshal the object and the method&#39;s in arguments, invoke the method by vtable position, marshal the result and out arguments and finally notify the caller.</p>
<p>If the message was posted, the STA is allowed to make inter-apartment calls, processing messages until the out-of-apartment call returns. &nbsp;This is the cause of the dreaded STA reentrancy. &nbsp;Since Windows 8, there&#39;s the ASTA (application STA), only available in store apps, which rejects top-level reentrant calls. &nbsp;You can pretty much do the same in STA with an IMessageFilter that rejects CALLTYPE_TOPLEVEL_CALLPENDING in HandleInComingCall.</p>
<p>If the message was sent, the STA is not allowed to make inter-apartment calls. &nbsp;This is indirectly imposed by Win32, see (Message Deadlocks) <a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644927(v=vs.85).aspx#deadlocks">msdn.microsoft.com/&#8230;/ms644927(v=vs.85).aspx</a> &nbsp;In essence, an input_async callee should not have a message loop risking a deadlock otherwise, so COM will fail remote calls (as if it checked IsSendMessage[Ex]).</p>
<p>Exercise: what happens if an input_sync callee performs an in-process, but inter-apartment input_sync call?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197191">
				<div id="div-comment-1197191" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197191">
			October 23, 2015 at 11:31 am</a>		</div>

		<p>One correction: even in an STA, a standard marshaler (a proxy/stub from MIDL) will use SendMessage for input_sync methods.</p>
<p>On the other hand, the type library marshaler (00020424-0000-0000-C000-000000000046) won&#39;t, because like many other MIDL attributes, there&#39;s no equivalent in type libraries.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>