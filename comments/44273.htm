<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1184013">
				<div id="div-comment-1184013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184013">
			April 9, 2015 at 8:20 am</a>		</div>

		<p>I can&#39;t think of a common use-case where the setting of bWaitAll would be computed at run-time. &nbsp;It therefore seems like two functions would have been better than one.</p>
<p><a rel="nofollow" target="_new" href="http://h71000.www7.hp.com/doc/84final/4527/4527pro_121.html">h71000.www7.hp.com/&#8230;/4527pro_121.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184023">
				<div id="div-comment-1184023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mantas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184023">
			April 9, 2015 at 8:30 am</a>		</div>

		<p>&#8230;surely you aren&#39;t suggesting that there should be individual functions every time a function parameter is a constant?</p>
<p>(The open() mode, for example, is also never computed at run-time, and yet there is open(&#8230;, O_WRONLY|O_APPEND) instead of open_read() vs open_write_append() vs open_write_truncate() vs open_write_create_or_truncate() &amp;c. just because one would end up having too many combinations.)</p>
<div class="post">[<em>The explosion propagates, because you would also need two versions of Wait&shy;For&shy;Multiple&shy;Objects&shy;Ex, two versions of Msg&shy;Wait&shy;For&shy;Multiple&shy;Objects, two versions of Msg&shy;Wait&shy;For&shy;Multiple&shy;Objects&shy;Ex, two versions of Co&shy;Wait&shy;For&shy;Multiple&shy;Handles, two versions of Co&shy;Wait&shy;For&shy;Multiple&shy;Objects, &#8230;</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184033">
				<div id="div-comment-1184033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184033">
			April 9, 2015 at 8:40 am</a>		</div>

		<p>This seems like the only sensible way to design WaitForMultipleObjects. &nbsp;If you can only return one meaningful piece of information (the first handle which was signaled), then you should only modify the state (auto-reset the event) of objects referenced by that information.</p>
<p>Conversely, the select(2) POSIX system call returns multiple pieces of information (the set of all FDs which are readable/writeable/exceptional); if it were to modify the state of any of those FDs, the calling code could know all of the FDs modified and act on them accordingly. &nbsp;It doesn&#39;t actually modify the FDs, but you could imagine an alternate universe in which it did.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184063">
				<div id="div-comment-1184063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric Sampson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184063">
			April 9, 2015 at 9:19 am</a>		</div>

		<p>What about a doc enhancement request to change the text to something along the following lines, for clarity?</p>
<p>&quot;Modification occurs only for the object, or objects (only if bWaitAll = true), whose signaled state caused the function to return.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184083">
				<div id="div-comment-1184083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184083">
			April 9, 2015 at 9:54 am</a>		</div>

		<p>What about bringing back the msdn wiki? (with a better wiki engine than last time) Then it would have already been fixed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184093">
				<div id="div-comment-1184093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184093">
			April 9, 2015 at 10:08 am</a>		</div>

		<p>&gt; The open() mode, for example, is also never computed at run-time</p>
<p>I beg to differ.</p>
<p>&gt; returns multiple pieces of information</p>
<p>This prevents resource starvation, but I&#39;ve never seen it be a real issue.</p>
<p>&gt; It doesn&#39;t actually modify the FDs, but you could imagine an alternate universe in which it did.</p>
<p>Good imagination. If we ever added auto-reset events to kernel it would.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184103">
				<div id="div-comment-1184103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184103">
			April 9, 2015 at 11:27 am</a>		</div>

		<p>There are no WaitForAllObjects/WaitForAnyObjects, yet there is a WaitForSingleObject which can also be seen as a special case of WaitForMultipleObjects&#8230; but maybe there&#39;s an historical reason explaining why reducing the number of functions didn&#39;t apply in this case?</p>
<div class="post">[<em>You may have noticed that none of the higher level functions picked up on the simplification. There is no CoWaitForSingleObject or MsgWaitForSingleObject. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184113">
				<div id="div-comment-1184113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184113">
			April 9, 2015 at 11:44 am</a>		</div>

		<p>@Nawak: WaitForSingleObject doesn&#39;t require passing an array to kernel. All variants would.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184123">
				<div id="div-comment-1184123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184123">
			April 9, 2015 at 12:19 pm</a>		</div>

		<p>No, I&#39;m arguing that &quot;wait for any one object&quot; and &quot;wait for all of them&quot; are sufficiently different as to benefit from being different; there&#39;s little point in combining them.</p>
<p>Then, for example, waitForAnyObject could return the handle of the signalled object, and waitForAllObjects could return a value that doesn&#39;t look like it&#39;s a reference to only the first one (WAIT_OBJECT_0). &nbsp;Even if it&#39;s only an alias for the same bit-pattern.</p>
<p>As a bonus, we&#39;d get separate documentation for separate semantics.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184133">
				<div id="div-comment-1184133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184133">
			April 9, 2015 at 12:37 pm</a>		</div>

		<p>Better than the &quot;object or objects&quot; and covers the interaction with bWaitAll:</p>
<p>&quot;If bWaitAll is FALSE, modification occurs only for the object whose signaled state caused the function to return.&quot;</p>
<p>It&#39;s not necessary for this sentence to apply with bWaitAll is TRUE, because then modification doesn&#39;t apply to a subset, but to all handles in the array.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184153">
				<div id="div-comment-1184153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184153">
			April 9, 2015 at 3:57 pm</a>		</div>

		<p>@Ben: Then people would think it resets the events which haven&#39;t even been signaled yet. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184163">
				<div id="div-comment-1184163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184163">
			April 9, 2015 at 4:07 pm</a>		</div>

		<p>I can think of one case where this might be useful.</p>
<p>Say you have a set of jobs to assign to a thread pool, and you want to wait until one or more threads in the pool become available, then assign as many jobs as you have available threads. &nbsp;Knowing that more than one thread is available (and which threads they are) would be useful in that case. &nbsp;Of course you could also achieve this by calling WaitForMultipleObjects in a loop, assigning one job per iteration, but I&#39;m wondering if there may be more efficiency in being able to do multiple assignments per WaitForMultipleObjects call.</p>
<p>All hypothetical of course, and the internals of WaitForMultipleObjects might make this a complete non-issue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184173">
				<div id="div-comment-1184173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184173">
			April 9, 2015 at 4:39 pm</a>		</div>

		<p>@Joshua</p>
<p>In C, the address of a variable is an array of size 1, so the call wouldn&#39;t be that more complex:</p>
<p>WFSO(myHandle, timeout) =&gt; WFMO(1, &amp;myHandle, TRUE, timeout)</p>
<p>@Raymond</p>
<p>I didn&#39;t notice that because I don&#39;t really know the higher level functions! I barely even know Win32! My question was quite candid, I supposed that dave&#39;s point (two WFMO instead of one) was considered at the time and that there was a good reason for not splitting the &quot;any object&quot;/&quot;all objects&quot; cases but still splitting out the &quot;one object&quot; case&#8230;</p>
<p>Knowing now that the higher level functions didn&#39;t split this case, I imagine that the decision made for Win32 was later regretted&#8230;</p>
<p>Because I love speculation ;-), here are the possible explanations I see for the decision of having separate WFSO and WFMO:</p>
<p>&#8211; a design mistake (hindsight always 20/20)</p>
<p>&#8211; design&#39;s &quot;best practices&quot; evolved over time</p>
<p>&#8211; WFSO was created first, at a time when waiting for multiple objects wasn&#39;t possible for the windows kernel, and then when it became possible, WFMO was added and head were banged.</p>
<p>I think the third one would fit quite well with the theme of this blog! :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184183">
				<div id="div-comment-1184183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184183">
			April 9, 2015 at 6:17 pm</a>		</div>

		<p>It seems to me, then, that the simplest and clearest answer to &quot;how do I learn about the other one? &quot; would be &quot;Call Wait­For­Multiple­Objects again.&quot;.</p>
<p>Is that accurate?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184213">
				<div id="div-comment-1184213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184213">
			April 10, 2015 at 1:45 am</a>		</div>

		<p>@Nawak &quot;WFSO was created first, at a time when waiting for multiple objects wasn&#39;t possible for the windows kernel, and then when it became possible, WFMO was added and head were banged.&quot;</p>
<p>Then why was it called &quot;WaitForSingleObject&quot; and not just &quot;WaitForObject&quot;? They must at least have had the possibility for WFMO in mind.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184223">
				<div id="div-comment-1184223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184223">
			April 10, 2015 at 1:49 am</a>		</div>

		<p>@Ray Trent: Or you could just check if they are signaled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184233">
				<div id="div-comment-1184233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184233">
			April 10, 2015 at 6:33 am</a>		</div>

		<p>@Nawak</p>
<p>I assume the decision was deliberate, since the example I linked to earlier ($WFLOR, $WFLAND) came from VMS, which Dave Cutler (design lead for NT) had also designed.</p>
<p>The overall trend in the NT native API is &quot;honking great functions with many parameters&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184293">
				<div id="div-comment-1184293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184293">
			April 10, 2015 at 8:38 am</a>		</div>

		<p>@Nawek: But that requires passing by address into kernel mode. WaitForSingleObject can pass by register, which is far cheaper.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184323">
				<div id="div-comment-1184323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184323">
			April 10, 2015 at 8:56 am</a>		</div>

		<p>@Joshua you&#39;re in the process of making a kernel call. The overhead of one indirection to the l1 cache is immeasurable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184543">
				<div id="div-comment-1184543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184543">
			April 11, 2015 at 1:34 pm</a>		</div>

		<p>I think another important piece to the puzzle of confusion is the last part of &quot;If multiple objects become signaled, the function returns the index of the first handle in the array whose object was signaled.&quot; This currently implies that when the function returns the (say) auto-reset objects will no longer be signalled. I&#39;d say &quot;whose object is in a signal state&quot; instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184553">
				<div id="div-comment-1184553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ariel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184553">
			April 12, 2015 at 12:46 am</a>		</div>

		<p>@voo</p>
<p>Getting a value from userspace requires a get_user or copy_from_user, which is more expensive than a simple memory access.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1184963">
				<div id="div-comment-1184963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184963">
			April 14, 2015 at 2:14 pm</a>		</div>

		<p>@Sven2: D&#39;oh! You&#39;re right about that!</p>
<p>So as @Dave points out, the API was designed like that. The design patterns evolved over time so that when higher level functions were designed, the fashion was having less functions (but more generic) instead of having different functions for special cases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1184973">
				<div id="div-comment-1184973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150409-00/?p=44273#comment-1184973">
			April 14, 2015 at 2:19 pm</a>		</div>

		<p>@Ariel: is it? Shouldn&#39;t copy_from_user be only noticeably more expensive than memcpy when the passed pointer is invalid? How does it compare to the cost of making a system call?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>