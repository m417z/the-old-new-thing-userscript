<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1014463">
				<div id="div-comment-1014463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014463">
			October 4, 2012 at 8:05 am</a>		</div>

		<p>To be fair, the MSDN documentation for RegOpenKeyEx doesn&#39;t specify the naming rules for registry key paths. Not even in the links in the section describing the lpSubKey parameter. <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724897(v=vs.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms724897(v=vs.85).aspx</a></p>
<p>Even the MSDN doc describing the structure of the registry is not clear (it only says the key name cannot have  in it, nothing about path delimiting): <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms724946%28VS.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms724946%28VS.85%29.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1014473">
				<div id="div-comment-1014473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kog999</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014473">
			October 4, 2012 at 8:08 am</a>		</div>

		<p>I really thought you were going to write &quot;doubled backslashes are not legal in registry key paths so the behavior is undefined and anything could happen&quot; and that would be the end of the blog entry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo even thread-even depth-1" id="comment-1014493">
				<div id="div-comment-1014493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014493">
			October 4, 2012 at 8:24 am</a>		</div>

		<p>On the other hand, AFAIK doubling the path separator in paths seems to have no effect (both on Windows and Linux); is this even guaranteed? On the usual MSDN page (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/aa365247%28v=vs.85%29.aspx</a>) I found nothing about this; is this behavior guaranteed in some way or is just an implementation-specific detail (that will never go away since almost everybody relies on it for poor man&#39;s path concatenation)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1014483">
				<div id="div-comment-1014483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014483">
			October 4, 2012 at 8:17 am</a>		</div>

		<p>That&#39;s really interesting! &nbsp;It also points out that when you are writing code, another benefit of reusing the same code block (made into a function call, etc.) is that the *exact* same algorithm is used in all of the places that are trying to do the same thing. &nbsp;I have made this subtle mistake myself, where one piece of code tries to do the same thing as another piece of code, and the first set of code almost matches the second set in functionality&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1014563">
				<div id="div-comment-1014563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Skrobov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014563">
			October 4, 2012 at 4:27 pm</a>		</div>

		<p>I can&#39;t help but wonder why at all the cache should parse the key name, rather than treat it as a single unit. A cache must be fast and simple, after all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1014573">
				<div id="div-comment-1014573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ry Jones</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014573">
			October 4, 2012 at 4:37 pm</a>		</div>

		<p>There was a developer for distributed.net that found certain iterations of the algorithm for GPUs were much faster than others. He optimized dnet to get the client to use this fast setup as much as possible. Years later, it was found this fast mode was in fact failing silently.</p>
<p>Much hair was pulled in frustration when the bug was fixed, causing key rates to fall greatly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-1014603">
				<div id="div-comment-1014603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014603">
			October 4, 2012 at 6:02 pm</a>		</div>

		<p>&quot;I can&#39;t help but wonder why at all the cache should parse the key name, rather than treat it as a single unit. A cache must be fast and simple, after all.&quot;</p>
<p>Because the currently open key may not be a root key, so the currently open key would need to be combined with the key being opened. &nbsp;It&#39;s likely also much more efficient to store the cache in tree form rather than flat.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1014613">
				<div id="div-comment-1014613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Skrobov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014613">
			October 5, 2012 at 12:45 am</a>		</div>

		<blockquote><p>
  so the currently open key would need to be combined with the key being opened
</p></blockquote>
<p>Combined? OK. Why do you need to parse the key name for that?</p>
<blockquote><p>
  It&#39;s likely also much more efficient to store the cache in tree form rather than flat.
</p></blockquote>
<p>How can it be more efficient? RegOpenKeyEx receives strings anyway, so you can&#39;t avoid doing string comparison. But why do anything besides it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1014643">
				<div id="div-comment-1014643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jas71_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jas71@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014643">
			October 5, 2012 at 3:16 am</a>		</div>

		<p>ASkrobov: Security? If a particular key has an ACL which denies you access, having the cache give you access to some of the contents (or even just disclose information about the presence or absence of subkeys) would be a hole: &#39;bypass traverse checking&#39; is granted by default, but that&#39;s not enough to let you hard-wire it into the caching algorithm for all time! So, if someone accesses &#39;SoftwareExampleBlah&#39;, you still potentially need to check the ACL on &#39;Software&#39; and &#39;SoftwareExample&#39; first.</p>
<p>The other issue of course is that you could open a key to &#39;SoftwareExample&#39;, then ask for &#39;Blah&#39; within that key-handle &#8211; so a simpler cache which just stored &#39;SoftwareExampleBlah&#39; would then need at least some parsing or similar logic anyway. If your cache is tree-based, though, the tree-walk could BE your string comparison step as well, keeping things neat and efficient. (Or just memory-map the hive, walk the on-disk format in every case and let the virtual memory subsystem deal with caching data for you.)</p>
<p><!-- p>In Stefan's quadruple-backslash cases, I suspect something else then parses the registry data he's posted: his "SOFTWARE\\MICROSOFT\\CLOCK" will be written to the registry as "SOFTWARE\MICROSOFT\CLOCK", then some other mechanism will read that value out again and take the first of each pair as an escape, producing "SOFTWAREMICROSOFTCLOCK" in the end.
</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1014713">
				<div id="div-comment-1014713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ltw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014713">
			October 5, 2012 at 6:30 pm</a>		</div>

		<p>I know how to fix the bug! Just add a timer that checks the value every second so it&#39;s always in the cache! Problem solved :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1015383">
				<div id="div-comment-1015383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1015383">
			October 10, 2012 at 9:44 am</a>		</div>

		<p>What happened to the 20+ posts that happened to be here before yesterday?</p>
<div class="post">[<i>When a thread turns to insults, I delete it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>