<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-larryosterman even thread-even depth-1" id="comment-402403">
				<div id="div-comment-402403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402403">
			July 20, 2006 at 10:25 am</a>		</div>

		<p>A minor nit: you&#8217;ll only see call [__imp__ImportedFunction] if ImportedFunction is marked __declspec(dllimport) in the .h file.</p>
<p>Otherwise you&#8217;ll see:</p>
<p> &nbsp; &nbsp;call ImportedFunction</p>
<p>ImportedFunction:<br />
<br /> &nbsp; &nbsp;jmp [__imp__ImportedFunction]</p>
<div CLASS=post>[<i>More on this on Monday. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402473">
				<div id="div-comment-402473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402473">
			July 20, 2006 at 2:02 pm</a>		</div>

		<p>I was going to mention the same thing as Larry, but work got in the way. &nbsp;:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402493">
				<div id="div-comment-402493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402493">
			July 20, 2006 at 2:45 pm</a>		</div>

		<p>Question: is the table of function pointers writable by the application? &nbsp;Is there an easy way to (a) find it and (b) determine how it is layed out?</p>
<p>I can see &#8230; err &#8230; applications for this. :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402513">
				<div id="div-comment-402513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402513">
			July 20, 2006 at 5:13 pm</a>		</div>

		<p>Being the only CISC one of the bunch, x86 may be an outlier among the Windows architectures, but it was pretty much the norm when it came out. All of the other architectures (MIPS, Alpha, PPC, IA64) are RISC or post-RISC, and none of them even existed when Windows first came out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402523">
				<div id="div-comment-402523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Boogie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402523">
			July 20, 2006 at 5:34 pm</a>		</div>

		<p>I think you see a jump table in debug builds, too &#8212; I&#8217;m not talking about imported calls, but everyday library calls.</p>
<div CLASS=post>[<i>That&#8217;s a compiler-specific thing. Has nothing to do with DLL imports and exports. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402543">
				<div id="div-comment-402543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402543">
			July 20, 2006 at 7:02 pm</a>		</div>

		<p>Boogie: just a guess, but that sounds like the work of an incremental linker.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402573">
				<div id="div-comment-402573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402573">
			July 21, 2006 at 1:49 am</a>		</div>

		<p>Jules: &nbsp;You CAN use this table to redirect dll imports. &nbsp;(I think it&#8217;s this table&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402583">
				<div id="div-comment-402583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jens B&#228;ckman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402583">
			July 21, 2006 at 3:44 am</a>		</div>

		<p>This question might fit with the whole DLL theme you&#8217;re running now, Raymond&#8230;</p>
<p>We have a bunch of inhouse-developed C++ classes that utilize large parts of the STL, and follows quite a few design patterns. They build and work without a hitch in their original Unix environment. It took me about five minutes to get them to compile in Windows too, and all testcases worked the first try. Everything was wonderful.</p>
<p>Except for the fact that I had done a static link. After trying to build a DLL with these classes, I got bizarre crashes when deleting objects. A minute of source code inspection told me that I was not allowed to let a factory class in the DLL allocate an object, and then delete it in the main program. Adding a function in the DLL that deleted any pointer you sent to it worked fine, though.</p>
<p>Any experience or explanation for this behaviour?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402593">
				<div id="div-comment-402593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402593">
			July 21, 2006 at 3:46 am</a>		</div>

		<p>Jules: Adding to what josh said, I think this was what the unofficial WMF patch did to patch the calls in-memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402603">
				<div id="div-comment-402603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KiwiBlue</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402603">
			July 21, 2006 at 4:11 am</a>		</div>

		<p>Jens, it seems like your .dll is linked with static CRT. In such case the library and main program have two separate heaps; memory allocated in .exe can&#8217;t be freed by .dll and vice versa.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402613">
				<div id="div-comment-402613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402613">
			July 21, 2006 at 4:16 am</a>		</div>

		<p>Jens: The DLL and the Application (EXE) are using different instances of a C-Runtime. Which means, simply, that the heap managers used by the EXE and Dll are incompatible. </p>
<p>To resolve the problem, make sure that both projects use the same CRT (by, for example, setting both to use msvcrt.dll), or &#8211; as you have done &#8211; ensuring that things are always deallocated using the same heap manager that allocated them originally.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402623">
				<div id="div-comment-402623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Risto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402623">
			July 21, 2006 at 8:19 am</a>		</div>

		<p>Ok, risking looking like a too-little-knowledge-is-dangerous; is it not true that 32-bit DLL&#8217;s need no fixups, because they are loaded at the same address in each processes&#8217; virtual address space? Ok I guess if two DLL&#8217;s collide, then fixups are still needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402843">
				<div id="div-comment-402843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402843">
			July 22, 2006 at 6:54 am</a>		</div>

		<p>Is the import table preloaded with the preferred addresses of the target functions?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-402853">
				<div id="div-comment-402853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402853">
			July 22, 2006 at 7:37 am</a>		</div>

		<p>James Risto: If the DLL can load at its preferred base address, then no fixups are required. If it cannot, any absolute addresses still need to be altered, and this work is done by the loader. The x86 has poor support for program counter-relative addressing, so many more absolute addressing operations are needed, and many more fixups are generated for this architecture.</p>
<p>The addresses of fixups are kept in the .reloc section of the image. To see the size of fixups (relocations) use dumpbin /headers. To see the fixups themselves, run dumpbin /relocations.</p>
<p>Neil: by default, no, but you can do this by running the bind tool. If the loader detects that the version of the exporting DLL matches the version recorded in the header by &#8216;bind&#8217;, it will skip checking the import table. I <em>think</em> binding becomes less important in Windows Vista due to Address Space Layout Randomization (see <a rel="nofollow" target="_new" href="http://blogs.msdn.com/michael_howard/archive/2006/05/26/608315.aspx" rel="nofollow">http://blogs.msdn.com/michael_howard/archive/2006/05/26/608315.aspx</a>) although the suggestion that there are 256 possible layouts might make it possible to simply set the bits appropriately on a bound image rather than have to actually search the export table.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402863">
				<div id="div-comment-402863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402863">
			July 22, 2006 at 10:18 am</a>		</div>

		<p>A little bit of trivia for fans of the most obscure corners of Windows&#8230;</p>
<p>UNIX executables for Windows (yes, Virgina, there are UNIX executables for Windows) compiled with GCC with the -fPIC flag (Position Independent Code) use, instead, the AT&amp;T standard for relocations, that is a table (the GOT, Global Offset Table) is kept of all pointers used in the code, thus any relocations only affect a contiguous block of data, rather than sparse pages of code</p>
<p>It is a lot more efficient, and effectively allows any DLL to be relocated at will, but sadly on x86 it has quite some side effects&#8230;</p>
<p>Like, for example, all non-leaf functions have one less register to work with (specifically, EBX), to cache the address of the GOT, which would be bad enough&#8230;</p>
<p>Also, all functions with non-static linkage need to have a short prolog that calculates the position of the GOT relative to the current EIP. Program-counter-based addressing isn&#8217;t supported on x86, so the prolog has to emulate it and is quite convoluted &#8211; altough it can be skipped for calls within the same module, because the address is cached in EBX</p>
<p>The alternative approach would be &quot;far&quot; pointers, which can take two forms: &quot;fat&quot; pointers encoding both the address of the GOT (or a fixed offset from it, like the image&#8217;s base address) and the address (or offset) of the function, or indirect pointers, which actually point to a structure containing all the required information. Windows employed the former under 16-bit x86 (only differently, because it was a segmented memory architecture), and the latter under MIPS, Alpha and IA64</p>
<p>Aaand yes. The funny part is that they are PE executables, not ELF. After all, PE is just COFF in drag, and UNIX has run on COFF executables for decades. Did I mention they also support UNIX-style dynamic linking?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402953">
				<div id="div-comment-402953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-402953">
			July 23, 2006 at 5:40 pm</a>		</div>

		<p>Thanks, Mike.</p>
<p>One other question I hope someone can answer:</p>
<p>In 16-bit Windows you could import functions in your .DEF file (which I frequently did, because I was trying to target 3.1 with a 3.0 compiler). Is this no longer possible in 32-bit Windows?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-404603">
				<div id="div-comment-404603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060720-20/?p=30453#comment-404603">
			July 29, 2006 at 9:28 am</a>		</div>

		<p>Actually, both x86 and x64 allows near calls up to 2 GB (32-bit and 64-bit) or 32 KB (16-bit) away.</p>
<p>Neil:<br />
<br />It still can be done.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>