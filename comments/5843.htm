<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1025833">
				<div id="div-comment-1025833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian Friesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025833">
			December 13, 2012 at 7:27 am</a>		</div>

		<p>I&#39;ve always wondered why Windows doesn&#39;t at least offer a setting to require digitally signed DLLs in addition to EXEs. &nbsp;It seems to me that would have solved a lot of problems. &nbsp;So even if the attacker planted a rogue system DLL into an insecure application directory, that DLL would have to be signed which means the identity of the attacker would be known.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025843">
				<div id="div-comment-1025843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Raphael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025843">
			December 13, 2012 at 7:41 am</a>		</div>

		<p>Because, digital signatures are evil, of course. Just ask the Linuxers on Slashdot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025853">
				<div id="div-comment-1025853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/stephen.horn_4000_volition_2D00_inc.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>stephen.horn@volition-inc.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025853">
			December 13, 2012 at 7:45 am</a>		</div>

		<p>@Brian: I thought trying to plant rogue system DLLs into insecure application directories, by itself, was already an exercise in futility, due to the Known DLLs feature?</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/larryosterman/archive/2004/07/19/187752.aspx" rel="nofollow">blogs.msdn.com/&#8230;/187752.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025863">
				<div id="div-comment-1025863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025863">
			December 13, 2012 at 8:11 am</a>		</div>

		<p>A small correction: uiaccess programs can also be in a subdirectory of the Program Files directory. This is also safe because, as you mentioned a few days ago, you already need to be an admin to write there, too (by default.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025873">
				<div id="div-comment-1025873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025873">
			December 13, 2012 at 8:29 am</a>		</div>

		<p>If I ever had to write one of these, my installer would generate a key, put the public key in the key store, sign the binary, then throw the private key away. Update would repeat the process (removing the now useless old key). You can&#39;t revoke a root certificate unique to one machine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025893">
				<div id="div-comment-1025893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025893">
			December 13, 2012 at 9:17 am</a>		</div>

		<p>I still don&#39;t understand why the EXE has to be signed. If you have write access to system32, you own the machine anyway. You can overwrite system DLLs (after disabling windows file protection, which should not be hard if you can write to system32), or as Joshua mentioned, you can modify the key store.</p>
<div class="post">[<em>The intended audience for UI Access is accessibility tools, and the companies who write accessibility tools already have signing certificates, so it&#39;s no extra burden for them. The signing requirement improves accountability and reduces the scope for abuse. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025903">
				<div id="div-comment-1025903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025903">
			December 13, 2012 at 10:08 am</a>		</div>

		<p>@John: Because Microsoft wants to be able to lock down signing so all keys can be traced back to Microsoft, but they found out too late that wasn&#39;t gonna fly (anti-competitive) and didn&#39;t back their changes out.</p>
<p>The more they tighten their grip on signing, the more systems will be left permanently in test mode, and all the gains demanded by Holywood will be lost. I have no part nor parcel in the debate anymore, but I see where that action will end up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025923">
				<div id="div-comment-1025923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025923">
			December 13, 2012 at 10:17 am</a>		</div>

		<p>@Brian: It does. Windows RT does exactly this. All EXEs and DLLs must be digitally signed, otherwise the load fails. You can also set this flag in earlier versions of Windows through group policy (it&#39;s part of the App Whitelisting stuff).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025933">
				<div id="div-comment-1025933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025933">
			December 13, 2012 at 11:19 am</a>		</div>

		<p>So if /me is an attacker code runing at low IL, I should look into system32 directory, find here any signed .exe image with UI-Access attribute set and start it then inject myself into its address space like the Alien does and here we are? Or I&#39;ve missed something? (like UAC prompt when launching UI-Access process even under low-il)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025943">
				<div id="div-comment-1025943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025943">
			December 13, 2012 at 11:45 am</a>		</div>

		<p>@Killer: You&#39;re missing the part where you successfully inject yourself into the address space of a program with uiaccess. What that flag does is ask the OS to set your process to high IL without activating any admin token you may have, thus giving you the same protections against injection attacks that every other high IL process has. If you can inject yourself into a running UIAccess process, you can inject into regedit instead and get the benefits of the admin token too.</p>
<p>(As an aside, one side-effect of UIAccess is that lots of other stuff gets more interesting. For example, you can&#39;t get the current instance of Excel from the Running Object Table anymore, because each integrity level has its own distinct ROT.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025953">
				<div id="div-comment-1025953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025953">
			December 13, 2012 at 11:46 am</a>		</div>

		<p>@Killer{R}: What happens is CreateRemoteThread, *ProcessMemory, and a few more that don&#39;t come to mind immediately fail as the process was elevated to a higher IL on startup. Now it might have a valid current directory or PATH attack against it though &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025963">
				<div id="div-comment-1025963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025963">
			December 13, 2012 at 12:44 pm</a>		</div>

		<p>@parkrrrr: if setting UI Acccess flag raises IL of process to high without activating clearing deny-only from Admin&#39;s SID in token &#8211; then I&#39;m ok with this. But &quot;UI Access allows low-integrity programs to access and interact with the user interface of high-integrity programs. &quot; says clearly &#39;low-integrity&#39; :) and me too lazy to check now how it implemented actually :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025993">
				<div id="div-comment-1025993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025993">
			December 13, 2012 at 1:33 pm</a>		</div>

		<p>@Killer: You can verify for yourself by running a UIAccess program like Narrator and checking the IL with Process Explorer, but that&#39;s definitely how it works. I&#39;ve reason to be somewhat well-acquainted with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1026003">
				<div id="div-comment-1026003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1026003">
			December 13, 2012 at 5:03 pm</a>		</div>

		<p>&quot;Because Microsoft wants to be able to lock down signing so all keys can be traced back to Microsoft, but they found out too late that wasn&#39;t gonna fly (anti-competitive) and didn&#39;t back their changes out.&quot;</p>
<p>Huh?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1026013">
				<div id="div-comment-1026013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Yates</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1026013">
			December 13, 2012 at 5:39 pm</a>		</div>

		<p>For those suggesting putting a certificate into the machine&#39;s store, etc &#8211; I suspect that if you were to get your app certified by Microsoft (assuming it&#39;s not malware, at which time if you have admin rights during the install then just do your evil at that time) then it would fail some of the Microsoft Platform Ready tests&#8230; &nbsp;I had to get our old app certified a couple of weeks ago and the restrictions are a lot tighter than they used to be back in the Vista days &#8211; ASLR, DEP, etc on all DLLs. &nbsp;This was really fun on my Delphi v7 code :) &nbsp; (I flagged the DLLs as being NX and ASLR compat and then tested our software &#8211; happy to have them flagged to be more secure anyway)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1026023">
				<div id="div-comment-1026023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1026023">
			December 13, 2012 at 6:25 pm</a>		</div>

		<p>@Ian Yates: I make no effort to follow Microsoft&#39;s certification program after they demonstrated a willingness to break programs trying to do the right thing in favor of programs making no attempt. I simply do the most expedient thing as defined by the OS behavior and the functional requirements. If the next version of Windows broke it, I can usually adapt in a release or two depending on how bad.</p>
<p>For the record, we were broken for UAC for over a year because there was no way to decide at run time whether or not to use the virtual store (we couldn&#39;t decide at compile time due to the way the virtual store broke the classical model of filesystems that turned out to be version-dependent of a third party component we had no control over).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025973">
				<div id="div-comment-1025973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Axxan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1025973">
			December 13, 2012 at 1:04 pm</a>		</div>

		<p>&quot;If a low-integrity program could programmatically manipulate the user interface of a high-integrity program, then all an attacker needs to do is sit and wait for the user to elevate a command prompt, and then start programmatically driving the command prompt to do whatever it wanted.&quot;</p>
<p>But that *exact* thing *is* possible; proof: <a rel="nofollow" target="_new" href="https://twitter.com/taviso/status/279328380254576642" rel="nofollow">twitter.com/&#8230;/279328380254576642</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1026053">
				<div id="div-comment-1026053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1026053">
			December 14, 2012 at 3:46 am</a>		</div>

		<p>@Joshua &quot;@Killer{R}: What happens is CreateRemoteThread, *ProcessMemory, and a few more that don&#39;t come to mind immediately fail as the process was elevated to a higher IL on startup. Now it might have a valid current directory or PATH attack against it though &#8230;&quot;</p>
<p>Which is why you can&#39;t set the Environment variable of a higher integrity process than yourself. Also, if there&#39;s a security bug in a high integrity component, all bets are off (trivially so).</p>
<p>For example, with a bug in a kernel-mode driver, I can jump straight from low-integrity to ring-0. &quot;If you have an 0-day in a program running as X, I can elevate to X&quot; is a tautology.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1026063">
				<div id="div-comment-1026063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1026063">
			December 14, 2012 at 3:51 am</a>		</div>

		<p>You&#39;re not being creative enough. Any compile-time parameter can be trivially turned into a runtime-detected one:</p>
<p>void main()</p>
<p>{</p>
<p>if(ShouldUseVS(&quot;thirdpartycomponent.dll&quot;))</p>
<p>&nbsp;ShellExecute(&quot;app_with_vs.exe&quot;); &nbsp; &nbsp;// compiled without VS</p>
<p>else</p>
<p>&nbsp;ShellExecute(&quot;app_without_vs.exe&quot;); // compiled with VS</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 odd alt thread-odd thread-alt depth-1" id="comment-1026123">
				<div id="div-comment-1026123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1026123">
			December 15, 2012 at 2:36 am</a>		</div>

		<p>As I understand it, the signing requirement was really there because it dissuaded a lot of developers from simply enabling UiAccess because &quot;it fixes this issue with Vista+&quot; rather than properly re-assessing what they&#39;re doing and its security implications.</p>
<p>Remember that any UiAccess app that is running becomes a potential vector for attack by malware, so a bunch of apps with it enabled unnecessarily would reduce the effectiveness of UIPI.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1026203">
				<div id="div-comment-1026203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1026203">
			December 17, 2012 at 7:53 am</a>		</div>

		<p>@Axxan, can&#39;t replicate. &nbsp;Would be nice if the tweeter had shown how to actually do what he says:</p>
<p>command prompt:</p>
<p>&#39;win32api.SendMessage&#39; is not recognized as an internal or external command, operable program or batch file.</p>
<p>I thought, maybe this is a PowerShell thing, but apparently not:</p>
<p>At line:1 char:45</p>
<ul>
<li>win32api.SendMessage(win32con.HWND_BROADCAST, win32con.WM_CHAR, 0x0041)</li>
<li>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ~</p>
</li>
</ul>
<p>Missing argument in parameter list.</p>
<p>&nbsp; &nbsp;+ CategoryInfo &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: ParserError: (:) [], ParentContainsErrorRecordException</p>
<p>&nbsp; &nbsp;+ FullyQualifiedErrorId : MissingArgument</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1026213">
				<div id="div-comment-1026213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1026213">
			December 17, 2012 at 8:00 am</a>		</div>

		<p>oh, I get it, after some googling. &nbsp;He cheated a little by using Python and not saying so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1026253">
				<div id="div-comment-1026253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121213-00/?p=5843#comment-1026253">
			December 17, 2012 at 9:31 am</a>		</div>

		<p>@Joshua: Microsoft do not track digital signing at all. In order to sign code you must simply acquire a code signing certificate from any of the third-party certification authorities that offer the facility. Obviously you need to check that the CA is reputable and isn&#39;t going to have its root certificate blocked because they messed up.</p>
<p>The CA should check that the information you&#39;ve given them about who you are is correct, to avoid problems with impersonation (again, has failed in the past). After that, you can sign any code you like with your code-signing certificate until it expires. You should make sure to also use a time-stamping server to validate when you signed the code: Windows will accept signed code if the certificate that signed it has expired, as long as the independent time stamp shows that the certificate was valid when it was signed.</p>
<p>Microsoft have recently been failing to get the independent time stamps for their own components, which will cause problems when an attempt is made to install the updates in future. See <a rel="nofollow" target="_new" href="http://technet.microsoft.com/en-us/security/advisory/2749655" rel="nofollow">technet.microsoft.com/&#8230;/2749655</a> for the details.</p>
<p>If you sign your code, UAC prompts will also come up in grey rather than orange and will identify you; SmartScreen is less likely to report that your package is &#39;not commonly downloaded&#39;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>