<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-278703">
				<div id="div-comment-278703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278703">
			May 31, 2005 at 9:19 am</a>		</div>

		<p>I&#8217;ve seen plenty of published code that has this bug in it.  What is even more scary is the number of people who seem to care when I point the problem out.  Often they say that &quot;my program doesn&#8217;t need to run for 49 days&quot; while forgetting that it isn&#8217;t about when the program starts but when the last time the tick counter rolled over.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278713">
				<div id="div-comment-278713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">duggie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278713">
			May 31, 2005 at 9:36 am</a>		</div>

		<p>That&#8217;s mod 100, not base-100.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278723">
				<div id="div-comment-278723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.apptranslator.com' rel='external nofollow' class='url'>Serge Wautier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278723">
			May 31, 2005 at 9:40 am</a>		</div>

		<p>Tim,</p>
<p>GetTickCount() is lined up with the start-up time of the current process. So there&#8217;s no risk if the program doesn&#8217;t run 49 days in a row.</p>
<p>Of course, this is not a good reason to leave bugs, especially when getting things right is not more expensive than getting them wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278763">
				<div id="div-comment-278763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278763">
			May 31, 2005 at 11:20 am</a>		</div>

		<p>Since GetTickCount is pretty grainy, I use QueryPerformanceCounter. I just wish there was an elegant workaround to its hardware-related bugs.</p>
<p><a rel="nofollow" target="_new" href="http://support.microsoft.com/default.aspx?scid=kb;en-us;274323" rel="nofollow">http://support.microsoft.com/default.aspx?scid=kb;en-us;274323</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278793">
				<div id="div-comment-278793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">b100dian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278793">
			May 31, 2005 at 1:49 pm</a>		</div>

		<p>Given that you know that the maximum &#8216;end&#8217; is X (60minutes, in the clock example), one should also do<br />
<br />(end &#8211; start)%X &gt;= interval</p>
<p>This way, if &#8216;end&#8217; got re-set to zero or less than &#8216;start&#8217;, you still have a correct elapsed time.</p>
<p>BTW: this &#8216;negative number modulo&#8217; thing does not work as expected in Windows Calc.exe or Excel or anything. Any idea why?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-278813">
				<div id="div-comment-278813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278813">
			May 31, 2005 at 2:10 pm</a>		</div>

		<p>Works as expected for me. -1 mod 2 = -1. See section 6.5.5 of the C standard. Perhaps it is your expectations that are wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278833">
				<div id="div-comment-278833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278833">
			May 31, 2005 at 3:18 pm</a>		</div>

		<p>I&#8217;m pretty sure Raymond means unsigned modular arithmetic here. To simulate unsigned integers to what the C standard requires in calc.exe: lets say you do (a-c) % 60, if (a-c) is negative, keep adding 61 to it until it&#8217;s positive before you do mod. It&#8217;s a good idea not to give the modulus operator a negative integer in general because it&#8217;s undefined or defined differently depending on the context and whatever invariant whoever defined it wants to support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-278853">
				<div id="div-comment-278853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278853">
			May 31, 2005 at 3:58 pm</a>		</div>

		<p>er, asdf, I&#8217;m pretty sure you meant &quot;add 60&quot; rather than &quot;add 61&quot; ;)</p>
<p>As far as GetTickCount() goes, it doesn&#8217;t matter if the ticker has wrapped since system startup.  As long as the following three things are true, you&#8217;ll be OK:<br />
<br />1) Follow the formula: end &#8211; start &gt;= threshold<br />
<br />2) Don&#8217;t try to use a threshold that is too large (15 days is too large)<br />
<br />3) Check frequently (once every 15 days isn&#8217;t frequently enough)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cornedbee even thread-even depth-1" id="comment-278733">
				<div id="div-comment-278733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CornedBee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278733">
			May 31, 2005 at 10:00 am</a>		</div>

		<p>According to MSDN, GetTickCount starts at *system* launch, so your process doesn&#8217;t matter &#8211; the total system running time does. And modern Windows versions can actually run for 49 days without crashing.</p>
<p>&gt; The GetTickCount function retrieves the number of<br />
<br />&gt; milliseconds that have elapsed since the system was<br />
<br />&gt; started.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278893">
				<div id="div-comment-278893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278893">
			June 1, 2005 at 2:03 am</a>		</div>

		<p>Modulus with negative numbers depends on how you do your rounding for integer division.  a % b == a &#8211; b * (a / b)</p>
<p>Calc (and C) rounds towards 0, so -x % +y is negative.  Rounding towards -infinity would make it positive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278903">
				<div id="div-comment-278903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278903">
			June 1, 2005 at 2:13 am</a>		</div>

		<p>&quot;And modern Windows versions can actually run for 49 days without crashing.&quot;</p>
<p>&#8230; and getting an update that requires a reboot?</p>
<p>-Jonathan</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278913">
				<div id="div-comment-278913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">b100dian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278913">
			June 1, 2005 at 4:25 am</a>		</div>

		<p>AFAIK, &#8216;a mod b&#8217; it&#8217;s an operation that<br />
<br />&#8211; requires b to be positive<br />
<br />&#8211; gives in return the reminder of a/b, which is a number between 0 and b-1</p>
<p>so:<br />
<br />-2 mod 7 = 5 instead of -2<br />
<br /><a rel="nofollow" target="_new" href="http://www.google.ro/search?q=-2+mod+7" rel="nofollow">http://www.google.ro/search?q=-2+mod+7</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278923">
				<div id="div-comment-278923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278923">
			June 1, 2005 at 8:42 am</a>		</div>

		<p>Serge, </p>
<p>That isn&#8217;t true at all.  If it was, why does my test program that I just ran show a tick count of 1139467562?  That would be 13 days&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278933">
				<div id="div-comment-278933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.uesp.net' rel='external nofollow' class='url'>Daveh</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278933">
			June 1, 2005 at 9:20 am</a>		</div>

		<p>I believe this is a difference between the old clock() which starts at 0 each time the process is run and GetTickCount() which begins at 0 when Windows is started.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278953">
				<div id="div-comment-278953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Veritas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278953">
			June 1, 2005 at 9:42 am</a>		</div>

		<p>Its shocking that in 2005 we still have to worry about things like limits.</p>
<p>Any programming language which doesn&#8217;t automatically allocate enough space for a variable to do whatever it needs to do, deserves to be deprecated.</p>
<p>This would make programming much easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-278963">
				<div id="div-comment-278963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278963">
			June 1, 2005 at 9:50 am</a>		</div>

		<p>&quot;Any programming language which doesn&#8217;t automatically allocate enough space for a variable to do whatever it needs to do, deserves to be deprecated.&quot;</p>
<p>All numeric types should be arbitrary-precision by default? The only language I can think of that does this is bc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-279003">
				<div id="div-comment-279003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-279003">
			June 1, 2005 at 10:48 am</a>		</div>

		<p>lisp and haskell (and probably their closer relatives) are arbitrary precision by default, and I&#8217;d imagine some of the newer scriptlike languages are as well.  This often makes it impossible to take full advantage of the machines speed, since any time you want to use size-limited numbers for performance, there&#8217;s an extra flag indicating it that you need to maintain.</p>
<p>Seeking to make programming easier at any cost is a shortsighted effort.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-279073">
				<div id="div-comment-279073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cola</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-279073">
			June 1, 2005 at 12:33 pm</a>		</div>

		<p>Yup, if you want easier coding you can write in a scripting language.  Unfortunately, this is rarely a palatable option.  Maybe it should become more acceptable to code professional applications in Lisp or Python or Visual Basic?  Or maybe the languages themselves should be improved and accelerated?</p>
<p>I don&#8217;t think Word N could be written in Visual Basic with C++ extensions for the heavy processing and the visual widgets.  It might be technically possible, but imagine the damage to Microsoft&#8217;s reputation!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-279133">
				<div id="div-comment-279133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-279133">
			June 1, 2005 at 9:34 pm</a>		</div>

		<p>Actually that makes programming much harder (for those of us that like robust code at least): basic operations aren&#8217;t O(1) anymore which makes algorithms harder to reason about, all arithmetic operations aren&#8217;t atomic (maybe, it depends on the language), any arithmetic operation can run out of memory (presumably you would throw an exception to handle this as opposed to returning an incorrect or dummy value, either way, you would have to detect and handle that somehow).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-280203">
				<div id="div-comment-280203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-280203">
			June 6, 2005 at 11:39 am</a>		</div>

		<p>Some of these arithmetic problems would essentially go away if there was a 64 bit version of GetTickCount.  Something like GetTickCount64 would do nicely.  There would still be rollover problems such has timing windows that cause very long waits.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-345003">
				<div id="div-comment-345003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/01/26/517849.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-345003">
			February 10, 2006 at 11:54 am</a>		</div>

		<p>Putting together pieces you already know.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>