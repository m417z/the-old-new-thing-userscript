<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-997623">
				<div id="div-comment-997623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997623">
			July 12, 2012 at 7:44 am</a>		</div>

		<blockquote><p>
  &quot;I have some code that uses the pragma to make a section discardable. Should I just delete it?&quot;
</p></blockquote>
<p>Or, &quot;is my &#39;DISCARDABLE&#39; discardable?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997633">
				<div id="div-comment-997633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997633">
			July 12, 2012 at 9:17 am</a>		</div>

		<p>Interesting fact: Relocations are always marked as discardable, since the entire image gets mapped into memory when the image is loaded, but the relocations aren&#39;t useful as soon as the image has been mapped.</p>
<p>Also, just because discardable sections aren&#39;t useful now, doesn&#39;t mean they won&#39;t be again in the future. For example, if you&#39;re the pagefile driver, wouldn&#39;t YOU want to page out discardable sections before code sections, given a choice? Discardable sections are much less likely to be read again in future, once the image has been initialized.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-997653">
				<div id="div-comment-997653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997653">
			July 12, 2012 at 9:37 am</a>		</div>

		<blockquote><p>
  if you&#39;re the pagefile driver, wouldn&#39;t YOU want to page out discardable sections before code sections, given a choice?
</p></blockquote>
<p>Any code, data and stacks in the paging path MUST always be resident (non-pageable).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997663">
				<div id="div-comment-997663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Avi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997663">
			July 12, 2012 at 9:52 am</a>		</div>

		<p>@alegr1</p>
<p>Matt wasn&#39;t referring to the pager&#39;s own code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-997673">
				<div id="div-comment-997673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997673">
			July 12, 2012 at 10:32 am</a>		</div>

		<blockquote><p>
  For example, if you&#39;re the pagefile driver, wouldn&#39;t YOU want to page out discardable sections before code sections, given a choice?
</p></blockquote>
<p>Each page is periodically checked for access &#8211; there is &quot;Accessed&quot; bit in the page descriptor. If a page is not being accessed, it&#39;s moved to a candidate list for discarding. Suppose you have a bunch of functions in your app you&#39;re not using. Their pages will get discarded. There is no point in having the pager bother about the section attributes, when the existing mechanism of page aging works well enough.</p>
<p>Even if one app just started and doesn&#39;t need the &quot;discardable&quot; section anymore, another app may be starting shortly and need these pages.</p>
<p>One enhancement Windows may need is to have /SWAPRUN:ALWAYS feature for the executables, which would allow them to delete/update themselves easily. It could be made as when both SWAPRUN:CD and SWAPRUN:NET flags are set, it would be interpreted as SWAPRUN:ALWAYS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997683">
				<div id="div-comment-997683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997683">
			July 12, 2012 at 11:14 am</a>		</div>

		<p>@alger1:</p>
<p>The thing is, if you have a bunch of functions in a page but that page has a small function that gets used frequently, then obviously that page will never get discarded. So while it may be seen as usesless to mark some code as discardable, it should naturally segregate this code into its own section and annotate it at the same time.</p>
<p>Of course, it is all pointless to an extent, but a section which is only accessed once and isn&#39;t modified should be pretty high on the pagers list of pages to remove from memory.</p>
<p>As for &quot;Even if one app just started and doesn&#39;t need the &quot;discardable&quot; section anymore, another app may be starting shortly and need these pages.&quot;, it is trivial to reload the pages, so even if you put the uncertenty factor into play, isn&#39;t that the same problem that the pager has for all code/data? How many times have you seen a system thrash like crazy because the way it is using memory is having something paged out just to be paged back in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997693">
				<div id="div-comment-997693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">L</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997693">
			July 12, 2012 at 11:17 am</a>		</div>

		<p>&quot;If you allocated some zero-initialized memory and never modified it, then the memory manager can just throw the data away because it is very easy to &quot;recover&quot; a page full of zeroes.&quot;</p>
<p>So aside from being a good programming practice, zeroing buffers could actually help program performance?</p>
<div class="post">[<i>No, it makes it worse because you took a clean page and made it dirty (full of zeroes). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997703">
				<div id="div-comment-997703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997703">
			July 12, 2012 at 12:32 pm</a>		</div>

		<p>&quot;The thing is, if you have a bunch of functions in a page but that page has a small function that gets used frequently, then obviously that page will never get discarded. So while it may be seen as usesless to mark some code as discardable, it should naturally segregate this code into its own section and annotate it at the same time.&quot;</p>
<p>Then the thing to do is make sure that the linker places all the &quot;hot spot&quot; functions in a contiguous block of memory. &nbsp;It seems like I&#39;ve read that Microsoft actually does this on some of their products, but I can&#39;t remember which ones, when, or what the best technique is for making the linker do this. &nbsp;There would also be maintenance implications (how to keep all this linking information up-to-date in your source code?)</p>
<p>If you keep &quot;hot spot&quot; code/data in one place, and then put the rest of the code afterwards, then the pager will naturally do its job and discard the unused code if the memory is needed. &nbsp;To do this, there&#39;s no need to invent new sections in the EXE file, invent new flags in the PE file, or any such nonsense that would require updating the operating system or PE file format. &nbsp;Just make sure the linker puts all the &quot;hot spot&quot; code at the beginning of the &quot;.text&quot; section, and the rest can come at the end of the &quot;.text&quot; section. &nbsp;I&#39;m not sure how one might make the linker do that though, but that&#39;s the best solution I think.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-997713">
				<div id="div-comment-997713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997713">
			July 12, 2012 at 1:43 pm</a>		</div>

		<blockquote><p>
  How many times have you seen a system thrash like crazy because the way it is using memory is having something paged out just to be paged back in.
</p></blockquote>
<p>If you have an XP box around, try copying a few 700MB-sized files from a DVD-R to the hard drive, and then verifying the copy (FC /B). Have fun with insane code thrashing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-997723">
				<div id="div-comment-997723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997723">
			July 12, 2012 at 1:49 pm</a>		</div>

		<blockquote><p>
  I&#39;m not sure how one might make the linker do that though, but that&#39;s the best solution I think.
</p></blockquote>
<p>You can make a file with a list of function names for the linker. See /ORDER option.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997733">
				<div id="div-comment-997733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997733">
			July 12, 2012 at 3:21 pm</a>		</div>

		<p>This seems like something where PGO should be able to help quite easily &#8211; whether it does it is another thing. But that&#39;d be much simpler, more accurate and less prone to getting outdated..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997743">
				<div id="div-comment-997743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997743">
			July 12, 2012 at 4:17 pm</a>		</div>

		<p>What happens when you mark a section as DISCARDABLE?</p>
<p>On a short note &#8211; for 90% of you programmers we don&#39;t care and for rest 10% we almost don&#39;t care half a second later :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997753">
				<div id="div-comment-997753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997753">
			July 12, 2012 at 4:37 pm</a>		</div>

		<p>@JamesJohnston:</p>
<p>Depending on the size of the size of the single use code, even with ordering the functions, you can end up with all of the rarely used functions on the same page as a frequently used function. Even if you use /ORDER, you can&#39;t guarantee much at all. For example, you can&#39;t control static functions and you can&#39;t pad to page boundries, so you can&#39;t guarantee that all of the rarely used code will go onto the same page. /ORDER is really meant for increasing the probability that the code you want is in memory already, not allowing you to page out single use functions.</p>
<p>Also remember, discardable and sections are already in the PE file format, so you aren&#39;t adding anything at all. You are just using what already exists in the format.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997763">
				<div id="div-comment-997763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997763">
			July 12, 2012 at 5:48 pm</a>		</div>

		<p>Microsoft has some sort of proprietary profile-guided optimization they use for their own code that is the standard PGO on crack. &nbsp;Their secret profiling tool takes in data showing which code blocks in an executable execute the most often, and rearranges the code so that infrequently-executed code blocks reside on separate pages than the normal path.</p>
<p>For example, code like if (unlikely_error_condition) { &#8230; } will become a conditional jump to the &#8230; code, and the &#8230; code will be moved far away from the rest of the function. &nbsp;This way, the working set of the process is smaller, reducing the likelihood of swapping.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-997773">
				<div id="div-comment-997773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997773">
			July 12, 2012 at 6:57 pm</a>		</div>

		<p>I think .NET code always automatically zeroing any buffers being &quot;new-ed&quot;. Does that mean the memory being controlled by GC is always dirty (if never been paged out) from the system&#39;s perspective?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997783">
				<div id="div-comment-997783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997783">
			July 13, 2012 at 12:43 am</a>		</div>

		<p>@cheong: Yes. But then most allocations you get from the heap are made dirty because HeapAlloc puts stuff on the page. The memory that is &quot;clean&quot; is memory that you&#39;ve mapped from a file, module or VirtualAlloc and haven&#39;t touched since. Heap allocations are almost always dirty, regardless of whether you zero them out or not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997793">
				<div id="div-comment-997793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@cheong00</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997793">
			July 13, 2012 at 12:45 am</a>		</div>

		<p>Yes. Newly committed pages are provided by the OS with all zeros in them (it can&#39;t give you pages with content, this could reveal very sensitive informations, from other processes or from the OS). Only if the process never write to such a page, not even zeros, the OS can be sure that it still contains only zero bytes.</p>
<p>The .NET memory manager for sure does not track which sub-part of its memory arenas are still in that initial stage. It fills the heaps until there is no more free space, then triggers a GC to compact the used parts to the start of the heap. Its complicated enough so it should not care about the corner case of a page allocated but never touched.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997803">
				<div id="div-comment-997803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nitpicker of the day :)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997803">
			July 13, 2012 at 1:33 am</a>		</div>

		<blockquote><p>
  &gt; I think .NET code always automatically zeroing any buffers being &quot;new-ed&quot;.
</p></blockquote>
<p>Technically I think the specifications say memory will be initialized before managed code is run, not that it will always be zero-ed.</p>
<p>This means that if you have a struct like:</p>
<p>struct S</p>
<p>{</p>
<p>&nbsp;int a;</p>
<p>&nbsp;int b = 1;</p>
<p>}</p>
<p>The CLR is free to zero memory and write the 1 later or it could write 00 00 00 00 01 00 00 00 directly, don&#39;t know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997823">
				<div id="div-comment-997823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997823">
			July 13, 2012 at 5:23 am</a>		</div>

		<p>So in theory, I can allocate a non-zeroed page, check it&#39;s contents, then do nothing until it gets paged out (and since it was non-dirty, trashed), and then access the page again and it&#39;s going to have a different random data in it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997833">
				<div id="div-comment-997833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997833">
			July 13, 2012 at 5:25 am</a>		</div>

		<blockquote><p>
  So aside from being a good programming practice,
</p></blockquote>
<p>Not where I come from. In fact, the reverse. I fail you on code review if you pull stupid stuff like this:</p>
<p>&nbsp; &nbsp;char buff[100];</p>
<p>&nbsp; &nbsp;memset(buff, 0, sizeof buff); // &lt;&lt;&lt; pointless waste of cpu cycles</p>
<p>&nbsp; &nbsp;snprintf(buff, sizeof buff, &#8230;..);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997843">
				<div id="div-comment-997843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997843">
			July 13, 2012 at 5:35 am</a>		</div>

		<p>@dave: I hope the reason you failed them on the codereview is because snprintf is an SDL banned function, rather than because of your premature optimisation relating to memset and CPU cycles (if a memset of your stack is the bottleneck in your program, something else has gone wrong).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997853">
				<div id="div-comment-997853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997853">
			July 13, 2012 at 5:37 am</a>		</div>

		<p>No. You can&#39;t allocate a non-zeroed or mapped page from the kernel. It&#39;s true that when you allocate a zeroed page, check that it&#39;s full of zeros and come back to it later that you might be seeing DIFFERENT zeroes, but that&#39;s not going to affect your app.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997863">
				<div id="div-comment-997863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997863">
			July 13, 2012 at 5:56 am</a>		</div>

		<p>@Matt</p>
<p>snprintf is perfectly well-behaved. It never writes beyond end of buffer and it always zero-terminates the result (I agree my example code should have checked the return value). &nbsp;</p>
<p>See the C99 specification.</p>
<p>Perhaps you&#39;re getting confused with the ill-designed Windows equivalent which does not guarantee termination?</p>
<p>I&#39;m programming in standard C rather than a vendor-specific language, apologies for not saying so.</p>
<p>As far as whether it&#39;s a bottleneck: well, probably not, though reflexive zeroing every single buffer will likely be measurable. But really I want programmers to not write lines of code that have no good reason for existing. I want them to think.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997873">
				<div id="div-comment-997873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997873">
			July 13, 2012 at 6:38 am</a>		</div>

		<p>@dave: Mind is a resource. There&#39;s only so much of thinking that can be done until you&#39;re tired. What&#39;s the point of making someone&#39;s life miserable and forcing them to think on stuff which doesn&#39;t matter?</p>
<p>It&#39;s enough that they understand that maybe in some cases zeroing isn&#39;t needed, but it hurts nobody. Knowing that, they can decide to just zero out everything and pay their attention to something important instead. That is the reason for those lines of code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997893">
				<div id="div-comment-997893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997893">
			July 13, 2012 at 7:14 am</a>		</div>

		<p>We&#39;re getting OT here, but I claim that mindless programming, as exemplified by knee-jerk coding of function calls that you don&#39;t need to code, is a major source of software problems. My aim is not to make life miserable for anyone, but to build competent and professional programmers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997903">
				<div id="div-comment-997903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997903">
			July 13, 2012 at 7:34 am</a>		</div>

		<p>@dave:</p>
<p>Just as a case-in-point, Microsoft have had tons of critical security updates by failing to zero stack buffers in the past, and accidentally having stack-garbage treated as valid (<a rel="nofollow" target="_new" href="http://www.iss.net/security_center/reference/vuln/HTML_IE_Uninitialized_Memory_Corruption.htm" rel="nofollow">http://www.iss.net/&#8230;/HTML_IE_Uninitialized_Memory_Corruption.htm</a>)</p>
<p>I am not aware of any security vulnerability being caused by excessive initialization of variables. Indeed, if it&#39;s obviously superflous, the compiler will remove the memset (since memset is a compiler intrinsic for Visual Studio and why SecureZeroMemory had to be introduced).</p>
<p>In your example, snprintf on its own isn&#39;t equivalent because the bytes after the nul-terminated string are still not zero &#8211; so if you send buff to someone across a trust-boundary then removing the memset might just have leaked a whole load of data (like ASLR addresses).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997953">
				<div id="div-comment-997953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997953">
			July 13, 2012 at 8:37 am</a>		</div>

		<p>@dave: What exactly is &quot;competent&quot; about not knowing where you can safely hand-wave it away, and wasting your brain&#39;s resources on thinking about stuff which doesn&#39;t matter? That&#39;s incompetent in my book. Mindless thinking about everything :) True professional spends all resources, even his own attention and brainpower, wisely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998023">
				<div id="div-comment-998023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-998023">
			July 13, 2012 at 9:31 am</a>		</div>

		<p>@alegr1: &quot;You can make a file with a list of function names for the linker. See /ORDER option.&quot;</p>
<p>From the docs: &quot;Ordering allows you to optimize your program&#39;s paging behavior through swap tuning by grouping a function with the functions it calls. You can also group frequently called functions together. These techniques increase the probability that a called function is in memory when it is needed and will not have to be paged from disk.&quot;</p>
<p>Well, that&#39;s exactly what I&#39;m suggesting then. &nbsp;The next question obviously is going to be how do you systematically keep the list up-to-date from a maintenance standpoint; what procedures should be followed?</p>
<p>@voo: &quot;This seems like something where PGO should be able to help quite easily &#8211; whether it does it is another thing.&quot;</p>
<p>That&#39;s kind of what I was thinking. &nbsp;I&#39;ve never really looked into PGO very much though so I don&#39;t know if it does that. &nbsp;The one time I experimented with it produced a very very modest performance gain, at the cost of greatly increased hassle in the build process. &nbsp;Did not seem worth it.</p>
<p>@Crescens2k: &nbsp;&quot;you can end up with all of the rarely used functions on the same page as a frequently used function&quot;</p>
<p>If you only have one small frequently used function and the rarely used functions happen to be in the same page, then what does it matter? &nbsp;The memory system works in integer multiples of pages, not fractions of a page. &nbsp;Your choices are to put rarely used functions in that space, or null / undefined data.</p>
<p>&quot;increasing the probability that the code you want is in memory already, not allowing you to page out single use functions&quot;</p>
<p>Then logically wouldn&#39;t that increase the probability that the code you don&#39;t need might be paged out?</p>
<p>@dave: &quot;I fail you on code review if you pull stupid stuff like this&quot;</p>
<p>Unless this is some very hot performance-critical piece of code&#8230; why?!? &nbsp;How will zeroing 100 bytes hurt anybody? &nbsp;I do this all the time. &nbsp;It is far easier to rule out undefined behavior at a glance when reading code by just making every variable set to zero, rather than trying to understand the actual workings of the code. &nbsp;Only when proven to be a bottleneck would I actually look at removing it. &nbsp;99% of code in most products is not going to be a bottleneck. &nbsp;Profilers are your friend &#8211; use them!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-998293">
				<div id="div-comment-998293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-998293">
			July 16, 2012 at 8:29 am</a>		</div>

		<p>@JamesJohnston: I would fail you for blindly using a zero there instead of some other value. If I initialize a string buffer with all zeros, and am writing some custom string processing function, how do I know my function is properly terminating the string?</p>
<p>I believe that variables should be initialized with data that will maximize chances of discovering bugs and vulnerabilities. Because if you don&#39;t discover them, then someone else will.</p>
<p>Personally, if I had to memset a string buffer, the value 0xff would be my choice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998303">
				<div id="div-comment-998303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-998303">
			July 16, 2012 at 8:59 am</a>		</div>

		<p>Brian EE: Defense in depth &#8212; by initializing your string to all-0s, you avoid a buffer overflow in the case of certain failures to properly terminate. Maybe you should have a standard initialization byte. You can set it to 0xff for debugging and leave it at 0x00 for all other times.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998453">
				<div id="div-comment-998453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@BrianEE</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-998453">
			July 16, 2012 at 2:15 pm</a>		</div>

		<p>&quot;If you only have one small frequently used function and the rarely used functions happen to be in the same page, then what does it matter?&quot;</p>
<p>It&#39;s more efficient to group your frequently used functions on the same page, because then those pages will have a high usage and won&#39;t ever get pushed to the pagefile. Other, less important functions might suffer pagein hits, but since those are outside of your performance critical paths, you take a slight speed improvement.</p>
<p>This happens because when everything gets paged out (e.g. during a hibernate, during a long pause or context switch or during memory pressure) a fault in one high-usage function automatically pages in other high-usage functions so you don&#39;t take the hit twice or three times when calling into them shortly later.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>