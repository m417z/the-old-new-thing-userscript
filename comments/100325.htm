<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-damien_the_unbeliever even thread-even depth-1" id="comment-1371505">
				<div id="div-comment-1371505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Damien_The_Unbeliever' rel='external nofollow' class='url'>Damien_The_Unbeliever</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371505">
			November 26, 2018 at 7:15 am</a>		</div>

		<p>It can be problematic to suppress this and related warnings where you&#8217;re working with setups where ownership of objects may be passed as part of object construction and the analyzer knows about this passing of ownership. E.g. nesting streams that build upon each other.<br />
You create the inner stream, maybe do some preparatory work with it, then create the next stream nesting that one. If the constructor succeeds, you have to make sure you null out your own reference immediately afterwards to prevent this warning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mzzt odd alt thread-odd thread-alt depth-1 parent" id="comment-1371515">
				<div id="div-comment-1371515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371515">
			November 26, 2018 at 7:24 am</a>		</div>

		<p>StreamReader/Writer will, by default, call .Dispose() on the stream passed into it when it itself is .Dispose()d. If you created the Stream object yourself you should be .Dispose()ing it anyway so you end up doing a .Dispose() twice.</p>
<p>Except for that one time you don&#8217;t want to dispose it right away (you read some text and then some raw binary data, for example) in which case you get hit with an ObjectDisposedException because you forgot to tell StreamReader to not dispose the Stream.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-rkpatrick even depth-2 parent" id="comment-1371565">
				<div id="div-comment-1371565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RKPatrick' rel='external nofollow' class='url'>RKPatrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371565">
			November 26, 2018 at 12:02 pm</a>		</div>

		<p>StreamReaders immediately jumped to mind when I read this, as AFAIK, it&#8217;s the only time I ever see this error. But IDisposable leads to all kinds of headaches, namely due to folks not wrapping them in &#8216;using&#8217;s or not reading its documentation (it&#8217;s meant for wrapping unmanaged resources!)&#8230;.I have an OCD thing about proper IDisposable usage, and in fact I&#8217;ve been fighting some AccessViolation exceptions all day that I strongly suspect is due to a dependency not cleaning up its DB connections with proper &#8216;using&#8217; blocks.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-hardon odd alt depth-3" id="comment-1371585">
				<div id="div-comment-1371585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/gdalsnes' rel='external nofollow' class='url'>gdalsnes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371585">
			November 26, 2018 at 12:13 pm</a>		</div>

		<p>&#8220;itâ€™s meant for wrapping unmanaged resources&#8221;<br />
also commonly used for disconnecting from static events/events with longer lifetime, to prevent memory leak</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even thread-even depth-1 parent" id="comment-1371535">
				<div id="div-comment-1371535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371535">
			November 26, 2018 at 7:56 am</a>		</div>

		<p>The first thing that came to mind when I read this was it is a sad thing if you need to tell people why use after free (or use after dispose in this case) is a bad thing.<br />
It then lead me to wonder, is it managed code that really distances the idea of lifetime from the object or is it something about the quality of education in this area.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-rkpatrick odd alt depth-2 parent" id="comment-1371575">
				<div id="div-comment-1371575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RKPatrick' rel='external nofollow' class='url'>RKPatrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371575">
			November 26, 2018 at 12:12 pm</a>		</div>

		<p>The issue is that IDisposable is a bridge between managed and unmanaged. If you have a managed class representing an unmanaged (like an OS object) thing, when the GC cleans up the wrapper, there needs to be a mechanism to tell the unmanaged plumbing to clean up *its* corresponding object &#8211; the mechanism being IDisposable. I&#8217;d say it&#8217;s an education issue, since I rarely run into a job candidate who knows *why* IDisposable exists (&#8220;deterministic destruction&#8221; is a very imperfect answer), but the whole point of IDisposable is given on the first line of the class doc&#8230;.it&#8217;s just that a lot of people don&#8217;t ever bother to read MSDN.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-hardon even depth-3 parent" id="comment-1371595">
				<div id="div-comment-1371595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/gdalsnes' rel='external nofollow' class='url'>gdalsnes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371595">
			November 26, 2018 at 12:15 pm</a>		</div>

		<p>&#8220;IDisposable is a bridge between managed and unmanaged&#8221;<br />
Not really, the finalizers is the bridge. Dispose is an optimization on top.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-stormhill117 odd alt depth-4" id="comment-1371605">
				<div id="div-comment-1371605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/stormhill117' rel='external nofollow' class='url'>stormhill117</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371605">
			November 26, 2018 at 1:08 pm</a>		</div>

		<p>No, finalizers are the safety net, the backup.<br />
To quote <a href="https://blogs.msdn.microsoft.com/oldnewthing/20100809-00/?p=13203/" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20100809-00/?p=13203/</a><br />
&#8220;A correctly-written program cannot assume that finalizers will ever run.&#8221;</p>
<p>Additionally, .NET Core doesn&#8217;t run finalizers on normal process exit: <a href="https://stackoverflow.com/a/44735403/2676593" rel="nofollow">https://stackoverflow.com/a/44735403/2676593</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-rkpatrick even depth-4" id="comment-1371665">
				<div id="div-comment-1371665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RKPatrick' rel='external nofollow' class='url'>RKPatrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371665">
			November 27, 2018 at 12:44 pm</a>		</div>

		<p>Finalizers are non-deterministic (you don&#8217;t control when they run).  This is not good for unmanaged resources, hence the use of deterministic IDisposable.  And furthermore, this is the summary block for the MSDN documentation for IDisposable &#8211; &#8220;Provides a mechanism for releasing unmanaged resources.&#8221;  Lots of people use them for deterministic destruction, but that is not it&#8217;s purpose.  Seriously, it&#8217;s all in the documentation (and I&#8217;ve had this conversation with far too many devs &#8211; &#8220;READ MSDN!&#8221;)&#8230;even the remarks add &#8220;The primary use of this interface is to release unmanaged resources. &#8220;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tbpub odd alt thread-odd thread-alt depth-1" id="comment-1371555">
				<div id="div-comment-1371555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/tballard' rel='external nofollow' class='url'>tballard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371555">
			November 26, 2018 at 10:51 am</a>		</div>

		<p>I just did some tests with XmlReader.Create: When it is initialized from a Stream inside a Using CA2202 occurs if I use &#8220;using&#8221; on the reader and doesn&#8217;t occur if I don&#8217;t use &#8220;using&#8221; on the reader.  But, if I do similar pattern using SqlConnection/SqlCommand, I don&#8217;t get CA2202 if use &#8220;using&#8221; on both&#8230;</p>
<p>How are we supposed to know what will trigger it and the right way to call stuff?  It seems like I always have to guess.  Is there something I can look at in decompiled code to understand what triggers?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kbiel even thread-even depth-1 parent" id="comment-1371625">
				<div id="div-comment-1371625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/KennyBiel' rel='external nofollow' class='url'>KennyBiel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371625">
			November 26, 2018 at 7:54 pm</a>		</div>

		<p>A few simple rules will keep your usage of IDisposable 99.99% correct:<br />
1) If you instantiate within a code block, closure, or method and it is never seen outside that block, you own the lifetime; wrap a using around it and call it good.<br />
2) If you are passed an IDisposable, you do not own the lifetime; do not call Dispose() or Close(). Also, require the caller to have the object in a non-disposed or opened state.<br />
3) If you return an IDisposable, you do not own the lifetime; the caller must take responsibility for calling Dispose() and/or Close().<br />
4) If you instantiate an long-lived IDisposable in your class; you own the lifetime and your class must implement IDisposable itself. Make sure to never expose the private IDisposable object(s) you own to ensure you are in control of the lifetime.<br />
5) If you are passed an IDisposable in your constructor, you do not own the lifetime and do not need to implement IDisposable.</p>
<p>If you follow these rules, you will never see a CA2202 and you should never have a leak assuming code you call or is calling yours does the right thing.</p>
<p>As noted by others here, StreamReader/Writer is unfortunately not compliant with these rules. It takes over the lifetime of the Stream object that is passed to it. BinaryReader/Writer is slightly better in that it has a constructor overload which allows you to specify whether it should dispose of the passed Stream. Keep the using for the Stream and wrap the block with #pragma warning disable CA2202 and #pragma warning restore CA2202.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-rkpatrick odd alt depth-2" id="comment-1371705">
				<div id="div-comment-1371705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RKPatrick' rel='external nofollow' class='url'>RKPatrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371705">
			November 28, 2018 at 7:02 am</a>		</div>

		<p>This.  All of it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshudson even thread-odd thread-alt depth-1" id="comment-1371635">
				<div id="div-comment-1371635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua_______' rel='external nofollow' class='url'>Joshua_______</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371635">
			November 26, 2018 at 8:11 pm</a>		</div>

		<p>It turns out sometimes you do want to double dispose, or rather would want to once a very old bug in .NET Core is fixed: <a href="https://github.com/dotnet/corefx/issues/8895" rel="nofollow">https://github.com/dotnet/corefx/issues/8895</a></p>
<p>I ended up calling Flush(true) on the filestream. Whether this is a workaround or the correct code anyway depends on the desired consistency model.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tudor-turcu odd alt thread-even depth-1 parent" id="comment-1371645">
				<div id="div-comment-1371645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/TurcuT' rel='external nofollow' class='url'>TurcuT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371645">
			November 27, 2018 at 4:40 am</a>		</div>

		<p>The warning is very confusing when it appears in situations like this:<br />
            using (StreamWriter sw = new StreamWriter(fileName))<br />
            using (JsonWriter writer = new JsonTextWriter(sw))<br />
            {<br />
                serializer.Serialize(writer, &#8230;);<br />
            }</p>
<p>In such cases, the developer tries to dispose two separate objects &#8211; he must dig trough documentation to know that the 2&#8217;nd objects, in some cases, &#8220;assumes&#8221; ownership over the first one and disposes it &#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alexcohn even depth-2" id="comment-1371715">
				<div id="div-comment-1371715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371715">
			November 28, 2018 at 8:26 am</a>		</div>

		<p>I believe this was done to encourage the following pattern:</p>
<p><code>using (JsonWriter writer = new JsonTextWriter( new StreamWriter(fileName) ))<br />
{<br />
  serializer.Serialize(writer, â€¦);<br />
}</code></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-vbaderks odd alt thread-odd thread-alt depth-1 parent" id="comment-1371685">
				<div id="div-comment-1371685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/VBA+Derks' rel='external nofollow' class='url'>VBA Derks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371685">
			November 27, 2018 at 3:14 pm</a>		</div>

		<p>While this rule makes sense in general, the analyzer that detects CA2202 generates too many false warnings. We tried to use it, but almost all issues it reported, were caused by the double Dispose of using statements in combination with StreamReader like objects that are going too take ownership of the disposable object. The analyzer should at least &#8220;filter&#8221; these kind of false warnings, for well known .NET framework classes.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-kbiel even depth-2 parent" id="comment-1371945">
				<div id="div-comment-1371945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/KennyBiel' rel='external nofollow' class='url'>KennyBiel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1371945">
			November 29, 2018 at 1:00 pm</a>		</div>

		<p>Or you can just use<br />
#pragma warning disable CA2202<br />
#pragma warning restore CA2202<br />
around known issues.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-vbaderks odd alt depth-3" id="comment-1372685">
				<div id="div-comment-1372685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/VBA+Derks' rel='external nofollow' class='url'>VBA Derks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181126-00/?p=100325#comment-1372685">
			December 5, 2018 at 2:55 pm</a>		</div>

		<p>I like to use static analysis tools, and #pragma disable/restore is very useful when only a few exceptional false warnings are reported. For our code base all reported warnings were from the &#8220;StreamReader type&#8221;. Leaving the rule enabled to catch problems like:</p>
<p>obj.Dispose();<br />
obj.Dispose();</p>
<p>wouldn&#8217;t make sense in our case.</p>
<p>Note: it seems that the new Roslyn code analyzers (NuGet package Microsoft.CodeAnalysis.FxCopAnalyzers) don&#8217;t support CA2202 at the moment.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>