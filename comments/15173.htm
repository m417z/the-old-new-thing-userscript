<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-805583">
				<div id="div-comment-805583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.serverassist.com' rel='external nofollow' class='url'>Electron Shepherd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805583">
			January 26, 2010 at 7:08 am</a>		</div>

		<p>The Zap term is from the dinosoar days. See <a rel="nofollow" target="_new" href="http://catb.org/~esr/jargon/html/Z/zap.html" rel="nofollow">http://catb.org/~esr/jargon/html/Z/zap.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805593">
				<div id="div-comment-805593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805593">
			January 26, 2010 at 7:46 am</a>		</div>

		<p>I do a similar thing as I write a new function or class. &nbsp;I set breakpoints at the beginning of each branch. &nbsp;Then I run my unit tests in the debugger, removing each breakpoint as I verify the operation. &nbsp;When I&#8217;m done, if there are still breakpoints, then I&#8217;ve either got a bug, or I need to add more cases to the unit test.</p>
<p>Everything old is new again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805613">
				<div id="div-comment-805613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pun</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805613">
			January 26, 2010 at 8:40 am</a>		</div>

		<p>@Adrian:</p>
<p>So, that would be The New Old Thing?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805633">
				<div id="div-comment-805633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805633">
			January 26, 2010 at 8:46 am</a>		</div>

		<blockquote><p>
  but the brain cells are getting rusty.
</p></blockquote>
<p>As are the typing fingers, apparently.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805653">
				<div id="div-comment-805653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jared</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805653">
			January 26, 2010 at 9:54 am</a>		</div>

		<p>AMASPZAP aka &quot;Superzap&quot; is an IBM mainframe utility dating back to at least the mid sixties. &nbsp;I believe the original SuperZAP came from SLAC (Stanford Linear Accelerator Center) and was repackaged by IBM as a service tool IMASPZAP.</p>
<p>The basics were control statements to locate a module/program, verify content by offset, and replace content by offset. &nbsp;</p>
<p>It would also dump modules in a pretty printed format to help a patch creator get oriented, and would work on disk tracks (raw data) as well as programs.</p>
<p>PS: &nbsp;Us old timers would also &quot;zap&quot; programs in memory using the console switches and lights. &nbsp;</p>
<p>Perhaps the hardest thing for us to get used to about them new fangled PCs was the idea of zero lights and only 1 switch!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805663">
				<div id="div-comment-805663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805663">
			January 26, 2010 at 9:55 am</a>		</div>

		<p>&quot;The name comes from the old Windows 2.x kernel debugger.&quot;</p>
<p>Was that SYMDEB?</p>
<p>And on the matter of the TRAP* macros, in fact x86 has a built-in INTO instruction to cause INT 4 when the overflow flag is set.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805673">
				<div id="div-comment-805673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jared</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805673">
			January 26, 2010 at 9:55 am</a>		</div>

		<p>AMASPZAP aka &quot;Superzap&quot; is an IBM mainframe utility dating back to at least the mid sixties. &nbsp;I believe the original SuperZAP came from SLAC (Stanford Linear Accelerator Center) and was repackaged by IBM as a service tool IMASPZAP.</p>
<p>The basics were control statements to locate a module/program, verify content by offset, and replace content by offset. &nbsp;</p>
<p>It would also dump modules in a pretty printed format to help a patch creator get oriented, and would work on disk tracks (raw data) as well as programs.</p>
<p>PS: &nbsp;Us old timers would also &quot;zap&quot; programs in memory using the console switches and lights. &nbsp;</p>
<p>Perhaps the hardest thing for us to get used to about them new fangled PCs was the idea of zero lights and only 1 switch!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805683">
				<div id="div-comment-805683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805683">
			January 26, 2010 at 10:08 am</a>		</div>

		<p>Isn&#8217;t the x86 2-byte breakpoint instruction also int 3 (cdh, 03h vs. cch)? Since int 1 is the single-step interrupt, you wouldn&#8217;t need to put in code, as it is automatically triggered after every instruction when active.</p>
<div class=post>[<i>The assembler automatically chooses the 1-byte encoding for &#8220;int 3&#8221;. There&#8217;s no easy way to ask for the 2-byte version. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805703">
				<div id="div-comment-805703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thomas Krause</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805703">
			January 26, 2010 at 11:14 am</a>		</div>

		<p>Is it a coincidence that &quot;Z&quot; is ASCII 90 and 0x90 is also the instruction code for &quot;NOP&quot; in x86?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805713">
				<div id="div-comment-805713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805713">
			January 26, 2010 at 11:15 am</a>		</div>

		<p>“[The assembler automatically chooses the 1-byte encoding for &#8220;int 3&#8221;. There&#8217;s no easy way to ask for the 2-byte version. -Raymond]”</p>
<p>Apart from “db cdh, 03h” of course. That&#8217;s not easy?</p>
<div class=post>[<i>I don&#8217;t consider generating code via &#8220;db&#8221; to be &#8220;easy&#8221;. Or readable for that matter. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805723">
				<div id="div-comment-805723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.analyze-v.com' rel='external nofollow' class='url'>Scott</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805723">
			January 26, 2010 at 11:34 am</a>		</div>

		<p>As an amusing aside&#8230;The term &quot;zap&quot; lives on in Windows thanks to Driver Verifier, which for some errors will ask if you want to:</p>
<p>Break, Ignore, Zap, Remove, Disable all (bizrd)?</p>
<p>Though in this context it simply causes Verifier to no longer break in to the kernel debugger when this violation occurs, instead it just prints a message and moves on.</p>
<p>-scott</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805743">
				<div id="div-comment-805743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805743">
			January 26, 2010 at 12:54 pm</a>		</div>

		<p>So under what circumstances would an int 1 appear in code?</p>
<div class=post>[<i>Some teams used &#8220;int 3&#8221; to mean &#8220;code coverage breakpoint&#8221; and &#8220;int 1&#8221; to mean &#8220;assertion failure breakpoint.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805753">
				<div id="div-comment-805753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">janm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805753">
			January 26, 2010 at 3:00 pm</a>		</div>

		<p>I remember using various &quot;zap&quot; utilities on the TRS-80 in the early &#8217;80s, running under a Microsoft operating system (TRS/DOS 1.3), so it seems reasonable that Microsoft knew and used the term then.</p>
<p>I was working with someone at the time who had worked at NCR and IBM in the &#8217;60s and &#8217;70s, and remember talking about the history of zap and Superzap. &nbsp;Definitely older than the Windows 2.x debugger.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805763">
				<div id="div-comment-805763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805763">
			January 26, 2010 at 3:47 pm</a>		</div>

		<p>@janm</p>
<p>TRSDOS, and its many and better compatible alternatives (such as NewDOS/80, UltraDOS, LDOS, VTOS, etc. etc.) had nothing whatsoever to do with Microsoft. &nbsp;TRSDOS was written by Randy Cook under contract from Radio Shack, and shows a strong DEC TOPS influence. &nbsp;The TRS-80 Superzap you used was introduced in the original NewDOS from Apparat but picked up by other DOSes later. &nbsp;Superzap was a hex editor for disks. &nbsp;Probably the term came from the IBM mainframe usage mentioned earlier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805623">
				<div id="div-comment-805623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805623">
			January 26, 2010 at 8:44 am</a>		</div>

		<p>Agree with Electron Shepherd; &#8216;zap&#8217; is the generic term for what is also termed &#8216;patch&#8217;. &nbsp;There was no implication that the zapped instructions would be nop&#8217;d.</p>
<p>Numerous DEC operating systems in the 1970s had a program called &#8216;zap&#8217; that modified binaries.</p>
<p>I&#8217;m pretty certain IBM opsyses (what *is* the lural of opsys?) did too, but the brain cells are getting rusty.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-805773">
				<div id="div-comment-805773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805773">
			January 26, 2010 at 5:49 pm</a>		</div>

		<p>[Some teams used &#8220;int 3&#8221; to mean &#8220;code coverage breakpoint&#8221; and &#8220;int 1&#8221; to mean &#8220;assertion failure breakpoint.&#8221; -Raymond]</p>
<p>And INT 1 has a undocumented single-byte form too, 0xF1.</p>
<div class=post>[<i>And this is relevant how exactly? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805783">
				<div id="div-comment-805783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://ashwin.zaatar.org/' rel='external nofollow' class='url'>Ashwin Nanjappa</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805783">
			January 26, 2010 at 8:22 pm</a>		</div>

		<p>Hi Raymond, I am terribly sorry if this is not the right place for suggestions or queries. The Suggestion Box post seems to be closed for comments.</p>
<p>Anyway &#8230; a Mac friend pointed out to me how the Refresh option is not present on OS X. Why does the Explorer on Windows need a Refresh option? Why isn&#8217;t the Refresh automatic and instantaneous? I would love to know the historic reasons for this :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805793">
				<div id="div-comment-805793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805793">
			January 26, 2010 at 8:49 pm</a>		</div>

		<p>@Ashwin Nanjappa:</p>
<p>Probably for similar reasons to the ones that cause people to write OSX extensions, eg. <a rel="nofollow" target="_new" href="http://lifehacker.com/252956/download-of-the-day-refresh-finder-mac" rel="nofollow">http://lifehacker.com/252956/download-of-the-day-refresh-finder-mac</a>.</p>
<p>Not all network drives broadcast updates &#8212; I imagine that would be a performance nightmare in some cases &#8212; so you sometimes might need to refresh manually.</p>
<p>Windows (at least since Vista &#8212; it&#8217;s been too long since I used XP to remember) does do auto-refresh, which works most of the time and about as well as the one introduced in (IIRC) OSX 10.4 in my experience.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805803">
				<div id="div-comment-805803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805803">
			January 26, 2010 at 9:26 pm</a>		</div>

		<p>[I don&#8217;t consider generating code via &#8220;db&#8221; to be &#8220;easy&#8221;. Or readable for that matter. -Raymond]</p>
<p>But&#8230; your post suggest you&#8217;re using macros already. It&#8217;s not going to harm readability that way, right?</p>
<p>I remember that when Pentium CPU with MMX is released, the community at Borland newsgroup published macro add-ins that allow TASM support MMX immediately, before the next release. And I think it&#8217;s good.</p>
<div class=post>[<i>True, if you&#8217;re using a macro then it doesn&#8217;t matter. But who would want to go out of their way to use a &#8220;large breakpoint&#8221;? The <code>int 1</code> two-byte breakpoint wasn&#8217;t chosen because somebody said, &#8220;Hey, I want a two-byte breakpoint.&#8221; It was chosen because somebody said &#8220;I need a breakpoint, and oh well looks like this one is two bytes.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805813">
				<div id="div-comment-805813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805813">
			January 26, 2010 at 11:36 pm</a>		</div>

		<p>I use a macro</p>
<p>#define NOT_TESTED ASSERTE(0)</p>
<p>&#8230; for same purpose. The more things change, the more they stay the same, eh?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805823">
				<div id="div-comment-805823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.youtube.com/watch?v=THNPmhBl-8I' rel='external nofollow' class='url'>Neil</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805823">
			January 27, 2010 at 2:30 am</a>		</div>

		<p>Obligatory rocket science link.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805833">
				<div id="div-comment-805833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-805833">
			January 27, 2010 at 2:50 am</a>		</div>

		<p>@Goran: An enhanced version would be:</p>
<p>#define NOT_TESTED ASSERTE(!&quot;This code path has not been tested&quot;);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-806823">
				<div id="div-comment-806823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100126-00/?p=15173#comment-806823">
			January 28, 2010 at 11:33 pm</a>		</div>

		<p>The int 1 two-byte breakpoint wasn&#8217;t chosen because somebody said, &#8220;Hey, I want a two-byte breakpoint.&#8221; It was chosen because somebody said &#8220;I need a breakpoint, and oh well looks like this one is two bytes.&#8221; -Raymond]</p>
<p>And the funny thing is that later the 386 introduced a one byte version of INT 1 (0xF1), as I posted above. It was undocumented as it was originally intended for ICE debugging, but it works to generate an Int 1 when no ICE is attached.</p>
<div class=post>[<i>I ask again, &#8220;And this is relevant how exactly?&#8221; Are you suggesting that Windows should have used an undocumented opcode that worked only on some processors? &#8220;Hey everybody, I&#8217;m going in and modifying all our source code and changing all INT 1 instructions to a new INT1 macro that takes advantage of an undocumented opcode that works only on some processors and which our debugging tools don&#8217;t understand. Please do not use the INT 1 instruction in the future; use the INT1 macro from now on. Why am I doing this? Um, let me get back do you.&#8221; Good luck with that. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>