<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239516">
				<div id="div-comment-1239516" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239516">
			June 29, 2015 at 7:08 am</a>		</div>

		<p>Possible issues:</p>
<p>&#8211; In the hex case you use long.Parse instead of ulong.Parse, which will throw an exception for numbers larger than Int64.MaxValue</p>
<p>&#8211; The bonus points spec is sloppy and doesn&#39;t specify that the lower 32 bits must have leading zeroes. If they don&#39;t have leading zeroes then just removing the backtick would be the wrong thing to do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1239506">
				<div id="div-comment-1239506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239506">
			June 29, 2015 at 7:09 am</a>		</div>

		<p>I would add that support is missing for 64-bit SIGNED integers presented in hexadecimal format. Perhaps you don&#39;t run across or deal with them regularly. If you use the sign to determine how to parse decimal input, you could use a MSB check to do the same for hexadecimal input.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239486">
				<div id="div-comment-1239486" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239486">
			June 29, 2015 at 7:21 am</a>		</div>

		<p>@Brian EE</p>
<p>I think that omission was deliberate. &nbsp;And how is checking the MSB going to tell you whether a number is a large positive number or a negative number?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1239476">
				<div id="div-comment-1239476" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239476">
			June 29, 2015 at 7:29 am</a>		</div>

		<p>One must consider WHERE the data is coming from. &nbsp;If the number is coming from IBM Mainframe or AS/400, the data will be encoded in EBCDIC. &nbsp;Also, hex numbers are prefaced with &amp;h or &amp;H in that world as opposed to using 0x. &nbsp;I know because I had to do that code before. &nbsp;The routine had to take into account both ASCII &amp; EBCDIC and had to handle both literal as well as hex values.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239456">
				<div id="div-comment-1239456" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239456">
			June 29, 2015 at 8:02 am</a>		</div>

		<p>@12BitSlab</p>
<p>&gt; &amp;h or &amp;H</p>
<p>Look what you have done. Now Iâ€™m having flashbacks of Vilnius BASIC.</p>
<p>And no, it had a (mostly) ASCII-superset encoding.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1239446">
				<div id="div-comment-1239446" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239446">
			June 29, 2015 at 8:15 am</a>		</div>

		<p>Doesn&#39;t the cast to long negate the point of supporting &quot;64-bit unsigned number in decimal format&quot;? ParseLongSomehow(&quot;9223372036854775808&quot;) returns -9223372036854775808L without a way to tell if the string was &quot;-9223372036854775808&quot; or &quot;9223372036854775808&quot;. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239436">
				<div id="div-comment-1239436" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239436">
			June 29, 2015 at 8:28 am</a>		</div>

		<p>I&#39;m glad you didn&#39;t add octal support. &nbsp;The only time I&#39;ve ever seen octal used intentionally is when dealing with chmod permissions; more often than not it just causes buggy code when people add leading zeros to their decimal constants.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1239426">
				<div id="div-comment-1239426" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239426">
			June 29, 2015 at 9:06 am</a>		</div>

		<p>@Wear:</p>
<p>Distinguishing &quot;-9223372036854775808&quot; and &quot;9223372036854775808&quot; isn&#39;t really necessary, and you can&#39;t even do it given the API because the function just returns a long. Treating those numbers as the same is useful if you know you have a 64-bit number that you want to treat as signed, but maybe it was printed as unsigned and maybe not.</p>
<p>The same comment basically applies to @Brian EE and @David T&#39;s discussion. Recognizing &quot;-0x1234&quot; might be occasionally useful, but you don&#39;t have to do anything to determine the sign based on the MSB (e.g. that 0xF&#8230;F will be -1) because that will fall out naturally.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239416">
				<div id="div-comment-1239416" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239416">
			June 29, 2015 at 9:36 am</a>		</div>

		<p>@Evan So less &quot;64-bit unsigned number in decimal format&quot; and more &quot;64-bit signed number in unsigned decimal format&quot;? I guess I could buy that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1221831">
				<div id="div-comment-1221831" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1221831">
			June 29, 2015 at 10:14 am</a>		</div>

		<p>@David T: If the most significant bit is a logic &#39;1&#39;, then the number is considered negative as that&#39;s where the sign bit is stored.</p>
<p>I did defer that perhaps Raymond doesn&#39;t deal with those types of numbers in the normal course (and little programs tend to grow out of things to fit *his* needs). Just pointing out that others may have use for that if they are doing things more arithmetic based and less pointer based.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239406">
				<div id="div-comment-1239406" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239406">
			June 29, 2015 at 10:32 am</a>		</div>

		<p>@Brian EE:</p>
<p>Raymond&#39;s code will already work correctly in almost all instances of the situation you&#39;re talking about. If you give it the hex representation of a 2&#39;s complement negative 64-bit number, you&#39;ll get that negative number out of his function. That just falls out naturally from parsing as an ulong and casting to long.</p>
<p>The only time you&#39;d need to explicitly check the MSB and do something different is if you want to parse the hex representation of a negative number in 1&#39;s complement or sign-and-magnitude format.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1239356">
				<div id="div-comment-1239356" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239356">
			June 30, 2015 at 4:03 am</a>		</div>

		<p>For bonus points, throw a parsing error if the backtick is not in the expected position (e.g., because the developer didn&#39;t copy/paste the whole symbol from the debugger.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1221821">
				<div id="div-comment-1221821" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1221821">
			June 30, 2015 at 7:01 am</a>		</div>

		<p>@Evan: Except that the code given *doesn&#39;t* parse hexadecimal numbers as ulong. &nbsp;The only use of ulong is for decimal numbers without leading minus sign.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1239306">
				<div id="div-comment-1239306" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239306">
			June 30, 2015 at 7:54 am</a>		</div>

		<p>@Ben Voigt:</p>
<p>Um, &quot;return (long)ulong.Parse(s);&quot;.</p>
<p>Granted, it&#39;s long.Parse in the first version, but that was just the &quot;first stab&quot; before figuring out what the function should do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239296">
				<div id="div-comment-1239296" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239296">
			June 30, 2015 at 7:55 am</a>		</div>

		<p>Oh, whoops, I&#39;m the one who can&#39;t read. Sorry. You&#39;re right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1239286">
				<div id="div-comment-1239286" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239286">
			June 30, 2015 at 8:00 am</a>		</div>

		<p>@Evan: You&#39;re right about it handling negative hex numbers. I focused on the written requirements and failed to observe the implementation.</p>
<p>@Zarat: I believe that falls under the &quot;Garbage In, Garbage Out&quot; principle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239246">
				<div id="div-comment-1239246" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150629-00/?p=45271#comment-1239246">
			June 30, 2015 at 8:34 am</a>		</div>

		<p>@Ben Voigt @Evan It&#39;s long.parse that&#39;s doing it for hex numbers. The cast to long is creating negative numbers for the large decimal case</p>
<p>i.e. </p>
<p>long.Parse(&quot;8000000000000000&quot;, NumberStyles.HexNumber) -&gt; -9223372036854775808</p>
<p>long.Parse(&quot;800000000000000&quot;, NumberStyles.HexNumber) -&gt; 576460752303423488</p>
<p>(long)ulong.Parse(&quot;9223372036854775808&quot;) -&gt; -9223372036854775808</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>