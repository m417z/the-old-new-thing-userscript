<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-141063">
				<div id="div-comment-141063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040204-00/?p=40743#comment-141063">
			February 4, 2004 at 8:55 am</a>		</div>

		<p>&quot;What optimizations can be performed if the destructor MyClass::~MyClass() is removed from the class definition?&quot; </p>
<p>Well, unless you have sub objects in your class with destructors, in which case the compiler will generate a default hidden dtor function for you.</p>
<div class="post">[<em>I&#39;ve revised the text to be clearer, thanks. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141093">
				<div id="div-comment-141093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mailto:benh@bwsint.com' rel='external nofollow' class='url'>Ben Hutchings</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040204-00/?p=40743#comment-141093">
			February 4, 2004 at 10:40 am</a>		</div>

		<p>All classes have destructors, even if they aren&#8217;t declared in the code (implicitly declared) and even if the destructor doesn&#8217;t need to do anything (trivial destructor). Similarly all classes have at least one constructor and at least one function overloading the assignment operator. This might change in the next version of C++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141133">
				<div id="div-comment-141133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">B.Y.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040204-00/?p=40743#comment-141133">
			February 4, 2004 at 4:28 pm</a>		</div>

		<p>This looks like a really user-hostile design of C++.</p>
<p>Why can&#8217;t they just put in the spec: if delete is called on a pointer return by new, it deletes the object pointed; if it&#8217;s called on a pointer returned by new[], it deletes the entire array. The compiler can always store a count of 1 for the scalar form of new, and we won&#8217;t have this mismatched new/delete bug any more. </p>
<p>Any reasons they didn&#8217;t do that ? Do they enjoy watching programmers shoot themselvs in the foot ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141143">
				<div id="div-comment-141143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shane King</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040204-00/?p=40743#comment-141143">
			February 4, 2004 at 4:30 pm</a>		</div>

		<p>While strictly speaking they have a destructor that doesn&#8217;t do anything, I find it more useful to think of them as not having a destructor. While to say as such is not correct as per the C++ spec, it makes talking about it a hell of a lot easier. If you get all nitpicky in the way you talk about C++, you end up with disclaimers longer than the article. ;)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141153">
				<div id="div-comment-141153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shane King</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040204-00/?p=40743#comment-141153">
			February 4, 2004 at 4:32 pm</a>		</div>

		<p>&quot;Any reasons they didn&#8217;t do that ? Do they enjoy watching programmers shoot themselvs in the foot ?&quot;</p>
<p>Because the C++ philosophy is &quot;no overhead for things you don&#8217;t use&quot;. Therefore, it&#8217;s unacceptable to add overhead in time and space to non-array allocations by treating them as arrays.</p>
<p>Whether or not the philosophy is a good thing is debatable, but within the context of the philosophy, some of the design decisions made in C++ make a lot more sense.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141163">
				<div id="div-comment-141163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">runtime</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040204-00/?p=40743#comment-141163">
			February 4, 2004 at 4:36 pm</a>		</div>

		<p>B.Y., I made the same suggestion yesterday and some people blew a gasket! I think they (and Bjarne) do not want to waste those &quot;unnecssary&quot; sizeof(size_t) bytes for a scalar object. Even in debug-only code, this would be very helpful. Alas, they didn&#8217;t think a compiler&#8217;s job is to debug programmer errors. That is a job for Purify, BoundsChecker, or Valgrind.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141183">
				<div id="div-comment-141183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040204-00/?p=40743#comment-141183">
			February 4, 2004 at 7:01 pm</a>		</div>

		<p>For &quot;If the class does not have a destructor&quot; I should have written &quot;If the class destructor is trivial&quot;. Sorry for the lack of clarity.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141203">
				<div id="div-comment-141203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan O'Connor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040204-00/?p=40743#comment-141203">
			February 5, 2004 at 3:38 am</a>		</div>

		<p>Stan Lippmann wrote a terrific book about the internals of C++ implementations. Highly recommended for reading on the bus/train to work!<br />
<br /><a target="_new" href="http://www.amazon.com/exec/obidos/tg/detail/-/0201834545/qid=1075980824/sr=1-3/ref=sr_1_3/102-4532413-4141714?v=glance&amp;s=books" rel="nofollow">http://www.amazon.com/exec/obidos/tg/detail/-/0201834545/qid=1075980824/sr=1-3/ref=sr_1_3/102-4532413-4141714?v=glance&#038;s=books</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141243">
				<div id="div-comment-141243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040204-00/?p=40743#comment-141243">
			February 5, 2004 at 11:42 am</a>		</div>

		<p>All my gaskets are intact, thank you.</p>
<p>Like I mentioned yesterday, it&#8217;s not trivial to tell the difference between memory allocated by scalar new and memory allocated by array new, since array new can take any value from 0 to 0xFFFFFFFF.  This means that debug code would have to add more than just a size_t in order to keep track of this change, at which point the debug code is markedly different from release code.  If you want to do this kind of checking, there are plenty of ways you can do it yourself without requiring the compiler to break the C++ standard.</p>
<p>The compiler&#8217;s job is not to debug run-time errors such as mismatched new/delete operators (as a corollary, the compiler isn&#8217;t there to warn you if you call delete twice, or call free() on a new&#8217;d object).  All of this checking puts overhead into the code that isn&#8217;t mandated by the spec and may be unwanted in many cases (some people don&#8217;t want the code for their real-time application to be slowed down by excess checks against bad memory handling).</p>
<p>The bottom line is that the onus is on the developer to not write buggy code.  We have a mantra where I work &#8212; &quot;Careful!&quot;  It reminds us that we have to always be careful writing code and take the time to make sure things are done right, likewise if you aren&#8217;t careful, you shouldn&#8217;t be writing code.  Mis-matching new and delete is not careful and if you rely on a compiler crutch to keep you from doing it then you probably shouldn&#8217;t be writing code at that level.  If it&#8217;s really a big problem, use a language that doesn&#8217;t put such a large responsibility on the developer.</p>
<p>All gaskets still intact.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141263">
				<div id="div-comment-141263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">B.Y.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040204-00/?p=40743#comment-141263">
			February 5, 2004 at 1:13 pm</a>		</div>

		<p>Yes, given the current standard, the compiler has to do what it&#8217;s doing now.</p>
<p>The real-time argument makes no sense. If their code is that time-critical, they shouldn&#8217;t be allocating and deleting objects/memory in the real-time code in first place.</p>
<p>Sure, we should be careful, but that&#8217;s beside the point. How would you like it if the standard says all pointers should be treated as byte pointers in pointer arithmetic ? So instead of writing &quot;p+n&quot; you have to carefully write &quot;p+n*sizeof(whatever)&quot;.</p>
<p>We&#8217;re not saying that we should rely on a compiler crutch, but a properly written spec can eliminate that bug altogether.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141283">
				<div id="div-comment-141283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040204-00/?p=40743#comment-141283">
			February 5, 2004 at 4:37 pm</a>		</div>

		<p>So, if you allocate a primitive type like <code>int</code> or <code>char</code> using the scalar <code>new</code> and free it using the vector <code>delete</code>, then it should be OK since there are no &quot;destructors&quot; for primitives? Also, how about mismatch frees i.e. allocate with malloc() but freed using <code>delete</code>? What are the problems with those scenarios?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141473">
				<div id="div-comment-141473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040204-00/?p=40743#comment-141473">
			February 6, 2004 at 5:21 pm</a>		</div>

		<p>If you allocate with &quot;new[]&quot; you must free with &quot;delete[]&quot;. If you allocate with &quot;new&quot; you must free with &quot;delete&quot;. If you allocate with &quot;malloc&quot;, &quot;calloc&quot; or &quot;realloc&quot; you must free with &quot;free&quot;. If you allocate with &quot;LocalAlloc&quot; you must free with &quot;LocalFree&quot;. If you allocate with &quot;GlobalAlloc&quot; you must free with &quot;GlobalFree&quot;. If you allocate with &quot;CoTaskMemAlloc&quot; you must free with &quot;CoTaskMemFree&quot;.</p>
<p>It is always an error to allocate memory with one allocator and free with a different allocator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141503">
				<div id="div-comment-141503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://radio.weblogs.com/0106548/' rel='external nofollow' class='url'>Ziv Caspi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040204-00/?p=40743#comment-141503">
			February 8, 2004 at 7:28 am</a>		</div>

		<p>Re &quot;If you allocate with &quot;new[]&quot; you must free with &quot;delete[]&quot;.&quot;:</p>
<p>Don&#8217;t forget to make sure that the allocation/deallocation functions come from the same instance of your runtime library. Forgetting to do that is asking for trouble.</p>
<p>(This is why self-deallocation (as in calling &quot;delete this&quot; from a member function) is so popular in some circles.)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>