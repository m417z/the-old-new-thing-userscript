<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1172443">
				<div id="div-comment-1172443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172443">
			January 21, 2015 at 7:19 am</a>		</div>

		<p>You should contact the author of that other blog entry and let him know it cause some people some confusion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172453">
				<div id="div-comment-1172453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172453">
			January 21, 2015 at 7:42 am</a>		</div>

		<p>More post-mortems like this one please.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172473">
				<div id="div-comment-1172473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous1</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172473">
			January 21, 2015 at 8:57 am</a>		</div>

		<p>Would duplicating the handle for each thread work better (each thread will have its own synchronous handle so no serialization between threads)?</p>
<div class="post">[<em>Duplicating the handle doesn&#39;t help, since all the duplicates refer to the same file object and therefore share the same file position. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172483">
				<div id="div-comment-1172483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172483">
			January 21, 2015 at 9:11 am</a>		</div>

		<p>I would imagine separate file handles &#8211; one per thread &#8211; would work okay so long as all are readers, and all were opened in overlapped mode (async). &nbsp;Otherwise the OS has to serialize everything (sync handle), and if you add a writer to the mix you&#39;ve got sync/race conditions no matter how you slice it (what each thread will perceive is not predictable, depending on the actual order things resolve in at run time).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172493">
				<div id="div-comment-1172493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172493">
			January 21, 2015 at 9:24 am</a>		</div>

		<p>Why not just open separate handles in each thread with FILE_SHARE_READ? &nbsp;Or did the customer intentionally want to deny read sharing to other processes?</p>
<p>I&#39;ve seen a lot of cases where programs open file handles with FILE_SHARE_NONE when they could have safely allowed at least FILE_SHARE_READ with no problems. &nbsp;This is usually the result of opening files with either C&#39;s fopen() or C++&#39;s [i]fstream, which by default use FILE_SHARE_NONE under the hood in the call to CreateFile; it takes extra effort from the developers, especially if it&#39;s a cross-platform code base, to call one of the Windows-specific variants that allows them to specify a sharing mode.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172503">
				<div id="div-comment-1172503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172503">
			January 21, 2015 at 11:37 am</a>		</div>

		<p>I would put more emphasis on the use of this technique to avoid the race condition, whereby multiple threads seek and then read simultaneously. It&#39;s a race because the seek pointer is global to the file object.</p>
<p>The only hint that this technique solves a real issue is the mention of &quot;atomic&quot; in the last sentence.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172513">
				<div id="div-comment-1172513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172513">
			January 21, 2015 at 12:22 pm</a>		</div>

		<p>Ref: Adam Rosenfield: Yeah that&#39;s been my big complaint too. Lots of programs have the wrong sharing because MS picked a really dumb default when writing the standard libraries.</p>
<p>&quot;r&quot; should have been FILE_SHARE_READ | FILE_SHARE_DELETE</p>
<p>&quot;a&quot;, &quot;a+&quot; should have been FILE_SHARE_READ | FILE_SHARE_DELETE</p>
<p>&quot;w&quot;, &quot;r+&quot;, &quot;w+&quot; should have been FILE_SHARE_DELETE</p>
<p>Deleting a file open for writing is almost always equivalent to deleting it right after it was closed, especially on Windows where the name sticks around anyway.</p>
<div class="post">[<em>You&#39;re assuming that the Research division has that time machine working. <code>FILE_SHARE_DELETE</code> did not exist when the standard libraries were written. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000340019af3cc36 odd alt thread-odd thread-alt depth-1" id="comment-1172533">
				<div id="div-comment-1172533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Richard+T+Russell' rel='external nofollow' class='url'>Richard T Russell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172533">
			January 21, 2015 at 2:01 pm</a>		</div>

		<p>Not only did FILE_SHARE_DELETE not exist when the standard libraries were written, versions of Windows prior to its introduction don&#39;t ignore it: the open fails! &nbsp;So you mustn&#39;t set that bit if you are concerned about compatibility with older versions of Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172543">
				<div id="div-comment-1172543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172543">
			January 21, 2015 at 2:11 pm</a>		</div>

		<p>[You&#39;re assuming that the Research division has that time machine working. FILE_SHARE_DELETE did not exist when the standard libraries were written. -Raymond]</p>
<p>Which doesn&#39;t mean it couldn&#39;t have been added to the standard library as soon as FILE_SHARE_DELETE existed (with a windows version check). Even now it would fix more problems than cause.</p>
<div class="post">[<em>So you are silently changing the behavior of apps written with the old version of the standard library? That seems risky. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172553">
				<div id="div-comment-1172553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172553">
			January 21, 2015 at 3:00 pm</a>		</div>

		<p>The problem is that portable programs (which are written using open/fopen/iostream) expect that files are opened for sharing (which is the behavior in other operating systems).</p>
<p>Unfortunately, non-portable programs written for DOS (but also written using open/fopen/iostream/etc) expect that files are NOT opened for sharing. Windows inherited that behavior.</p>
<p>For programmers coming from other operating systems, Windows&#39; behavior is a pain; I have many times seen they do a &quot;retry loop&quot; waiting for the antivirus (or whatever the culprit is) to release the lock on the file so they can open/delete/rename it.</p>
<p>Getting back on topic (sort of), the portable way to solve the seek+read/write problem is pread/pwrite; do these functions exist on Windows?</p>
<div class="post">[<em>I find it interesting the mindset that lets you write the sentence &quot;Portable programs expect behavior that is not portable (not required by the standard).&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston even thread-even depth-1" id="comment-1172563">
				<div id="div-comment-1172563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172563">
			January 21, 2015 at 3:51 pm</a>		</div>

		<p>Is the simultaneous use of the same synchronous file handle in multiple threads actually supported? &nbsp;I&#39;ve always vaguely assumed that it wasn&#39;t, and don&#39;t recall ever seeing anything on the subject in MSDN.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1172573">
				<div id="div-comment-1172573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172573">
			January 21, 2015 at 5:38 pm</a>		</div>

		<p>s/oepration/operation/ :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172593">
				<div id="div-comment-1172593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172593">
			January 21, 2015 at 6:41 pm</a>		</div>

		<p>[So you are silently changing the behavior of apps written with the old version of the standard library? That seems risky. -Raymond]</p>
<p>I&#39;ve already done a limited form of the experiment. The only program I broke was Adobe PDF and that turned out to be an artifact of the test (it spawned a worker process with a different security level). I could do it system-wide w/ an appinit DLL but appinit DLLs need to die.</p>
<p>A minifilter would catch too much; however I wonder if that&#39;s actually safe all the same. I could prove it was safe if files w/ pending deletes could still be opened.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172603">
				<div id="div-comment-1172603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172603">
			January 22, 2015 at 2:47 am</a>		</div>

		<p>(Aren&#39;t these posts queued up months in advance? How long does it take to get the MSDN documentation updated to be less confusing? I think it&#39;s confusing that passing in an OVERLAPPED structure subtly changes that behaviour. Where&#39;s my time machine?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172633">
				<div id="div-comment-1172633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">D-Coder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172633">
			January 22, 2015 at 8:48 am</a>		</div>

		<p>@Neil &quot;Where&#39;s my time machine?&quot;</p>
<p>I&#39;m going to steal it a month ago, that&#39;s why you didn&#39;t see it next week.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172663">
				<div id="div-comment-1172663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172663">
			January 22, 2015 at 10:58 am</a>		</div>

		<p>I think it&#39;s important to observe that the hybrid mode needs to conform to the contract of async, because programs written for async (opening using FILE_FLAG_OVERLAPPED) may end up in hybrid mode without warning, depending on the file-like object being opened. &nbsp;Some drivers always complete operations synchronously.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>