<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-625913">
				<div id="div-comment-625913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-625913">
			May 2, 2008 at 1:29 pm</a>		</div>

		<p>&quot;See if you can find the hole in this implementation.&quot;</p>
<p>Looks like CleanPropertiesWhenWindowIsDestroyed() destroys all string atoms, not just the ones that were created internally by SetProp(&quot;string&quot;) calls.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625923">
				<div id="div-comment-625923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-625923">
			May 2, 2008 at 1:34 pm</a>		</div>

		<p>Hmm, local atom?</p>
<p>Docs says it should be global, but can SetProp() tell the difference?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-madq42 even thread-even depth-1" id="comment-625953">
				<div id="div-comment-625953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MadQ1' rel='external nofollow' class='url'>MadQ1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-625953">
			May 2, 2008 at 4:13 pm</a>		</div>

		<p>I&#8217;m assuming that an ATOM&#8217;s reference count really is global, meaning that one process could GlobalAddAtom, and another process could GlobalDeleteAtom it out of existence. The documentation isn&#8217;t specific about this (and I don&#8217;t think it needs to be, but I&#8217;m too lazy right now to write a program to find out.)</p>
<p>That being the case, using window properties as implemented above, it&#8217;s possible that an application or the window manager could accidentally delete a registered clipboard format or window message.</p>
<p>This could lead to two applications trying to communicate, but they could each have a different ATOM value for a registered window message or clipboard format. Ouch!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625973">
				<div id="div-comment-625973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://zeroflag.wordpress.com' rel='external nofollow' class='url'>Yoni</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-625973">
			May 2, 2008 at 6:22 pm</a>		</div>

		<p>Two guesses:</p>
<ol>
<li>Suppose you write</li>
</ol>
<p>hwnd1 = CreateWindow(..);</p>
<p>hwnd2 = CreateWindow(..);</p>
<p>SetProp(hwnd1, &quot;evil_prop&quot;, 0);</p>
<p>evil_prop_atom = GlobalFindAtom(&quot;evil_prop&quot;);</p>
<p>SetProp(hwnd2, evil_prop_atom, 0);</p>
<p>DestroyWindow(hwnd1);</p>
<p>DestroyWindow(hwnd2);</p>
<p>Unless I&#8217;m mistaken, this will double-free the property.</p>
<ol>
<li>If I&#8217;m reading your pseudocode correctly, you can use integer atoms as properties (i.e. pass &quot;#32770&quot; as the property name). This fits in with your first hint better than my previous guess, but I don&#8217;t see how it leads to a hole.</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-625993">
				<div id="div-comment-625993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Unknown</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-625993">
			May 3, 2008 at 7:45 am</a>		</div>

		<p>You say &quot;the fact that adding properties by atom is really a hole in the original implementation&quot;. So the intended implementation was just to allow normal strings and MAKEINTATOM(integer_atom) as pszName argument.</p>
<p>Now, why is the first line like:</p>
<p>ATOM atm = HIWORD(pszName) ? GlobalAddAtom(pszName) : LOWORD(pszName);</p>
<p>and not just like:</p>
<p>ATOM atm = GlobalAddAtom(pszName);</p>
<p>?</p>
<p>This way pszName is still allowed to be MAKEINTATOM(integer_atom) and no hole would have existed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626003">
				<div id="div-comment-626003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Unknown</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-626003">
			May 3, 2008 at 8:41 am</a>		</div>

		<p>May it be the source of the &quot;hole in the original implementation&quot; was actually in GlobalAddAtom/AddAtom?</p>
<p>Maybe the original implementation always returned pszName directly when pszName was specified as MAKEINTATOM() without checking if the value specified was actually &lt; MAXINTATOM?</p>
<p>Am I right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626023">
				<div id="div-comment-626023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-626023">
			May 3, 2008 at 4:44 pm</a>		</div>

		<p>I&#8217;ve never had use for SetProp(), it&#8217;s something that can be done, or is already being done, other ways. &nbsp; But some code of our application has used it.</p>
<p>Is the code above suposed to be pseudo code of the implementation of SetProp/RemoveProp in Windows 3.x? &nbsp;It has been my understanding from MSDN (and Bounds Checker &#8211; god bless its soul) that the properties added to a HWND leak if you don&#8217;t remove them before destruction. &nbsp;So what&#8217;s this CleanPropertiesWhenWindowIsDestroyed ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626033">
				<div id="div-comment-626033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-626033">
			May 4, 2008 at 6:06 am</a>		</div>

		<p>When you say the problems were long solved does that mean it&#8217;s safe to call SetProp with atoms on modern (NT-based) versions of Windows, or is there still a gotcha which means it&#8217;s better to stick to string property names even now?</p>
<p>MSDN says you can pass an atom for the lpString argument so it&#8217;s no secret. I do this when subclassing windows (storing the original winproc in a property) as I assumed it would be faster to convert the string to an atom once myself instead of making the OS do it twice for every subclassed control.</p>
<p>If there&#8217;s a risk that something will go wrong then I&#8217;ll switch to using strings as robustness is is more important than speeding up window opening by a fraction of a millisecond.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>