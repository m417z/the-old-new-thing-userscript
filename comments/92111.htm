<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1214161">
				<div id="div-comment-1214161" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151113-00/?p=92111#comment-1214161">
			November 13, 2015 at 7:15 am</a>		</div>

		<p>This might be a time where having the call count, as well as the timings themselves, can be useful in a profile. If you see that WaitForResponse() has been called 10 times, and it in turn has called MsgWaitForMultipleObjectsEx() 10,000,000 times, then it should immediately ring alarm bells that WFR() is calling MWFMOE() 1,000,000 times per call. Under what circumstances might it do that? Oh, here&#39;s a retry loop around the call. Yup, that&#39;d do it.</p>
<p>I&#39;ve had that with a program that was spending a lot of time doing string comparisons. Yeah, it was doing quite a few string comparisons, and it&#39;s reasonable that string comparisons could take a lot of time. But when I realised *how many* string comparisons each iteration of my code was doing, that&#39;s when I had a good idea where I was going wrong.</p>
<div class="post">[<em>Call counts were not available because the problem was at a client location. The client is probably not going to install a profiled build of your product into production just so you can get a performance trace. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1214131">
				<div id="div-comment-1214131" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151113-00/?p=92111#comment-1214131">
			November 13, 2015 at 7:59 am</a>		</div>

		<p>@Karellen: XPERF doesn&#39;t count number of passes of a code path. It counts number of timer interrupts that hit the particular path.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1214121">
				<div id="div-comment-1214121" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151113-00/?p=92111#comment-1214121">
			November 13, 2015 at 8:07 am</a>		</div>

		<p>There are different forms of profiling&#8230; passive (sampling) gets call stack when the sample occurs, but can&#39;t determine whether the function has exited and reentered, or never left. &nbsp;Active (instrumented) can deliver call counts and much more precise timing, but degrades performance more and has to be configured at build time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1214081">
				<div id="div-comment-1214081" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Sutherland</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151113-00/?p=92111#comment-1214081">
			November 13, 2015 at 9:57 am</a>		</div>

		<p>Karellen&#39;s comment reminded me of an early VB program I tuned. The original turned out to spent more than 99% of the CPU time on &#8230; updating the progress bar. Rather than an actual progress bar control, it was showing/hiding rectangles &#8211; and doing this on every pass through a very simple loop which ran thousands of times to perform the full calculation. Simply commenting out the progress bar update made the calculation fast enough it no longer needed a progress indicator &#8211; the results were displayed in under a second anyway!</p>
<p>In this particular case, a very brief sleep, or even just a scheduler yield, before or after each call to WaitForMultipleObjectSex would make a huge difference to CPU load: currently, it will be spending its entire timeslice chanting &quot;Are we there yet? No. Are we there yet? No. Are we there yet? No.&quot; before anything else gets to use that CPU core. If this is a single-thread CPU (not unlikely, if the story&#39;s a few years old), that&#39;ll destroy performance &#8230; in a worst-case scenario, if the other process is I/O bound, that one will be yielding each time it performs any I/O &#8211; letting this thread burn up almost all the available CPU, delaying the other by a full timeslice every time! Painful. (From the ~20%, I&#39;d suspect it might just be a four thread system, not quite so bad, but still lousy.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1214021">
				<div id="div-comment-1214021" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151113-00/?p=92111#comment-1214021">
			November 13, 2015 at 11:28 am</a>		</div>

		<p>&gt;commenting out the progress bar update made the calculation fast enough it no longer needed a progress indicator</p>
<p>That is genuinely hilarious. I guess the original author didn&#39;t ever try it without one first?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1214011">
				<div id="div-comment-1214011" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151113-00/?p=92111#comment-1214011">
			November 13, 2015 at 11:31 am</a>		</div>

		<p>@James Sutherland: I don&#39;t think WaitForMultipleObjectSex is an official Win32 API, that probably came from a third-party library ;) .</p>
<p>On-topic: Relatedly, <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/25/10014185.aspx">blogs.msdn.com/&#8230;/10014185.aspx</a> tells a similar tale, where the Explorer file copy dialog was optimized in Vista not to display every file name, because it was otherwise spending a lot of unnecessary time doing so (though probably not to quite the same extent as your VB program&#39;s task).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213991">
				<div id="div-comment-1213991" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151113-00/?p=92111#comment-1213991">
			November 13, 2015 at 12:36 pm</a>		</div>

		<p>&gt; That is genuinely hilarious. I guess the original author didn&#39;t ever try it without one first?</p>
<p>Not so far-fetched. You have a progress bar component that generally works well. You have an operation that &nbsp;appears to require a progress bar, so you use it (or maybe the operation is part of a common collection of operations where the progress bar is applied automatically, even though this operation is actually very fast). Hey, the operation seems slower than you think it ought to be? The last place you&#39;re going to look is in the trusted progress bar.</p>
<p>Alternative to the &quot;solution&quot; of not using the progress bar: monitor the progress percentage yourself, and only update the bar when some threshold differential is reached (1%? 5%?). Our progress bar does this automatically.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1213961">
				<div id="div-comment-1213961" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M Hotchin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151113-00/?p=92111#comment-1213961">
			November 13, 2015 at 1:40 pm</a>		</div>

		<p>Years ago, an internal product I worked on had a similar problem with its progress bars. &nbsp;We also disliked the times when the operation completed quickly, so the progress bar was just a flash.</p>
<p>After a few go-arounds, the solution we eventually came up with was</p>
<p> &#8211; after 1 second, show the progress bar if the operation is less that 50% complete</p>
<p> &#8211; update the progress bar once per second.</p>
<p>As it turns out, the product was a full call profiler, so determining that we were spending a lot of time updating the progress bar was not as difficult as for others &#8211; we&#39;d just run the call profiler *on* the call profiler, and see where we were spending all our time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213951">
				<div id="div-comment-1213951" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151113-00/?p=92111#comment-1213951">
			November 13, 2015 at 2:41 pm</a>		</div>

		<p>&gt; The original turned out to spent more than 99% of the CPU time on &#8230; updating the progress bar.</p>
<p>Sadly, this doesn&#39;t surprise me at all. &nbsp;Many years ago I submitted a trivial bugfix for the open-source Audacity project which address the exact same problem (it was ignored for several years, no idea if it ever made it in). &nbsp;The audio Normalize function would take several minutes to process a two-hour WAV file. &nbsp;I knew this was absurd, and investigating the source code showed that every time through the processing loop (which runs for *every* audio sample), it updated the progress bar. &nbsp;Commenting out that one line changed a 4 minute runtime to about 15 seconds.</p>
<p>Interacting with the UI (graphical or text) has always been an absurd performance killer. &nbsp;Nowadays I&#39;ve seen similar problems on websites which manipulate the DOM in a tight loop. &nbsp;Surprise, surprise, they&#39;re slow as frozen silly putty.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1213921">
				<div id="div-comment-1213921" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151113-00/?p=92111#comment-1213921">
			November 14, 2015 at 12:05 am</a>		</div>

		<p>I&#39;ve found one very effective way to get rid of sudden unexpected spikes in CPU usage. &nbsp;Run taskschd.msc, open up Task Scheduler Library | Microsoft | Windows | Application Experience, and delete AITAgent, Microsoft Compatibility Appraiser, and ProgramDataUpdater. &nbsp;Then in &#8230; | Customer Experience Improvement Program, delete all entries. &nbsp;Suddenly those unexplained, minutes-long spikes in CPU usage that make your laptop fan go crazy won&#39;t happen up any more.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213901">
				<div id="div-comment-1213901" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151113-00/?p=92111#comment-1213901">
			November 14, 2015 at 3:01 am</a>		</div>

		<p>This reminds me of several bugs in the original Firefox indeterminate progress meter implementation &#8211; for instance at one point the animation used for indeterminate progress meters was changed from a 10ms to a 20ms interval to reduce the CPU load. (Its determinate progress meters don&#39;t update themselves unless the value has changed by at least 4 to avoid problems with over-eager updates.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1213841">
				<div id="div-comment-1213841" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151113-00/?p=92111#comment-1213841">
			November 16, 2015 at 7:36 am</a>		</div>

		<p>@Raymond: Karellen&#39;s comment is still valid. &nbsp;True, &quot;Call counts were not available because the problem was at a client location&quot;. &nbsp;But if the profiler showed call counts as well as timings, that certainly would be useful in this, and many other, kinds of traces.</p>
<div class="post">[<em>But the profiler <span style="text-decoration:underline;">can&#39;t</span> show call counts because the program being profiled wasn&#39;t compiled with call counts enabled. &quot;This might be a time where it would be useful to have a time machine.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213741">
				<div id="div-comment-1213741" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151113-00/?p=92111#comment-1213741">
			November 17, 2015 at 1:26 am</a>		</div>

		<p>Of course the great thing about having a time machine is that it doesn&#39;t matter if you have it at the wrong time.</p>
<p>But this reminded me of something that happened with an algorithm I was building as part of my PhD research. Details aren&#39;t important but it generated a lot of (lightweight graphical) objects and then started merging them. Initially, I had it set up so that when it merged two objects it would redraw them and update an on-screen counter. It turned out that in the first phase of merging, the merge calculations were sufficiently light that it was spending most of its time updating the counter and redrawing. After I took that out, it looked odd to see everything freeze for a while and then the count suddenly drop, but it ran a lot faster :) (Subsequent phases were heavier on the calculation and leaving the updates in for the rest of the process was OK.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>