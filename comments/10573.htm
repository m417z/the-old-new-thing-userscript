<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (35)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-915023">
				<div id="div-comment-915023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915023">
			May 25, 2011 at 7:19 am</a>		</div>

		<p>I think you mean &quot;stack buffer overrun detection&quot;, not &quot;stack overflow detection&quot;. Stack overflow detection is a completely different problem, which isn&#39;t always even possible if you try to allocate such a ridiculously large amount of stack data (e.g. an enormous array) such that the stack pointer moves far beyond the maximum possible amount of stack space and into an otherwise valid piece of memory.</p>
<div class="post">[<i>Fixed, thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915033">
				<div id="div-comment-915033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JoeG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915033">
			May 25, 2011 at 7:21 am</a>		</div>

		<p>The latest version of Visual Studio ships with the source to the C++ runtimes, so you can go take a look at what&#39;s happening in between the entry point and WinMain. It&#39;s pretty interesting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915043">
				<div id="div-comment-915043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915043">
			May 25, 2011 at 8:22 am</a>		</div>

		<p>@Adam: it actually does detect that in 64 bit. There is an assembly routine that gets called during function prologue if you have more than 4k of automatic variables that grows the stack via writing one byte every 4k from the old top of stack to the new.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915053">
				<div id="div-comment-915053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915053">
			May 25, 2011 at 8:24 am</a>		</div>

		<p>@Joshua: 32-bit does that too. The reason being that the stack is commited dynamically as you use it, even on 32-bit, so you have to touch the pages in order so the stack gets committed anyway. Of course that is really a compiler feature, not an OS feature &#8211; there is nothing to stop you doing add esp, [Big Number]; push eax; &#8211; that overflow may not be detected.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915063">
				<div id="div-comment-915063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915063">
			May 25, 2011 at 8:37 am</a>		</div>

		<p>@Joshua, @S</p>
<p>Raymond wrote a blog post some time ago about that mechanism, in describing the problem with checking pointers to see if they pointed to valid space. (I don&#39;t recall enough detail to easily find the URL, though)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915073">
				<div id="div-comment-915073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915073">
			May 25, 2011 at 8:59 am</a>		</div>

		<p>@Mike:</p>
<p>I believe the post you&#39;re thinking of is <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2006/09/27/773741.aspx" rel="nofollow">blogs.msdn.com/&#8230;/773741.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915083">
				<div id="div-comment-915083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915083">
			May 25, 2011 at 9:03 am</a>		</div>

		<p>@Mike,</p>
<p>IIRC, the conclusion to that series was that yes you could do that, but if you ever get an invalid buffer, your program has experienced a severe programming error and the only safe thing to do is crash anyway (possibly logging on the way out). &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915103">
				<div id="div-comment-915103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915103">
			May 25, 2011 at 9:24 am</a>		</div>

		<p>The nice thing about</p>
<p>&nbsp; &nbsp;DWORD CALLBACK RawEntryPoint(void);</p>
<p>is that it is equivalent to the C standard</p>
<p>&nbsp; &nbsp;int main(void);</p>
<p>(except for the signed/unsigned difference which doesn&#39;t matter in ExitThread). The difference in calling conventions is irrelevant because of the empty argument list.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915113">
				<div id="div-comment-915113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915113">
			May 25, 2011 at 9:39 am</a>		</div>

		<p>@Falcon, SimonRev: Indeed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915123">
				<div id="div-comment-915123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915123">
			May 25, 2011 at 9:46 am</a>		</div>

		<p>@rs:</p>
<p>Except it&#39;s different calling convention, which may or may not matter. For IA64 it might.</p>
<p>Also, main() is not an actual raw entry point anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915133">
				<div id="div-comment-915133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915133">
			May 25, 2011 at 9:55 am</a>		</div>

		<p>@rs</p>
<p>Constructor invocations and other static initialization take place before main() starts. From Raymond&#39;s article, that takes place after RawEntryPoint().</p>
<p>So no, they really aren&#39;t equivalent.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915143">
				<div id="div-comment-915143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915143">
			May 25, 2011 at 10:21 am</a>		</div>

		<p>I thought this title sounded familiar!</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2006/12/04/1205831.aspx" rel="nofollow">blogs.msdn.com/&#8230;/1205831.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915153">
				<div id="div-comment-915153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Humus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915153">
			May 25, 2011 at 10:49 am</a>		</div>

		<p>One actual use of defining your own custom entry point is for 1K or 4K demos, because all the cruft for startup and tear down takes about 20-30KB.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915163">
				<div id="div-comment-915163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915163">
			May 25, 2011 at 10:56 am</a>		</div>

		<p>I&#39;ve actually used the raw entry point before when not linking against any libc. I didn&#39;t know what it was called or what arguments, so declared and called it WinMain, ignored the parameters, and called ExitProcess at the bottom.</p>
<p>The linker is very nice and requires the entry point to exist and if none is declared it uses the first symbol in the first object file provided.</p>
<p>Since I wasn&#39;t using libc I didn&#39;t need its startup code to run.</p>
<p>@Mike: You know about the guard page at top of stack right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915173">
				<div id="div-comment-915173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915173">
			May 25, 2011 at 11:37 am</a>		</div>

		<p>&gt; Why isn&#39;t it called main?</p>
<p>&gt; [Because that name was already taken. I can&#39;t believe I had to write that. -Raymond]</p>
<p>main() isn&#39;t an entry point in gui programs. main() could have been used.</p>
<div class="post">[<i>The name main() is reserved by the standard. The underlined text is missing from the standard: &quot;5.1.2.2.1.2 The parameters to the <code>main</code> function shall obey the following constraints, <span style="text-decoration:underline;">unless it&#39;s a GUI program, in which case the following rules do not apply</span>.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915183">
				<div id="div-comment-915183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915183">
			May 25, 2011 at 11:53 am</a>		</div>

		<p>@640K</p>
<p>See the link Richard posted (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2006/12/04/1205831.aspx" rel="nofollow">blogs.msdn.com/&#8230;/1205831.aspx</a>), and in particular mikeb&#39;s speculation and Tom_&#39;s comment. That page has a lot of discussion about main vs WinMain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915193">
				<div id="div-comment-915193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915193">
			May 25, 2011 at 12:06 pm</a>		</div>

		<p>I think I posted this before and it ate my comment.</p>
<p>Is the raw entry point WinMainCrtStartup [or whichever], or is it literally called RawEntryPoint, or is it called something else, and what&#39;s the relationship between it and WinMainCrtStartup if it&#39;s not the same? What is __ImageBase? If it&#39;s not actually called RawEntryPoint, how do you tell the compiler that some function you provide is meant to be the raw entry point?</p>
<div class="post">[<i><code>RawEntryPoint</code> is a placeholder name. The operating system doesn&#39;t know what name you called your entry point function. It just calls the function whose address is given in the PE header as <a href="http://msdn.microsoft.com/en-us/library/f9t8842e.aspx" rel="nofollow">the entry point</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915203">
				<div id="div-comment-915203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tergiver</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915203">
			May 25, 2011 at 12:15 pm</a>		</div>

		<p>@Random832: You tell the linker (not the compiler) what the &quot;raw entry point&quot; is. The linker is defaulted to some compiler-specific runtime library method (like WinMainCrtStartup) if you don&#39;t change it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915213">
				<div id="div-comment-915213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915213">
			May 25, 2011 at 12:40 pm</a>		</div>

		<p>Random832:</p>
<p>In addition to what Tergiver said, the linker checks the type of application, console or GUI, then links in the correct startup object, one. There are 4 in total for user mode applications, mainCrtStartup, wmainCrtStartup, WinMainCrtStartup and wWinMainCrtStartup. If there is no entry point entry in the linker options, it links in one of those and then puts that as the entry point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915223">
				<div id="div-comment-915223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">avakar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915223">
			May 25, 2011 at 1:27 pm</a>		</div>

		<p>Isn&#39;t the entry pointer actually called with a single parameter pointing to the PEB?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915233">
				<div id="div-comment-915233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [Visual C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915233">
			May 25, 2011 at 2:11 pm</a>		</div>

		<p>The documentation ( <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/f9t8842e(v=VS.90).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/f9t8842e(v=VS.90).aspx</a> ) describes a different signature:</p>
<p>&quot;The /ENTRY option specifies an entry point function as the starting address for an .exe file or DLL.</p>
<p>The function must be defined with the __stdcall calling convention. The parameters and return value must be defined as documented in the Win32 API for WinMain (for an .exe file) or DllEntryPoint (for a DLL).&quot;</p>
<p>Newer versions of the documentation instead say &quot;The parameters and return value depend on if the program is a console application, a windows application or a DLL.&quot;</p>
<p>Of course, not using any parameters and not returning is safest, because then the calling convention doesn&#39;t matter. &nbsp;Your code doesn&#39;t care about the stack layout when it starts, and the caller doesn&#39;t get a chance to care about the stack layout after your function runs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915243">
				<div id="div-comment-915243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florian Kruegel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915243">
			May 25, 2011 at 2:15 pm</a>		</div>

		<p>So WinMain doesn&#39;t really exist from the operating system point of view; it&#39;s a C runtime library callback function provided by Visual C++. I don&#39;t quite understand why it&#39;s documented as an API callback function then (the current documentation has some hints in the right direction, but I remember that previous versions of the documentation clearly implied that WinMain was an API callback function).</p>
<p>As I understand it, WinMain used to be an API callback function in Windows 3. As you said, for compatibility the hPrevInstance parameter was retained, even though it no longer does anything. So this has to be entirely about source code compatibility.</p>
<p>In my eyes, along the introduction of Windows 95, WinMain should have been deleted from the documentation (or marked as obsolete), but retained in the header files for source code compatibility. Instead the raw entry point should have been documented (together with the remark that code for it is usually provided by runtime libraries). Then maybe runtime libraries could have implemented improved startup code that calls extended versions of WinMain, for example, to provide advanced command line parsing like it&#39;s done for main. Is there a specific reason why this route was not followed?</p>
<p>In a similar spirit, Structured Exception Handling does not seem to be documented from the operating system point of view; only how you access it from Visual C++.</p>
<div class="post">[<i>As I noted in the linked article, WinMain was a conventional name even in 16-bit Windows. And the runtime libraries have already done what you suggest (for example, wWinMain). But removing WinMain from the MSDN docs would be counterproductive. Most people who read MSDN are not compiler writers. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915253">
				<div id="div-comment-915253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert W.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915253">
			May 25, 2011 at 5:02 pm</a>		</div>

		<p>In &quot;Programming Applications for Microsoft Windows 4th Edition&quot; Jeffrey Richter states (p197) that BaseProcessStart looks something like this:</p>
<p>VOID BaseProcessStart(PPROCESS_START_ROUTINE pfnStartAddr) {</p>
<pre><code>__try {

    ExitThread((pfnStartAddr)());

}

__except(UnhandledExceptionFilter(GetExceptionInformation())) {

    ExitProcess(GetExceptionCode());

}

// NOTE: We never get here.
</code></pre>
<p>}</p>
<p>This is completely consistent with Raymond&#39;s post.</p>
<p>However in the next edition &quot;Windows via C/C++ 5th Edition&quot; Richter has a revised description, stating that a process&#39; primary thread begins in the same function as a secondary thread. He states (p157) that this function RtlUserThreadStart basically does the following:</p>
<p>VOID RtlUserThreadStart(PTHREAD_START_ROUTINE pfnStartAddr, PVOID pvParam) {</p>
<pre><code>__try {

    ExitThread((pfnStartAddr)(pvParam));

}

__except(UnhandledExceptionFilter(GetExceptionInformation())) {

    ExitProcess(GetExceptionCode());

}

// NOTE: We never get here.
</code></pre>
<p>}</p>
<p>If this is indeed where the primary thread starts executing, then the situation is that the raw entry point is passed a pointer-sized parameter, but its value is undefined.</p>
<p>I wonder why Richter changed the description in the 5th Edition. It could just have been an editorial decision to save space (by avoiding discussing the primary thread start function separately from the secondary thread start function). Maybe he was happy to gloss over the pvParam parameter inconsistency. Or maybe he was reflecting a change made in more recent versions of Windows?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915263">
				<div id="div-comment-915263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915263">
			May 25, 2011 at 8:25 pm</a>		</div>

		<p>Robert:</p>
<p>Process start is different from a thread start. A process start just starts the process and starts executing at the entry point in the executable header. A thread start occurs as a result to CreateThread or similar, and if you look at the signature, is identical to the ThreadProc callback function (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms686736(VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms686736(VS.85).aspx</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-915273">
				<div id="div-comment-915273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915273">
			May 25, 2011 at 9:41 pm</a>		</div>

		<blockquote><p>
  For IA64 it might.
</p></blockquote>
<p>IA64 and x64 only have a single calling convention unlike x86.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915303">
				<div id="div-comment-915303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915303">
			May 26, 2011 at 12:56 am</a>		</div>

		<p>@Yuhong Bao:</p>
<p>The AMD64 hardware does not actually impose any calling convention specifics at all. Note the differences between Microsoft&#39;s and Apple&#39;s (aka BSD) AMD64 conventions.</p>
<p>We are merely lucky that others havent imposed themselves.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915313">
				<div id="div-comment-915313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915313">
			May 26, 2011 at 4:07 am</a>		</div>

		<p>In 16-bit windows you could bypass most of the CRT by linking in the stub library snocrtw. My smallest useful Win16 executable was 608 bytes, but I hadn&#39;t checked for obscure options that might have reduced this further.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915323">
				<div id="div-comment-915323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915323">
			May 26, 2011 at 4:49 am</a>		</div>

		<p>&gt; [The name main() is reserved by the standard. The underlined text is missing from the standard: &quot;5.1.2.2.1.2 The parameters to the main function shall obey the following constraints, unless it&#39;s a GUI program, in which case the following rules do not apply.&quot; -Raymond]</p>
<p>You could have implemented the standard main() for gui programs. You could have implemented command args parser, just as console program do, you already got the code in your compiler! But you dont want to, you don&#39;t want portable code. There&#39;s your real problem.</p>
<div class="post">[<i>If you&#39;ve decided to #include &lt;windows.h&gt; you&#39;ve already accepted that you&#39;re writing code that&#39;s not portable to non-Windows systems. Last time I checked, windows.h is not part of the C standard. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915333">
				<div id="div-comment-915333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915333">
			May 26, 2011 at 5:32 am</a>		</div>

		<p>@640k: Raymond already explained that portable code takes memory. And with a screen name like yours, you of all people should know how memory was important back then.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915343">
				<div id="div-comment-915343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915343">
			May 26, 2011 at 5:47 am</a>		</div>

		<p>@640k</p>
<blockquote><p>
  You could have implemented the standard main() for gui programs. [&#8230;] But you dont want to, you don&#39;t want portable code.
</p></blockquote>
<p>Look, everyone, here&#39;s someone who talks about Windows GUI code portability. Ha-ha-ha!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915403">
				<div id="div-comment-915403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915403">
			May 26, 2011 at 9:21 am</a>		</div>

		<p>@640K: You also ignored my post, pointing you to discussions about how at least old programs probably had a (standard) main() function that set things up then dispatched to WinMain(). This was so they could do something reasonable under DOS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915443">
				<div id="div-comment-915443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915443">
			May 26, 2011 at 11:05 am</a>		</div>

		<p>main could have been used instad of WinMain. Not instead of RawEntryPoint.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915453">
				<div id="div-comment-915453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915453">
			May 26, 2011 at 11:12 am</a>		</div>

		<p>@Medinoc: Raymond already explained that portable code takes memory. And with a screen name like yours, you of all people should know how memory was important back then.</p>
<p>Calling the application source code entry point main instead of WinMain takes no more memory than for console apps, it should take less in fact.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-915513">
				<div id="div-comment-915513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pawel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915513">
			May 27, 2011 at 3:17 am</a>		</div>

		<p>This is very good when a small utility application with window need to be created.</p>
<p>The raw entry point I used is:</p>
<p>void main ( void )</p>
<p>{</p>
<pre><code>ExitProcess(DialogBox(GetModuleHandle(NULL),MAKEINTRESOURCE(IDD_APP),NULL,DialogProc));
</code></pre>
<p>}</p>
<p>And the executable file size in Release mode is 3KB, or less if I remove program icon, which is included in the resource.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-915973">
				<div id="div-comment-915973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110525-00/?p=10573#comment-915973">
			May 30, 2011 at 3:15 pm</a>		</div>

		<p>@640k:</p>
<blockquote><p>
  You could have implemented the standard main() for</p>
<p>  gui programs. You could have implemented command args</p>
<p>  parser, just as console program do, you already got</p>
<p>  the code in your compiler!
</p></blockquote>
<p>There&#39;s nothing stopping you from writing a program that uses main() with argc and argv, that creates windows and runs a message loop, and linking it as a SUBSYTEM:WINDOWS application. &nbsp;You can even change the SUBSYSTEM type on an existing &nbsp;binary with editbin.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>