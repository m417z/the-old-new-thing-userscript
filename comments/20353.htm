<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-679463">
				<div id="div-comment-679463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-679463">
			November 3, 2008 at 10:21 am</a>		</div>

		<p>In other words, like with any method on an interface, you may only call AddRef if you own a reference to the interface.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-679533">
				<div id="div-comment-679533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jeffcode.blogspot.com' rel='external nofollow' class='url'>jeffdav</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-679533">
			November 3, 2008 at 11:48 am</a>		</div>

		<p>Considering that the vast majority of COM objects are STA anyway, it seems to me that using the Interlocked functions for those objects is a waste since you should not be calling the IUnknown methods from different threads (unless you marshal, in which case access will be serialized and you still don&#8217;t need atomic inc/dec).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-679573">
				<div id="div-comment-679573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-679573">
			November 3, 2008 at 12:48 pm</a>		</div>

		<p>Serialization through STA doesn&#8217;t help in this case. &nbsp;The fundamental problem is that you have two threads &quot;simultaneously&quot; accessing an object with a refcount of 1, and one of the threads is calling IUnknown::Release(). &nbsp;Depending on which call is executed first, either nothing will go wrong or you will crash:</p>
<p>TID1: p-&gt;AddRef(); // refcount = 2</p>
<p>TID2: p-&gt;Release(); // refcount = 1; ok, object is still alive</p>
<p>TID1: p-&gt;Release(); // refcount = 0, object is deleted</p>
<p>TID2: p-&gt;AddRef(); // crash, object has been deleted</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-679613">
				<div id="div-comment-679613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-679613">
			November 3, 2008 at 3:00 pm</a>		</div>

		<p>If you release an object and have not addref&#8217;ed it before (and TID2 did not), it may be already deleted. Bug in the program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-679633">
				<div id="div-comment-679633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-679633">
			November 3, 2008 at 4:48 pm</a>		</div>

		<p>&quot;using the Interlocked functions for those objects is a waste&quot;</p>
<p>That&#8217;s true, but I think you&#8217;ll struggle to measure the cost. The interlocked APIs generally boil down to compiler intrinsics and on x86 that basically means exactly the same code as the naive implementation but with a carefully chosen LOCK prefix on one of the instructions.</p>
<p>On the other hand, accidentally using the non-interlocked version for a non-STA object is an accident waiting to happen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-679693">
				<div id="div-comment-679693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">orcmid</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-679693">
			November 3, 2008 at 8:03 pm</a>		</div>

		<p>This reminds me of the companion bug which is in lots of code. &nbsp;Even if you use an interlocked decrement in Iunknown:Release, it sort of breaks everything if you then return the reference counter when finding out you are not the last releaser. &nbsp;Because it could have been release behind you and you used an invalid this pointer. &nbsp;I figure there must be just a few of those actually happening every day.</p>
<p>[See all those MSDN and Inside COM examples where the Release implementation returns m_cref after it tests non-zero in the preceding decrement operation.]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-679723">
				<div id="div-comment-679723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">orcmid</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-679723">
			November 3, 2008 at 8:19 pm</a>		</div>

		<p>The only implementation code that should ever use the interface (and the related this pointer) after decrementing in IUnknown:Release is the code that witnessed the reference counter becoming zero.</p>
<p>That is the only code for which the this pointer is assured to still be valid assuming all AddRef and QueryInterface invocations only use still-valid interface pointers.</p>
<p>Based on prevalent examples, there may be a lot of code around that breaks that rule.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-679743">
				<div id="div-comment-679743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-679743">
			November 3, 2008 at 11:51 pm</a>		</div>

		<p>@Dennis: you are referring to this?</p>
<p>STDMETHODIMP_(ULONG) CFoo::Release()</p>
<p>{</p>
<p> &nbsp; &nbsp;if (!::InterlockedDecrement(&amp;m_cRef))</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; delete this;</p>
<p> &nbsp; &nbsp;return m_cRef; // Bug?</p>
<p>}</p>
<p>Thread 1: InterlockedDecrement(), return 1</p>
<p>Thread 2: InterlockedDecrement(), return 0</p>
<p>Thread 2: InterlockedDecrement(), delete this</p>
<p>Thread 1: return *this-&gt;*m_cref</p>
<p>This is *technicly* a bug, but is very unlikely to manifest without some fancy allocation of your object, since the this pointer is actual local to each call, and not modified by thread 2.</p>
<p>I can see this causing an actual problem in two cases, thread 1 returns 0, not one, so both callers of Release() handle it&#8217;s deallocation, or if this was the last allocation in a page and the heap VirtualFree()s it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-679783">
				<div id="div-comment-679783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-679783">
			November 4, 2008 at 4:15 am</a>		</div>

		<p>Denis, Simon, isn&#8217;t it amazing how many broken examples exist? To the benefit of writers of such code, such things were less dangerous before prevalence of SMP machines. But today, it really is dangerous.</p>
<p>Indeed, e.g. ATL does the right thing (goes through a temporary value, *not* through a member variable). And with correct increment/decrement primitive, too!</p>
<p>COM is way too complicated for the basics to be written (over and over again) by mortals like me :-(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-679793">
				<div id="div-comment-679793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christian Kaiser</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-679793">
			November 4, 2008 at 5:39 am</a>		</div>

		<p>&quot;This is *technicly* a bug, but is very unlikely to manifest without some fancy allocation of your object, &#8230;&quot;</p>
<p>Well, in my DEBUG code, delete() will overwrite the memory area, thus m_cref becoming 0xcdcdcdcd (or whatever the code uses to overwrite the area). This is done purposely.</p>
<p>Nope, this behaviour (a memory area is still valid after being freed) should never be relied on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-680323">
				<div id="div-comment-680323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-680323">
			November 4, 2008 at 11:52 pm</a>		</div>

		<p>@Christian: That will still work, though.</p>
<p>The only meaningful results from Release() are</p>
<p>0 (You just deleted me) and non-0 (You didn&#8217;t delete me, but you can still access me), and the freed data value (0xfeeefeee, I think: 0xcdcdcdcd is un-initialised) is correctly non-0.</p>
<p>And I never said you should *rely* on it :).</p>
<div class="post">[<i>Um, no, that&#8217;s what a non-zero return value means. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-680713">
				<div id="div-comment-680713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-680713">
			November 5, 2008 at 8:10 pm</a>		</div>

		<p>It is absolutely a bug to refer to m_anything after &quot;delete this&quot;.</p>
<p>It is absolutely not a bug to take action based on Release() returning 0.</p>
<p>It is very probably a bug to take action based on Release() returning non-zero, because it is usually possible that all the other holders of references to the object could simulateously decide to release their references in between you saying &quot;hey, look, there are outstanding references to this object&quot; and &quot;&#8230; so that means I can&#8230;&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-680723">
				<div id="div-comment-680723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-680723">
			November 5, 2008 at 8:15 pm</a>		</div>

		<blockquote><p>
  It is absolutely a bug to refer to m_anything after &quot;delete this&quot;.
</p></blockquote>
<p>Even this is a bug:</p>
<p>STDMETHODIMP_(ULONG) CFoo::Release()</p>
<p>{</p>
<p>&nbsp; if (!::InterlockedDecrement(&amp;m_cRef))</p>
<p>&nbsp; {</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;delete this;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;return 0;</p>
<p>&nbsp; }</p>
<p>&nbsp; return m_cRef; // Bug? Yup.</p>
<p>}</p>
<p>&#8230; because the object could be deleted on a different thread after the if (&#8230;) but before the &quot;return m_cRef;&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-680853">
				<div id="div-comment-680853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kujo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-680853">
			November 6, 2008 at 12:01 pm</a>		</div>

		<p>Ah, code that supports 9x. &nbsp;Nowadays, you&#8217;d trust the return value of InterlockedDecrement:</p>
<p>LONG ret = ::InterlockedDecrement(&amp;m_cRef);</p>
<p>if ( !ret )</p>
<p>{</p>
<p>&nbsp;delete this;</p>
<p>&nbsp;return 0;</p>
<p>}</p>
<p>return ret;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681123">
				<div id="div-comment-681123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">orcmid</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-681123">
			November 6, 2008 at 7:35 pm</a>		</div>

		<p>So now the question is, since the return value is defined to be unpredictable anyhow, why not do something as simple as</p>
<p>{</p>
<p>&nbsp;if (!::InterlockedDecrement(&amp;m_cRef))</p>
<p>&nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; delete this;</p>
<p>&nbsp; &nbsp; &nbsp; return 0;</p>
<p>&nbsp;}</p>
<p>&nbsp;return 1; // or ~0 or anything handy not 0</p>
<p>Especially, since any returned value of the decremented m_cRef refers to a state of the world that is not assured to exist by the time the return happens.</p>
<p>All it tells you now is that your thread did the final release or it did not. &nbsp;</p>
<p>The only way you can count on even that is if your code is based on knowledge of how the implementation of Release behind the interface was done. &nbsp;</p>
<p>I can imagine an use for that in custom factory code, but haven&#8217;t tried it. &nbsp;I should. &nbsp;It might eliminate some convolutions in COM-implementing code of mine that I tend to worry about. &nbsp;The code is in need of serious refactoring anyhow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681223">
				<div id="div-comment-681223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-681223">
			November 7, 2008 at 6:06 am</a>		</div>

		<p>At what point is the bug no longer &#8216;yours&#8217; ?</p>
<p>Perhaps the author of InterlockedDecrement had the same mentality as you.</p>
<p>In that case, IUnknown::Release introduces the bug, not my code that uses IUnknown::Release &#8216;incorrectly&#8217;.</p>
<p>Don&#8217;t like that scenario ?</p>
<p>Ok, so , the author of InterlockedDecrement then relies upon the CPU to do it&#8217;s locking correctly, but wait, it&#8217;s multi-core, what if the other core is about to adjust the same lock. &nbsp;And so on, and so on.</p>
<p>You&#8217;re right, you already have a bug, and you&#8217;ll never find it, you can only prey it doesn&#8217;t kill people.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681963">
				<div id="div-comment-681963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081103-00/?p=20353#comment-681963">
			November 10, 2008 at 2:56 am</a>		</div>

		<p>Yeah&#8230; resurrecting a week-old thread is bad. Sorry I&#8217;m late.</p>
<p>[Um, no, that&#8217;s what a non-zero return value means. -Raymond]</p>
<p>Huh? 0 means &#8220;This Release() call deleted the object&#8221;, and non-0 means it wasn&#8217;t (but don&#8217;t go poking, it could be deleted by someone else), right? So what is the &#8216;that&#8217; in your reply? (I beleive my previous meaning for non-0 was misstated, sorry about the confusion).</p>
<p>Oh, and I seem to have been unclear about this: yes, it *is* a bug. I just don&#8217;t think a real application could get it to manifest (ie: crash).</p>
<div class=post>[<i>Your original description of a non-zero return value was &#8220;You didn&#8217;t delete me, but you can still access me.&#8221; You still can&#8217;t access it because it could be deleted by somebody else. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>