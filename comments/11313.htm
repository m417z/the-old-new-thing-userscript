<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-898913">
				<div id="div-comment-898913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-898913">
			March 3, 2011 at 7:43 am</a>		</div>

		<p>You mean &quot;the call to ReadFile was bypassed&quot; not &quot;the call to ReadFileEx&quot;. GetOverlappedResult doesn&#39;t work in pair with ReadFileEx at all.</p>
<div class="post">[<i>Fixed, thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-898923">
				<div id="div-comment-898923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-898923">
			March 3, 2011 at 8:31 am</a>		</div>

		<p>Nice one! Normally its a good idea to check your assumptions. This customer didn&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-898943">
				<div id="div-comment-898943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">blah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-898943">
			March 3, 2011 at 9:05 am</a>		</div>

		<p>Musta been a junior coder. How could a read operation ever fail?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-898953">
				<div id="div-comment-898953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">davep</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-898953">
			March 3, 2011 at 9:33 am</a>		</div>

		<p>&quot;Nice one! Normally its a good idea to check your assumptions. This customer didn&#39;t.&quot;</p>
<p>Well, at least they commented about their assumptions. (The comment was a help in figuring out the problem.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-898983">
				<div id="div-comment-898983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-898983">
			March 3, 2011 at 2:14 pm</a>		</div>

		<p>Is there any benefit of issue-async-I/O and wait-in-the-same-thread over just-perform-sync-I/O?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899013">
				<div id="div-comment-899013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-899013">
			March 3, 2011 at 4:35 pm</a>		</div>

		<p>Tihiy:</p>
<p>The samples where they are waiting in the same thread is often just a simplification. In real world apps, you would use completion ports or async io and then do other things while checking occasionally, or put the io onto a seperate thread. Samples are always meant to illustrate the issue, not provide a real life usage since real life usage is much more complex and would distract people from what they are meant to be looking at. But as you noted, there is no benefit to start an async operation and wait.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-899023">
				<div id="div-comment-899023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-899023">
			March 3, 2011 at 5:36 pm</a>		</div>

		<p>Totally off-topic but here is a youtube video showing someone upgrading from MS-DOS 5.0 through every version of Windows up to Windows 7. Applications that are twenty years old still work! <a rel="nofollow" target="_new" href="http://www.youtube.com/watch?v=vPnehDhGa14" rel="nofollow">http://www.youtube.com/watch</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899033">
				<div id="div-comment-899033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-899033">
			March 3, 2011 at 5:44 pm</a>		</div>

		<p>There are a few common scenarios for issuing an async I/O and waiting in the same thread. The most obvious is when you want to time out or otherwise cancel the operation. Prior to Vista there was no way to cancel a synchronous I/O, so if you wanted to cancel an I/O (because the user wanted to cancel or the operation timed out) you had to make it async.</p>
<p>The other common reason is that you have to do some I/O and a computation. You start the I/O, perform your computation, then wait for the I/O to complete so that you can continue with the result of the I/O.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-898993">
				<div id="div-comment-898993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Koro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-898993">
			March 3, 2011 at 3:08 pm</a>		</div>

		<p>&quot;Is there any benefit of issue-async-I/O and wait-in-the-same-thread over just-perform-sync-I/O?&quot;</p>
<p>Well for starters you are not limited to waiting *only* on that, you can wait on multiple operations at once, or wait for some cancellation event as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899043">
				<div id="div-comment-899043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-899043">
			March 4, 2011 at 2:41 am</a>		</div>

		<p>Surely it must be a source of confusion to use ERROR_IO_PENDING to indicate that the I/O was successfully initiated?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-899053">
				<div id="div-comment-899053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-899053">
			March 4, 2011 at 5:39 am</a>		</div>

		<blockquote><p>
  Surely it must be a source of confusion to use ERROR_IO_PENDING to</p>
<p>  indicate that the I/O was successfully initiated?
</p></blockquote>
<p>Perhaps, but it&#39;s less clumsy than having two outputs, one to say whether the call was successful and another to say whether the I/O had never been started, had finished, or was ongoing.</p>
<p>The real trouble is that Win32 has only one way to say &#39;success&#39;. &nbsp;In the I/O system, &#39;pending&#39; is not an error but an alternative success status.</p>
<p>Well, that and the naming convention that gives us &#39;ERROR_SUCCESS&#39; ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899123">
				<div id="div-comment-899123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-899123">
			March 4, 2011 at 10:02 am</a>		</div>

		<p>The title, for English majors: &quot;Before you start waiting for Godot, make sure Godot is actually on his way.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>