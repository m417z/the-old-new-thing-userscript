<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-354373">
				<div id="div-comment-354373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354373">
			March 14, 2006 at 10:18 am</a>		</div>

		<p>But this solution still doesn&#8217;t scale up when adding CPUs. &nbsp;;-)</p>
<p>(The fix would be fairly simple: &nbsp;Figure out the number of &quot;open&quot; CPUs and amount of available memory at runtime, then figure out how many tasks can run in your available memory, and finally limit the total number of running tasks to min(NR_CPUs, NR_tasks_from_mem).)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-354403">
				<div id="div-comment-354403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Coderjoe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354403">
			March 14, 2006 at 10:45 am</a>		</div>

		<p>BryanK:</p>
<p>Raymond already mentioned your fix. In his example case, he found your NR_CPUs was 4 and NR_tasks_from_mem was 5. 4 was the lower of the two, so the example limited it to 4 work item threads at a time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354423">
				<div id="div-comment-354423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Swaim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354423">
			March 14, 2006 at 11:01 am</a>		</div>

		<p>&nbsp;It&#8217;s also possible do find the sweet spot experimentally. I was on a project that involved writing a LOT of data to an (Oracle) SQL Server. We knew that the server had multiple CPUs, but didn&#8217;t know how many were available. (Other things affected performance such as network and disk bandwidth, too.) We found our sweet spot writing 10,000 records between commits, using 7 threads.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-354453">
				<div id="div-comment-354453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354453">
			March 14, 2006 at 11:33 am</a>		</div>

		<p>Why not use a counting semaphore for this? That&#8217;s how I solved a similar problem without requiring a central resource allocation thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354483">
				<div id="div-comment-354483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354483">
			March 14, 2006 at 11:40 am</a>		</div>

		<p>BryanK: Urgh.</p>
<p>Figuring it out at runtime and then using all available resources is OK in this situation when, as Raymond mentioned, it&#8217;s a standalone system.</p>
<p>As a general solution, that&#8217;s horrible.</p>
<p>If it&#8217;s running on any kind of serious server with multiple services running (and your most powerful servers, which are the ones you&#8217;ll want to use for this sort of job, will probably be so tasked) then figuring out how parallel to be should probably be a choice for the user or admin.</p>
<p>I may not want the process sucking up all 4 cpus or all the physical RAM in the machine if there&#8217;s other stuff that I&#8217;d like to run with &quot;reasonable&quot; responsiveness. Especially if there are other large jobs that other users may be running at the same time. </p>
<p>Also, on a HT machine, trying to run 4 threads simultaneously might give you worse performance than running 2 at a time due to shared cpu caches (especially if the threads each have a 180Mb working set!)</p>
<p>On a virtualised OS, things could be even more weird with regards to the resources the VM actually has (and what other things are competing for them) and how much it reports it has.</p>
<p>There&#8217;s a reason that &quot;make&quot; takes a &quot;-j n&quot; option for parallelisability instead of figuring it out itself, and it&#8217;s not just because it&#8217;s easier to write that way!</p>
<p>:)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-354523">
				<div id="div-comment-354523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ilya</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354523">
			March 14, 2006 at 1:02 pm</a>		</div>

		<p>Raymond, I&#8217;m surprised you&#8217;re not recommending NT&#8217;s thread pool as the solution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354543">
				<div id="div-comment-354543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354543">
			March 14, 2006 at 1:11 pm</a>		</div>

		<p>A thread pool is not a solution, it is one possible implementation of a solution. &nbsp;The problem here is to figure out how to efficiently divide up the work at a relatively high level, not the nitty-gritty about wether to use thread pools or semaphores or whatever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-354563">
				<div id="div-comment-354563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354563">
			March 14, 2006 at 1:25 pm</a>		</div>

		<p>The thread pool is poorly-suited for this scenario; it&#8217;s designed for a collection of independent short-duration tasks. The problem here is at a much higher level.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354633">
				<div id="div-comment-354633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RevMike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354633">
			March 14, 2006 at 2:37 pm</a>		</div>

		<p>We did this very easily under VMS using job queues. &nbsp;I&#8217;ve always wondered why so-called more advanced OSes don&#8217;t provide this fundamental capability.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-354763">
				<div id="div-comment-354763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354763">
			March 14, 2006 at 5:50 pm</a>		</div>

		<p>Raymond, could you elaborate on why a thread pool is &quot;poorly-suited&quot; here? &nbsp;It&#8217;s definitely the first thing that came to my mind &#8212; in the case where you have plenty of ram, make a pool with nthreads = nprocs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354773">
				<div id="div-comment-354773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A Tykhyy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354773">
			March 14, 2006 at 6:02 pm</a>		</div>

		<p>Couldn&#8217;t one use the i/o completion port for this? Just set it up properly, and queue the work items to the port. It&#8217;s a pity (no offense meant, Raymond) that MS has got the ports patented, it&#8217;s such a simple idea really, and useful too&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-354813">
				<div id="div-comment-354813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354813">
			March 14, 2006 at 9:11 pm</a>		</div>

		<p>Bryan, it scales just fine, simply change &quot;n&quot; from 4 to whatever. &nbsp;He didn&#8217;t say that it scaled automatically, just that it could scale as more processors were added. &nbsp;There is no &quot;n&quot; to change in the serial version.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354693">
				<div id="div-comment-354693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354693">
			March 14, 2006 at 3:56 pm</a>		</div>

		<p>Am I missing something or is this kind of problem exactly (maybe even *only*) what semaphores were invented for? Once you figure out the count, fire off as many threads as you want and have the first thing they do be wait on a semaphore of count 4 (in this case) and signal it when they&#8217;re done. </p>
<p>Strikes me as a lot easier than writing a thread scheduler&#8230; is there some reason that wouldn&#8217;t work?</p>
<p>Deals with separate processes too, just use a named semaphore.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-354703">
				<div id="div-comment-354703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354703">
			March 14, 2006 at 3:58 pm</a>		</div>

		<p>Coderjoe: I know that Raymond solved the problem for 4 CPUs and 5-tasks-worth-of-memory.</p>
<p>I was responding to his comment about &quot;The second design was to serialize the work items&quot;, where he said &quot;However, this didn&#8217;t scale because the performance of the program didn&#8217;t improve after adding processors or memory.&quot; &nbsp;The final solution he posted here (limit yourself to 4 tasks) *still doesn&#8217;t scale up when you add CPUs*. &nbsp;That&#8217;s all I was saying. &nbsp;;-)</p>
<p>The only way to scale up when the user adds CPUs is to determine your task-count limit at runtime. &nbsp;Or let the user tell you how many tasks to run at once (as in make&#8217;s -j option).</p>
<p>Adam &#8212; I know, any solution to this problem is going to be really bad in the general case. &nbsp;(Doubly so if you have no idea how much RAM/CPU the OS is using at any given moment. &nbsp;You can sort of figure out the RAM usage, but CPU usage is harder.) &nbsp;There is no good, general solution to that that I can think of, other than letting the admin tell the program how much to do at a time. &nbsp;But given the constraints here, it&#8217;d work OK.</p>
<p>As far as HT virtual CPUs: Yes, and that&#8217;s why we run our SolidWorks machines with HT disabled. &nbsp;It runs noticeably faster (part of this is because SolidWorks is single threaded anyway, but part of it is the shared caches and the shorter pipeline on each virtual CPU). &nbsp;In the specific case mentioned here, the admin could disable HT if it became an issue. &nbsp;(And obviously this may not work if the machine needs to do other stuff, but see above: this is already a crappy solution for that case.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354843">
				<div id="div-comment-354843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeffrey</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354843">
			March 15, 2006 at 4:50 am</a>		</div>

		<p>Yes, I/O completion port is a much simpler option. I/O completion port event takes care of the Wait behavior of the 4 running threads and allow a 5th thread to run, which make most full use of the CPU resources.</p>
<p>Fortunately, Windows has this build-in strong resource management for us!!</p>
<p>Anyway, Raymond Chen&#8217;s post gives a brief idea of how to implement I/O Completion port ourselves :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-354883">
				<div id="div-comment-354883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">8</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354883">
			March 15, 2006 at 9:07 am</a>		</div>

		<p>They have dozens of work items requiring 180MB and you &quot;fix&quot; it with a scheduler thread? Where did they get them in the first place? I&#8217;d make sure those &quot;work items&quot; are profiled and optimised first!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354923">
				<div id="div-comment-354923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A Tykhyy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-354923">
			March 15, 2006 at 11:46 am</a>		</div>

		<p>Oh, Jeffrey, but they&#8217;re patented! That&#8217;s the whole idea. Look up USPTO#06223207.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-355073">
				<div id="div-comment-355073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-355073">
			March 15, 2006 at 1:42 pm</a>		</div>

		<p>GregM: True. &nbsp;But the user can&#8217;t change &quot;n&quot;; they don&#8217;t have the source code. &nbsp;(Or a compiler, necessarily.) &nbsp;All they can do is add CPUs, and when they do that, they see that the program doesn&#8217;t scale up.</p>
<p>(It also doesn&#8217;t scale down: If the user removes a CPU, they&#8217;ll get all the same thrashing happening again.)</p>
<p>In this case, yes, the user and the developer were the same company. &nbsp;But who wants to bet that the people aware of the reasons for this limitation will still be with the company when &quot;the server&#8217;s too slow!&quot; reports start coming in? &nbsp;Someone, eventually, is going to want to replace this server with one that has more CPUs (or add CPUs to the existing server), and that person may not know that they have to bump &quot;n&quot; and recompile the software.</p>
<p>OTOH, if the company eventually starts running something else on this server, then a hardcoded limit would be better than trying to figure out the limit at runtime. &nbsp;There doesn&#8217;t seem to be a good automatic solution to this kind of problem. &nbsp;Making the limit changeable via the registry or a config file would probably be the best option.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-355223">
				<div id="div-comment-355223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-355223">
			March 15, 2006 at 5:08 pm</a>		</div>

		<blockquote><p>
  &nbsp;Raymond, could you elaborate on why a thread pool is &quot;poorly-suited&quot; here? </p>
<p>As he said in the article, the thread pool allows all the kiddies in the pool at once, which means that they use way more virtual memory than exists physically. Also, the scheduler thrashes itself into a stupor. This is a basic multiprogramming problem &#8211; setting the number of simultaneous jobs allowed on the system allows the highest efficiency.</p>
<p>Also, to the one or two people talking about threadpools and completion ports and semaphors, the problem is not how to control the kiddes, but how to choose the correct number of kiddies allowed in the pool at any time.</p>
<p>Bryan &#8211; sure the user can change &#8216;n&#8217;. All they have to do is change the parameter. Any backend process worth its salt will have a shedload of configurable options.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-356143">
				<div id="div-comment-356143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Weiss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-356143">
			March 17, 2006 at 4:36 pm</a>		</div>

		<p>One thing not to forget is that Raymond’s theatrical, just-for-an-example work items just need CPU time and memory. Real world tasks may often wait around for disk access, network messages, database queries, etc… If your items do a lot of this type of stuff then things become more complicated if you’re looking for the most efficient scheduler. </p>
<p>I wonder if a scheduler that controlled the running of multiple,for example, “memory/cpu” limited work items along with multiple “disk limited” work items, along with “network limited” work items would be a way to go.</p>
<p>Another idea could be to assign scores to each work item, for example Work Item A is 50% CPU and 50% disk, Work Item B is 90% CPU, 10% network (maybe store this info in a database or something). Then with those scores (and another value like the “size” of the item relative to the other items) somehow workout what to run when. Of course this could become so complicated you may never be able to understand why the system isn&#8217;t running correctly.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-356403">
				<div id="div-comment-356403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-356403">
			March 20, 2006 at 9:05 am</a>		</div>

		<p>I also believed that having more threads than the number of available CPUs leads to degradation of the overall performance. However, a simple test shows it&#8217;s not true.</p>
<p>In my test, a job is simple arithmetic calculations with an array of 100000 floating point numbers. Each job thread is running a loop with a number of calculations. Depending on the command line parameters, the test program can start a number of threads with the specified number of iterations.</p>
<p>Funny is that, say, one thread with 160000000 iterations provides lower performance than 16 threads with 10000000 iterations each. On a single-CPU machine.</p>
<p>You can easily reproduce the case, or if somebody is interested I can send the source code of my program (written in Delphi).</p>
<p>Can anybody explain this?</p>
<p>P.S. The overall performance actually degrades when the number of simultaneous worker threads is larger than 32 or so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-357253">
				<div id="div-comment-357253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Starfish</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-357253">
			March 21, 2006 at 2:30 pm</a>		</div>

		<p>&quot;Funny is that, say, one thread with 160000000 iterations provides lower performance than 16 threads with 10000000 iterations each. On a single-CPU machine.&quot;</p>
<p>What springs to mind is that more threads = more time for your program when other threads are runnable (and they will be), assuming all threads are given an equal time-slice. However I would be surprised if it was that simple, or even if it was correct!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-358383">
				<div id="div-comment-358383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060314-00/?p=31933#comment-358383">
			March 23, 2006 at 4:26 am</a>		</div>

		<p>Yes, this is one of the first conclusions everybody comes to when I explain the case :-)</p>
<p>But I do not think this is that simple, because in fact there are no applications that are actively working at the time the test is running. Of course there are hundreds of threads in the idle system, but they are mostly sleeping.</p>
<p>In any case, practically the test proves that you can at least ignore the overhead for thread context switching. Of course if the number of threads in your program is reasonable.</p>
<p>But I&#8217;m still curious why is it so, because it&#8217;s against the theory :-) So if you have another explanation, please share it.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>