<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1276275">
				<div id="div-comment-1276275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1276275">
			December 7, 2016 at 12:52 pm</a>		</div>

		<p>On Unix, fixing the customer&#8217;s problem would be technically possible, but far more complicated than it needs to be.  The short version is that you always open all file descriptors with O_CLOEXEC or the moral equivalent, and then when you need to inherit them, you do a fork(2) (which always inherits all file descriptors) and then use fcntl(2) to un-CLOEXEC the ones you really do want to inherit before you call one of the exec* functions.</p>
<p>Naturally, if there are libraries involved which don&#8217;t respect this pattern, or if you want to do fork-without-exec, you are screwed.  The Good News is that O_CLOEXEC is a reasonably safe default, so a number of high-level programming languages will set it for you.  This reduces the error surface somewhat, but unfortunately a lot of Unix libraries are written in C to maximize interoperability.</p>
<p>Meanwhile, cursory Googling shows that fork-without-exec leaves the child process in an infelicitous state under a variety of circumstances not involving file descriptor inheritance (typically because some mutex or other synchronization primitive gets stuck when its owning thread vanishes), and is also nontrivial to port to Windows.  I&#8217;m inclined to call it a lost cause.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1276295">
				<div id="div-comment-1276295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1276295">
			December 7, 2016 at 5:14 pm</a>		</div>

		<p>I wrote the code on the child side of fork() to clean up all unwanted handles. (Enum over open handles in /process gets the job done.) Your O_CLOEXEC doesn&#8217;t work too well because pipe() doesn&#8217;t set it. :(</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1276305">
				<div id="div-comment-1276305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1276305">
			December 7, 2016 at 5:15 pm</a>		</div>

		<p>Gee my phone autocotrect doesn&#8217;t know /proc yet.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1276336">
				<div id="div-comment-1276336" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1276336">
			December 8, 2016 at 7:55 am</a>		</div>

		<p>You should use pipe2() instead of pipe().</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1276575">
				<div id="div-comment-1276575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lars Viklund</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1276575">
			December 10, 2016 at 5:01 am</a>		</div>

		<p>Depending on who spawns your initial process, you may have file descriptors you don&#8217;t expect.</p>
<p>There was a fun incident with node.js and GNU Make a while ago. Make has a &#8220;makeserver&#8221; which communicates with the initial Make process to coordinate the starting of jobs to adhere to the specified parallelism count. This communication is done via an inherited FD which normally passes unharmed through all child processes.</p>
<p>The call chain here was something like Make -&gt; node.js -&gt; Make. This would be fine and properly job rate limited, except that node.js explicitly looped over the first N file descriptors and closed them for some obscure reason I don&#8217;t remember. The end result was a lovely explosion of make processes, each thinking it had free reigns to spawn -j tasks.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1276315">
				<div id="div-comment-1276315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1276315">
			December 8, 2016 at 2:41 am</a>		</div>

		<p>I&#8217;m slightly curious as to why you don&#8217;t get ERROR_HANDLE_EOF in such a case.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1277165">
				<div id="div-comment-1277165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1277165">
			December 16, 2016 at 1:47 am</a>		</div>

		<p>Because nobody closed it yet, that&#8217;s how pipes and sockets works: you get EOF only after the sending end has accurately closed the writing side of it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>