<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-703363">
				<div id="div-comment-703363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703363">
			January 23, 2009 at 10:13 am</a>		</div>

		<p>I thought NT supported default value types different from REG_SZ?</p>
<p>(Note: This is from memory, I could be completly wrong)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-703373">
				<div id="div-comment-703373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703373">
			January 23, 2009 at 10:24 am</a>		</div>

		<p>@Koro: NT supports it for values, but not for keys. &nbsp;That was the whole point. &nbsp;If you went with a &quot;no values, only subkeys&quot; approach, you wouldn&#8217;t be able to conveniently store data without converting to and from text.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-703383">
				<div id="div-comment-703383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703383">
			January 23, 2009 at 10:26 am</a>		</div>

		<p>Well, the current implementation of RegQueryValue seems to be a wrapper around RegQueryValueEx; it copies the binary data properly and returns the correct size. &nbsp;However, the return code is ERROR_INVALID_DATA; I guess it checks the dwType parameter for a string type. &nbsp;So the current implementation is no worse than it would have been if you went with bcthank&#8217;s suggestion. &nbsp;RegQueryValueEx would be identical to its current form, except it would take lpszSubKey instead of lpszValueName.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-703403">
				<div id="div-comment-703403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703403">
			January 23, 2009 at 10:38 am</a>		</div>

		<p>I actually had a situation where an ACL would&#8217;ve been convenient for a specific registry value. &nbsp;Then I realized that HKCU was probably a better place to put it for service reasons.</p>
<p>It seems like, as was mentioned in the other blog entry you linked, the reasoning for needing ACL is largely defeated by having HKCU/HKLM hives.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-703413">
				<div id="div-comment-703413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703413">
			January 23, 2009 at 11:40 am</a>		</div>

		<p>A string that is the base64-encoded value of the binary, naturally&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-703423">
				<div id="div-comment-703423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703423">
			January 23, 2009 at 11:42 am</a>		</div>

		<p>I disagree with the &#8220;full circle&#8221; statement.</p>
<p>There could be a function that takes a key name and a value name, and checks the ACL of the value before granting access to the value (or letting the caller know whether the value exists). &nbsp;Values can still exist in different types (REG_BINARY, etc.).</p>
<div class=post>[<i>Congratulations, you just invented the subkey (well a subkey with a type different from REG_SZ). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-703433">
				<div id="div-comment-703433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703433">
			January 23, 2009 at 11:57 am</a>		</div>

		<p>I for one won&#8217;t be satisfied until you can protect individual bits with ACLs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-703443">
				<div id="div-comment-703443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">El Guapo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703443">
			January 23, 2009 at 12:30 pm</a>		</div>

		<p>He didn&#8217;t re-invent the subkey, he just added an access check to the value. The value cannot have children therefore it is not a subkey, right?. </p>
<p>What am I missing here?</p>
<div class=post>[<i>Okay, I see. Yes, you added a separate access check to the value, and the difference is that values can&#8217;t have children. But why create a lame version of a subkey when you already have subkeys? This goes back to the idea of <a href="http://blogs.msdn.com/oldnewthing/archive/2005/02/16/374397.aspx" rel="nofollow">why create a simple version of something if you add features that make it as complicated as the original thing you were trying to simplify</a>? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-703453">
				<div id="div-comment-703453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">blah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703453">
			January 23, 2009 at 12:46 pm</a>		</div>

		<p>Wh can&#8217;t you type titles without truncation? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-703473">
				<div id="div-comment-703473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703473">
			January 23, 2009 at 1:05 pm</a>		</div>

		<p>I think it might have been better to model the Registry more closely after a file system; they are very similar and it is just easier to think of it that way. &nbsp;Instead, the Registry was only &quot;sort of&quot; like a file system. &nbsp;Of course, what&#8217;s done is done and these days the Registry is conceptually closer to a file system, but it&#8217;s just different enough to be annoying.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-703483">
				<div id="div-comment-703483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703483">
			January 23, 2009 at 2:29 pm</a>		</div>

		<p>Okay, so you&#8217;ve assumed that to have an access check there needs to be a handle. &nbsp;I think what confuses people is they don&#8217;t consider this an unbreakable assumption.</p>
<p>Even if it is an unbreakable assumption, why not hide it as an implementation detail behind RegQueryValue() et al? &nbsp;Have it grab a handle and close it when it&#8217;s done. &nbsp;And yes, I do see the point that this is sort of like re-inventing subkeys. &nbsp;But so what? &nbsp;People coding to the publicly facing APIs won&#8217;t care.</p>
<p>(Note that I&#8217;m not necessarily clamoring for ACLs to be added to registry values, just playing devil&#8217;s advocate here.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-703493">
				<div id="div-comment-703493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703493">
			January 23, 2009 at 2:39 pm</a>		</div>

		<p>I think the main win for the alternative models is that the mental model is simpler. The current model has always seemed weird to me.</p>
<p>1. You got a tree of keys.</p>
<p>&#8220;Ok&#8221;</p>
<p>2. Each keys can have multiple values of different types attached to it.</p>
<p>&#8220;Got it.&#8221;</p>
<p>3. There a magic no-name string value that&#8217;s always attached to all keys.</p>
<p>&#8220;Say what?&#8221;</p>
<p>I think it&#8217;s either simpler to understand a model where either there is no such magic no-name key or where the is only magic no-name key except you can specific its type at key creation time.</p>
<p>I think the only reason the registry is like it is was so its API would be backward compatible with 16-bits program to ease portng and yet provide more flexible storage for new programs.</p>
<div class=post>[<i>Yup, that&#8217;s what happened. Step 3 is the compatibility step. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-703513">
				<div id="div-comment-703513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703513">
			January 23, 2009 at 4:55 pm</a>		</div>

		<p>You know, the &quot;no-name&quot; value isn&#8217;t as magical as you think. &nbsp;I have no problem with it staying if it were no longer needed for compatibility. &nbsp;It has a direct relationship with XML. &nbsp;Watch:</p>
<p>&lt;foo&gt;</p>
<p>&lt;bar attr1=&quot;Hello&quot; attr2=&quot;World&quot;&gt;Hello World!&lt;/bar&gt;</p>
<p>&lt;/foo&gt;</p>
<p>HKEY_FOO_BAR</p>
<p>|</p>
<p>+-foo</p>
<p>| &nbsp; |</p>
<p>| &nbsp; +-bar</p>
<p>| &nbsp; &nbsp; &nbsp; (default)(REG_SZ): &quot;Hello World!&quot;</p>
<p>| &nbsp; &nbsp; &nbsp; attr1(REG_SZ): &quot;Hello&quot;</p>
<p>| &nbsp; &nbsp; &nbsp; attr2(REG_SZ): &quot;World&quot;</p>
<p>See?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-703523">
				<div id="div-comment-703523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703523">
			January 23, 2009 at 4:56 pm</a>		</div>

		<p>No, rather than creating new types, all existing types should be allowed to have access controls attached to them. &nbsp;I&#8217;m not asking to create new types. &nbsp;I don&#8217;t get why you (Raymond) think I&#8217;m asking for new types (&#8220;a subkey with a type different than Reg_SZ&#8221;).</p>
<p>I don&#8217;t want a subkey, I want an access control on each value. &nbsp;Let all existing types have access controls applied to them!</p>
<div class=post>[<i>The whole point of values was to have lightweight data inside a key. If you put an ACL on it, it&#8217;s not lightweight any more. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-703543">
				<div id="div-comment-703543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703543">
			January 23, 2009 at 5:14 pm</a>		</div>

		<blockquote><p>
  Let all existing types have access</p>
<p>  controls applied to them!
</p></blockquote>
<p>But this is contrary to the model which is effectively implemented across all other kernel object types.</p>
<p>1) things that are heavyweight enough to have SDs are used in an open/read/write/close sort of way, with the intended-access mask checked at open time.</p>
<p>2) if some values have SDs then all values have SDs; there is no existing case of &#8216;if I do not have an SD then ask my parent&#8217; (that is not how SD inheritance works)</p>
<p>3) what you are really doing is increasing the overhead of accessing every registry value</p>
<p>For (1) and (2) you are proposing a special case. Not good.</p>
<p>For (3) this is self-evidently not good.</p>
<p>In addition, it has long been observed that people have trouble with the NT security system in part because it is so fine-grained. &nbsp;Making it finer-grained is not helping.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-703563">
				<div id="div-comment-703563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yawar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703563">
			January 23, 2009 at 7:40 pm</a>		</div>

		<p>Raymond: If you wrote a REG_BINARY blob to the default value of a subkey, what should be returned if somebody called RegQueryValue which always returns a string?</p>
<p>Either &quot;1&quot;</p>
<p>or &quot;0&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-703503">
				<div id="div-comment-703503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703503">
			January 23, 2009 at 2:46 pm</a>		</div>

		<p>&gt;I think it&#8217;s either simpler to understand a </p>
<p>&gt;model where either there is no such magic</p>
<p>&gt; no-name key</p>
<p>I live in that world. OK, so keys *can* have a magic Value With No Name. &nbsp;That doesn&#8217;t mean I have to actually use it for anything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-703553">
				<div id="div-comment-703553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703553">
			January 23, 2009 at 7:25 pm</a>		</div>

		<p>&#8220;If you wrote a REG_BINARY blob to the default value of a subkey, what should be returned if somebody called RegQueryValue which always returns a string?&#8221;</p>
<p>An error would be returned, of course, as is the case now. That hypothetical situation is explicitly allowed and possible:</p>
<p>&#8220;Registry keys do not have default values, but they can have one unnamed value, which can be of any type.&#8221; &#8211;MSDN on RegSetValueEx</p>
<p>Looking purely from the POV of the API and compatibility, I can&#8217;t see a problem with not adding multiple values per key.</p>
<p>1) Yes, it would be wrong to write REG_BINARY data to a key which was expected to contain REG_SZ data, but that is true now even in the multi-value world. It&#8217;s something you can do now so using single keys did not avoid that problem at all.</p>
<p>2) I cannot imagine a realistic situation where an old piece of (possibly recompiled) 16-bit code calling RegQueryValue would to want to read the value of a &#8220;new&#8221; registry key which contains non-string data because that registry key wasn&#8217;t invented when the code was written and the program has no way to deal with the data. Anything wanting to write settings for that old program to read would have to write them as REG_SZ values. Again, all of this is is true now in the multi-value world and single vs multiple values makes no difference.</p>
<p>&#8220;[The whole point of values was to have lightweight data inside a key. If you put an ACL on it, it&#8217;s not lightweight any more. -Raymond]&#8221;</p>
<p>Now *that*, on the other hand, is something I can buy. If that was the justification in the root post then there would be nothing to say.</p>
<div class=post>[<i>That&#8217;s what I said in the original article, just not in so many words: &#8220;If you added all this stuff to registry values, then you&#8217;re back where you started, so what&#8217;s the point?&#8221; If you want to be different from X, you have to reject adding things which would make you the same as X. -Raymond</i>]</div>
<p>If there are good resource / performance reasons for storing multiple values under a single key and ACL, and forcing people to create a sub-key if they need different security, then that is an acceptable trade-off.</p>
<p>It&#8217;s a trade-off since people may want to change per-value security retroactively and find they can&#8217;t, but it seems like an acceptable trade-off since that case is very rare. (In fact, changing the ACLs beyond the defaults for HKCU/HKLM is very rare in itself.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-703583">
				<div id="div-comment-703583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">El Guapo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703583">
			January 24, 2009 at 6:54 am</a>		</div>

		<p>&quot;[The whole point of values was to have lightweight data inside a key. If you put an ACL on it, it&#8217;s not lightweight any more. -Raymond]&quot;</p>
<p>Now *that*, on the other hand, is something I can buy. If that was the justification in the root post then there would be nothing to say.</p>
<p>&#8212;</p>
<p>And now I am understanding it too. I know it was stated it in the original post in a different way, but sometimes we need to have stuff spelled out for us :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-703613">
				<div id="div-comment-703613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703613">
			January 24, 2009 at 4:06 pm</a>		</div>

		<p>Okay, then, maybe someone can explain to me why it&#8217;s possible to RegOpenKeyEx with KEY_READ permission yet I can call RegCreateKeyEx on that handle and it gladly creates the key. I know the ACL lets me do it but I said when I opened the key that I didn&#8217;t want to write! This is another situation where the file I/O API doesn&#8217;t behave like the registry one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-703623">
				<div id="div-comment-703623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703623">
			January 24, 2009 at 4:10 pm</a>		</div>

		<blockquote><p>
  And now I am understanding it too. I know it was stated it in the original post in a different way, but sometimes we need to have stuff spelled out for us :)
</p></blockquote>
<p>+1</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-703833">
				<div id="div-comment-703833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090123-00/?p=19403#comment-703833">
			January 27, 2009 at 12:02 pm</a>		</div>

		<p>Hope this isn&#8217;t a dup; my computer glitched.</p>
<p>NOW we get an explanation about &#8220;lightweight&#8221;ness. &nbsp;Where did that come from? &nbsp;It sounds like after-the-fact rationalizing.</p>
<p>If values with access controls are too heavyweight, that&#8217;s fine, but that was not mentioned in the original post.</p>
<p>I disagree that adding ACLs to values is just &#8220;adding an additional layer that just re-expresses what you had before, just in a more complicated way&#8221;. &nbsp;Not necessarily, and not if you want to preserve the different value data types.</p>
<p>And if it&#8217;s &#8220;the act of creating the handle that performs the access check&#8221;: &nbsp;That&#8217;s just an implementation detail. &nbsp;The registry-accessing code *could* check the ACL when a value is accessed or changed.</p>
<p>David</p>
<div class=post>[<i>&#8220;Lightweight&#8221; is shorthand for &#8220;If you added all that stuff to values, you&#8217;d have keys again, and then what was the point of values?&#8221; Okay, fine you did gain additional data types, but that&#8217;s offset by all the other costs. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>