<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1275575">
				<div id="div-comment-1275575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275575">
			December 2, 2016 at 8:27 am</a>		</div>

		<p>Well, i don&#8217;t know much about WIC, but generally, when you make a call that allocates some resource, or gets a pointer or handle to some resource, you must use a matching call to free the resource or handle. There are some exceptions, of course; but this is the general rule.</p>
<p>I use to indent code between those two calls whenever I can, so I clearly define where the pointer/handle is valid. It&#8217;s a little weird, but easy to understand and easier to follow.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1275585">
				<div id="div-comment-1275585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275585">
			December 2, 2016 at 8:37 am</a>		</div>

		<p>This should be fairly obvious. Ignoring the concept of buffer ownership, you can&#8217;t free something you didn&#8217;t allocate unless explicitly told otherwise.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1275595">
				<div id="div-comment-1275595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275595">
			December 2, 2016 at 8:40 am</a>		</div>

		<p>I don&#8217;t think you can generalise a rule that any pointer you get from an API must be freed. The Lock/Get/Release pattern is very common. Even more so when calling C++ classes. You wouldn&#8217;t do:</p>
<p>string x = y.Name();<br />
&#8230;..<br />
delete x;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1275615">
				<div id="div-comment-1275615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275615">
			December 2, 2016 at 8:51 am</a>		</div>

		<p>std::string is not a pointer, so even the most general form of the rule would not apply.  It contains a pointer to content, and it WILL free that pointer&#8230; which is one of a great many issues that arise trying to mix std::string instances from different toolchain versions.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1275745">
				<div id="div-comment-1275745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275745">
			December 3, 2016 at 1:30 am</a>		</div>

		<p>You write code like this?</p>
<p>string x = y.Name();<br />
char *z = x.c_str();<br />
…..<br />
delete z;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1275855">
				<div id="div-comment-1275855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275855">
			December 5, 2016 at 2:26 pm</a>		</div>

		<p>A more common case (where you mix string classes with non-class-based code) is where the caller works with a string class, somehow gets a pointer to the string&#8217;s buffer and passes it to some non-class aware function (typically way down the call stack) whose behavior includes assuming ownership of the buffer.  Yes, the code is just about as bad as your example, but, it&#8217;s *much* harder to see.<br />
A similar problem arises with BSTRs.  BSTR behavior is so close to wchar_t* behavior that some folks mix them up.  Some mixing and matching of BSTRs and wchar_t* works quite well.  Other mixing and matching leads to oddball bugs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wswiktor even depth-5" id="comment-1276085">
				<div id="div-comment-1276085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Azarien' rel='external nofollow' class='url'>Azarien</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1276085">
			December 6, 2016 at 12:40 pm</a>		</div>

		<p>It&#8217;s error prone to assign the result of c_str() to a variable. c_str() should only be used inside a call, e.g. strlen(s.c_str());</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1275685">
				<div id="div-comment-1275685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275685">
			December 2, 2016 at 3:05 pm</a>		</div>

		<p>What I was talking about is that the reserve and release operations are symmetrical, that you free or release what you have been given (and not anything else). If you receive a handle to an object (a file, a DC&#8230;), you don&#8217;t free the object&#8217;s memory, but you release the handle. In the case exposed in the article, you aren&#8217;t allocating memory, you are just given a pointer to it. Following the same pattern, you release the pointer, but you don&#8217;t free the block.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1275576">
				<div id="div-comment-1275576" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275576">
			December 2, 2016 at 8:29 am</a>		</div>

		<p>&#8220;Code in italics is wrong&#8221; but all the code is in italics. Does that mean all the code is wrong?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1275605">
				<div id="div-comment-1275605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275605">
			December 2, 2016 at 8:45 am</a>		</div>

		<p>It looks like oblique type to me, not italic type. </p>
<p><a href="https://en.wikipedia.org/wiki/Oblique_type" rel="nofollow">https://en.wikipedia.org/wiki/Oblique_type</a><br />
<a href="https://en.wikipedia.org/wiki/Italic_type" rel="nofollow">https://en.wikipedia.org/wiki/Italic_type</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3 parent" id="comment-1275625">
				<div id="div-comment-1275625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275625">
			December 2, 2016 at 9:11 am</a>		</div>

		<p>&#8220;Code rendered in the style sheet&#8217;s interpretation of the &lt;i&gt; tag is wrong.&#8221; is much more cumbersome to write.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1275755">
				<div id="div-comment-1275755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275755">
			December 3, 2016 at 2:11 am</a>		</div>

		<p>I think there is something beautiful about your joke of code in italics is wrong and you post all code in italics, when (on MS browsers at least) the code is not really in italics.</p>
<p>How about this for less cumbersome?</p>
<p>// Code is wrong.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1275765">
				<div id="div-comment-1275765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275765">
			December 3, 2016 at 9:57 am</a>		</div>

		<p>There are other posts where there is a mix of italicized and non-italicized code.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1275695">
				<div id="div-comment-1275695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275695">
			December 2, 2016 at 3:06 pm</a>		</div>

		<p>Let&#8217;s bring back Nitpicker&#8217;s Corner! Some comments just deserve it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1275635">
				<div id="div-comment-1275635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275635">
			December 2, 2016 at 9:13 am</a>		</div>

		<p>Yup. It is a general rule on this site that code in italics is wrong. it so happens that all of this code is in italics. (Other times, only some of the code is in italics.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1275645">
				<div id="div-comment-1275645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275645">
			December 2, 2016 at 9:21 am</a>		</div>

		<p>Yes; code is often right or wrong as a whole, especially when memory allocation/deallocation is concerned.</p>
<p>char * p = new char[100];<br />
// Do something with p<br />
free(p);</p>
<p>Is the first line wrong because it should be using malloc or is the last line wrong because it should be using delete[]? The only thing that can be said for certain is that the block as a whole is wrong.</p>
<p>And to smf: it looks italic to me. Your machine may be substituting an oblique font in lieu of italics, but comparing to other usages of fixed-width text in the article, the letter shapes are definitely different. Compare the a and f to later mentions of sourceBuffer and IWICBitmap.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1275656">
				<div id="div-comment-1275656" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275656">
			December 3, 2016 at 1:54 am</a>		</div>

		<p>When viewed in EDGE and IE it&#8217;s oblique type, when viewed in Google Chrome it&#8217;s italic type. I have always assumed the Raymond targets his site at MS browsers.</p>
<p>I don&#8217;t know what browser you are using, so I don&#8217;t know how your &#8220;f&#8221; looks.</p>
<p><a href="https://en.wikipedia.org/wiki/Italic_type#Examples" rel="nofollow">https://en.wikipedia.org/wiki/Italic_type#Examples</a><br />
<a href="https://en.wikipedia.org/wiki/Italic_type#Oblique_type_compared_to_italics" rel="nofollow">https://en.wikipedia.org/wiki/Italic_type#Oblique_type_compared_to_italics</a></p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1275805">
				<div id="div-comment-1275805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275805">
			December 5, 2016 at 7:59 am</a>		</div>

		<p>I&#8217;m using Chrome on Windows 7. Here &#8216;f&#8217; gains a tail and &#8216;a&#8217; changes to the single-storey form.<br />
Both IE and Firefox don&#8217;t change that much, although the font does gain noticeably more serifs, especially at the bottom of the &#8216;f&#8217;.<br />
Lynx simply displays it in blue, in case anyone was interested.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even depth-4" id="comment-1275835">
				<div id="div-comment-1275835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275835">
			December 5, 2016 at 1:44 pm</a>		</div>

		<p>I overrode Firefox&#8217;s defaults to use Calibri, Cambria, and Consolas as the default fonts for web pages, so the text actually looks italicized instead of just being oblique (I&#8217;m not sure what it does by default; I did this ages ago).  Looking at the stylesheet, the pre element is overriding the font-family to be monospace, instead of using the default fonts listed in bootstrap.min.css (which calls out Consolas explicitly before falling back on Courier New).</p>
<p>Chrome appears to explicitly use Consolas instead of Courier New, which is curious since it uses Times New Roman and Arial for its other default fonts.</p>
<p>IE11 and Edge stick to the standard fonts, unless you override them in Internet Options.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1275705">
				<div id="div-comment-1275705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275705">
			December 2, 2016 at 3:08 pm</a>		</div>

		<p>In case the previous replies aren&#8217;t clear enough, the entire block is in italics because the entire block is wrong. As we discuss above, it mixes different allocation/release techniques.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1275905">
				<div id="div-comment-1275905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275905">
			December 6, 2016 at 7:18 am</a>		</div>

		<p>Yes, all of that code is wrong when taken as a whole.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1275616">
				<div id="div-comment-1275616" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275616">
			December 2, 2016 at 8:52 am</a>		</div>

		<p>Even if this function did take ownership of the buffer and the buffer was somehow allocated on the application&#8217;s C++ heap, it should then use delete[] to delete an array, not scalar delete. And it should use a smart pointer to avoid leaking.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1275675">
				<div id="div-comment-1275675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275675">
			December 2, 2016 at 12:35 pm</a>		</div>

		<p>Well, the key issue is that we don&#8217;t know how the buffer was allocated. Perhaps it was with new, perhaps it was something else like CoTaskAlloc. So don&#8217;t use delete or delete[], but read the documentation and use what that says to free the buffer.</p>
<p>Or not free at all &#8230;  In this case, the documentation is a bit unclear unfortunately, but it seems indeed the buffer pointer is a const pointer you are not supposed to change or delete. In the end indeed the customer already suspected this, but IMHO I believe MSDN and the API definition itself could have been more clear and hence are the real issue here.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1275665">
				<div id="div-comment-1275665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275665">
			December 2, 2016 at 11:32 am</a>		</div>

		<p>For me the general rule is that when API documentation doesn&#8217;t say anything about says how you should free a pointer or handle, then you&#8217;re not the owner and you shouldn&#8217;t try to free the handle or pointer.</p>
<p>The documentation for `IWICBitmapLock::GetDataPointer` gives an additional clue in that it mentions the valid lifetime of the pointer (without telling you that you&#8217;re responsible for freeing/releasing/deleting the resource).</p>
<p>All that said, I&#8217;m not opposed to documentation explicitly saying something along the lines of &#8220;the caller is not responsible for freeing this pointer&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1275715">
				<div id="div-comment-1275715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">immibis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275715">
			December 2, 2016 at 4:22 pm</a>		</div>

		<p>This is what happens when people learn &#8220;I need to free pointers&#8221; instead of &#8220;I need to free things I allocated with malloc&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1275785">
				<div id="div-comment-1275785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AberAber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161202-00/?p=94845#comment-1275785">
			December 5, 2016 at 4:00 am</a>		</div>

		<p>I am used to DirectX, which has Lock and Unlock, instead of GetDataPointer. It&#8217;s a little more obvious at least that you don&#8217;t own the data.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>