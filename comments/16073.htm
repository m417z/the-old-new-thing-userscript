<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (34)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-785463">
				<div id="div-comment-785463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kog999</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785463">
			November 11, 2009 at 7:18 am</a>		</div>

		<p>i set my DESTRUCTOR_REFCOUNT&#8217;s to 1337 because its cooler then 42</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-785473">
				<div id="div-comment-785473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785473">
			November 11, 2009 at 7:24 am</a>		</div>

		<p>#define DESTRUCTOR_REFCOUNT 911</p>
<p>I would suggest (MAXLONG&gt;&gt;2)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-785483">
				<div id="div-comment-785483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">someone else</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785483">
			November 11, 2009 at 7:35 am</a>		</div>

		<p>To find something in the debugger (or worse, a hex dump), “words” appear more practical. Like DEADBEEF, F001 or B00B.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-785493">
				<div id="div-comment-785493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785493">
			November 11, 2009 at 7:56 am</a>		</div>

		<p>&#8220;While it&#8217;s true that you should set the reference count to an artificial non-zero value&#8221;</p>
<p>Isn&#8217;t this one of those false truths? Your desructor code should never do AddRef/Release. The destructor should never pass the object pointer away, this is why AddRef should never be called. Put an ASSERT(ref_cnt != 0) to AddRef.</p>
<div class=post>[<i>In other words, an object which has persistence shouldn&#8217;t try to save itself when destructed, but rather should save itself whenever a property changes? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-785513">
				<div id="div-comment-785513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785513">
			November 11, 2009 at 9:08 am</a>		</div>

		<p>Curly&#8217;s Law to the rescue&#8230;</p>
<p>Instead of overloading the m_cRef variable, create a boolean m_bBeingDestroyed variable. &nbsp;Initialize it to false, and set it to true when the reference count first drops to 0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-785523">
				<div id="div-comment-785523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785523">
			November 11, 2009 at 9:12 am</a>		</div>

		<p>I think it would be easier if the interface for the object exposed a Save method which you had to explicitly call in order to save it. &nbsp;If you insist on doing stuff in your destructor which could result in calls to AddRef and Release (I try to avoid this whenever possible), then I think it would be easier to use a separate flag rather than trying to do tricks with the ref count:</p>
<p>ULONG MyObject::AddRef()</p>
<p>{</p>
<p>if (m_fDestroying) return 1;</p>
<p>assert(m_cRef != 0);</p>
<p>return InterlockedIncrement(&amp;m_cRef);</p>
<p>}</p>
<p>ULONG MyObject::Release()</p>
<p>{</p>
<p>if (m_fDestroying) return 1;</p>
<p>LONG cRef = InterlockedDecrement(&amp;m_cRef);</p>
<p>if (cRef &gt; 0) return cRef;</p>
<p>m_fDestroying = TRUE; // avoid double-destruction</p>
<p>delete this;</p>
<p>return 0;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-785543">
				<div id="div-comment-785543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785543">
			November 11, 2009 at 9:31 am</a>		</div>

		<p>[In other words, an object which has persistence shouldn&#8217;t try to save itself when destructed, but rather should save itself whenever a property changes? -Raymond]</p>
<p>Raymond,</p>
<p>It all comes from wrong use of AddRef. You should not call it if you don&#8217;t need to save the object for later use. When your object calls its own methods, such as Save, it should not do AddRef.</p>
<p>At destructor time, you should not be passing your object around. For all purposes, it&#8217;s gone, it&#8217;s behind an event horizon. You should not pass its interface pointer to other functions. You can pass its data pointers around, for saving, because you still keep their references inside your soon-to-die object. But all of your object&#8217;s interfaces are out of this world now. QueryInterface should also ASSERT on zero refcount.</p>
<div class=post>[<i>&#8220;You should not pass its interface pointer to other functions.&#8221; Translation: Correct, an object should not attempt to auto-save. Require clients to call an explicit Save method. (And if there&#8217;s more than one client, they need to coordinate among themselves who is the one to call Save.) Feel free to use this design pattern in your code. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-785663">
				<div id="div-comment-785663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785663">
			November 11, 2009 at 12:26 pm</a>		</div>

		<p>Seeing as COM objects generally do not restore their persistence in IClassFactory::CreateInstance(), because it had no idea where it&#8217;s persistence was, then similarly persistence should not be dependent on the last arbitrary IUnknown::Release().</p>
<p>If you then had a client using a garbage collected language (hmm, I wonder if MS encourages the use of a lanuage with garbage collection and COM interoperability) then your last release and hence persistence is dependent on the whim of a foreign garbage collector.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-785703">
				<div id="div-comment-785703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785703">
			November 11, 2009 at 2:11 pm</a>		</div>

		<p>What John said but I&#8217;d code it a little differently:</p>
<p>ULONG MyObject::AddRef()</p>
<p>{</p>
<p>____ LONG cRef = InterlockedIncrement(&amp;m_cRef);</p>
<p>____ assert(cRef &gt;= (m_fDestroying ? 1 : 2));</p>
<p>____ return cRef;</p>
<p>}</p>
<p>ULONG MyObject::Release()</p>
<p>{</p>
<p>____ LONG cRef = InterlockedDecrement(&amp;m_cRef);</p>
<p>____ assert(cRef &gt;= 0);</p>
<p>____ if (cRef == 0 &amp;&amp; !m_fDestroying) {</p>
<p>____ ____ delete this; // calls destructor</p>
<p>____ }</p>
<p>____ return cRef;</p>
<p>}</p>
<p>MyObject::~MyObject()</p>
<p>{</p>
<p>____ m_fDestroying = TRUE;</p>
<p>____ // do what you like here</p>
<p>____ // including AddRef() and Release()</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-785733">
				<div id="div-comment-785733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785733">
			November 11, 2009 at 5:41 pm</a>		</div>

		<p>Oh, and tack on an &quot;assert(m_cRef == 0);&quot; on the end of that destructor.</p>
<p>This begs the question&#8230; if you&#8217;re giving a pointer to an object away in its destructor, what do you do if one of the things you gave a pointer to in the destructor holds on to it? &nbsp;do { Sleep(&#8230;); } while (m_cRef &gt; 0); ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-785743">
				<div id="div-comment-785743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785743">
			November 11, 2009 at 6:29 pm</a>		</div>

		<p>Let&#8217;s hope future programming languages will be able to avoid this COLLECTION of GARBAGE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-785753">
				<div id="div-comment-785753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785753">
			November 11, 2009 at 6:30 pm</a>		</div>

		<p>That code is ugly and barely readable. Let&#8217;s hope future programming languages will find away to avoid this COLLECTION of GARBAGE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-785783">
				<div id="div-comment-785783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785783">
			November 11, 2009 at 7:50 pm</a>		</div>

		<blockquote><p>
  &gt; That code is ugly and barely readable.
</p></blockquote>
<p>If that code is ugly and barely readable then I hope that you are not a programmer!</p>
<p>There are two commonly used solutions to ugly code: hide it in a library or in a base class.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-785793">
				<div id="div-comment-785793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785793">
			November 11, 2009 at 8:00 pm</a>		</div>

		<p>I&#8217;m thinking that all of these uses of InterlockedDecrement (in the article and the comments) are moot if you aren&#8217;t going to bother making the entire function threadsafe. am I right</p>
<p>I never use Interlock* if I haven&#8217;t actually thought the threadsafety through &#8211; don&#8217;t want to give a false impression.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-785803">
				<div id="div-comment-785803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785803">
			November 11, 2009 at 8:09 pm</a>		</div>

		<blockquote><p>
  &gt; I&#8217;m thinking that all of these uses of InterlockedDecrement (in the article and the comments) are moot if you aren&#8217;t going to bother making the entire function threadsafe. am I right
</p></blockquote>
<p>If you are only using the interlocked functions correctly for your usage count then they will ensure that only one thread gets the case of InterlockedDecrement return zero, so that single thread can safely call the destructor. That means you don&#8217;t need a mutex around your constructor or destructor if you only hand out a reference to the object after construction and the only single place that delete is called is in the IUnknown::Release when InterlockedDecrement has returned zero. In comparison to many examples on the net, I also have my constructor set the usage to 1 in the first place, so the life cycle sequence is &quot;new&quot; then &quot;Release&quot;, not &quot;new&quot;, then &quot;AddRef&quot; then &quot;Release&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-785813">
				<div id="div-comment-785813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785813">
			November 11, 2009 at 8:10 pm</a>		</div>

		<p>RC: [Translation: Correct, an object should not attempt to auto-save.]</p>
<p>I don&#8217;t quite get why you bring auto-save. To auto-save, the destructor can call whatever external function it needs to write the object&#8217;s persistent state out. This doesn&#8217;t mean the destructor needs to call some external function that needs to take the object&#8217;s pointer. If you mean the auto-save function should be external to the object, it&#8217;s wrong design. The object should know how to save itself, without exposing it to the outside. The external functions only serve to save its members &#8211; strings, numbers, etc.</p>
<p>Again, auto-save function doesn&#8217;t need to pass the object&#8217;s pointer away; it should be solely an internal business. Then the problem of AddRef at destruction time won&#8217;t byte your behind.</p>
<div class=post>[<i>It means that any function called in the destructor may need to have two versions, one that calls AddRef and Release when it copies the pointer (for use during normal conditions), and one that doesn&#8217;t (for use during destruction). The no-AddRef/Release version can&#8217;t use smart pointers and it can&#8217;t call QI. I bring up auto-save because it is not unusual for Save() to hand out the pointer temporarily, for example for use as a site, or to call QI (e.g. to QI for IPersist). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-785833">
				<div id="div-comment-785833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785833">
			November 11, 2009 at 10:48 pm</a>		</div>

		<blockquote><p>
  &gt; [It means that any function called in the destructor may need to have two versions, one that calls AddRef and Release when it copies the pointer (for use during normal conditions), and one that doesn&#8217;t (for use during destruction).
</p></blockquote>
<p>What is wrong with doing</p>
<p>ULONG Release()</p>
<p>{</p>
<p>&nbsp; &nbsp; if (!InterlockedDecrement(&amp;usage))</p>
<p>&nbsp; &nbsp; {</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;usage=REFCOUNT_DESTRUCT;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Save();</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;assert(usage==REFCOUNT_DESTRUCT);</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;delete this;</p>
<p>&nbsp; &nbsp; }</p>
<p>&nbsp; &nbsp; return 0;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-785863">
				<div id="div-comment-785863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785863">
			November 12, 2009 at 2:37 am</a>		</div>

		<p>According to the mantra, every programming problem can be solved by an extra layer of indirection. So the solution is obviously to create a new object whose job it is to save the original object but without passing the original object around (so the new object implements IPersist or whatever interfaces are necessary). Once the new object has done its job it can then delete the original object in its destructor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-785873">
				<div id="div-comment-785873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M&#233;dinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785873">
			November 12, 2009 at 4:21 am</a>		</div>

		<p>@Alexander, @Porter: The problem is, your save method can do this:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2005/09/27/474384.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2005/09/27/474384.aspx</a></p>
<p>SetSite() calls AddRef(), and some other methods can call QueryInterface() (which does an AddRef()) on your object&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-785883">
				<div id="div-comment-785883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785883">
			November 12, 2009 at 6:01 am</a>		</div>

		<p>Good grief. &nbsp;I can&#8217;t believe good programmers would recommend such a hideous kludge as The Way to prevent double destruction. &nbsp;Anything that requires this kind of workaround needs a redesign (or, I suspect, &nbsp;lacked a initial design).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-785893">
				<div id="div-comment-785893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">!GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785893">
			November 12, 2009 at 6:58 am</a>		</div>

		<p>@GWO:</p>
<p>Very funny! Ha ha ! &quot;I don&#8217;t understand the problem or the solution, but its wrong ! wrong wrong wrong ! And I cant think of a better design! That makes me smart ! Whee !&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-785973">
				<div id="div-comment-785973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785973">
			November 12, 2009 at 9:58 am</a>		</div>

		<p>porter:</p>
<p>In regards to MS recommending a language with COM Interop and garbage collection&#8230;</p>
<p>The first MS language I used that fit that description was Visual Basic 6.0, and VBA is still going strong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-785983">
				<div id="div-comment-785983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PhilW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785983">
			November 12, 2009 at 11:12 am</a>		</div>

		<p>Actually 42 isn&#8217;t just cool, it&#8217;s the answer to the ultimate question of life the universe and everything. That&#8217;s why it has snuck into the geek vocabulary, as any Douglas Adams reader would grok (sneaking in another SF reference).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-786023">
				<div id="div-comment-786023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-786023">
			November 12, 2009 at 12:25 pm</a>		</div>

		<blockquote><p>
  &gt; (And if there&#8217;s more than one client, they need to coordinate among themselves who is the one to call Save.) Feel free to use this design pattern in your code. -Raymond
</p></blockquote>
<p>So lets guess why Microsofts distributed COM transaction server requires stateless objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-785913">
				<div id="div-comment-785913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-785913">
			November 12, 2009 at 8:32 am</a>		</div>

		<p>@M&#233;dinoc </p>
<p>If your Save *may* do that then you have end up with&#8230;</p>
<p>Release()</p>
<p>{</p>
<p> &nbsp; &nbsp;while (!InterlockedDecrement(&amp;usage))</p>
<p> &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; if (fDirty)</p>
<p> &nbsp; &nbsp; &nbsp; {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AddRef();</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Save();</p>
<p> &nbsp; &nbsp; &nbsp; }</p>
<p> &nbsp; &nbsp; &nbsp; else</p>
<p> &nbsp; &nbsp; &nbsp; {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; delete this;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</p>
<p> &nbsp; &nbsp; &nbsp; }</p>
<p> &nbsp; &nbsp;}</p>
<p>}</p>
<p>So what to do if Save fails and fDirty is still true? Funnily enough that is one of the fundamental problems of attempting to Save on Release().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-786073">
				<div id="div-comment-786073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bmm6o</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-786073">
			November 12, 2009 at 4:35 pm</a>		</div>

		<p>Joseph Koss: porter was suggesting C#/VB.Net, I believe. &nbsp;VB 6 calls Release as soon as each local reference is set to nothing, resulting in generally deterministic behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-786093">
				<div id="div-comment-786093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-786093">
			November 12, 2009 at 5:23 pm</a>		</div>

		<blockquote><p>
  grok (sneaking in another SF reference)
</p></blockquote>
<p>&#8230; and a stranger one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-786193">
				<div id="div-comment-786193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M&#233;dinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-786193">
			November 13, 2009 at 4:57 am</a>		</div>

		<p>@GWO: So, it would need a version of QueryInterface that does not add a reference?</p>
<p>&#8230;Good point, actually.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-786143">
				<div id="div-comment-786143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-786143">
			November 12, 2009 at 9:15 pm</a>		</div>

		<p>PhilW: yes, and you can be sure that the odds of someone who visits this blog getting the reference would be *quite* high. Raymond just didn&#8217;t bother to point out the obvious. Many geeks enjoy subtlety, and as one of them myself, I appreciate the way he described the number.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-786223">
				<div id="div-comment-786223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">avek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-786223">
			November 13, 2009 at 7:58 am</a>		</div>

		<p>Sorry, but something seems wrong with all this to me.</p>
<p>COM objects are, in effect, garbage collected. (Yeah, I know, we don&#8217;t call reference counting GC these days. But it&#8217;s still one of the GC methods, and it&#8217;s mentioned among GC methods in any theoretical talk). As result of that, COM objects don&#8217;t have any destructors, when we look at them as COM objects, universal, re-usable and callable from any language. They have Release, of course, but it&#8217;s not a destructor.</p>
<p>Now, implementation of a COM object may have a&#8230; let&#8217;s call it finalizer &#8211; private method that Release calls when object actually becomes dead (again, that&#8217;s not a destructor). And when implementing COM objects in C++, the finalizer usually has to invoke a true C++ destructor at some point, because C++ objects die that way. Without a call to C++ destructor, there&#8217;s just no good way to clean object internals up, so let it be &#8211; the more, the merrier.</p>
<p>But if the finalizer does something to the object as to a COM object, like giving its interfaces to other objects, then THE OBJECT MUST STILL BE A LIVE ONE when it goes outside of Release/finalizer. And if it&#8217;s not a live one, it must be made live by force. That&#8217;s similar to what .NET does with its finalizers: if one needs to be called, the object is not collected and turned back into a first-class live one instead, then it&#8217;s given to its finalizer, and the object lifetime prolongs until the next collection. On the next collection, the object may again turn up dead and be collected. Or it may become used again and get stuck in the heap, thus the finalizer will in fact have no &quot;finalizing&quot; effect on it.</p>
<p>Every C++ destructor is always one-shot and irreversible, unlike .NET finalizers; it always makes the object unusuable when called. So, it can&#8217;t do the job of a GC finalizer. Ergo, when Release revives the object it may NOT call the C++ destructor (and no operator delete, too). Period. Some special finalizer may be invoked instead, but not a destructor.</p>
<p>It may seem that I&#8217;m nitpicking. But, you see, it&#8217;s all actually very important because there are many abstractions here, and they tend to mix, and can begin to leak if not properly separated from each other. So unconditionally calling the C++ destructor from Release at zero refcount, when some complex COM-based finalization is due &#8211; that&#8217;s just wrong.</p>
<p>The proper algorithm of Release should be something like this (very sketchy):</p>
<p>Release()</p>
<p>{</p>
<p>&nbsp;TRefCount newRefCount = DecrementRefCount();</p>
<p>&nbsp;if (newRefCount != 0) return newRefCount;</p>
<p>&nbsp;if (objectStillHasSomethingToDo)</p>
<p>&nbsp;{</p>
<p>&nbsp; &nbsp;AddRef();</p>
<p>&nbsp; &nbsp;DoSomething();</p>
<p>&nbsp; &nbsp;return Release();</p>
<p>&nbsp;}</p>
<p>&nbsp;delete this;</p>
<p>&nbsp;return newRefCount;</p>
<p>}</p>
<p>DoSomething() is Save() or anything else that can be done with object at finalization time (we can play some music there, for example ;) DoSomething MUST be wrapped by AddRef() and return Release(), AddRef revives object back to working state and Release undoes that, any attempts to save some CPU ticks by removing those is a hack. The recursion can be optimized away, it will give something like porter&#8217;s version above. But from high-level point of view, all of those steps must be done. As they used to say here in Russia, &quot;step to the left, step to the right is an escape attempt&#8230;&quot; :)</p>
<p>It all may seem excess. Technically, you can always squeeze non-destructing finalizer, DoSomething, and destructor into a single entity (which can only be the C++ destructor, of course).</p>
<p>But, you see, such a mixture is actually a hack that mixes two very different abstractions &#8211; GC finalizers and C++ destructors (that aren&#8217;t simply interchangeable). And setting reference count directly is even more a hack. You should never set it directly. You should not touch the reference count field at all except when in constructor, AddRef or Release (and the finalizer or destructor code doesn&#8217;t count as &quot;in Release&quot;). Because if you set it to, say, 42, it&#8217;s not a reference count anymore, it&#8217;s &quot;reference count except when the object runs its destructor, in that case it&#8217;s reference count + 41&quot; (wait, or + 42? or +43? can you really tell?). You&#8217;ve lost your abstraction for an optimization. And is there really any benefit from this optimization?</p>
<p>What&#8217;s worse, this optimization is not correct in general case (again, broken abstraction come back to haunt you). Because, you see, DoSomething could use the object after it returns. Yeah, we can define contract for DoSomething so it doesn&#8217;t do such nasty things. But, wait, how can we? If it does something beyond trivial, like saving the object to persistent storage or playing some music dependent on object&#8217;s data, then it could be given to us as a ready-to use black box. Interfaces in, interfaces out, ready to use implementation, no modifications accepted. That&#8217;s, actually, more a norm of component-based development than an exception, AFAIK.</p>
<p>With proper reviving, such a more complex scheme will just work. The only thing needed is correct reference counting in the other component: it takes reference to the revived object, it holds it until it&#8217;s done with the object, and voila, the C++ destructor call is properly delayed.</p>
<p>With the dirty hack by calling destructor always and setting refcount to 42 there (or 1000, or 1) the C++ destructor of our object will ignore the reference count and kill the object instantly. While another component still works on it somehow. Craaashhh.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-786163">
				<div id="div-comment-786163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-786163">
			November 13, 2009 at 12:08 am</a>		</div>

		<p>@!GWO: &#8220;Very funny! Ha ha ! &#8220;I don&#8217;t understand the problem or the solution, but its wrong ! wrong wrong wrong ! And I cant think of a better design! That makes me smart ! Whee !&#8221;&#8221;</p>
<p>I do know the solution. &nbsp;The solution is properly designed ownership semantics, and programmers who understand notions of ownership. &nbsp;</p>
<p>By the time the destructor runs, there should be no need to ever add an additional reference to this object. &nbsp;If you don&#8217;t understand why this is the case, you don&#8217;t understand what a destructor is for. &nbsp;No destructor should call a function that believes it owns the thing it receives. &nbsp;To do so is very bad design, and no matter how you lie to the reference count, it *will* come back and bite you.</p>
<div class=post>[<i>You&#8217;re missing the forest for the trees. Fine, we stop doing scary stuff in the destructor by rewriting Release like this: </p>
<pre>ULONG MyObject::Release()
{
 LONG cRef = InterlockedDecrement(&amp;m_cRef);
 if (cRef &gt; 0) return cRef;
 Finalize(); // disconnect handlers, write out unsaved changes, etc.
 delete this;
 return 0;
}
</pre>
<p>All the problems we had in the destructor are now problems in Finalize(). -Raymond</p>
<p></i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-786293">
				<div id="div-comment-786293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-786293">
			November 13, 2009 at 11:29 am</a>		</div>

		<p>@avek,</p>
<p>That&#8217;s the most reasonable thing.</p>
<p>Even then, suppose you called the finaliser, and some of its code path (like Save to remote HTTP host) will need to hold the object ref). You then need to make sure all interfaces are OK after the finaliser returned. And god forbid the finaliser fails. Then you just have to accept that &quot;when axing a forest, the chips get scattered around&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-786353">
				<div id="div-comment-786353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-786353">
			November 13, 2009 at 1:40 pm</a>		</div>

		<p>Thinking about this, it seemed kind of unfair that the last person to release the object got stuck waiting around while the object did its finalization.</p>
<p>So I came up with the following idea. &nbsp;When you&#8217;ve detected that your last reference is being released, schedule a work item to finalize the object, including deleting it, and return 0.</p>
<p>That work item can assume that no other threads have a reference to the object when it starts. &nbsp;It still gets complicated if one of the things that gets a reference to the object during cleanup decides to hold on to the reference, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-786573">
				<div id="div-comment-786573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091111-00/?p=16073#comment-786573">
			November 16, 2009 at 6:51 am</a>		</div>

		<p>No it&#8217;s not &quot;unfair&quot;. It&#8217;s how refcount works and how library users expect it to work. By changing this behaviour you just make the inner of your library more obscure.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>