<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239656">
				<div id="div-comment-1239656" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239656">
			June 26, 2015 at 10:37 am</a>		</div>

		<p>Raymond, I never tire of your wonderful analogies used when explaining sometimes slightly obscure topics.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1239646">
				<div id="div-comment-1239646" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239646">
			June 26, 2015 at 10:52 am</a>		</div>

		<p>Is 8K threads really so bad? &nbsp;Assuming 64KB of stack, you&#39;ll have used up 512MB of address space by the time you get that far, which is a quarter of the 2GB limit. &nbsp;And that may not even be the bottleneck. &nbsp;In &quot;Pushing the limits&quot;, Mark Russinovich says that each thread needs 12KB of non-pageable memory in the kernel. &nbsp;Assuming this was true back when NT came out, you would hit need 96 megs of ram to handle more threads than that anyway, which was a &quot;insane&quot; amount of memory in those days (source: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2003/08/14/54640.aspx">blogs.msdn.com/&#8230;/54640.aspx</a>). &nbsp;I&#39;ll admit ram is a short term concern due to Moore&#39;s law, but still: is it worth it? &nbsp;(I would normally say it&#39;s harmless so why not do it anyway, but as you pointed out, there are programs that might break thanks to this optimization. &nbsp;Not many, but then again, not many would benefit either.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239636">
				<div id="div-comment-1239636" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239636">
			June 26, 2015 at 11:26 am</a>		</div>

		<p>Were there any compatibility shims added in Windows NT for those misbehaving programs that, when activated, gave each thread in the process its own unique selector? &nbsp;Or were those misbehaving programs left to break in Windows NT (and their users left to blame Microsoft)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1221811">
				<div id="div-comment-1221811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1221811">
			June 26, 2015 at 1:50 pm</a>		</div>

		<p>Some related stuff about this that has changed since Windows 7&#8230;</p>
<p>Windows 7 added User-Mode Scheduling, allowing switching threads in user mode. &nbsp;This is only supported in the x86-64 build, as far as I know. &nbsp;In 7 and 8.0, this was implemented by creating an LDT (local descriptor table) for the process, and creating a descriptor+selector for each user-mode schedulable thread&#39;s TEB, much like Windows 9x did. &nbsp;The user-mode scheduler code then switched threads by changing the value of the GS register. &nbsp;(*) &nbsp;Like Windows 9x, this results in a limit of 8191 threads, but this limit is per-process, not for the whole system, which is much more reasonable.</p>
<p>Windows 8.1 also supports this LDT mechanism, but adds a new one: wrgsbase. &nbsp;If the host CPU supports the rdgsbase/wrgsbase instruction, Windows 8.1 will enable this instruction and also permit its use from user mode. &nbsp;Instead of creating an LDT and descriptors for user-mode threads, the kernel just lets user mode arbitrarily set the GS base to whatever address. &nbsp;Upon entry to kernel mode, the kernel reads the GS base and looks up what address user mode had assigned to GS&#39;s base; this base becomes the current TEB. &nbsp;(This is checked against the list of valid TEBs for security reasons. &nbsp;It&#39;s only a security risk while in kernel mode, though, so checking upon entry is sufficient.)</p>
<p>(*) x86-64 Windows uses GS for the TEB, whereas x86-32 Windows uses FS. &nbsp;The reason for this is that the fast x86-64 instruction to simultaneously read out user mode&#39;s GS base and replace it with kernel mode&#39;s GS base, swapgs, does not have an FS equivalent. &nbsp;It is doubly convenient to be a different segment register from x86-32 Windows because both the x86-32 and x86-64 TEBs can be loaded into segment registers while in WOW64.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239626">
				<div id="div-comment-1239626" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239626">
			June 26, 2015 at 7:14 pm</a>		</div>

		<p>Minor correction to the above: The wrgsbase stuff for Windows 8.1 and 10 is only used for User-Mode Scheduling threads. &nbsp;I forgot the word &quot;scheduled&quot; in one sentence.</p>
<p>wrgsbase can be used by non-UMS programs on Windows 8.1 and 10, but the next time the kernel is entered on that CPU, which is the next clock tick or system call, the GS base will be set back to a valid TEB, so it&#39;s not a good idea. &nbsp;Use the real UMS API, which handles user-mode scheduling for you, whether by LDT selectors or wrgsbase.</p>
<p>wrgsbase support being enabled and allowed is indicated by IsProcessorFeaturePresent(PF_RDWRFSGSBASE_AVAILABLE). &nbsp;Don&#39;t use cpuid to check for the feature.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1239616">
				<div id="div-comment-1239616" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239616">
			June 26, 2015 at 9:15 pm</a>		</div>

		<p>Why Windows x64 continue to use segments? Could all of that be handled another way?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239606">
				<div id="div-comment-1239606" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239606">
			June 26, 2015 at 9:42 pm</a>		</div>

		<p>@Myria: I think you accidentally answered my question. &nbsp;I didn&#39;t realize the 8k limit was not per process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1239596">
				<div id="div-comment-1239596" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239596">
			June 27, 2015 at 1:38 am</a>		</div>

		<p>Correct, the limit of 8K was system wide.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239566">
				<div id="div-comment-1239566" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239566">
			June 27, 2015 at 8:33 pm</a>		</div>

		<p>&quot;Is 8K threads really so bad?&quot; &nbsp;Yes. &nbsp;According to Resource Monitor I have 2377 threads right now. &nbsp;This is on my Win 7 64-bit laptop with a modest 16 GB RAM (currently uisng half of that) currently running: a few dozen Chrome tabs, an Internet Explorer tab, 3 Notepads, CMake GUI, Git Extensions, Process Explorer, 3 command prompts, an explorer window, Task Manager, Skype, Outlook, KeePass, ScanSnap, and 20 system tray icons I can&#39;t be bothered to list right now.</p>
<p>OK so it&#39;s not 8K threads yet, but I bet I&#39;ve hit that limit in the past and also on my work computer. &nbsp;It&#39;s certainly within striking range.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1239556">
				<div id="div-comment-1239556" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239556">
			June 27, 2015 at 8:55 pm</a>		</div>

		<p>@James Johnston: You would have hit the memory limit first. Anyway, Win 95 cannot possibly hit the limit as this requires &gt; 128MB RAM, which causes Win95 to crash on boot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239546">
				<div id="div-comment-1239546" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239546">
			June 28, 2015 at 6:50 pm</a>		</div>

		<p>Presumably NT must have allocated one TEB selector per CPU?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1239536">
				<div id="div-comment-1239536" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239536">
			June 28, 2015 at 9:32 pm</a>		</div>

		<p>&quot;Is 8K threads really so bad?&quot;</p>
<p>It ought to be enough for anybody.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239526">
				<div id="div-comment-1239526" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239526">
			June 29, 2015 at 5:43 am</a>		</div>

		<p>@kme &#8211; you don&#39;t actually need to have a different value of the TEB selector per CPU. You can instead have a copy of the GDT per CPU instead because there is no need for all CPUs to point to the same GDT. This uses more memory since you have to have many copies of the GDT, but stops you from needing to bake the maximum number of CPUs into the GDT, although it amounts to the same thing. It is also useful for the TSS selector. This is only an issue for x86-32 anyway, because on x86-64 fs and gs relative accesses use the regular data segment, but apply the offsets in the fsbase and gsbase registers so you don&#39;t need to allocate selectors for them.</p>
<p>@EduardoS &#8211; Windows on x86-64 continues to use segments because the CPU continues to use segments and Windows has to work on the CPU. Segments on x86-64 don&#39;t work the same though. Data segments always start at virtual address 0 and always have full length &#8211; the CPU will fault if you try to do anything different from that in long mode. Think of them as being like the appendix of the CPU &#8211; they&#39;re still there, but they don&#39;t do anything useful any more. FS and GS are special, and effectively just give you a fast way of accessing some structure in memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1239496">
				<div id="div-comment-1239496" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239496">
			June 29, 2015 at 7:12 am</a>		</div>

		<p>Where your analogy falls apart is that having a person program the radio on each and every car really doesn&#39;t scale the same was as the TEB example for NT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239466">
				<div id="div-comment-1239466" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239466">
			June 29, 2015 at 7:48 am</a>		</div>

		<p>Having a huge number of threads is a &quot;code smell&quot; like having a huge number of handles, IMO.</p>
<p>Not to pick on Microsoft, but on my PC (currently idle, not doing anything special, rather standard setup) Outlook 2010 uses 50 threads and 10000 handles.</p>
<p>It&#39;s a bit sad when one considers all the good and performant ways to do async work in Windows (like IOCP and thread pools)..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1239396">
				<div id="div-comment-1239396" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239396">
			June 29, 2015 at 12:13 pm</a>		</div>

		<p>@St,</p>
<p>I know AMD choose to keep FS and GS selectors, my question was why MS decided to still use them, why not just make the only valid selector &quot;0&quot; and solve the TEB problem some other way? Other architectures don&#39;t have selectors so Windows must do this in another way, why keeping this perk on x64?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239386">
				<div id="div-comment-1239386" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239386">
			June 29, 2015 at 2:23 pm</a>		</div>

		<p>Other architectures have lots more registers, and those that don&#39;t (ARM), use other means (system call?) to retrieve thread local data, at least with other OSs (Linux, *BSD). &nbsp;Windows is likely the same.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1239376">
				<div id="div-comment-1239376" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239376">
			June 29, 2015 at 3:41 pm</a>		</div>

		<p>@Joshua:</p>
<p>&quot;Win 95 cannot possibly hit the limit as this requires &gt; 128MB RAM, which causes Win95 to crash on boot.&quot; &nbsp;Really? &nbsp;128 megabytes of RAM is too much for Windows 95?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1239366">
				<div id="div-comment-1239366" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1239366">
			June 29, 2015 at 6:53 pm</a>		</div>

		<p>DWalker: I believe the actual limit was 512MB, but I think there was a workaround to allow more.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1221801">
				<div id="div-comment-1221801" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1221801">
			June 29, 2015 at 7:26 pm</a>		</div>

		<p>@EduardoS: On Windows RT and Windows Phone, whose architecture is ARMv7-Thumb2, an example I just tried implemented NtCurrentTeb() as &quot;mrc p15, 0, r1, c13, c0, 2&quot;. &nbsp;In other words, for thread-local storage, they read a value from a control register into a regular register, r1 in this case. &nbsp;Some control registers are accessible from user mode on ARM. &nbsp;This one might be read-only from user mode; I&#39;m not sure.</p>
<p>I imagine that on x86, the FS/GS segment registers are just used because they are convenient and not used for anything else useful. &nbsp;(If they didn&#39;t exist, ES would be the best alternative, but using it would be annoying, because ES is used implicitly by the stos* and movs* opcodes.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196031">
				<div id="div-comment-1196031" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">St</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1196031">
			July 1, 2015 at 1:38 am</a>		</div>

		<p>@EduardoS &#8211; you really need to use GS on x64 if you want to use the fast syscall/sysret instructions to get in and out of the kernel, which you do because they&#39;re fast. When the CPU executes a syscall instruction it doesn&#39;t update any of its state, and just switches the privilege level and jumps into the kernel, so the first thing you have to do is to get to a kernel stack. None of the CPU state can be trusted at that point &#8211; including the current stack pointer &#8211; except the kernel mode GS base which you swap in with the swapgs instruction. You do a swapgs, and then use whatever structure you have pointed to by GS to find your stack so that you can continue operating. Also, accessing the TEB through FS and GS is fast &#8211; other processors have similar concepts, such as the control registers on ARM. Not using these facilities out of a sense of purism and using something slower instead would be an odd choice. I gather that Linux does much the same thing, for much the same reasons.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1238516">
				<div id="div-comment-1238516" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150626-00/?p=45281#comment-1238516">
			July 8, 2015 at 6:29 am</a>		</div>

		<p>If this appears, it is possible to post a comment after comments are closed. Just a curiosity.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>