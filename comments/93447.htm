<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-hankhein even thread-even depth-1 parent" id="comment-1248565">
				<div id="div-comment-1248565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henri+Hein' rel='external nofollow' class='url'>Henri Hein</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160512-00/?p=93447#comment-1248565">
			May 12, 2016 at 1:56 pm</a>		</div>

		<p>I have mixed feelings about the default security descriptor.  On the one hand, creating an SD is enough work, and would result in enough leaks, that it is probably necessary to accept NULL in all those calls that take an SD.  On the other hand, lots of subtle bugs come up because the default security descriptor is sometimes not the right thing, and they are hard to solve, because only those deeply familiar with the system will naturally look towards it as a source of a problem.  It can also be intimidating for a developer to contemplate creating one from scratch, and there is not always an object at hand from which to retrieve a copy, as in the above instance.  If developers were forced to create an SD more often, they might learn to understand what it is, what it can represent, and when the default one might not be correct.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1248575">
				<div id="div-comment-1248575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160512-00/?p=93447#comment-1248575">
			May 12, 2016 at 3:44 pm</a>		</div>

		<p>On the whole I think the balance is firmly on the side of having the defaults.  I&#8217;m prepared to bet that if we didn&#8217;t, 90% of software would use security descriptors consisting of a single ACE granting full access to Everyone, because learning how to do anything else would be too much trouble.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-hankhein even depth-3 parent" id="comment-1248585">
				<div id="div-comment-1248585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henri+Hein' rel='external nofollow' class='url'>Henri Hein</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160512-00/?p=93447#comment-1248585">
			May 12, 2016 at 4:57 pm</a>		</div>

		<p>I absolutely agree.  I do wish there were more material around security descriptors.  Such as examples, utility/helper classes, and blog posts on gotchas, like this one.  The ATL classes are actually decent, but I rarely see them used, or pointed to.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1248595">
				<div id="div-comment-1248595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160512-00/?p=93447#comment-1248595">
			May 12, 2016 at 5:17 pm</a>		</div>

		<p>Now that I come to think of it, it *would* be pretty neat if every API function that accepted a SECURITY_ATTRIBUTES structure could accept an SDDL instead, perhaps wrapped in a macro that does the cast and adds a magic value at the beginning for disambiguation.  But you know, -100 points and all. :-)</p>
<p> &#8230; and all too many programmers still wouldn&#8217;t bother to learn how to use the string, and would just use some example code they found somewhere that sets it to Everyone:(F) or equivalent. :-(</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1248695">
				<div id="div-comment-1248695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://programmerman.net/' rel='external nofollow' class='url'>Nick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160512-00/?p=93447#comment-1248695">
			May 13, 2016 at 1:04 pm</a>		</div>

		<p>setacl 777 #jackpot</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt depth-2" id="comment-1248596">
				<div id="div-comment-1248596" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160512-00/?p=93447#comment-1248596">
			May 12, 2016 at 7:10 pm</a>		</div>

		<p>Except for really simple one, attempt to create new security descriptor instead of copying a security descriptor is bad. In that way you can accidentially erase properties introduced in a new version of Windows. (In similar sense to &#8220;newing a DCB and setting it&#8221; instead of &#8220;calling GetCommState(), copy it and set the desired values&#8221; for serial communication)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1248725">
				<div id="div-comment-1248725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160512-00/?p=93447#comment-1248725">
			May 13, 2016 at 3:27 pm</a>		</div>

		<p>Interesting, if pseudohandle returned by GetCurrentThreadToken() will work if thread impersonates token thats inaccessible for open by it?<br />
Its interesting because same surprise may happen (or happened in some older Windows) with CreateProcessAsUser function if called without proper impersonation &#8211; caused created process/thread do not have access rights to themselves, that subsequently causes something (AFAIR again COM stuff) to behave incorrectly. And pseudohandles returned by GetCurrentThread()/Process() worked fine, so that issue was not very obvious.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>