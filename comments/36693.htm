<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (116)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-244293">
				<div id="div-comment-244293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Serge Wautier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244293">
			January 14, 2005 at 7:48 am</a>		</div>

		<p>Look, I didn&#8217;t want to ask but there are 1000 guys pushing me in the back and since I&#8217;m the smallest one and I wear glasses, they picked me. (They always pick me&#8230; snif!)</p>
<p>So&#8230; What&#8217;s wrong in ComputeChecksum() version 2 ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244303">
				<div id="div-comment-244303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244303">
			January 14, 2005 at 7:50 am</a>		</div>

		<p>If it&#8217;s still wrong, how is recognizing that code &quot;isn&#8217;t bad&quot; helpful?  Isn&#8217;t any &quot;wrong&quot; code necessarily &quot;bad&quot;?  Since your &quot;another verson&quot; example &quot;is still wrong&quot;, how would you write it so that it is &quot;right&quot;?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244323">
				<div id="div-comment-244323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Memet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244323">
			January 14, 2005 at 7:53 am</a>		</div>

		<p>Raymond,</p>
<p> I agree that few books actually have solid samples. I remember even back a couple of years ago when Microsoft didn&#8217;t have solid samples, until it was understood that most programmers just copy/paste samples into their production code (or so I read about Microsoft&#8217;s policy).<br />
<br /> I still think though that it&#8217;s a matter of habit whether you see exceptions as difficult or not. From what I understand you are clearly used to error based code.<br />
<br /> In the sample you provided for example, the method doesn&#8217;t really follow the RAII model, and it is indeed subtle to spot the difference. But in my world, that function has failed if either new throws. So returning an icon that&#8217;s half built but not visible is not really what I&#8217;d want (because who knows, 5 lines down that call, someone might just simply set the Visible field to true).<br />
<br /> There are issues with exceptions, which are subtle, for instance unnamed variables a-la:<br />
<br />SomeClass::SomeClass( void ) : someMember(new SomeOtherClass( ::getType() , blah )<br />
<br />{<br />
<br /> // some code<br />
<br />}</p>
<p>That code is indeed wrong, because the order in which the expression inside the parenthesis is executed is undefined. getType might fail before the new is called. In any case, the object is temporary and will not be destroyed if an exception is thrown. Not cool.<br />
<br /> But for the class factory you show, I think it&#8217;s just a question of habit, either allow explicit instantiation:<br />
<br /> myIcon = new NotifyIcon();<br />
<br /> which can throw, in which case myIcon is either NULL or a valid object (no middle ground).<br />
<br />or make the class factory behave the same way:<br />
<br />NotifyIcon CreateNotifyIcon()<br />
<br />{<br />
<br />try<br />
<br />{<br />
<br /> NotifyIcon icon = new NotifyIcon();<br />
<br /> icon.Text = &quot;Blah blah blah&quot;;<br />
<br /> icon.Icon = new Icon(GetType(), &quot;cool.ico&quot;);<br />
<br /> icon.Visible = true;<br />
<br /> return icon;<br />
<br />}<br />
<br />catch(&#8230;)<br />
<br />{<br />
<br /> // your cleanup code<br />
<br /> throw; or return NULL;<br />
<br />}<br />
<br />}</p>
<p>Although, I prefer the throwing version because returning NULL takes you back to error mode programming.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244343">
				<div id="div-comment-244343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ryan Heath</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244343">
			January 14, 2005 at 8:02 am</a>		</div>

		<p>Serge,</p>
<p>If CheckSumMappedFile (or one of the another functions) throws an exception, it will leak the handles.</p>
<p>// Ryan</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244363">
				<div id="div-comment-244363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244363">
			January 14, 2005 at 8:19 am</a>		</div>

		<p>Of course the great thing about the RAII pattern is that it works whether you&#8217;re using exceptions or not &#8211; and makes your code much cleaner if you&#8217;re not using them.</p>
<p>I just wish there was a nice concrete and compact way of indicating that &quot;when this object gets unwound, it does its own cleanup&quot;. But then, we&#8217;d end up with a weird keyboard with all kinds of dingbats on it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244383">
				<div id="div-comment-244383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Valdas Sevelis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244383">
			January 14, 2005 at 8:39 am</a>		</div>

		<p>Of course, if the NotifyIcon would provide a decent constructor (instead of default one), one would not have to guess the order of assignment to instance variables&#8230;.</p>
<p>e.g.:<br />
<br />NotifyIcon CreateNotifyIcon()<br />
<br />{<br />
<br />NotifyIcon icon = new NotifyIcon(&quot;&quot;Blah blah blah&quot;, &quot;cool.ico&quot;);<br />
<br />return icon;<br />
<br />}<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244403">
				<div id="div-comment-244403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244403">
			January 14, 2005 at 8:57 am</a>		</div>

		<p>Ryan:<br />
<br />&gt; If CheckSumMappedFile (or one of the another functions) throws an exception, it will leak the handles. </p>
<p>So, you&#8217;re saying that even return code model stuff needs to be exception aware? I thought that the assumption was that the return code sample used returncodes throughout.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244413">
				<div id="div-comment-244413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CMV</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244413">
			January 14, 2005 at 8:59 am</a>		</div>

		<p>Serge: Also, GetFileSize could fail and return INVALID_FILE_SIZE, which would probably confuse the checksum algorithm.</p>
<p>Ryan: In principle, yes, but all those functions are in the C-compatible API. Unless I&#8217;m missing something, they shouldn&#8217;t throw C++ exceptions if they fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244433">
				<div id="div-comment-244433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cse.nd.edu/~dthain' rel='external nofollow' class='url'>Douglas Thain</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244433">
			January 14, 2005 at 9:06 am</a>		</div>

		<p>Hello Raymond,</p>
<p>I&#8217;m the author the citation that you complained about.  I went back to read my citation and your article.  You are right! Your first article doesn&#8217;t object to exceptions per se.  Please accept my apology.</p>
<p>But, I think you will find we are in full agreement regarding the matter at hand.  I cited your article in order to introduce a chapter on error propagation in distributed systems.  An important theme in this chapter is that exceptions are  misleading: it is easy to write beautiful exception code that gives the wrong result.  Beauty is no substitute for correctness.</p>
<p>Cheers,<br />
<br />Doug</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244443">
				<div id="div-comment-244443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.csc.calpoly.edu/~bfriesen/' rel='external nofollow' class='url'>Brian Friesen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244443">
			January 14, 2005 at 9:07 am</a>		</div>

		<p>I see two additional problems with ComputeChecksum() version 2.</p>
<p>First, pdwResult is not checked for a NULL value before passing it into CheckSumMappedFile().</p>
<p>Second, this code assumes the file being checksummed is less than 4GB.  The call to GetFileSize() would yield unexpected results for files greater than 4GB.  Also, an attempt to create and view a map of a really large file would probably fail.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244453">
				<div id="div-comment-244453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lowercase josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244453">
			January 14, 2005 at 9:14 am</a>		</div>

		<p>CreateNotifyIcon will leak memory if new Icon throws.</p>
<p>Exceptions are a lot like compiler-sanctioned macros that hide flow control.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244463">
				<div id="div-comment-244463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.csc.calpoly.edu/~bfriesen/' rel='external nofollow' class='url'>Brian Friesen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244463">
			January 14, 2005 at 9:15 am</a>		</div>

		<p>CMV, as far as I know any Win32 API can raise an exception.  Take for instance divide by zero, this would raise an exception.  Unless you can see the code for the function you&#8217;re calling or know for a fact it can&#8217;t raise an exception, it&#8217;s safer to assume all functions are at least capable of raising an exception.  So I think Ryan&#8217;s original point about leaked handles is valid.</p>
<p>P.S.  Darn you beat me to pointing out the GetFileSize() problem. :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244493">
				<div id="div-comment-244493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244493">
			January 14, 2005 at 9:49 am</a>		</div>

		<p>What language is the CreateNotifyIcon() function written in? If it&#8217;s C++, then both versions are incorrect, because they don&#8217;t free the NotifyIcon if an exception occurs later.</p>
<p>Furthermore, I&#8217;d like to argue that both functions are otherwise &#8216;good&#8217; &#8212; the design of NotifyIcon is bad because you should be able to set properties in random order. This has nothing to do with exceptions, but with bad component design.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244513">
				<div id="div-comment-244513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom Seddon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244513">
			January 14, 2005 at 10:05 am</a>		</div>

		<p>I don&#8217;t think divide by zero is the kind of exception raymond is talking about&#8230;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244523">
				<div id="div-comment-244523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cs.wisc.edu/~rkennedy/' rel='external nofollow' class='url'>Rob Kennedy</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244523">
			January 14, 2005 at 10:18 am</a>		</div>

		<p>Frederik, I don&#8217;t think it&#8217;s unreasonable for NotifyIcon to require its Icon property be set before changing its Visible property. I might even expect set_Visible to raise an exception if there were nothing to display. That&#8217;s an exception that only happens once, though, while the developer is still learning to use the class properly. It might not be ideal, but it&#8217;s a reasonable design.</p>
<p>We know that CreateNotifyIcon isn&#8217;t in C++ because of the syntax. So the function does not leak memory. Not permanently, anyway. If there is an exception, then the garbage collector will eventually release the NotifyIcon instance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244533">
				<div id="div-comment-244533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244533">
			January 14, 2005 at 10:20 am</a>		</div>

		<p>&quot;(It might not be good, but at least it isn&#8217;t bad.) &quot;<br />
<br />That is rather a matter of opinion.</p>
<p>I would say that code that to a cursory glance looks like it&#8217;s handling errors properly but isn&#8217;t is much worse than code that&#8217;s clearly not handling errors.  The latter code has the common courtesy to set off alarm bells.</p>
<p>&quot;(Yes, there are programming models like RAII and transactions, but rarely do you see sample code that uses either.) &quot;<br />
<br />That&#8217;s because sample code is usually there to demonstrate something other than error-handling.  Checking return codes in sample code is obfuscatory and frankly meritless.</p>
<p>Techniques like RAII make writing good code easy, particularly if you&#8217;re only demanding a weak exception-safety guarantee.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244543">
				<div id="div-comment-244543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codinghorror.com/blog/' rel='external nofollow' class='url'>Jeff Atwood</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244543">
			January 14, 2005 at 10:32 am</a>		</div>

		<blockquote><p>
  Subtle, isn&#8217;t it. </p>
<p>When is it ever a good idea to set something to .Visible() prior to it being completely loaded? Doesn&#8217;t seem all that subtle to me.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244553">
				<div id="div-comment-244553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Memet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244553">
			January 14, 2005 at 10:49 am</a>		</div>

		<p>Brian Friesen, Tom Seddon:<br />
<br /> Divide by Zero is not a C++ runtime exception (provided by the language), it&#8217;s a structured exception (SEH) provided by the platform. Two completely unrelated things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244563">
				<div id="div-comment-244563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.csc.calpoly.edu/~bfriesen/' rel='external nofollow' class='url'>Brian Friesen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244563">
			January 14, 2005 at 10:57 am</a>		</div>

		<p>Memet, I am aware of the difference between C++ exceptions and SEH.  However a C++ try/catch block can catch both types of exceptions.  So Ryan&#8217;s original point about leaked handles is still valid.  If one of the Win32 APIs raises an exception, regardless of the TYPE of exception, you should still catch it and free resources appropriately.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244573">
				<div id="div-comment-244573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244573">
			January 14, 2005 at 11:06 am</a>		</div>

		<p>Once upon a time, they told me it is a bad programming style to use goto. Asking me, exceptions are even worse than goto, since you don&#8217;t know where your code will end up. Yes, they are safe and yes, they will unwind your stack (probably, I really hope so), but still they are a complex goto to me. I think I&#8217;ll agree with Raymond on that one &#8211; I am not smart enough to handle them. </p>
<p>By the way, Memet&#8217;s example above is a good example how things can go from &quot;bad&quot; to &quot;worse&quot; &#8211; well, at least if C++ is used.</p>
<p>As for Raymond&#8217;s &quot;not bad&quot; version, question is, why should I bother checking intermediate error values, since every API used checks input too? </p>
<p>HANDLE hFile = CreateFile();<br />
<br />HANDLE hMap = CreateFileMapping();<br />
<br />LPVOID ptr = MapViewOfFile();<br />
<br />if (ptr) CalcCheckSum();<br />
<br />UnmapViewOfFile(ptr);<br />
<br />CloseHandle(hMap);<br />
<br />CloseHandle(hFile);</p>
<p>As simple as that. Imagine you have a lot of preconditions to handle&#8230; adding additional if&#8217;s will  produce something like:</p>
<p>if (cond)<br />
<br />   if (another)<br />
<br />      if (yet another)<br />
<br />         if (we still running)<br />
<br />            if (gosh this maybe last one)<br />
<br />               DoSomethingUseful();</p>
<p>now imagin every if with corresponding else, then imagine you have to rearrange couple conditions? In C++ it could be much more readable, without any execptions, will full error checkings and so on<br />
<br />CFile file = CreateFile();<br />
<br />if (!file) return;<br />
<br />CFileMap map = CreateFileMap();<br />
<br />if (!map) return;<br />
<br />CFileView view = MapViewOfFile();<br />
<br />if (!view) return;<br />
<br />DoSomethid();<br />
<br />return;</p>
<p>Viva C++</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244583">
				<div id="div-comment-244583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244583">
			January 14, 2005 at 11:06 am</a>		</div>

		<p>P.S. how do I enter code lines with indents here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244593">
				<div id="div-comment-244593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244593">
			January 14, 2005 at 11:13 am</a>		</div>

		<blockquote><p>
  When is it ever a good idea to set<br />
  <br />&gt; something to .Visible() prior to<br />
  <br />&gt; it being completely loaded? </p>
<p>Tell that to the person who wrote the sample code I was quoting. </p>
<p>&gt; Doesn&#8217;t seem all that subtle to me. </p>
<p>Okay, fine &quot;Visible&quot; carries too much semantic weight. Here&#8217;s something less obvious: </p>
<p>Node ExtendPath(Item item)<br />
  <br />{<br />
  <br />Node node = new Node();<br />
  <br />path.Add(node);<br />
  <br />node.item = item;<br />
  <br />node.color = item.GetColor();<br />
  <br />return node;<br />
  <br />} </p>
<p>Waleri: But what if you have methods that crash on invalid parameters?  For example,</p>
<p>IEnumConnectionPoints penum;<br />
  <br />pcpc-&gt;EnumConnectionPoints(&amp;penum);<br />
  <br />penum-&gt;Next(); // oops</p>
<p>In your C++ version you&#8217;re conveniently glossing over the complexity of, for example, making sure the file map is destroyed after the view (because the view relies on the file map).  Are you going to use reference counting?</p>
<p>Other issues brought up in the comments I already have plans to discuss later, so I&#8217;ll let them go for now.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244613">
				<div id="div-comment-244613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codinghorror.com/blog/' rel='external nofollow' class='url'>Jeff Atwood</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244613">
			January 14, 2005 at 11:21 am</a>		</div>

		<blockquote><p>
  Other issues brought up in the comments I already have plans to discuss later, so I&#8217;ll let them go for now. </p>
<p>OK, but one last thing: if I got an exception on New Icon(), the code would terminate execution immediately and get kicked to the registered global exception handlers.</p>
<p>So unless I&#8217;m missing something, any code downstream of New Icon()is effectively moot anyway; the program will abend. Note that we CAN&#8217;T say this about return codes. The program plows on heedlessly.. you can&#8217;t &quot;forget&quot; an exception because you abend.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244623">
				<div id="div-comment-244623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.phatbits.com/' rel='external nofollow' class='url'>Geoffrey</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244623">
			January 14, 2005 at 11:29 am</a>		</div>

		<p>Somebody,</p>
<p>Because your code is broken.  At the very least, you need to declare the pv, hfm, and h variables outside of the try scope.  And you need to initialize those variables to null, null, and INVALIDATE_HANDLE_VALUE respectively.  And then you need to check against those values before calling UnmapViewOfFile, CloseHandle, CloseHandle, etc.</p>
<p>&#8211; Geoff</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244633">
				<div id="div-comment-244633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244633">
			January 14, 2005 at 12:01 pm</a>		</div>

		<p>Waleri: But what if you have methods that crash on invalid parameters? For example, </p>
<p>&gt;&gt;&gt;IEnumConnectionPoints penum;<br />
<br />pcpc-&gt;EnumConnectionPoints(&amp;penum);<br />
<br />penum-&gt;Next(); // oops </p>
<p>Well, this isn&#8217;t exactly the case<br />
<br />ptr-&gt;Method() isn&#8217;t DoSomething(ptr);<br />
<br />In first case we&#8217;ll crash, second case depends on DoSomething implementation.<br />
<br />I agree, that this isn&#8217;t the best way to do things, I prefer the C++ version. My point was that using many nested if/else and/or try/catch makes things unreadble and makes execution workflow hard to trace</p>
<p>&gt;&gt;&gt; In your C++ version you&#8217;re conveniently glossing over the complexity of, for example, making sure the file map is destroyed after the view (because the view relies on the file map). Are you going to use reference counting? </p>
<p>Well, in this case they will be destroyed in correct order. If I have multiple mappings from a single map, then perhaps other implementation will apply. Frankly I really don&#8217;t know what to do if for some reason view unmapping fails. I never had this problem &#8211; when object is created correctly, it is always destroyed correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244653">
				<div id="div-comment-244653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244653">
			January 14, 2005 at 12:58 pm</a>		</div>

		<p>The compiler will easily catch the declaration errors, and I assumed that the CloseHandle functions would just do nothing when called on an already closed handle.  But the point of my question was not to get into the minutia of c++/c# and file function behaviours.  My question is &quot;What is generally wrong with exceptions that make them more complicated than checking return values?&quot;  The only difference I see between them is that exception systems just hides the return code and provides syntax for you to decide where you want to deal with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244663">
				<div id="div-comment-244663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vorn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244663">
			January 14, 2005 at 1:22 pm</a>		</div>

		<p>If only C++ compilers enforced the throw() declaration.  Then we&#8217;d always know where we end up, and all we&#8217;d have to worry about is screwing up operation order.  Which can be pretty heinous in itself, but at least we don&#8217;t have to worry about our exceptions crashing the program because we haven&#8217;t handled them.</p>
<p>Java is the only language I know of that has an enforced exception declaration&#8230; if only people actually used it.</p>
<p>Vorn</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244673">
				<div id="div-comment-244673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244673">
			January 14, 2005 at 1:24 pm</a>		</div>

		<p>&quot;Once upon a time, they told me it is a bad programming style to use goto. Asking me, exceptions are even worse than goto, since you don&#8217;t know where your code will end up. Yes, they are safe and yes, they will unwind your stack (probably, I really hope so), but still they are a complex goto to me.&quot;</p>
<p>Try-catch blocks are no more a goto than if-else blocks, while blocks, or for loops.  They are just another structure to do structured programming with.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244723">
				<div id="div-comment-244723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244723">
			January 14, 2005 at 1:32 pm</a>		</div>

		<p>(continued)</p>
<p>And it would probably be a good idea to assign pdwResult to a fail-state.</p>
<p>The problem with exceptions is that you have to know each exception that could be thrown by the functions that you&#8217;re calling, and handle them, or explicitly ignore them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244733">
				<div id="div-comment-244733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244733">
			January 14, 2005 at 2:01 pm</a>		</div>

		<blockquote><p>
  &gt;&gt;&quot;What is generally wrong with exceptions that make them more complicated than checking return values?&quot; </p>
<p>Well, nothing&#8217;s wrong if you develop in an evnvironment that doesn&#8217;t rely on the programmer to &quot;cleanup&quot;. If one have to close handles, release memory, etc, exceptions aren&#8217;t the best choice.<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244743">
				<div id="div-comment-244743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">autist0r</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244743">
			January 14, 2005 at 2:33 pm</a>		</div>

		<p>Exceptions are cool because you can provide information about the error to the catcher in a clean fashion, they can for example retrieve the error with ::GetLastError() or read errno&#8230; </p>
<p>But writing good exception-error-l33t-code needs to be done from scratch and thought like multithreaded code&#8230; Not so hard&#8230; If you&#8217;re trained. :) Requires a paranoid mind methinks.</p>
<p>Somebody, your code is wrong, you shouldn&#8217;t try to  close valid handles values&#8230; I would rather do it like this :</p>
<p>try<br />
<br />{<br />
<br />   HANDLE h = ::CreateFile(blah blah);<br />
<br />   if (h == INVALID_HANDLE_VALUE)<br />
<br />      throw CSome1337Exception();</p>
<p>  // &#8230; do something</p>
<p>   ::CloseHandle(h);<br />
<br />   h = INVALID_HANDLE_VALUE;<br />
<br />}</p>
<p>catch(&#8230;)<br />
<br />{<br />
<br />   if (h != INVALID_HANDLE_VALUE)<br />
<br />      ::CloseHandle(h);<br />
<br />   throw; // because exception should be handled and displayed at high level only IMHO<br />
<br />}</p>
<p>Just my 0.02 € :p</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244753">
				<div id="div-comment-244753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">autist0r</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244753">
			January 14, 2005 at 2:34 pm</a>		</div>

		<p>omg my code is wrong, of course h should be declared outside the try, all my apologies :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244763">
				<div id="div-comment-244763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cs.wisc.edu/~rkennedy/' rel='external nofollow' class='url'>Rob Kennedy</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244763">
			January 14, 2005 at 2:50 pm</a>		</div>

		<p>Waleri, being in an environment that requires programmers to write cleanup code isn&#8217;t a problem for exceptions. That&#8217;s why Microsoft C++ provides __try/__finally, for instance. Close your handles and release your memory in the finally blocks.</p>
<p>If you&#8217;re using standard C++, then use smart handles and pointers that know to release their resources when the stack unwinder destroys them.</p>
<p>If you&#8217;re using a language that doesn&#8217;t have garbage collection, doesn&#8217;t have try-finally blocks, and doesn&#8217;t have stack-unwindable objects, then I don&#8217;t know what you&#8217;re supposed to do. It strikes me that such a language shouldn&#8217;t be supporting exceptions in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244773">
				<div id="div-comment-244773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244773">
			January 14, 2005 at 3:25 pm</a>		</div>

		<p>&quot;But writing good exception-error-l33t-code needs to be done from scratch and thought like multithreaded code&#8230; Not so hard&#8230; If you&#8217;re trained. :) Requires a paranoid mind methinks.&quot;</p>
<p>I don&#8217;t think that you have to be any more paranoid than when using error codes.  You have to look at each function call and decide what should happen if an exception is thrown.  If the function modifies any state then a rollback strategy needs to be implemented.  This is exactly the same as in error-checking code.  You have to check the error code of each function call and do roll-backs if any state is modified.  To me, exception handling seems like a more flexible system.  You can decide where you do the error handling and it encourages you to use much richer error information than just a stupid number.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244783">
				<div id="div-comment-244783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spaces.msn.com/members/mpll' rel='external nofollow' class='url'>Pavel Lebedinsky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244783">
			January 14, 2005 at 3:29 pm</a>		</div>

		<p>Raymond is absolutely correct. But some of the comments are just totally wrong and/or missing the point:</p>
<p>&gt; I assumed that the CloseHandle functions<br />
<br />&gt; would just do nothing when called on an<br />
<br />&gt; already closed handle.</p>
<p>Handles are just numbers and can be reused.</p>
<p>Thread A: CloseHandle(1234);<br />
<br />Thread B: CreateMutex(&#8230;); // returns 1234<br />
<br />Thread A: CloseHandle(1234);</p>
<p>See the problem?</p>
<p>&gt; as far as I know any Win32 API can raise an &gt; exception.</p>
<p>Not under normal conditions. If you call CreateThread for example and it throws a SEH exception then the only safe thing to do is to kill your process.</p>
<p>There are a few exceptions to this (some APIs are documented to report failures with SEH exceptions and/or are using them internally) but in general most win32 APIs do not use SEH, and are not guaranteed to be SEH-safe.</p>
<p>&gt; However a C++ try/catch block can catch<br />
<br />&gt; both types of exceptions.</p>
<p>This is a bug in VC++. It&#8217;s been fixed in Whidbey &#8211; with default options, catch(&#8230;) no longer catches SEH exceptions.</p>
<p>&gt; Isn&#8217;t this a problem with unchecked<br />
<br />&gt; exceptions or am I missing something?</p>
<p>How would it help if the function declaration had a throws list? Detecting bad code in the Raymond&#8217;s example would still be hard.</p>
<p>Not to mention that &quot;checked&quot; exceptions in Java are only checked if you ignore everything derived from RuntimeError (or whatever it&#8217;s called).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244803">
				<div id="div-comment-244803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spaces.msn.com/members/mpll' rel='external nofollow' class='url'>Pavel Lebedinsky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244803">
			January 14, 2005 at 3:45 pm</a>		</div>

		<blockquote><p>
  You have to look at each function call and decide what should happen if an exception is thrown [&#8230;]. This is exactly the same as in error-checking code.</p>
<p>Right, you have to do the same (or similar) things in both cases. The difference is that with error codes, the results of this process are obvious &#8211; you have the error checking code right there in front of you. If there is no error checking then obviously there is a problem.</p>
<p>With exceptions you are never sure &#8211; you might have a bunch of function calls and no try/catch/finally&#8217;s. Is this because the code is buggy, or because somebody has carefully examined it and proved that it&#8217;s exception-safe?</p>
<p>It&#8217;s possible that if you train yourself to constantly think about exception safety you might eventually be able to spot bugs in large amounts of code that uses exceptions even more efficiently than with error checking. But I think most people do not have this ability.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244313">
				<div id="div-comment-244313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244313">
			January 14, 2005 at 7:52 am</a>		</div>

		<p>Serge, </p>
<p>Well, for one, it won&#8217;t compile.</p>
<p>void *pv = MapViewOfFile(hfm, FILE_MAP_READ, 0, 0, 0);<br />
<br />      if (pv) {<br />
<br />        DWORD dwHeaderSum;<br />
<br />        if (CheckSumMappedFile(pvBase, &#8230;</p>
<p>should be</p>
<p>void *pv = MapViewOfFile(hfm, FILE_MAP_READ, 0, 0, 0);<br />
<br />      if (pv) {<br />
<br />        DWORD dwHeaderSum;<br />
<br />        if (CheckSumMappedFile(pv, &#8230;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244813">
				<div id="div-comment-244813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244813">
			January 14, 2005 at 3:57 pm</a>		</div>

		<p>&quot;Thread A: CloseHandle(1234);<br />
<br />Thread B: CreateMutex(&#8230;); // returns 1234<br />
<br />Thread A: CloseHandle(1234); </p>
<p>See the problem? &quot;</p>
<p>Yes. I also assumed they were thread-safe.  Just like the CreateHande functions.  But that still does not explain that dealing with all of this is any more of a hassle using try-catch blocks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244823">
				<div id="div-comment-244823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244823">
			January 14, 2005 at 4:10 pm</a>		</div>

		<p>&quot;The difference is that with error codes, the results of this process are obvious &#8211; you have the error checking code right there in front of you.&quot;</p>
<p>Yes. But all of that error checking code obfuscates what the function is supposed to do.  It camouflages the logic of the function with all of the nested ifs.  I guess it depends on what is more important to you at the time.  Do you want to find out what the function does?  If yes, than having all of the logic exploded by the error code makes things harder.  If all you care about is the error handling code, than having it all visible and in one place makes it easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244833">
				<div id="div-comment-244833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244833">
			January 14, 2005 at 4:17 pm</a>		</div>

		<p>Somebody: I guess I don&#8217;t know what you mean by &quot;thread safe&quot; then. The handle functions are thread safe in the sense that you can safely use a handle created on any thread on any other thread, and you can use a handle simultaneously on two threads. Destroying an object twice is unrelated to thread safety.</p>
<p>Yes, it&#8217;s annoying seeing all the error handling code &#8211; but at least you know that it&#8217;s there. You can see that an error value was checked or ignored. But with exceptions you can&#8217;t tell whether an exception was left unhandled by mistake or on purpose.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244843">
				<div id="div-comment-244843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244843">
			January 14, 2005 at 4:28 pm</a>		</div>

		<p>I&#8217;ve never really seen an offcial definition but &quot;thrad safe&quot; to me means that one thread can not affect the state of another thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244853">
				<div id="div-comment-244853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244853">
			January 14, 2005 at 4:32 pm</a>		</div>

		<p>I forgot to add &quot;&#8230; unless explicitly given permission by the other thread.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244373">
				<div id="div-comment-244373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://maurus.net' rel='external nofollow' class='url'>Jonas Maurus</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244373">
			January 14, 2005 at 8:35 am</a>		</div>

		<p>Isn&#8217;t this a problem with unchecked exceptions or am I missing something? If you&#8217;d have to explicitly check every exception like you have to in Java, this problem would go away, right?</p>
<p>Mind you, I&#8217;m not saying Java is better or worse than any .Net technology, that&#8217;s not the argument I want to make, I just needed an example.</p>
<p>In my mind, the .Net Exception model is useful to raise Exceptions for errors you don&#8217;t *expect* to happen and use errorcodes for the rest, while in the Java world Exceptions are indeed useful to propagate problems through the code. I also was under the impression that the class library was designed with this idea in mind, or not?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244863">
				<div id="div-comment-244863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244863">
			January 14, 2005 at 4:36 pm</a>		</div>

		<p>&quot;one thread cannot affect the state of another thread&quot; -&gt; By that definition, not even &#8216;new&#8217; is thread safe.  &#8216;new&#8217; affects a global shared resource (namely the free store) and therefore has cross-thread consequences.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244873">
				<div id="div-comment-244873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Barry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244873">
			January 14, 2005 at 4:43 pm</a>		</div>

		<p>[quote]This is a bug in VC++. It&#8217;s been fixed in Whidbey &#8211; with default options, catch(&#8230;) no longer catches SEH exceptions.[/quote]</p>
<p>This is a bug? Richter&#8217;s book states that Microsoft added this feature to the compiler. I always thought it convenient that you could rely on catch(&#8230;) for access violations thrown by memory mapped files.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244883">
				<div id="div-comment-244883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244883">
			January 14, 2005 at 4:51 pm</a>		</div>

		<p>&quot;By that definition, not even &#8216;new&#8217; is thread safe.&quot;</p>
<p>Well no.  &#8216;New&#8217; is supposed to raise an exception when it can&#8217;t allocate memory.  One thread calling &#8216;new&#8217; has no effect on another thread that has already called &#8216;new&#8217;.  It will have an effect on the other thread&#8217;s ability to call &#8216;new&#8217; again but that is part of the interface of &#8216;new&#8217;.  I guess, my more detailed definition of a &quot;thread safe&quot; API is that a thread will not cause any behavior in another thread that is not explicitly defined by the API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244423">
				<div id="div-comment-244423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sab39.dev.netreach.com/' rel='external nofollow' class='url'>Stuart Ballard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244423">
			January 14, 2005 at 9:03 am</a>		</div>

		<p>What would be nice is if there were an &quot;rollback&quot; block in C# (or whatever language). The semantics would be:</p>
<p>try {<br />
<br />  DoSomething();<br />
<br />} rollback {<br />
<br />  UndoSomething();<br />
<br />}</p>
<p>would be exactly equivalent to:</p>
<p>try {<br />
<br />  DoSomething();<br />
<br />} catch (Exception e) {<br />
<br />  try {<br />
<br />    UndoSomething();<br />
<br />  } catch {}<br />
<br />  throw e;<br />
<br />}</p>
<p>(I&#8217;m assuming, here, that the right thing to do on a failure of the Undo step is to ignore it. I don&#8217;t know what correct practice is here, but since you can only return one error condition from the function (regardless of whether you&#8217;re using exceptions or error codes) it seems preferable that external code should see the original error, rather than the error-cleaning-up-the-original-error. An alternative would be to throw the second error, but add the original to a chain of &quot;causes&quot;. I don&#8217;t think .NET has such a thing, and it would really need to be a tree, because both exceptions might already have causes by the time they got here.)</p>
<p>However you handle it, I think that like &quot;using&quot;, it&#8217;s a common enough pattern in correct code to be worth having syntax for. Consider the Database example from your original post:</p>
<p>public void GenerateDatabase() {<br />
<br />  try {<br />
<br />    CreatePhysicalDatabase();<br />
<br />    CreateTables();<br />
<br />    CreateIndexes();<br />
<br />  } rollback {<br />
<br />    DeletePhysicalDatabase();<br />
<br />  }<br />
<br />}</p>
<p>The only gotcha to remember here is that DeletePhysicalDatabase has to remember to handle the case where the database *didn&#8217;t* get created yet because CreatePhysicalDatabase() itself failed. Depending on whether CreatePhysicalDatabase() is itself atomic (or does its own cleanup correctly on failure) you could instead write:</p>
<p>public void GenerateDatabase() {<br />
<br />  CreatePhysicalDatabase();<br />
<br />  try {<br />
<br />    CreateTables();<br />
<br />    CreateIndexes();<br />
<br />  } rollback {<br />
<br />    DeletePhysicalDatabase();<br />
<br />  }<br />
<br />}</p>
<p>Oh, and as far as your &quot;easier to recognize bad code&quot; point goes, I disagree that it&#8217;s necessarily easy to recognize bad code in the error-handling case. If there&#8217;s no error handling it might be because the particular functions being called *can&#8217;t* fail (int add(int a, int b) would have a hard time failing). You still have to look at each chunk of code to know whether it needs error handling or not. On the other hand, with my proposed rollback clause, you could easily &quot;document&quot; the no-possible-failure or no-handling-needed cases like this:</p>
<p>try {<br />
<br />  DoSomething();<br />
<br />} rollback {} // No handling needed for failure</p>
<p>That also has the advantage that you could write an FxCop rule to ensure that *everything* (for some class of everything) is rolled back properly. Perhaps every method body, for example&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244893">
				<div id="div-comment-244893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244893">
			January 14, 2005 at 5:14 pm</a>		</div>

		<p>It is implicit in all APIs that you cannot pass invalid parameters. Double-closing a handle is an invalid parameter on the second call since the handle has already been closed.</p>
<p>I can&#8217;t believe I have to explain this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244913">
				<div id="div-comment-244913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spaces.msn.com/members/mpll' rel='external nofollow' class='url'>Pavel Lebedinsky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244913">
			January 14, 2005 at 5:29 pm</a>		</div>

		<p>Somebody: consider this example then.</p>
<p>Thread A: free(0x12345678);<br />
<br />Thread B: malloc(&#8230;); // returns 0x12345678<br />
<br />Thread A: free(0x12345678);</p>
<p>This is an obvious bug in the caller and has nothing to do with thread safety of malloc/free.</p>
<p>The CreateMutex/CloseHandle case is no different.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244923">
				<div id="div-comment-244923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spaces.msn.com/members/mpll' rel='external nofollow' class='url'>Pavel Lebedinsky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244923">
			January 14, 2005 at 5:50 pm</a>		</div>

		<blockquote><p>
  This is a bug? Richter&#8217;s book states that<br />
  <br />&gt; Microsoft added this feature to the<br />
  <br />&gt; compiler. I always thought it convenient<br />
  <br />&gt; that you could rely on catch(&#8230;) for access<br />
  <br />&gt; violations thrown by memory mapped files.</p>
<p>The fact that catch(&#8230;) could catch SEH exceptions even when compiled with /EHs (which has been the default since VC5) was most definitely a bug.</p>
<p>By the way, when dealing with memory mapped files you should be catching EXCEPTION_IN_PAGE_ERROR, not access violations or anything else. Using catch(&#8230;) for this purpose is a really bad idea since it will catch everything (access violations, stack overflows, illegal instructions, STATUS_NO_MEMORY etc), making all these other problems impossible to debug.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244503">
				<div id="div-comment-244503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244503">
			January 14, 2005 at 9:59 am</a>		</div>

		<p>I still don&#8217;t see how exceptions make things more difficult.  How is the difference between:</p>
<p>DWORD* ComputeChecksum(LPCTSTR pszFile)<br />
<br />{<br />
<br />  DWORD* pdwResult;<br />
<br />  HANDLE h = CreateFile(pszFile, GENERIC_READ, FILE_SHARE_READ,<br />
<br />       NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);<br />
<br />  HANDLE hfm = CreateFileMapping(h, NULL, PAGE_READ, 0, 0, NULL);<br />
<br />  void *pv = MapViewOfFile(hfm, FILE_MAP_READ, 0, 0, 0);<br />
<br />  DWORD dwHeaderSum;<br />
<br />  CheckSumMappedFile(pvBase, GetFileSize(h, NULL),<br />
<br />           &amp;dwHeaderSum, pdwResult);<br />
<br />  UnmapViewOfFile(pv);<br />
<br />  CloseHandle(hfm);<br />
<br />  CloseHandle(h);<br />
<br />  return pdwResult;<br />
<br />}</p>
<p>and:</p>
<p>DWORD* ComputeChecksum(LPCTSTR pszFile)<br />
<br />{<br />
<br />  DWORD* pdwResult;<br />
<br />  try {<br />
<br />     HANDLE h = CreateFile(pszFile, GENERIC_READ, FILE_SHARE_READ,<br />
<br />       NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);<br />
<br />     HANDLE hfm = CreateFileMapping(h, NULL, PAGE_READ, 0, 0, NULL);<br />
<br />     void *pv = MapViewOfFile(hfm, FILE_MAP_READ, 0, 0, 0);<br />
<br />     DWORD dwHeaderSum;<br />
<br />     CheckSumMappedFile(pvBase, GetFileSize(h, NULL),<br />
<br />           &amp;dwHeaderSum, pdwResult);<br />
<br />     UnmapViewOfFile(pv);<br />
<br />     CloseHandle(hfm);<br />
<br />     CloseHandle(h);<br />
<br />  }<br />
<br />  catch(Error e) {<br />
<br />     UnmapViewOfFile(pv);<br />
<br />     CloseHandle(hfm);<br />
<br />     CloseHandle(h);<br />
<br />     throw(e);<br />
<br />  }<br />
<br />  return pdwResult;<br />
<br />}</p>
<p>any more difficult to spot than the differences in the error-based-code you provided.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244933">
				<div id="div-comment-244933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244933">
			January 14, 2005 at 6:08 pm</a>		</div>

		<p>&quot;It is implicit in all APIs that you cannot pass invalid parameters. Double-closing a handle is an invalid parameter on the second call since the handle has already been closed.&quot;</p>
<p>But it is also implicit in the thread safe API that what is returned from a successful CreateHandle call can not be modified by any other thread unless it is passed to it.  You are guaranteed that the handle will be valid until it is closed by the same thread.  Should the fact that other threads have bugs mean that this assumption is invalid?  I don&#8217;t know. But you would have a much more robust system if the answer was no.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244953">
				<div id="div-comment-244953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244953">
			January 14, 2005 at 6:33 pm</a>		</div>

		<p>Yes, by the definition that you gave for thread safety the assumption would not be valid.  Still, that&#8217;s a pretty pedantic API.  I wouldn&#8217;t want to use it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244963">
				<div id="div-comment-244963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244963">
			January 14, 2005 at 6:45 pm</a>		</div>

		<p>I think you&#8217;ll find that most handle-based APIs operate under the same rules. Once you close a handle it is illegal to do anything with it (including close it again).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244973">
				<div id="div-comment-244973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244973">
			January 14, 2005 at 6:52 pm</a>		</div>

		<p>We don&#8217;t need exceptions. E_UNEXPECTED is good for everything!</p>
<p>&#8230; And yet it takes complexity to manage complexity.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244983">
				<div id="div-comment-244983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244983">
			January 14, 2005 at 7:07 pm</a>		</div>

		<p>&quot;I think you&#8217;ll find that most handle-based APIs operate under the same rules.&quot;</p>
<p>That may be true, but I don&#8217;t think that they should.  It is a pretty trivial fix to get them so that they don&#8217;t.  This is one of those things that can move things towards &quot;do what I mean&quot; instead of &quot;do what I say.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245003">
				<div id="div-comment-245003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Grant</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245003">
			January 14, 2005 at 7:48 pm</a>		</div>

		<blockquote><p>
  and even if you discovered that<br />
  <br />&gt; there are two points in the<br />
  <br />&gt; statement &quot;a = foo(b, c) + bar(x,y);&quot;<br />
  <br />&gt; which  throw (and may throw a<br />
  <br />&gt; possibly overlapping set of exception<br />
  <br />&gt; types) how the heck can you figure out<br />
  <br />&gt; that you have to clean up the side<br />
  <br />&gt; effects of foo() vs. the side effects<br />
  <br />&gt; of bar()? </p>
<p>Maybe I&#8217;m missing something, but couldn&#8217;t this be solved with:</p>
<p>try {<br />
  <br />d = foo(b, c);<br />
  <br />} catch { &#8230; }<br />
  <br />try {<br />
  <br />z = bar(x, y);<br />
  <br />} catch { &#8230; }<br />
  <br />a = d + z;</p>
<p>Although believe me, I&#8217;m not thrilled with the notion of having to wrap every single exception generating line of code in it&#8217;s own try/catch block.</p>
<p>If I&#8217;m going to have to do that, I&#8217;d rather write:</p>
<p>if ((d = foo(b, c)) != null) {<br />
  <br />if ((z = bar(x, y)) != null) {<br />
  <br />a = d + z;<br />
  <br />} else { &#8230; bar failed &#8230; }<br />
  <br />} else { &#8230; foo failed &#8230; }</p>
<p>Which I guess is partly Raymond&#8217;s point.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245023">
				<div id="div-comment-245023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245023">
			January 14, 2005 at 8:25 pm</a>		</div>

		<p>Pavel:<br />
<br />How would it help if the function declaration had a throws list? Detecting bad code in the Raymond&#8217;s example would still be hard.</p>
<p>Not to mention that &quot;checked&quot; exceptions in Java are only checked if you ignore everything derived from RuntimeError (or whatever it&#8217;s called).</p>
<p>That&#8217;s deliberate &#8211; under no circumstances should proper code throw a RuntimeException. The other stuff can show up in normal execution. What this means is that normal exceptions are part of a method&#8217;s fingerprint and must be handled. Runtime stuff is usually not handled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245033">
				<div id="div-comment-245033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Barry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245033">
			January 14, 2005 at 8:50 pm</a>		</div>

		<p>&quot;By the way, when dealing with memory mapped files you should be catching EXCEPTION_IN_PAGE_ERROR, not access violations or anything else. Using catch(&#8230;) for this purpose is a really bad idea since it will catch everything (access violations, stack overflows, illegal instructions, STATUS_NO_MEMORY etc), making all these other problems impossible to debug.&quot;</p>
<p>That makes sense. Thank you for clearing that up for me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244713">
				<div id="div-comment-244713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244713">
			January 14, 2005 at 1:30 pm</a>		</div>

		<p>One of the problems I see is that CreateFile and CreateFileMapping don&#8217;t throw exceptions.</p>
<p>Mixing exception-throwing code and error-return code will always result in something that looks really verbose, because you&#8217;ve got lots of </p>
<p>if( something_fails )<br />
<br />{<br />
<br />   throw SomeException();<br />
<br />}</p>
<p>and that doesn&#8217;t take into things like saving the error code and embedding it in the exception.</p>
<p>If you&#8217;ve got a system using RAII calling functions that throw exceptions (and the exceptions are documented), exception code works.  If you don&#8217;t, you end up with the exact same problem that you have with error-code functions.</p>
<p>The optimium version of the compute checksum function, assuming we had exception-throwing variants of CreateFile and CreateFileMapping, RAII HANDLES and pointers to the mapped file, and wanted to shield callers from normal exceptions would look something like like:</p>
<p>DWORD* ComputeChecksum(LPCTSTR pszFile)<br />
<br />{<br />
<br />	DWORD* pdwResult;<br />
<br />	try<br />
<br />	{<br />
<br />		HANDLE_RAII h = CreateFile(pszFile, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);<br />
<br />		HANDLE_RAII hfm = CreateFileMapping(h, NULL, PAGE_READ, 0, 0, NULL);<br />
<br />		FILEMAPVIEW_RAII pv = MapViewOfFile(hfm, FILE_MAP_READ, 0, 0, 0);</p>
<p>		DWORD dwHeaderSum;<br />
<br />		CheckSumMappedFile(pv, GetFileSize(h, NULL), &amp;dwHeaderSum, pdwResult);<br />
<br />	}<br />
<br />	catch( &#8230; )<br />
<br />	{</p>
<p>	}<br />
<br />	return pdwResult;<br />
<br />} </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245063">
				<div id="div-comment-245063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codinghorror.com/blog/' rel='external nofollow' class='url'>Jeff Atwood</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245063">
			January 15, 2005 at 12:12 am</a>		</div>

		<p>Per Chris Brumme:</p>
<p>So, if you are not a programming God like those OS developers, you should consider using exceptions for your application errors. They are more powerful, more expressive, and less prone to abuse than error codes. They are one of the fundamental ways that we make managed programming more productive and less error prone. In fact, the CLR internally uses exceptions even in the unmanaged portions of the engine. However, there is a serious long term performance problem with exceptions and this must be factored into your decision. </p>
<p><a target="_new" href="http://blogs.gotdotnet.com/cbrumme/permalink.aspx/d5fbb311-0c95-46ac-9c46-8f8c0e6ae561" rel="nofollow">http://blogs.gotdotnet.com/cbrumme/permalink.aspx/d5fbb311-0c95-46ac-9c46-8f8c0e6ae561</a></p>
<p>&#8212;</p>
<p>Yes, Raymond Chen is a programming god, but not all of us are so fortunate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245073">
				<div id="div-comment-245073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Nahr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245073">
			January 15, 2005 at 12:30 am</a>		</div>

		<p>I agree with Ian Nowland. The potential issues Raymond&#8217;s code shows are resolved by using the proper idiom: first create an object, then complete its initialization, then use it (adding to collection, showing on screen, whatever).</p>
<p>This sequence is completely natural once you&#8217;re used to it, and violations are fairly easy to spot as well &#8212; to my eyes anyway. Besides, it naturally lends itself to grouping the initialization steps into a separate &quot;paragraph&quot;, or factoring them out into a separate method.</p>
<p>In fact, I don&#8217;t see how this issue relates to error codes vs exceptions at all. Using an object before all required init steps have succeeded is always wrong. It&#8217;s just as wrong when you&#8217;re using error codes. You&#8217;ll at least have wasted time; possibly you&#8217;ll have written erroneous data to disk, or caused the screen to flicker, or whatever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-244903">
				<div id="div-comment-244903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244903">
			January 14, 2005 at 5:14 pm</a>		</div>

		<p>Since I&#8217;m opinionated, for once I&#8217;ll not restate my whole opinion and instead make some minimalist observations.</p>
<p>1. The &quot;cleanup&quot;/&quot;restore invariant&quot; problem has several solutions.  The best solution probably looks like a combination of RAII (for things which represent resources), try/finally (for restoring invariants in both error and non-error paths) and try/rollback (to use the previous commenter&#8217;s name; I don&#8217;t have a better one&#8230;)  Oh and IDisposable is OK too when you have &quot;using&quot; to go along with it.  I think that Herb Sutter would argue &quot;isn&#8217;t this just destructors with funny syntax?&quot; and I&#8217;d tend to agree.  Unfortunately no language has all of these.</p>
<p>2. cleanup/invariant restoration is hard but most of the problems there exist regardless of exceptions or not.  I do say most because if expressions can have side effects which need to be rolled back on error, it&#8217;s very hard to see just where the error/exit paths are.  As much as I&#8217;m in support of Raymond on this topic in general (even if he hates my error handling macros), I think that the error of the icon example would be just as unobvious in an error handling world.</p>
<p>I don&#8217;t recall what it&#8217;s called but there&#8217;s yet another programming style where enforced state transitions are modelled as separate objects with only constructors to demonstrate the state transition.  So your code would look something like:</p>
<p>int Foo(int x) {<br />
<br />A a(x);<br />
<br />B b(a, 7);<br />
<br />C c(b, x, -1);<br />
<br />return c.ReturnValue();<br />
<br />}</p>
<p>thus you constrain against sequencing / potential lost rollbacks by virtue that you can only do the operation implied by the C instance c if you already have a B, which can only be gotten if you already had an A.</p>
<p>I don&#8217;t know how much this is an ivory tower model vs. useful.  It seems somewhat crazy to me, but it&#8217;s the only suggestion I&#8217;ve heard of which makes RAII so ingrained in the pattern that even side effects and cleanup are guaranteed by virtue of using it.</p>
<p>3. The /really/ hard thing here is catching exceptions.  Let&#8217;s ignore the insanely bogus try { } catch (&#8230;) { /* cleanup */ throw; } pattern because even if you just meant to clean up, you didn&#8217;t.  You caught the exception and that fact in and of itself causes global side effects which will be hard to wriggle away from.</p>
<p>I won&#8217;t repeat my examples; go to my blog and read.  Any statement which has more than one point within it that can raise an exception makes catching exceptions raised by that statement ambiguous at best.  Further you can&#8217;t tell without whole-program analysis and even if you discovered that there are two points in the statement &quot;a = foo(b, c) + bar(x,y);&quot; which throw (and may throw a possibly overlapping set of exception types) how the heck can you figure out that you have to clean up the side effects of foo() vs. the side effects of bar()?</p>
<p>In practice you need to ensure that within a scope (e.g. try { /* scope! */ } catch &#8230;), there is only one code path which can cause a failure.  Otherwise you have no hope of being able to restore state.</p>
<p>&#8212;-</p>
<p>All this forms a limit to how high quality exception based code can be.  If you can convince yourself that &quot;exceptions are fat statuses with a special return value channel, coupled with a non-local goto capability&quot;, then arguably status based code has the same fundamental limit.</p>
<p>The thing is that Raymond&#8217;s blog here is right on the nose.  It&#8217;s way easier for bad exception based code to pass code review and test passes than bad status based code.  Maybe we need to get whole-program-analysis engines surgically grafted into our brains at some point but with the modern programming languages it&#8217;s impossible to even look at a piece of code and have any idea how bad it is, with all the conversions and operator overloading etc.</p>
<p>I&#8217;m very afraid that this whole fad is going to kill the software industry because we&#8217;ve enabled an order more magnitude code to be written per developer but the quality is a fraction of what it was and there is nearly zero perception/understanding that the flaws that exist today are actually flaws at all.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244943">
				<div id="div-comment-244943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-244943">
			January 14, 2005 at 6:20 pm</a>		</div>

		<p>&quot;You are guaranteed that the handle will be valid until it is closed by the same thread.&quot; </p>
<p>No, it is valid until closed by *any* thread. HANDLEs do not have thread affinity. They are thread-safe under the more traditional definition I gave earlier: <a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2005/01/14/352949.aspx#353366" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2005/01/14/352949.aspx#353366</a><br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245013">
				<div id="div-comment-245013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Nowland</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245013">
			January 14, 2005 at 8:07 pm</a>		</div>

		<p>To me if you are using exceptions and you are not using RAII or some other well defined and described idiom, I know immediately that the code is badly written. This is *really easy* to determine. The code may work, but it is still badly written.</p>
<p>Really you&#8217;re argument boils down to firstly &quot;exceptions in and of themselves are not a good error handling idiom,&quot; which I agree with. However you then try to tack on &quot; as it is very hard to determine whether exception-based code is bad or good you should never write sample code that relies on exceptions for error handling&quot;, which from my previous point I totally disagree with &#8211; it is very obvious when you are not using exceptions as part of some larger idiom.</p>
<p>If I was to split your single &quot;exception-based&quot; categorization into &quot;exception-based-without-idiom&quot; and &quot;exception-based-with-idiom” categories, then you&#8217;re original tables would become:</p>
<p>Really Easy:<br />
<br />&#8211; writing bad code of any type<br />
<br />Hard:<br />
<br />&#8211; writing good error-based or exception-based-with-idiom code<br />
<br />Impossible:<br />
<br />&#8211; writing good exception-based-without-idiom code (as even though it may work, if something is hard to understand then it is bad)</p>
<p>And:</p>
<p>Really Easy:<br />
<br />&#8211;  Recognizing that error-code-based code or exception-based-with-idiom code is badly-written<br />
<br />&#8211; recognizing the difference between bad error-code-based code and not-bad error-code-based code.<br />
<br />&#8211; recognizing the difference between exception-based-without-idiom code and exception-based-with-idiom code<br />
<br />&#8211; recognizing that exception-based-without-idiom code is badly or not-badly written (it is always badly written!)<br />
<br />&#8211; determining the normal (i.e. non-error) flow of exception-based-without-idiom and exception-based-with-idiom code.<br />
<br />Somewhat hard:<br />
<br />&#8211; determining the normal (i.e. non-error) flow of error-code-based code<br />
<br />Hard:<br />
<br />&#8211; Recognizing that error-code-based or exception-based-with-idiom code is not badly written</p>
<p>This seems to suggest that there should be no problem with using exception based-code in samples. It should be immediately obvious to an educated reader whether or not it is using a good idiom and is thus &quot;bad&quot; from the point of view of handling errors or not.  It also suggests that in production code, as long as you can establish a larger idiom for error handling, then you should use exceptions-with-idiom as opposed to error-code based code.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245053">
				<div id="div-comment-245053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spaces.msn.com/members/mpll' rel='external nofollow' class='url'>Pavel Lebedinsky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245053">
			January 14, 2005 at 10:57 pm</a>		</div>

		<p>&gt; under no circumstances should proper code<br />
<br />&gt; throw a RuntimeException. The other stuff<br />
<br />&gt; can show up in normal execution.</p>
<p><a target="_new" href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/RuntimeException.html" rel="nofollow">http://java.sun.com/j2se/1.4.2/docs/api/java/lang/RuntimeException.html</a></p>
<p>Take a look at the list of subclasses.</p>
<p>If I&#8217;m analyzing a piece of code to determine whether it&#8217;s exception-safe or not, I most definitely do *not* want to ignore things like IllegalArgumentException simply on the basis that they should never be thrown by &quot;proper code&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245083">
				<div id="div-comment-245083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">autist0r</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245083">
			January 15, 2005 at 12:50 am</a>		</div>

		<p>Somebody, exceptions are harder to use because of the numerous possible hidden path of execution they create, but you are very right on their advantages.</p>
<p>Some evil example :</p>
<p>FILE *f;</p>
<p>try<br />
<br />{<br />
<br />  f = fopen(blah);<br />
<br />  // blah blah<br />
<br />  fclose(f);<br />
<br />  f = NULL;<br />
<br />}</p>
<p>catch(&#8230;)<br />
<br />{<br />
<br />   fclose(f);<br />
<br />   throw;<br />
<br />}</p>
<p>The code above is ultra evil and will provoke an error much later in the code in some cases (at the next fopen)&#8230; See why ? :)</p>
<p>Hint, the bug is not present in this code :</p>
<p>FILE *f = fopen(blah);<br />
<br />if (!f) return error</p>
<p>//blah</p>
<p>fclose(f);</p>
<p>Why was it considered a but that catch(&#8230;) catches SEH ? To me it&#8217;s a feature&#8230; :p Ok, the clean way is to create a class and do a little SetUnhandledExceptionFilter&#8230;</p>
<p>Also don&#8217;t forget that throwing an exception while in a constructor can be ultra evil too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245123">
				<div id="div-comment-245123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245123">
			January 15, 2005 at 1:52 pm</a>		</div>

		<p>&quot;The potential issues Raymond&#8217;s code shows are resolved by using the proper idiom: first create an object, then complete its initialization, then use it (adding to collection, showing on screen, whatever).<br />
<br />&quot;</p>
<p>Er&#8230; the proper idiom is that creation and initialization are one and the same; that you can&#8217;t create uninitialized (invalid) objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245133">
				<div id="div-comment-245133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245133">
			January 15, 2005 at 5:31 pm</a>		</div>

		<p>Not if the resources used are expensive.</p>
<p>For example:</p>
<p>class Icon<br />
<br />{<br />
<br />private:<br />
<br />  HICON m_icon;<br />
<br />public:<br />
<br />  Icon() : m_icon(NULL)<br />
<br />  {};<br />
<br />  Create(RESID id)<br />
<br />  { &#8230;  }<br />
<br />}</p>
<p>So while you don&#8217;t have uninitialized member variables, you certainly end up with a not entirely created resource.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245163">
				<div id="div-comment-245163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245163">
			January 15, 2005 at 6:44 pm</a>		</div>

		<p>Raymond started to learn how to program with exceptions :)  Way to go!  Is it hard for him?  Yes it is indeed.  But he&#8217;s doing a good job.  There are still many things he&#8217;s clueless of.  His statement on RAII made me laugh.  Anyway as he goes on and become more familiar with the concept of exceptions, his posts will be more balanced than this one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245173">
				<div id="div-comment-245173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://chuacw.hn.org/chuacw' rel='external nofollow' class='url'>Chee Wee</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245173">
			January 15, 2005 at 8:42 pm</a>		</div>

		<blockquote><p>
  Waleri: But what if you have methods that crash<br />
  <br />&gt;on invalid parameters? For example,</p>
<p>What to do if there are methods that crash on invalid parameters? Microsoft already decided what to do in that case. Validate all parameters. ;o)</p>
<p>I can&#8217;t remember when that was first implemented in Microsoft code. NT 3.1 or NT 3.5? Or was it even way earlier?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245193">
				<div id="div-comment-245193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Maxime LABELLE</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245193">
			January 15, 2005 at 11:54 pm</a>		</div>

		<p>&quot;Also don&#8217;t forget that throwing an exception while in a constructor can be ultra evil too.&quot;</p>
<p>Well, at least in C++, part of a good idiom that makes using exceptions correctly possible is to *indeed* allow constructor to raise exceptions.</p>
<p>On the other hand, destructors in C++ should never *ever* be allowed to throw. That&#8217;s problably the only place where the dreaded<br />
<br />try { /* cleanup */ } catch (&#8230;) {} is not evil.</p>
<p>That is the basic assumption that underlies RAII, and coupled with the swap idiom, this makes using exceptions very easy and I believe correct as well.</p>
<p>Of course, the problem wherein the next guy hasn&#8217;t got a clue whether a method lacks exception handling on purpose or as an oversight remains ; but that is not a problem with the code, that is a problem with the team communications and guidelines&#8230;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245203">
				<div id="div-comment-245203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245203">
			January 16, 2005 at 9:32 am</a>		</div>

		<p>Thread Hijack warning:</p>
<p>Chee Wee: The validation mantra came in on Windows 3.1 (in the name of &quot;crash protection&quot;).</p>
<p>It continued forwards through the OS, and is now generally out of favor (checking for null pointers is considered &quot;ok&quot; but any other validation isn&#8217;t).</p>
<p>The problem of validating beyond null pointer checks is that the validation is utterly pointless, and can in fact introduce massive security holes in your application &#8211; Raymond and I have both written about this in the past.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245223">
				<div id="div-comment-245223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spaces.msn.com/members/mpll' rel='external nofollow' class='url'>Pavel Lebedinsky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245223">
			January 16, 2005 at 2:09 pm</a>		</div>

		<p>I think Chee Wee was talking about parameter validation for NT system services. This is a totally different thing. The OS is supposed to be isolated from the apps so it can&#8217;t afford crashing on invalid parameters. Inside a single process there&#8217;s no isolation so trying to avoid crashes on bogus pointers doesn&#8217;t make the process more reliable, it only hides bugs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245233">
				<div id="div-comment-245233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245233">
			January 16, 2005 at 4:33 pm</a>		</div>

		<p>Pavel, you mean midl /robust?  If that&#8217;s the case, then you&#8217;re absolutely right.  But there WAS a historical effort (now thoroughly discredited IMHO) to use SEH to try to validate inputs from within the process as well.</p>
<p>I think the MIDL /robust flag went in during one of the SPs on NT4, but I may be wrong &#8211; the RPC marshaller has been made successively more bulletproof with each release of windows, so&#8230;</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245243">
				<div id="div-comment-245243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spaces.msn.com/members/mpll' rel='external nofollow' class='url'>Pavel Lebedinsky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245243">
			January 16, 2005 at 5:00 pm</a>		</div>

		<p>No I was talking about what happens if you pass garbage parameters to system services like NtCreateProcess etc. The kernel uses SEH when accessing pointers passed to it from user mode.</p>
<p>But in user mode passing invalid pointers to APIs should (and usually does) crash the process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245263">
				<div id="div-comment-245263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://odetocode.com/Blogs/otcnews/archive/2005/01/16/903.aspx' rel='external nofollow' class='url'>OdeToCode Links</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245263">
			January 16, 2005 at 9:58 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245293">
				<div id="div-comment-245293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245293">
			January 17, 2005 at 3:40 am</a>		</div>

		<p>&quot;So while you don&#8217;t have uninitialized member variables, you certainly end up with a not entirely created resource. &quot;<br />
<br />The utility of the class you&#8217;ve created is decidedly non-obvious.  Why would you want an icon with, er, no icon?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245303">
				<div id="div-comment-245303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245303">
			January 17, 2005 at 3:41 am</a>		</div>

		<p>&quot;(In C++ it&#8217;s not quite so bad because C++ exceptions are raised only at specific points during execution. In C#, exceptions can be raised at any time.)&quot;<br />
<br />If one&#8217;s using an SEH platform, C++ can have asynchronous exceptions too&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245313">
				<div id="div-comment-245313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Petr Kadlec</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245313">
			January 17, 2005 at 4:49 am</a>		</div>

		<p>Stuart Ballard: I know at least one language that does have catch/rollback/commit/leave blocks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245333">
				<div id="div-comment-245333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Everett</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245333">
			January 17, 2005 at 6:07 am</a>		</div>

		<p>Chris Nahr: &quot;The textbook phrase &quot;creation is initialization&quot; only applies on a very basic level. That is, all properties have well-defined values, and accessing the object and its properties doesn&#8217;t crash the program.&quot;</p>
<p>Well, I&#8217;m not sure if &quot;creation is initialization&quot; is all that commonly used. NI the C++ end of things, the phrase is &quot;resource acquisition is initialization&quot;, and it means what it says &#8211; that you acquire resources on constructing your object. If you want to change some trivial property later on, then fine. But if your object is acquiring something that may fail to be available, eg opening a file, getting a mutex, it&#8217;s better to do it in the constructor.</p>
<p>The idea is that once you&#8217;ve constructed an object, it&#8217;s vaild and you can use it. You don&#8217;t have to remember to call some separate init() function, or to check if it&#8217;s been called already. </p>
<p>One common mistake in OO code is to have too much changing the state of objects after they&#8217;re created. In fact, by moving the initialization stage into constructors where possible, you can often have the majority of your objects constant once they&#8217;ve been created. This makes it easier to reason about the state of your program &#8211; in particular it becomes a lot easier to share things between threads.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245433">
				<div id="div-comment-245433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://verein.lst.de/~hch/' rel='external nofollow' class='url'>Christoph Hellwig</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245433">
			January 17, 2005 at 8:09 am</a>		</div>

		<p>okay, pasting did scewup indentation, sigh.</p>
<p><a target="_new" href="http://verein.lst.de/~hch/oldnewthing-error-handling.c" rel="nofollow">http://verein.lst.de/~hch/oldnewthing-error-handling.c</a> has the right version.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245593">
				<div id="div-comment-245593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sab39.dev.netreach.com/' rel='external nofollow' class='url'>Stuart Ballard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245593">
			January 17, 2005 at 9:54 am</a>		</div>

		<p>Christoph, your code looks an awful lot like a &quot;try-finally&quot; or &quot;using&quot; construct in C#. Your specific example seems to be closing everything down on success as well as failure, but it&#8217;s easy to see how you&#8217;d modify it to only close stuff down on failure. I&#8217;d argue that &quot;using&quot; is much easier to read than your version for the &quot;close everything down regardless&quot; case, and my suggested &quot;try-rollback&quot; construct is easier than the &quot;only close stuff on failure&quot; construct:</p>
<p>using (Handle handle = CreateFile(&#8230;)) {<br />
<br />  using (Handle hfm = CreateFileMapping(&#8230;)) {<br />
<br />    using (Something pv = MapViewOfFile(&#8230;)) {<br />
<br />      return CheckSumMappedFile(&#8230;);<br />
<br />    }<br />
<br />  }<br />
<br />}</p>
<p>Handle handle = CreateFile(&#8230;);<br />
<br />try {<br />
<br />  Handle hfm = CreateFileMapping(&#8230;);<br />
<br />  try {<br />
<br />    Something pv = MapViewOfFile(&#8230;);<br />
<br />    return pv;<br />
<br />  } rollback {<br />
<br />    hfm.Close();<br />
<br />  }<br />
<br />} rollback {<br />
<br />  handle.Close();<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245283">
				<div id="div-comment-245283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Spendlove</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245283">
			January 17, 2005 at 2:15 am</a>		</div>

		<p>Please, please, PLEASE could anyone posting about exceptions in C++ read Bjarne Stroustrup&#8217;s &quot;Appendix E&quot; note on exception handling? It has been present online for more than 4 years, at the location <a target="_new" href="http://www.research.att.com/~bs/3rd_safe0.html" rel="nofollow">http://www.research.att.com/~bs/3rd_safe0.html</a>. If someone posts and obviously hasn&#8217;t read this, they aren&#8217;t doing their reputations any favours.</p>
<p>And a lot of the people posting on this topic have clearly *not* read this, since they are coming up with some common misconceptions that Bjarne&#8217;s document addresses:</p>
<p>Misconception #1: Constructors shouldn&#8217;t throw exceptions.<br />
<br />Misconception #2: Exception safety requires rollback semantics.<br />
<br />Misconception #3: RAII has anything to do with rollback semantics.<br />
<br />Misconception #4: You should always use construct-and-swap when copying objects.</p>
<p>Nope, all wrong. Personally, when I interview C++ programmers, I won&#8217;t employ anyone in a non-junior position who hasn&#8217;t at least a passing familiarity with:<br />
<br />&#8211; RAII<br />
<br />&#8211; Levels of safety (nothrow/basic/strong)<br />
<br />&#8211; Rules for destructor invocation when exceptions are thrown in constructors</p>
<p>All you have to do is print off a document that is *free*, and spend a few days going over it. If you can&#8217;t or won&#8217;t do that, I certainly don&#8217;t want anything to do with your code! If you have read the document, and still prefer error codes to exceptions, that&#8217;s at least a position I can have some intellectual respect for.</p>
<p>The deterministic invocation times of destructors in C++ makes exception handling easy. You just need to follow a few simple rules, the main ones being:<br />
<br />&#8211; get yourself a ref-counted pointer template class (from boost, for instance)<br />
<br />&#8211; acquire resources in constructors<br />
<br />&#8211; hold resources in objects that free them when the destructor is called<br />
<br />&#8211; don&#8217;t write low-level methods that *both* mutate an object and access its properties<br />
<br />&#8211; only provide rollback where necessary</p>
<p>Now, if you prefer error codes to exceptions, then that&#8217;s up to you. But please don&#8217;t write on which you prefer in a public forum without at least having read what the creator of the C++ language has to say on the subject! It won&#8217;t impress anyone who has done some background reading.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245323">
				<div id="div-comment-245323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Nahr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245323">
			January 17, 2005 at 4:55 am</a>		</div>

		<p>&quot;Why would you want an icon with, er, no icon?&quot;</p>
<p>Forget about icons. The textbook phrase &quot;creation is initialization&quot; only applies on a very basic level. That is, all properties have well-defined values, and accessing the object and its properties doesn&#8217;t crash the program.</p>
<p>But those well-defined values are not necessarily the *desired* values. Any non-trivial class will have some properties that often won&#8217;t receive the intended value during construction. So you set them before you use the object, and that&#8217;s what I meant by &quot;completing initialization&quot;.</p>
<p>The alternative would be extra constructor overloads and parameters for every last rarely used property. That&#8217;s hardly desirable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245663">
				<div id="div-comment-245663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://verein.lst.de/~hch/' rel='external nofollow' class='url'>Christoph Hellwig</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245663">
			January 17, 2005 at 1:29 pm</a>		</div>

		<p>The &quot;using&quot; one confuses me a little.  It&#8217;ll work in an OO language where everything we do inbetween returns an object that has a destructor as soon as we leave scope.  But how would it work with things like:</p>
<p>error = allocate_backingtore(object, size);</p>
<p>that needs to be paired with a free_backingstore(object).</p>
<p>The try/rollback is clearly understandable to me, but still a little hard to read because it&#8217;s using up lots of vertical indentation.  In KNF I&#8217;d become unreadable really soon.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245713">
				<div id="div-comment-245713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://verein.lst.de/~hch/' rel='external nofollow' class='url'>Christoph Hellwig</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245713">
			January 17, 2005 at 2:58 pm</a>		</div>

		<p>Actually what I&#8217;m trying to do is to make my<br />
<br />life as little hard as possible.  And in C/C++ the error checking + goto method seems to be best to me &#8211; it&#8217;s more readable than traditional error handling + lots of nested ifdefs which is pretty much the only alternative in C and it&#8217;s also a lot easier to understand than C++-style exceptions.</p>
<p>The C# try/rollback does look like the most promising structured version to me indeed, because it makes very clear what&#8217;s happening &#8211; in fact the goto approch pretty much models it with more primitive language elements.</p>
<p>Waleri, of course you can insert the statement at the wrong place, but from years of experience with<br />
<br />complex C codebases I can say that&#8217;s much less unlikely than messing something up in huge conditionals, that often even repeat the same cleanup actions multiple times for slightly different errors.</p>
<p>Note that the Linux kernel doesn&#8217;t recreate lots of C++ concepts, but that&#8217;s getting a little offtopic here.  Feel free to drop me a mail if you want some insight in the programming concepts used there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245423">
				<div id="div-comment-245423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://verein.lst.de/~hch/' rel='external nofollow' class='url'>Christoph Hellwig</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245423">
			January 17, 2005 at 8:08 am</a>		</div>

		<p>I&#8217;m a bit suprised no one brought the goto cleanup style used e.g. about everywhere in the Linux kernel up.  I&#8217;d look something like (hope the pasting doesn&#8217;t screw up the indentation):</p>
<p>BOOL ComputeChecksum(LPCTSTR pszFile, DWORD* pdwResult)<br />
<br />{<br />
<br />        BOOL fRc = FALSE;<br />
<br />        HANDLE h, hfm;<br />
<br />        void *pv;<br />
<br />        DWORD dwHeaderSum;</p>
<p>        h = CreateFile(pszFile, GENERIC_READ, FILE_SHARE_READ,<br />
<br />                        NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);</p>
<p>        if (h == INVALID_HANDLE_VALUE)<br />
<br />                goto out;</p>
<p>        hfm = CreateFileMapping(h, NULL, PAGE_READ, 0, 0, NULL);<br />
<br />        /* XXX(hch): why are we not checking for INVALID_HANDLE_VALUE here? */<br />
<br />        if (!hfm)<br />
<br />                goto out_close_h;</p>
<p>        pv = MapViewOfFile(hfm, FILE_MAP_READ, 0, 0, 0);<br />
<br />        if (!pv)<br />
<br />                goto out_close_hfm;</p>
<p>        if (!CheckSumMappedFile(pv, GetFileSize(h, NULL),<br />
<br />                                &amp;dwHeaderSum, pdwResult))<br />
<br />                goto out_unmap_pv;</p>
<p>        fRc = TRUE;</p>
<p> out_unmap_pv:<br />
<br />        UnmapViewOfFile(pv);<br />
<br /> out_close_hfm:<br />
<br />        CloseHandle(hfm);<br />
<br /> out_close_h:<br />
<br />        CloseHandle(h);<br />
<br /> out:<br />
<br />        return fRc;<br />
<br />}</p>
<p>In my opinion this is a lot better to read than any of the variants above, OTOH religious goto-haters will probably try to kill me now..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245773">
				<div id="div-comment-245773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George Bailey</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245773">
			January 17, 2005 at 7:06 pm</a>		</div>

		<p>No wonder all software has bugs. Presumably the readers of this site are as a group at least slightly above average programmers, and yet almost everybody in this thread has posted incorrect code and/or incorrect interpretations of others&#8217; code. How can it be that good programming is still so difficult?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245683">
				<div id="div-comment-245683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sab39.dev.netreach.com/' rel='external nofollow' class='url'>Stuart Ballard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245683">
			January 17, 2005 at 1:50 pm</a>		</div>

		<p>You&#8217;re right that I&#8217;m definitely thinking C#-centric. I suppose that the way I&#8217;m looking at this is as a question of whether the problem Raymond has identified with exceptions is an inherent problem with exceptions as a concept, or an implementation issue with particular languages that use them.</p>
<p>My uneducated opinion is that in C++ you have an inherent problem trying to use exceptions, which is that you probably need to call into APIs that don&#8217;t use them, which means that whatever constructs you&#8217;re using for exception handling can&#8217;t be used universally. Unless you want to wrap every external call you make in a wrapper which throws an exception when it gets an error value return. And returns an object with a destructor.</p>
<p>But I&#8217;m choosing to regard that as a side issue in this discussion because it doesn&#8217;t apply to the question of whether it&#8217;s *possible* to use exceptions in a way that doesn&#8217;t have these issues in an ideal world.</p>
<p>Personally I like the indentation of the &quot;using&quot; and &quot;rollback&quot; cases because it reminds me that I really am entering a meaningful scope inside the block; the indentation reflects the actual semantics of what&#8217;s going on. If I start getting too nested I&#8217;d probably consider that a good reason to break out some of the inner pieces into a separate function, although I can&#8217;t say the situation&#8217;s ever actually come up.</p>
<p>Since we&#8217;re already inventing syntax I could envision something like:</p>
<p>using (Handle handle = CreateFile(&#8230;),<br />
<br />Handle hfm = CreateFileMapping(&#8230;),<br />
<br />Something pv = MapViewOfFile(&#8230;)) {<br />
<br />return CheckSumMappedFile(&#8230;);<br />
<br />}</p>
<p>(obviously that would look nicer if I could indent it)</p>
<p>which would act identically to the three nested &quot;using&quot; blocks. I can&#8217;t envision anything similar for try-rollback though, because I don&#8217;t know where the individual rollbacks would have to be placed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245693">
				<div id="div-comment-245693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245693">
			January 17, 2005 at 2:20 pm</a>		</div>

		<p>Chirstoph,</p>
<p>Imagine you now have to insert additional code, that allocata some memory, between opening file and creating map. You&#8217;ll have to insert a new label at the end, and what if you insert it in a wrong place? What if you later for some reason move the memory allocation prior mapping the view? You&#8217;ll have to move the exit label too. Linux kernel you refer is written in C and it tries to create all C++ concepts, including vtables. </p>
<p>OK, if you *have to* write in C for some reason, then this approach might works, but yet again, if you use a more powerful language like C++, C#, java, you name it, then why you have to make your live harder yourself?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-245913">
				<div id="div-comment-245913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sab39.dev.netreach.com/' rel='external nofollow' class='url'>Stuart Ballard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-245913">
			January 18, 2005 at 6:35 am</a>		</div>

		<p>I wonder whether the C# language team could be convinced that try-rollback would be a worthwhile addition to the language in the next release after Whidbey (I imagine it&#8217;s far too late to get anything new in for Whidbey itself)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-246193">
				<div id="div-comment-246193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://stud3.tuwien.ac.at/~e0226430/' rel='external nofollow' class='url'>Sebastian Redl</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-246193">
			January 18, 2005 at 9:26 am</a>		</div>

		<p>RAII-like concepts can be used to restore state &#8211; the sentry object in iostreams is an example.</p>
<p>Personally I prefer exceptions (or perhaps a using block &#8211; but I don&#8217;t use C#) over all other sorts of error handling. Checking error codes just makes me sick. Recently, I haven&#8217;t used a function that returns serious problems as error codes without writing a throwing wrapper.<br />
<br />Java has serious deficiencies here. I have actually seen people making comparisons between Java and C++ (or C# and C++ for that matter) where the lack of a finally block is seen as a problem with C++. Personally, I&#8217;d rather write:</p>
<p>{<br />
<br />std::auto_ptr&lt;Connection&gt; c = getConnection();<br />
<br />c-&gt;foo();<br />
<br />}</p>
<p>trusting the destructor to immediately clean up resources and have the constructor throw on error than do this:</p>
<p>Connection c = null;<br />
<br />try {<br />
<br />c = getConnection();<br />
<br />c.foo();<br />
<br />} finally {<br />
<br />  if(c != null) {<br />
<br />    c.close();<br />
<br />  }<br />
<br />}</p>
<p>Big problem when handling databases in Java. C#&#8217;s using goes a long way towards correcting this problem, but I still prefer stack-based destructor calls.</p>
<p>I guess it&#8217;s a matter of how you grow up. I&#8217;ve been aware of exception-safety and RAII-like patterns since my earliest days with C++, so they just come naturally.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-246323">
				<div id="div-comment-246323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.lorriman.com' rel='external nofollow' class='url'>Greg Lorriman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-246323">
			January 18, 2005 at 11:54 am</a>		</div>

		<p>I wonder if it really is so hard to write good exception based error code. My own experience is that to allow for an exception at any time simply requires transaction based coding. By that I mean writing code in such a way that changes are finally applied/committed in one line. This makes for very clean code, I think, although it requires a little more thought, and sometimes (much) more overhead/resources; the payoff is a much more robust system and much more pleasure in one&#8217;s own source (I&#8217;m one of those people who likes to spend a few minutes every now and then admiring my own code).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-246613">
				<div id="div-comment-246613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Spendlove</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-246613">
			January 19, 2005 at 1:11 am</a>		</div>

		<p>Sebastian &#8211; you obviously know what you&#8217;re talking about, and I agree that RAII can be used to restore state, of course it can. My saying that it had &quot;nothing to do&quot; with restoring state was a bit strong. I was reacting to people automatically yoking RAII and state restoration together.</p>
<p>After all, one could correctly state that &quot;semi-colons can be used to restore state&quot;, because the lines of code you write that roll back the transaction have a semi-colon at the end. But that&#8217;s not what semi-colons are about &#8211; they act as a terminator on a statement.</p>
<p>Similarly, restoring state is not what RAII is about in a direct sense &#8211; it&#8217;s about ensuring that objects are valid when they are defined and that they release resources in their destructor.</p>
<p>I should perhaps have said that &quot;while RAII is a useful tool to help provide rollback semantics, this is not its primary function&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-247703">
				<div id="div-comment-247703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-247703">
			January 20, 2005 at 11:13 am</a>		</div>

		<p>I think Raymond your statement, that exceptions are generally harder to write/read is based on a somewhat &quot;narrow-view&quot; example.</p>
<p>I think this is equivalent code:</p>
<p>if( ! doSome1() ) {//assuming bool returns<br />
<br />  //error handling<br />
<br />}<br />
<br />if( ! doSome2() ) {<br />
<br />  //error handling<br />
<br />  //how can it be any more easy to spot<br />
<br />  //missing cleanup for doSome1() effects here?<br />
<br />  //wouldn&#8217;t you need ScopeGuard like code here</p>
<p>  //to do it by the RAII principle?<br />
<br />}</p>
<p>and<br />
<br />try{ doSome1(); }<br />
<br />catch( Exception ) {<br />
<br /> //error handling<br />
<br />}<br />
<br />try{ doSome2(); }<br />
<br />catch( Exception ) {<br />
<br /> //error handling<br />
<br />}</p>
<p>What i mean, is you CAN do line by line<br />
<br />error handling with exceptions as well.<br />
<br />It might look ugly and be not as efficient,<br />
<br />but i&#8217;m not sure what a C# or C++ would generate for the two cases.</p>
<p>Unfortunately writing code without try/catch<br />
<br />that does the same as:<br />
<br />try{<br />
<br />  doSome1();<br />
<br />  doSome2();<br />
<br />}catch( &#8230; ) {</p>
<p>is more cumbersome.<br />
<br />Not always doSome1() has persistent Side-Effects.</p>
<p>As always there is no one-size-fits-all error handling strategy.<br />
<br />Sometimes exceptions are better sometimes error codes.<br />
<br />I think the smartest thing is to think what&#8217;s the best strategy for the individual library.<br />
<br />It would be a pity not to use exceptions due to a fundamentalistic viewpoint.<br />
<br />Often for low-level libraries exceptions are not used for performance reasons alone, not because they are difficult.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-247913">
				<div id="div-comment-247913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">harm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-247913">
			January 20, 2005 at 4:19 pm</a>		</div>

		<p>I&#8217;d vote for a new exception mechanism :)</p>
<p>if (code_works(code))<br />
<br />{<br />
<br />    code();<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248003">
				<div id="div-comment-248003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://awin.spb.ru' rel='external nofollow' class='url'>AndyY</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-248003">
			January 21, 2005 at 5:36 am</a>		</div>

		<p>little fix:<br />
<br />return error_code == 0;</p>
<p>:))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-247993">
				<div id="div-comment-247993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://awin.spb.ru' rel='external nofollow' class='url'>AndyY</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-247993">
			January 21, 2005 at 5:34 am</a>		</div>

		<p>my opinion: goto and error tracing:</p>
<p>BOOL ComputeChecksum( LPCTSTR pszFile, DWORD* pdwResult )<br />
<br />{<br />
<br />	int	error_code = 1;<br />
<br />	HANDLE	h = 0, hfm = 0;<br />
<br />	void	*pv = 0;<br />
<br />	DWORD	dwSize = 0;</p>
<p>	error_code = 1;<br />
<br />	h = CreateFile(pszFile, GENERIC_READ, FILE_SHARE_READ,<br />
<br />		NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);<br />
<br />	if( h == INVALID_HANDLE_VALUE )<br />
<br />		goto _end;</p>
<p>	error_code = 2;<br />
<br />	hfm = CreateFileMapping(h, NULL, PAGE_READ, 0, 0, NULL);<br />
<br />	if( hfm == INVALID_HANDLE_VALUE )<br />
<br />		goto _end;</p>
<p>	error_code = 3;<br />
<br />	pv = MapViewOfFile(hfm, FILE_MAP_READ, 0, 0, 0);<br />
<br />	if( !pv )<br />
<br />		goto _end;</p>
<p>	error_code = 4;<br />
<br />	dwSize = GetFileSize( h, NULL );<br />
<br />	if( dwSize == INVALID_FILE_SIZE )<br />
<br />		goto _end;</p>
<p>	error_code = 5;<br />
<br />	if( !CheckSumMappedFile( pv, dwSize,<br />
<br />			pdwResult, pdwResult) )<br />
<br />			goto _end;</p>
<p>	error_code = 0;<br />
<br />_end:<br />
<br />	if( error_code )<br />
<br />		trace( &quot;[-] ComputeChecksum error: %d/%08X&quot;, error_code, GetLastError() );</p>
<p>	if( pv )  UnmapViewOfFile(pv);<br />
<br />	if( hfm ) CloseHandle(hfm);<br />
<br />	if( h )   CloseHandle(h);<br />
<br />	return TRUE;<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248333">
				<div id="div-comment-248333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tal Rotbart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-248333">
			January 23, 2005 at 1:36 am</a>		</div>

		<ol>
<li>All exceptions are checked. Enforce this via compiler options or choice of language.<br />
<br />2. If someone writes empty catch block&#8211; fire him/her. Catch blocks at the <em>very least</em> must log the error/wrap it in an API exception.<br />
<br />3. Catches should at least deal with the specific thrown exception type, and in 90% of the cases also the generic exception/throwable as a fallback. API functions should always catch the generic exception type (to catch runtime errors) and wrap it in an API exception that must be checked. API functions must always ensure freeing resources allocated by them, see #4.<br />
<br />4. Always free resources in a &#8216;finally&#8217; clause. __finally in M$ C++. And structure your code to fit.<br />
<br />5. Drink Jolt.</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-250123">
				<div id="div-comment-250123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Corey Nelson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-250123">
			January 28, 2005 at 9:48 am</a>		</div>

		<p>Chris Nahr mentioned &quot;I don&#8217;t see how this issue relates to error codes vs exceptions at all. Using an object before all required init steps have succeeded is always wrong. It&#8217;s just as wrong when you&#8217;re using error codes.&quot; I&#8217;d like to expand on his comment.</p>
<p>Seems to me that if one was going to compare error-codes to exceptions one should do so on the same piece of code. The mistake in the icon code isn&#8217;t hard to spot because the code is exception based. One could make the exact same mistake with error-code based code. It would look something like this:</p>
<p>NotifyIcon CreateNotifyIcon()<br />
<br />{<br />
<br />    NotifyIcon icon = new NotifyIcon();<br />
<br />    icon.setText(&quot;Blah blah blah&quot;);<br />
<br />    icon.setVisible(true);<br />
<br />    icon.setIcon(new Icon(GetType(), &quot;cool.ico&quot;));<br />
<br />    return icon;<br />
<br />}</p>
<p>It is just as obvious that this code doesn&#8217;t check error-codes as it is obvious that Raymonds original example doesn&#8217;t check for exceptions. And the mistake of setting the visibility before the icon is just as subtle. Am I wrong?</p>
<p>Corey Nelson<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-250133">
				<div id="div-comment-250133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-250133">
			January 28, 2005 at 9:59 am</a>		</div>

		<p>Notice, however, that the correct exception-based code doesn&#8217;t catch exceptions either. Therefore, you can&#8217;t say &quot;If it doesn&#8217;t catch exceptions, it&#8217;s wrong.&quot; So do you tell the difference between good code and bad code if you can&#8217;t rely on the presence of a &quot;catch&quot;? </p>
<p>I originally had a different example but changed it at the last second. My original example was </p>
<p>Node AddStep(NodeInfo info)<br />
<br />{<br />
<br />Node node = new Node();<br />
<br />Path.Add(node);<br />
<br />node.color = info.color;<br />
<br />return node;<br />
<br />} </p>
<p>Observe that the fix to this code does not catch any exceptions. You just have to rearrange the lines of code slightly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-250273">
				<div id="div-comment-250273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Corey Nelson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-250273">
			January 28, 2005 at 2:01 pm</a>		</div>

		<p>Hmm, I&#8217;m not so sure that is the correct exception based code. I think it&#8217;s important to compare the two systems on the same peice of code. So, may I ask, if this is the correct exception based code:</p>
<p>NotifyIcon CreateNotifyIcon()<br />
<br />{<br />
<br /> NotifyIcon icon = new NotifyIcon();<br />
<br /> icon.Text = &quot;Blah blah blah&quot;;<br />
<br /> icon.Icon = new Icon(GetType(), &quot;cool.ico&quot;);<br />
<br /> icon.Visible = true;<br />
<br /> return icon;<br />
<br />}</p>
<p>then what would the correct error-code based code be? Would it be this?:</p>
<p>NotifyIcon CreateNotifyIcon()<br />
<br />{<br />
<br /> NotifyIcon icon = new NotifyIcon();<br />
<br /> icon.setText(&quot;Blah blah blah&quot;);<br />
<br /> icon.setIcon(new Icon(GetType(), &quot;cool.ico&quot;));<br />
<br /> icon.setVisible(true);<br />
<br /> return icon;<br />
<br />}<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-250283">
				<div id="div-comment-250283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-250283">
			January 28, 2005 at 2:07 pm</a>		</div>

		<p>It would be something like this. (Note: I wouldn&#8217;t actually write it this way in real life; I&#8217;m just trying to save space.)</p>
<p>NotifyIcon* CreateNotifyIcon()<br />
<br />{<br />
<br /> HICON hicon = NULL;<br />
<br /> bool success = false;<br />
<br /> // assuming you&#8217;re using a non-throwing new<br />
<br /> NotifyIcon* picon = new NotifyIcon();<br />
<br /> success = picon &amp;&amp; picon-&gt;SetText(&quot;blah blah&quot;) &amp;&amp; (hicon = LoadIconFromSomewhere(&quot;cool.ico&quot;)) != NULL &amp;&amp; picon-&gt;SetIcon(hicon) &amp;&amp; picon-&gt;SetVisible(true);<br />
<br /> if (!success) { delete picon; picon = NULL; }<br />
<br /> if (hicon) DestroyIcon(hicon);<br />
<br /> return picon;<br />
<br />}<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-250593">
				<div id="div-comment-250593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://ravinedweller.webhop.net' rel='external nofollow' class='url'>Corey Nelson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-250593">
			January 31, 2005 at 1:30 am</a>		</div>

		<p>Are you comparing C++ to Java? I think this further obfuscates a fair comparison of the language independent concepts of returning error-codes and throwing exceptions. But since your example of correct error-code based code looks like C++ and your example of correct exception based code takes advantage of garbage collection, I&#8217;ll finish this comment with the assumption that you are.</p>
<p>So wouldn&#8217;t this error-code based code:</p>
<p>NotifyIcon* CreateNotifyIcon()<br />
<br />{<br />
<br />HICON hicon = NULL;<br />
<br />bool success = false;<br />
<br />// assuming you&#8217;re using a non-throwing new<br />
<br />NotifyIcon* picon = new NotifyIcon();<br />
<br />success = picon &amp;&amp; picon-&gt;SetText(&quot;blah blah&quot;) &amp;&amp; (hicon = LoadIconFromSomewhere(&quot;cool.ico&quot;)) != NULL &amp;&amp; picon-&gt;SetVisible(true) &amp;&amp; picon-&gt;SetIcon(hicon);<br />
<br />if (!success) { delete picon; picon = NULL; }<br />
<br />if (hicon) DestroyIcon(hicon);<br />
<br />return picon;<br />
<br />}</p>
<p>be just as incorrect as your example of incorrect exception based code? And the mistake just as difficult to spot?</p>
<p>I believe the point of your article was that a mistake is harder to recognize in exception based code than error-code based code. Perhaps there is a better example to demonstrate your point. A fair example that uses the same language, same series of instructions and the same mistake in both the error-code and exception based versions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-250813">
				<div id="div-comment-250813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-250813">
			January 31, 2005 at 9:06 am</a>		</div>

		<p>Alas, it appears that I failed to make clear my point *again*.</p>
<p>My point is not that it&#8217;s easier/harder to find mistakes in error-based or exception-based code. It&#8217;s that it&#8217;s harder to **tell the difference** between code where the author thought about errors/exceptions and code where the author didn&#8217;t.</p>
<p>In the code fragment above, the author clearly thought about errors. Perhaps there&#8217;s a mistake in it, but at least you know that the author cared.</p>
<p>With exception-based code, you often can&#8217;t tell the difference. Hence the title: &quot;harder to recognize&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-275413">
				<div id="div-comment-275413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.lemanix.com/nick/archive/2005/05/11/2026.aspx' rel='external nofollow' class='url'>Nick's Delphi Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-275413">
			May 11, 2005 at 11:29 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-275463">
				<div id="div-comment-275463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.lemanix.com/nick/archive/0001/01/01/2026.aspx' rel='external nofollow' class='url'>Nick's Delphi Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-275463">
			May 11, 2005 at 12:33 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-347643">
				<div id="div-comment-347643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://benjamin.smedbergs.us/blog/2006-02-18/exceptions-dont-solve-the-problem/' rel='external nofollow' class='url'>BSBlog &raquo; Blog Archive &raquo; Exceptions Don&#8217;t Solve the Problem (and create worse problems)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-347643">
			February 18, 2006 at 9:00 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://benjamin.smedbergs.us/blog/2006-02-18/exceptions-dont-solve-the-problem/" rel="nofollow">http://benjamin.smedbergs.us/blog/2006-02-18/exceptions-dont-solve-the-problem/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-447083">
				<div id="div-comment-447083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://softwaremaniacs.org/blog/2005/05/15/exceptions/' rel='external nofollow' class='url'>Маниакальный Веблог &raquo; Джоэл об Exception&#8217;ах</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-447083">
			November 30, 2006 at 5:45 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://softwaremaniacs.org/blog/2005/05/15/exceptions/" rel="nofollow">http://softwaremaniacs.org/blog/2005/05/15/exceptions/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-460563">
				<div id="div-comment-460563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.livejournal.com/users/bcholmes/172563.html' rel='external nofollow' class='url'>bcholmes: Exceptional Circumstances</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-460563">
			January 14, 2007 at 12:12 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.livejournal.com/users/bcholmes/172563.html" rel="nofollow">http://www.livejournal.com/users/bcholmes/172563.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-460573">
				<div id="div-comment-460573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ljseek.com/exceptional-circumstances_57480487.html' rel='external nofollow' class='url'>Exceptional Circumstances by bcholmes () | LjSEEK.COM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-460573">
			January 14, 2007 at 12:12 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.ljseek.com/exceptional-circumstances_57480487.html" rel="nofollow">http://www.ljseek.com/exceptional-circumstances_57480487.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-494663">
				<div id="div-comment-494663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://soci.hu/blog/index.php/2007/04/18/apro-korultekintes-a-vista-forraskodban/' rel='external nofollow' class='url'>Soci blog &raquo; Blog Archive &raquo; Apr?? k??r??ltekint??s a Vista forr??sk??dban</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-494663">
			April 18, 2007 at 4:20 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://soci.hu/blog/index.php/2007/04/18/apro-korultekintes-a-vista-forraskodban/" rel="nofollow">http://soci.hu/blog/index.php/2007/04/18/apro-korultekintes-a-vista-forraskodban/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-520343">
				<div id="div-comment-520343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.electricmonk.nl/log/2005/05/16/joel-on-software-linkdump/' rel='external nofollow' class='url'>Electricmonk.nl weblog &raquo; Blog Archive &raquo; Joel On Software linkdump</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-520343">
			June 28, 2007 at 4:10 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.electricmonk.nl/log/2005/05/16/joel-on-software-linkdump/" rel="nofollow">http://www.electricmonk.nl/log/2005/05/16/joel-on-software-linkdump/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-547883">
				<div id="div-comment-547883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mikesdump.wordpress.com/2005/05/11/error-handling/' rel='external nofollow' class='url'>Error Handling &laquo; Mike&#8217;s Dump</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-547883">
			September 8, 2007 at 7:25 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://mikesdump.wordpress.com/2005/05/11/error-handling/" rel="nofollow">http://mikesdump.wordpress.com/2005/05/11/error-handling/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709743">
				<div id="div-comment-709743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://wanderr.com/jay/the-art-of-elegant-code-eliminating-special-cases-that-arent/2009/02/18/' rel='external nofollow' class='url'>The Art of Elegant Code: Eliminating special cases that aren&#8217;t on Jay Paroline - Grooveshark Dev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693#comment-709743">
			February 18, 2009 at 2:54 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://wanderr.com/jay/the-art-of-elegant-code-eliminating-special-cases-that-arent/2009/02/18/" rel="nofollow">http://wanderr.com/jay/the-art-of-elegant-code-eliminating-special-cases-that-arent/2009/02/18/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>