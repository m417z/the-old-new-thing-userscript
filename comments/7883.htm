<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-977753">
				<div id="div-comment-977753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977753">
			April 11, 2012 at 7:38 am</a>		</div>

		<p>&quot;It just trusts that you&#39;re calling it correctly and builds an asynchronous call to pass into the kernel. If you passed a synchronous handle&quot;</p>
<p>I think sync and async are reversed here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-977763">
				<div id="div-comment-977763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977763">
			April 11, 2012 at 7:59 am</a>		</div>

		<p>So many of these customer questions really seem like variations on the famous Babbage quote:</p>
<p>&quot;On two occasions I have been asked, &quot;Pray, Mr. Babbage, if you put into the machine wrong figures, will the right answers come out?&quot; &#8230; I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-977773">
				<div id="div-comment-977773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977773">
			April 11, 2012 at 8:23 am</a>		</div>

		<p>Is it just me, or does passing a spurious NULL to the KERNEL sound like something that should always be caught.</p>
<p>I&#39;m just remembering that everything in kernel needs to be soft realtime, handle constrained memory gracefully, and avoid faulting even in the instance of processes actively attempting to break it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jader3rd odd alt thread-odd thread-alt depth-1" id="comment-977783">
				<div id="div-comment-977783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jader3rd' rel='external nofollow' class='url'>jader3rd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977783">
			April 11, 2012 at 9:19 am</a>		</div>

		<p>They should have kept it async only. Now programmers write programs which hang because everything&#39;s waiting on I/O.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-977793">
				<div id="div-comment-977793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JoakimA</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977793">
			April 11, 2012 at 9:52 am</a>		</div>

		<p>I&#39;d guess the reason is the ByteOffset parameter of NtReadFile. If you don&#39;t pass an overlapped to ReadFile, it sends NULL to the kernel to specify the current file position. And that won&#39;t work for an asynchronous file, because such a file doesn&#39;t keep track of the current position. Therefore it fails.</p>
<p>But for pipes, mailslots, and I&#39;d guess serial ports too, you don&#39;t need a read position. So I&#39;d guess this is why it succeeds. Could this be it?</p>
<p>&#39;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-977813">
				<div id="div-comment-977813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy ONeal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977813">
			April 11, 2012 at 11:05 am</a>		</div>

		<p>@Joshua:</p>
<p>No, the kernel just passes the parameters along to the driver responsible for actually handling the IO. More here -&gt; <a rel="nofollow" target="_new" href="http://stackoverflow.com/q/4390007/82320" rel="nofollow">stackoverflow.com/&#8230;/82320</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-977823">
				<div id="div-comment-977823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ishai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977823">
			April 11, 2012 at 12:57 pm</a>		</div>

		<blockquote><p>
  &gt; For some reason, if you attempt to issue synchronous I/O on an asynchronous handle to a pipe or mailslot, the I/O subsystem says, &quot;Sure, whatever.&quot; I suspect this is somehow related to the confusing no-wait model for pipes.
</p></blockquote>
<p>For Synchronous I/O the ByteOffset parameter of NtReadFile can be NULL (the kernel keeps the file pointer). &nbsp;For overlapped I/O the parameter is not optional and is taken from the OVERLAPPED structure. &nbsp;Mailslots and named pipes do not have the concept of file pointers so ByteOffset is not needed regardless of sync / async nature of the handle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-977833">
				<div id="div-comment-977833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977833">
			April 11, 2012 at 3:09 pm</a>		</div>

		<p>I wonder why synchronous kernel-mode calls were necessary; couldn&#39;t the user-mode layer issue the asynchronous call and then wait?</p>
<p>My guess is it&#39;s a performance optimization. &nbsp;Fewer trips into kernel mode. &nbsp;Except that a context switch is noise compared to an I/O&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-977843">
				<div id="div-comment-977843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977843">
			April 11, 2012 at 4:23 pm</a>		</div>

		<p>I think the main reasons overlapped I/O is seldom used are that a) often whatever the program has to do next depends on the result of the operation and b) there is already another more popularised way of doing things asynchronously: threading.</p>
<p>I am not saying that the latter would be better necessarily, since you&#39;d have to write a thread function, create the thread and then wait for it to complete; for a single operation an overlapped call is much easier. But if you have to do multiple reads and writes in succession, overlapped I/O is pretty much a non-starter. You&#39;d have too much to keep track of and be forced to make one bit of code do two unrelated tasks; much better to simply put all I/O in a separate thread and wait on that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-977873">
				<div id="div-comment-977873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977873">
			April 11, 2012 at 6:56 pm</a>		</div>

		<p>It&#39;s easier for old DOS application to port to Windows if they can still assume that they can get synchronous I/O. It&#39;s important fact that if you port application, you shouldn&#39;t alter application structure at the same time.</p>
<p>Now people can take it for granted that they can continue to write &quot;functions using I/O calls&quot; in synchronous way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-977883">
				<div id="div-comment-977883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977883">
			April 11, 2012 at 7:19 pm</a>		</div>

		<p>Cheong, that doesn&#39;t make sense. If you&#39;re porting old DOS applications, they won&#39;t be calling the Win32 file functions but rather CRT functions for example. And you could implement those by an asynchronous call followed by a wait; you don&#39;t really need synchronous calls or structure changes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-977893">
				<div id="div-comment-977893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977893">
			April 11, 2012 at 9:15 pm</a>		</div>

		<p>The CRT libraries would also need the synchronous I/O support in Windows API to run in the same way as it were in DOS. So what doesn&#39;t make sense?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-977913">
				<div id="div-comment-977913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977913">
			April 11, 2012 at 10:36 pm</a>		</div>

		<p>Nice, and sadly, .NET (I know, not a .net blog) is going to make the same mistake again.</p>
<p>&quot;As it turns out, developers vastly prefer synchronous reads. Writing asynchronous code is hard. So the kernel folks relented and said, &quot;Okay, we&#39;ll have a way for you to specify at creation time whether you want a handle to be synchronous or asynchronous. And since lazy people prefer synchronous I/O, we&#39;ll make synchronous I/O the default, so that lazy people can keep being lazy.&quot;&quot;</p>
<p>TechDays: in the future everything in .Net will be asynchronous!</p>
<p>Do we never learn from the past?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-977923">
				<div id="div-comment-977923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@cheong00</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977923">
			April 12, 2012 at 12:23 am</a>		</div>

		<p>&quot;The CRT libraries would also need the synchronous I/O support in Windows API to run in the same way as it were in DOS.&quot;</p>
<p>No, the CRT could have used an OVERLAPPED structure per FILE, using it in every fread/fwrite call and waiting then on the event. Event maintaining the file pointer can be simulated at this level. Because open(), read(), write() etc are not native system calls on Windows, you could also implement the wrapping inside this functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-977943">
				<div id="div-comment-977943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977943">
			April 12, 2012 at 1:52 am</a>		</div>

		<p>@@cheong00: That would mean different implementation of CRT libraries for Windows (remember, other then Microsoft, Borland and a few more vendors are supplying C/C++ or other programming language libraries at that time) would possibly have different behaviour on how the I/O calls returns &quot;for synchronous operations&quot;. That&#39;s not good.</p>
<p>I&#39;d perfer simple operation map to single API and complex operation map to multiple APIs, over simple operation map to multiple APIs and complex operation map to single API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-977953">
				<div id="div-comment-977953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977953">
			April 12, 2012 at 6:33 am</a>		</div>

		<p>arguing for the sake of arguing. each compiler version already has its own implementation of the C runtime library. &nbsp;and the fread behavior could not have come out different, it&#39;s either sync or not. &nbsp;stdio is &nbsp;already a totally different underlying implementIon on win16, win32, than on unix, and on different compilers, and everything works fine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-977963">
				<div id="div-comment-977963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-977963">
			April 12, 2012 at 6:42 am</a>		</div>

		<p>Surprised no one has mentioned that in Metro at least, all IO is asynchronous. &nbsp;Looks like that bullet has finally been bitten. &nbsp;Of course we had to wait 20 years before programming languages has constructs that made combining asynchronous I/O with the need for sequential I/O operations passably tolerable to the programmer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-978093">
				<div id="div-comment-978093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-978093">
			April 12, 2012 at 5:04 pm</a>		</div>

		<p>2JoakimA: confirm.</p>
<p>A bit playing with NtReadFile/NtWriteFile shows that Io R/W fails on &#39;async&#39; handle when no ByteOffset value passed. Its obviously why, but interesting point that NtWriteFile also fails even if file was opened with FILE_APPEND_DATA access flag set, that effectively makes current pos == current size for write op and it could work successfully. Funiest thing is that NtWriteFile requires but ignores ByteOffset when file opened with FILE_APPEND_DATA :) So, some &#39;if&#39; in kernel&#39;s code written not in the best place&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-978113">
				<div id="div-comment-978113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-978113">
			April 12, 2012 at 7:58 pm</a>		</div>

		<p>@ulric: Yes, it&#39;s pretty pointless for arguing that because no system at that time doesn&#39;t provide support to synchronous I/O on OS level, therefore don&#39;t have to implement synchronous I/O using asynchronous I/O themselves in their own library.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-978143">
				<div id="div-comment-978143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-978143">
			April 13, 2012 at 1:22 am</a>		</div>

		<p>Re &quot;basic ground rules&quot;: I just noticed the &quot;basic ground rules&quot; for COM are in conflict with the traditional implementation of AddRef/Release: The &quot;minimum maximum count&quot; rule requires an unsigned 32-bit integer, but InterlockedIncrement() works on signed ones&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-978163">
				<div id="div-comment-978163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@cheong00</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-978163">
			April 13, 2012 at 4:31 am</a>		</div>

		<p>The CRT source code for Unix, OS/2, DOS, Windows etc is very different, not only but also because of the different approaches the systems offer to applications: starting processes, handling pipes, unlink files, as just a few examples.</p>
<p>So the implementation of read() and write() as &quot;issue I/O and wait&quot; is absolutely no big deal, compared to the emulation of fdopen(), dup(), dup2() on systems that do not use integers as &quot;file descriptors&quot;, or popen() on systems that do not support pipes nor multi-tasking (like DOS).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-978303">
				<div id="div-comment-978303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-978303">
			April 13, 2012 at 5:58 pm</a>		</div>

		<p>@Cheong: And the implementation for the file calls has to be different anyway since even though the Win32 API&#39;s can be synchronous, the relevant function calls still have different names, arguments, &amp;c. You&#39;re effectively saying ‘if Microsoft used the CRT as Windows API then writing a CRT would be really easy’ and I bet it would be. But a) the Windows API provides functionality not in the CRT but necessary for a lot of software and b) Microsoft has written a CRT implementation and thus has essentially given you what you want.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-978333">
				<div id="div-comment-978333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-978333">
			April 14, 2012 at 9:58 am</a>		</div>

		<p>&quot;As originally designed, Windows NT had a fully asynchronous kernel. There was no such thing as a blocking read. If you wanted a blocking read, you had to issue an asynchronous read (the only kind available), and then block on it. &quot;</p>
<p>So why is there no asynchronous CreateFile?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-978343">
				<div id="div-comment-978343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-978343">
			April 14, 2012 at 8:42 pm</a>		</div>

		<p>Pete, I&#39;m just guessing here, but presumably this is because to be able to do something with it you&#39;d always have to wait on it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-978353">
				<div id="div-comment-978353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-978353">
			April 15, 2012 at 6:44 pm</a>		</div>

		<p>@pete: I think there aren&#39;t any asynchronous function that return handles. The handles must be valid when being returned or you can&#39;t use them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-978403">
				<div id="div-comment-978403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-978403">
			April 16, 2012 at 10:06 am</a>		</div>

		<p>@Medinoc: The signed-ness of an integer is all in your head. It turns out that casting a pointer to an integer of a different signed-ness works on all CPUs that Windows runs on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-978493">
				<div id="div-comment-978493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120411-00/?p=7883#comment-978493">
			April 17, 2012 at 11:13 am</a>		</div>

		<p>A favorite Raymondism applies here: &nbsp;&quot;Appearing to succeed is a valid form of undefined behavior, but it&#39;s still undefined.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>