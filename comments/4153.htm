<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1060113">
				<div id="div-comment-1060113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060113">
			June 6, 2013 at 7:18 am</a>		</div>

		<p>Huge THANK YOU for this series of articles! &nbsp;It helps a lot to understand how things work, with the caveat that it is not contractual. &nbsp;Purely insight. &nbsp;And purely appreciated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060123">
				<div id="div-comment-1060123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060123">
			June 6, 2013 at 7:59 am</a>		</div>

		<p>@Raymond, I&#39;m with Steve Wolf, incredible series, incredible content.</p>
<p>Exercise: put Sleep(5000);, or a greater value for a more dramatic effect, inside «if (msg.message == WM_KEYDOWN &amp;&amp; msg.wParam == VK_SHIFT)». Whenever you press the Shift key on the second thread&#39;s window, the main thread won&#39;t get input messages for 5 seconds.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060143">
				<div id="div-comment-1060143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Lyon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060143">
			June 6, 2013 at 8:37 am</a>		</div>

		<p>Thanks for a hugely enlightening series.</p>
<p>But I disagree with your conclusion, &quot;This is why it&#39;s important that threads which share an input queue all be aware of the connection so that they don&#39;t accidentally cause trouble for each other.&quot; I think that the real moral is that a thread should never go for an arbitrarily long time without processing all of its messages. Thread attachment merely demonstrates one way that a non-responsive thread causes damage, but there are lots of other ways too.</p>
<div class="post">[<em>In the absence of attachment, a thread that goes non-responsive typically hurts only himself. But if there is attachment, then the scope of the damage goes further. And notice that the bad thread is pumping messages. It&#39;s just not pumping </em><em>all</em> messages. It might get into this state because, say, it wants to postpone keyboard input while doing a computation, but leave the mouse active so the user can click the Cancel button. This seemingly-reasonable design ends up creating a disaster in the presence of attachment. -Raymond]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060153">
				<div id="div-comment-1060153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060153">
			June 6, 2013 at 8:47 am</a>		</div>

		<p>Raymond, many thanks. &nbsp;This series has already answered several questions that I have had for a while.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk even thread-even depth-1" id="comment-1060163">
				<div id="div-comment-1060163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060163">
			June 6, 2013 at 10:29 am</a>		</div>

		<p>I&#39;m amazed by the amount of work that obviously went into writing these posts!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060173">
				<div id="div-comment-1060173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060173">
			June 6, 2013 at 11:18 am</a>		</div>

		<p>This brings up an interesting question.</p>
<p>We drive Word automation, and have a big toolbar that replaces the effects of the file menu. Currently the toolbar is set top topmost. We ourselves use a well-behaved message loop. It is reasonably safe to assume Word also has a well behaved message loop so we can change to making the toolbar a child of the Word window? Or maybe it doesn&#39;t matter. If Word hangs we&#39;re going to hang with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060183">
				<div id="div-comment-1060183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060183">
			June 6, 2013 at 1:41 pm</a>		</div>

		<p>[In the absence of attachment, a thread that goes non-responsive typically hurts only himself. But if there is attachment, then the scope of the damage goes further. And notice that the bad thread is pumping messages. It&#39;s just not pumping all messages. It might get into this state because, say, it wants to postpone keyboard input while doing a computation, but leave the mouse active so the user can click the Cancel button. This seemingly-reasonable design ends up creating a disaster in the presence of attachment. -Raymond]</p>
<p>Actually I would argue, that accumulating keystrokes during a long computation then processing them once done is a poor design choice &#8212; especially since you couldn&#39;t handle the Escape key to cancel the operation.</p>
<p>I would expect the program to respond to the escape key and discard other input.</p>
<p>To be honest, I have never really found a use for the message filters to GetMessage, which I suppose means that if I ever used input attachment that I would be safe.</p>
<div class="post">[<em>There&#39;s more to input attachment than the input queue. Tune in tomorrow, and you may change your conclusion. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hardon odd alt thread-odd thread-alt depth-1" id="comment-1060193">
				<div id="div-comment-1060193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/gdalsnes' rel='external nofollow' class='url'>gdalsnes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060193">
			June 6, 2013 at 2:05 pm</a>		</div>

		<p>I have never seen the use of AttachThreadInput (still don&#39;t). Was AttachThreadInput created to make it easier to port certain 16bit apps? If you had a time machine, could you &quot;fix&quot; this by not implementing AttachThreadInput, forcing 16bit apps to be ported &quot;propery&quot;?</p>
<div class="post">[<em>There was no need to do this for porting 16-bit apps since 16-bit apps were single-threaded anyway. Off the top of my head, I cannot think of a case where it is necessary to manage attachment explicitly (but I&#39;m sure there is some weird fringe case that requires it). In the vast majority of cases, the default attachment rules work fine. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060223">
				<div id="div-comment-1060223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060223">
			June 6, 2013 at 9:01 pm</a>		</div>

		<p>Exercise: Not sure if this is what you want to demonstrate, but one could add something like the following to the list of or&#39;d peeks in Bad window&#39;s pathological mode: PeekMessage(&amp;msg, NULL, WM_LBUTTONDBLCLK, WM_LBUTTONDBLCLK, PM_REMOVE). Then reset fIgnoreKeyboard back to FALSE if WM_LBUTTONDBLCLK is received, thereby causing the main Scratch window to start behaving normally again. Could also add an audio wmv that plays &quot;Hello, Bad Window here, I about to stop my silly filtering now&quot; just before resetting the variable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060253">
				<div id="div-comment-1060253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@arghhhhhhhhhhh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060253">
			June 7, 2013 at 6:32 am</a>		</div>

		<p>The only use for AttachThreadInput() I have ever seen is to meet one of the conditions for <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633539(v=vs.85).aspx">msdn.microsoft.com/&#8230;/ms633539(v=vs.85).aspx</a> to make it available to a process that would otherwise not be authorized. It is a hack and a half, don&#39;t do this except for educational purposes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1060273">
				<div id="div-comment-1060273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060273">
			June 7, 2013 at 10:02 am</a>		</div>

		<p>The first thing one needs to understand about attaching the input queues: DO NOT DO IT.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>