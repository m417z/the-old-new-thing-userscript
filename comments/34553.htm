<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-297723">
				<div id="div-comment-297723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-297723">
			August 17, 2005 at 11:00 am</a>		</div>

		<p>Where can I read more about processor affinity?  I&#8217;ve gotten bits and pieces from the SDK docs and articles like yours, but I still have fundamental questions about the topic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-297743">
				<div id="div-comment-297743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-297743">
			August 17, 2005 at 12:33 pm</a>		</div>

		<p>Google for SetProcessAffinityMask.</p>
<p>That API requires the PROCESS_SET_INFORMATION access right. Is that granted to non-admin users (e.g., &quot;limited users&quot; on Windows XP)? I know that everyone runs as admin but I thought I&#8217;d ask.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-297753">
				<div id="div-comment-297753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-297753">
			August 17, 2005 at 12:44 pm</a>		</div>

		<p>I already discussed this. <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2004/03/12/88572.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2004/03/12/88572.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-297863">
				<div id="div-comment-297863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-297863">
			August 17, 2005 at 6:16 pm</a>		</div>

		<p>How do I set the mask for an MFC app?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-298073">
				<div id="div-comment-298073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Hornby</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-298073">
			August 18, 2005 at 12:11 pm</a>		</div>

		<p>When I was developing a resource manager for large multi-processor machines, we quickly ran into your &quot;Shell programs aren&#8217;t typical&quot; special case.</p>
<p>To be specific, if you have some rule-based system which arranges for a non-default affinity mask for explorer.exe, cmd.exe or services.exe, you&#8217;ll find pretty much every process on the system running with an inherited, non-default affinity mask, which can be seriously counter-intuitive for the unwary user.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-298143">
				<div id="div-comment-298143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-298143">
			August 18, 2005 at 12:51 pm</a>		</div>

		<p>Although the Unix fork/exec model is one of the oddest and most counter-intuitive ways to create a new process, it has one small advantage: you can fiddle with the execution environment of your new process before it begins.</p>
<p>Since the portion of the code after the &#8216;fork&#8217; and before the &#8216;exec&#8217; actually executes in the new process, the programmer can make any initial process-context changes &#8216;from the inside&#8217; before the child executable takes over.  Typically this is spent mucking around with signals and other Unix-specific things, but you could also set processor affinity, standard handles, and the like.</p>
<p>In Win32 terms, this would mean supplying a function that runs during CreateProcess, in the new process&#8217;s context.  Because no such thing exists, CreateProcess has become laden down with lots of extra parameters, structures, and flags for customizing process creation.</p>
<p>What would be the consequences of taking a page from the Unix model?  Yes, I know, the answer to &quot;Why doesn&#8217;t it work that way?&quot; is &quot;what would happen if it did?&quot;  Are there security-descriptor gotchas lurking here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-298273">
				<div id="div-comment-298273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vladimir</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-298273">
			August 18, 2005 at 3:44 pm</a>		</div>

		<p>Is there any way to set processor affinity using .manifest file or something like that. </p>
<p>So i can do this for my application without changing application itself.</p>
<p>Looks like one of the apps is having problem running in true multithreaded environment, and while vendor is trying to fix that, i have to go to Task Manager and set affinity for this app manualy.</p>
<p>What i&#8217;m looking for is a configuration way of setting affinity<br />
<br />Thanks.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-298293">
				<div id="div-comment-298293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-298293">
			August 18, 2005 at 4:42 pm</a>		</div>

		<p>Implementing fork() would probably require redesigning Win32 from the bottom up to be more like Unix.  Same goes for signals.  (Probably the converse would be something like adding Win32 kernel objects to a Unix.)</p>
<p>You could do a bustling business selling bait from all the cans of worms that idea opens&#8230;</p>
<p>The ability to customize process startup (which fork/exec gives you) could be gained by having a function like those used in DLL injection or API hooking, which runs in the address space of the new process before CreateProcess returns.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-298263">
				<div id="div-comment-298263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-298263">
			August 18, 2005 at 3:37 pm</a>		</div>

		<p>Plus, something like fork() would make porting some Unix tools *much*, *much* easier&#8230;  ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-298423">
				<div id="div-comment-298423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-298423">
			August 19, 2005 at 10:10 am</a>		</div>

		<p>Solve a problem by introducing a bigger problem. Your callback function is in the wrong address space.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-298623">
				<div id="div-comment-298623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-298623">
			August 19, 2005 at 11:37 am</a>		</div>

		<p>It&#8217;d be called back in the child process address space, though.  Before the child process starts executing.</p>
<p>It might still require access to some of the data in the parent&#8217;s address space, true, but that&#8217;s where copy-on-write pages come in handy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-298643">
				<div id="div-comment-298643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-298643">
			August 19, 2005 at 11:42 am</a>		</div>

		<p>Or am I missing what you meant?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-298823">
				<div id="div-comment-298823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-298823">
			August 19, 2005 at 1:44 pm</a>		</div>

		<p>Ah, so you&#8217;re really asking for the fork() model, not just a dinky callback function. Now things get interesting. Will DLLs be able to handle the return value from GetCurrentProcessId() changing after the fork()? What happens to USER and GDI and COM objects &#8211; are they forked too? I don&#8217;t know the answer &#8211; I&#8217;m just pointing out that your answer creates far more questions&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-298913">
				<div id="div-comment-298913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-298913">
			August 19, 2005 at 2:36 pm</a>		</div>

		<p>Well&#8230;  It is the fork model in kernel space, yes.  The API could be done with just a &quot;dinky callback&quot;.</p>
<p>As for the DLLs calling GetCurrentProcessId&#8230; hmm.  Presumably it&#8217;ll only matter for function calls made into the DLLs (threads are not copied into the new process, so it&#8217;s not like a single thread will suddenly have a different PID).  As for how many of those exist&#8230;  probably at least one, which means it isn&#8217;t going to change.  Rats&#8230;</p>
<p>(The same issue exists on Linux &#8212; if you write a shared lib, the return from getpid() can change at any time.  But nothing relies on it not changing, because it&#8217;s been that way from pretty much the beginning.)</p>
<p>I&#8217;m not sure about the kernel representation of USER and GDI objects (if there is one), but if they&#8217;re memory-only, then no big deal.  I&#8217;m pretty sure in-process COM objects are memory-only.  If that&#8217;s true, then the callback would have access to a &quot;copy&quot; (copy-on-write, that is) of them.</p>
<p>But out-of-process COM objects start to get more interesting.  The proxy could be duplicated easily enough, but then the stub in the server would have to be also, and that&#8217;d be quite difficult.</p>
<p>More questions is right.  ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-299023">
				<div id="div-comment-299023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-299023">
			August 19, 2005 at 3:23 pm</a>		</div>

		<p>(Of course, if you don&#8217;t copy threads, then entering a critical section might hang because you&#8217;re waiting for a thread that doesn&#8217;t exist&#8230;  Copying the kernel object behind a window is the easy part; the hard part is resolving thread affinity, what happens if somebody sends a message to that window &#8211; does it go to the old window or the new one? If you give the new window a new handle, what happens to all the code that caches window handles?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-299053">
				<div id="div-comment-299053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-299053">
			August 19, 2005 at 4:01 pm</a>		</div>

		<p>Err&#8230; yikes.</p>
<p>X does &quot;everything&quot; over a socket, and the socket is shared between processes (so both would get the message).  But if you do the fork() and exec() within one Xlib callback, the child will never get to Xlib&#8217;s select() call, so it&#8217;ll never get the message.  If not, however&#8230; that&#8217;s probably why a program I wrote a while ago failed miserably every once in a while.  ;-)</p>
<p>The critical sections are hairy too &#8212; if a thread other than the one calling CreateProcess held the critical section, then no big deal (because they&#8217;re shared between processes).  Both processes would have a handle to the same kernel object, and when the thread (in the other process) let go of it, one of the two processes would be able to get it.  (Until the callback returns, anyway.  Then it&#8217;s gone out of the child.)</p>
<p>But if the thread holding the section calls CreateProcess, then which process gets control of it?  Both is clearly wrong.  Choosing one or the other would break some code, I&#8217;m sure.</p>
<p>&#8230;</p>
<p>OK, never mind.  I&#8217;d be a nice way to set the affinity of a child process (or change file handles), but there are obviously a bunch of things I haven&#8217;t thought of.  :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-299073">
				<div id="div-comment-299073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-299073">
			August 19, 2005 at 4:10 pm</a>		</div>

		<p>(Actually the critical section isn&#8217;t shared between processes. Or at least not completely. Critical sections are a mix of user-mode and kernel-mode. You&#8217;re sharing the kernel half but cloning the user-mode half&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-298413">
				<div id="div-comment-298413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-298413">
			August 19, 2005 at 9:39 am</a>		</div>

		<p>Basically, adding a callback function parameter to the CreateProcess API function (maybe rename it CreateProcessEx, for compatibility) could allow this.  It shouldn&#8217;t even be all that difficult.</p>
<p>Signals, yes, that would probably be a huge redesign if they were done in the kernel.  But Cygwin has support for at least SIGINT and SIGTERM (but not SIGHUP), so doing some of them in userspace is possible.  (I&#8217;m not sure how correct it is, though.)</p>
<p>&quot;Adding Win32 kernel objects to a Unix&quot; &#8212; what do you mean by kernel objects?  Stuff like SysV semaphores, shared memory, and message queues?  (all these can be shared between processes)  That&#8217;s already been done.  ;-)  Event objects, no, but I *think* you can emulate them with semaphores.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-299093">
				<div id="div-comment-299093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-299093">
			August 19, 2005 at 4:53 pm</a>		</div>

		<p>Oops, I&#8217;m remembering wrong.</p>
<p>I thought critical sections could be named (and were therefore cross-process).  Turns out they can&#8217;t (and aren&#8217;t).</p>
<p>As far as cloning only one half goes &#8212; it sounds like the page holding the kernel&#8217;s side of the critical section isn&#8217;t associated with a process then?  If it was (and got set to copy-on-write), would that help?  I&#8217;d think so, but since I know nothing about the internals, I don&#8217;t know for sure.  Maybe it&#8217;s impossible given the way other stuf is set up, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-298673">
				<div id="div-comment-298673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-298673">
			August 19, 2005 at 11:45 am</a>		</div>

		<p>But how does your *code* get into the child process? And are you suggesting mapping the parent processes&#8217; data into the child process too? Wouldn&#8217;t that interfere with the child process&#8217;s address space (and be a security hole)? Do you intend to call kernel32 in the child process before kernel32 has been initialized?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-298763">
				<div id="div-comment-298763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-298763">
			August 19, 2005 at 12:49 pm</a>		</div>

		<p>Well, the model I have is the way Linux does it.</p>
<p>Basically, after you call fork(), you get two processes, both executing from immediately after the call to fork().  Both still have all libraries loaded and initialized.  But both are mapped into memory using copy-on-write pages, so that any changes made by either of them are contained to the process that made the change.</p>
<p>This is the point where the callback would be invoked.  In effect, memory reads would come from the parent, but writes would only affect the child.  (Subsequent reads of a previously-written address would return the value that was previously written.  Changing the value at an address from the parent or child after the fork does not mean that the value in the other process would change, because the page would get reallocated somewhere else when the process did the write.)</p>
<p>The kernel (or whoever) would call the callback function before clearing or overwriting any pages (which is code originally from the parent, or one of its DLLs, yes, but it&#8217;s still in memory because the contents of pages haven&#8217;t been changed).  The callback can call any functions that the parent could call (including stuff in kernel32), because the address space is still the same; kernel32 doesn&#8217;t need to be initialized, because it already was when the parent was started.</p>
<p>In Linux, when you call exec(), *that&#8217;s* when your process is cleared from memory and overwritten by the new process.  (That&#8217;s also when most of the new executable&#8217;s pages get allocated, because that&#8217;s when most of them are usually written to.)  In this callback model, that would happen right after the callback returned.  That&#8217;s when kernel32 would be loaded into the new executable&#8217;s space (and presumably re-initialized).</p>
<p>The callback can&#8217;t interfere with the child process&#8217;s address space, because after the callback returns, the entire address space gets overwritten with the new EXE and DLLs anyway.  So any changes made by the callback (to memory) would be lost at that point.</p>
<p>The point, though, is that changes to things like file descriptors persist.  (Anything that isn&#8217;t memory.)</p>
<p>Also, the callback wouldn&#8217;t necessarily have to ever return &#8212; it could call exit() (or ExitProcess()), which means that the new EXE and DLLs would never be loaded.  It&#8217;d be a way to do &quot;threading&quot; without having to worry about protecting shared memory &#8212; because any writes are contained to the process that made them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-299243">
				<div id="div-comment-299243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-299243">
			August 20, 2005 at 1:59 am</a>		</div>

		<p>I was the one who just wanted a dinky callback.</p>
<p>I agree that fork() is utterly insane; it has to be designed in from the ground up.  (Just read MGrier&#8217;s account of how the NT loader works with DLLs, and the very thought of adding fork will terrify you.  <a rel="nofollow" target="_new" href="http://blogs.msdn.com/mgrier/default.aspx" rel="nofollow">http://blogs.msdn.com/mgrier/default.aspx</a> )</p>
<p>But Jeff Richter talks extensively about running your code in someone else&#8217;s process in his chapter on DLL injection, so I assume the kernel is prepared to handle the memory context issues.  It does look increasingly complex the harder you look at it,  though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-299253">
				<div id="div-comment-299253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050817-10/?p=34553#comment-299253">
			August 20, 2005 at 2:00 am</a>		</div>

		<p>Since we&#8217;re talking about it, I&#8217;ve seen one problem where fork() is the only possible solution.  Since it relates directly to something Raymond has said several times about exceptions versus explicit handling of error codes, I&#8217;ll describe it here.</p>
<p>Suppose you have a big, complex number-crunching program, and you want to be able to abort a computation in it.  (Perhaps your program is a worker thread that receives shutdown orders, or perhaps you want to impose a time constraint on a particular algorithm.)  Your design doesn&#8217;t use exceptions, but simulates their effect by constantly checking a global flag and returning when it&#8217;s time to abort.</p>
<p>So:<br />
<br />(1) Every function that takes any significant amount time needs to call should_I_quit() regularly, and if it returns TRUE then the function immediately returns.<br />
<br />(2) Just as importantly, any place in the code that calls one of the functions in (1) needs to call should_I_quit() soon afterwards, and if it&#8217;s TRUE then we again immediately return.  (And so forth, up the call stack.)</p>
<p>If anyone drops the ball anywhere, then you have a situation where the abort fails.  How do you test for these bugs?</p>
<p>Here&#8217;s how it&#8217;s tested on Unix systems with fork.  (I think it&#8217;s called &quot;fault injection testing.&quot;)  Create an abort-debugging build of the program with two special properties:<br />
<br />(1) All successful aborts cause the program to exit.<br />
<br />(2) The should_I_quit() function is changed to use fork.  Fork clones the whole process, and in the child process should_I_quit() returns TRUE, which should lead to the process exiting.  Meanwhile, the parent process waits for the child to exit &#8212; and if after a few seconds it&#8217;s still alive, we can report an abortability bug.  Otherwise, the parent process returns FALSE from should_I_quit() and everything proceeds normally onward to the next potential failure point, the next should_I_quit call, where the whole ordeal repeats itself.</p>
<p>Only by forking the whole process &#8212; that is, only by the process returning &amp; cleaning up &amp; exiting AND simultaneously continuing on as though nothing had happened &#8212; can we mechanically test all possible failure points.  Using threads won&#8217;t cut it.</p>
<p>I&#8217;ve thought about it for years and never come up with a Windows equivalent.  Any ideas?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>