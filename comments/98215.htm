<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (39)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1328985">
				<div id="div-comment-1328985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1328985">
			March 12, 2018 at 7:26 am</a>		</div>

		<p>I&#8217;ve always seen the need to cherry pick as a symptom of bad planning or branch discipline. If you have a F1 that is the parent of F1.1 and F1.2 it should have it&#8217;s own branch. That way in case F1.1 isn&#8217;t ready to ship but F1 and F1.2 are, then you merge F1 and F1.2 and call it done. That said you don&#8217;t always know that&#8217;s the case when you start, but again that seems like someone should have spent a bit more time on a whiteboard and less time in an IDE in that case.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1328995">
				<div id="div-comment-1328995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1328995">
			March 12, 2018 at 7:42 am</a>		</div>

		<p>We use cherry picking to get bugfixes from master to release branches. (Or sometimes from the release branches into master).   A cherry-pick from a feature branch to master is ridiculously rare.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3 parent" id="comment-1329025">
				<div id="div-comment-1329025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329025">
			March 12, 2018 at 8:30 am</a>		</div>

		<p>Merging a spot fix from the master into the feature branch means that you will also pick up changes you may not be ready for yet. When the master branch takes commits to thousands of files daily, that&#8217;s a heavy payload for what should be a one-line fix. &#8220;Why is everything broken?&#8221; &#8220;Oh, I merged ten thousand files from master in order to pick up a one-line fix.&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1329085">
				<div id="div-comment-1329085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Guillaume Davion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329085">
			March 12, 2018 at 9:44 am</a>		</div>

		<p>When you cherry pick, you only take one specific commit, not the whole history leading to it.</p>
<p>So if there is one specific commit for a bug fix, you will only take the changes in it, so not 10k files, just the ones affected by the bugfix.<br />
If the developers do commits affecting the whole repository for each bugfix, that&#8217;s an other sorry obviously.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1329135">
				<div id="div-comment-1329135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329135">
			March 12, 2018 at 12:58 pm</a>		</div>

		<p>Sorry, my reply was to the wrong comment. I meant to reply to EvilKiru who said &#8220;You should always merge from the master branch to the feature branch, never cherry-pick.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1329005">
				<div id="div-comment-1329005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EvilKiru</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329005">
			March 12, 2018 at 7:46 am</a>		</div>

		<p>Or you could prevent this scenario by only allowing merges into the feature branch. The rule where I work is that if you find a bug in the feature branch, you go fix it in the master branch, then merge the fix into the feature branch.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1329185">
				<div id="div-comment-1329185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329185">
			March 12, 2018 at 6:55 pm</a>		</div>

		<p>Raymond merged his comment into the wrong thread, have to pick it out:<br />
<a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329025" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329025</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1329015">
				<div id="div-comment-1329015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329015">
			March 12, 2018 at 7:52 am</a>		</div>

		<p>I agree that cherry picking is a bad idea for *copying* commits but do see it as useful for *moving* commits. There&#8217;s been a couple times I&#8217;ve been bouncing between branches for merging or reviews then forgotten to switch back to my feature branch when I resume work. In that scenario I&#8217;ve cherry picked to get the commit on the right branch then rebased to delete the commit.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1329115">
				<div id="div-comment-1329115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329115">
			March 12, 2018 at 10:03 am</a>		</div>

		<p>No-one is suggesting that cherry-picking is a bad feature for branch manipulation. It&#8217;s just best done in private, before pushing.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1329045">
				<div id="div-comment-1329045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329045">
			March 12, 2018 at 8:45 am</a>		</div>

		<p>I have nothing to add, but I do have a question: Why are all your arrows pointing backwards, into the past?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1329145">
				<div id="div-comment-1329145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://damsteen.nl' rel='external nofollow' class='url'>Sebastiaan Dammann</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329145">
			March 12, 2018 at 2:32 pm</a>		</div>

		<p>Because git commits are a DAG which point to one or more previous commits.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3 parent" id="comment-1329155">
				<div id="div-comment-1329155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329155">
			March 12, 2018 at 3:45 pm</a>		</div>

		<p>That&#8217;s answering the question without solving the problem. Basically, the answer is &#8220;Tradition.&#8221; It&#8217;s traditional in git to draw the commit graph rather than a timeline. Yes, it takes getting used to.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1329365">
				<div id="div-comment-1329365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pmbAustin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329365">
			March 13, 2018 at 9:01 am</a>		</div>

		<p>I don&#8217;t think it will ever not look wrong to me. Or make any sense at all to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle odd alt depth-4" id="comment-1329445">
				<div id="div-comment-1329445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329445">
			March 13, 2018 at 10:29 am</a>		</div>

		<p>Isn&#8217;t that the difference between diagramming the user flow versus the data flow?  User flow would have the arrows point towards HEAD, but data flow would have them point towards initial commit.  Also I might be making up terms at this point.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1329065">
				<div id="div-comment-1329065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329065">
			March 12, 2018 at 8:51 am</a>		</div>

		<p>Worse than an explosion? Worse than failure, as in &#8220;The Daily WTF&#8221;. I&#8217;d bet that is when GIT silently resolves the merge without raising any conflict (and thus, leaving you without the ability to solve it). This case could be so bad that it involves a build break whose cause is &#8220;in a galaxy far far away&#8221;. And those are fun to solve :-( .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1329075">
				<div id="div-comment-1329075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329075">
			March 12, 2018 at 9:06 am</a>		</div>

		<p>Our team has a dedicated dev and release branch for our project. Any new code goes into the dev branch (well actually it is merged into the dev branch from a ticket branch). Once that issue is QA&#8217;d we (each developer) cherry pick those changes to the release branch *assuming it&#8217;s approved for release*. This last assumption means that the dev and release branches are rarely if ever in sync.</p>
<p>That branch is regression tested and merged into master for release. Then master is back-merged into the dev and release branches. This is done by one individual who probably wasn&#8217;t handling any of the cherry picks. </p>
<p>Other teams have their own similar setups sharing the same master branch and release schedule. Usually teams don&#8217;t touch each other&#8217;s code very often, but it does happen. Also each branch has config files that are not to be merged or cherry-picked ever (because they reference binary versions of other components undergoing the same process in their own repositories). </p>
<p>Somehow this has worked reasonably well for us, but I&#8217;m waiting to see how it could be improved.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1329095">
				<div id="div-comment-1329095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pmbAustin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329095">
			March 12, 2018 at 9:52 am</a>		</div>

		<p>I&#8217;m not a git user&#8230; can someone explain to me why the arrows are going the &#8216;wrong&#8217; way?  And why pushing changes up to the main branch is called a &#8216;pull request&#8217;?  I&#8217;m having a really hard time with git because everything seems completely BACKWARDS to me, and seeing the diagrams above just emphasizes it, because I can&#8217;t reconcile in my brain what you&#8217;re saying with what the picture is showing&#8230; the picture is completely backwards. Change the arrows to point the other way and it makes sense. A common ancestor A is branched, so the arrow should go TOWARDS THE BRANCH, not backwards back to the ancestor.  I&#8217;m so confused by git and its bizarre terminology&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1329165">
				<div id="div-comment-1329165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329165">
			March 12, 2018 at 3:58 pm</a>		</div>

		<p>&gt; can someone explain to me why the arrows are going the ‘wrong’ way?</p>
<p>This better reflects git&#8217;s internal data structures: every commit contains the hash of its parent(s). Most explanations show them pointing the other way, to reflect the temporal flow of the changes, but Raymond is probably going into some low-level explanation of the data structures later in the series.</p>
<p>&gt;  And why pushing changes up to the main branch is called a ‘pull request’?</p>
<p>Because you aren&#8217;t pushing changes up to the main branch. Instead, you&#8217;re recording a request on some system for whoever manages the main branch to pull your changes into the main branch. Traditionally, this was/is done by sending an email to the maintainer of the main branch, with a link to your branch; the maintainer then pulls (fetch+merge) your branch into their branch.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1329355">
				<div id="div-comment-1329355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pmbAustin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329355">
			March 13, 2018 at 8:58 am</a>		</div>

		<p>Thanks, that helps. But I still don&#8217;t think I&#8217;ll ever wrap my brain around Git terminology&#8230; everything just seems backwards and odd and off. My mental model of source control just doesn&#8217;t map to it at all, and it&#8217;s like I&#8217;m constantly grinding my mental clutch every time I try.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1329465">
				<div id="div-comment-1329465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">d-coder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329465">
			March 13, 2018 at 11:41 am</a>		</div>

		<p>You&#8217;re not the only one.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1329105">
				<div id="div-comment-1329105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329105">
			March 12, 2018 at 9:57 am</a>		</div>

		<p>Thank you Raymond. Please make as much noise about this as you can! I don&#8217;t understand people who maintain a beautiful class hierarchy with nicely factored code, then litter their development history with cherry-picks like socks on a teenager&#8217;s bedroom floor. Put it in the right place the first time around! If you get it wrong, cherry-pick your way out of your mistake and be ashamed &#8211; don&#8217;t make it part of your process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1329125">
				<div id="div-comment-1329125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329125">
			March 12, 2018 at 11:00 am</a>		</div>

		<p>Can&#8217;t wait to see what you are going to do with merging to replace cherry picking. I&#8217;ve been using TFS for a long time and the ability to merge individual commits instead of whole branches is something I really miss when having to work with git.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1329265">
				<div id="div-comment-1329265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329265">
			March 12, 2018 at 11:58 pm</a>		</div>

		<p>Merging a single commit <b>is</b> cherry-picking.</p>
<p>That&#8217;s what it means.<br />
By definition it partially breaks the history of the repo, because it causes some files to have a different path through history than others.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3" id="comment-1329315">
				<div id="div-comment-1329315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329315">
			March 13, 2018 at 7:36 am</a>		</div>

		<p>Merging a single commit is not the same as cherry-picking. Just draw the graph.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1329195">
				<div id="div-comment-1329195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329195">
			March 12, 2018 at 6:59 pm</a>		</div>

		<p>If you&#8217;re doing a series, you may want some tags beyond &#8220;other&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1329335">
				<div id="div-comment-1329335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329335">
			March 13, 2018 at 7:43 am</a>		</div>

		<p>I have only four categories, and I don&#8217;t usually tag series.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1329205">
				<div id="div-comment-1329205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329205">
			March 12, 2018 at 8:13 pm</a>		</div>

		<p>&gt; It is at the time somebody tries to merge the two commits together that the explosion occurs, and that point could be in a faraway place not immediately related to the branches involved in the cherry-pick. This means that the person trying to resolve the merge was never part of the cherry-pick madness and may not know who to talk to in order to figure out what happened.</p>
<p>So I&#8217;ve been thinking through this for a while now, and I think I see where our difference of opinion is arising.</p>
<p>At Microsoft, we know[1] they develop primarily on feature branches, and merge stuff inwards into the trunk as it stabilizes.  But many places do the exact opposite: they develop primarily on the trunk and merge stuff outwards into release branches as it stabilizes.  There is a critical difference between these approaches: Merging inwards results in a lot of code originating from different branches landing in the same place, while merging outwards results in the same code landing in lots of different places.</p>
<p>Proposition: Cherry-picking is evil when you cherry-pick inwards (onto a branch that accepts incoming merges from many different branches, or a branch where active development occurs), but not when you cherry-pick outwards (onto a branch that only accepts merges from a single other branch, the same branch that you cherry-picked from, and which is otherwise inert).  Discuss?  Counterexamples?</p>
<p>[1]: <a href="https://blogs.msdn.microsoft.com/oldnewthing/20130820-00/?p=3453" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20130820-00/?p=3453</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1329325">
				<div id="div-comment-1329325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329325">
			March 13, 2018 at 7:43 am</a>		</div>

		<p>Git doesn&#8217;t understand &#8220;directions&#8221;. All branches are equivalent in git&#8217;s eyes. Just reverse the labels &#8220;master&#8221; and &#8220;feature&#8221; in the diagram, and you have the same situation. A change is made in the master branch, it is cherry-picked into the feature branch, and then a subsequent change is made in the master branch, and then the two branches merge. Conflict.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1329515">
				<div id="div-comment-1329515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329515">
			March 13, 2018 at 1:24 pm</a>		</div>

		<p>Yes, I understand that.  My point is that, if the branch you cherry-pick onto is only ever merged into from one other branch, and that&#8217;s the branch you&#8217;re cherry-picking from, then I don&#8217;t see how problems can arise.</p>
<p>You can criticize that as unrealistic, but then as I explained, not everyone uses feature branches the way Microsoft does.  For that matter, not everyone uses Git.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4 parent" id="comment-1329535">
				<div id="div-comment-1329535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329535">
			March 13, 2018 at 3:19 pm</a>		</div>

		<p>Even if you cherry-pick only from branches you intend to merge from, you still have this problem. Observe that in the first explosion diagram, the master branch cherry-picked from the feature branch, and then it later merged from that same branch.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5 parent" id="comment-1329625">
				<div id="div-comment-1329625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329625">
			March 14, 2018 at 3:50 pm</a>		</div>

		<p>I don&#8217;t want to get into a lengthy internet argument with you, but at my workplace, M1, M3, and perhaps even the final merge would be prohibited by policy (because you don&#8217;t make commits on that branch, you make them on the origin branch and cherry-pick them in, and eventually the whole branch is quietly abandoned and replaced).  The destination branch is nothing more than a &#8220;what went into this release&#8221; tracker, and for that purpose I see nothing wrong with an occasional cherry-pick.</p>
<p>Again, I agree that A) this is a very idiosyncratic workflow, B) for Microsoft&#8217;s branching strategy it doesn&#8217;t make sense, and C) you can only get away with cherry-picking if your branching strategy very rigidly avoids the kinds of issues you are blogging about, which D) are far too often ignored by people making careless cherry-picks on random Git projects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-5" id="comment-1329635">
				<div id="div-comment-1329635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329635">
			March 14, 2018 at 3:57 pm</a>		</div>

		<p>I&#8217;m assuming that you want the two branches to merge eventually; you just need to get one commit into the other branch faster than the others. If your design is that the branches will never merge, then merge conflicts are nonexistent and the issue is moot.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1 parent" id="comment-1329255">
				<div id="div-comment-1329255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329255">
			March 12, 2018 at 11:43 pm</a>		</div>

		<p>We did have 2 branch of HR systems in my ex-company. The retail branch is a copy of master branch.</p>
<p>We did erratic change to the retail branch to speed up the payroll calculations, but the change we made is too huge to port back to master branch (there are table structure change, and even change in meaning of constant values) so our boss made the decision that these two branches will never merge back.</p>
<p>That&#8217;s one way why an explosion doesn&#8217;t happen. (And I&#8217;m sure that it isn&#8217;t what you mean :P )</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1329555">
				<div id="div-comment-1329555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329555">
			March 13, 2018 at 6:36 pm</a>		</div>

		<p>That&#8217;s when you cherry-pick everything into retail, delete master and rename retail master.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-3" id="comment-1329645">
				<div id="div-comment-1329645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329645">
			March 14, 2018 at 6:56 pm</a>		</div>

		<p>Too bad we can do that, because the master branch is already in use by a major client which as accountable for over 50% of our department&#8217;s maintenance fee income. And we cannot move their system to retail branch because their payroll calculation is significantly more complex than any other companies. No one in the company dares to rewrite that part.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1329475">
				<div id="div-comment-1329475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329475">
			March 13, 2018 at 11:50 am</a>		</div>

		<p>As others have said, I only ever saw cherry-picking in git as a way to bring a particular bug-fix into a release-branch to do a point-release or bug-fix release. For example from v12.0 to v12.1 or v12.0.1. Those release branches don&#8217;t see any further development except these feature or bug-fix merges.</p>
<p>Of course, it only works if you plan your initial commits correctly, meaning don&#8217;t mix multiple unrelated fixes or dev into a single commit. Unfortunately, the temptation to slip in a small fix with a feature is very strong. (But that problem is unrelated to cherry-pick vs merge.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1329545">
				<div id="div-comment-1329545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329545">
			March 13, 2018 at 4:02 pm</a>		</div>

		<p>I use cherry-picking all the time to take specific fixes from the main development trunk of a project I work on and back-port it to a different branch. Most of the development work that gets done on the main trunk will never get pushed to that particular branch (its a more stable build for a specific purpose where the main development trunk cant be used) but sometimes fixes get made that do apply to this particular branch, hence the cherry picking.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1329575">
				<div id="div-comment-1329575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hli</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1329575">
			March 14, 2018 at 7:05 am</a>		</div>

		<p>I use cherry-picking to do more extensive history-rewriting (e.g. rebasing a branch on top of a branch that was itself rebased). My rule here is: when I have cherry-picked, the donor branch needs to go away. Do not have duplicate commits.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1330045">
				<div id="div-comment-1330045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215#comment-1330045">
			March 19, 2018 at 11:28 am</a>		</div>

		<p>I&#8217;ve long found that carrying a &#8220;feature&#8221; branch forward is full of problems. Once I merge/cherry pick to master, I &#8220;delete&#8221; that feature branch. Another advantage this has is that on the short term, you can see exactly the purpose of each [well named] branch.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>