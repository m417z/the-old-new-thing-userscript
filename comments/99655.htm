<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1359525">
				<div id="div-comment-1359525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stewart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180905-00/?p=99655#comment-1359525">
			September 5, 2018 at 7:10 am</a>		</div>

		<p>How does this work if runas has been used to run the app as a different account? Would the COM server be running as the user the app is running as, or as the user that logged into the session?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1359695">
				<div id="div-comment-1359695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tiraniddo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180905-00/?p=99655#comment-1359695">
			September 6, 2018 at 2:56 pm</a>		</div>

		<p>The current implementation uses the console session&#8217;s user token (i.e. what you&#8217;d get back from WTSQueryUserToken) which means if you login with one user (say Alice) then use the runas command to spawn something as a different user account (say Bob) then any Interactive User COM objects that Bob&#8217;s process creates will actually run under Alice&#8217;s account. This can cause these COM objects to fail because the default access security descriptor for COM only grants to Admins and Self, which for COM is the COM server&#8217;s user account. I&#8217;ve also abused this behaviour before for a cross session exploit (<a href="https://googleprojectzero.blogspot.com/2016/01/raising-dead.html" rel="nofollow">https://googleprojectzero.blogspot.com/2016/01/raising-dead.html</a> if you&#8217;re curious)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-odd thread-alt depth-1 parent" id="comment-1359545">
				<div id="div-comment-1359545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180905-00/?p=99655#comment-1359545">
			September 5, 2018 at 7:54 am</a>		</div>

		<p>&#8220;Logged-in user for the session&#8221; is ambiguous IMHO. The user who logged in on the &#8220;welcome screen&#8221; (the TS/RDP session) might not be the same as the user SID for GetCurrentProcess() if RunAs/LogonUser/UAC has been used to create a different logon session (or whatever it&#8217;s called).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1359575">
				<div id="div-comment-1359575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180905-00/?p=99655#comment-1359575">
			September 5, 2018 at 3:30 pm</a>		</div>

		<p>In context, Raymond must mean the user who logged in from the &#8220;welcome screen&#8221; because the elevated and restricted tokens are in different logon sessions, so if it worked that way you&#8217;d still be elevated.</p>
<p>The documentation isn&#8217;t as clear as it could be, mind you.  <em>Which</em> interactive desktop?  The one belonging to the Remote Desktop session the process is running in, presumably, but it <em>could</em> be interpreted to mean the desktop attached to the local console.</p>
<p>It also leaves me wondering what exactly happens if the COM server is invoked in a non-interactive context, e.g., from a system service.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1359585">
				<div id="div-comment-1359585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180905-00/?p=99655#comment-1359585">
			September 5, 2018 at 4:28 pm</a>		</div>

		<p>Well if you are an Administrator you can construct a non-admin version of your own token. But COM elevation doesn&#8217;t know about it and the resulting limited process doesn&#8217;t know how to elevate back.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1359645">
				<div id="div-comment-1359645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180905-00/?p=99655#comment-1359645">
			September 5, 2018 at 11:21 pm</a>		</div>

		<p>I thought it would be something using CreateRestrictedToken() API, so it runs as limited user whether UAC is enabled or not, or even in WinXP where UAC is not a thing yet.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>