<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1237026">
				<div id="div-comment-1237026" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1237026">
			July 16, 2015 at 7:07 am</a>		</div>

		<p>Calling such methods as these on your own process has no such caveats, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237006">
				<div id="div-comment-1237006" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1237006">
			July 16, 2015 at 8:28 am</a>		</div>

		<p>&quot;Debuggers don&#39;t use any of these APIs. Debuggers receive special events to notify them of modules as they are loaded and unloaded&#8230;.&quot;</p>
<p>The debugger I&#39;m working on gets notified for DLLs that are loaded and unloaded, but there doesn&#39;t seem to be a debug event for the load of the initial executable module. &nbsp;The only way I&#39;ve found to get that is via GetModuleFileNameEx. Am I missing something?</p>
<div class="post">[<em>CREATE_PROCESS_DEBUG_INFO? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1222052">
				<div id="div-comment-1222052" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Emjayen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1222052">
			July 16, 2015 at 8:56 am</a>		</div>

		<p>@Joshua If you&#39;re calling one of those methods at all then the loader has already done it&#39;s job and passed control to your module (so in that case: no). However in the case of DLLs I *believe* the loader lock is taken during it&#39;s callback (&quot;DllMain&quot;) and therefor results are undefined when it comes to standard methods of querying the module directory via PSAPI calls (personally, I&#39;ve always used my own functions for enumerating modules and such so I can&#39;t be certain)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236996">
				<div id="div-comment-1236996" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1236996">
			July 16, 2015 at 11:05 am</a>		</div>

		<p>@Joshua, provided you&#39;re single threaded. Otherwise another thread could call FreeLibrary while you&#39;re calling GetModuleFileNameEx.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236986">
				<div id="div-comment-1236986" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1236986">
			July 16, 2015 at 11:19 am</a>		</div>

		<p>If you know the address of the module in question inside the target process, you can use [K32]GetMappedFileNameW to reliably get the image mapped at that address. &nbsp;It works without reading data structures in the target process that may not yet be initialized, as in this article. &nbsp;You can use VirtualQueryEx to distinguish between MEM_IMAGE and MAP_MAPPED; the former is how a loaded .exe or .dll gets mapped.</p>
<p>([K32] refers to the fact that in Windows 7 and later, this function was moved from psapi.dll to kernel32.dll, and renamed with &quot;K32&quot; at the beginning of the export name: K32GetMappedFileNameW. &nbsp;psapi.dll is just a thin wrapper calling the K32 version on Windows 7 and later. &nbsp;See the PSAPI_VERSION #define.)</p>
<p>The only issue with GetMappedFileNameW is that it returns an NT path, not a DOS path. &nbsp;Some labor is required, typically via QueryDosDeviceW, to convert such a path to a Win32 path. &nbsp;(And you&#39;ll have to special-case SystemRoot as GetWindowsDirectoryW.)</p>
<p>If it is only the .exe name that you are after, QueryFullProcessImageNameW is a better choice, because you don&#39;t need the base address, and because you can ask it to do the NT-to-DOS path conversion for you. &nbsp;(I wish this NT&lt;-&gt;DOS path conversion were available in a documented API.) &nbsp;GetMappedFileNameW supports any module in the target process, not just the .exe</p>
<div class="post">[<em>But of course you would never ship an app that called an undocumented API like K32GetMappedFileNameW, right? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1222042">
				<div id="div-comment-1222042" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1222042">
			July 16, 2015 at 11:31 am</a>		</div>

		<p>Separate post for separate point.</p>
<p>&quot;It loads the primary executable&quot; is partially incorrect for ntdll.dll. &nbsp;When you call NtCreateUserProcess, the kernel maps in the command line, environment, ntdll.dll, the primary executable, and the first thread&#39;s new stack. &nbsp;The process is entirely empty beyond that. &nbsp;So when ntdll!LdrInitializeThunk is called at thread start, the .exe is already mapped into memory, but none of the other aspects required for loading, such as relocations(*) and DLL imports, have been done. &nbsp;ntdll.dll&#39;s Ldr code is responsible for that, not the kernel.</p>
<p>Prior to Vista, creating a process, via NtCreateProcess, was even more &quot;pure&quot;: the *only* things in the new process were the PEB, ntdll.dll, and the .exe. &nbsp;The creating process had to use the equivalent of VirtualAllocEx and WriteProcessMemory to copy the environment and command line into the target process. &nbsp;The creating process also had to create the initial thread, by essentially calling VirtualAllocEx, then creating the raw thread using NtCreateThread with context-&gt;Esp pointing to this new stack. &nbsp;This was changed in Vista to having the kernel doing the copying of the command line and environment and the creation of the first thread. &nbsp;This redesign was primarily motivated by DRM reasons (**).</p>
<p>(*) Relocations for ASLR are done by the kernel, not ntdll.dll, to enable copy-on-write behavior despite relocation. &nbsp;Each /dynamicbase DLL is assigned a random base address by ASLR; the kernel then relocates the executable to this address. &nbsp;If mapping the DLL at this random address fails for a particular process, it gets mapped to a different address, and then ntdll.dll is responsible for relocating it, rather than the kernel.</p>
<p>(**) According to Arun Kishan, NT kernel developer. &nbsp;I think this is the video where he says that: <a rel="nofollow" target="_new" href="https://channel9.msdn.com/Shows/Going+Deep/Arun-Kishan-Process-Management-in-Windows-Vista">channel9.msdn.com/&#8230;/Arun-Kishan-Process-Management-in-Windows-Vista</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236976">
				<div id="div-comment-1236976" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1236976">
			July 16, 2015 at 1:02 pm</a>		</div>

		<p>[CREATE_PROCESS_DEBUG_INFO? -Raymond]</p>
<p>Thanks, but I should have made clear that I was talking about when the debugger attaches to an existing process (DebugActiveProcess). &nbsp;In that case, CREATE_PROCESS_DEBUG_INFO does not fill out the lpImageFile field. &nbsp;You get notifications for all the DLLs that were already loaded, but no hints for the initial executable. &nbsp;In these cases, GetModuleFileNameEx frequently works but not always.</p>
<div class="post">[<em>It doesn&#39;t fill in the lpImageFile? That sucks. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236966">
				<div id="div-comment-1236966" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1236966">
			July 16, 2015 at 1:43 pm</a>		</div>

		<p>[But of course you would never ship an app that called an undocumented API like K32GetMappedFileNameW, right? -Raymond]</p>
<p>Undocumented API? &nbsp;<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms683195(v=vs.85).aspx" rel="nofollow" target="_new">msdn.microsoft.com/&#8230;/ms683195(v=vs.85).aspx</a></p>
<p>Even the &quot;K32&quot; part is documented on that page&#8230; &nbsp;Sorry, I don&#39;t know what you mean.</p>
<div class="post">[<em>Ugh. Once again, documentation trying to be helpful by providing non-contractual implementation details. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236956">
				<div id="div-comment-1236956" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1236956">
			July 16, 2015 at 4:04 pm</a>		</div>

		<p>As Myria already pointed out, the executable is mapped into the new process ahead of time. &nbsp;One interesting feature is that if you&#39;re using CreateProcessAsUser (or variants) that mapping uses the security context of the parent, not that of the child &#8211; I took advantage of that once, to allow a service to launch an application in the user&#39;s context while ensuring that the user couldn&#39;t launch the same application directly. &nbsp;(The ACL on the executable file denied read and execute permissions to the user, but granted them to the service.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236946">
				<div id="div-comment-1236946" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1236946">
			July 16, 2015 at 4:07 pm</a>		</div>

		<p>Come to think of it, I wonder if the new process inherits a handle to its own executable?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236936">
				<div id="div-comment-1236936" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1236936">
			July 16, 2015 at 5:07 pm</a>		</div>

		<p>Well, those implementation details (about K32xxx) are already documented, in the PSAPI.H file (not findable only through groveling for exported names), so MSDN is just restating published info. &nbsp;</p>
<p>MSDN also says &quot;Programs &#8230; should always call this function as GetMappedFileName.&quot;, so that info about K32xxx &#8211; forget you ever heard it. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236916">
				<div id="div-comment-1236916" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1236916">
			July 16, 2015 at 7:21 pm</a>		</div>

		<p>@I heart MSDN: The part you omitted in &quot;&#8230;&quot; is very important: &quot;Programs that must run on earlier versions of Windows as well as Windows 7 and later versions&quot;. &nbsp;MSDN is saying to use GetMappedFileNameW when you must support pre-7 versions of Windows, but you don&#39;t have to when you only target 7 and later.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236906">
				<div id="div-comment-1236906" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1236906">
			July 16, 2015 at 8:11 pm</a>		</div>

		<p>@Harry Johnston: Keep in mind that a user has generally access to OpenProcess(PROCESS_VM_READ) on processes running as them. &nbsp;You can use this to read the executable from memory, effectively bypassing the lockout against read access to the file. &nbsp;Even if you were to make the process inaccessible to the user using an ACL, because its user owns the process object (in the standard CreateProcessAsUserW implementation), another process running as that user can use OpenProcess(WRITE_DAC) and change the ACL. &nbsp;There might also be issues like SetWindowsHookExW.</p>
<p>In short, don&#39;t rely upon the security of read-proofing an executable while still executing it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236896">
				<div id="div-comment-1236896" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1236896">
			July 17, 2015 at 4:33 am</a>		</div>

		<p>I think injecting a thread is even more crazy than Read­Process­Memory.</p>
<p>Does the injected thread leave behind any detectable trails after it&#39;s gone?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236886">
				<div id="div-comment-1236886" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1236886">
			July 17, 2015 at 5:32 am</a>		</div>

		<p>The name K32GetMappedFileNameW is mapped in a #define, which means that the executable that calls it will have the K32-name compiled into it. That makes it contractual, the same way that FooW and FooA are contractual even though the documentation is only for function Foo.</p>
<p>And the documentation for CREATE_PROCESS_DEBUG_INFO states &quot;The system also does not provide this information in the case of debug events that originate from a call to the DebugActiveProcess function&quot;, so this aspect is also contractual.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236786">
				<div id="div-comment-1236786" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1236786">
			July 17, 2015 at 12:28 pm</a>		</div>

		<p>IMHO GetModuleFileNameEx is that kind of functions that are buggy by design. It doesn&#39;t hold loader lock, thus even for completely initialized and alive process it may randomly fail or even return garbage</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1222032">
				<div id="div-comment-1222032" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1222032">
			July 18, 2015 at 4:55 am</a>		</div>

		<p>Remembered one more thing about Create­Tool­help­32­Snapshot. As noted, it creates thread remotely that queries information. This allows to correctly query information always BUT has another annoying sideeffect. If target process stuck with loader lock (or some other important synch) held &#8211; then that thread also stuck. And subsequently Module32First/Next (and may be some other *32First/Next) also stuck waiting that thread. However there is (was?) never documented trick. Toolhelp uses (or used at that times) alertable wait to wait remote thread finish. So it was possible to almost gracefully &#39;cancel&#39; stucked toolhelp call by calling QueueUserApc(ExitThread,..) onto a thread that called toolhelp.</p>
<p>However since alertable wait in toolhelp was never documented &#8211; I can guess it could also cause bugs in software that doesn&#39;t expect their APC will be processed during Module32**t&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1235996">
				<div id="div-comment-1235996" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150716-00/?p=45131#comment-1235996">
			July 22, 2015 at 3:39 pm</a>		</div>

		<p>@Myria: good point. &nbsp;In my case that didn&#39;t matter; I wasn&#39;t trying to prevent users from intentionally pirating the application (doubtless they could find a copy online if that was what they wanted) I just needed to keep track of how many instances were running at any one time. &nbsp;It also should be safe enough in a sufficiently locked-down environment, i.e., an application whitelist, assuming said whitelist doesn&#39;t need to include a debugger. :-)</p>
<p>(Is it straightforward to reconstruct the executable file from the contents of the process address space?)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>