<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1039583">
				<div id="div-comment-1039583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039583">
			February 14, 2013 at 7:40 am</a>		</div>

		<p>My first thought was DLL forwarding. Got that a alot when KernelBase.dll was introduced. However, I would run &quot;x *!Ds­Address­To­Site­NameW&quot;, grab a coffee, and return to find the relocated function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1039603">
				<div id="div-comment-1039603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039603">
			February 14, 2013 at 9:25 am</a>		</div>

		<p>Couldn&#39;t the debugger be smart enought to recognize the DLL forwarding just like the loader does and correct your bp for you?</p>
<div class="post">[<em>It could. The question is how smart you want your debugger to be. Sometimes it can be too smart for its own good. &quot;Of course my DLL has that function. Look, see, I&#39;m setting a breakpoint on it right now.&quot; And each time you add another step to symbol resolution, you make symbol resolution a tiny bit slower. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1039623">
				<div id="div-comment-1039623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lefty</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039623">
			February 14, 2013 at 11:04 am</a>		</div>

		<p>I still can&#39;t find Ds­Address­To­Site­NameW(), but I have no problem with Ds­Address­To­Site­NamesW().</p>
<p>Is this a nitpick, a conspiracy theory, or a helpful pointer of a spelling error? Or am I just clueless?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-odd thread-alt depth-1" id="comment-1039633">
				<div id="div-comment-1039633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039633">
			February 14, 2013 at 11:49 am</a>		</div>

		<p>@lefty: the government made DsAddressToSiteNameW &quot;disappear&quot; since it started to know too much about chemtrails. Since now you know, they&#39;ll probably have to kill you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1039653">
				<div id="div-comment-1039653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr&#237;guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039653">
			February 14, 2013 at 12:30 pm</a>		</div>

		<p>@Matteo: now you have to kill me, too. And thousands or readers. Of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1039693">
				<div id="div-comment-1039693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039693">
			February 14, 2013 at 2:43 pm</a>		</div>

		<p>&quot;And each time you add another step to symbol resolution, you make symbol resolution a tiny bit slower.&quot;</p>
<p>I know you tend you have pretty old computers at Microsoft, but I would expect it to take a lot less time for my computer to do the forwarding lookup automatically than I would doing it manually&#8230;</p>
<div class="post">[<em>It&#39;s not whether the computer can do it faster than you. It clearly can. It&#39;s whether the additional cost of doing this work when it ultimately fails outweighs the benefit of the rare cases where it actually succeeds. (Because approximately 99.99999% of all symbol lookups are for non-forwarded functions.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1039713">
				<div id="div-comment-1039713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The cat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039713">
			February 14, 2013 at 9:09 pm</a>		</div>

		<p>I never saw this before, the comment thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1039673">
				<div id="div-comment-1039673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039673">
			February 14, 2013 at 1:15 pm</a>		</div>

		<p>There&#39;re also other funny cases wih symbols names mismatched with corresponding exports. Start windbg without symbols path set and attach to process (w2k3 in this particular case):</p>
<p>0:001&gt; u USER32!SetActiveWindow</p>
<p>*** ERROR: Symbol file could not be found. &nbsp;Defaulted to export symbols for E:WINsystem32USER32.dll &#8211; </p>
<p>USER32!SetActiveWindow:</p>
<p>7738a91f b8f5110000 &nbsp; &nbsp; &nbsp;mov &nbsp; &nbsp; eax,offset &lt;Unloaded_elp.dll&gt;+0x11f4 (000011f5)</p>
<p>7738a924 ba0003fe7f &nbsp; &nbsp; &nbsp;mov &nbsp; &nbsp; edx,offset SharedUserData!SystemCallStub (7ffe0300)</p>
<p>7738a929 ff12 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;call &nbsp; &nbsp;dword ptr [edx]</p>
<p>7738a92b c20400 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret &nbsp; &nbsp; 4</p>
<p>7738a92e 33c0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;xor &nbsp; &nbsp; eax,eax</p>
<p>7738a930 40 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;inc &nbsp; &nbsp; eax</p>
<p>7738a931 e9c0380100 &nbsp; &nbsp; &nbsp;jmp &nbsp; &nbsp; USER32!CharUpperA+0xfe (7739e1f6)</p>
<p>7738a936 90 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nop</p>
<p>yep, we can see SetActiveWindow. There&#39;is such API and there is such export. While windbg has no .pdb for user32.dll it deals with exports. Now set symbols path and see what happen:</p>
<p>0:001&gt; .symfix</p>
<p>0:001&gt; .reload</p>
<p>Reloading current modules</p>
<p>&#8230;&#8230;&#8230;&#8230;..</p>
<p>0:001&gt; u USER32!SetActiveWindow</p>
<p>Couldn&#39;t resolve error at &#39;USER32!SetActiveWindow&#39;</p>
<p>oops, SetActiveWindow went away :( lets see what is at its address (7738a91f) now</p>
<p>0:001&gt; u 7738a91f </p>
<p>USER32!NtUserSetActiveWindow:</p>
<p>7738a91f b8f5110000 &nbsp; &nbsp; &nbsp;mov &nbsp; &nbsp; eax,offset &lt;Unloaded_elp.dll&gt;+0x11f4 (000011f5)</p>
<p>7738a924 ba0003fe7f &nbsp; &nbsp; &nbsp;mov &nbsp; &nbsp; edx,offset SharedUserData!SystemCallStub (7ffe0300)</p>
<p>7738a929 ff12 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;call &nbsp; &nbsp;dword ptr [edx]</p>
<p>7738a92b c20400 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret &nbsp; &nbsp; 4</p>
<p>7738a92e 33c0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;xor &nbsp; &nbsp; eax,eax</p>
<p>7738a930 40 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;inc &nbsp; &nbsp; eax</p>
<p>7738a931 e9c0380100 &nbsp; &nbsp; &nbsp;jmp &nbsp; &nbsp; USER32!CategoryMaskFromEvent+0x67 (7739e1f6)</p>
<p>7738a936 90 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nop</p>
<p>thats the reason &#8211; now there is no SetActiveWindow, but NtUserSetActiveWindow &#8211; its actual in-code name as reflected in pdb..</p>
<p>BTW I noticed that in latest Windows many system API moved from usual dlls to new ones.. Looks like MS hired special people to invent new dll names&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1039723">
				<div id="div-comment-1039723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Weng Fu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039723">
			February 15, 2013 at 2:55 am</a>		</div>

		<p>It is easy to lookup the line number when debugging the Visual Basic 6. Not necessary to use the contosoAwasomFunction technique</p>
<div class="post">[<em>AwesomeFunction was not a technique. It was just the name of the function that was trying to call DsAddressToSiteNameW in the first place. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1039733">
				<div id="div-comment-1039733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039733">
			February 15, 2013 at 3:45 am</a>		</div>

		<p>So, if Killer&#39;s use case was fixed (search both symbols and public exports) would netapi32!DSAddressToSiteNameW be found in the public exports (as presumably GetProcAddress(GetModuleHandle(&quot;netapi32&quot;), &quot;DSAddressToSiteNameW) has to work)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1039753">
				<div id="div-comment-1039753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039753">
			February 15, 2013 at 6:18 am</a>		</div>

		<p>&quot;Looks like MS hired special people to invent new dll names&quot;</p>
<p>I thought it was called refactoring&#8230; &nbsp;it takes really special people to do that. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1039743">
				<div id="div-comment-1039743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leo Davidson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039743">
			February 15, 2013 at 5:42 am</a>		</div>

		<p>&quot;(Because approximately 99.99999% of all symbol lookups are for non-forwarded functions.)&quot;</p>
<p>Those 99.99999% of cases would incur no cost because the extra work is only needed when the direct lookup fails.</p>
<p>Given the abysmal amount of time debuggers spend getting symbols in the first place (at least when you&#39;re not on the same LAN* as the symbol server), I do not think checking the loaded DLLs&#39; import tables for forwards and acting accordingly would take a noticeable amount of time at all, and it would be rather useful.</p>
<p>(*May contain hyperbole. :))</p>
<div class="post">[<em>The extra work kicks in when you misspell a symbol because &quot;Oh wait, maybe it&#39;s not really a typo but a <span style="text-decoration:underline;">fill in the blank</span>. Let me go check that possibility.&quot;&nbsp;(Hint: Set up a symbol cache. Then it&#39;s slow only&nbsp;the first time.)&nbsp;-Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1039863">
				<div id="div-comment-1039863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039863">
			February 15, 2013 at 8:11 pm</a>		</div>

		<p>[The extra work kicks in when you misspell a symbol because &quot;Oh wait, maybe it&#39;s not really a typo but a fill in the blank. Let me go check that possibility.&quot; (Hint: Set up a symbol cache. Then it&#39;s slow only the first time.) -Raymond]</p>
<p>Gee, and I would have had the debugger use the equivalent of RemoteGetProcedureAddress (yes I know this function doesn&#39;t exist) as a first pass so it could (1) function in the absence of symbols and (2) actually detect the forwarded case.</p>
<div class="post">[<em>RemoteGetProcedureAddress would be horrible, because that might trigger a LoadLibrary if the forwarded-to DLL hasn&#39;t been loaded yet! -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1039903">
				<div id="div-comment-1039903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039903">
			February 16, 2013 at 7:26 pm</a>		</div>

		<p>[RemoteGetProcedureAddress would be horrible, because that might trigger a LoadLibrary if the forwarded-to DLL hasn&#39;t been loaded yet! -Raymond]</p>
<p>It would have returned -ENOSYS because I wouldn&#39;t have dared let it load a DLL. Your intuition was spot on about can&#39;t load it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1039923">
				<div id="div-comment-1039923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1039923">
			February 17, 2013 at 11:28 am</a>		</div>

		<p>Of course computers should do humans job as much as possible. Do do boring manual work is stupid.</p>
<div class="post">[<em>Doing unwanted work automatically is also stupid. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1040133">
				<div id="div-comment-1040133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/elias.bachaalany_4000_outlook.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>elias.bachaalany@outlook.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1040133">
			February 18, 2013 at 4:37 pm</a>		</div>

		<p>Why does it feel that having to compile a program just to figure out the address of a given function is an overkill?</p>
<p>I would encourage people to look at DUMPBIN or Dependency Walker to discover forwarded APIs and figure out where and how the function in question gets resolved.</p>
<div class="post">[<em>Um, the address of the function isn&#39;t know until you run a program. (ASLR moves the function around.) And you didn&#39;t have to compile a new program. You already have a program compiled and ready to go: The program you are currently debugging! -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1040143">
				<div id="div-comment-1040143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/elias.bachaalany_4000_outlook.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>elias.bachaalany@outlook.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130214-00/?p=5243#comment-1040143">
			February 18, 2013 at 4:50 pm</a>		</div>

		<p>Thanks for your reply Raymond.</p>
<p>I must have been confused by this line</p>
<p>&quot;Just write a program that calls the function, then load it into the debugger and see what the destination of the call instruction is.&quot; and skipped the following line about the program you&#39;re already debugging! :)</p>
<p>But still, what if in the program I am debugging, I don&#39;t know Awesomefunction or other functions that calls what I thought to be netapi32!Ds&shy;Address&shy;To&shy;Site&shy;NameW ?</p>
<p>For example, in many cases when I am debugging a program, I know (by the program&#39;s nature) that it will be calling a certain API. For instance, say that I expect a program to talk to a driver, I know it must be calling DeviceIoControl but I don&#39;t know Awesomefunction that calls it, so I won&#39;t be able to follow your method.</p>
<p>And sorry, I did not really mean to say that one has to discover the addresses of the functions with dumpbin or DepWalker but instead discover how they are forwarded so one can directly put the correct breakpoint (modname!ApiName) in the debugger.</p>
<div class="post">[<em>You can set the breakpoint via the import table. <code>bp poi Contoso!__imp__DsAddressToSiteNameW</code>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>