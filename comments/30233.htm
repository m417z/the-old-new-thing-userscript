<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (38)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-405953">
				<div id="div-comment-405953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-405953">
			August 4, 2006 at 10:11 am</a>		</div>

		<p>And (3) document in the code why you made this choice so that a future maintainer doesn&#8217;t come along and undo your brilliant work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405963">
				<div id="div-comment-405963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-405963">
			August 4, 2006 at 10:13 am</a>		</div>

		<p>Taking delegates out of the picture for now &#8211; why would there be a performance difference between the two. Shouldn&#8217;t a halfway decent compiler (i.e. the C# compiler) generate identical code (with the possible exception of the order in which &#8220;i&#8221; and &#8220;s&#8221; appear on the stack) for both of your first two loops?</p>
<p>If not, shouldn&#8217;t the magic of JIT compilers that allows dynamically profiled managed code to run faster than native code eliminate any differences that remain?</p>
<p>I always thought that performance was a complete non-argument for either side when choosing where to declare variables.</p>
<div CLASS=post>[<i>You&#8217;d be surprised how many arguments there are over non-arguments. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405973">
				<div id="div-comment-405973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-405973">
			August 4, 2006 at 10:21 am</a>		</div>

		<p>Good question, Adam. &nbsp;To extend this, why wouldn&#8217;t the compiler, if it does optimize by moving the declaration outside of the loop, break the code in the delegate case?</p>
<p>Are most compilers naive in this performance aspect and would not optimize, are they naive and would optimize such that it breaks the delegate, or are they intelligent enough to realize the difference?</p>
<div CLASS=post>[<i>Obviously a compiler&#8217;s optimizer can&#8217;t make this change because it would violate the language&#8217;s specification. I can&#8217;t believe I had to write that. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405993">
				<div id="div-comment-405993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-405993">
			August 4, 2006 at 10:36 am</a>		</div>

		<p>When s is a local variable, it really doesn&#8217;t matter where it is declared because the amount of stack space a function needs is allocated at function entry. In the case where it is used in an anonymous delegate, though, it is not a local variable anymore; it is a variable that is shared between the method in which it was declared and the anonymous delegate. This means it is actually declared in a heap-allocated data structure (probably a class in C#), and that structure creation is not something the compiler will optimize.</p>
<p>Of course there is still a local variable, but in this case it&#8217;s a reference to the structure containing all of the variables shared by the method and the delegate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-406003">
				<div id="div-comment-406003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406003">
			August 4, 2006 at 10:40 am</a>		</div>

		<p>Can I start by saying that as a .NET developer I&#8217;ve really enjoyed the posts this week. Raymond has a great way of explaining things and while a lot of his Win32 posts are outside my understanding I enjoy reading them for the insight into Windows internals.<br />
<br />I didn&#8217;t realise the danger of anonymous methods in C#, I&#8217;ve only just moved to version 2.0 of the framework and haven&#8217;t used them yet. I must say coming from a Java background the restriction of only allowing final local variables in anonymous inner classes certainly seems more predictable and safer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-406013">
				<div id="div-comment-406013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406013">
			August 4, 2006 at 10:53 am</a>		</div>

		<p>&#8230; and this is way Java requires such magically-long-lived local variables to be explicitly final when used from an inner class, anonymous or otherwise:</p>
<p>for(final int i : someStuff)<br />
<br /> &nbsp; &nbsp;bunchOfDelegates.new Delegate() { public void foo() { print(i); } };</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-406033">
				<div id="div-comment-406033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fox Cutter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406033">
			August 4, 2006 at 12:19 pm</a>		</div>

		<p>I think the moral of the story is not to use local variabels in you anonymous methods if the method will live longer then the scope of the function it is in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-406043">
				<div id="div-comment-406043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://ebersys.blogspot.com' rel='external nofollow' class='url'>Eber Irigoyen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406043">
			August 4, 2006 at 12:22 pm</a>		</div>

		<p>you should really consider doing this C# things more often</p>
<p>thanks Raymond</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-406053">
				<div id="div-comment-406053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406053">
			August 4, 2006 at 1:38 pm</a>		</div>

		<p>Geez, I thought they were anonymous because they didn&#8217;t have a name. &nbsp;It turns out they&#8217;re anonymous because they don&#8217;t want to take credit for potential bugs&#8230; :-)</p>
<p>Michael Grier: Wholeheartedly agree. &nbsp;From the &quot;if it&#8217;s not obvious, document it&quot; addendum to the &quot;write self-documenting code&quot; manual.</p>
<p>Eber Irigoyen: Agreed!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-406063">
				<div id="div-comment-406063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://barrkel.blogspot.com/' rel='external nofollow' class='url'>Barry Kelly</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406063">
			August 4, 2006 at 2:03 pm</a>		</div>

		<p>Of course, the fact that the variable is hoisted by a delegate drastically changes its nature &#8211; it&#8217;s going to become an instance field on a new compiler-generate class.</p>
<p>For normal variables, which are left as normal variables by the C# compiler (i.e. aren&#8217;t hoisted), the scope information is completely lost (save for debug info in the PDB) by the time the translation to IL has been made. That is, by looking at the IL, there&#8217;s no way to tell if the variable has been &quot;consolidated&quot; or &quot;decentralized&quot;.</p>
<p>It&#8217;s the JIT compiler&#8217;s job to apply use-def and def-use analysis to determine the actual lifetime of the variable, because there&#8217;s nothing in the IL that scopes it, other than the uses and definitions themselves.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-406073">
				<div id="div-comment-406073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406073">
			August 4, 2006 at 2:07 pm</a>		</div>

		<p>&quot;In the case where it is used in an anonymous delegate, though, it is not a local variable anymore &#8230; it is actually declared in a heap-allocated data structure (probably a class in C#), and that structure creation is not something the compiler will optimize.&quot;</p>
<p>True, yet it could potentially take a detailed inspection to determine that. You certainly can&#8217;t tell from the declaration of s that it&#8217;s special in any way, yet it clearly has a special scope and semantics. To me, the lack of some &quot;this is special&quot; tag on the declaration of s is an accident waiting to happen. </p>
<p>I love closures and anonymous functions, and use them all the time in Javascript. Sometimes I create them by accident and it takes a while to figure why I am &quot;leaking memory&quot;. With a static-typed language like C# I&#8217;m really surprised that there are no more safeguards than offered by Javascript.</p>
<p>Those of you who say this is a documentation issue are right&#8211;the C# type system should be providing that documentation. Look at the heroics it already performs in this case; would it be too much to ask the programmer to do their part by adorning &quot;string s&quot; a bit more? If the doc is just human readable comments then there&#8217;s no way for the compiler to have extended warnings about closures, for example. How will it know when you intended to do it versus when you accidentally did it?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-406083">
				<div id="div-comment-406083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://thefigtrees.net/lee/blog/' rel='external nofollow' class='url'>Lee Feigenbaum</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406083">
			August 4, 2006 at 2:39 pm</a>		</div>

		<p>&#8230;and anyone moving from a language with variable-name scoping rules similar to those in C# will surely get caught in one of the biggest gotchas of using closures in JavaScript. Namely, regardless of where a &quot;var foo;&quot; statement is in JavaScript, the variable is scoped to the nearest-enclosing function. (i.e., scoped to the function, not to the block).</p>
<p>This leads to fun broken code like:</p>
<p>for (var i = 0; i &lt; a.length; i++)<br />
<br /> &nbsp;doSomething(function() { alert(i); });</p>
<p>at which point we scratch our heads when every invocation of the callback alerts the same value (a.length, assuming the callbacks are invokved after the for loop has finished).</p>
<p>The fix is to use an extra function to create a new scope in which to capture the value of the loop variable at the time the callback is created:</p>
<p>for (var i = 0; i &lt; a.length; i++)<br />
<br /> &nbsp;doSomething(<br />
<br /> &nbsp; &nbsp;(function(x) { return<br />
<br /> &nbsp; &nbsp; &nbsp;function() { alert(x); };<br />
<br /> &nbsp; &nbsp; })(i)<br />
<br /> &nbsp;);</p>
<p>(This has been written about many, many times in the past, but still regularly trips up JavaScript programmers. So it always deserves &nbsp;repeating, even in not-quite-the-right forum. :-)</p>
<p>Lee<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-406093">
				<div id="div-comment-406093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicole DesRosiers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406093">
			August 4, 2006 at 2:53 pm</a>		</div>

		<p>This is a good reason why, if you are working in someone else&#8217;s code, you should write to their style. &nbsp;Even if you think their style is the worst possible style to write in, trying to rewrite the function to your style just to fix a bug, or writing your new code in your style and leaving the rest in the other style, is just a recipe for disaster.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405983">
				<div id="div-comment-405983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-405983">
			August 4, 2006 at 10:33 am</a>		</div>

		<p>Right, scope != lifetime (or not necessarily, anyway).</p>
<p>In VB.net 1, for instance, code like this:</p>
<p>For i as Integer = 0 to 9<br />
<br /> &nbsp;Dim x As Integer</p>
<p> &nbsp;x += i</p>
<p> &nbsp;MsgBox(x.ToString())<br />
<br />Next i</p>
<p>gives &quot;45&quot; in its final message box. &nbsp;Code like this, however:</p>
<p>For i as Integer = 0 to 9<br />
<br /> &nbsp;Dim x As Integer = 0</p>
<p> &nbsp;x += i</p>
<p> &nbsp;MsgBox(x.ToString())<br />
<br />Next i</p>
<p>gives &quot;9&quot; in its final message box, because the variable x is reinitialized (by the Dim statement) every time through the loop. &nbsp;All loop iterations share the same variable instance, though (it has function lifetime).</p>
<p>Even though VB.net 1 specifies that new variables will have a default value (for Integers, that value is zero), that guarantee only applies at the start of the variable&#8217;s lifetime, not its scope. &nbsp;If you need it to be reinitialized to zero each time through the loop, you need to write code to do that yourself.</p>
<p>If C# 2 has the same variable-lifetime spec, then both sets of code are equivalent; both will print the character &quot;9&quot; ten times when the delegate is invoked. &nbsp;I do not know if this is the case though; I would suspect that Raymond has tried the code he posted, and verified that it was indeed different, so I would suspect that the lifetime of C# 2 variables is the same as their scope. &nbsp;It may also be true that in *all* .Net Framework 2.0 languages, the lifetime and scope of all variables is the same (i.e. they may have changed the spec), but I don&#8217;t know that for sure either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-406113">
				<div id="div-comment-406113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406113">
			August 4, 2006 at 6:05 pm</a>		</div>

		<p>Dear god, that&#8217;s awful. Your delegate takes a reference to a variable instead of a copy, as it would in any proper implementation. You should be able to change s at your pleasure after setting up the delegate, or else it&#8217;s just asking for problems. Yeah, copying is a pain when s is really big, but that&#8217;s what explicit references are for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-406103">
				<div id="div-comment-406103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406103">
			August 4, 2006 at 2:59 pm</a>		</div>

		<p>Cody asks, &quot;To extend this, why wouldn&#8217;t the compiler, if it does optimize by moving the declaration outside of the loop, break the code in the delegate case?&quot;</p>
<p>You&#8217;re making a mistake that&#8217;s not too uncommon. &nbsp;Compiler optimizers don&#8217;t really optimize *your code*; they don&#8217;t rewrite and transform the source code you wrote into something more efficient.</p>
<p>They optimize the assembly language &#8212; or rather, stuff that&#8217;s most of the way towards being the final binary compiler output, whatever low-level language that might be.</p>
<p>So any complicated maneuvers like this &quot;delegation&quot; have already happened by the time the optimizer gets its hands on the primitive sequential instructions (register-transfer language, intermediate three-address code, control-flow graph, whatever you call it).</p>
<p>There was a reply last month, in the discussion of how a compiler calls an imported DLL function, that made the same mistake: &nbsp;thinking the compiler &quot;changes your code,&quot; like a macro preprocessor or refactoring tool, to produce the transformed source code that it then really compiles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-406153">
				<div id="div-comment-406153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jasonhaley.com/blog/archive/2006/08/04/136785.aspx' rel='external nofollow' class='url'>Jason Haley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406153">
			August 4, 2006 at 10:40 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-grantri odd alt thread-odd thread-alt depth-1" id="comment-406123">
				<div id="div-comment-406123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Grant+Richins' rel='external nofollow' class='url'>Grant Richins</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406123">
			August 4, 2006 at 6:28 pm</a>		</div>

		<p>As the guy that wrote the code and worked through a lot of these issues with teh language designers, I&#8217;d like to add a few thoughts.</p>
<p>First, thanks Raymond for clarifying what I thought I covered in excruciating detail previously (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/grantri/archive/category/3378.aspx" rel="nofollow">http://blogs.msdn.com/grantri/archive/category/3378.aspx</a>).</p>
<p>Second, all those who want the JIT to produce more optimized code that solves all of their in-effeciencies, please consult with the people that want the JIT to be faster. &nbsp;We (Microsoft) thought we picked a good balance, but if you can come up with a better one, please let us know, but be prepared to support your reasoning.</p>
<p>Third, the JIT/runtime is constrained by the MSIL and metadata emitted by the C# compiler. &nbsp;It can only optimize things so much. &nbsp;Namely it cannot change a field into a local, or vise versa. &nbsp;Therefore once the C# compiler is done, regardless of what the C# language spec allows or disallows, the runtime/JIT must follow it&#8217;s rules. &nbsp;This is commonly implemented by the C# compiler emitting MSIL and metadata that forces the runtime to be at least as restrictive as the original source code and C# language spec. &nbsp;&quot;At least as restrictive&quot; means that sometimes in order to maintain correct code according to the C# language the compiler emites MSIL or metadata that causes the runtime to be more restrictive.</p>
<p>Fourth, contrary to popular belief the C# compiler doesn&#8217;t really optimize your code. &nbsp;It does a little cleanup. &nbsp;Some future version might do more, but for now, it mostly jsut translates source code into MSIL. &nbsp;That&#8217;s generally OK, because if performance matters you can generally tweak up the source to get better performance. &nbsp;With anonymous methods there are some really subtle issues with lifetime and scoping that can have performance implications. &nbsp;Since we don&#8217;t have an optimizer that could fix any of these issues, I took the second best route, document, document, and document all of the subtlties so that programmers could understand them and use them to tweak up the source to get better performance.</p>
<p>Fifth, anonymous methods do introduce some new issues with scopign and lifetime, but you should as a programmer know the language you are using. BryanK pointed ouut some interesting facts that would fly in the face of most C++/C# programmers. &nbsp;Anonymous methods have the potential to change the lifetime of a local, but *NEVER* the scope. &nbsp;Because the lifetime can now be longer you can write programs that can detect the fact that since v1 of C# each entry into a scope begins *NEW* lifetimes for variables declared in that scope. &nbsp;This is obvious in languages that allow nested functions, but is a new concept to existing C# (and C++) programmers who have unknowingly been following this rule, but could never observe the differences before anonymous methods.</p>
<p>This comment was provided &quot;as is&quot; and is just my opinion and memories from when I worked on the C# compiler and now the CLR JIT.<br />
<br />&#8211;Grant</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-406163">
				<div id="div-comment-406163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jwalkerlive.com/' rel='external nofollow' class='url'>John Walker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406163">
			August 5, 2006 at 3:21 am</a>		</div>

		<p>I agree with Eber&#8230;Any chance of extending .NET week to 2 weeks? I feel cheated since the first couple of days of the week didn&#8217;t have many .NET posts ;) Seriously, this is really interesting stuff that I&#8217;ve often wondered about. Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-406183">
				<div id="div-comment-406183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406183">
			August 5, 2006 at 7:04 pm</a>		</div>

		<p>So, either a) the code change really isn&#8217;t innocuous or b) the code change really is innocuous and the language shouldn&#8217;t have been specified to make innocuous changes so damaging ;-),</p>
<div CLASS=post>[<i>I&#8217;m pretty sure you can find similar examples of &#8220;dangerous but innocuous-looking&#8221; code changes in any language. C++ object creation and destruction is <a href="http://blogs.msdn.com/oldnewthing/archive/2004/05/20/135841.aspx" rel="nofollow">full of subtleties</a>. C++ temporary object lifetime is definitely pretty high on my list. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-406193">
				<div id="div-comment-406193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Factory</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406193">
			August 6, 2006 at 12:05 am</a>		</div>

		<p>Hmm whilst I agree that innocuous changes can cause serious bugs, I would disagree that it is not a good idea to change code merely because it might cause a bug.<br />
<br /> &nbsp;OTOH methinks that the &quot;consolidator&quot; in this example is in the wrong. Since the consolidator&#8217;s justification is basically optimization, and in the context given it is premature optimization, which is the Root of All Evil &#8482;. The Decentralizer&#8217;s justification is aimed at reducing all those other side effects that can (and often do) happen which you use a variable for more than one purpose. Which is a good thing, IMHO.<br />
<br /> &nbsp;But really, the one thing that needs to be said about this is example is that one should verify that any code changes one makes actually have their intended effect, regardless of whether you are a consolidator or a decentralizer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-406203">
				<div id="div-comment-406203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://judahgabriel.blogspot.com' rel='external nofollow' class='url'>Judah</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406203">
			August 6, 2006 at 1:15 am</a>		</div>

		<p>Interesting stuff, Raymond. I agree with the others, it&#8217;s nice to see a .NET-related post once in awhile.</p>
<p>On the topic of C# 2 anonymous methods, I&#8217;ll say that I haven&#8217;t yet run into any problems with them, and I&#8217;ve been playing with them since beta 1 of .NET framework v2. That&#8217;s not to say there no caveats and gotchas, but rather, typical usage&#8211;at least in my experience&#8211;tends to be safe and problem free.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-406223">
				<div id="div-comment-406223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406223">
			August 6, 2006 at 9:52 pm</a>		</div>

		<p>40 years of backwards compatibility ^_^ </p>
<p>IBM changed a PL/I compiler for the values of variables that would be seen by a function that was called via a function pointer. &nbsp;The original object code did something like the 9 9 9 &#8230; 9 version and the modified object code did thunking to provide something like the 1 2 3 &#8230; 9 version. &nbsp;I&#8217;m not sure if they changed the spec at the same time, or if someone decided that the spec actually required the thunking. &nbsp;To me the spec didn&#8217;t seem to prohibit either interpretation. </p>
<p>&gt; [Obviously a compiler&#8217;s optimizer can&#8217;t make <br />&gt; this change because it would violate the <br />&gt; language&#8217;s specification. [&#8230;] -Raymond] </p>
<p>Two exceptions: <br />(1) If the compiler&#8217;s user sets an option for unsafe optimizations. <br />(2) If the compiler&#8217;s bug is caught an insufficient number of months before release so the bug gets resolved as &#8220;won&#8217;t fix&#8221; or as &#8220;won&#8217;t release a hotfix&#8221;. </p>
<p>By the way the famous quote about regular expressions can be applied to the way some language designers mungle the combination of objects and pointers. &nbsp;When seeing a problem where unskilled programmers have trouble understanding pointers, some language designers say &#8220;I know what, I&#8217;ll hide the pointer as a reference inside an object and I won&#8217;t let give the programmer any control over the reference&#8221;. &nbsp;Then they have two problems.</p>
<div class=post>[<i>Ah the pedantic police are out again, I see. Allow me to clarify: &#8220;Obviously a compiler&#8217;s optimizer can&#8217;t make this change <u>on purpose</u> <u>without the user&#8217;s permission</u>&#8230;&#8221;. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-406243">
				<div id="div-comment-406243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406243">
			August 7, 2006 at 5:29 am</a>		</div>

		<p>Michale Grier: And (3) document in the code why you made this choice so that a future maintainer doesn&#8217;t come along and undo your brilliant work. </p>
<p>Gosh, that&#8217;s pretty controversial, doncha think? How does one classify a feature as obscure and therefore worthy of commentary for the unwary? </p>
<p>I&#8217;ve worked on a few projects where my comments explaining things have been removed because &#8220;it&#8217;s obvious&#8221;. Very frustrating sometimes (an example that comes to mind was a very complex bit of Perl &#8212; fun to write, terrible to maintain). </p>
<p>If a feature is known from the design stage to be a likely trouble spot, is it worth adding messages to the compiler, or perhaps adding an extra keyword or two? Syntactic sugar can be useful.</p>
<div class=post>[<i>Most people do not have the luxury of being able to modify the language they are programming in. A comment is the best you can do. Either that or set a house policy of not using whatever feature it is that troubles you. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-406253">
				<div id="div-comment-406253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406253">
			August 7, 2006 at 9:58 am</a>		</div>

		<p>&quot;Ah the pedantic police are out again, I see. Allow me to clarify: &#8216;Obviously a compiler&#8217;s optimizer can&#8217;t make this change on purpose without the user&#8217;s permission&#8230;&#8217;. -Raymond&quot;</p>
<p>Interesting that the most pedantic blogger I know would make such a statement ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-406263">
				<div id="div-comment-406263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/08/07/690947.aspx' rel='external nofollow' class='url'>The Old New Thing : Even more about C# anonymous methods, from the source</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-406263">
			August 7, 2006 at 10:00 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/08/07/690947.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/08/07/690947.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-407063">
				<div id="div-comment-407063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-407063">
			August 8, 2006 at 2:12 am</a>		</div>

		<p>[Most people do not have the luxury of being able to modify the language they are programming in. A comment is the best you can do. Either that or set a house policy of not using whatever feature it is that troubles you. -Raymond]</p>
<p>Yep, but how does one know what deserves commentary and what doesn&#8217;t? What you consider obscure in C++ probably isn&#8217;t what a newbie would think.</p>
<p>I probably should&#8217;ve added &lt;rhetorical&gt; tags :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-407293">
				<div id="div-comment-407293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ericgu/archive/2006/08/08/692346.aspx' rel='external nofollow' class='url'>Eric Gunnerson's C# Compendium</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-407293">
			August 8, 2006 at 1:23 pm</a>		</div>

		<p>Raymond wrote a really nice series of posts on this:</p>
<p>Part 1<br />
<br />Part 2<br />
<br />Part 3<br />
<br />He also points out that&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-407523">
				<div id="div-comment-407523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dotnetkicks.com/csharp/The_implementation_of_anonymous_methods_in_C_and_its_consequences_3' rel='external nofollow' class='url'>DotNetKicks.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-407523">
			August 9, 2006 at 3:52 am</a>		</div>

		<p>You&#8217;ve been kicked (a good thing) &#8211; Trackback from DotNetKicks.com</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-408623">
				<div id="div-comment-408623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.dotninjas.dk/t4rzsan/archive/2006/08/14/1531.aspx' rel='external nofollow' class='url'>Anonymous Methods -&gt; code bloat</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-408623">
			August 14, 2006 at 11:09 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.dotninjas.dk/t4rzsan/archive/2006/08/14/1531.aspx" rel="nofollow">http://blogs.dotninjas.dk/t4rzsan/archive/2006/08/14/1531.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-421093">
				<div id="div-comment-421093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://timvw.madoka.be/?p=622' rel='external nofollow' class='url'>Tim Van Wassenhove &raquo; Blog Archive &raquo; Anonymous methods</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-421093">
			September 16, 2006 at 5:13 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://timvw.madoka.be/?p=622" rel="nofollow">http://timvw.madoka.be/?p=622</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-428693">
				<div id="div-comment-428693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.timvw.be/anonymous-methods/' rel='external nofollow' class='url'>Tim Van Wassenhove &raquo; Anonymous methods</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-428693">
			October 7, 2006 at 8:03 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.timvw.be/anonymous-methods/" rel="nofollow">http://www.timvw.be/anonymous-methods/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-503843">
				<div id="div-comment-503843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jopinblog.wordpress.com/2007/05/12/dynamic-propertydescriptors-with-anonymous-methods/' rel='external nofollow' class='url'>John Opincar&#8217;s Blue Corner Dynamic PropertyDescriptors with Anonymous Methods &laquo;</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-503843">
			May 12, 2007 at 11:49 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://jopinblog.wordpress.com/2007/05/12/dynamic-propertydescriptors-with-anonymous-methods/" rel="nofollow">http://jopinblog.wordpress.com/2007/05/12/dynamic-propertydescriptors-with-anonymous-methods/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-512613">
				<div id="div-comment-512613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ericlippert/archive/2007/06/06/fyi-c-and-vb-closures-are-per-scope.aspx' rel='external nofollow' class='url'>Fabulous Adventures In Coding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-512613">
			June 7, 2007 at 2:13 pm</a>		</div>

		<p>This post assumes that you understand how closures are implemented in C#. They&#8217;re implemented in essentially</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-552353">
				<div id="div-comment-552353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/fxcop/archive/2007/09/21/new-for-visual-studio-2008-support-for-anonymous-methods-and-lambda-expressions.aspx' rel='external nofollow' class='url'>The Visual Studio Code Analysis Team Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-552353">
			September 21, 2007 at 11:36 am</a>		</div>

		<p>One of my favorite new features for Code Analysis in Visual Studio 2008 is our support for analyzing</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724433">
				<div id="div-comment-724433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/psteele/archive/2009/04/06/resharper-access-to-modified-closure.aspx' rel='external nofollow' class='url'>Patrick Steele's .NET Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-724433">
			April 6, 2009 at 3:21 pm</a>		</div>

		<p>On the advice of Jay Wren , I decided to try our ReSharper 4.1 .&amp;#160; I had previously installed DevExpress</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724463">
				<div id="div-comment-724463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.srtsolutions.com/blogs/patricksteele/archive/2009/04/06/resharper-access-to-modified-closure.aspx' rel='external nofollow' class='url'>Patrick Steele</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-724463">
			April 6, 2009 at 3:27 pm</a>		</div>

		<p>On the advice of Jay Wren , I decided to try our ReSharper 4.1 .&amp;#160; I had previously installed DevExpress&amp;#39;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-747903">
				<div id="div-comment-747903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://beyondthespec.com/blog/2009/06/19/anonymous-methods-internals/' rel='external nofollow' class='url'>Anonymous Methods Internals | Beyond The Spec</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060804-00/?p=30233#comment-747903">
			June 18, 2009 at 7:52 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://beyondthespec.com/blog/2009/06/19/anonymous-methods-internals/" rel="nofollow">http://beyondthespec.com/blog/2009/06/19/anonymous-methods-internals/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>