<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1142513">
				<div id="div-comment-1142513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142513">
			August 4, 2014 at 8:35 am</a>		</div>

		<p>All well and good, but this fails to take into account desireability of individual players, because, you know, no one wants that dorky kid who spends all his time writing little programs on their sports team.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1142533">
				<div id="div-comment-1142533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142533">
			August 4, 2014 at 9:36 am</a>		</div>

		<p>Well, what&#39;s also been interesting about these set of enumeration problems is that at least one or two of them are a variant of some interview questions I was asked when applying to work at MSFT. This one in particular, though I didn&#39;t work out in the time provided how to eliminate the duplicates (alice-bob same as bob-alice)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1142543">
				<div id="div-comment-1142543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142543">
			August 4, 2014 at 9:42 am</a>		</div>

		<p>This solution seems vastly overcomplicated. Once you know the number of the teams, you know the number of people on each team and the rest is cake.</p>
<div class="post">[<em>There are <var>m</var> teams and <var>n</var> players on each team. Now go bake some cake! -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1142553">
				<div id="div-comment-1142553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142553">
			August 4, 2014 at 10:10 am</a>		</div>

		<p>My point is that you make the calculation of m and n and then chop up the array, which is certainly going to be much faster than the solutions shown.</p>
<div class="post">[<em>But deciding how to chop up the array is the hard part. Maybe you can just post a blog entry showing the easy way, then link to it here. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1142583">
				<div id="div-comment-1142583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142583">
			August 4, 2014 at 10:57 am</a>		</div>

		<p>@Brian_EE: But this can be used for much more than for sports teams! Perhaps one wants to make teams for a math or trivia competition, or even a really exciting sport like Robotics.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1142593">
				<div id="div-comment-1142593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142593">
			August 4, 2014 at 11:28 am</a>		</div>

		<p>@ pc:</p>
<p>The members of the team need not be humans. &nbsp;Not all &nbsp;&quot;games&quot; are sports designed to be played by people.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1142643">
				<div id="div-comment-1142643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142643">
			August 4, 2014 at 2:56 pm</a>		</div>

		<p>@12BitSlab: Presumably, non-humans don&#39;t wear colored jerseys. Following the basic tenants of Raymond&#39;s &quot;Psychic Debugging&quot; technique, I equated colored jerseys with sports (for most cases). When it comes to sports, the nerdy kids always get picked last.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1142653">
				<div id="div-comment-1142653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142653">
			August 4, 2014 at 4:57 pm</a>		</div>

		<p>It would be interesting to generalize this to the situation where you are choosing from a pool of p &gt; mn players, for which the number of solutions is C(p, mn) * (number of solutions for problem as stated).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1142603">
				<div id="div-comment-1142603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142603">
			August 4, 2014 at 11:33 am</a>		</div>

		<p>I may be misunderstanding him, but I think Joe is ignoring the &quot;enumerate&quot; part of the problem, and suggesting something like this:</p>
<p>for i = 1..m</p>
<p> &nbsp;print &quot;Players %((m-1)*n+1) through %(m*n) are on team %(m).&quot;</p>
<p>I guess he is right about it being simpler and faster&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1142673">
				<div id="div-comment-1142673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142673">
			August 4, 2014 at 7:08 pm</a>		</div>

		<p>The problem states that the set equals m * n. The player issue is irrelevant, so is the enumerate issue; all that matters is calculating the values for m and n. Reduce the problem, folks.</p>
<div class="post">[<em>Not sure why you&#39;re saying that the enumeration is irrelevant. The problem is to &quot;enumerate all the ways this can be done.&quot; The values of m and n are part of the problem statement. &quot;Given <var>m</var> and <var>n</var>, enumerate all the ways of breaking <var>nm</var> players into <var>m</var> teams of size <var>n</var>.&quot; For example, given <var>n=2</var> and <var>m=2</var>, the answer is &quot;There are three ways of breaking 4 players into two equal teams: (1+2 vs 3+4), (1+3 vs 2+4), and (1+4 vs 2+3).&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1142623">
				<div id="div-comment-1142623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142623">
			August 4, 2014 at 2:11 pm</a>		</div>

		<p>I think he&#39;s right about faster but *that&#39;s* not simpler. Maybe he thinks  is a constant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1142693">
				<div id="div-comment-1142693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142693">
			August 5, 2014 at 12:28 am</a>		</div>

		<p>My fault. I completely misinterpreted the challenge. I hang my head in shame. So, forget everything I said. Hey look, a squirrel!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1142733">
				<div id="div-comment-1142733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142733">
			August 5, 2014 at 3:32 am</a>		</div>

		<p>@Maruits I think you would just vary the first team member over the range 0 .. p &#8211; mn, then recurse as before; it looks like the code would cope with that quite happily.</p>
<div class="post">[<em>You just wrap the function inside another loop that uses Subsets to generate all ways of choosing <var>nm</var> items from a pool of <var>p</var>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1142773">
				<div id="div-comment-1142773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">frenchguy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142773">
			August 5, 2014 at 7:58 am</a>		</div>

		<p>@Neil: you need to recurse that first choice as long as the number of players to choose from is greater than the number of players remaining to choose. Say you have 11 players and want to make 2 teams of 4. If you choose player #2 initially, you still have to choose 7 players out of 9.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1142983">
				<div id="div-comment-1142983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RandomInternetDude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142983">
			August 6, 2014 at 5:49 am</a>		</div>

		<p>First thing I thought when I saw this: use MiniZinc. &nbsp;Hakan Kjellerstrand posted two different models in response (choosing_teams, under &#39;Combinatorial Problems&#39;). &nbsp;<a rel="nofollow" target="_new" href="http://www.hakank.org/minizinc/">http://www.hakank.org/minizinc</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1143553">
				<div id="div-comment-1143553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1143553">
			August 7, 2014 at 10:35 pm</a>		</div>

		<p>Looks like a bug in the first version: rest is taking everyone not in &#39;s&#39;, when it should be looking in &#39;first_team&#39; or looking for &#39;i + 1&#39;.</p>
<p>I&#39;ve been trying to convert these to C++14, lots of interesting tradeoffs with value by default and the way lambdas work there. Sometimes the C++ comes out ahead!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>