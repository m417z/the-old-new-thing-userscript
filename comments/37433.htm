<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-222163">
				<div id="div-comment-222163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.robertmoir.co.uk' rel='external nofollow' class='url'>Robert Moir [mvp]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222163">
			November 1, 2004 at 1:02 pm</a>		</div>

		<p>It seems that MS can&#8217;t win this one.</p>
<p>Break backwards compatability and they are the 800lb gorilla throwing its weight around and expecting the industry to kowtow to it like the evil monopolist it apparently is.</p>
<p>Make it easy to migrate and they&#8217;re short-sighted and sacrificing the long term for the short.</p>
<p>What to do&#8230; what to do&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222183">
				<div id="div-comment-222183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mschaef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222183">
			November 1, 2004 at 1:34 pm</a>		</div>

		<p>&quot; the 16-bit subsystem had to be much more tightly coupled to the 32-bit one. (E.g., sending messages between between them had to work as transparently as feasible.) &quot;</p>
<p>How tightly coupled are Win16 and Win32 in Windows NT-derived OS&#8217;s? For example, is Win16 just a translation layer into Win32 or a completely seperate implementation?</p>
<p>(Also, do you plan on touching on things like __AHINCR and other issues related to huge pointers?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222233">
				<div id="div-comment-222233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cjm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222233">
			November 1, 2004 at 5:34 pm</a>		</div>

		<p>&quot;Even in Win32, you have to be careful not to confuse the local heap from the global heap. Memory allocated from one cannot be freed on the other. The functional differences have largely disappeared; the semantics are pretty much identical by this point.</p>
<p>Interesting.  I always thought that LocalAlloc and GlobalAlloc were identical functions, but the above suggests that there are some differences.  I&#8217;m guessing that they both use NtAllocateHeap (not sure of the name) etc on NT and I just always thought that what else do the heap functions do other than call NtAllocateHeap and handle various parameters flags that would make LocalAlloc and GlobalAlloc different?</p>
<p>I think that it would have been good if Win32 had only one heap function set, with source code macros to help out 16-bit programs.  Were there any  run-time differences that would make this a pain?  I also understand however that Microsoft has to make it easy to migrate and sometimes has to relax ideology a little.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222113">
				<div id="div-comment-222113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222113">
			November 1, 2004 at 11:38 am</a>		</div>

		<p>Another example of the evolutionary cruft in Windows. I responded to a previous article and said that non-versioned shared DLLs were a (semi) good idea at the time but have evolved into an environment where they are both useless and harmful. </p>
<p>Here&#8217;s another example that hopefully will be less controversial: There&#8217;s no way we could have gotten to this result, but now that there&#8217;s room and horsepower to spare, wouldn&#8217;t it be better all around if 16-bit programs ran in essentially an entirely distinct OS from 32-bit programs, with the only overlap being that needed to sychronize access to system resources (hopefully in a way that favors new apps?)?</p>
<p>WoW is a significant part of the way there. But why oh why do we even have to *have* a LocalAlloc in Win32? So people can recompile their 16-bit apps into 32 bit apps without changing the source code? If so, this was a learning of the wrong lesson. The hard part of doing this port was *never* the cut-and-paste operation of replacing obsolete functions with new ones. It was always about the conflicts that this caused. Even if you wanted to make it easy for people to maintain 2 versions, a compile-time macro would have been vastly superior. </p>
<p>Moving along to 64 bit Windows (which there&#8217;s still hope for)&#8230; Argh! How much hair can I tear out before I&#8217;m bald? Where to start&#8230; how about: Why do the 64 bit versions of system files reside in (e.g.) c:windowsSystem32 (really&#8230; I&#8217;ve heard the excuses and am not convinced)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222123">
				<div id="div-comment-222123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222123">
			November 1, 2004 at 12:16 pm</a>		</div>

		<p>If you&#8217;re the new guy on the block, you have to bend over backwards to make it easy for people to port to your new platform. And 16-bit interop was also critical to allow people to switch over piecemeal instead of all-at-once. Consequently, the 16-bit subsystem had to be much more tightly coupled to the 32-bit one. (E.g., sending messages between between them had to work as transparently as feasible.)</p>
<p>Some may argue that decisions were made to trade off long term benefits for short term gains, but what if you don&#8217;t even know whether you&#8217;re going to *have* a long term? Think of all the products that died in the short term.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222243">
				<div id="div-comment-222243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Levine</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222243">
			November 1, 2004 at 8:52 pm</a>		</div>

		<p>The near/far pointer madness was just the tip of the 16 bit iceberg (or should I say, the tip of the Win3.0 BurgerMeister). Initializing multiple local heaps was something I did before breakfast before tackling the tough issues.</p>
<p>I recall something about there were distinctions between pagelocked and non-pagelocked memory that often caused out-of-memory problems &#8211; sometimes causes when too many DLLs declared their code segments as locked &#8211; I no longer remember all the gory details. The memory allocator would try to move that memory below the DOS address boundary (1M), and once that got used up there was no more left.  I had to write my own loader routines to allocate all the DOS memory before loading DLLs, then free all the DOS memory after the DLL had loaded. Or something like that. Heck, that was almost 15 years ago. </p>
<p>And then the distinctions between global atoms and local atoms and 16 usage count overflows&#8230;</p>
<p>I know that MSFT has to be backwardly compatible to the greatest extent possible, but at some point it&#8217;s worth drawing a line and dropping support for some of the more archaic bits that&#8217;s of interest only to archeologists. Does anyone really need to use LocalAlloc any more? I hope not&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222253">
				<div id="div-comment-222253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://arundotphilipatpatnidotcom' rel='external nofollow' class='url'>Arun Philip</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222253">
			November 1, 2004 at 10:13 pm</a>		</div>

		<p>How about Microsoft include its Virtual PC technology in Longhorn, and include virtual versions of Windows 3.1 and 9x?  This way, the applications requiring backward compatibility can be run in a separate environment, while keeping the core OS free of compatibility shims.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222263">
				<div id="div-comment-222263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222263">
			November 1, 2004 at 10:54 pm</a>		</div>

		<p>Sure you can run Windows 3.1 programs inside a Virtual PC but programs inside the Virtual PC wouldn&#8217;t be able to interop with programs outside it. E.g., your 32-bit program won&#8217;t be able to access windows that belong to 16-bit processes. Maybe you don&#8217;t care but I suspect others do. (Like, say, people who use screen readers or virtual desktop managers.)</p>
<p>Since 16-bit processes do not pass HLOCALs among themselves, LocalAlloc can be slightly more efficient than GlobalAlloc. Sure LocalAlloc could have been #define&#8217;d to GlobalAlloc, but that would have made every LocalAlloc allocation pay the cost of HGLOBAL virtualization. Don&#8217;t make 99% of the callers pay the cost of something that only 1% of the callers actually need.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222273">
				<div id="div-comment-222273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frank</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222273">
			November 1, 2004 at 11:32 pm</a>		</div>

		<p>Raymond wrote: &quot;If you asked for more than 64K, then something exciting happened, which is not important here.&quot;<br />
<br />Not important, but maybe interesting?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222293">
				<div id="div-comment-222293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://andyandy.sprayblogg.no' rel='external nofollow' class='url'>Andreas H&#228;ber</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222293">
			November 2, 2004 at 12:26 am</a>		</div>

		<p>With regards to moving 16-bit into VPC environment. I guess most people who uses 16-bit software would rather use Windows XP then&#8230; too much resources will be spent on this VPC, and if you manage to setup some bridge between the VPC environment and your host (for applications such as screen readers) then it will have perf. implications and also the bridge will by a good chance introduce some bugs which some customers will run into.</p>
<p>But another option is to let users disable the WOW subsystem. (I really hope that the CSRSS(aka win32) subsystem is not dependent on the WOW(ak win16) environment!!). For example the POSIX environment can be disabled (in fact, it is no longer shipped with Windows XP, but can be downloaded from MS &#8211; see SFU (and SFU is a lot better then the POSIX subsystem which shipped earlier :))).</p>
<p>I expected to find the WOW subsystem at this registry key, HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlSession ManagerSubSystems, but it wasn&#8217;t there :/. I always thought it ran as a separate subsystem, side-by-side with CSRSS, POSIX and OS/2&#8230;?</p>
<p>[PS. Quite ironic that I&#8217;m writing a comment here about reliability(which is what you should get by removing WOW), and got a BSOD in the middle of the comment :). Seems like my mousedriver caused some problems (or why would i8042prt!I8xQueueCurrentMouseInput+60 give a  STATUS_ILLEGAL_INSTRUCTION exception? OCA didn&#8217;t know about it unfortunately&#8230;) &#8212; I  really hope that the introduction of userland device drivers in &quot;Longhorn&quot; (see some WinHEC2004 slide about gfx drivers) will give positive results to system reliability, and that the version of Windows after Longhorn will move more device drivers into userland. sorry about the digression!]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222313">
				<div id="div-comment-222313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222313">
			November 2, 2004 at 2:06 am</a>		</div>

		<p>I find these trips back into the dark ages of progamming enormously interesting despite being far too young to have ever used them. Well not too young as such, but I was a but a school kid playing games. Still these remind me of learning history at school about the English civil war and magna carta etc. ie, why the world is the way it is today.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222343">
				<div id="div-comment-222343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Candy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222343">
			November 2, 2004 at 5:19 am</a>		</div>

		<p>WOW (and thus ntvdm) runs as a Win32 process not as a sub system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222323">
				<div id="div-comment-222323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222323">
			November 2, 2004 at 4:11 am</a>		</div>

		<p>Frank<br />
<br />Raymond wrote: &quot;If you asked for more than 64K, then something exciting happened, which is not important here.&quot;<br />
<br />Not important, but maybe interesting?<br />
<br />/Frank</p>
<p>Doesn&#8217;t GlobalAlloc give you a huge pointer &#8211; i.e. if you allocate 128K of memory you get a far pointer sel:offset. Sel is actually the first of two consectutive selectors.</p>
<p>The selector Sel would have a base address pointing to the base of your 128K, and a limit of 128K. The next selector at sel+__AHINCR would have a base address 64K into the array and a size of (I guess) 64K. __AHINCR was a symbol which the Windows kernel exported.</p>
<p>So if you are 386 aware you can access it using sel and a 32 bit offset. Otherwise you must access it as huge pointer, with 16 bit offsets and add n*__AHINCR to the pointer to step between n 64K pages. Of course, the 16 bit code will be slow, because you need to keep reloading different selectors into a segment register to seek around in the array.</p>
<p>So the algorithm for 286 windows was to allocate n consecutive selectors for an allocation of n*64K. I guess on the 386 someone figured out that it cost nothing to set the limit on the first selector to the total size of the array, and it allowed 386 aware applications to access a huge pointer without a speed penalty.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222333">
				<div id="div-comment-222333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222333">
			November 2, 2004 at 4:20 am</a>		</div>

		<p>Oops I meant &quot;add n*__AHINCR&quot; to the &lt;b&gt;segment part&lt;/b&gt; of the pointer&quot; to access a byte at n*64K.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222493">
				<div id="div-comment-222493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Swaim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222493">
			November 2, 2004 at 1:17 pm</a>		</div>

		<blockquote><p>
  The memory allocator would try to<br />
  <br />&gt; move that memory below the DOS address<br />
  <br />&gt; boundary (1M), and once that got used up<br />
  <br />&gt; there was no more left.</p>
<p>  IIRC, the memory manager tried to load DLLs in the lower 640K first. Each process also had a DOS structure that HAD to be in the lower 640K, too. So, if DOS couldn&#8217;t allocate the process structure, Windows would give an out-of-memory error. Windows Developer Journal had sample code that would allocate all of the lower memory, load a DLL and then free the memory, and we used it for our custom DLL loader. Another solution was to fragment the lower 640K, so DLLs couldn&#8217;t load down there. Fortunately, With Win95, the default was to load DLLs above the first Meg, making the problem largely go away.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222703">
				<div id="div-comment-222703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.robertmoir.co.uk' rel='external nofollow' class='url'>Robert Moir</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222703">
			November 3, 2004 at 3:41 pm</a>		</div>

		<p>I&#8217;d be all for Virtual PC providing the compatability environment in the future. In fact I suspect at times that is why Virtual PC was purchased.</p>
<p>But isn&#8217;t it a rather expensive fix in terms of complexity and resources? We&#8217;re talking about running an instance of a whole computer for each environment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222743">
				<div id="div-comment-222743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222743">
			November 3, 2004 at 5:17 pm</a>		</div>

		<p>In some of the MSDN pages that are essentially tutorials on coding DLLs and threads, examples use LocalAlloc.  From this discussion it does sound good if LocalAlloc is no longer necessary.  Perhaps those examples can be updated?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222763">
				<div id="div-comment-222763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-222763">
			November 3, 2004 at 5:20 pm</a>		</div>

		<p>I already answered this in an earlier comment.</p>
<p><a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/11/01/250610.aspx#250944" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/11/01/250610.aspx#250944</a></p>
<p>LocalAlloc is preferred since it doesn&#8217;t have the 16-bit compatibility goo that GlobalAlloc is forced to carry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223143">
				<div id="div-comment-223143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-223143">
			November 4, 2004 at 6:38 pm</a>		</div>

		<p>11/3/2004 5:20 PM Raymond Chen</p>
<p>&gt; I already answered this in an earlier<br />
<br />&gt; comment. </p>
<p>Hmm yes, you did say that LocalAlloc is slightly more efficient than GlobalAlloc.  But I thought one of the points of this discussion was that LocalAlloc can be dangerous?  If an ordinary C programmer (who didn&#8217;t program in Win16) has an ordinary pointer and passes it to a function that has an ordinary declaration, they can still get caught the same way as happened in Win16, right?  One solution is for every programmer to check every function call, and not pass a LocalAlloc&#8217;ed pointer to a different DLL&#8217;s function.  A different solution is to use GlobalAlloc instead of LocalAlloc (even though this solution doesn&#8217;t work well in 1993).  Did I understand correctly?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223163">
				<div id="div-comment-223163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-223163">
			November 4, 2004 at 9:06 pm</a>		</div>

		<p>You&#8217;re confusing Win16 (the topic of this article) with Win32. In Win32, LocalAlloc is preferable. The HINSTANCE problem doesn&#8217;t exist in Win32 since there are no near pointers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223183">
				<div id="div-comment-223183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-223183">
			November 5, 2004 at 12:05 am</a>		</div>

		<p>Win32 has no near pointers? I&#8217;d have said it has no far pointers. The number of &quot;FAR&quot; decorators in the Win32 headers put lie to that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223213">
				<div id="div-comment-223213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-223213">
			November 5, 2004 at 7:55 am</a>		</div>

		<p>By &quot;near pointer&quot; I mean &quot;a pointer that changes meaning depending on which DLL in a process is using it&quot;. In Win32, a pointer has the same meaning throughout a process.</p>
<p>Yes, you can also say that all pointers are &quot;near&quot; in the sense that there are no selectors any more. But the fact that there are no segments means that you don&#8217;t have to worry about context-sensitive pointers in a process.</p>
<p>(Of course you do have the new problem of context-sensitive pointers across processes.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-226933">
				<div id="div-comment-226933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.blog.pesak.com' rel='external nofollow' class='url'>pesak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-226933">
			November 17, 2004 at 5:57 am</a>		</div>

		<p>The difference is too small&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-432793">
				<div id="div-comment-432793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.csdn.net/houdy/archive/2006/10/21/1344011.aspx' rel='external nofollow' class='url'>A programming bug</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-432793">
			October 21, 2006 at 1:36 am</a>		</div>

		<p>分析了Windows下不同的动态内存分配方式</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-452213">
				<div id="div-comment-452213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.csdn.net/wzwind/archive/2006/12/12/1439416.aspx' rel='external nofollow' class='url'>wzwind</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-452213">
			December 11, 2006 at 9:08 pm</a>		</div>

		<p>这里的</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-503873">
				<div id="div-comment-503873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.csdn.net/andylin02/archive/2007/05/13/1606678.aspx' rel='external nofollow' class='url'>andylin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041101-00/?p=37433#comment-503873">
			May 12, 2007 at 10:16 pm</a>		</div>

		<p>Windows下不同的动态内存分配方式</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>