<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1175533">
				<div id="div-comment-1175533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175533">
			February 12, 2015 at 7:08 am</a>		</div>

		<p>PostMessage(hand, WM_CLOSE, 0, 0)</p>
<div class="post">[<em>This assumes the class did not override the WM_CLOSE message to display a &quot;You have unsaved changes.&quot; prompt or other shenanigans. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175543">
				<div id="div-comment-1175543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175543">
			February 12, 2015 at 8:09 am</a>		</div>

		<p>[This assumes the class did not override the WM_CLOSE message to display a &quot;You have unsaved changes.&quot; prompt or other shenanigans. -Raymond]</p>
<p>Oh right I put that code in WM_SYSCOMAND (SC_CLOSE) now for distinguishing between interactive and non-interactive close.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175553">
				<div id="div-comment-1175553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175553">
			February 12, 2015 at 8:35 am</a>		</div>

		<p>This makes me wonder. Besides the mass breakage that would occur now if it was tried, would making more of the UI functions enforce thread affinity have helped any.</p>
<p>Even though we are supposed to know that UI functions have thread affinity, it is easy enough to forget that they do, and new programmers often don&#39;t even learn this.</p>
<p>But I guess that is up for speculation and the only way to test this out would not only require a time machine, but the ability to create an alternate universe too.</p>
<div class="post">[<em>Some of them do enforce thread affinity. For example, DestroyWindow fails if you call it from the wrong thread. That&#39;s what got us into this mess in the first place. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175573">
				<div id="div-comment-1175573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175573">
			February 12, 2015 at 9:15 am</a>		</div>

		<p>The mention of the &quot;hidden helper window&quot; makes me wonder why so many functions in Windows are tied to window handles. For example, couldn&#39;t message queues be separate form windows? Each window would have a message queue, but message queues would have their own handle and could also exist without a window.</p>
<p>If fewer functions were tied to window handles, you might need fewer &quot;hidden helper windows&quot; in the first place.</p>
<div class="post">[<em>You can have a message queue without a window. It&#39;s called a thread. See PostThreadMessage. But <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/04/26/412116.aspx">watch out for modal loops</a>. That&#39;s why people use helper windows. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175603">
				<div id="div-comment-1175603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175603">
			February 12, 2015 at 9:38 am</a>		</div>

		<p>Sven2: What&#39;s the difference between a message queue and a hidden window?</p>
<p>A window is nothing more than a message queue that has some extra metadata that allows it to do some drawing. If you never use that extra metadata (your &quot;window&quot; is &quot;hidden&quot;), then it&#39;s just a message queue with a misleading name.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175623">
				<div id="div-comment-1175623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175623">
			February 12, 2015 at 10:20 am</a>		</div>

		<p>I wonder if EndDialog() can be called from a different thread, that opened a modal dialog box.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175633">
				<div id="div-comment-1175633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175633">
			February 12, 2015 at 10:21 am</a>		</div>

		<p>I&#39;m not sure what to think of the component team&#39;s solution. &nbsp;If I forget to call Stop() before releasing the object, it could cause my program to crash? &nbsp;But only once in a blue moon? &nbsp;Seems poor.</p>
<p>My approach would be not to let the worker thread hold a reference to the object at all. &nbsp;Instead, I would make CContoso&#39;s destructor do something like this:</p>
<p>CContoso::~CContoso()</p>
<p>{</p>
<p>if (m_hwnd != nullptr) DestroyWindow(m_hwnd);</p>
<p>&#8230;</p>
<p>if (WorkerIsRunning())</p>
<p>{</p>
<p>&nbsp; &nbsp;SignalWorkerToExit();</p>
<p>&nbsp; &nbsp;WaitForWorker();</p>
<p>}</p>
<p>}</p>
<div class="post">[<em>This could deadlock if the worker thread is trying to talk to the main thread. (Which it definitely will do if it tries to send a message.) It also means that you have <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/09/29/475298.aspx">an object with reference count zero</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175643">
				<div id="div-comment-1175643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175643">
			February 12, 2015 at 10:38 am</a>		</div>

		<p>Since it&#39;s never specifically called out in the article and I think it&#39;s valuable for every Windows developer to know, the answer to the question &quot;who filled my object with 0xDD?&quot; is: the debug runtime heap did when the object was freed. So in any debug session that you see an object filled with 0xDD, your first instinct should be to say to yourself, &quot;I&#39;m trying to use an object that has already been freed&quot;. &nbsp;</p>
<p>There are a number of different memory fill values that can be useful to know about when debugging and you encounter variables/objects that hold unusual values. See <a rel="nofollow" target="_new" href="http://stackoverflow.com/a/370362/12711">stackoverflow.com/&#8230;/12711</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175653">
				<div id="div-comment-1175653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175653">
			February 12, 2015 at 11:55 am</a>		</div>

		<p>[This could deadlock if the worker thread is trying to talk to the main thread. (Which it definitely will do if it tries to send a message.) It also means that you have an object with reference count zero. -Raymond]</p>
<p>Yes, that&#39;s certainly a possibility. &nbsp;It really comes down to what &quot;DoThis()&quot; and &quot;DoThat()&quot; actually do (which you haven&#39;t shown). &nbsp;But I think the approach is a good one in general, and it&#39;s still what I&#39;d do unless there was prohibitive amounts of refactoring involved.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175673">
				<div id="div-comment-1175673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175673">
			February 12, 2015 at 12:25 pm</a>		</div>

		<p>BTW, 0xDDDD disassembles to fstp st5 so it&#39;s probably not a NOP sled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hankhein even thread-even depth-1" id="comment-1175683">
				<div id="div-comment-1175683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henri+Hein' rel='external nofollow' class='url'>Henri Hein</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175683">
			February 12, 2015 at 12:35 pm</a>		</div>

		<p>I don&#39;t like reference counting in general, and I would certainly never voluntarily use it on an object that owns any part of the UI, or a helper window. &nbsp;This kind of problem is exactly why.</p>
<p>Another rule of thumb for me is that when I use GWLP_USERDATA to attach an object to a window, I always null it out when I destroy the object (actually before). &nbsp;My WndProc is always written so that when the GWLP_USERDATA returns NULL, fall through to DefWindowProc. &nbsp;In this case, that rule would have fixed (or prevented) the crash, but it would not have fixed the inert DestroyWindow() call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175693">
				<div id="div-comment-1175693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175693">
			February 12, 2015 at 12:42 pm</a>		</div>

		<p>mikeb: A pointer to an object filled with 0xDD could be an object that was freed &#8212; or it could be an uninitialized/corrupt variable pointing to random memory.</p>
<p>Yet another possibility is a double-free bug. You have a pointer to an object 1, you free that object, then the next allocation gets a pointer to the same memory and initializes it, but later somebody else tries to free object 1. This yields a live object that was overwritten rather than a destructed object that was freed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175703">
				<div id="div-comment-1175703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175703">
			February 12, 2015 at 4:14 pm</a>		</div>

		<p>[Some of them do enforce thread affinity. For example, DestroyWindow fails if you call it from the wrong thread. That&#39;s what got us into this mess in the first place. -Raymond]</p>
<p>Yup, but I was thinking more functions checking, like the ones that currently don&#39;t.</p>
<p>But well, it was more of a thought exercise along the lines of, if the UI functions consistently checked for the correct thread, would we see less issues with people modifying the UI state across threads.</p>
<p>The thought was if they had the constant reminder of the UI function failing, then it would hopefully follow that modifying other state, like destroying objects, or closing a window by posting a message rather than calling a member function, would decrease.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175583">
				<div id="div-comment-1175583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175583">
			February 12, 2015 at 9:20 am</a>		</div>

		<p>For the various Window things that require they start on the right thread, why doesn&#39;t Windows actually *check* and abort if they don&#39;t?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175713">
				<div id="div-comment-1175713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">manuell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175713">
			February 13, 2015 at 2:05 am</a>		</div>

		<p>If you use PostMessage for resource management, don&#39;t forget to use PeekMessage after window destruction, to check if there is still some work to be done.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-1175743">
				<div id="div-comment-1175743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175743">
			February 13, 2015 at 7:11 am</a>		</div>

		<p>@Gabe: The debug heap initializes blocks to 0xCC on allocation.</p>
<p>@Joshua: Choosing 0xCC for initialization is indeed because 0xCC is int 3, the breakpoint instruction. Whoever chose 0xDD wasn&#39;t really considering attempts to execute code from the buffer.</p>
<div class="post">[<em>NX means that code execution in the heap is most likely going to be caught some other way. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175753">
				<div id="div-comment-1175753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175753">
			February 13, 2015 at 8:34 am</a>		</div>

		<p>Sven2 wrote &quot;each window would have a message queue, but message queues would have their own handle and could also exist without a window.&quot;</p>
<p>If you ignore the names given to things then this is pretty much what Windows does already. &nbsp;You create a message queue by calling CreateWindowEx and specifying HWND_MESSAGE as the parent window. &nbsp;You create a message queue and attach a window to it by calling CreateWindowEx with some other parent window.</p>
<p><a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms632599%28v=vs.85%29.aspx#message_only">msdn.microsoft.com/&#8230;/ms632599%28v=vs.85%29.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175763">
				<div id="div-comment-1175763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175763">
			February 13, 2015 at 8:39 am</a>		</div>

		<p>laonianren: Cool, thanks, I didn&#39;t know that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1175863">
				<div id="div-comment-1175863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1175863">
			February 13, 2015 at 12:53 pm</a>		</div>

		<p>I believe the problem would be much worse with release runtime libs, which does not setmem(0xDD), so that broadcast message would encounter an almost correct object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1176243">
				<div id="div-comment-1176243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1176243">
			February 17, 2015 at 3:38 pm</a>		</div>

		<p>You shouldn&#39;t confuse a window with a queue, that&#39;s vile!</p>
<p>At most, you can consider a window as a stream processor (e.g. the window procedure of a HWND_MESSAGE descendant), but the queue is still tied to the thread and it requires pumping. &nbsp;If you don&#39;t pump it, no window will process posted messages, or messages sent from other threads.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1176283">
				<div id="div-comment-1176283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrei</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150212-00/?p=44693#comment-1176283">
			February 18, 2015 at 5:18 am</a>		</div>

		<p>Why isn&#39;t there a special setting in App Verifier for this kind of errors? Like DestroyWindow on a different thread?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>