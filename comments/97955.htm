<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1323605">
				<div id="div-comment-1323605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323605">
			February 2, 2018 at 7:34 am</a>		</div>

		<p>Why not just allocate a single SRW lock (Microsoft::WRL::Wrappers::SRWLock *)? It seems to me like the real problem is that the lock is copied rather than shared&#8230; Or does WRL do magic to avoid this scenario?</p>
<p>And I&#8217;ve never understood the zealousness of demanding that the same thread that acquires a lock be the one that releases the lock, especially for a slim lock where you couldn&#8217;t even store data for thread affinity. Where is the contract that enforces that rule for SRW locks? Is it specific to the WRL wrapper (you did say RAII, after all) or part of the base SRWLOCK system?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1323665">
				<div id="div-comment-1323665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323665">
			February 2, 2018 at 11:19 am</a>		</div>

		<p>Not sure what your question is asking. There is a single SRW Lock (in the Doodad) that is never copied. The lock <i>guard</i> is moved into a member, and then the guard is released from the wrong thread. Thread affinity is one of the rules of SRWLock.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1323615">
				<div id="div-comment-1323615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323615">
			February 2, 2018 at 9:01 am</a>		</div>

		<p>An interesting example of how C++11 (and later) optional restrictions on things like constructors and operators (ie the <b>= delete</b>) bit) can be used to enforce a low-level contract.  It&#8217;s basically RAII on steroids.</p>
<p>I wonder how many C++ shops have actually left the 20th century and embraced this stuff?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1323806">
				<div id="div-comment-1323806" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323806">
			February 5, 2018 at 6:06 am</a>		</div>

		<p>There&#8217;s plenty of 20th century code that works fine without C++11 additions. Moreover, since C++11 came about some time after the turn of the century, 2000 not a particularly good line of demarcation for archaic vs. &#8220;modern&#8221; C++ practices anyways. But to answer the question I think you&#8217;re asking, we adopt features as appropriate and when they&#8217;re available in the compiler that we&#8217;re using, one which has historically been slow at adopting C++ standards, though that&#8217;s changing (can you guess which one it is?), and that compiler choice is dictated / affected by availability of 3rd-party library options that we rely on. Even so, rewriting large portions of the code base to take on C++11 and higher features &#8220;just because&#8221; isn&#8217;t always a practical move either.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1323635">
				<div id="div-comment-1323635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm100</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323635">
			February 2, 2018 at 10:38 am</a>		</div>

		<p>// Code in italics is wrong.</p>
<p>all the code you give from the customer is in italics. Is that a joke or is it a styling error</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1323685">
				<div id="div-comment-1323685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323685">
			February 2, 2018 at 11:26 am</a>		</div>

		<p>It&#8217;s not uncommon for Raymond to post large sections of code in italics, when the approach the code is taking is wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1323745">
				<div id="div-comment-1323745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323745">
			February 2, 2018 at 2:43 pm</a>		</div>

		<p>Probably there&#8217;s not much point showing us the correct bits of code? The focus of this post is &#8220;this is the wrong way to do this, here is the right way&#8221;, so the incorrect parts of the customer code are the parts we need to see.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1323775">
				<div id="div-comment-1323775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323775">
			February 3, 2018 at 8:03 am</a>		</div>

		<p>That&#8217;s how it&#8217;s always been. The entire code fragment is marked &#8220;wrong&#8221;, and then we discuss what&#8217;s wrong with it, and then we present a correct (or at least &#8220;less wrong&#8221;) version.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1323785">
				<div id="div-comment-1323785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323785">
			February 3, 2018 at 9:48 am</a>		</div>

		<p>Even the code itself says </p>
<p>// Code in italics is wrong.</p>
<p>The same with all of the &#8220;bad&#8221; code in this same blog.  It is supposed to prevent people from copying and reusing an example of bad code.  But who knows, the bad code might get copied and reused anyway.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1324546">
				<div id="div-comment-1324546" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1324546">
			February 11, 2018 at 7:53 pm</a>		</div>

		<p>Complete with &#8220;// Code in italics is wrong&#8221; comments, no doubt.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1323645">
				<div id="div-comment-1323645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323645">
			February 2, 2018 at 11:06 am</a>		</div>

		<p>Personally, I like locks that don&#8217;t have the &#8220;must be released on same thread&#8221; rule.</p>
<p>From time to time you really do want to lock an object and move it&#8217;s ownership to another thread.</p>
<p>On the other hand, for reference counting I don&#8217;t lock at all. I directly use InterlockedIncrement and InterlockedDecrement and the guy who sees InterlockedDecrement return zero is the guy who frees the object.</p>
<p>I haven&#8217;t been able to work out what the shared lock is actually protecting. Maybe it&#8217;s in code not present in the example.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1323655">
				<div id="div-comment-1323655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323655">
			February 2, 2018 at 11:16 am</a>		</div>

		<p>What you&#8217;ve got there my friend is a semaphore. (Also, the shared lock is protecting destruction of the Doodad.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1323675">
				<div id="div-comment-1323675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323675">
			February 2, 2018 at 11:23 am</a>		</div>

		<p>The same problem exists in .NET or Java too where locks also have an owner. </p>
<p>The only use case for that is to enable recursive locking, i.e. if the thread that owns the lock tries to acquire it out succeeds and increases a lock count instead of causing a deadlock.</p>
<p>While this sounds like a clever idea on first glance the repercussions are enormous.<br />
&#8211; Any kind of asynchronous code can&#8217;t work with it.<br />
&#8211; It&#8217;s  inefficient to drag that amount of extra data with you and support efficient recursive locking (look at the lengths to which HotSpot goes)<br />
&#8211; But by far the worst: it leads to really, really bad designs. If you&#8217;re writing concurrent code where you don&#8217;t know what locks you&#8217;re holding you have a big design problem. Or as in this case you don&#8217;t have a sane lifetime for your objects and have to come up with workarounds. </p>
<p>We&#8217;d be much better off if they weren&#8217;t the default but alas too late.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1323695">
				<div id="div-comment-1323695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323695">
			February 2, 2018 at 11:32 am</a>		</div>

		<p>Doodads!  We need more doodads.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1323825">
				<div id="div-comment-1323825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323825">
			February 5, 2018 at 8:40 am</a>		</div>

		<p>Synchronization in a destructor is usually a bad idea.   Might work in this case, as long as there&#8217;s no classes that derive from doodad, but a better solution is to use a reference count.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1323945">
				<div id="div-comment-1323945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180202-00/?p=97955#comment-1323945">
			February 5, 2018 at 10:22 am</a>		</div>

		<p>True, but that would require the doodad to have an independent lifetime, which means a separate heap allocation.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>