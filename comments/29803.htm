<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-418153">
				<div id="div-comment-418153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Harris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418153">
			September 8, 2006 at 10:43 am</a>		</div>

		<p>In ANSI C++, deleting an object is considered not to change it. So for example:<br />
<br /> &nbsp; &nbsp;void kill( const int *p ) {<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp;delete p;<br />
<br /> &nbsp; &nbsp;}</p>
<p>will compile. It&#8217;s a bizarre rule that the standard added &#8211; it wasn&#8217;t true for ARM C++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418173">
				<div id="div-comment-418173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.voidnish.com' rel='external nofollow' class='url'>Nish</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418173">
			September 8, 2006 at 10:52 am</a>		</div>

		<p>Dave</p>
<p>I don&#8217;t see anything bizarre about that. Surely we need to be able to delete pointers to const objects, else for any non-trivial app, we&#8217;d soon be running out of memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418243">
				<div id="div-comment-418243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418243">
			September 8, 2006 at 12:06 pm</a>		</div>

		<p>There probably wouldn&#8217;t be so many questions if Windows didn&#8217;t use such silly typedefs. </p>
<p>Given this prototype, is the argument const? </p>
<p>&nbsp;PropertySheetW(LPCPROPSHEETHEADERW); </p>
<p>The approved answer is &#8220;Well, of course, there&#8217;s a C in the type name&#8221;. </p>
<p>The prototype is a whole lot easier understand if it&#8217;s not willfully obfuscated: </p>
<p>&nbsp;PropertySheetW(const PROPSHEETHEADERW *); </p>
<p>This is readily understandable by any C programmer (well, except those who haven&#8217;t qute got round to understanding new-fangled concepts like &#8216;const&#8217;). </p>
<p>Tell me again why these LPCBANANA typedefs are a good idea? &nbsp; </p>
<div CLASS=post>[<i>They were much more useful in 16-bit Windows and now it&#8217;s just tradition. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418293">
				<div id="div-comment-418293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.voidnish.com' rel='external nofollow' class='url'>Nish</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418293">
			September 8, 2006 at 3:10 pm</a>		</div>

		<p>Ray,</p>
<p>Why were they useful in 16-bit Windows?</p>
<p>And sorry for commenting 3 times in this blog entry &#8211; I hope that&#8217;s alright (once in a while).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418313">
				<div id="div-comment-418313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KiwiBlue</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418313">
			September 8, 2006 at 4:02 pm</a>		</div>

		<p>Nish,</p>
<p>In Win16 days, you had 16 and 32-bit pointers. The &quot;LP&quot; stands for &quot;Long Pointer&quot;. The typedefs were used to ensure that programs compiled in small and medium memory models were using right pointer types when calling API functions. </p>
<p>BTW: probably you should avoid &quot;Ray&quot;-ing here :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418103">
				<div id="div-comment-418103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418103">
			September 8, 2006 at 10:13 am</a>		</div>

		<p>&#8220;Assuming your code doesn&#8217;t modify the PROPSHEETHEADER yourself, any value on exit from the function will be the same as the value it had on entry.&#8221;</p>
<p>Not entirely true. If the PROPSHEETHEADER contains pointers to non-const other data (such as phpage), that data can be written to, even though the pointer itself can&#8217;t be.</p>
<p>In fact, AFAICT, &#8220;phpage&#8221; appears to be the only non-const pointer member of a PROPSHEETHEADER. So, while &#8220;phpage&#8221; can&#8217;t be made to point anywhere else, the data it points to *can* be modified. (But for any other member, your response would have been correct)</p>
<div CLASS=post>[<i>Ah, perhaps I misunderstood the original question then. I thought the question was &#8220;If I memcmp the PROPSHEETHEADER before and after, will there be any difference?&#8221; The <code>phpage</code> member will be unchanged. What it points to, however, is another matter. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418333">
				<div id="div-comment-418333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418333">
			September 8, 2006 at 5:16 pm</a>		</div>

		<p>Unfortunately, not all Win32 API functions declare constness of their parameters accurately. Here’s just one example:</p>
<p>BOOL DrawDibDraw(<br />
<br /> &nbsp;HDRAWDIB hdd, HDC hdc, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
<br /> &nbsp;int xDst, int yDst, int dxDst, int dyDst, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
<br /> &nbsp;LPBITMAPINFOHEADER lpbi,<br />
<br /> &nbsp;LPVOID lpBits,<br />
<br /> &nbsp;int xSrc, int ySrc, int dxSrc, int dySrc,<br />
<br /> &nbsp;UINT wFlags<br />
<br />);</p>
<p>Surely drawing a DIB is not supposed to change it? Why, then, aren’t lpbi and lpBits declared as LPCBITMAPINFOHEADER and LPCVOID, respectively? There isn’t even such a thing as a LPCBITMAPINFOHEADER.</p>
<p>You might say it’s tradition, or backwards compatibility. But, didn’t all handle types use to all be the same type? Now, with STRICT defined, they are distinct types. Similarly, it should be possible to declare all constant pointers as such in STRICT mode. After all, it’s not like “const” means anything to the binary layout of parameters.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418133">
				<div id="div-comment-418133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.voidnish.com' rel='external nofollow' class='url'>Nish</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418133">
			September 8, 2006 at 10:30 am</a>		</div>

		<p>&gt;&gt; <br />typedef const PROPSHEETHEADERA *LPCPROPSHEETHEADERA; <br />typedef const PROPSHEETHEADERW *LPCPROPSHEETHEADERW; </p>
<p>It&#8217;s a const pointer to a PROPSHEETHEADER structure (either ANSI or Unicode, depending on which flavor of the PropertySheet function you&#8217;re calling). <br />&lt;&lt; </p>
<p>Hey Ray, </p>
<p>Isn&#8217;t that a pointer to a const PROPSHEETHEADER? The pointer itself is not const.</p>
<div CLASS=post>[<i>Absolutely correct. Sloppy writing on my part. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418203">
				<div id="div-comment-418203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418203">
			September 8, 2006 at 11:31 am</a>		</div>

		<p>&quot;One of the rules for const pointers is that you can read from them but you cannot write to them.&quot;</p>
<p>Since we&#8217;re being pedantic, you *can* write to a pointer to const. &nbsp;You cannot write *through* such a pointer to the data structure(s) it references.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418353">
				<div id="div-comment-418353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.tringali.org' rel='external nofollow' class='url'>Scott Tringali</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418353">
			September 8, 2006 at 10:16 pm</a>		</div>

		<p>Adrian&#8217;s right, and it&#8217;s a great point.</p>
<p>If you see a function taking a pointer-to-const something, you can&#8217;t assume that the structure won&#8217;t be modified. &nbsp;The const does not guarantee it, because that function may have a identical non-const pointer up its sleeve somewhere.</p>
<p>Or, it can simply cast away the const. &nbsp;Buh-bye!</p>
<p>Or, maybe another thread has a non-const pointer to it, and updated in between.</p>
<p>It&#8217;s more of a strong hint that the compiler can help enforce, than a guarantee.</p>
<p>The only that guarantee is&#8230; the documentation. &nbsp;We may be can able to say &quot;PropertySheet&quot; will not modify that structure, but we can&#8217;t extrapolate to all functions that take const pointers.</p>
<p>Thus, it&#8217;s a good question to ask: even though I see a const parameter, does function X respect it?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418343">
				<div id="div-comment-418343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418343">
			September 8, 2006 at 5:20 pm</a>		</div>

		<p>I find these things easier to understand when written and read from right to left.</p>
<p>// var is a pointer to a constant T<br />
<br />T const * var;</p>
<p>// var is a constant pointer to a T<br />
<br />T * const var;</p>
<p>// var is a constant pointer to a constant T<br />
<br />T const * const var; </p>
<p>I do agree that the LPCFOOBAR typedefs obfuscate this somewhat.</p>
<p>PMP</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418403">
				<div id="div-comment-418403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418403">
			September 9, 2006 at 1:02 am</a>		</div>

		<p>&#8230; the notorious (documented) exception being CreateFileW when the path is of the &quot;\?&lt;device&gt;&lt;path&gt;&quot; variety, where the path is going to get converted in-place to &quot;??&lt;device&gt;&lt;path&gt;&quot; and passed to the kernel (and then converted back)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418423">
				<div id="div-comment-418423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418423">
			September 9, 2006 at 3:40 am</a>		</div>

		<p>&lt;&lt;Or, it can simply cast away the const. &nbsp;Buh-bye!&gt;&gt;</p>
<p>The const as a promise.<br />
<br />If I declare this to be a const, I promise you that I am not going to change it.</p>
<p>When I cast, I am telling the compiler &quot;you shut up, I know better!&quot;<br />
<br />It is not the compiler&#8217;s fault, it is mine, because I am breaking the contract.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418433">
				<div id="div-comment-418433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418433">
			September 9, 2006 at 7:45 am</a>		</div>

		<p>The &quot;const&quot; keyword is clearly something of a random hit-or-miss afterthought in Win32 (and all its half-a-million-or-so COM interface functions now part of a basic Win32-anno-2001 programming interface). Things that clearly should be const are not, and forces casts and bad design decisions to be propagated into otherwise correct program and library code.</p>
<p>Sure, it can be of interest explaining to the ones not knowing the C language that &quot;const means const&quot;, but of much greater interest to at least me is the glaring errors of MS interface designers where they didn&#8217;t even bother to try to be const correct &#8211; and if that&#8217;s a product of ignorance it&#8217;s just proof they shouldn&#8217;t have been allowed to be interface designers in the first place.</p>
<p>Just my 0.02.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418583">
				<div id="div-comment-418583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-418583">
			September 10, 2006 at 11:08 pm</a>		</div>

		<p>Friday, September 08, 2006 11:31 AM by Adrian<br />
<br />&gt; &quot;One of the rules for const pointers is that<br />
<br />&gt; you can read from them but you cannot write<br />
<br />&gt; to them.&quot;<br />
<br />&gt;<br />
<br />&gt; Since we&#8217;re being pedantic, you *can* write<br />
<br />&gt; to a pointer to const. &nbsp;You cannot write<br />
<br />&gt; *through* such a pointer to the data<br />
<br />&gt; structure(s) it references.</p>
<p>As a language rule that is partly true. &nbsp;An additional rule is that if the actual object really is defined as const then no you can&#8217;t write to the actual object even if you have created a pointer-to-nonconst that points to the object. &nbsp;(Of course the &quot;can&#8217;t&quot; might not be enforceable at compile time, and the result is undefined behaviour.)</p>
<p>Saturday, September 09, 2006 1:02 AM by KJK::Hyperion<br />
<br />&gt; &#8230; the notorious (documented) exception<br />
<br />&gt; being CreateFileW</p>
<p>I remembered that the API rule is different from the language rule in that way, but didn&#8217;t remember which function. &nbsp;Now I&#8217;m even more confused. &nbsp;Now I&#8217;m reading<br />
<br /><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp</a></p>
<p>I do not see documentation of the notorious exception that you mention. &nbsp;Are you sure that the notorious exception is CreateFile and not some other function? &nbsp;I had a vague recollection that it involved a parsing function of some kind, writing a _T(&#8216; &#8217;) into an element accessed through an LPCTSTR.</p>
<p>Saturday, September 09, 2006 7:45 AM by Mike<br />
<br />&gt; Sure, it can be of interest explaining to the<br />
<br />&gt; ones not knowing the C language that &quot;const<br />
<br />&gt; means const&quot;,</p>
<p>But it doesn&#8217;t. &nbsp;The distinction between declarations and definitions is crucial. &nbsp;Even Visual Studio 2005 understands that distinction more than half the time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-419043">
				<div id="div-comment-419043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-419043">
			September 11, 2006 at 8:50 pm</a>		</div>

		<p>Norman, I think you&#8217;re thinking of CreateProcessW.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-419223">
				<div id="div-comment-419223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Harris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-419223">
			September 12, 2006 at 11:42 am</a>		</div>

		<p>Nish: &quot;I don&#8217;t see anything bizarre about that.&quot;</p>
<p>It&#8217;s bizarre because &quot;does not change&quot; suggests that the value after the function will be the same as it was before the function. For example, in:<br />
<br /> &nbsp; &nbsp;int *p = new int(42);<br />
<br /> &nbsp; &nbsp;kill( p );<br />
<br /> &nbsp; &nbsp;assert( *p == 42 );</p>
<p>the assert should succeed (there being no aliases or const casts). Indeed, that&#8217;s exactly the intuition that Raymond is relying on in the root article. It isn&#8217;t true for C++.</p>
<p>Nish: &quot;Surely we need to be able to delete pointers to const objects, else for any non-trivial app, we&#8217;d soon be running out of memory.&quot; </p>
<p>Why? It&#8217;s never necessary, because there isn&#8217;t really a const heap. The new-expression returns a pointer to a non-const object, and you can use that to delete the object. If you can&#8217;t get hold of the original pointer, you can use a const_cast &#8211; which is being explicit about the lack of const-correctness in delete.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-419463">
				<div id="div-comment-419463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-419463">
			September 12, 2006 at 8:55 pm</a>		</div>

		<p>Tuesday, September 12, 2006 11:42 AM by Dave Harris<br />
<br />&gt; It&#8217;s bizarre because &quot;does not change&quot;<br />
<br />&gt; suggests that the value after the function<br />
<br />&gt; will be the same as it was before the<br />
<br />&gt; function.</p>
<p>If kill(p) means something like free(p) (though of course using C++&#8217;s delete keyword instead of the free() function inherited from C) then I think it doesn&#8217;t suggest that *p can still be evaluated afterwards. &nbsp;But if the function had a more innocuous name and if the prototype declaration said const int * then I think it would be as suggestive as you say.</p>
<p>&gt; The new-expression returns a pointer to a<br />
<br />&gt; non-const object, and you can use that to<br />
<br />&gt; delete the object. If you can&#8217;t get hold<br />
<br />&gt; of the original pointer, you can use a<br />
<br />&gt; const_cast</p>
<p>Um, who would use a const_cast for that? &nbsp;Would the const_cast operator appear in some function? &nbsp;Some caller would call this function with a pointer to const of some sort, and would expect that the pointer could still be dereferenced afterwards? &nbsp;Are you saying that such a bizarre suggestive function is the right way to go?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-422253">
				<div id="div-comment-422253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Harris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060908-03/?p=29803#comment-422253">
			September 20, 2006 at 7:17 am</a>		</div>

		<p>Norman Diamond:<br />
<br />&gt; But if the function had a more innocuous name</p>
<p>We&#8217;re talking about what semantics can be deduced from the type system. Renaming the function doesn&#8217;t affect that.</p>
<p>&gt; Um, who would use a const_cast for that? &nbsp;</p>
<p>Normally you wouldn&#8217;t need to, because you&#8217;d keep the non-const pointer around.</p>
<p>&gt; Some caller would call this function with<br />
<br />&gt; a pointer to const of some sort, and<br />
<br />&gt; would expect that the pointer could still<br />
<br />&gt; be dereferenced afterwards?</p>
<p>That&#8217;s the problem, and it exists whether the function has a const_cast or not.</p>
<p>I&#8217;m saying if the pointer can&#8217;t be dereferenced afterwards then the function shouldn&#8217;t take a const pointer argument. And this should also apply to delete expressions.</p>
<p>&gt; Are you saying that such a bizarre<br />
<br />&gt; suggestive function is the right way to go?</p>
<p>No. Quite the reverse. Currently this is legal but bad:</p>
<p> &nbsp; void func1( const int *p ) {<br />
<br /> &nbsp; &nbsp; &nbsp; delete p;<br />
<br /> &nbsp; } </p>
<p>I think this is slightly better:<br />
<br /> &nbsp; void func2( const int *p ) {<br />
<br /> &nbsp; &nbsp; &nbsp; delete const_cast&lt;int *&gt;(p);<br />
<br /> &nbsp; } </p>
<p>because the function body is at least explicit. Better still is:</p>
<p> &nbsp; void func3( int *p ) {<br />
<br /> &nbsp; &nbsp; &nbsp; delete p;<br />
<br /> &nbsp; } </p>
<p>even if this sometimes means the caller needs a const_cast before calling it.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>