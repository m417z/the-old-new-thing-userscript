<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1306927">
				<div id="div-comment-1306927" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170822-00/?p=96865#comment-1306927">
			August 22, 2017 at 9:38 am</a>		</div>

		<p>While I understand why intel went the way they did originally, having a flags register is really convenient for assembly programmers. I&#8217;m kinda surprised they didn&#8217;t introduce three operand versions of the common instructions to support this kind of logic to remove the dependencies.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1306935">
				<div id="div-comment-1306935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170822-00/?p=96865#comment-1306935">
			August 22, 2017 at 10:24 am</a>		</div>

		<p>In the 6502, two of the four arithmetic bits of the status register can be determined statically by looking at the result (S -the sign flag, bit 7- and Z -the zero flag, set if the result is zero-). The other two, V and C, are carry flags (which get the same value for additions, and opposite values for subtraction) and can be derived from the result using the algorithms explained in this article. For logical and shift/rotate operations, all four bits can be determined statically by looking at the result or the operands (Z is set if result is zero; C gets the discarded bit in shifts/rotates, zero otherwise; S gets a copy of bit 7 of the result; and V, strangely, gets a copy of bit 6). If you look at other CISC processors (like the 8086 or the Z80), you&#8217;ll find that they handle things roughly the same way (except for the queer bit V, of course).</p>
<p>With that in mind, having arithmetic flags is convenient (it makes the code more compact), but completely unnecessary if you can do conditional branches on the status of an arbitrary register. It&#8217;s natural that CISC processors choose to use them, and RISC processors choose to go without them.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1306985">
				<div id="div-comment-1306985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170822-00/?p=96865#comment-1306985">
			August 22, 2017 at 4:42 pm</a>		</div>

		<p>Most RISC processors choose to have an integer condition code register though.  The trick is they generally provide instruction variants that don&#8217;t update the flags register so you can avoid interlocks unless you actually care about the flags from a particular operation.  PowerPC has eight integer condition code registers so you can pre-calculate several comparison results.  PowerPC also doesn&#8217;t keep integer carry in the condition code registers, it&#8217;s stored in the fixed point exception register (XER), and very few instructions actually set it.  You need to use a special addition instruction if you want to generate carry for use in an extended precision operation.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1306986">
				<div id="div-comment-1306986" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170822-00/?p=96865#comment-1306986">
			August 22, 2017 at 7:00 pm</a>		</div>

		<p>The classic RISCs don&#8217;t really agree much on that particular point. MIPS and Alpha forego condition codes entirely. SPARC and ARM have a single condition code, but require you to opt-in on instructions to update it. PA-RISC has multiple sets of carry/borrow bits in a status register but no condition code register (and various types of conditional moves, conditional branches based on comparisons, arithmetic-then-branch instructions, and skipping instructions based on conditions). PowerPC has eight 4-bit condition code registers with carry/borrow handled separately as you note. PPC also throws in boolean operations on condition registers, which are not as useful as one would hope, because most programming languages require short-circuit evaluation of conditionals. For example, &#8220;if (x &amp;&amp; widget-&gt;field == 1)&#8221; can&#8217;t generally use PPC &#8220;crand&#8221;, because &#8220;widget&#8221; might be an invalid pointer when x is false.</p>
<p>Architecturally, not having any condition code register at all is definitely simplest.</p>
<p>For in-order implementations, having a few sets of results (like PA-RISCs multiple carries or PPCs 8 condition registers) gives compilers more flexibility in instruction scheduling. The flipside is that this complicates out-of-order implementations, which now need to perform register renaming on the condition codes/flags as well. It&#8217;s easier to rename a single condition code register with dedicated logic than it is to keep track of several of them.</p>
<p>Instructions that produce condition codes and always write all flags or none of them are fairly easy to handle. What sucks for out-of-order is when some instructions only update some flag bits. 32-bit ARM is a case in point: some instructions write NZCV (e.g. ADDS), some NZC (ANDS with shifted register operand), some NZ (ANDS with immediate operand). This requires either executing all such instructions in order and merging flags, or renaming NZ, C, and V separately. That&#8217;s relatively complicated behavior for an architecture generally considered to be RISC. (It&#8217;s also fixed in the A64 ISA).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1306945">
				<div id="div-comment-1306945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://github.com/dbremner' rel='external nofollow' class='url'>David Bremner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170822-00/?p=96865#comment-1306945">
			August 22, 2017 at 1:10 pm</a>		</div>

		<p>Exercise:<br />
Does the chosen calculation order improve performance on the 21064?</p>
<p>Exercise 2:<br />
The right arithmetic shift (SRA) replicates the sign bit across the upper 32 bits.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1306975">
				<div id="div-comment-1306975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170822-00/?p=96865#comment-1306975">
			August 22, 2017 at 3:43 pm</a>		</div>

		<p>Nope, nothing to do with 21064. It&#8217;s a correctness issue, and all the information you need should be covered in earlier installments.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1306955">
				<div id="div-comment-1306955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Craig</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170822-00/?p=96865#comment-1306955">
			August 22, 2017 at 2:36 pm</a>		</div>

		<p>In c and c++, signed overflow is undefined.  That means that you shouldn&#8217;t test if a+b&lt;a to detect overflow.  The compiler is allowed to optimize that to b&lt;0. If alpha had unsigned arithmetic, then a comparison to c would be more appropriate.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1306965">
				<div id="div-comment-1306965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170822-00/?p=96865#comment-1306965">
			August 22, 2017 at 3:42 pm</a>		</div>

		<p>All of the operations are on unsigned integers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1307035">
				<div id="div-comment-1307035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170822-00/?p=96865#comment-1307035">
			August 23, 2017 at 1:50 pm</a>		</div>

		<p><code>a + b &lt; a</code> doesn&#8217;t detect overflow if the operands are signed &#8211; it detects whether b is negative *or* overflow.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1307446">
				<div id="div-comment-1307446" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170822-00/?p=96865#comment-1307446">
			August 28, 2017 at 1:38 am</a>		</div>

		<p>This article is about carry using unsigned operands, not overflow on signed operands.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1307126">
				<div id="div-comment-1307126" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170822-00/?p=96865#comment-1307126">
			August 24, 2017 at 7:34 am</a>		</div>

		<p>No one has gotten the exercises yet, I see&#8230;.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1307165">
				<div id="div-comment-1307165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170822-00/?p=96865#comment-1307165">
			August 24, 2017 at 9:59 am</a>		</div>

		<p>David Bremner got exercise 2. The answer to the first exercise is &#8220;Because Rc might be identical to Ra or Rb. We need to calculate carry after the registers containing the values we need are produced, but before they get overwritten.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>