<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-aaron-margosis even thread-even depth-1" id="comment-458213">
				<div id="div-comment-458213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458213">
			January 2, 2007 at 10:11 am</a>		</div>

		<p>&#8230; or &quot;dumpbin /exports target.dll&quot; to see whether the DLL exports it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-458273">
				<div id="div-comment-458273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom Parker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458273">
			January 2, 2007 at 11:13 am</a>		</div>

		<p>Surely this discussion should come with a caveat that all this is<br />
subject to change at Microsoft&#8217;s whim and that tying your code to a<br />
particular implementation of a header file is a bad idea?</p>
<p>Writing code like this is the kind of thing that gives maintenance teams headaches.</p>
<div class="post">[<i>If it&#8217;s compiled into a binary (like a macro)<br />
then it must continue to be supported at the binary level. Sure, the<br />
macro might change in the future, but the old method must still work<br />
because nobody is going to go back and recompile those older programs<br />
that used the older macro. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-458283">
				<div id="div-comment-458283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458283">
			January 2, 2007 at 11:28 am</a>		</div>

		<p>Tom, as far as the ANSI/Unicode support goes, even Microsoft&#8217;s whims are not powerful enough to change that. If you are going to dynaload a DLL and call an entry point you have to add the A or W if it accepts or returns characters, even if indirectly in a struct. All of this is pretty clear when you&#8217;re doing it in C++ but not so much when you&#8217;re dealing with layers of .NET abstraction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-458293">
				<div id="div-comment-458293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458293">
			January 2, 2007 at 11:52 am</a>		</div>

		<p>Which reminds me to ask. Why on earth do you still make them macros and hurt people all over who might want to have a completely unrelated function called CreateWindow in their code? MS compiler supported __inline keyword for a long time so why not make them simple __inline forwarders?</p>
<p>Laziness or some deep reason?</p>
<div class="post">[<i>You can&#8217;t take the address of an inline function. Besides, support for inline functions was weak back in 1989. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-458303">
				<div id="div-comment-458303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458303">
			January 2, 2007 at 11:53 am</a>		</div>

		<p>You are forced into GetProcAddress when you are trying to write software that will run on multiple versions of the OS. &nbsp;Specifically when you want to support newer features that are not available on earlier systems.</p>
<p>I was going to say that the end functions that the macros point to never change, but then I&#8217;m sure that Win311 code had a CreateWindow function, which got converted to a macro for unicode support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-458333">
				<div id="div-comment-458333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Legolas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458333">
			January 2, 2007 at 12:44 pm</a>		</div>

		<p>Funny that you say:</p>
<p>&quot;If you can&#8217;t figure it out from the header files, you can always just write a program that calls the function you&#8217;re interested in and then look at the disassembly to see what actually got generated.&quot;</p>
<p>I wonder if there&#8217;s anyone that can&#8217;t figure it out from the headers but can figure it out from the assembly generated&#8230; certainly not me!</p>
<p>By the way: isn&#8217;t there some way to see the precompiled result of your source file? (That would have all the macro&#8217;s resolved, far easier that way!) I&#8217;ve seen some IDEs that have support for this but can&#8217;t remember right now if visual studio is one of them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-458343">
				<div id="div-comment-458343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458343">
			January 2, 2007 at 1:03 pm</a>		</div>

		<p>Legolas,</p>
<p>There are flags you can pass to CL.EXE to either dump the preprocessor output to a file or to stdout. (See /E and /P)</p>
<p>However, you&#8217;ll soon discover that one simple #include &lt;windows.h&gt; expands out to literally thousands of lines of code. This often causes your own program to be lost in the noise. I wish there was a way to run the preprocessor but just process rather than expand the #include directives, so the macros all still work out but you don&#8217;t get all of the included code dumped out. (maybe there is, but I can&#8217;t see it in cl /?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-458353">
				<div id="div-comment-458353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458353">
			January 2, 2007 at 1:25 pm</a>		</div>

		<p>&lt;i&gt;Note that whether something is a true function or a function-like macro (or an inline function) can depend on your target platform. For example, GetWindowLongPtrA is a true exported function on 64-bit Windows, but on 32-bit Windows, it&#8217;s just a macro that resolves to GetWindowLongA.&lt;/i&gt;</p>
<p>Forever requiring every developer to use #ifdef around calls to GetWindowLongPtrA if they want to get rid if all compiler warnings under both win64 and win32. &nbsp;Couldn&#8217;t Microsoft have included a smarter macro for this?</p>
<div class=post>[<i>And that smarter macro would be&#8230;? (Not sure what you mean by &#8220;all compiler warnings&#8221; since each compiler has a different set of warnings, plus a compiler is permitted to generate new warnings at any time.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-458373">
				<div id="div-comment-458373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458373">
			January 2, 2007 at 2:09 pm</a>		</div>

		<p>Intellisense and &quot;Go to definition&quot; are amazingly useful for discovering what the macros and functions actually do.</p>
<p>A Raymond Chen blog entry where I actually already knew everything in the post; that&#8217;s rare.</p>
<p>Marvin: Macros are well supported. Windows API must be able to be compiled by practically anything. __inline would be compiler specific, so they can&#8217;t do that without introducing much more gunk to the header files to support various compilers, and they&#8217;d have to provide the macros anyway for unknown compilers. Imagine the legal ramifications if some new compiler was made and the Microsoft APIs didn&#8217;t support it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-458403">
				<div id="div-comment-458403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458403">
			January 2, 2007 at 2:54 pm</a>		</div>

		<p>Raymond: It is the other way around. You <em>can</em> take an address of inline function (the compiler will just put an &nbsp;out-of-line version for you somewhere). But you <em>cannot</em> call an address of whatever CreateWindow expands to because you don&#8217;t know its signature. About the only thing you can do is to store it somewhere.</p>
<p>Erzengel: It might have been true in the past but SDK headers already include lots of MS specific stuff. From winnt.h:</p>
<p>__inline ULONGLONG</p>
<p>NTAPI</p>
<p>Int64ShllMod32 (</p>
<p>&nbsp; &nbsp;ULONGLONG Value,</p>
<p>&nbsp; &nbsp;DWORD ShiftCount</p>
<p>&nbsp; &nbsp;)</p>
<p>{</p>
<p>&nbsp; &nbsp;__asm &nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;mov &nbsp; &nbsp; ecx, ShiftCount</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;mov &nbsp; &nbsp; eax, dword ptr [Value]</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;mov &nbsp; &nbsp; edx, dword ptr [Value+4]</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;shld &nbsp; &nbsp;edx, eax, cl</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;shl &nbsp; &nbsp; eax, cl</p>
<p>&nbsp; &nbsp;}</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-458413">
				<div id="div-comment-458413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ookii.org' rel='external nofollow' class='url'>Sven Groot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458413">
			January 2, 2007 at 3:00 pm</a>		</div>

		<p>Raymond, I know precisely what compiler warnings Eric is talking about, and they bug me as well.</p>
<p>The problem occurs when doing something like this:</p>
<p>WNDPROC w = reinterpret_cast&lt;WNDPROC&gt;(GetWindowLongPtr(hWnd, GWLP_WNDPROC));</p>
<p>MS&#8217;s 64 bit compilers have no problem with this because they see a conversion from LONG_PTR to a pointer, which is perfectly fine (because the LONG_PTR typedef is marked __w64 which tells the compiler its safe to cast to a pointer no matter the architecture). However, MS&#8217;s more recent 32 bit compilers will emit warnings when they see something that wouldn&#8217;t be safe on a 64 bit architecture. Because GetWindowLongPtr is a macro on 32 bit architectures, the 32 bit compiler ends up seeing a call to GetWindowLong, which returns a LONG, so it&#8217;s a conversion from LONG to a pointer. Safe on 32 bit, but potentially unsafe on 64 bit. So the compiler will emit a warning that the conversion is unsafe, while in fact the code is safe because you&#8217;re already using GetWindowLongPtr. The only way to deal with that is some preprocessor magic; I usually use #pragma warning to disable the warning and re-enable it after the call. Very messy.</p>
<div class=post>[<i>Yeah that bugs me too. But I have no control over it either. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-458423">
				<div id="div-comment-458423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ookii.org' rel='external nofollow' class='url'>Sven Groot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458423">
			January 2, 2007 at 3:10 pm</a>		</div>

		<p>Actually I just thought of a better way to get rid of the warning on both x86 and x64:</p>
<p>LONG_PTR l = GetWindowLongPtr(hWnd, GWLP_WNDPROC);</p>
<p>WNDPROC w = reinterpret_cast&lt;WNDPROC&gt;(l);</p>
<p>Seems to do the trick in eliminating the warning (and no, I don&#8217;t usually name my variables like that).</p>
<p>The same won&#8217;t work for SetWindowLongPtr though, since even if you introduce temporaries it&#8217;ll always look like a potential narrowing conversion to the x86 compiler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-458513">
				<div id="div-comment-458513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458513">
			January 2, 2007 at 9:18 pm</a>		</div>

		<p>&gt; How can you figure all this out? Read the</p>
<p>&gt; header files.</p>
<p>In drafts and I&#8217;m sure the approved 1989 version of the C standard, the library section stated that where it used the word &#8220;function&#8221; it was guaranteed that the thing would be a function, and where it used the word &#8220;macro&#8221; the thing could be either a function or a macro. &nbsp;If MSDN would do the same then readers could figure all this out from MSDN, instead of depending on undocumented behaviour.</p>
<p>About the particular warnings in a sub-thread:</p>
<p>&gt; Yeah that bugs me too. But I have no control</p>
<p>&gt; over it either.</p>
<p>Even though you have no control over it, aren&#8217;t you allowed to submit a bug report on the Connect site?</p>
<div class=post>[<i>It bugs me but not enough to file a bug. Life is too short to get bent out of shape over everything that doesn&#8217;t go your way. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-458573">
				<div id="div-comment-458573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/01/03/1404965.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458573">
			January 3, 2007 at 10:00 am</a>		</div>

		<p>Vestigial organs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-458613">
				<div id="div-comment-458613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-458613">
			January 3, 2007 at 11:49 am</a>		</div>

		<p>Here&#8217;s how you can do it &#8211; right after #include &lt;windows.h&gt;:</p>
<p>#ifndef _WIN64</p>
<p>#undef GetWindowLongPtr</p>
<p>#undef SetWindowLongPtr</p>
<p>inline LONG_PTR GetWindowLongPtr( HWND hWnd, int nIndex )</p>
<p>{</p>
<p>&nbsp; &nbsp;return (LONG_PTR)GetWindowLong(hWnd,nIndex);</p>
<p>}</p>
<p>inline LONG_PTR SetWindowLongPtr( HWND hWnd, int nIndex, LONG_PTR dwNewLong )</p>
<p>{</p>
<p>&nbsp; &nbsp;return (LONG_PTR)SetWindowLong(hWnd,nIndex,(LONG)dwNewLong);</p>
<p>}</p>
<p>#endif</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459013">
				<div id="div-comment-459013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ookii.org' rel='external nofollow' class='url'>Sven Groot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-459013">
			January 4, 2007 at 6:33 pm</a>		</div>

		<p>Ivo, very nice (I should&#8217;ve thought of that!). I&#8217;m going to use that whenever I next run into this problem. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459253">
				<div id="div-comment-459253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Grant</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-459253">
			January 5, 2007 at 1:40 pm</a>		</div>

		<p>I so dearly wish that Microsoft will one day produce a list of the proper P/Invoke signatures for all the APIs&#8230;</p>
<p>I think I am probably living in a dream world though.</p>
<div class=post>[<i>Define &#8220;proper&#8221;. The most general p/invoke signature for SendMessage (for example) is also the most useless one. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459603">
				<div id="div-comment-459603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070102-04/?p=28533#comment-459603">
			January 9, 2007 at 12:49 am</a>		</div>

		<p>The &quot;smarter macro&quot; that the SDK should have is one that properly replicates the documented behavior.</p>
<p>#define GetWindowLongPtrW(hwnd, nIndex)((LONG_PTR)(GetWindowLongW(hwnd, nIndex)))</p>
<p>&lt;similar for GetWindowLongPtrA&gt;</p>
<p>#define SetWindowLongPtrW(hwnd, nIndex, NewLong)((LONG_PTR)(SetWindowLongW(hwnd, nIndex, (LONG)(LONG_PTR)(NewLong))))</p>
<p>&lt;similar for SetWindowLongPtrA&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>