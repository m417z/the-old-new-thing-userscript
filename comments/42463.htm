<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-196333">
				<div id="div-comment-196333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030917-00/?p=42463#comment-196333">
			July 19, 2004 at 12:26 pm</a>		</div>

		<p>ClampScrollPos() has a bug.  (I recently made the same mistake in one of my apps.)  If the window is large enough that the window doesn&#8217;t need a scroll bar, then ClampScrollPos will return a negative value (because g_cItems &#8211; g_cyPage will be less than zero).  The simple fix is to swap the two lines.</p>
<p>In my apps, I&#8217;ve always tracked scrolling by pixels rather than lines.  It simplifies many of the calculations, and smooth scrolling becomes a possibility.  You just need a multiplier in the scroll-by-line functions that tells you the (average) pixels per line.</p>
<p>Great series, though.  I thought I knew everything there was about getting scrolling just right, but I&#8217;ve already learned a couple new bits.  In a sense it&#8217;s a shame that it&#8217;s this much work to get scrolling right.  That could explain all the custom controls out there that don&#8217;t do it right.</p>
<p>ANIMATED SCROLLING</p>
<p>I like animated scrolling to help the eye follow along.  In addition to keeping track of the current scroll position, you also track the current *target* position.  All of your scroll commands then compute a new target position.</p>
<p>I make it a user selectable option (using SPI_GETLISTBOXSMOOTHSCROLLING as a default).  If animated scrolling is disabled, then iPos = iTarget and proceed as usual.</p>
<p>But if it&#8217;s enabled, send yourself a custom &quot;animate&quot; message instead.  The handler for this message moves the current position closer to the target position and calls ScrollWindow().  At the end of OnPaint, you post another &quot;animate&quot; message if the current position hasn&#8217;t caught up with the target.  Since WM_PAINT messages are low priority (only dispatched when cue is empty), you can still accumulate additional scrolling commands from the mouse or keyboard and move the target as the animation proceeds.</p>
<p>What we want is snappy animation (so you can still jump to the top or bottom of a long document quickly) while giving enough motion for the eye to track and land.  So what I do is:</p>
<p>int delta = iTarget &#8211; iPos;<br />
<br />if (-3 &lt; delta || delta &lt; 3)<br />
<br />    iPos += delta / 3;<br />
<br />else<br />
<br />    iPos = iTarget</p>
<p>Thus, if you have a long way to scroll, we whizz by.  But as we get to the target location, the rate slows nicely.  Really slick if you track things in pixels rather than items.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196343">
				<div id="div-comment-196343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030917-00/?p=42463#comment-196343">
			July 19, 2004 at 12:30 pm</a>		</div>

		<p>Oops, I got the comparison wrong at the end of my last post.  Should be:</p>
<p>if (-3 &lt; delta &amp;&amp; delta &lt; 3)<br />
<br />    iPos = iTarget;<br />
<br />else<br />
<br />    iPos += delta/3;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>