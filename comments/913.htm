<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1125643">
				<div id="div-comment-1125643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125643">
			May 23, 2014 at 7:17 am</a>		</div>

		<p>Well OK then. Bleeetch.</p>
<p>Only two models ever avoided this problem &#8212; static linking and a.out shared libs (all shared libs had to be registered at build time to set non-overlapping load areas &#8212; no points for guessing what that entails for distributed binary libraries).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125653">
				<div id="div-comment-1125653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125653">
			May 23, 2014 at 7:22 am</a>		</div>

		<p>There is also the option of marking the DLL as non relocatable. Which is fine if you hate address space randomization and can manually pick a non conflicting location</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125663">
				<div id="div-comment-1125663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125663">
			May 23, 2014 at 7:32 am</a>		</div>

		<p>Not relocating the DLL would prevent this exact crash but it is masking the bug, not fixing it.</p>
<p>The callback can still occur when after it unloads but before it reloads.</p>
<p>And even if it has reloaded, and the callback calls the correct function, &nbsp;the internal state of the DLL has reset and the the callback could be passing in a handle, say, that this instance didn&#39;t create.</p>
<div class="post">[<em>All excellent points. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125713">
				<div id="div-comment-1125713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125713">
			May 23, 2014 at 8:53 am</a>		</div>

		<p>I&#39;ve seen this problem with Explorer. Particularly in Windows 8.1 it will unload my shell extension even if I return FALSE from DllCanUnloadNow. Next time it loads it on a different address and all such registered callbacks don&#39;t work. The fix is to call GetModuleHandleEx bump up the DLL ref count.</p>
<div class="post">[<em><a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/11/06/10464022.aspx">CoUninitalize will ask a DLL if it is okay to unload now, but the answer is a foregone conclusion</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125723">
				<div id="div-comment-1125723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125723">
			May 23, 2014 at 12:47 pm</a>		</div>

		<p>[CoUninitalize will ask a DLL if it is okay to unload now, but the answer is a foregone conclusion. -Raymond]</p>
<p>Given that explorer can&#39;t do much w/o COM I find it surprising that it would ever call CoUninitialize.</p>
<div class="post">[<em>Every STA thread uninitializes COM before it exits. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125753">
				<div id="div-comment-1125753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125753">
			May 23, 2014 at 5:18 pm</a>		</div>

		<p>How can we diagnose a crash in our product that occurs on a separate thread spawned by WinInet.dll? &nbsp;The thread crashes because a deep function unloads a Microsoft DLL that is used higher up in the call stack, like this example. &nbsp;It only happens on Windows 7; XP, Vista, 8, and 8.1 have never shown in crash reports.</p>
<p>An unrelated company&#39;s product also triggers this crash somehow in their own product; we found that in an Internet search. &nbsp;Either it&#39;s a Windows bug, or this other company&#39;s product is making the same mistake we are.</p>
<div class="post">[<em>You could set a breakpoint when the DLL unloads to see if that gives you a clue. I&#39;m not going to answer follow-up questions because I do not do one-on-one consulting. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125763">
				<div id="div-comment-1125763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125763">
			May 23, 2014 at 5:55 pm</a>		</div>

		<p>It&#39;s a known bug in W7. Pin the DLL being unloaded with LoadLibrary to fix.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125743">
				<div id="div-comment-1125743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125743">
			May 23, 2014 at 5:06 pm</a>		</div>

		<p>@Joshua:</p>
<p>The rule of thumb is a call to CoUninitialize for every successful CoInitialize(Ex). Since you have to initialize COM on every thread that you want to use it on inside a process*, then it is not surprising to call these functions more than once. Even with MTA threads, it is still good practice to call these two functions.</p>
<p>(*Terms and conditions apply, please see small print)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>