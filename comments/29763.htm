<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (30)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-419623">
				<div id="div-comment-419623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419623">
			September 13, 2006 at 10:31 am</a>		</div>

		<p>I tend to do the extreme opposite, and write classes to explicitly disable derived classes&#8211;and even operations like assignment&#8211;unless I have thought through the implications. That allows me to be lazy and only do the design changes when I actually need the functionality and flexibility. At that point I usually have a better idea of what is really needed anyway.</p>
<p>That sort of approach won&#8217;t work for writing a public class library of course. My condolences to those guys.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-419643">
				<div id="div-comment-419643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/rweigelt' rel='external nofollow' class='url'>Roland</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419643">
			September 13, 2006 at 10:32 am</a>		</div>

		<p>My rule of thumb is to avoid making public methods virtual. Because if I have a public virtual method and some time later I notice &quot;oh, there&#8217;s some code that should be called shortly before or after any code in the derived class is called&quot;, I&#8217;m out of luck.</p>
<p>That&#8217;s why I tend to use a pattern something like this:</p>
<p>protected virtual void OnPerformAction()<br />
<br />{<br />
<br /> &nbsp;// default implementation<br />
<br />}</p>
<p>public void PerformAction()<br />
<br />{<br />
<br /> &nbsp;// code may be added later here&#8230;</p>
<p> &nbsp;OnPerformAction();</p>
<p> &nbsp;// &#8230; or here<br />
<br />}<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-419653">
				<div id="div-comment-419653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419653">
			September 13, 2006 at 10:36 am</a>		</div>

		<p>Seems like a metaphor for Win16 -&gt; Win32 -&gt; Win64&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-419703">
				<div id="div-comment-419703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://forbidden-planet.blogspot.com' rel='external nofollow' class='url'>richard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419703">
			September 13, 2006 at 1:25 pm</a>		</div>

		<p>This discussion has many different points of view and ways of being argued &#8211; it all depends on the purpose of your class.</p>
<p>For some objects, it does not make sense to derive from them, so virtual functions are pointless.</p>
<p>For other objects, the name of the game is polymorphism and virtual functions are essential.</p>
<p>I take pretty much the opposite view of Roland and make most of my public functions virtual (if it makes sense to do so).</p>
<p>One thing that bugs me is function hiding when you forget to declare a function as virtual.</p>
<p>I think the C++ compiler has a long way to go to keep us programmers from tripping over our code.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-419743">
				<div id="div-comment-419743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419743">
			September 13, 2006 at 2:49 pm</a>		</div>

		<p>I guess I&#8217;m more concerned with the security aspects. A &#8216;contract&#8217; or &#8216;intent of the method&#8217; is out the window if the deriver&#8217;s intent is malicious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-419763">
				<div id="div-comment-419763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419763">
			September 13, 2006 at 4:00 pm</a>		</div>

		<p>I know this isn&#8217;t a .NET blog but that is my world at this point. With dynamic loading and factory patterns and such, I can see where someone might be able to get malicious code injected into an application.</p>
<p>Not a point of contention here &#8211; just one of the things I take into account when making the virtual/non-virtual decision.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-419783">
				<div id="div-comment-419783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bernd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419783">
			September 13, 2006 at 4:20 pm</a>		</div>

		<blockquote><p>
  I happen to believe that the cost of this extensibility is badly underestimated<br />
  <br />I totally agree. Its gets me mad when I see devs declaring the d&#8217;tor of their newly created class virtual before any . On a code review when you ask them why they did this they usually say: &quot;Because all d&#8217;tors must be virtual&quot;.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-419713">
				<div id="div-comment-419713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">XRay</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419713">
			September 13, 2006 at 1:49 pm</a>		</div>

		<p>&gt;&gt; the derived class may have done &quot;crazy&quot; things inside that virtual method</p>
<p>Usually there is some kind of &quot;contract&quot; (which should be documented but has some implicit points) which derived class must respect.</p>
<p>If the method I call is called ReadData and the base class just reads data, the derived object clearly should not delete itself inside that method (unless explicitely allowed).</p>
<p>An autodeletion inside a method which clearly should not autodelete is as evil as starting a thread which reads from char*p=(char*)(0) at a random time. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-419863">
				<div id="div-comment-419863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419863">
			September 13, 2006 at 9:56 pm</a>		</div>

		<blockquote><p>
  Some people argue that every method should<br />
  <br />&gt; be virtual so that derived classes can<br />
  <br />&gt; override the behavior of the base class in<br />
  <br />&gt; ways the base class may not have anticipated.</p>
<p>Agreed in principle (i.e. there could be rare exceptions). &nbsp;The biggest reason for this is that the alternative is still the same old use of copy-paste in order to polymorph a function.</p>
<p>&gt; You can&#8217;t hold any locks when calling a<br />
  <br />&gt; virtual method (else you may deadlock with<br />
  <br />&gt; the derived class).</p>
<p>I disagree. &nbsp;For one thing, if the derived class writer doesn&#8217;t know what locks you hold, it&#8217;s their fault for deriving from you. &nbsp;For another thing, if the derived class writer doesn&#8217;t know what locks they hold, they can deadlock with themselves and still kill you.</p>
<p>&gt; You have to be prepared for all sorts of<br />
  <br />&gt; reentrancy because the derived class may<br />
  <br />&gt; have decided to call MessageBox in its<br />
  <br />&gt; implementation.</p>
<p>Again I disagree. &nbsp;You have to be prepared for all sorts of reentrancy because either (1) your program is reentrant by nature or (2) you&#8217;re running under Windows. &nbsp;Even in C-style code with no classes, and no calls to MessageBox, your wndproc can still get reentered at surprising times. &nbsp;I don&#8217;t think a derived class&#8217;s call to MessageBox adds much to this existing complexity.</p>
<p>&gt; You have to revalidate your state after the<br />
  <br />&gt; virtual method returns because the derived<br />
  <br />&gt; class may have done &quot;crazy&quot; things inside<br />
  <br />&gt; that virtual method including possibly<br />
  <br />&gt; destroying the object itself!</p>
<p>Again I disagree. &nbsp;First a bad example:<br />
  <br />If you&#8217;re a lung of a person who commits suicide, you&#8217;re dead.<br />
  <br />That&#8217;s a bad example because if you&#8217;re a lung then the person &quot;has&quot; you instead of &quot;is&quot; you. &nbsp;So here&#8217;s a good example:<br />
  <br />If you&#8217;re a mammal of a person who commits suicide, you&#8217;re dead.<br />
  <br />Hope that&#8217;s clear ^_^</p>
<p>Of course COM rules are completely different.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-419883">
				<div id="div-comment-419883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Haroon Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419883">
			September 13, 2006 at 10:04 pm</a>		</div>

		<p>I think the Liskov Subsitution Principle is a good criteria to decide if the functions of a class are to be marked virtual or not. If a derived class can&#8217;t be seamlessly subsituted for a parent class or a sibling class, then the parent class is probably not a good candidate as parent class with virtual functions. </p>
<p>In other words if the client object or function needs to know something about the internal mechanism of &nbsp;the object of a derived class through a base class pointer, then the LSP is being violated, and using polymorphism is probably wrong. </p>
<p>In my own (very limited) experience the LSP is pretty hard criteria to satisfy, but has been a nice guide to simplify my designs. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-419753">
				<div id="div-comment-419753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419753">
			September 13, 2006 at 3:51 pm</a>		</div>

		<p>&gt; &quot;I guess I&#8217;m more concerned with the security aspects. A &#8216;contract&#8217; or &#8216;intent of the method&#8217; is out the window if the deriver&#8217;s intent is malicious.&quot;</p>
<p>I certainly understand that approach for object reuse in the COM sense, because the environment can be hostile and the attacker misusing your component isn&#8217;t the one who owns the computer under attack.</p>
<p>But this is source code. Why would someone be trying to derive a class with *malicious* intent? It&#8217;s easier to be directly evil in your own code, or by copying and modifying the original source code to change its behavior.</p>
<p>Admittedly, someone might try to use your unmodified source as an obfuscating evil proxy for their own bad actions, but incompetence and carelessness has got to rate a lot higher as a cause of problems.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-419903">
				<div id="div-comment-419903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craig Ringer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419903">
			September 14, 2006 at 1:31 am</a>		</div>

		<p>I&#8217;m not sure Brian&#8217;s argument about malicious code makes much sense. If someone manages to inject malicious code into your app using any of the aforementioned methods, the changes are that any state validation you do won&#8217;t help much. They can potentially patch the code doing the validation (except in the presence of DEP / W^X or equivalent), never return control to your app at all, or do almost anything else they want. In fact, we saw a good discussion of this issue just recently here in the New Old Thing with the post on using the return pointer as a caller security mechanism in DLLs.</p>
<p>If you&#8217;re talking about an IPC interface like COM, then a certain level of paranoia and lack of reliance on documented &quot;contracts&quot; does make good sense. For in-process calls I don&#8217;t think it does.</p>
<p>Personally I tend to include such state checks before and after virtual method calls, but they&#8217;re `const&#8217;-qualified and compiled in only for debug builds. This helps the subclass developer retain their sanity if they miss a documented requirement of the interface or my documentation is lacking, because the sanity checks will often detect their error. However, it imposes no large costs on the production builds. Cheap checks are often still included to make tracking down problems in deployed code easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-419933">
				<div id="div-comment-419933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sridhar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419933">
			September 14, 2006 at 4:25 am</a>		</div>

		<p>When defining a method as virtual, there is an understanding on why this must be virtual. &nbsp;The virtual method may be expected modify the state of the object. &nbsp;By defining a post-condition (<a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Postcondition" rel="nofollow">http://en.wikipedia.org/wiki/Postcondition</a>) for a virtual method, we may have some control on what the method does.</p>
<p>Other than Eiffel, is there programming langauges that support pre and post-conditions for virtual methods in some form or the other? &nbsp;</p>
<p>A good option would be to have attributes for pre and post conditions.</p>
<p>class C1<br />
<br />{<br />
<br /> &nbsp;private int a;</p>
<p> &nbsp;[Pre-condition: a &gt; 0 &amp;&amp; a &lt; 100;]<br />
<br /> &nbsp;[Post-condition: a &gt; 0 &amp;&amp; a &lt; 1000;]<br />
<br /> &nbsp;protected virtual void ActOnA();<br />
<br />};</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-419943">
				<div id="div-comment-419943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419943">
			September 14, 2006 at 4:29 am</a>		</div>

		<p>I&#8217;m with Norman Diamond here. &nbsp;I make almost all methods virtual, because at some later stage having a virtual method may be convenient. &nbsp;(I like Roland&#8217;s pattern, and may adopt that in some cases. &nbsp;Thanks.)</p>
<p>I think the primary thing is to document what state the application may be in when the method is called. &nbsp;If locks may be held, document that (assuming you don&#8217;t have some kind of global deadlock avoidance strategy). &nbsp;My general feeling is that any methods designed to be called from the message loop should be reentrant anyway: you might want to stick a MessageBox in there for debugging purposes anyway, and coping with reentrancy isn&#8217;t normally difficult. &nbsp;But if it isn&#8217;t reentrant, just document that the method cannot do anything that might result in a message being dispatched. &nbsp;Sure, it limits the usefulness of being able to override the message, but it&#8217;s still better than having to go back and make a public interface change if you find you need to at a later stage.</p>
<p>I think the key thing here is, make sure everyone knows what&#8217;s going on. &nbsp;If you do that, it should work out OK.</p>
<p>Just my experiences, which may be somewhat influenced by the fact that I work at a small shop (only 2 programmers).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-419953">
				<div id="div-comment-419953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419953">
			September 14, 2006 at 4:34 am</a>		</div>

		<p>Interesting to compare java where everything (non static) is virtual unless you make it final, with c# where eveything isn&#8217;t virtual unless you explicitly make it so. </p>
<p>I like the c# approach &#8211; I prefer deciding whether to open up a class as opposed to remembering to close it off.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-419983">
				<div id="div-comment-419983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419983">
			September 14, 2006 at 4:39 am</a>		</div>

		<blockquote><p>
  &gt;&gt;I think the Liskov Subsitution Principle is a good criteria to decide if the functions of a class are to be marked virtual or not. If a derived class can&#8217;t be seamlessly subsituted for a parent class or a sibling class, then the parent class is probably not a good candidate as parent class with virtual functions.&lt;&lt;&lt;</p>
<p>I&#8217;d take it a step further. &nbsp;If a derived class can&#8217;t be seamlessly substituted for a parent class, it shouldn&#8217;t be a subtype. &nbsp;Make it its own type, using private inheritance (or using a &#8216;has-a&#8217; type of relationship with the other class), and add new methods to expose any functions of the parent class that are really necessary. &nbsp;That way you get the protection of the type system preventing you from using it in a situation that won&#8217;t work.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-419993">
				<div id="div-comment-419993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ac</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419993">
			September 14, 2006 at 4:50 am</a>		</div>

		<p>I&#8217;m 100% with Raymond on this one, and believe that those who believe that every function or class should be virtual (&quot;to support reuse&quot;, what a lame excuse) are not making effective programs (neither easy to maintain nor fast to execute). When they make programs for themself, I guess they see nothing wrong. Still I wouldn&#8217;t like them in my team.<br />
<br />All these rules like &quot;every function should be virutal&quot; or &quot;all variables should be private&quot; are plainly bad. A lot of what was preached in multitude of books since C++ got popular came from people who never developed anything bigger than &quot;hello world&quot;.<br />
<br />When I&#8217;m by C++ problems, I consider the whole iostream C++ standard library a major flop, that demonstrats a lot of problems inherent in C++. Stroustrup should have developed C++ a little more to support something better.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-420003">
				<div id="div-comment-420003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KiwiBlue</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-420003">
			September 14, 2006 at 5:29 am</a>		</div>

		<p>@Jules:</p>
<p>The &quot;Roland&#8217;s pattern&quot; is commonly known as &quot;template method&quot;. See <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Template_method_pattern" rel="nofollow">http://en.wikipedia.org/wiki/Template_method_pattern</a> (or pick up the GOF book :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-420023">
				<div id="div-comment-420023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://gammawave.wordpress.com' rel='external nofollow' class='url'>Patrick Broman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-420023">
			September 14, 2006 at 7:14 am</a>		</div>

		<p>&quot;Every function should be virtual&quot; is an appealing opinion, but it is also very idealistic &#8211; which doesn&#8217;t mix well with the highly pragmatic nature of C++ itself. </p>
<p>Java, Smalltalk, Ruby and other languages which to various extents aspire to be &quot;fully&quot; object oriented are a different beast altogether &#8211; functions being &quot;virtual&quot; by default (or that being the only option) makes sense in those languages.</p>
<p>When programming in C++ I use virtual functions pretty much exclusively to define interface-type (in the java/C# sense) classes, most of which are abstract. IMHO that&#8217;s the single most useful application of inheritance &#8211; otherwise I do just as well without. Even the most trivial of textbook examples emphasize the value of being able to treat apples and oranges as fruit.</p>
<p>Slightly off-topic, I just have to make a point: C++ isn&#8217;t a very dynamic language. Violent attempts to make it behave and seem more dynamic than it really wants to will only make you frustrated and unhappy. Mmkay?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-419963">
				<div id="div-comment-419963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-419963">
			September 14, 2006 at 4:34 am</a>		</div>

		<p>&gt;&gt;&gt; I totally agree. Its gets me mad when I see devs declaring the d&#8217;tor of their newly created class virtual before any. On a code review when you ask them why they did this they usually say: &quot;Because all d&#8217;tors must be virtual&quot;. &lt;&lt;&lt;</p>
<p>I *always* make destructors virtual (except for classes that are used in a completely private context). &nbsp;There is a very good reason for doing this: if a subclass of the class is added later, and an instance is used as a substitute of a parent class instance, it is possible for the wrong destructor to be called. &nbsp;The slightest chance of that happening is truly bad.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-420223">
				<div id="div-comment-420223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-420223">
			September 14, 2006 at 12:26 pm</a>		</div>

		<blockquote><p>
  &gt;&gt;When programming in C++ I use virtual functions pretty much exclusively to define interface-type (in the java/C# sense) classes, most of which are abstract. IMHO that&#8217;s the single most useful application of inheritance &#8211; otherwise I do just as well without.&lt;&lt;&lt;</p>
<p>I&#8217;ve been experimenting with writing systems in this kind of style lately, and have found the results quite interesting. &nbsp;I&#8217;ve also started using factory objects to create all my objects. &nbsp;Some of the results have been useful. &nbsp;Other times it has cost me development time. &nbsp;I think soon I&#8217;ll know when it is best to use the technique and when it isn&#8217;t.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-420243">
				<div id="div-comment-420243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">C--</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-420243">
			September 14, 2006 at 1:02 pm</a>		</div>

		<blockquote><p>
  Its gets me mad when I see devs declaring the d&#8217;tor of their newly created class virtual before any . On a code review when you ask them why they did this they usually say: &quot;Because all d&#8217;tors must be virtual&quot;. </p>
<p>Can Visual C++&#8217;s class generator maybe be the cause? All dtors it generates are virtual.</p>
<p>Maybe someone@ms thought: &quot;Gosh, somebody might want to override this, so I&#8217;ll make it virtual.&quot;
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-420303">
				<div id="div-comment-420303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.werkema.com' rel='external nofollow' class='url'>Sean W.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-420303">
			September 14, 2006 at 1:53 pm</a>		</div>

		<p>I&#8217;d like to point out that this problem, in C++, is both simpler and more complicated than it seems at first. &nbsp;Consider these (legal C++) declarations:</p>
<p>class A { &#8230; };<br />
<br />class B : public virtual A { &#8230; };</p>
<p>Regardless of what your intentions were with class A, regardless of what semantics you might have wanted it to have, every one of its methods are treated as virtual by class B. &nbsp;So the choice of &quot;virtual or not&quot; in C++ is a bit misleading: &nbsp;Anybody who really wants to can subvert your decision, no matter how wise your decision may have been.</p>
<p>Because of this, I tend to lead more toward non-virtual than toward virtual (in fact, in light of the ability to do this, declaraing every method of a given class as &quot;virtual&quot; is &nbsp;silly and meaningless). &nbsp;Since my choice can be overridden anyway by anyone so inclined, I treat the &quot;virtual&quot; keyword as a hint to other programmers as to the intent of my design: &nbsp;Methods without &quot;virtual&quot; were probably not intended to be overridden, while any method marked &quot;virtual&quot; has the full blessing of the original designer to be overridden.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-420363">
				<div id="div-comment-420363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-420363">
			September 14, 2006 at 3:01 pm</a>		</div>

		<p>Sean, virtual base classes are different than virtual functions. &nbsp;Virtual base classes are used for multiple inheritance when those base classes are derived from a common base. &nbsp;This makes the derived class only contain a single instance of that common base class.</p>
<p>There is no way that deriving a class from A can make a function call on a pointer to A from a plain function to a virtual function. &nbsp;The compiler generates completely different code for the two different types of calls.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-420483">
				<div id="div-comment-420483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-420483">
			September 14, 2006 at 8:40 pm</a>		</div>

		<p>Thursday, September 14, 2006 6:36 PM by Sean W.<br />
<br />&gt; perhaps &quot;class A : common public B&quot; would<br />
<br />&gt; have been a better term,</p>
<p>The C/C++ philosophy is to reuse keywords as much as possible instead of defining new ones, deriving new uses for base keywords, but implementing new meanings that don&#8217;t derive from the old meanings.</p>
<p>But you&#8217;re right that this reuse of &quot;virtual&quot; was a bit too counterintuitive in its meaning.</p>
<p>So they should have called it &quot;class A : static public B&quot; &nbsp;^_^</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-420443">
				<div id="div-comment-420443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.werkema.com' rel='external nofollow' class='url'>Sean W.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-420443">
			September 14, 2006 at 6:36 pm</a>		</div>

		<p>Hmm, you&#8217;re right, Greg. &nbsp;My mistake.</p>
<p>(Or possibly a lousy word choice on the part of the C++ designers; perhaps &quot;class A : common public B&quot; would have been a better term, given what the &quot;virtual&quot; keyword does in that circumstance. &nbsp;But, since I don&#8217;t use multiple inheritance, this explains why I&#8217;ve never found a need to stick a &quot;virtual&quot; in there before.)</p>
<p>Still, I think the rationale that results from that misconception was pretty good, and I still follow that model in my own code. &nbsp;If you don&#8217;t mark a method as virtual, anybody who really *wants* to get around that limitation can usually find ways to do so (even if not exactly the same as if it had been marked virtual). &nbsp;I really think virtual should be reserved for methods where you&#8217;re giving your approval to other people to override them, not simply &quot;just in case&quot; (which can and does cause problems later in the design). &nbsp;Everything in moderation, &quot;virtual&quot; included.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-421153">
				<div id="div-comment-421153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-421153">
			September 17, 2006 at 3:38 am</a>		</div>

		<blockquote><p>
  So they should have called it &quot;class A : static public B&quot; &nbsp;^_^</p>
<p>As if five different meanings of &quot;static&quot; were not enough :)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-421263">
				<div id="div-comment-421263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bernd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-421263">
			September 17, 2006 at 7:07 pm</a>		</div>

		<p>&gt;I *always* make destructors virtual (except for classes that are used in a completely private context).<br />
<br />&gt;There is a very good reason for doing this: if a subclass of the class is added later, and an instance is used as a substitute of a parent class instance, it is possible for the wrong destructor to be called. &nbsp;The slightest chance of that happening is truly bad</p>
<p>Many classes don&#8217;tr even need an d&#8217;tor. If a class just holds two doubles it doesn&#8217;t need a d&#8217;tor<br />
<br />Of course in most cases it is totally right to declare a dtor virtual and therefor the claswizard has a good default by making all d&#8217;tor virtual. But not for every class. Hey it&#8217;s C++ it&#8217;s about having the choice! Its just that I would like people _think_ before they declare something virtual.</p>
<p>Thats what we&#8217;re paid for :-)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-421303">
				<div id="div-comment-421303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sloppy BASIC programmer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-421303">
			September 18, 2006 at 4:42 am</a>		</div>

		<p>Thinking is laborious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-421353">
				<div id="div-comment-421353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">albertito (aka keiko)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060913-04/?p=29763#comment-421353">
			September 18, 2006 at 8:07 am</a>		</div>

		<p>hi,</p>
<p> I&#8217;m a Spanish student and I have read your comments and I&#8217;d like to comment anyone have thought in this sentence:<br />
<br />&gt;&gt;&gt; &quot;&#8230; that needs to be designed and tested.&quot; &lt;&lt;&lt;<br />
<br /> We must remember that anything we do, it must tested. We, as software engineers, mustn&#180;t only in the design; and we must think in the consequences, such as testing. In this stage, we have to test the security in our applications and other type of tests; and anything type of test means spending much money.<br />
<br /> Of course, we mustn&#8217;t forget that everything has more point of view and nothing has a only solution.</p>
<p>Att,</p>
<p> Alberto.</p>
<p>&#8212;<br />
<br />Albertito (aka keiko)<br />
<br />P&#225;gina Personal: <a rel="nofollow" target="_new" href="http://atetinho.googlepages.com" rel="nofollow">http://atetinho.googlepages.com</a><br />
<br />Blog: <a rel="nofollow" target="_new" href="http://ifelsedeveloper.blogia.com" rel="nofollow">http://ifelsedeveloper.blogia.com</a><br />
<br />C.A.S: <a rel="nofollow" target="_new" href="http://www.ajedrezsanturtzi.com" rel="nofollow">http://www.ajedrezsanturtzi.com</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>