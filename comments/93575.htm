<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (39)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1251185">
				<div id="div-comment-1251185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251185">
			June 6, 2016 at 7:18 am</a>		</div>

		<p>At this point, one might be tempted to mention Physical Address Extensions. Even that won&#8217;t help you, though &#8211; linear addresses are still 32 bits wide, but with paging and PAE enabled, they can map to larger physical addresses (36+ bits).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1251255">
				<div id="div-comment-1251255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251255">
			June 6, 2016 at 8:42 am</a>		</div>

		<p>PAE does not create larger address spaces, but allows you to use more than 4 GB of physical RAM in order to run several 4 GB processes without swapping. You can get the same with a 64-bit OS running on a 64-bit processor, so PAE is now obsolete.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1251225">
				<div id="div-comment-1251225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251225">
			June 6, 2016 at 8:19 am</a>		</div>

		<p>If Microsoft had gone for a Harvard architecture when they started off writing 32-bit software, I suspect that Intel might well have made the linear address space &gt; 4G.  Harvard architecture would have made buffer overflow bugs a much less attractive target too.  (I know there is return-oriented-programming, but I wonder if that would have been developed if hacking had *started out* so much harder.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1251265">
				<div id="div-comment-1251265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251265">
			June 6, 2016 at 8:48 am</a>		</div>

		<p>&#8220;Harvard architecture&#8221; is an attribute of the processor, not the OS. So it should have been implemented by Intel *before* Microsoft could use it. And even in that case, Microsoft OSes maintain a great level of back compatibility, which would be broken by switching to a Harvard architecture. Many great OSes of the 90s (for example, BeOS) didn&#8217;t succeed because they didn&#8217;t offer backwards compatibility and didn&#8217;t have enough native software to be useful.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1251305">
				<div id="div-comment-1251305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251305">
			June 6, 2016 at 10:45 am</a>		</div>

		<p>&gt; “Harvard architecture” is an attribute of the processor, not the OS. </p>
<p>This *is* true, but you could also view it as a programming model &#8212; and in that sense, it&#8217;s potentially in control from the OS and compiler to an extent. For example, consider a compiler that produced a x86 program that only accesses data through ds and code through cs or something; in effect, you have a Harvard architecture style program because it&#8217;s impossible to make a data pointer point at code or vice versa. (This is probably a bit wrong, but my overall point is that a system could impose more &#8220;restrictive&#8221; requirements on programs than the architecture allows, and hence provide a Harvard *programming model* on a von Neumann machine.)</p>
<p>This also provides a way to provide backwards compatibility, if Intel or AMD comes along and restores the functionality of the segment registers &#8212; programs that are compiled to support the Hardvard model would get it, while programs that aren&#8217;t, wouldn&#8217;t.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1251415">
				<div id="div-comment-1251415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251415">
			June 7, 2016 at 2:23 am</a>		</div>

		<p>The benefit of accessing data through the cs segment is that read only tables that are used within a subroutine can be paged in at the same time as the code. So you would need a separate read only data page and therefore slower for no clear advantage.</p>
<p>The advantage of Harvard is that you can have separate code and data busses attached to completely different memory, so you can access both at the same time. It&#8217;s only really used in dsp&#8217;s and microcontrollers. There is no way that Intel would even consider it. It would require new motherboards and all new software.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1251805">
				<div id="div-comment-1251805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251805">
			June 8, 2016 at 6:09 am</a>		</div>

		<p>And, since most Intel processors have separate I- and D-caches, they get this benefit of the Harvard architecture where it matters the most (where the bandwidth requirement per CPU is highest).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1252125">
				<div id="div-comment-1252125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1252125">
			June 10, 2016 at 11:10 am</a>		</div>

		<p>@Bob</p>
<p>Separate I and D caches is very common, even the Motorola 68030 from 1987 has it. Intel actually cache the decoded opcodes though. Looking back, it&#8217;s strange that the RISC revolution just led to faster Intel CISC chips.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1251315">
				<div id="div-comment-1251315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251315">
			June 6, 2016 at 10:52 am</a>		</div>

		<p>&gt; I wonder if that would have been developed if hacking had *started out* so much harder.</p>
<p>I suspect it would have. Even if you think that ROP is too complicated and subtle for someone to realistically think about it from first principals, remember that ROP wasn&#8217;t the first code-reuse attack; remember at least return-to-libc. And return-to-libc attacks *are* simple enough that I strongly believe they&#8217;d have been developed even if return-to-stack attacks were never possible. (In some ways, return-to-libc attacks are simpler than return-to-stack, though I suspect they were developed later.) And I think ROP is as natural of a development from return-to-libc as it is to return-to-stack attacks.</p>
<p>So I don&#8217;t think it&#8217;d have made appreciable difference, to be honest, in terms of what non-return-to-stack attacks are known.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1251596">
				<div id="div-comment-1251596" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.farnz.org.uk/' rel='external nofollow' class='url'>Simon Farnsworth</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251596">
			June 7, 2016 at 10:55 am</a>		</div>

		<p>ROP is basically applying the techniques from threaded code (<a href="https://en.wikipedia.org/wiki/Threaded_code" rel="nofollow">https://en.wikipedia.org/wiki/Threaded_code</a> instead of the parallel/concurrent meaning of the term) to attacks. I suspect that if we had common Harvard machines, we&#8217;d have seen more interpreters written in a threaded style, and thus attackers would have had the inspiration they needed to get to ROP earlier.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1251235">
				<div id="div-comment-1251235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251235">
			June 6, 2016 at 8:22 am</a>		</div>

		<p>PAE allows you to have a 32-bit operating system running 16 processes, *each* of which has 4G of physical memory.  (Or rather more processes with rather less memory each.)  It would be very useful, and would make the 32-bit consumer operating systems much more attractive (even today, a desktop/laptop with 64G memory is a bit of a beast).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-2 parent" id="comment-1251275">
				<div id="div-comment-1251275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251275">
			June 6, 2016 at 8:52 am</a>		</div>

		<p>Two things, first that calculation is based upon all 64GB of physical RAM and all of the process&#8217; virtual address space being for user code. Without the user VA being set to 3GB and process not being marked as large address aware, each process would have 2GB of address space, which would mean 32 processes. With 3GB, that would be 22 and 2/3.<br />
Secondly, the reason why 32 bit consumer operating systems are less attractive isn&#8217;t to do with PAE, it is to do with the virtual address limitation. Dealing with a lot of data in a limited amount of space is possible but awkward. It is also harder and slower compared to being able to deal with it in a larger amount of space.<br />
As an addition, the value for PAE that you have is also a bit dodgy. Yes, the original PAE gave 2^36, but it didn&#8217;t actually need to stop there and it didn&#8217;t. On 64 bit hardware, PAE uses all of the available physical address lines available. This can be verified by looking at the intel software developers manual. The reason why we didn&#8217;t get any more extensions on 32 bit hardware was most likely because the virtual address space was being pushed a bit too far and the move towards 64 bit processors was already being made.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1251325">
				<div id="div-comment-1251325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251325">
			June 6, 2016 at 10:59 am</a>		</div>

		<p>&gt; Dealing with a lot of data in a limited amount of space is possible but awkward. It is also harder and slower compared to being able to deal with it in a larger amount of space.</p>
<p>It also reduces dramatically the entropy available to ASLR implementations, and means that if you *do* have even one memory-hungry program, your choice to go with a 32-bit OS was probably bad.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1251425">
				<div id="div-comment-1251425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251425">
			June 7, 2016 at 2:44 am</a>		</div>

		<p>&#8220;PAE allows you to have a 32-bit operating system running 16 processes, *each* of which has 4G of physical memory.</p>
<p>@Martin Bonner That statement is pretty much all wrong. On 32 bit windows each application has 2gb of address space, you can increase this to 3gb but you shouldn&#8217;t do this with pae because it puts too much address space pressure on the kernel. Apps that are not pae aware can only have as much physical ram as will fit in their address space (so 2gb). If however an app is pae aware then it can allocate as much ram as it wants, but it has to take care of mapping the ram into the 2gb address space itself. So in a way it&#8217;s similar to EMS expanded memory. You avoid the overhead of paging from hard disk, but extra instructions have to be written/debugged/executed.</p>
<p>When Itanium failed and AMD brought 64 bit processors to the market then PAE was dead. There are too many advantages with going 64 bit.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1251285">
				<div id="div-comment-1251285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251285">
			June 6, 2016 at 9:06 am</a>		</div>

		<p>You actually can extend the address space, sort-of. Make each descriptor describe a gigabyte, but mark it not-present. An access traps, giving the operating system the chance to swap in that segment (and discard another). 100 descriptors -&gt; 100 gigabytes virtual address space. This is pretty much what Windows-286 did with the swap file, but it had to deal with 64k segments only, not gigabyte segments.</p>
<p>I have actually seen the 286 processor being described as having a virtual address space of 16 terabytes (16k tasks with a local descriptor table x 16k descriptors in each table x 64k memory per descriptor), although it had only 24 address bits (16 megabytes address space).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1251286">
				<div id="div-comment-1251286" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Archibald</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251286">
			June 6, 2016 at 9:51 am</a>		</div>

		<p>&gt; This means that segments whose base + limit is greater than 0xFFFFFFFF are illegal.</p>
<p>Not quite. It&#8217;s perfectly valid to have a segment whose base+limit is more than 4GB, it&#8217;s just that the linear addresses will wrap when they overflow. Linux actually uses that to implement thread local storage: the TLS segment has a limit of 4GB and a base which depends on the thread, and puts the program&#8217;s own thread locals above the base and libc&#8217;s immediately underneath it. That means they can both access thread local variables without an extra indirection and without each needing to know the size of the other&#8217;s thread local area.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1251295">
				<div id="div-comment-1251295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251295">
			June 6, 2016 at 10:23 am</a>		</div>

		<p>I can&#8217;t find any text that documents the wrapping behavior. Volume 3A section 3.4 &#8220;Logical and linear addresses&#8221; says that step 3 is &#8220;Adds the base address of the segment &#8230; to the offset to form a linear address,&#8221; but says nothing about what happens if this addition overflows. (Implementation-specific behavior is explicitly called out if you try to do a DWORD read at offset FFFFFFFFh.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1251327">
				<div id="div-comment-1251327" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251327">
			June 6, 2016 at 11:09 am</a>		</div>

		<p>I can&#8217;t, either.  There are a lot of statements that vaguely imply that all segment base + effective addresses are ANDed with 0xFFFFFFFF in legacy and compatibility modes (32-bit modes), but there is no direct statement of this fact.  However, I know from experience that wrapping segments are in fact legal.  In compatibility mode (as opposed to legacy mode), it still wraps around 4 GB even though the virtual memory space is much larger in long mode.</p>
<p>That wrapping around 0xFFFFFFFF in an effective address is implementation-defined turned out to be very important in the security breakdown of the original Xbox.  Intel CPUs don&#8217;t care if EIP hits the end; they just continue executing at 0.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1251435">
				<div id="div-comment-1251435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251435">
			June 7, 2016 at 2:55 am</a>		</div>

		<p>@Myria The xbox exploit refers to the CS:IP in real mode wrapping from 0xffff:ffff to 0x0000:0000. Intel CPU&#8217;s do (or did) to allow boot roms at either end of the address space, AMD instead throw an exception. The xbox started out with an AMD cpu and only switched to Intel quite late on. Masking of physical addresses in protected mode is completely different.</p>
<p><a href="https://events.ccc.de/congress/2005/fahrplan/attachments/591-paper_xbox.pdf" rel="nofollow">https://events.ccc.de/congress/2005/fahrplan/attachments/591-paper_xbox.pdf</a></p>
<p>&#8220;That wrapping around 0xFFFFFFFF in an effective address is implementation-defined turned out to be very important in the security breakdown of the original Xbox. Intel CPUs don’t care if EIP hits the end; they just continue executing at 0.&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1251445">
				<div id="div-comment-1251445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251445">
			June 7, 2016 at 2:59 am</a>		</div>

		<p>And of course, the no exception on wrap around on Intel cpu&#8217;s wouldn&#8217;t have been a problem. Except that Microsoft tried to stop the system it detected a security problem by purposefully triggering the AMD exception and never went back to test it when the CPU changed to Intel.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1251335">
				<div id="div-comment-1251335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DonH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251335">
			June 6, 2016 at 11:20 am</a>		</div>

		<p>It&#8217;s been a long time since I had to look at this, but (at least on some x86&#8217;s) couldn&#8217;t you turn on the Page Size Extensions and get 4MB pages in a 36-bit linear address space instead of the normal 4kB pages in a 32-bit linear address space?  I seem to recall that we considered doing this before rejecting it for a number of reasons (I/O costs would be too high for 4MB pages, and we thought programmers would be happier with flat 32-bit virtual addresses than with segmented 48-bit virtual addresses).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1251355">
				<div id="div-comment-1251355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251355">
			June 6, 2016 at 11:35 am</a>		</div>

		<p>Nope, PSE merely avoids allocating a page for the PTEs (and puts everything in the PDE). The linear address space doesn&#8217;t change; only the way pages get mapped into it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1251345">
				<div id="div-comment-1251345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MarcK4096</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251345">
			June 6, 2016 at 11:20 am</a>		</div>

		<p>It seems like it would be much easier to recompile in x64 and just change your requirements to require a 64-bit OS.  :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1 parent" id="comment-1251356">
				<div id="div-comment-1251356" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251356">
			June 6, 2016 at 3:57 pm</a>		</div>

		<p>This reminds me of how the Morris worm was ignored when OS/2 2.x and NT OS/2 was being designed. Yes, I am talking about the decision to go with a flat instead of segmented address space.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1251365">
				<div id="div-comment-1251365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251365">
			June 6, 2016 at 4:13 pm</a>		</div>

		<p>Seeing as x86 is the only major processor that supports segments, that basically says &#8220;We will never run on anything other than an x86.&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao odd alt depth-3 parent" id="comment-1251375">
				<div id="div-comment-1251375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251375">
			June 6, 2016 at 4:31 pm</a>		</div>

		<p>I know. But I don&#8217;t think portable programs that can handle both segmented and flat address spaces would be hard to create. On malloc for example, you could just increase the data segment size.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1251385">
				<div id="div-comment-1251385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251385">
			June 6, 2016 at 5:42 pm</a>		</div>

		<p>I&#8217;m sure people would have loved working with far pointers again. (&#8220;What do you mean there is no integer type large enough to hold a pointer? And there is no way to atomically exchange a pointer?&#8221;)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao odd alt depth-5" id="comment-1251395">
				<div id="div-comment-1251395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251395">
			June 6, 2016 at 6:12 pm</a>		</div>

		<p>Yea, I have been thinking for example whether the data and stack would be in the same segment or in separate segments.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1 parent" id="comment-1251396">
				<div id="div-comment-1251396" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251396">
			June 6, 2016 at 7:12 pm</a>		</div>

		<p>This reminds me of people who spreads the rumor that in 32-bit WinXP with 8GB RAM, you can install some ramdisk driver to turn the inaccessible additional 4GB RAM into ramdisk and use it.</p>
<p>//sigh</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao odd alt depth-2 parent" id="comment-1251405">
				<div id="div-comment-1251405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251405">
			June 6, 2016 at 8:26 pm</a>		</div>

		<p>I think most of these used PSE36.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-3" id="comment-1251406">
				<div id="div-comment-1251406" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251406">
			June 6, 2016 at 11:24 pm</a>		</div>

		<p>Not aware of that. Btw if the information found on Wiki PSE-36 page is correct, Win2k or above only supports PAE and therefore it should not work on WinXP systems.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1251455">
				<div id="div-comment-1251455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251455">
			June 7, 2016 at 3:22 am</a>		</div>

		<p>It&#8217;s not a rumour, you can do it. XP SP1 allows you to access more than 4gb, later SP blocked it. You can either patch the binary or there are other ways for the ramdisk to access the extra memory. I don&#8217;t know why you&#8217;d want to, but you can.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-3 parent" id="comment-1251675">
				<div id="div-comment-1251675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251675">
			June 7, 2016 at 6:20 pm</a>		</div>

		<p>This &#8220;news&#8221; started to spread around the time of WinXP SP2, when 4GB of RAM become affordable and 4GB per bank memory modules enter the market. There was lots of people talking about it in 2008-2010 when people upgrade their machine but still want to use WinXP, and want to have more memory installed so that they can make use of it if they decided to upgrade to Win7 x64 later.</p>
<p>AFAIK the ramdisk is still a windows driver, and it&#8217;s choice of mode to access memory is still governed by the OS. If the OS choose not to support it, you cannot enable it by a driver. That&#8217;s why I think it&#8217;s rumour.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao odd alt depth-4" id="comment-1251705">
				<div id="div-comment-1251705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251705">
			June 7, 2016 at 7:26 pm</a>		</div>

		<p>Actually, I think the DRAM price per bit fell by about half between 2004 and 2005. One year after XP SP2 was released, with 512Mbit DDR/DDR2 chips being available, 4GB of RAM probably cost around $400-500. At that time, &#8220;XP Professional x64 Edition&#8221; existed, but driver issues was not the only problem. Though I admit that on the Intel desktop side only the Intel 955X chipset had 36-bit addressing.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1251755">
				<div id="div-comment-1251755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251755">
			June 8, 2016 at 3:04 am</a>		</div>

		<p>ImDisk  claims to be able to use RAM above 4GB on 32-bit OSes with an additional driver that uses AWE.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1251465">
				<div id="div-comment-1251465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MV</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251465">
			June 7, 2016 at 6:19 am</a>		</div>

		<p>I worked out a trick once to launch a child process, then use the debugging APIs to read/write the memory of the child process.  I couldn&#8217;t use &gt;4GB directly, but I could copy large blocks of data into my address space when needed, and push them back to the child process afterwards. </p>
<p>Don&#8217;t worry, this wasn&#8217;t part of a real app &#8211; just an experiment to see if it would work (it does).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1251515">
				<div id="div-comment-1251515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251515">
			June 7, 2016 at 9:41 am</a>		</div>

		<p>I think you tried too hard. If you just wanted to stash memory somewhere, you can <a href="https://blogs.msdn.microsoft.com/oldnewthing/20040810-00/?p=38203" rel="nofollow">create a memory mapping and then unmap it</a>. The memory is still there; you just need to map it back in.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1251795">
				<div id="div-comment-1251795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MV</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1251795">
			June 8, 2016 at 6:03 am</a>		</div>

		<p>Yeah, that would have been easier.  At the time I wasn&#8217;t aware of the distinction between &#8220;virtual memory&#8221; and &#8220;address space&#8221;.  And the fact that the functions all say &#8220;File&#8221; in their names doesn&#8217;t exactly broadcast the fact that they&#8217;re all about memory tricks, not files.  Probably some deep historical reason for the naming.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1252065">
				<div id="div-comment-1252065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160606-00/?p=93575#comment-1252065">
			June 9, 2016 at 8:14 pm</a>		</div>

		<p>I think this trick does work to get just under 8GB of address space, but not like that. You have to use the 32 mode that results from turning on PE but not PG so it never tries a page table lookup. But do you *really* want to deal with physical memory mapping like you have a 32 bit DOS? I don&#8217;t think so.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>