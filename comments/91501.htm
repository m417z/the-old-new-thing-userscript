<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1201521">
				<div id="div-comment-1201521" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150928-00/?p=91501#comment-1201521">
			September 28, 2015 at 7:13 am</a>		</div>

		<p>I would personally point out that the answer is in the question. Lost messages are lost. Of course, technically they didn&#39;t exist in the first place&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1201511">
				<div id="div-comment-1201511" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150928-00/?p=91501#comment-1201511">
			September 28, 2015 at 7:14 am</a>		</div>

		<p>So, in short, a timer is like an event, rather than a semaphore.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1201501">
				<div id="div-comment-1201501" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150928-00/?p=91501#comment-1201501">
			September 28, 2015 at 7:19 am</a>		</div>

		<p>Raymond, thanks! &nbsp;I&#39;ve had this question in my head, in vague form, since I started working with timers in Windows Forms over 10 years ago.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1201481">
				<div id="div-comment-1201481" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EduardoS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150928-00/?p=91501#comment-1201481">
			September 28, 2015 at 8:59 am</a>		</div>

		<p>And how things works when there are two timers?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even thread-even depth-1" id="comment-1201471">
				<div id="div-comment-1201471" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150928-00/?p=91501#comment-1201471">
			September 28, 2015 at 9:17 am</a>		</div>

		<p>@EduardoS: What would you expect to happen? &nbsp;Each timer owns its own ready state, and once a registered timer is ready, the thread gets notified with an event. &nbsp;The mechanisms are the same, you just have multiple ready states that get checked by the window manager.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1201461">
				<div id="div-comment-1201461" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150928-00/?p=91501#comment-1201461">
			September 28, 2015 at 9:21 am</a>		</div>

		<p>@EsduardoS: I believe that there is plenty of context in the article above to answer your question. It would appear that each timer has a corresponding flag, so given that, the rest should fall out pretty readily&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1201451">
				<div id="div-comment-1201451" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150928-00/?p=91501#comment-1201451">
			September 28, 2015 at 9:52 am</a>		</div>

		<p>I think one thing that really tells what is meant to happen is if you look at the timer callback function. The final parameter is basically the result of a call to GetTickCount.</p>
<p>So what this says to me is that timer events are not really guaranteed to be reliable, and if you really need to be sure, you should work on the difference in time between the current timer event and the previous.</p>
<p>Another thing that I&#39;m sure is obvious, but if I don&#39;t address it, someone will focus on it is the function that you use to get the time from the system. Yes the WinAPI itself uses GetTickCount, but the callback in Windows is old. If you do use a timer, you should use one that can last as long as you need and is as precise as you need.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1201431">
				<div id="div-comment-1201431" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150928-00/?p=91501#comment-1201431">
			September 28, 2015 at 3:03 pm</a>		</div>

		<p>&quot;It would appear that each timer has a corresponding flag, so given that, the rest should fall out pretty readily&#8230;&quot;</p>
<p>And it would only take about 5 more lines of code to test that theory, as well, code that should be obvious from what was already provided.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1201421">
				<div id="div-comment-1201421" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150928-00/?p=91501#comment-1201421">
			September 28, 2015 at 4:37 pm</a>		</div>

		<p>@Darran Rowe. Also obvious is if you need heaps accurate timing then maybe you need to look at basing your whole thing on some other mechanism than WM_TIMER.</p>
<p>@EduardoS. I think it depends on the inverse square of the distance between the timers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1201391">
				<div id="div-comment-1201391" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roel Schroeven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150928-00/?p=91501#comment-1201391">
			September 29, 2015 at 3:12 am</a>		</div>

		<p>Do you really get such nice rounded timings? I&#39;ve never seen that in practice. Using your program, I get this output:</p>
<p>1763</p>
<p>2059</p>
<p>2559</p>
<p>3073</p>
<p>3573</p>
<p>4087</p>
<p>4587</p>
<p>5101</p>
<p>5601</p>
<p>&#8230;</p>
<p>That confirms what I&#39;ve always noticed in practice: the delta between triggers is often larger than the specified interval. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1201361">
				<div id="div-comment-1201361" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150928-00/?p=91501#comment-1201361">
			September 29, 2015 at 7:31 am</a>		</div>

		<p>I also wonder why the first timer fires at 1797 in the example. That&#39;s 47 milliseconds to set up the timer, sleep, wake up and process the timer message. Seems like a lot of time for a simple task to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1201341">
				<div id="div-comment-1201341" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EduardoS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150928-00/?p=91501#comment-1201341">
			September 29, 2015 at 7:46 am</a>		</div>

		<p>@everybody</p>
<p>What I asked was, let&#39;s say you have set up two timers, every one second, for example, but the message processing takes more than one second, let&#39;s say, 2 seconds, so, the flags of both timers are checked, one get&#39;s issued, but processin takes too long and the flag is checked again, in the next GetMessage wich timer message will be dispatched?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1201281">
				<div id="div-comment-1201281" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150928-00/?p=91501#comment-1201281">
			September 29, 2015 at 11:32 am</a>		</div>

		<p>@EduardoS:</p>
<p>That should be implementation defined. IMO, the most likely ordering is that it will dispatch the timer messages in order of them being first triggered, but I don&#39;t remember enough of the documentation to comment on if this is true or guaranteed.</p>
<p>The important thing to remember though is that if there are multiple timers active, all of the timers will eventually trigger.</p>
<p>@Roel Schroeven, Sven2:</p>
<p>The output I get is similar to Raymond&#39;s.</p>
<p>1781</p>
<p>2000</p>
<p>2500</p>
<p>3000</p>
<p>3500</p>
<p>4000</p>
<p>4500</p>
<p>&#8230;.</p>
<p>Remember there are some important things with getting these times. First, the initial wait time is there because the thread is set to sleep for 1750, but it is set to sleep right at the end of WM_CREATE. There are some really heavy messages that it has to process before it gets to the timer ones. For example, it seems like the relative priority is that the WM_PAINT message gets processed before WM_TIMER. So is it hard to believe that drawing the non-client area, and then the client area may take time? There are a few more things to remember, how the paint message is non trivial regardless, you have to clear the invalidated region at the very least, and also how many other messages are in the queue after WM_CREATE? When you take that into account, it is not that surprising that the initial time is not 1750.</p>
<p>Second, my development system is an Intel system that is quad core + hyper threading. The system is also not busy while running the application. So in the cases where the WM_TIMER occur, the thread wakes, is guaranteed to run immediately, and gets the call to GetTickCount done quickly. If you are doing this while your system is busy then it isn&#39;t that surprising that you will get some extra time when the timer is handled.</p>
<p>@Raymond:</p>
<p>StringCchPrintf(sz, 256, &quot;%drn&quot;, GetTickCount() &#8211; g_tmStart);</p>
<p>I do that quite often myself, you are being good using TCHAR, and then a literal comes along and you forget to wrap it with the TEXT macro. I can&#39;t remember how many compiler errors I have gotten from that.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>