<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-john-schroedl even thread-even depth-1" id="comment-1279605">
				<div id="div-comment-1279605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/schroedl' rel='external nofollow' class='url'>schroedl</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170110-00/?p=95155#comment-1279605">
			January 10, 2017 at 7:49 am</a>		</div>

		<p>I really like this permutation/sorting series! Thanks</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1279615">
				<div id="div-comment-1279615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170110-00/?p=95155#comment-1279615">
			January 10, 2017 at 11:00 am</a>		</div>

		<p>I *love* the footnote.  Preserving the &#8220;is a permutation of the input&#8221; seemed somewhat pointless for the indices &#8211; but yay for debuggability!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1279645">
				<div id="div-comment-1279645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170110-00/?p=95155#comment-1279645">
			January 11, 2017 at 9:06 am</a>		</div>

		<p>I don&#8217;t think <code>indices</code> is being restored correctly in the first error case. <code>next</code> is already in <code>indices[current]</code> the value we want to store in <code>indices[i]</code> is whatever value has been overwritten in its original position but not written back anywhere else. That value happens to be <code>current</code> if we&#8217;ve been round the while loop already, otherwise nothing. So I think <code>indices[i] = next;</code> should be replaced with <code>indices[i] = i == current ? next : current;</code> or, equivalently, <code>if (i != current) indices[i] = current;</code>.</p>
<p>That said, where it is wrong, it is only losing a valid entry and duplicating the invalid one, so it ought to still be debuggable enough (although not touching anything at all would be equally so).</p>
<p>In lighter news, the <code>using T</code> line is redundant as we never refer to <code>T</code>.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>