<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-403253">
				<div id="div-comment-403253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403253">
			July 25, 2006 at 12:18 pm</a>		</div>

		<p>The linker doesn&#8217;t really know anything about constructing C++ global objects. All it does is link together sections of the .obj files to form the same-named sections of the final file. One of the special features it has is that if a section in the .obj has a $ sign in it, it sorts the objects by the text appearing after the $ and combines them together to form the section with the name on the left. So, if sections in the whole link job exist named .CRT$XCA, .CRT$XCU, and .CRT$XCZ exist, the sections are sorted so that XCA is sorted first, then XCU, then XCZ. The order of objects with identical trailers (e.g. if multiple .obj files have .CRT$XCU sections) is not specified. </p>
<p>I&#8217;m not explaining this well.</p>
<p>Anyway, in crt0init.c, you can see that the C run-time library declares global variables __xc_a in the .CRT$XCA section and __xc_z in the .CRT$XCZ section. Then there&#8217;s a linker directive to tell it to merge the .CRT section into the .data section. If you use a global object with a constructor, the compiler generates a .CRT$XCU section containing a pointer to that constructor. The linker&#8217;s magic with the $ sections causes a function pointer table to be constructed.</p>
<p>In [w]{Win|Dll}MainCRTStartup, there&#8217;s a call to <em>cinit, which is implemented in crt0dat.c. This calls _initterm, which simply iterates through the table calling every function pointer. Theoretically, if there were CRT global objects that needed construction before being used by user global objects, they could be given a letter earlier than U in the alphabet. In practice, there aren&#8217;t any (at least in VC6). This magic _is</em> used (with $XI) to initialize and clean up the standard I/O library, for example.</p>
<p>The fact that this executes in DllMainCRTStartup is that you have to be careful of the loader lock in any global object (with a constructor) created in a DLL. It&#8217;s best not to use them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403263">
				<div id="div-comment-403263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403263">
			July 25, 2006 at 12:23 pm</a>		</div>

		<p>Fascinating as always! However I didn&#8217;t think Microsoft shipped anything other than a C++ compiler these days? Is the mention of a C compiler just a historical detail or is there actually a Microsoft pure C compiler still available somewhere?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403273">
				<div id="div-comment-403273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403273">
			July 25, 2006 at 12:33 pm</a>		</div>

		<p>If you name your file .c rather than .cpp it runs the C compiler rather than the C++ compiler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403283">
				<div id="div-comment-403283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403283">
			July 25, 2006 at 12:45 pm</a>		</div>

		<p>Cool! Thanks Brian.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403363">
				<div id="div-comment-403363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Colascione</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403363">
			July 25, 2006 at 3:24 pm</a>		</div>

		<p>Is there a way to force the compiler to use a stub instead of creating a global constructor? </p>
<div class=post>[<i>See Brian&#8217;s comment above or the response to Norman Diamond below. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403423">
				<div id="div-comment-403423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimastr.com' rel='external nofollow' class='url'>Dmitry Streblechenko</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403423">
			July 25, 2006 at 6:00 pm</a>		</div>

		<p>Do LoadLibrary and GetProcAddress have any thread affinity at all?<br />
<br />I replaced a piece of code that loads msmapi32.dll dynamically as soon as my own dll is loaded (you cannot statically link to it since it can live in several places, none of them in the search path) with something like the following (Delphi):</p>
<p>var _MAPIInitialize : pointer = nil;<br />
<br />function MAPIInitialize;<br />
<br />begin<br />
<br /> &nbsp;GetMAPIProcedureAddress(_MAPIInitialize, &#8216;MAPIInitialize&#8217;);<br />
<br /> &nbsp;asm<br />
<br /> &nbsp; &nbsp;mov esp, ebp<br />
<br /> &nbsp; &nbsp;pop ebp<br />
<br /> &nbsp; &nbsp;jmp [_MAPIInitialize]<br />
<br /> &nbsp;end;<br />
<br />end;</p>
<p>GetMAPIProcedureAddress() would load msmapi321.dll if necessary and call GetProcAddress if GetProcAddress has never been called for the the given function.<br />
<br />In other words, the dll would get loaded as soon as an attempt is made to call any of its functions.<br />
<br />This works perfectly 99.9% of the time, &nbsp;but as soon as this code is used in a multithreaded environment, weird things start happening: some time after the code runs and loads msmapi32.dll on a secondary thread (which later terminates, but my dll stays up), I get access violations either in msmapi32.dll itself or in one of the dlls that also use msmapi32.dll (such mspst32.dll). This includes both true multithread applications written in C++ as well as the VB IDE, which runs the code in its own address space when debugging.<br />
<br />Yes, I do wrap the code that calls LoadLibrary and GetProcAddress in critical sections&#8230; The crashes occur seemingly out of the blue and I cannot see the call stack&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403453">
				<div id="div-comment-403453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403453">
			July 25, 2006 at 9:43 pm</a>		</div>

		<p>GetProcAddress probably doesn&#8217;t have any thread affinity, but MAPI is probably making some assumptions about the thread that is used to initialize it. &nbsp;Also, MAPIInitialize takes a parameter which you aren&#8217;t passing in your call. &nbsp;The documentation for MAPIInitialize specifies how the parameter should be initialized for multithreaded programs.</p>
<p>Don&#8217;t play these tricks just to save an extra &quot;ret&quot; instruction. &nbsp;Call MAPIInitialize according to the documentation and things will work a lot better.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403503">
				<div id="div-comment-403503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403503">
			July 26, 2006 at 3:29 am</a>		</div>

		<p>Dmitry Streblechenko: (shrug) Send/PostMessage to your main thread and let it do the work. Sounds like you&#8217;ve spent enuf time on this one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-403573">
				<div id="div-comment-403573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403573">
			July 26, 2006 at 11:20 am</a>		</div>

		<p>Andrew, Brian: The C++ and C compiler share a lot of the same code, the difference is that for modules compiled as C, C1.DLL is used to produce a parse tree, while for C++, C1XX.DLL is used. As you say, normally for .c files the C compiler is used while for .cpp, .cxx files the C++ compiler is used; however, you can override this behaviour by using the /Tc, /TC, /Tp, /TP switches (respectively &#8216;compile this file as C&#8217;, &#8216;compile all files as C&#8217;, &#8216;compile this file as C++&#8217;, &#8216;compile all files as C++&#8217;).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403643">
				<div id="div-comment-403643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimastr.com' rel='external nofollow' class='url'>Dmitry Streblechenko</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403643">
			July 26, 2006 at 12:53 pm</a>		</div>

		<p>Doug,<br />
<br />MAPIInitialize is stil called on the same thread (and it must be called on every thread that uses MAPI, much like CoInit), it is a question of when LoadLibrary() is called which apparently makes a difference.<br />
<br />As for the missing parameter, it is there &#8211; just a Delphi shortcut: it allows to omit the parameters list in the implementation sesion if the function definition in the interface section lists the parameters:</p>
<p>function &nbsp;MAPIInitialize(lpMapiInit : Pointer) : HResult; stdcall;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403653">
				<div id="div-comment-403653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimastr.com' rel='external nofollow' class='url'>Dmitry Streblechenko</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403653">
			July 26, 2006 at 12:57 pm</a>		</div>

		<p>Steve,<br />
<br />I don&#8217;t have a main thread &#8211; my code is in a COM dll which is called by other executables; so main thread is a relative term here &#8211; there might be a main thread MAPI-wise (that does all the MAPI related work) as opposed to the main UI thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403723">
				<div id="div-comment-403723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Todd Greer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403723">
			July 26, 2006 at 5:19 pm</a>		</div>

		<p>It&#8217;s not clear to me how the behavior you describe conforms to the C++ standard. From my reading, g_pGetVersion is required to be initialized before any dynamic initialization takes place: </p>
<p>EXTERN_C DWORD (WINAPI *g_pGetVersion)() = GetVersion; </p>
<p>This is a non-local static of POD type that is initialized by an address constant expression. g_pGetVersion is therefore initialized before g_oops is constructed. </p>
<p>Unless I&#8217;m misreading the standard, you&#8217;ve just described a very interesting compiler bug. </p>
<p>Thank you for the very interesting post.</p>
<div CLASS=post>[<i>Interesting point. But whether it&#8217;s conforming or not, it&#8217;s what happens, and your choices are either to accomodate this behavior or to vote with your wallet and buy a different compiler. I tend to discuss things as they actually are rather than how they ought to be in an ideal world, because it turns out we don&#8217;t live in an ideal world. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403743">
				<div id="div-comment-403743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://grayraven.com/JimNtexas' rel='external nofollow' class='url'>Jim Howard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403743">
			July 26, 2006 at 6:03 pm</a>		</div>

		<p>&quot;Interesting point. But whether it&#8217;s conforming or not, it&#8217;s what happens, and your choices are either to accomodate this behavior or to vote with your wallet and buy a different compiler. I tend to discuss things as they actually are rather than how they ought to be in an ideal world, because it turns out we don&#8217;t live in an ideal world. -Raymond&quot;</p>
<p>Raymond, just be glad you&#8217;re not me. &nbsp;I have to sit next to this language lawyer all day long!</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403773">
				<div id="div-comment-403773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403773">
			July 26, 2006 at 8:50 pm</a>		</div>

		<p>To Todd Greer: </p>
<p>(1) &nbsp;Is the initializer really considered to be a constant when its value comes from an extern declaration? &nbsp;The external definition is not part of this translation unit. </p>
<p>(2) &nbsp;When a translation unit contains a #pragma, whether or not brought about from doing #include &lt;windows.h&gt;, doesn&#8217;t the standard recuse itself entirely from defining the meaning (or absence thereof) of a program? </p>
<p>(3) &nbsp;If nonetheless it&#8217;s a compiler bug, you&#8217;ll be glad to know that this isn&#8217;t the only place where you can report it without paying a fee. &nbsp;Visual Studio is different from Windows. &nbsp;For Visual Studio you can go to the following web site, report a bug, and get a &#8220;won&#8217;t fix&#8221; resolution for free: <br /><a href="http://connect.microsoft.com/feedback/default.aspx?SiteID=210" target=_new rel=nofollow rel="nofollow">http://connect.microsoft.com/feedback/default.aspx?SiteID=210</a></p>
<div CLASS=post>[<i>I think (2) is the operative condition here. In order to get this behavior, you have to use a Microsoft language extension (__declspec), at which point the rules are allowed to change. If you don&#8217;t use __declspec(dllimport), then you get the naive behavior which is standard-conforming. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403933">
				<div id="div-comment-403933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Todd Greer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403933">
			July 27, 2006 at 11:04 am</a>		</div>

		<p>Indeed, __declspec is key here. As this is a documented MS extension, it is to be expected that it changes the rules regarding what it modifies. </p>
<p>Is this particular way in which it changes the rules documented anywhere (other than here)? I was unable to find any such documentation. I did find <a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/twa2aw10.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/twa2aw10.aspx</a>, which mentions assigning the address of a dllimport function to a global or static variable, but it did not mention this caveat.</p>
<p>It would appear that I should still report a bug, but that it is a documentation bug.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403943">
				<div id="div-comment-403943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Todd Greer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060725-00/?p=30383#comment-403943">
			July 27, 2006 at 11:24 am</a>		</div>

		<p>Norman,</p>
<p>(1) Whether the declaration is from this translation unit or not is irrelavent.</p>
<p>(2) Good point. A #pragma causes the implementation to behave in an implementation-defined manner, but the standard does require that the implementation-defined behavior be documented. As Raymond pointed out though, you&#8217;ve more or less hit it with the point that it involves a Microsoft extension.</p>
<p>(3) Thank you. I didn&#8217;t know that. I&#8217;ll file a documentation bug there.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>