<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1101353">
				<div id="div-comment-1101353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101353">
			January 22, 2014 at 7:21 am</a>		</div>

		<p>The MSDN page for Get&shy;Message&shy;Time mentions it wraps around to zero but they talk about the maximum value for a long integer, perhaps this could be updated to make it clear the number is unsigned.</p>
<div class="post">[<em>Get&shy;Message&shy;Time uses a signed integer, so it wraps from 0x7FFFFFFF to 0x80000000. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101463">
				<div id="div-comment-1101463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101463">
			January 22, 2014 at 9:54 am</a>		</div>

		<p>@Raymond, I&#39;ll have to agree with @skSdnW, the current doc says:</p>
<p>&quot;The return value from the GetMessageTime function does not necessarily increase between subsequent messages, because the value wraps to zero if the timer count exceeds the maximum value for a long integer.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-ludlow even thread-even depth-1" id="comment-1101473">
				<div id="div-comment-1101473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Ludlow' rel='external nofollow' class='url'>John Ludlow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101473">
			January 22, 2014 at 9:57 am</a>		</div>

		<p>Yes &#8211; what Raymond is saying seems to be correct in terms of how the value would wrap (without having tested this myself!) but it&#39;s not what the documentation is saying.</p>
<p>I&#39;d suggest this is an error in the documentation and it should be updated to reflect reality,</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101543">
				<div id="div-comment-1101543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wolf Logan [Bing IPE]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101543">
			January 22, 2014 at 11:56 am</a>		</div>

		<p>&#8230;unless I&#39;m misreading the intent of GetMessageTime(). On reflection, it&#39;s likely that the docs for GetMessageTime() were cut-and-pasted from Get­Tick­Count(), without accounting for the change in return type.</p>
<p>Yuck. In that case, I agree there&#39;s an issue with the GetMessageTime() docs; they don&#39;t seem to match the return type correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1101593">
				<div id="div-comment-1101593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101593">
			January 22, 2014 at 5:33 pm</a>		</div>

		<p>I wouldn&#39;t take the notion of relying on undefined behavior lightly, as there have been several high-profile cases (somewhat) recently of code behaving differently because of a compiler removing undefined behavior to remove or modify code. See <a rel="nofollow" target="_new" href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html">blog.llvm.org/&#8230;/what-every-c-programmer-should-know.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101603">
				<div id="div-comment-1101603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101603">
			January 22, 2014 at 7:44 pm</a>		</div>

		<p>C++ really does feel like a minefield sometimes, doesn&#39;t it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1101533">
				<div id="div-comment-1101533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wolf Logan [Bing IPE]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101533">
			January 22, 2014 at 11:48 am</a>		</div>

		<p>Stop &#8212; you&#39;re both right!</p>
<p>The docs say that the returned value wraps, so that you&#39;ll never see a &quot;negative&quot; value from GetMessageTime(); but *operations on the underlying type* (LONG) will wrap as Raymond describes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101643">
				<div id="div-comment-1101643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101643">
			January 23, 2014 at 4:20 am</a>		</div>

		<p>What&#39;s this fancy new Windows Application Brogramming Interface?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1101653">
				<div id="div-comment-1101653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101653">
			January 23, 2014 at 4:33 am</a>		</div>

		<p>@David:</p>
<p>Not sure if serious or tongue-in-cheek. I like &quot;Brogramming&quot;, anyways.</p>
<p>But of course it&#39;s the Application Binary Interface, which is not the same as the API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101703">
				<div id="div-comment-1101703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Anil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101703">
			January 23, 2014 at 10:53 am</a>		</div>

		<p>There is no undefined behavior, except in the specific instance where the author points it out, and provides an alternative implementation that does not rely on undefined behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1101723">
				<div id="div-comment-1101723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101723">
			January 23, 2014 at 12:28 pm</a>		</div>

		<p>Someone&#39;s blog had this example of the problem of signed integer overflow in C, but I don&#39;t remember where. =/</p>
<p>uint64_t MultiplyWords(uint16_t x, uint16_t y)</p>
<p>{</p>
<p> &nbsp;uint32_t result = x * y;</p>
<p> &nbsp;return result;</p>
<p>}</p>
<p>One compiler&#39;s object code returned 0xFFFFFFFFFFFE0001 for Multiply(0xFFFF, 0xFFFF), and it wasn&#39;t a compiler bug &#8211; what the heck? &nbsp;It&#39;s because of extremely subtle invocation of the undefined behavior rules of signed integers in C.</p>
<p>Values smaller than &quot;int&quot; get promoted to &quot;int&quot; during an arithmetic operation. &nbsp;This occurs regardless of whether the source type is signed or unsigned, annoyingly. &nbsp;So the uint16_t&#39;s get cast to int; int32_t is assumed in this example. &nbsp;Since the &quot;from&quot; type is unsigned, the values get zero-extended. &nbsp;Now the multiply happens. &nbsp;The compiler thus assumes that this cannot overflow &#8211; in other words, cross INT_MAX &#8211; and just emits a normal 32-bit multiply (mul or imul on x86; it doesn&#39;t matter, since the high half is discarded).</p>
<p>Next is the uint32_t. &nbsp;In the case of the compiler in question, it noticed that because the multiply cannot overflow, and because the input values are never signed, the multiplication result cannot be negative. &nbsp;Therefore, casting from int32_t to uint32_t does nothing. &nbsp;The optimizer removes the cast entirely &#8211; now the type of the &quot;x * y&quot; is int32_t instead of uint32_t.</p>
<p>Finally, it returns the uint64_t. &nbsp;The compiler&#39;s optimizer in this case was *not* as smart, not noticing that again the int32_t cannot be negative due to its previous assumptions. &nbsp;Therefore, it sees a cast from int32_t to uint64_t, and emits a sign extension (cdq or movsxd on x86).</p>
<p>When the input is 0xFFFF * 0xFFFF, the multiply results in the 32-bit value 0xFFFE0001. &nbsp;The sign extension results in 0xFFFFFFFFFFFE0001.</p>
<p>This shows that always using unsigned integers whenever possible still won&#39;t save you. &nbsp;I wish C/C++ weren&#39;t like this &#8211; I&#39;d take slightly slower run-time performance over hard-to-find bugs and security holes any day.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101773">
				<div id="div-comment-1101773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101773">
			January 24, 2014 at 12:04 am</a>		</div>

		<p>&quot;Sorry about the inconsistency in signed/unsigned-ness. Feel free to cast between them; they are fundamentally the same thing&quot;</p>
<p>No they are not. This is clear evidence that someone inside Microsoft is working at that time machine otherwise wouldn&#39;t need for negative time. Ray, you lied to us all the time, you do have it after all :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102253">
				<div id="div-comment-1102253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1102253">
			January 25, 2014 at 1:01 am</a>		</div>

		<p>Time modulo 49 days are useless. Have to write 100 SLOCs for handling every operation because of it. (or 1 SLOC if you omit lf &#8211; worse)</p>
<div class="post">[<em>Most user interface actions are complete in less than 49 days. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>