<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1306716">
				<div id="div-comment-1306716" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew Vincent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170817-00/?p=96835#comment-1306716">
			August 17, 2017 at 7:56 am</a>		</div>

		<p>Wow, what a crazily weak memory model! Explicit optimistic locking just to perform consistent updates!</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1306765">
				<div id="div-comment-1306765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170817-00/?p=96835#comment-1306765">
			August 17, 2017 at 5:44 pm</a>		</div>

		<p>This set of primitives (LL/SC, load-link/store-conditional) for atomic operations is very common among 90s RISCs. It was very attractive then because it&#8217;s close to the minimum amount of dedicated hardware you can spend that lets programs build more useful higher-level atomic primitives (atomic loads/stores, fetch-and-add, fetch-and-or, swaps, compare-exchange etc.). That list gives you a hint to the original problem: there&#8217;s many such useful operations, everyone wants something different, and adding 6+ atomic operation primitives to a user-mode instruction set that only has around 30 instructions is not an attractive prospect, especially since next year&#8217;s OS might really want another new primitive! Today we have more or less settled on a set of useful atomic operations, but this is after 25 more years of experience with multi-processor systems. It was less clear then.</p>
<p>The flipside is that you&#8217;re really exposing low-level, nuts-and-bolts details of your processor pipeline and memory subsystem to get there. LL/SC is a natural fit for an in-order classic RISC pipeline, but gets decidedly messier once you build an out-of-order version &#8211; what happens if speculative operations clear your lock bit? Oops. &#8211; or one with several hardware threads: can you guarantee that, with two hardware threads simultaneously trying to perform unrelated atomic operations, at least one of them will eventually make forward progress? The list of rules of exactly what you can and cannot do between a load-link and store-conditional is impressively long and technical for modern architectures.</p>
<p>It&#8217;s similar to branch delay slots: a simple and elegant solution to a real problem if your architecture is implemented in a certain way, but a source of extra complexity when it isn&#8217;t.</p>
<p>ARM recently added a bunch of explicit atomic instructions to their ARMv8.1A architecture, including the aforementioned fetch-and-{various operations}, swap, and compare-exchange. What seemed like a substantial amount of extra hardware in the early 90s is less of an issue in the age of CPU cores with 100+ floating-point and SIMD instructions and dozens of kilobytes of caches even at the low end, and knowing that a core is trying to perform say an atomic add enables hardware implementations that try to do so locally first but let a shared cache level perform the operation if there&#8217;s any contention. This takes less time and less power than having two cores race each other in a spin loop, and these days, HW designers are much more willing to throw extra silicon and design effort at a problem if it increases scalability and lowers power consumption.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao even depth-3" id="comment-1306775">
				<div id="div-comment-1306775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170817-00/?p=96835#comment-1306775">
			August 17, 2017 at 7:15 pm</a>		</div>

		<p>The fun thing is that I found out that LL/SC for SList in Windows still has to be double wide because of the depth. Of course, for example ARM64 uses 48-bit addresses allowing 16-bit for the depth.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1306726">
				<div id="div-comment-1306726" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lance</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170817-00/?p=96835#comment-1306726">
			August 17, 2017 at 8:45 am</a>		</div>

		<p>While more complicated the x86, if you compare this with PPC and ARM weak models, it is neither unusual nor strange.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1306847">
				<div id="div-comment-1306847" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170817-00/?p=96835#comment-1306847">
			August 19, 2017 at 12:12 am</a>		</div>

		<p>Oh no ARM and PPC are positively sane when compared to alphas memory system. </p>
<p>The fact that loads or stores that depend on previous reads are not ordered is pretty much an Alpha only thing. Meaning that in the case of<br />
Load x; Load x.field<br />
making sure that you read the right x is not enough &#8211; you need an additional barrier before loading the field as well.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3" id="comment-1306865">
				<div id="div-comment-1306865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170817-00/?p=96835#comment-1306865">
			August 19, 2017 at 8:43 am</a>		</div>

		<p>You don&#8217;t need a barrier if the same processor is performing both the write and the read. And certainly the read from x.field will use the value of x read by the previous instruction (there are no load delay slots). The weakness comes into play when sharing memory between processors. For example, if processor A writes x.field and then x, processor B can read x and then x.field, but get a stale value for x.field due to the lack of a barrier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1306875">
				<div id="div-comment-1306875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lance</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170817-00/?p=96835#comment-1306875">
			August 19, 2017 at 9:19 am</a>		</div>

		<p>For ARM, I was thinking of the memory order with multiple cpus. You need to add memory barriers for the same reasons.<br />
For PPC, I was thinking of the optimistic locking sequence, which is the same.  And ARM did require an optimistic sequence for atomic operations at one time, but I suspect that is no longer required.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1306755">
				<div id="div-comment-1306755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170817-00/?p=96835#comment-1306755">
			August 17, 2017 at 1:58 pm</a>		</div>

		<p>Clearly the safest option is to halt all but one processor during any memory writes :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1306815">
				<div id="div-comment-1306815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170817-00/?p=96835#comment-1306815">
			August 18, 2017 at 7:50 am</a>		</div>

		<p>Raymond:  There&#8217;s that time machine you always wanted!  The Alpha AXP processor implements it!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1306825">
				<div id="div-comment-1306825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170817-00/?p=96835#comment-1306825">
			August 18, 2017 at 7:58 am</a>		</div>

		<p>For atomic increment, I am familiar with how it&#8217;s done in IBM 370/390 assembler&#8230; and it&#8217;s fairly similar to what&#8217;s shown here. </p>
<p>BUT, I always wondered why a CPU can&#8217;t just implement an atomic increment&#8230; in hardware.  Why does the programmer need to write code to test the result to see if the increment happened?</p>
<p>I realize that the memory address is in memory; that is, it&#8217;s inside the memory chip and not inside the CPU.  Still, the requirement for an atomic increment is pretty common, so it seems that the CPU and the northbridge chipset and the microcode and the memory support chips could cooperate and implement an atomic increment without having the programmers go to all this trouble.</p>
<p>The same ought to be true for decrement, or decrement and test (for zero).</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1306826">
				<div id="div-comment-1306826" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170817-00/?p=96835#comment-1306826">
			August 18, 2017 at 7:59 am</a>		</div>

		<p>But then again, I&#8217;m not a chipset designer or a CPU designer.  :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1306835">
				<div id="div-comment-1306835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170817-00/?p=96835#comment-1306835">
			August 18, 2017 at 2:44 pm</a>		</div>

		<p>As Fabian pointed out, the reason these are left out isn&#8217;t because they are hard, but because they are inflexible (you can&#8217;t use them to build other *efficient* atomic operations) and use up a scarce resource: instruction codes.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1306925">
				<div id="div-comment-1306925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170817-00/?p=96835#comment-1306925">
			August 21, 2017 at 11:12 am</a>		</div>

		<p>Decrement and test for zero, implemented in hardware, would be great for building locks and related things.  (Although lock-free code is cool too.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>