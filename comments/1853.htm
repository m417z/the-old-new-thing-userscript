<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1104933">
				<div id="div-comment-1104933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Terrapin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140206-00/?p=1853#comment-1104933">
			February 6, 2014 at 7:21 am</a>		</div>

		<p>However, this is not documented to hold wrt. overlapped winsock sockets. Something about layered service providers possibly screwing this up? Or maybe not.. I, for one, have a fail-safe mechanism in my winsock wrapper code that takes care of this eventuality.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1104943">
				<div id="div-comment-1104943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140206-00/?p=1853#comment-1104943">
			February 6, 2014 at 7:24 am</a>		</div>

		<p>@Terrapin: If you adopt the UNIX pattern of always using select on synchronous sockets you won&#39;t have that problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1104963">
				<div id="div-comment-1104963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140206-00/?p=1853#comment-1104963">
			February 6, 2014 at 7:30 am</a>		</div>

		<p>If only the rest of the system let you pretend that asynchronous operations completing synchronously actually finished asynchronously. But no.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1105053">
				<div id="div-comment-1105053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140206-00/?p=1853#comment-1105053">
			February 6, 2014 at 8:18 am</a>		</div>

		<p>@Ian:</p>
<p>The documentation: &quot;ReadFileEx ignores the OVERLAPPED structure&#39;s hEvent member&quot;.</p>
<p>Also, unlike ReadFile/WriteFile, the function doesn&#39;t return FALSE, if I/O is pending.</p>
<p>Not sure what value you found in ReadFileEx, other than ability to overcome a limit on number of handles in WaitForMultipleObject, which you would not need if you used I/O completion ports instead.</p>
<p>The design problem was completely self-inflicted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1105073">
				<div id="div-comment-1105073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140206-00/?p=1853#comment-1105073">
			February 6, 2014 at 8:28 am</a>		</div>

		<p>@alegr1: Yes, I could have used I/O completion ports, but why use a sledgehammer to crack a nut?</p>
<p>On your other point, I don&#39;t think the documentation ever explicitly states that HasOverlappedIoCompleted() uses the hEvent member.</p>
<p>Anyway, I posted the above in the hope it might be useful to someone. You don&#39;t have to use it yourself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1105113">
				<div id="div-comment-1105113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140206-00/?p=1853#comment-1105113">
			February 6, 2014 at 10:29 am</a>		</div>

		<p>@Joshua: select() is actually a quite nice thing. Unfortunately, it has linear complexity AFAIK. But hey, at least select() is one part of POSIX that Windows accurately implements while Linux doesn&#39;t!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1105143">
				<div id="div-comment-1105143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140206-00/?p=1853#comment-1105143">
			February 6, 2014 at 1:07 pm</a>		</div>

		<p>@Joker_vD: Really? Try passing a pipe handle to select() in Windows. It doesn&#39;t work.</p>
<p>AFAIK, the only part of select() on Linux not implemented is local disk asynchronous access, and that only because the local disk drivers themselves don&#39;t implement it. This can be a bear on optical media but is otherwise fine.</p>
<p>True, select() has linear complexity, but it is still the fastest way to do it on a single core. Eventually, you might have to have a few threads doing select() on subsets.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx odd alt thread-odd thread-alt depth-1" id="comment-1105153">
				<div id="div-comment-1105153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140206-00/?p=1853#comment-1105153">
			February 6, 2014 at 2:17 pm</a>		</div>

		<p>@Joshua:</p>
<p>I think he&#39;s referring to the fact that Linux, in some situations, reports a network file handle ready to read or write but later changes its mind.</p>
<p>I believe one of these situations happens when a network packet arrives but it later turns out that its checksum was invalid. Another one is when a second thread or process writes into the socket and fills the buffer.</p>
<p>There are excellent performance and code simplicity reasons for these things but it is true that Linux does not implement a true POSIX select or poll.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1105033">
				<div id="div-comment-1105033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140206-00/?p=1853#comment-1105033">
			February 6, 2014 at 7:59 am</a>		</div>

		<p>Perhaps only tangentally related to the article, but I&#39;ve noticed that HasOverlappedIoCompleted() doesn&#39;t work on asynchronous I/O begun with ReadFileEx() and WriteFileEx() &#8211; it returns TRUE even if the I/O has not completed. This is potentially a problem if you want to test whether the I/O has completed *even if the queued APC hasn&#39;t run yet* (because the thread hasn&#39;t entered an alertable state).</p>
<p>I had this problem once because a ReadFileEx() APC needed to call WriteFileEx() if and only if the previous WriteFileEx() had completed, and to drop the message otherwise. But this led to unnecessary dropped messages if the previous ReadFileEx() and WriteFileEx() completed in the &#39;wrong&#39; order so that the WriteFileEx() APC was second in the queue after the ReadFileEx() APC when the thread entered an alertable state. I solved it by queuing a &#39;begin write&#39; APC from the ReadFileEx() APC, rather than calling WriteFileEx() directly.</p>
<p>I still wonder if there was a better way though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1105193">
				<div id="div-comment-1105193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140206-00/?p=1853#comment-1105193">
			February 6, 2014 at 10:52 pm</a>		</div>

		<p>@Joshua: But select() works with descriptors, right? And files and pipes have handles in Windows, not descriptors â€” unlike sockets ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1105253">
				<div id="div-comment-1105253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard Cox</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140206-00/?p=1853#comment-1105253">
			February 7, 2014 at 7:44 am</a>		</div>

		<p>@Joker_vD Time to RTFM for select [<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms740141%28v=vs.85%29.aspx">msdn.microsoft.com/&#8230;/ms740141%28v=vs.85%29.aspx</a>]</p>
<p>&quot;Internally, socket handles in an fd_set structure are not represented as bit flags as in Berkeley Unix. Their data representation is opaque.&quot;</p>
<p>WinSock&#39;s select works with handles on Windows.</p>
<p>However it also does not say anywhere it works for handles that are not sockets. (Much like ReadFile doesn&#39;t work for all types of handles either, eg. a process handle).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1105273">
				<div id="div-comment-1105273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">B. Clay Shannon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140206-00/?p=1853#comment-1105273">
			February 7, 2014 at 8:36 am</a>		</div>

		<p>For some reason, the question/title makes me think of One Hand Clapping and &quot;If a tree falls in a forest, &#8230;.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>