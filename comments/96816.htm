<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1306485">
				<div id="div-comment-1306485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170815-00/?p=96816#comment-1306485">
			August 15, 2017 at 7:04 am</a>		</div>

		<p>Your comments to the right of the code, starting from the long example seem to be too small in terms of the good components vs ?s. Indeed, by the word example, we do seem to be reading an unaligned byte.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1306495">
				<div id="div-comment-1306495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170815-00/?p=96816#comment-1306495">
			August 15, 2017 at 7:06 am</a>		</div>

		<p>If there are eight characters representing a 64-bit value, then each character must represent a byte.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1306506">
				<div id="div-comment-1306506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170815-00/?p=96816#comment-1306506">
			August 15, 2017 at 7:11 am</a>		</div>

		<p>Yes. Obvious once one looks at it, but programmers are used to treating beginning-of-alphabet values as Hex nibbles, so it took me a second glance at least to realize that they were just placeholders for byte values.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1306505">
				<div id="div-comment-1306505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170815-00/?p=96816#comment-1306505">
			August 15, 2017 at 7:10 am</a>		</div>

		<p>Exercise answer: Single bytes rarely span more than one word.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-s-m-joshi-02 even thread-even depth-1 parent" id="comment-1306515">
				<div id="div-comment-1306515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170815-00/?p=96816#comment-1306515">
			August 15, 2017 at 8:30 am</a>		</div>

		<p>I imagine that the store to load forwarding issue is less severe on ALPHA compared to x86 &#8211; as there are no memory operands.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-s-m-joshi-02 odd alt depth-2 parent" id="comment-1306525">
				<div id="div-comment-1306525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170815-00/?p=96816#comment-1306525">
			August 15, 2017 at 8:39 am</a>		</div>

		<p>Also I think because ALPHA has a weak memory model so it can reorder memory operations more freely</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1306565">
				<div id="div-comment-1306565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170815-00/?p=96816#comment-1306565">
			August 15, 2017 at 10:11 pm</a>		</div>

		<p>Not even the Alpha allows a single core to observe <i>its own stores</i> out of order. The Alpha&#8217;s weak memory model affects visibility of memory operations to external agents (other cores, devices on the bus etc.), not to the core itself.</p>
<p>Pretty much every architecture short of explicitly exposed-pipeline VLIWs (very uncommon outside of DSPs and special-purpose devices) requires any earlier store in program order on the same core to be visible to later load instructions, for the simple reason that not doing this effectively makes a particular store-to-load latency part of the architecture spec, greatly complicating all later attempts to change the microarchitecture of load/store units.</p>
<p>Memory operands or not doesn&#8217;t really have an impact here; whether you allow memory operands to non-load/store instructions affects the complexity of your instruction decoding and internal scheduling (and also makes a difference for code density), but it does not substantially change the design of the load/store units themselves.</p>
<p>One final remark: current x86s reorder memory operations <i>very</i>freely. The x86 memory model doesn&#8217;t say that CPUs are not allowed to reorder loads or stores quite freely; it says they&#8217;re not allowed to get caught doing it by an outside observer, which is a substantial and very important difference. :)</p>
<p>What x86s end up doing is execute loads and stores whenever it suits them, but a) internally keep track of their dependencies on the current core (this is just a necessary ingredient for any core that does out-of-order execution and not specific to x86), b) keep track of any external events (loads and stores to addresses that there are pending operations for) that might result in the internal reordering becoming visible to the outside. x86s are only on their best behavior when they know someone is watching. :) CPUs for other architectures also do this, but only need to enforce weaker rules, and therefore need to say &#8220;nuh-uh, that sequence of events violates the rules, cancel and try that again&#8221; less often.</p>
<p>x86s more stringent rules make the internal dependency tracking harder to design and validate, but no matter what the memory model is, the vast majority of memory operations executed doesn&#8217;t have any external agents loading from or storing to the same cache line while they&#8217;re in-flight, and hence can be freely reordered without anyone being the wiser.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-s-m-joshi-02 odd alt depth-4" id="comment-1306605">
				<div id="div-comment-1306605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170815-00/?p=96816#comment-1306605">
			August 16, 2017 at 10:13 am</a>		</div>

		<p>Thank you very much for your excellent explanation.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1306545">
				<div id="div-comment-1306545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170815-00/?p=96816#comment-1306545">
			August 15, 2017 at 12:00 pm</a>		</div>

		<p>Frankly, so far all articles on Alpha made me glad that I don&#8217;t have to deal with it at all on any level.</p>
<p>So much extra code&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle odd alt depth-2 parent" id="comment-1306555">
				<div id="div-comment-1306555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170815-00/?p=96816#comment-1306555">
			August 15, 2017 at 12:54 pm</a>		</div>

		<p>To be fair, it&#8217;s all stuff that the compiler would&#8217;ve abstracted away anyway.  Manually assembling Windows code is not really a recommended practice for developing software.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1307425">
				<div id="div-comment-1307425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170815-00/?p=96816#comment-1307425">
			August 28, 2017 at 1:11 am</a>		</div>

		<p>But still stuff everyone involved in bringing up a system would need to know about.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>