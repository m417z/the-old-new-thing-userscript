<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1160083">
				<div id="div-comment-1160083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160083">
			November 5, 2014 at 7:45 am</a>		</div>

		<p>That&#39;s very childish mentality. &quot;If not following rules doesn&#39;t cause crash most of the time, it&#39;s OK to not follow rules&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1160103">
				<div id="div-comment-1160103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160103">
			November 5, 2014 at 7:54 am</a>		</div>

		<p>&#8230;and then a rogue injected DLL patches SetEvent (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2014/10/31/10568872.aspx">blogs.msdn.com/&#8230;/10568872.aspx</a>), expecting it to receive only event handles&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1160113">
				<div id="div-comment-1160113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160113">
			November 5, 2014 at 8:02 am</a>		</div>

		<p>OK, leaving the jokes aside: the call crosses a security barrier (the userspace/kernel barrier), so we can reasonably expect the handle type to be checked there. We could postulate a user-only implementation of SetEvent, but that would not work if the handle crosses a security barrier (between processes with different permissions, for instance), so we can reasonably expect it to always cross the userspace/kernel barrier.</p>
<p>Which means we can reasonably expect it to always return an invalid handle error, without doing anything with the handle. That, then, means the SetEvent call can be replaced by a small stub function which returns an error and does nothing. Given that they do not check the error returned by the function (they only found it via Application Verifier), the whole SetEvent call is a NOP.</p>
<p>If you have code in your program which is a guaranteed NOP, you&#39;re doing something wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1160143">
				<div id="div-comment-1160143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bcs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160143">
			November 5, 2014 at 9:11 am</a>		</div>

		<p>&quot;It&#39;s going to cost $10M to fix this and deploy the patch to all the off net costumer sites. We don&#39;t know of any failures it&#39;s caused. Is this a critical issue or can we deploy it with the next release?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1160153">
				<div id="div-comment-1160153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160153">
			November 5, 2014 at 9:24 am</a>		</div>

		<p>We need a &#39;customer-speak&#39; series analogous to the &quot;microspeak&quot; articles.</p>
<p>&quot;But the code works well&quot; == &quot;We didn&#39;t check the return code&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1160163">
				<div id="div-comment-1160163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EduardoS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160163">
			November 5, 2014 at 9:43 am</a>		</div>

		<p>The SetEvent function returns a BOOL (or is documented as such) the error code comes from GetLastError</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1160173">
				<div id="div-comment-1160173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160173">
			November 5, 2014 at 9:44 am</a>		</div>

		<p>Yes, and the BOOL value is the &#39;return code&#39; &#8212; the return is encoded as TRUE for success and FALSE for failure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1160183">
				<div id="div-comment-1160183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Z</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160183">
			November 5, 2014 at 10:08 am</a>		</div>

		<p>Raymond, do you ever get the impulse to grab these people by their shirt lapels and shake them back and forth until their head pops off? Seriously, what would cause someone to think this was a good idea?</p>
<p>&quot;Pray tell, Mr Babbage, if you put the wrong numbers into the machine, will the right answers come out?&quot; &quot;&#8230;&#8230;..&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1160193">
				<div id="div-comment-1160193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160193">
			November 5, 2014 at 10:18 am</a>		</div>

		<p>@Paul Z: The first thing that sprang to mind was the Babbage quote as well. Wouldn&#39;t it be nice if some independent panel could just forbid some people to go anywhere near code? That person clearly shouldn&#39;t make their living by programming.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1160203">
				<div id="div-comment-1160203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160203">
			November 5, 2014 at 10:45 am</a>		</div>

		<p>This is why I love the SetProcessMitigationPolicy(ProcessStrictHandleCheckPolicy) mode. &nbsp;Pass a bad handle, and you crash instead of other undefined behavior.</p>
<p>Unfortunately, I can&#39;t recommend its use in released products: too much third-party software injects DLLs into every process, and taking your application down when another company&#39;s product is misbehaving makes you look bad.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1160213">
				<div id="div-comment-1160213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160213">
			November 5, 2014 at 11:46 am</a>		</div>

		<p>Myria: I&#39;m not sure exactly how ProcessStrictHandleCheckPolicy works, but I don&#39;t think it applies in this situation. It sounds like it raises exceptions for values that aren&#39;t handles in your process (STATUS_INVALID_HANDLE), whereas this situation just involved passing a valid handle of the wrong kind (STATUS_OBJECT_TYPE_MISMATCH).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1160223">
				<div id="div-comment-1160223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160223">
			November 5, 2014 at 11:59 am</a>		</div>

		<p>If they&#39;re passing a handle to a WaitableTimer to SetEvent, then they&#39;re probably trying to manually trigger a periodic timer. My guess is that the code works well because the timer automatically fires before they notice that the manual trigger failed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1160233">
				<div id="div-comment-1160233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160233">
			November 5, 2014 at 2:07 pm</a>		</div>

		<p>SetEvent(INVALID_HANDLE_VALUE) is still safe, right? (Yes I know it should error, that&#39;s not the point.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1160243">
				<div id="div-comment-1160243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bcs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160243">
			November 5, 2014 at 3:19 pm</a>		</div>

		<p>&quot;It&#39;s going to cost $10M to fix this and deploy the patch to all the off net costumer sites. We don&#39;t know of any failures it&#39;s caused. Is this a critical issue or can we deploy it with the next release?&quot;</p>
<p>It sounds critical to me.</p>
<p>What you need to do urgently is identify what causes it and how to fix it. You can then try to guess how likely it is that you&#39;ll SetEvent the wrong event and whether the cost of fixing those situations where it does is more or less than the $10M.</p>
<p>None of those questions can be answered by Microsoft.</p>
<p>Microsoft aren&#39;t going to give you gambling tips. The developers should know more about how the software works than anyone, if they don&#39;t then you have no hope and this problem isn&#39;t likely to be your largest one. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1160263">
				<div id="div-comment-1160263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160263">
			November 5, 2014 at 4:16 pm</a>		</div>

		<p>About the first thing the kernel does for APIs that supply a handle, it calls ObReferenceObjectByHandle. One of the arguments is an object type. If the handle refers to the wrong object type, the function fails right there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher odd alt thread-odd thread-alt depth-1" id="comment-1160283">
				<div id="div-comment-1160283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160283">
			November 5, 2014 at 4:30 pm</a>		</div>

		<p>They&#39;re likely right that it works well.</p>
<p>Case 1: &nbsp;Timer goes off before SetEvent &#8212; Wait resumes and does whatever. &nbsp;This is an expected case, and so it probably works.</p>
<p>Case 2: &nbsp;Timer goes off after SetEvent. &nbsp;While SetEvent failed to signal the waiting handle, when the timer goes off, it will do so. &nbsp;This will be indistinguishable to the code in the Wait statement from if SetEvent had actually done the signal.</p>
<p>And so the sole impact is&#8230;</p>
<p>&#8230;the code takes longer to run.</p>
<p>It will pass any unit test of the two threads independently.</p>
<p>It will pass any unit test of the two threads together.</p>
<p>It&#39;ll just be a little slow.</p>
<p>I&#39;d define that as &quot;works great,&quot; depending on how close the timer is set to the length of the operations being defined.</p>
<p>Which then, leads into their question&#8230;</p>
<p>So they have this app that works great and passes their tests, but App Verifier is saying &quot;wait, wait, wait, you made an error here.&quot; &nbsp;And so they&#39;re asking Microsoft, because everything they expect would happen if the code worked is actually happening. &nbsp;Their, incorrect but consistent with most of the Windows API, thought was that the timer event derived from AutoResetEvent or w/e, and then just added some functionality to it &#8212; and therefore they should be able to call a base class method in order to signal it.</p>
<p>Most places in Windows actually allow that &#8212; this spot doesn&#39;t.</p>
<p>And so they&#39;re effectively asking why they can&#39;t pass a derived class to a function expecting a base class, because they&#39;ve misunderstood the class graph in this region of the API.</p>
<p>I think there&#39;s a world of difference there between that, and passing &#8212; for example &#8212; outright bad data. &nbsp;Because it&#39;s a C API, the compiler and headers are limited in how much help they can give you in catching this. &nbsp;But effectively, it&#39;s just a misunderstanding of a class graph, and not some dire programming error revealing the original requestor&#39;s lack of an understanding of basic computer science.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1160133">
				<div id="div-comment-1160133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160133">
			November 5, 2014 at 9:08 am</a>		</div>

		<p>@Cesar: &quot;If you have code in your program which is *at best* a NOP, you&#39;re doing something wrong.&quot;</p>
<p>Raymond has a gift for describing what seems like a harmless bug in the first paragraph, then explaining why it&#39;s a true WTF in the next 3-4.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1160273">
				<div id="div-comment-1160273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160273">
			November 5, 2014 at 4:25 pm</a>		</div>

		<p>Worth noting that the SetEvent API *happens* to call into the kernel and is thus safe, rather than being *documented* as being safe when passed an invalid handle.</p>
<p>It is entirely plausible that a future version of Windows will, in fact, do user-mode caching of data in such a way that passing the wrong handle value as a parameter will cause memory corruption in the process.</p>
<p>It is undefined behavior to send a non-live Event parameter to SetEvent. </p>
<p>And when you invoke undefined behavior, possible outcomes include &quot;it seems to work correctly&quot;, &quot;it sets some other guy&#39;s events&quot; and &quot;it causes a memory corruption, and the clever hacker on the network that triggered it uses that memory corruption to take control of your process, install malware and take your credit card numbers&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1160303">
				<div id="div-comment-1160303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Count Zero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160303">
			November 6, 2014 at 1:04 am</a>		</div>

		<p>@Paul Z &#8211; At first I was almost sure that what happened is not what you assume to be happened. I have seen situations at one of my former workplaces &nbsp;where sending a patch/bugfix out was practically not possible (because of reasons I would(/could) not describe here), and when an error like the described is found in the sources &#8211; which was quite rare, but occured once or twice &#8211; the PM asked all developers to predict what problems could an error like that cause IRL. I instantly thought that this question is indicated by a scenario like that until I have read the comment of @Gabe about &quot;they&#39;re probably trying to manually trigger a periodic timer&quot;, a case where the above question only shows incompetence.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1160323">
				<div id="div-comment-1160323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160323">
			November 6, 2014 at 2:32 am</a>		</div>

		<p>Were you amazed that someone actually used Application Verifier?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hikari even thread-even depth-1" id="comment-1160313">
				<div id="div-comment-1160313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Chris+Crowther' rel='external nofollow' class='url'>Chris Crowther</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160313">
			November 6, 2014 at 1:31 am</a>		</div>

		<p>*blinks*</p>
<p>Things like this make me think I&#39;m actually a much better programmer than I assume I am normally.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1160773">
				<div id="div-comment-1160773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160773">
			November 6, 2014 at 12:33 pm</a>		</div>

		<p>Ah, the &quot;works by accident&quot;, most vicious of all kinds of &quot;it works&quot;&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1160893">
				<div id="div-comment-1160893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160893">
			November 6, 2014 at 5:37 pm</a>		</div>

		<p>&quot;Say, if I provide wrong input, will I still get the right output?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1160983">
				<div id="div-comment-1160983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141105-00/?p=43693#comment-1160983">
			November 7, 2014 at 12:19 am</a>		</div>

		<p>@Dave Bacher: even if you wanted to reframe things in terms of classes, this doesn&#39;t get around the fact that a waitable timer is not an event, or vice versa. They both happen to be synchronization objects, that&#39;s all. I really don&#39;t see the difference between &quot;misunderstanding a class graph&quot; and &quot;passing a non-event to SetEvent()&quot;, other than that the latter sounds like the fundamental error it is. If anything, it shows that pretending that an API works a certain way and letting ideas mushroom out of that is an impediment, not a substitute for actually understanding it.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>