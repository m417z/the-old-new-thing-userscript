<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1173693">
				<div id="div-comment-1173693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150130-00/?p=44793#comment-1173693">
			January 30, 2015 at 7:16 am</a>		</div>

		<p>Unless there is something I&#39;m completely missing, the code actually only create a half-gigabyte file mapping. I think your call to CreateFileMapping() should pass ONE_GIGABYTE instead of VIEW_SIZE to match the explanatory text.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173743">
				<div id="div-comment-1173743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150130-00/?p=44793#comment-1173743">
			January 30, 2015 at 8:14 am</a>		</div>

		<p>&quot;Note that most error checking has been elided for expository purposes.&quot;</p>
<p>Everyone always says that. &nbsp;Have you ever considered putting in all the error checking, to demonstrate _that_?</p>
<div class="post">[<em>That was my old policy and <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/07/20/188696.aspx">it resulted in code that people pointed to and laughed at because it was so wordy and heavily indented</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173763">
				<div id="div-comment-1173763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150130-00/?p=44793#comment-1173763">
			January 30, 2015 at 8:57 am</a>		</div>

		<p>Mostly that would demonstrate what a pain error codes are and why I personally prefer exceptions. &nbsp;(Been trawling through a bunch of COM examples lately, and I am completely sick of code that looks like this</p>
<p>hr = DoSomeCOMThing()</p>
<p>if (!SUCCEEDED(hr))</p>
<p> &nbsp; &nbsp;goto CleanupBlock7;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1173783">
				<div id="div-comment-1173783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150130-00/?p=44793#comment-1173783">
			January 30, 2015 at 9:33 am</a>		</div>

		<p>But what happens, if you have a reserved section mapped in two processes, and one process commits some memory to it. Does that memory become accessible in the second process without it having to commit?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jan-ringos even thread-even depth-1" id="comment-1173793">
				<div id="div-comment-1173793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jan+Ringo%C5%A1' rel='external nofollow' class='url'>Jan Ringo≈°</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150130-00/?p=44793#comment-1173793">
			January 30, 2015 at 9:55 am</a>		</div>

		<p>I am particularly curious about the overhead of File Mapping Objects when only a few pages are reserved/committed. That&#39;s because I am using this technique (67 kB big mapping object) to share some data (3 kB) and to pass filenames around in the remaining 1 kB which can grow up to 64 kB in case someone decides to be clever with their directory depth and naming.</p>
<p>But maybe I care about memory usage too much.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173803">
				<div id="div-comment-1173803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Torkell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150130-00/?p=44793#comment-1173803">
			January 30, 2015 at 10:13 am</a>		</div>

		<p>&lt;I&gt;For some reason, the Commit size in the Details pane counts the view as commitment, even though the view consists almost entirely of reserved rather than committed pages&lt;/I&gt;</p>
<p>My guess is that it counts as commitment in that the kernel has guaranteed that there is enough memory available for the entire 1GB. It may not have actually allocated any physical pages or pagefile space yet, but it&#39;s promised that it will always be able to do so. I think copy-on-write mappings do something similar in that it makes sure there&#39;s enough space available for the copied pages, even if they&#39;re never needed.</p>
<p>Compare with Linux where depending on configuration it&#39;s possible for allocations to succeed even if there isn&#39;t enough memory available (part of the reason for this is to allow the fork/exec model to work even if there isn&#39;t enough actual memory to fork the parent process &#8211; forking uses copy-on-write semantics). This works as long as you don&#39;t try to, say, fork a large process (over half your total memory) and then have the child change all its copied pages &#8211; if you do, then the out-of-memory killer starts up and picks a process to blat. It doesn&#39;t always choose wisely (one I saw was when it killed cron &#8211; we only found out about it several months later when the log partition filled as log files weren&#39;t being rotated anymore!).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173813">
				<div id="div-comment-1173813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150130-00/?p=44793#comment-1173813">
			January 30, 2015 at 10:21 am</a>		</div>

		<p>Talking about little-known features of shared memory blocks, is there any way to replace a shared memory blocked mapped at an address with another shared memory block mapped at the same address? (What I mean is a combination of UnmapViewOfFile and MapViewOfFileEx without the risk of some other part of the process taking away the address between the calls.)</p>
<p>This could be very useful for moving large portions of memory or restoring earlier versions of memory without transferring any data.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173863">
				<div id="div-comment-1173863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150130-00/?p=44793#comment-1173863">
			January 30, 2015 at 12:53 pm</a>		</div>

		<p>@Raymond, SimonRev: Yeah I feel your pain. Makes me love blocks that can&#39;t fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173933">
				<div id="div-comment-1173933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150130-00/?p=44793#comment-1173933">
			February 1, 2015 at 2:02 pm</a>		</div>

		<p>@rs: How scary of a solution you want? I&#39;ve got one that would probably make Raymond recoil in horror.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173973">
				<div id="div-comment-1173973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nitpicker (Corner?)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150130-00/?p=44793#comment-1173973">
			February 1, 2015 at 11:05 pm</a>		</div>

		<p>Yes Joshua, more horror please! :)</p>
<p>(blahblahblah, avoid spam filter)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1174013">
				<div id="div-comment-1174013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150130-00/?p=44793#comment-1174013">
			February 2, 2015 at 8:27 am</a>		</div>

		<p>Disclaimer: This should work. I haven&#39;t tried it. It&#39;s only really interesting as a use case of SuspendThread and ResumeThread in &quot;normal&quot; development as opposed to manipulating somebody else&#39;s process.</p>
<p>Need two DLLs (henseforth known as A and B). B has no other purpose than being a helper for A and so nobody links against it. B is linked against A. Raymond calls this the Hired Lacky. We are going to be using the hired lacky to run code with the loader lock held.</p>
<p>Exported API in A ReplaceMappedViewOfFile does the following:</p>
<p>1. Take lock.</p>
<p>2. Place call parameters in global variables.</p>
<p>3. Load DLL B with LoadLibrary.</p>
<p>In B&#39;s DllMain:</p>
<p>4. Stop all threads but this one. This requires CreateToolhelp32Snapshot, Thread32First, Thread32Next, and NtQuerySystemInformation (to tell if a thread is suspended already), and SuspendThread. New threads can&#39;t start because we have the loader lock.</p>
<p>5. UnmapViewOfFile (reading global variables stashed in #2)</p>
<p>6. MapViewOfFile</p>
<p>7. Call ResumeThread on all threads suspended in step 4.</p>
<p>8. Return for DllMain</p>
<p>9. FreeLibrary for DLL B.</p>
<p>10. Release lock.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1174093">
				<div id="div-comment-1174093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nitpicker (Corner?)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150130-00/?p=44793#comment-1174093">
			February 2, 2015 at 12:24 pm</a>		</div>

		<p>Wow, that IS horrible. I&#39;ll wake up in a cold sweat at 1am tomorrow morning. :)</p>
<p>I was envisaging the sledgehammer approach of reserving as much high address space as possible, and then mapping the view with MEM_TOPDOWN &#8211; assuming you can even call MapViewOfFile with that flag&#8230; </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1174123">
				<div id="div-comment-1174123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150130-00/?p=44793#comment-1174123">
			February 2, 2015 at 6:31 pm</a>		</div>

		<p>I wish that MapViewOfFileEx had as many options as the real underlying API, NtMapViewOfSection. &nbsp;Mapping into other processes, MEM_TOP_DOWN, inheritance control and forcing addresses below 2 GB are four features that NtMapViewOfSection has that MapViewOfFileEx does not. &nbsp;NtMapViewOfSection is semi-documented; see its &quot;Zw&quot; variant ZwMapViewOfSection in the &quot;Windows Dev Center &#8211; Hardware&quot; area of MSDN.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>