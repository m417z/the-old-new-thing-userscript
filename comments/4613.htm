<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1051643">
				<div id="div-comment-1051643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051643">
			April 19, 2013 at 8:06 am</a>		</div>

		<p>Ewww.</p>
<p>GetOpenFileName should work without the caller initializing COM. It happens to be invokable from higher languages that cannot invoke COM.</p>
<p>Picking up the implicit MTA in that case is very bad. Worse, if it came from an AppInit DLL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1051663">
				<div id="div-comment-1051663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RPC_E_CHANGED_MODE</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051663">
			April 19, 2013 at 8:31 am</a>		</div>

		<p>I&#39;m pretty sure you can&#39;t initialise apartment threaded once you&#39;ve initialised (or been initialised) multithreaded. Also, prepare for fun if your threads still call CoUninitialize after a failed CoInit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1051673">
				<div id="div-comment-1051673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051673">
			April 19, 2013 at 8:38 am</a>		</div>

		<p>Raymond, does it matter when CoInitialize is called in relation to thread start? &nbsp;That is, if thread 1 calls CoInitializeEx(COINIT_MULTITHREADED) and thread 2 has already started, does thread 2 suddenly become part of the multithreaded apartment?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1051683">
				<div id="div-comment-1051683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051683">
			April 19, 2013 at 9:36 am</a>		</div>

		<p>Peter: You can probably answer the question yourself by thinking about how it could possibly work.</p>
<p>In order for the thread start order to matter, either starting a thread would have to execute some code check for an existing MTA and store that information somewhere, or the CoInitializeEx would have to store the time it created an MTA to be compared with the thread start time.</p>
<p>In order for thread start order to not matter, the object creation code can simply check to see if there is currently an MTA.</p>
<p>Hopefully the answer is obvious given the options.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1051653">
				<div id="div-comment-1051653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051653">
			April 19, 2013 at 8:07 am</a>		</div>

		<p>Well, your thread doesn&#39;t do that *explicitly*, but through the miracle of the implicit MTA created by another thread it&#39;s now part of an MTA nevertheless. To fix the problem, explicitly call CoInitializeEx() with COINIT_APARTMENTTHREADED on all threads that need to call shell functions, even if they do not otherwise use COM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1051743">
				<div id="div-comment-1051743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051743">
			April 19, 2013 at 4:31 pm</a>		</div>

		<p>@RPC_E_CHANGED_MODE:</p>
<p>That is only true for previous calls to CoInitialize(Ex) (referred to as CoInit from now on).</p>
<p>The implicit MTA would work along the lines of if no call to CoInit has taken place, then the creation of the first object would in essence call CoInit and mark the thread as part of the MTA. This is different from a thread that has never called CoInit or created any objects before calling CoInit to initialise the thread as an STA and failing. In the latter case, the CoInit would succeed and set the thread to an STA with no issues because COM has yet to be initialised on that thread. It really has to be this way around, otherwise there is potential for a lot of breakage, especially when using things like the common dialogs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1051763">
				<div id="div-comment-1051763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051763">
			April 19, 2013 at 6:35 pm</a>		</div>

		<p>The fact that you need to even know about COM in order to properly use the common dialogs library (a library that has existed since before COM did) is stupid IMO.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1051773">
				<div id="div-comment-1051773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051773">
			April 19, 2013 at 8:36 pm</a>		</div>

		<p>Ah, of course: you&#39;re right. I&#39;ve never explicitly mixed threading models in the same app, so forgot about the scenario. Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1051853">
				<div id="div-comment-1051853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051853">
			April 22, 2013 at 3:51 am</a>		</div>

		<p>For .NET related note: WinForm/Console Projects created under VS2002 or 2003 always have [STAThread] attribute predefined in main() method (even after conversion to .NET v2 or above, don&#39;t know whether the conversion ignored this attribute or someone added it back later).</p>
<p>VS2005 or later have this removed from the default project template and use MTA as default.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-1051863">
				<div id="div-comment-1051863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051863">
			April 22, 2013 at 4:50 am</a>		</div>

		<p>@cheong00: Windows Forms has thread affinity and must initialize the main thread in an STA. I&#39;ve just checked: VS2008 (2.0 and 3.5), VS2010 (4.0) and VS2012 (4.5) C# Windows Forms projects all default to specifying [STAThread], as they should. I no longer have VS2005 installed.</p>
<p>Console projects do not default to [STAThread] in any version, so far as I&#39;m aware, though I haven&#39;t checked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1052023">
				<div id="div-comment-1052023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1052023">
			April 22, 2013 at 7:43 pm</a>		</div>

		<p>I see. It makes sense.</p>
<p>Not sure why the projects I&#39;m working on removed this attribute, though.</p>
<p>Btw, it&#39;s true that in .NET v2 or later it&#39;s defaulted to MTA if STAThread is not specified (from MSDN documentation for STAThreadAttribute).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052053">
				<div id="div-comment-1052053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stewart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1052053">
			April 23, 2013 at 3:25 am</a>		</div>

		<p>@Jonathan &#8211; You don&#39;t need to care about COM to use GetOpenFileName. If your app does not use COM at all, then GetOpenFileName will take care of things for you. The problem arises when your app already cares about COM, and has a thread which has already initialized the MTA. Then bad things will happen. Of course you may not know about this thread, which is where the risk comes in. In my opinion it is good practise for any thread which shows UI to always initialize itself an STA before creating any UI. That way you&#39;re safe since you should only be calling GetOpenFileName on a UI thread anyway. As has already been said, WinForms does this already in default apps.</p>
<p>@Mike &#8211; Console projects cannot initialize to STAThread by default, because console applications do not typically pump messages on their main thread, and it is illegal to have an STA thread which does not pump messages. If they defaulted to STA they&#39;d be broken.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>