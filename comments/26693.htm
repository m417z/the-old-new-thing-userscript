<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-508463">
				<div id="div-comment-508463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070525-00/?p=26693#comment-508463">
			May 25, 2007 at 7:25 pm</a>		</div>

		<p>Ray, is there a, uh, deeper motivation for today&#8217;s entry ? Or was this (next?) &nbsp;in your &#8216;list of articles I plan on writing&#8217; ?</p>
<div class=post>[<i>Somebody asked about it, so I figured I&#8217;d answer. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-508473">
				<div id="div-comment-508473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yoni</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070525-00/?p=26693#comment-508473">
			May 25, 2007 at 7:35 pm</a>		</div>

		<p>You know, while programming in Win32, I&#8217;ve come across many cases where it seemed as if a certain interface&#8217;s design is influenced directly by another part of the operating system. Sure, the UI team, the kernel team, and the Internet Explorer team are all working on the OS together. But sometimes it feels like I&#8217;m disadvantaged that they can have such a direct effect on each other, and I can&#8217;t add functions to kernel32 as I wish.</p>
<p>GetQueuedCompletionStatus could easily have had 1 extra ULONG_PTR-sized parameter, like most callback mechanisms do. But it has 3, because in the part of the operating system that sometimes posts queued completion status, this way is more convenient.</p>
<p>Just my ranting&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-508513">
				<div id="div-comment-508513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070525-00/?p=26693#comment-508513">
			May 26, 2007 at 6:10 am</a>		</div>

		<p>I&#8217;m happy so long as there is at least one void* (or equivalent typedef such as ULONG_PTR) argument that we can specify. If there&#8217;s more than one then it doesn&#8217;t get in the way. If there are zero, however, then things are painful.</p>
<p>I recently had to use the EnumSystemCodePages API which calls your callback function with just a string. What should&#8217;ve been 5 lines of code turned into a wrapper class with critical sections that enumerated into a static vector and then copied the results to the calling thread&#8217;s vector. It&#8217;s strange that there isn&#8217;t an EnumSystemCodePagesEx which fixes the obvious mistake. I guess the API doesn&#8217;t get used enough to warrant it or something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-508633">
				<div id="div-comment-508633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070525-00/?p=26693#comment-508633">
			May 28, 2007 at 10:53 am</a>		</div>

		<p>Leo: you can use TLS when you have no other way of passing data to a synchronous callback</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-509013">
				<div id="div-comment-509013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://kbupdate.info/' rel='external nofollow' class='url'>kb</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070525-00/?p=26693#comment-509013">
			May 29, 2007 at 3:30 pm</a>		</div>

		<p>Is there a way to query the number of items currently waiting in the queue?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-509103">
				<div id="div-comment-509103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070525-00/?p=26693#comment-509103">
			May 29, 2007 at 4:46 pm</a>		</div>

		<p>kb &#8212; No, since as soon as the query function returns, the data is old and probably invalid.</p>
<p>Any thread can post to the queue, and any thread (in theory anyway) can read from the queue. &nbsp;So the thread that asks the size of the queue may be running concurrently with threads that are modifying its size.</p>
<p>The only possible good reason for asking the queue how large it is (that I can think of) is if you need to know when it&#8217;s empty to know when your work is done. &nbsp;You&#8217;d have to be sure to post all the items to it before you start asking its length, though.</p>
<p>But that problem is (IMO) better solved by having a single &quot;end of queue&quot; item that gets posted to the queue at the end, and then having the worker thread(s) signal a &quot;work finished&quot; event when they pull this item off. &nbsp;The thread interested in the queue&#8217;s state can wait on this event. &nbsp;(Then you don&#8217;t care how often the queue&#8217;s count goes to zero, either: you won&#8217;t get signaled until the last item is consumed.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>