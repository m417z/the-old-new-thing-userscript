<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1065603">
				<div id="div-comment-1065603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1065603">
			July 5, 2013 at 8:18 am</a>		</div>

		<p>Presumably the customer was simply wrong in their assertion that some Microsoft DLLs obtain their DLLs from the current directory &#8211; since the current directory comes after the application directory and the various system directories in the search order.</p>
<p>Maybe they thought Microsoft were warning them of an &#39;application directory&#39; vulnerability? It certainly looks like this is what they investigated, regardless of what Microsoft actually told them. I doubt it was deliberate; more likely incompetence or too many people in a game of Chinese whispers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1065633">
				<div id="div-comment-1065633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1065633">
			July 5, 2013 at 1:34 pm</a>		</div>

		<p>&gt; Chinese whispers</p>
<p>Otherwise known as telephone.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1065693">
				<div id="div-comment-1065693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1065693">
			July 6, 2013 at 5:36 am</a>		</div>

		<p>I&#39;m more interested in the potential current directory attack that MVR discovered.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1065763">
				<div id="div-comment-1065763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1065763">
			July 6, 2013 at 9:30 pm</a>		</div>

		<p>I wish the Windows kernel team would listen to your advice, Raymond. =) &nbsp;On of the things I noticed about Windows 8.1 Preview is that the kernel team flagged csrss.exe as a Protected Process to try to prevent attacks on the kernel from programs running as LocalSystem. &nbsp;Protecting the kernel from LocalSystem seems ridiculous from the &quot;other side of this airtight hatchway&quot; perspective.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1065873">
				<div id="div-comment-1065873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1065873">
			July 8, 2013 at 10:12 am</a>		</div>

		<p>@Myria: If you ever ran code in CSRSS you know why it&#39;s protected. Besides the fact there are syscalls that don&#39;t have any argument protection other than caller = CSRSS (including clobbering kernel memory space).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1066043">
				<div id="div-comment-1066043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1066043">
			July 9, 2013 at 5:15 am</a>		</div>

		<p>The referenced MSDN entry Safe DLL Searching (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/ms682586">msdn.microsoft.com/&#8230;/ms682586</a>) is nearly unreadable. It contains eight somewhat different listings of search steps without proper differentiation when which of them applies.</p>
<p>Nowhere is some explanation why the current directory is search at all, even when SafeDllSearchMode is enabled&#8230;</p>
<p>Also, I have to assume that this fragment &quot;If a DLL with the same module name is already loaded in memory, &#8230;&quot; means &quot;If a DLL with the same module name is already loaded into THE PROCESS, &#8230;&quot;. Is this correct?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1066063">
				<div id="div-comment-1066063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudo-Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1066063">
			July 9, 2013 at 7:27 am</a>		</div>

		<p>If the application directory is the application bundle, then why do Windows Store apps for Windows 8.1 have .appxbundle package, or simply app bundle (<a href="http://msdn.microsoft.com/en-us/library/windows/apps/bg182885.aspx" rel="nofollow" target="_new">msdn.microsoft.com/&#8230;/bg182885.aspx</a>)?</p>
<div class="post">[<em>You are confusing two unrelated concepts that happen to use the same name. I&#39;m responding to &quot;Why doesn&#39;t Windows have application bundles, like the Mac?&quot; The application bundles I&#39;m referring to in this article are Mac-style application bundles, which in Windows is simply &quot;directories&quot;. The MSDN article is talking about an unrelated concept in Windows Store application packaging that happens to have chosen the same name. I&#39;m actually surprised you found this confusing, but now that you point it out, I guess I&#39;ll have to change it to &quot;the directory is the Windows equivalent of what on the Mac is called an application bundle&quot; which is a lot more awkward. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1066083">
				<div id="div-comment-1066083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1066083">
			July 9, 2013 at 8:57 am</a>		</div>

		<p>@Hm</p>
<p>Loading a new copy of the DLL every single time any program ever asks for it would be horribly inefficient, wouldn&#39;t you agree? You&#39;d have to locate the DLL, allocate (and possibly page) memory, then load the DLL from disk. But there&#39;s already a copy available.</p>
<p>There are obviously some security checks (to keep you from being stuck with \malwareservermalwaremalicious.dll when you wanted %SystemRoot%System32relativelylessmalicious.dll).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1066183">
				<div id="div-comment-1066183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1066183">
			July 9, 2013 at 11:06 am</a>		</div>

		<p>Anon, then how do you make sure that never ever some util.dll is loaded by some other process before your process tries to load its own util.dll with the same module name, but being totally unrelated in every other aspect? This makes no sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1066193">
				<div id="div-comment-1066193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1066193">
			July 9, 2013 at 11:11 am</a>		</div>

		<p>Anon, of course should the OS not allocate the same read-only pages twice, but the module name without path cannot be the criterion, as stated in that MSDN article. It must really be the exact same disk file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1066213">
				<div id="div-comment-1066213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1066213">
			July 9, 2013 at 12:00 pm</a>		</div>

		<p>When an executable is loaded, it&#39;s opened for creating a file section. All processes that opened the same disk file will ultimately have the same cache pages mapped into their space, no matter what filename was used (it could be short filename or path components, or long, doesn&#39;t matter). As long as the file ID is the same (which is Windows equivalent of inode).</p>
<p>But if you want a shared data section, that&#39;s where fun starts. The shared data section is named based on the full pathname of the DLL. Long and short names don&#39;t match. (also, it&#39;s login-session local).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1066233">
				<div id="div-comment-1066233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1066233">
			July 9, 2013 at 12:25 pm</a>		</div>

		<p>@Alegr1, it would make sense if only pages backed up by the same dll file are shared across processes. But MSDN says &quot;If a DLL with the same module name is already loaded in memory, the system checks only for redirection and a manifest before resolving to the loaded DLL, no matter which directory it is in. The system does not search for the DLL.&quot; </p>
<p>This seems to indicate that the loader does not load the desired dll if some other ptocess has already loaded a dll with such name, even if this is not the file the application would load by its own regular search when it is the first process that tries to load this DLL (&quot;no matter which directory it is in&quot;).</p>
<p>If this is really done this way, I would call this very unsecure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1066243">
				<div id="div-comment-1066243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1066243">
			July 9, 2013 at 2:35 pm</a>		</div>

		<p>&quot;If a DLL with the same module name is already loaded in memory, the system checks only for redirection and a manifest before resolving to the loaded DLL, no matter which directory it is in. The system does not search for the DLL.&quot; </p>
<p>This statement talks about DLLs of the same process. The loader doesn&#39;t have means to check what DLLs are loaded into other processes, and check their manifests.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1066253">
				<div id="div-comment-1066253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1066253">
			July 9, 2013 at 2:38 pm</a>		</div>

		<p>&gt;it would make sense if only pages backed up by the same dll file are shared across processes.</p>
<p>The pages backed by the same file ARE shared across processes, because this is how file mapping works. Some pages are mapped as copy-on-write, which makes a separate copy once the page is modified by the loader. Other pages are read-NX-only, or read-execute-only.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1066313">
				<div id="div-comment-1066313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1066313">
			July 10, 2013 at 1:10 am</a>		</div>

		<p>Alegr1, &quot;ages backed by the same file ARE shared across processes&quot;. Yes, but this MSDN article claims that the loader reuses already-loaded DLLs (&quot;already loaded in memory&quot;), and therefore their code, before it has determined if this DLL is really the exact file requested by the application (&quot;no matter which directory it is in&quot;).</p>
<p>This seems incorrect behavior, or very bad documentation, or both, even if this is only done within the scope of a single process. How should I know if some shell extension (pulled-in by the File Open dialog) loads a DLL with a name which I&#39;m also using for some of my own DLLs?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1066363">
				<div id="div-comment-1066363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudo-Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1066363">
			July 10, 2013 at 6:45 am</a>		</div>

		<p>&quot;You are confusing two unrelated concepts that happen to use the same name&#8230;&quot;</p>
<p>I wasn&#39;t paying attention when I read those articles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1066463">
				<div id="div-comment-1066463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130705-00/?p=3883#comment-1066463">
			July 10, 2013 at 8:00 am</a>		</div>

		<p>&gt;How should I know if some shell extension (pulled-in by the File Open dialog) loads a DLL with a name which I&#39;m also using for some of my own DLLs?</p>
<p>Libraries loaded with two different full pathnames are loaded separately, even if their base filename is the same. Base filename matching is only done when only the filename is specified in LoadLibrary call.</p>
<p>The shell extensions need to use full paths in LoadLibrary call. This will prevent ambiguity. In any case, for libraries other than RTL, you better use the full path, if you want to save trouble.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>