<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (34)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-852403">
				<div id="div-comment-852403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852403">
			August 10, 2010 at 7:27 am</a>		</div>

		<p>Ok, I&#39;m curious: Since the blog software doesn&#39;t create anchors for comments, where do you get the numbers to put in your links?</p>
<p>Apart from that, it almost looks like you posted yesterdays article first so you&#39;d have some comments to refer to. Honi soit qui mal y pense.</p>
<div class="post">[<i>The comment numbers are available to me on the comment moderation control panel (which you don&#39;t get to see since you&#39;re not a moderator). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852423">
				<div id="div-comment-852423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852423">
			August 10, 2010 at 7:35 am</a>		</div>

		<p>To be fair, those people who said objects should be disposed when they go out of scope would have amended their suggestions to say when all object references have gone out of scope, had they been thinking of the differences between the two.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852433">
				<div id="div-comment-852433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852433">
			August 10, 2010 at 7:37 am</a>		</div>

		<p>I don&#39;t write managed code for living, but every CLR week is a pure masterpiece! Thanks Raymond!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852443">
				<div id="div-comment-852443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ashley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852443">
			August 10, 2010 at 7:47 am</a>		</div>

		<p>Whenever I have to deal with the pain of IDisposable in C#, I wish they had done it like C++CLI, where you can have something like automatic scope on variables, and the compiler takes care of calling the Dispose methods of all IDisposable fields in your Dispose method/destructor automatically.</p>
<p>This article has a few mistakes in it, but it talks about what I&#39;m talking about:</p>
<p><a rel="nofollow" target="_new" href="http://www.codeproject.com/KB/mcpp/cppclidtors.aspx" rel="nofollow">http://www.codeproject.com/&#8230;/cppclidtors.aspx</a></p>
<p>In my opinion, C++CLI got resource management in a GC language correct. &nbsp;However, which language my company uses isn&#39;t my choice. &nbsp;C# is great, but once you start having heavy usage of resources, it can be very painful, very quickly if you aren&#39;t careful.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852463">
				<div id="div-comment-852463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ashley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852463">
			August 10, 2010 at 7:50 am</a>		</div>

		<p>I meant to add, there is an explicit different in C++CLI between a reference (^) and the object itself. &nbsp;(Even if it&#39;s actually a handwave behind the scenes.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852483">
				<div id="div-comment-852483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852483">
			August 10, 2010 at 8:08 am</a>		</div>

		<p>&quot;Either you put using around all the things that you want auto-disposed&quot;</p>
<p>What if what you want to auto-dispose is held as a member variable, not a local variable? Then using can&#39;t be used &#8211; so the class has to implement IDisposable to call Dispose on its members &#8211; and so does every class that holds an instance of the initial class, repeat until every class that could transitively hold an IDisposable also implements IDisposable. That&#39;s more boiler plate code than replacing raw pointers with auto_ptr or shared_ptr, and it&#39;s more fragile. Then, of course, you still can&#39;t share instances that need to be deterministically disposed.</p>
<p>And you often can&#39;t do it without breaking the Liskov Substitution Principle or altering interfaces to be IDisposable.</p>
<p>Automatic memory management C# style (and it is C#, not the CLR &#8211; C++CLI does a far better job) is an obstacle that dramatically increases the difficulty of managing resources that aren&#39;t memory. Memory isn&#39;t the most important resource by a mile &#8211; it&#39;s fungible, so a small to moderate leak goes unnoticed, whereas if you leak e.g. a single file, your users will probably notice that they can no longer edit that file without restarting the application.</p>
<p>GC is fine for bashing together a small project, but once there&#39;s any resource except memory in play you&#39;re in trouble.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852493">
				<div id="div-comment-852493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ashley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852493">
			August 10, 2010 at 8:22 am</a>		</div>

		<p>@Joe</p>
<p>I did some analysis of the costs of having an IDisposable field in some classes in our product, and adding a single IDisposable field to one low level class caused 650+ classes that reference it as a field or reference a class that references it to require IDisposable. &nbsp;There were ~50 classes that referenced it directly, and it just kept expanding out from there.</p>
<p>All those classes would have to correctly call Dispose on it (or the referencing class) in their Dispose methods, and to have every instance of those classes in a using(&#8230;), etc&#8230; The amount of boilerplate code is just staggering, and the potential for simple mistakes/omissions is huge. &nbsp;Granted FxCop helps, but it&#39;s not perfect.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852503">
				<div id="div-comment-852503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gibwar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852503">
			August 10, 2010 at 8:28 am</a>		</div>

		<p>@Ashley &quot;where you can have something like automatic scope on variables, and the compiler takes care of calling the Dispose methods of all IDisposable fields in your Dispose method/destructor automatically.&quot;:</p>
<p>You still run into the same problem as before though. Take the following code:</p>
<p>internal class SomeClass : IDisposable {</p>
<p>&nbsp;// pretend the int needs to be disposed&#8230;</p>
<p>&nbsp;internal int SomeValue { get; private set; }</p>
<p>&nbsp;SomeClass() { this.val = -1; }</p>
<p>&nbsp;SomeClass CreateSomeClass(int newVal) {</p>
<p>&nbsp; &nbsp;SomeClass c = new SomeClass();</p>
<p>&nbsp; &nbsp;c.SomeValue = newVal;</p>
<p>&nbsp; &nbsp;return c;</p>
<p>&nbsp;}</p>
<p>&nbsp;protected override void Dispose() {</p>
<p>&nbsp; // pretend it does something</p>
<p>&nbsp;}</p>
<p>}</p>
<p>If there was automatic scope on variables the object you just created and returned would have been disposed of! If the GC started disposing of objects when they left the scope you&#39;d never be able to return an object and you&#39;d have to start using unsafe pointers as parameters to get objects out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852533">
				<div id="div-comment-852533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Oldfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852533">
			August 10, 2010 at 8:47 am</a>		</div>

		<p>Pierre B.: One problem with that is now creating an object that you want to be disposed at the end of scope looks identical, at the point of use, to creating a variable to one that doesn&#39;t lock any resource and can be disposed of at any time. &nbsp;So an unaware programmer could edit the code so that the ref-count isn&#39;t decremented appropriately (for example they might pass a file object back to the caller so that they could retrieve information from it, like path or error information). &nbsp;</p>
<p>This isn&#39;t as much of a problem in C++. &nbsp;It can happen with shared_ptrs, but these are actually used fairly rarely in my experience, so can be checked individually. &nbsp;Usually you&#39;d use an object directly on the stack, and if you wanted to pass it back you&#39;d use a copy (since this is simpler to understand, even though it&#39;s less efficient; always optimise later). &nbsp;But if the object locked a resource its copy constructor would be disabled, and the programmer would find their mistake at compile time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852573">
				<div id="div-comment-852573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852573">
			August 10, 2010 at 9:06 am</a>		</div>

		<p>@gibwar: C#&#39;s lack of deterministic destruction is so deeply ingrained that it would be technically challenging to fix (not to mention practically impossible). Certainly calling Dispose on every IDisposable that goes out of scope isn&#39;t sufficient.</p>
<p>At a minimum, you&#39;d need to remove the concept of reference types and value type and simply have types, letting the user say whwther to store/pass by value or reference. Value variables then get deterministic destruction. Add in copy constructors and assignment operators and you&#39;ve got RAII.</p>
<p>Of course, RAII is of limited use when RAII objects can be held by GC owned objects &#8211; you&#39;d lose deterministic destruction. So only slight improvements over current C# when they&#39;re held by non-RAII objects, but the situtation wouldn&#39;t get any worse and would get much better for variables held on the stack.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852603">
				<div id="div-comment-852603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stuart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852603">
			August 10, 2010 at 9:19 am</a>		</div>

		<p>What bothers me is that there isn&#39;t (by default, out of the box) any compiler warnings for bogus use of IDisposable objects. I realize that in the general case it&#39;s almost impossible to get &quot;right&quot;, but it&#39;d be easy enough to arrange that the programmer can give the compiler a hint about usage of an object.</p>
<p>For example, there should be a warning or even an error about storing an IDisposable in a field of an object that isn&#39;t itself IDisposable. Or new()ing an IDisposable without either using()ing it or returning it. Or receiving one from another method without using()ing it or returning it. There should be a simple way to indicate that you know what you&#39;re doing and don&#39;t want that warning, but the default should be to warn you.</p>
<p>I&#39;m sure I can get something like this if I can figure out which options to turn on and off under code analysis or FxCop. My quibble is just that it should be the default in the language. I think FxCop is a complement to the language, not a substitute for it, and in this case I feel like the support should be in the language itself.</p>
<p>(oh, and in .NET I believe that Color is a value type so it IS in fact stack-allocated&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852613">
				<div id="div-comment-852613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Devlin Bentley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852613">
			August 10, 2010 at 9:29 am</a>		</div>

		<p>Having learned Java as my first language, the C# way of doing things seems normal and objects on the stack always seem kind of weird to me. Does that make this a generational difference? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson even thread-even depth-1" id="comment-852643">
				<div id="div-comment-852643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852643">
			August 10, 2010 at 10:29 am</a>		</div>

		<p>Many of those pitfalls exist with the existing &quot;using/dispose&quot; system, as well as in C++, so I&#39;m not sure they&#39;re valid parts of the argument against what is essentially a pure syntax change.</p>
<p>That said, I do agree that a change isn&#39;t really needed, at least for local variables.</p>
<p>(For members, it seems a nice idea to have a shorthand that automatically implements a Dispose method that disposes all IDisposable members, just to avoid boilerplate typing. However, I don&#39;t think there&#39;s a magic solution to the issues people raise with types changing from non-disposable to disposable and the required changes recursing out into the rest of the code. If you change the semantics of how a class is used then you have to change everything that uses it, and possibly everything that uses that (if it changes in turn) and there&#39;s not much you can do about that in any language.)</p>
<p>I do wonder what people are doing in C# that requires so many disposable objects that this becomes a big deal. Maybe C# isn&#39;t the best language for that sort of code. For code that mainly only has to clear up memory, the current system works great.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852653">
				<div id="div-comment-852653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ashley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852653">
			August 10, 2010 at 10:33 am</a>		</div>

		<p>@gibwar</p>
<p>I think I didn&#39;t explain what I meant well enough. &nbsp;See Logan Capaldo&#39;s response. &nbsp;You have the choice between automatic scope or not, and the difference is enforced by the compiler.</p>
<p>That situation doesn&#39;t happen because of compiler enforcing the difference. &nbsp;It has references which are signified like String^ and automatic scope variables with are written like String. &nbsp;In your case, you would use something like String^, not String. &nbsp;Of course, you can still get in trouble if you get a reference to a automatically scoped variable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852683">
				<div id="div-comment-852683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852683">
			August 10, 2010 at 10:42 am</a>		</div>

		<p>@fodder</p>
<p>Now remember that every feature starts with negative 100 points. Where would you say the 101 points come from to justify all the work?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852703">
				<div id="div-comment-852703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">f0dder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852703">
			August 10, 2010 at 10:48 am</a>		</div>

		<p>@Marquess: indeed &#8211; and I&#39;m not sure it would be worthwhile implementing the idea. I still think it&#39;s a shame one can&#39;t do RAII in C#, though :) &#8211; and nobody have mentioned classes not implementing IDisposable, and thus not supporting the &#39;using&#39; keyword&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852713">
				<div id="div-comment-852713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852713">
			August 10, 2010 at 11:01 am</a>		</div>

		<p>@f0dder: &quot;nobody have mentioned classes not implementing IDisposable, and thus not supporting the &#39;using&#39; keyword&#8230;&quot;</p>
<p>To be fair, that&#39;s not much different from a class in C++ not having a destructor that releases its resources, and thus not supporting RAII.</p>
<p>No amount of language design is going to remove the ability to make poor API decisions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852753">
				<div id="div-comment-852753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852753">
			August 10, 2010 at 1:42 pm</a>		</div>

		<p>&quot;Now remember that every feature starts with negative 100 points. Where would you say the 101 points come from to justify all the work?&quot;</p>
<p>How about this: C#&#39;s solution to the resource management problem is that it doesn&#39;t work &#8211; unless the only resource you care to manage is memory.</p>
<p>Or we could go with the reason that C# has generics, delegates, extension methods, static classes, partial classes, default parameters etc etc &#8211; not having them makes C# less useful to power users than C++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852453">
				<div id="div-comment-852453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852453">
			August 10, 2010 at 7:48 am</a>		</div>

		<p>One solution to this is to instead mark classes as having strict ref-counting semantic instead of relying on the garbage collector. This way you can design classes that act as aggressive resource manager, freeing resources as soon as they&#39;re unused. This doesn&#39;t solve the problem of cycle of objects, but if you create cycles on objects that you expect to free immediately when they go out-of-use, then your program is arguably buggy. That&#39;s what weak references and reference policies are for. Unfortunately, most language have poor automated support for detecting reference loops.</p>
<p>CPython is like that, except that *everything* uses strict ref-counting semantic. And the semantic is, somewhat unfortunately, a side-effect of the CPython implementation and not mandated by the language. They chose not to mandate it so that Python can be implemented on pure GC CLR.</p>
<div class="post">[<i>The downside of aggressive resource management is reentrancy. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852523">
				<div id="div-comment-852523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Logan Capaldo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852523">
			August 10, 2010 at 8:46 am</a>		</div>

		<p>Raymond, you&#39;re confusing the CLR with a specific language here I think. In C++/CLI you absolutely can write code that has an IDisposable dispose itself when its reference goes out of scope. Thanks to the type system, you can&#39;t get yourself into the situation you describe here, because the auto-magic disposing variables have a different type than the non automagic ones. Eg `SomeDisposable foo; &#8230; code &#8230;` gets transformed by the compiler into code that is the equivalent of `SomeDisposable^ foo = gcnew SomeDisposable(); try { &#8230; code &#8230; } finally { delete foo; /* this invokes Dispose in C++/CLI */ } but a SomeDisposable is not interchangeble with a SomeDisposable^ so you don&#39;t run into the same problems as your attribute approach (of course it is also less flexible than the attribute approach). But like you say, if I want C++[/CLI] I know where to find it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852623">
				<div id="div-comment-852623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jalf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852623">
			August 10, 2010 at 9:37 am</a>		</div>

		<p>&quot;What these people fail to recognize is that they are dealing with object references, not objects.&quot;</p>
<p>Aren&#39;t you just falling into your own firefighter trap? You&#39;re confusing the mechanism and the goal.</p>
<p>It should be possible. The fact that the way CLR reference types work prevents it just means that the CLR would have to be modified in some way or another, but that doesn&#39;t mean it&#39;s wrong to say &quot;it should be possible&quot;.</p>
<p>The (very real) issue these people pointed out is that poor old-fashioned C++ which doesn&#39;t even have a GC, actually has a robust method for avoiding resource leaks of all kinds, whether the resource in question is memory, file handles or anything else. Fancy-schmancy .NET with its GC can prevent memory leaks easily, but it has *no* robust way to handle leaks of other resource types. In many ways that&#39;s one step forward and two backwards.</p>
<div class="post">[<i>It&#39;s a philosophical difference. The CLR follows the model of traditional GC languages like Scheme and Lisp where objects have infinite lifetime. You cannot tie actions to object destruction because they are never destroyed (in theory). Instead, you need to tie actions to something else. You could try tying them to scope, which leads either to &quot;using&quot; or refcounting and hidden reentrancy. C# chose to be explicit with &quot;using&quot;. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852663">
				<div id="div-comment-852663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">f0dder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852663">
			August 10, 2010 at 10:38 am</a>		</div>

		<p>What about something along the lines of keeping the current way of GC as a default, but adding (compiler + VM) support for a class-level ScopedDestructionAttribute? It would require a fair amount of reworking, namely refcounting and compiler-level support; the refcounting would be relatively expensive, since it would have to be updated whenever references to an object are taken or released. Apart from performance, I wonder what pitfalls this would bring?</p>
<p>As for performance, I&#39;m aware that refcounting can be a bottleneck. OTOH, in my (limited :)) experience resources that need IDisposable tend to be *relatively* long-lived &#8211; I don&#39;t really mind threadsafe refcounting of sockets and file handles, whereas it hurts for strings and such.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852823">
				<div id="div-comment-852823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852823">
			August 10, 2010 at 6:14 pm</a>		</div>

		<p>[The comment numbers are available to me on the comment moderation control panel (which you don&#39;t get to see since you&#39;re not a moderator). -Raymond]</p>
<p>For those broken comment links, I think if you want, you can edit those comments you want to link to and manually put a name-anchor tag there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852843">
				<div id="div-comment-852843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">artsrc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852843">
			August 10, 2010 at 9:23 pm</a>		</div>

		<p>Everyone things about database connection resources the wrong way.</p>
<p>There is value having a system that simulates a machine with an infinite number of available database connections.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852853">
				<div id="div-comment-852853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852853">
			August 10, 2010 at 9:28 pm</a>		</div>

		<p>&quot;Fortunately, disposal is idempotent&quot;</p>
<p>Hahaha! Not in the codebase I&#39;m working in :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852863">
				<div id="div-comment-852863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">E</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852863">
			August 10, 2010 at 10:31 pm</a>		</div>

		<p>I know I&#39;m side stepping here but why is there &quot;Microspeak&quot; for commonly known terms in regards to the whole *Sharp architecture? I mean, why/who decided that instead of having a Virtual Machine it should be known as Common Language Runtime, or that bytecode sounds way too boring, lets dub it Intermediate Language and so on. At least garbage collection wasn&#39;t renamed!</p>
<p>The reason(s) for this can&#39;t possibly be legal, since these are merely terms just like keyboard or Operating System.</p>
<div class="post">[<i>The Common Language Runtime is the name of the .NET Framework virtual machine. (It&#39;s like saying &quot;Why does GM call it a Cadillac instead of a car?&quot;) The term &quot;virtual machine&quot; itself is probably avoided because it can easily be confused with hardware virtualization. And to many people the word &quot;bytecode&quot; implies the user of an interpreter. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852873">
				<div id="div-comment-852873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852873">
			August 10, 2010 at 10:57 pm</a>		</div>

		<p>@E</p>
<p>I find &#39;Common Language Runtime&#39; more descriptive than Virtual Machine.. So much is called Virtual Machine these days.. And this name suggests to me that more than one language will use this runtime (framework).</p>
<p>Also, Intermediate Language describes that it is somewhere between what I wrote and what&#39;s going to be executed by the cpu, so again, very descriptive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852903">
				<div id="div-comment-852903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852903">
			August 11, 2010 at 1:59 am</a>		</div>

		<p>@E</p>
<p>Come on, this is harmless. Microsoft calls the partition where Windows boots from the “System Partition,“ while the one where the system is installed is the “Boot Partition.“ I believe we can consider ourselves fortunate that the CLR vocabulary is still somewhat similar to the widespread usage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852913">
				<div id="div-comment-852913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">svs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852913">
			August 11, 2010 at 3:47 am</a>		</div>

		<p>These proposals for partial ref-counting and auto-dispose etc aren&#39;t new. Brian Harry posted a long message on the Developmentor Advanced .NET list during the initial beta. BradA copied it to his blog at <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/brada/archive/2005/02/11/371015.aspx" rel="nofollow">blogs.msdn.com/&#8230;/371015.aspx</a> &#8211; not sure where else it is.</p>
<p>Thanks Raymond!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852923">
				<div id="div-comment-852923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852923">
			August 11, 2010 at 4:01 am</a>		</div>

		<p>&gt; You could try tying them to scope, which leads either to &quot;using&quot; or refcounting and hidden reentrancy. C# chose to be explicit with &quot;using&quot;. -Raymond</p>
<p>Raymond, could you explain what you&#39;re referring to with &quot;hidden reentrancy&quot;?</p>
<p>I&#39;m guessing you&#39;re talking about hidden introduction of a non-reentrancy bug, but I don&#39;t see how &quot;using&quot; protects against that.</p>
<p>In fact, I&#39;ve seen reentrancy bugs in &quot;using&quot; code where I thought that adding an explicit refcount would help.</p>
<div class="post">[<i>I mean that with &quot;using&quot; there is an explicit declaration that &quot;Some extra code (namely Dispose) is going to execute at the end of this block, so watch out!&quot; Whereas with automatic reference counting, there is no such &quot;warning keyword&quot;. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852883">
				<div id="div-comment-852883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-852883">
			August 10, 2010 at 11:27 pm</a>		</div>

		<p>@E</p>
<p>Intermediate Language *is* a common industry term. &nbsp;It&#39;s the term I&#39;m more familiar with from my school days (where we used Linux and plain ol&#39; C; not really a heavy-Microsoft environment).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853153">
				<div id="div-comment-853153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-853153">
			August 11, 2010 at 1:11 pm</a>		</div>

		<p>@Stuart: Color is not necessarily on the stack. The stack is an implementation detail: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/ericlippert/archive/2009/04/27/the-stack-is-an-implementation-detail.aspx" rel="nofollow">blogs.msdn.com/&#8230;/the-stack-is-an-implementation-detail.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853753">
				<div id="div-comment-853753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Earwicker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-853753">
			August 13, 2010 at 10:28 am</a>		</div>

		<p>Amen to Ashley&#39;s first comment. The way I see it, C# assist you as a consumer of IDisposable classes. But it doesn&#39;t assist you in implementing them through composition of other IDisposable classes. That&#39;s the extra ingredient that C++/CLI has: a special way of marking a member/field so that it is understood to be &quot;owned&quot; by the containing class, so C++/CLI can auto-generate the containing class&#39;s Dispose method to call the owned object&#39;s Dispose method. The problem with trying to explain this to people is that the C++/CLI syntax for such an owned member is identical to the C# syntax for a non-owned reference field.</p>
<p>To add this to C# would require some other stuff to be ironed out. For example, should an owned-reference field be implicitly readonly (as it is in C++/CLI)? Or should you be able to assign a new object to it? (In which case, should that automatically dispose the previous object?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853833">
				<div id="div-comment-853833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stuart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-01/?p=13183#comment-853833">
			August 13, 2010 at 1:00 pm</a>		</div>

		<p>@Jason I know the stack is an implementation detail, but it doesn&#39;t change my point in the slightest.</p>
<p>The *semantics* of a value type in .NET are such that, if Color is a value type,</p>
<p> Color c = new Color(0,0,0);</p>
<p> Brush b = new Brush(c);</p>
<p>passes a *copy* of c to the Brush constructor, not a reference. It&#39;s true that both c and the color argument to Brush&#39;s constructor might be in registers or in some other data structure that has nothing to do with a stack. But regardless of the implementation detail as to how they are stored, it is *definitely* the case that if Brush&#39;s constructor were to modify its argument (including somehow marking it disposed), that would have no effect on the value of c.</p>
<p>(Of course, the value-typeness of Color was still just a throwaway, nitpicker&#39;s-corner-esque aside in my original post. So I suppose it&#39;s fair game to nitpicker&#39;s-corner me back&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>