<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (36)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-719333">
				<div id="div-comment-719333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719333">
			March 23, 2009 at 3:08 pm</a>		</div>

		<p>Pah! SetWindowPos() is for wusses. Real programmers use BeginDeferWindowPos(). (As far as I know, the same raison d&#8217;etre applies here, too.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-719343">
				<div id="div-comment-719343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719343">
			March 23, 2009 at 4:11 pm</a>		</div>

		<p>@Ken Hagan: no, there is not point to use BeginDeferWindowPos for a single window.</p>
<p>Besides, I&#8217;m pretty sure BeginDeferWindowPos has already been a topic on this blog. The only thing I want to know about *DeferWindowPos is how to &quot;abort&quot;, as in, not calling EndDeferWindowPos but still free the memory</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-719353">
				<div id="div-comment-719353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.adminarsenal.com' rel='external nofollow' class='url'>Adam Ruth</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719353">
			March 23, 2009 at 5:16 pm</a>		</div>

		<p>So why didn&#8217;t they call it MoveWindowEx then?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-719363">
				<div id="div-comment-719363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719363">
			March 23, 2009 at 6:49 pm</a>		</div>

		<p>Yep, legacy sucks. But shouldn&#8217;t Microsoft have removed it from the header files a long, long, long, long, long, long time ago? API deprecation isn&#8217;t a bad idea &#8211; developers are pretty reasonable and intelligent, and translating a call from and old API to a better one isn&#8217;t rocket science. </p>
<div class=post>[<i>This assumes that all software is actively maintained and updated. Good luck getting an update to that custom 16-bit Delphi program from 1995 which your company relies on for order entry. &#8220;Hi, yeah, we&#8217;d like you to update the Delphi 1.0 runtime library so it doesn&#8217;t call MoveWindow. No, I&#8217;m not crazy. Hello?&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-719373">
				<div id="div-comment-719373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.tapuchim.com' rel='external nofollow' class='url'>configurator</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719373">
			March 23, 2009 at 7:20 pm</a>		</div>

		<p>Disclaimer: I&#8217;m not a win32 programmer.</p>
<p>Isn&#8217;t it possible somehow to keep the function in the DLL but remove it from the header file, thus not allowing new programs to compile with it (unless they define it themselves) but letting old programs continue to work?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-719383">
				<div id="div-comment-719383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719383">
			March 23, 2009 at 7:37 pm</a>		</div>

		<blockquote><p>
  &gt; Isn&#8217;t it possible somehow to keep the function in the DLL but remove it from the header file, thus not allowing new programs to compile with it
</p></blockquote>
<p>There was a culling and rationalisation of the API on the move from win16 to win32. We don&#8217;t need random removal of APIs that still work unless their is some benefit. If it was left in for win64 then they missed the trick and will have to wait till win128 to remove it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-719393">
				<div id="div-comment-719393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://twitter.com/davidlmorris' rel='external nofollow' class='url'>davidlmorris</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719393">
			March 23, 2009 at 7:43 pm</a>		</div>

		<p>Does this mean that MoveWindow calls SetWindowPos? &nbsp;Assuming a HWND_NOTOPMOST move, are there any other reasons for why SetWindowPos is preferred?</p>
<p>I have code (some goes back to 16 bit Windows days AFAIK) liberally sprinkled with MoveWindow. &nbsp;Wondering if it is worth changing these to SetWindowPos the next time I do some refactoring as these changes would be fairly trivial make?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-719403">
				<div id="div-comment-719403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719403">
			March 23, 2009 at 7:43 pm</a>		</div>

		<p>Yes, Configurator, that is possible. It is even possible to define a compilation flag that will let you use the deprecated functions, just in case you have to use some third-party source code that you don&#8217;t have the time to delve into.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-719413">
				<div id="div-comment-719413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.tapuchim.com' rel='external nofollow' class='url'>configurator</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719413">
			March 23, 2009 at 7:57 pm</a>		</div>

		<p>@porter: Why not? As far as I can tell. it wouldn&#8217;t break anything. Would it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-719423">
				<div id="div-comment-719423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719423">
			March 23, 2009 at 8:27 pm</a>		</div>

		<p>@davidlmorris: i wouldn&#8217;t bother myself; there are probably more interesting things to fiddle with. If it ain&#8217;t broke etc.</p>
<p>Perhaps the h files could be changed to add advice (vs a warning): &quot;M1234: MoveWindow is way old, dude. Thought about using SetWindowPos instead?&quot; Perhaps not that useful for MoveWindow per se (there&#8217;s no real reason to not call it), but for other functions it might be more beneficial. Or potentially amusing. &quot;M1235: CreateWindow? With no Ex? I pity the fool!&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-719433">
				<div id="div-comment-719433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719433">
			March 23, 2009 at 8:52 pm</a>		</div>

		<blockquote><p>
  &gt; Why not? As far as I can tell. it wouldn&#8217;t break anything. Would it?
</p></blockquote>
<p>People recompiling older win32 applications with a later dev kit for starters, which happens when you maintain large applications for a significant lengths of time.</p>
<p>The Win32 header files have macros to stop you using an API before it&#8217;s been introduced eg _WINNT, _WIN95 etc. But if an API is part of the WIN32 API, then you should be able to call it if you have a WIN32 conformant program, else what is the point of having a WIN32 spec?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-719443">
				<div id="div-comment-719443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719443">
			March 23, 2009 at 9:05 pm</a>		</div>

		<p>Ah, in that case it&#8217;d be better if they&#8217;d redefined MoveWindow in headers as macros (as they did with CreateWindow). Something, like:</p>
<p>#define MoveWindow(hWnd, X, Y, nWidth, nHeight, bRepaint)</p>
<p>SetWindowPos(hWnd, NULL, X, Y, nWidth, nHeight, SWP_NOZORDER | (bool)bRepaint * SWP_NOREDRAW))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-719453">
				<div id="div-comment-719453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xiagouo ge</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719453">
			March 23, 2009 at 9:20 pm</a>		</div>

		<p>Yep, legacy sucks. But shouldn&#8217;t Microsoft have removed it from the header files a long, long, long, long, long, long time ago? API deprecation isn&#8217;t a bad idea &#8211; developers are pretty reasonable and intelligent, and translating a call from and old API to a better one isn&#8217;t rocket science. </p>
<p>[This assumes that all software is actively maintained and updated. Good luck getting an update to that custom 16-bit Delphi program from 1995 which your company relies on for order entry. &#8220;Hi, yeah, we&#8217;d like you to update the Delphi 1.0 runtime library so it doesn&#8217;t call MoveWindow. No, I&#8217;m not crazy. Hello?&#8221; -Raymond]</p>
<p>Why not just remove it from the header file but still keep it in the dll. This way no new program can use it but all the old programs can still run and programmers have one less API to remember.</p>
<div class=post>[<i>This assumes that when maintaining software, you&#8217;re willing to upgrade all your source code to the current version of the devkit. &#8220;All I want to do is add a null check to this one function (in a program we haven&#8217;t needed to change in 8 years), but now I get 852 compiler errors because functions like MoveWindow and OpenIcon have been deleted from the header file.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-719463">
				<div id="div-comment-719463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719463">
			March 23, 2009 at 10:38 pm</a>		</div>

		<p>@xiagouo ge: way to read the comments before posting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-719483">
				<div id="div-comment-719483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719483">
			March 24, 2009 at 1:04 am</a>		</div>

		<p>&quot;So why didn&#8217;t they call it MoveWindowEx then?&quot;</p>
<p>Because, as has been explained in other entries, some functions in the Windows API are older than the naming conventions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-719493">
				<div id="div-comment-719493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719493">
			March 24, 2009 at 3:09 am</a>		</div>

		<blockquote><p>
  &gt; #define MoveWindow(hWnd, X, Y, nWidth, nHeight, bRepaint)
</p></blockquote>
<p>Yes you could, but what does that buy you? The operating system still has to export and support the API even if the implementation of it is changed to be built on SetWindowPos rather than doing what it did before.</p>
<p>And what happens if the message sequence generated by MoveWindow is different to that of SetWindowPos? Then you can potentially break an application purely through a recompilation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-719503">
				<div id="div-comment-719503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I'm Old</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719503">
			March 24, 2009 at 5:49 am</a>		</div>

		<p>I don&#8217;t understand why the 16bit legacy compromise in valid in 2009. I know NT doesn&#8217;t have to be the mascot for cutting edge OS research, but isn&#8217;t there a tipping point where you cut out the gangrenous legacy code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-719513">
				<div id="div-comment-719513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719513">
			March 24, 2009 at 6:25 am</a>		</div>

		<p>Maybe Phil was confused by the quirk that MSDN only refers to the minimum 32-bit version of the API, so that there&#8217;s no way to tell that the 16-bit MoveWindow predated SetWindowPos.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-719523">
				<div id="div-comment-719523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719523">
			March 24, 2009 at 7:39 am</a>		</div>

		<p>&quot;else what is the point of having a WIN32 spec?&quot;</p>
<p>There is no &quot;WIN32 spec&quot;. WIN32 is whatever Windows does.</p>
<p>The MSDN Win32 API documentation is an attempt to describe what Windows does, but if there is ever a conflict between what MSDN says and what Windows does, it is Windows that is &quot;correct&quot; and MSDN which will (hopefully) change.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-719533">
				<div id="div-comment-719533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">someone else</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719533">
			March 24, 2009 at 8:14 am</a>		</div>

		<p>“Good luck getting an update to that custom 16-bit Delphi program from 1995 which your company relies on for order entry.”</p>
<p>What&#8217;s this “16-bit” you&#8217;re talking about here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-719593">
				<div id="div-comment-719593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719593">
			March 24, 2009 at 12:17 pm</a>		</div>

		<p>&quot;I&#8217;m Old&quot;: Let&#8217;s do a quick benefits analysis of the function:</p>
<p>Harm: Consumes like 20 bytes of disk space.</p>
<p>Good: Enables gobs of older apps to run without modification or recompilation.</p>
<p>Gee, which does Microsoft pick?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-719673">
				<div id="div-comment-719673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719673">
			March 24, 2009 at 3:00 pm</a>		</div>

		<p>&#8220;@Ken Hagan: no, there is not point to use BeginDeferWindowPos for a single window.&#8221;</p>
<p>I know, but I believe Win3.x actually implemented SetWindowPos as a three-liner, using the DeferWindowPos() functions. It&#8217;s therefore rather ironic that Raymond chose to use SetWindosPos as his example of a new-and-more-powerful replacement function, though perhaps not surprising, given that Raymond&#8217;s experience with Windows appears to pre-date any public release of the product.</p>
<div class=post>[<i>It&#8217;s still true that SetWindowPos is newer and more powerful than MoveWindow. There didn&#8217;t seem to be any need to introduce the *DeferWindowPos family of functions &#8211; that would just have clouded the subject. Though perhaps commenter &#8220;I&#8217;m Old&#8221; would suggest that we should also get rid of the SetWindowPos function. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-719683">
				<div id="div-comment-719683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KenW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719683">
			March 24, 2009 at 3:09 pm</a>		</div>

		<p>@I&#8217;m Old: I have a client still using a 16-bit Delphi app written on Win 3.1 to this date, running it on XP now. It works fine, and as he spent a *lot* of money having it written back then, and it would require a lot of changes to convert to 32-bit now (it has 16-bit integer operations, short strings, 64K limitation workarounds, etc. that would have to come out, and so forth); he sees no need to pay me or someone else to make those changes when things work fine as is. Can you explain why he should be forced to?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-719803">
				<div id="div-comment-719803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I'm Old</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719803">
			March 25, 2009 at 3:14 am</a>		</div>

		<p>@James Schend</p>
<p>@KenW</p>
<p>A general policy of never cutting out legacy compatibility is what I&#8217;m arguing against. Anytime you hurt app compat there will always be that one piece of code that requires things to be done the &#8216;old&#8217; way. So if you have such a strict policy in place, you could never change anything.</p>
<p>Also, the problem it seems to me, only is valid when your position is that they /have/ to upgrade their OS while still maintaining app compat with 2 decade old code. Why cant they continue to use the older version?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-719813">
				<div id="div-comment-719813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719813">
			March 25, 2009 at 5:01 am</a>		</div>

		<p>@I&#8217;m Old</p>
<p>But in this case the cost of legacy compatibility in this case is practically nothing, even at design-time, and therefore this argument of everything having to stay the same doesn&#8217;t really apply in this case. &nbsp;There needs to be some justification to not have both of them.</p>
<p>As for the second paragraph, it isn&#8217;t about whether they *have* to upgrade their OS. &nbsp;What about a retailer who has binaries that worked fine but wants to sell to people with a modern OS? What if the application needs to be network-facing, and therefore using an old OS is potentially irresponsible?</p>
<div class=post>[<i>Or the customer with two applications, one that requires an old OS (little Bobby&#8217;s favorite computer game) and one that requires a new one (Unreal Tournament 12: Final Battle). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-719963">
				<div id="div-comment-719963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I'm Old</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719963">
			March 25, 2009 at 12:25 pm</a>		</div>

		<p>&#8220;[Or the customer with two applications, one that requires an old OS (little Bobby&#8217;s favorite computer game) and one that requires a new one (Unreal Tournament 12: Final Battle).] -Raymond&#8221;</p>
<p>Unreal tournament has nothing really to do with app compat. Given that there will <em>always</em> be new apps that wont run on older machines, (hardware OR software), that particular problem is always going to be there. Adding UT here just makes it a circular argument&#8230;</p>
<p>In the same way how its unclear why support for a Windows version XYZ will stop in year XXXX, its unclear why leagacy code is supported till Version ABC. i.e. two seemingly random choices.</p>
<div class=post>[<i>Unreal Tournament was just an example. I&#8217;m sorry my example confused you. Let&#8217;s try it again with no examples: Consider the customer with two applications, one which requires an old OS and one which requires a new one. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-719973">
				<div id="div-comment-719973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-719973">
			March 25, 2009 at 1:00 pm</a>		</div>

		<p>I&#8217;m Old, Microsoft has some desire to sell operating systems. It&#8217;s quite difficult to do that if core applications don&#8217;t work. I had a customer who simply refused to upgrade to Windows 95 for about 18 months because it wasn&#8217;t backwards compatible for a business-critical DOS application we&#8217;d written for them some years earlier.</p>
<p>We&#8217;d happily have recompiled the application for them if someone had persuaded Informix to rework C-ISAM so that it&#8217;s locking worked on Windows 95 without the Novell network driver. Preferably without our customer having to pay Informix lots of money for the work. As it was, they didn&#8217;t upgrade to Windows 95 until the Novell driver version that made their application work came out.</p>
<p>This was a fairly cheap application, only half a million Dollars or so. There are worse cases out there.</p>
<p>There are people who appreciate the work that Raymond and those he works with do. I&#8217;m definitely one of them. Well, at least until all my favorite games run on Linux, then I may not have a reason to use Windows any more.</p>
<p>Ah. Games don&#8217;t matter? Provided they are a backwards compatibility challenge for other operating systems but continue to run fine on Windows, they do.</p>
<p>On the hardware side, remember the traditional job number one for an OS: isolating applications from changes in the hardware.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-720053">
				<div id="div-comment-720053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-720053">
			March 25, 2009 at 5:56 pm</a>		</div>

		<p>[This assumes that when maintaining software, you&#8217;re willing to upgrade all your source code to the current version of the devkit. &quot;All I want to do is add a null check to this one function (in a program we haven&#8217;t needed to change in 8 years), but now I get 852 compiler errors because functions like MoveWindow and OpenIcon have been deleted from the header file.&quot; -Raymond]</p>
<p>Ok, instead of deleting MoveWindow from the header file, how about #ifdef&#8217;ing it to emit a warning about its deprecated status? (it&#8217;s already #ifdef&#8217;d to something like MoveWindowW anyways)</p>
<p>But I get your point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-720203">
				<div id="div-comment-720203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-720203">
			March 25, 2009 at 10:10 pm</a>		</div>

		<p>Another example of this is CloseWindow and OpenIcon. Yep, these are alias for ShowWindow(&#8230;, SW_MAXIMIZE) and ShowWindow(&#8230;, SW_MINIMIZE), and is even worse than MoveWindow because the names were based on the Win3.x UI and has been misleading since Win95 because of it&#8217;s completely new UI.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-720233">
				<div id="div-comment-720233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-720233">
			March 26, 2009 at 12:37 am</a>		</div>

		<p>You can&#8217;t really argue that deleting MoveWindow from the header file was not an option, because deleting the &#8216;MoveTo&#8217;function from GDI (replaced by MoveToEx) was not a problem! ;-)</p>
<p>But anyway, personally I love MoveWindow. &nbsp;I absolutely hate these dancing bears of Microsoft APIs like SetWindowPos that take tons of parameters and a collection of confusing flags. &nbsp;People end up calling these APIs forgetting flags or adding too many ones because they are not sure what they do, what&#8217;s slow/fast, what they&#8217;re supposed to ask and not ask for, and the code is hard to read. &nbsp;I never bloody need to change the z-order!!</p>
<p>I generally defend the Win32 API, but these types dancing bear APIs, and the ones that take structs with tons of members and bit flags &nbsp;really suck. &nbsp;</p>
<p>we just want simple APIs that are optimal for 99% of the cases. &nbsp;An API programmer will always argue they can&#8217;t accomodate all the edge cases so simple shouldn&#8217;t be done. Well, I&#8217;ve been writing windows apps since 1993, very complex applications with thousands of windows, everything from media players, MDI apps, video editing app, a vector graphic app, a large 3D CAD app, they all had toolbars, dynamic dialogs, custom menus, etc; I&#8217;ve done pretty much everything you can imagine in UI. &nbsp;I&#8217;ve never really needed anything beyond MoveWindow. &nbsp;</p>
<p>Obviously, I have had to use the SWP cousin DeferWindow to reduce flicker, but again that was just to simple position child windows, equivalent to MoveWindow</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-720263">
				<div id="div-comment-720263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-720263">
			March 26, 2009 at 2:34 am</a>		</div>

		<p>&quot;But anyway, personally I love MoveWindow. &nbsp;I absolutely hate these dancing bears of Microsoft APIs like SetWindowPos that take tons of parameters and a collection of confusing flags. &nbsp;People end up calling these APIs forgetting flags or adding too many ones because they are not sure what they do, what&#8217;s slow/fast, what they&#8217;re supposed to ask and not ask for, and the code is hard to read.&quot;</p>
<p>CreateProcess is IMO the worst here.</p>
<p>BTW, what is the function used to open an icon on the Win95 and later desktops? I bet it is in Shell.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-720283">
				<div id="div-comment-720283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-720283">
			March 26, 2009 at 3:17 am</a>		</div>

		<p>&quot;we just want simple APIs that are optimal for 99% of the cases.&quot;</p>
<p>Then write one. By your argument, it should be a one-liner, calling the dancing bear to do the work, but presenting the interface that you want for the task in hand.</p>
<p>I suppose Microsoft *could* try to guess the subset that you want and implement it for you, but remember that the *main* job of the Win32 API is to expose *all* the capabilities of Windows, because if it doesn&#8217;t then those capabilities effectively don&#8217;t exist. Adding helper functions increases the API&#8217;s surface area. Isn&#8217;t it big enough already?</p>
<p>Raymond&#8217;s point in this item is that some (many?) of the existing &quot;helper functions&quot; exist not because MS thought it would be helpful to add them, but because at some point in the past they *were* the fully general version of the feature they manipulate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-720503">
				<div id="div-comment-720503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-720503">
			March 26, 2009 at 2:44 pm</a>		</div>

		<p>&quot;You can&#8217;t really argue that deleting MoveWindow from the header file was not an option, because deleting the &#8216;MoveTo&#8217;function from GDI (replaced by MoveToEx) was not a problem!&quot;</p>
<p>That was a different story altogether. MoveTo packed a POINT structure into a DWORD as the return value, which was okay back in the 16-bit days where x and y was 16-bit. When x and y was extended to 32-bit with Win32, the resulting total size of the POINT structure meant that it could no longer fit into a DWORD and back when the Win32 API was designed, there was no support for 64-bit integers like there is now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-720413">
				<div id="div-comment-720413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-720413">
			March 26, 2009 at 1:07 pm</a>		</div>

		<p>&gt;Then write one. By your argument, it should be a one-liner</p>
<p>By you argument, microsoft would never have any UI controls, image lists, DrawText, bezier curves, ect. because you can write your own wrappers that call the other lower functions anyway. &nbsp;</p>
<p>Microsoft&#8217;s goal was to create an attractive application dev platform. &nbsp;It&#8217;s never really been about exposing the implemenation and telling people just write their own wrappers to make sense of it.</p>
<p>For example, GDI is isn&#8217;t an API that&#8217;s a single uber-generic function to push a command buffer to accommodate all primitives and anything the implementation supports. &nbsp;At one point someone decides what the friendly API should be, what the patterns are.</p>
<p>&gt;I suppose Microsoft *could* try to guess the subset</p>
<p>It might be magic to you to know that people need to arrange child windows more anythig else, but that&#8217;s what API designers do.</p>
<p>The design of the API framework on top of the implementation is not a burden, it&#8217;s the goal. &nbsp;You DO have to understand how it&#8217;s used.</p>
<p>The issue I was arguing against was this idea that MoveWindow should be deleted and we should just have the urber function that tries to offer every possible kind of windows placement anyone could possibly use. &nbsp;</p>
<p>We *know* by experience that the simple MoveWindow is a fundamental method on a window object, and it deserves to be its own. &nbsp;A UI framework should make simple things easy, and hard this harder. &nbsp;not hard things easy, and simple things hard, because it satisfies the implementation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-721243">
				<div id="div-comment-721243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-721243">
			March 27, 2009 at 6:52 pm</a>		</div>

		<p>That&#8217;s actually an interesting reply about MoveTo. &nbsp;I&#8217;ve never used the return value.</p>
<p>You had tons DWORD/WPARAM-to-POINT code to fix in the win16-&gt;win32 transition, and there were tools find them.</p>
<p>My nit pick is pretty evil :) &nbsp;if a very common functions like that require changing the code, it voids the yellow comment above that one couldn&#8217;t a function from the header file because clients would &quot;get 852 compiler errors &quot;. It happened. &nbsp;Converting 16-bit apps to Win32 was major work. &nbsp;moving to Win64 was also not a simple recompile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-721553">
				<div id="div-comment-721553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">carlso</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090323-00/?p=18733#comment-721553">
			March 29, 2009 at 1:49 pm</a>		</div>

		<p>I&#8217;m Old&gt; &quot;I don&#8217;t understand why the 16bit legacy compromise in valid in 2009. I know NT doesn&#8217;t have to be the mascot for cutting edge OS research, but isn&#8217;t there a tipping point where you cut out the gangrenous legacy code.&quot;</p>
<p>Well, there are some Win3.1 applications written in the early 90s that are still useful today. &nbsp;I use both PCs and Macs, and I have been much more impressed (and satisfied, until recently) with Microsoft&#8217;s support for older software. &nbsp;I can&#8217;t run any of my older Mac software on the latest Mac OS X release which makes the latest release less useful to me than the previous one.</p>
<p>I recently bought a new PC running Vista 64-bit and I was disappointed to find that it refused to allow some older 16-bit software to run (which ran fine on Windows XP 32-bit). &nbsp;Why is this important? &nbsp;Because after spending over a grand on a new computer, I then had to deal with a 5-year-old throwing a crying fit because he could no longer play the Win3.1-based Putt-Putt Saves The Zoo or Pajama Sam games. &nbsp;So, now I have to keep that older XP computer around just to play those games. &nbsp;I guess I could set up Virtual PC to run an older OS under Vista, but it sure would&#8217;ve been nice to have the ability to run these older games built-in.</p>
<p>Unless support for older software is really creating a problem for newer development, why would you bother removing it? &nbsp;Just for the sake of a feeling of internal cleanliness to developers? &nbsp;That&#8217;s crazy. &nbsp;If you remove support for existing software, you decrease the value of your operating system. &nbsp;And, shouldn&#8217;t you be spending your time adding value, rather than decreasing it? &nbsp;One of the impressive things about Raymond is that he&#8217;s always understood this.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>