<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1279065">
				<div id="div-comment-1279065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279065">
			January 3, 2017 at 7:42 am</a>		</div>

		<p>Oh nice in looking up information to make a comment on this I found out that c++17 is introducing an <code>is_swappable</code> type trait[1]. That coupled with <code>is_move_assignable</code>[2] you could in theory template all this out and have it SFINAE to victory in most cases.</p>
<p>[1] <a href="http://en.cppreference.com/w/cpp/types/is_swappable" rel="nofollow">http://en.cppreference.com/w/cpp/types/is_swappable</a><br />
[2] <a href="http://en.cppreference.com/w/cpp/types/is_move_assignable" rel="nofollow">http://en.cppreference.com/w/cpp/types/is_move_assignable</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1279145">
				<div id="div-comment-1279145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279145">
			January 3, 2017 at 10:02 am</a>		</div>

		<p>Close. The is_swappable reports true if std::swap is a match. But I want to detect whether there is a <u>custom</u> swap.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude even depth-3 parent" id="comment-1279176">
				<div id="div-comment-1279176" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279176">
			January 3, 2017 at 11:45 am</a>		</div>

		<p>So <code>is_swappable</code> should work, assuming the type doesn&#8217;t resolve to a reference, CV qualified, or <code>void</code>. Assuming all of that <code>is_swappable</code> decays to <code>is_swappable_with</code> which infers if <code>swap(T,T);</code> is well formed after <code>using std::swap;</code>. Therefore Konieg lookup custom swaps should be inferred correctly by the trait.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1279185">
				<div id="div-comment-1279185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279185">
			January 3, 2017 at 12:05 pm</a>		</div>

		<p>But I don&#8217;t want it to pick <code>std::swap</code>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1279075">
				<div id="div-comment-1279075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Muzer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279075">
			January 3, 2017 at 7:55 am</a>		</div>

		<p>The last paragraph of footnote 2 sounds to me like a great example of a good use-case for template metaprogramming!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1279106">
				<div id="div-comment-1279106" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279106">
			January 3, 2017 at 8:45 am</a>		</div>

		<p>You don&#8217;t need to do compile-time detection for a custom swap(T&amp;a, T&amp;b).  Just do</p>
<p>{<br />
 using std::swap;<br />
 swap(a,b);<br />
}</p>
<p>and argument-dependent lookup will select a custom swap() if available, and std::swap if not.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1279116">
				<div id="div-comment-1279116" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279116">
			January 3, 2017 at 8:49 am</a>		</div>

		<p>(Not I assumend &#8220;compile time detection&#8221; meant some form of template-metaprogramming / SFINAE / std::enable_if technique, rather than the builtin language feature)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1279125">
				<div id="div-comment-1279125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Muzer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279125">
			January 3, 2017 at 9:32 am</a>		</div>

		<p>But his idea is that he&#8217;d use swap if a custom one is available, but not use swap at all otherwise.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1279117">
				<div id="div-comment-1279117" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279117">
			January 3, 2017 at 8:58 am</a>		</div>

		<p>The best part of reading this blog post is the smell of the pages of my old Programming Pearls (John Bentley) book, possibly unopened for over a decade. (Not that this has anything to do with solving this problem or with using using statements to help with Koenig lookup.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1279175">
				<div id="div-comment-1279175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279175">
			January 3, 2017 at 10:43 am</a>		</div>

		<p>&gt;super-optimized custom swaps that are actually perform less work than the standard swap</p>
<p>All STL containers do this. For std::string move needs to null out the moved-from string&#8217;s small string buffer, and for node-like containers map, set, list, unordered_map, and unordered_set the move constructor needs to allocate memory for a sentinel end() node in the moved-from container. Swap never needs to do these things.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1279195">
				<div id="div-comment-1279195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279195">
			January 3, 2017 at 12:36 pm</a>		</div>

		<p>Why does std::string move need to null out the small string buffer?  Move just needs to leave the object in *a* valid state &#8211; not any particular valid state.  (In particular, not in the default constructed state).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>