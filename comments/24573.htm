<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (60)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-xepol even thread-even depth-1" id="comment-565493">
				<div id="div-comment-565493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Xepol' rel='external nofollow' class='url'>Xepol</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565493">
			November 6, 2007 at 1:26 pm</a>		</div>

		<p>So, aside from creating a huge, gapping security issue, does ReadProcessMemory serve any legimate uses?</p>
<p>Way back in the day, when I first started reading about the abilities of the 286, I was excited about the memory manager protecting processes from intrusion (such a step up from the constant guru meditation errors on the AMIGA, which lacked such protections). &nbsp;I&#8217;m disappointed that over time, it has been so poorly evolved.</p>
<p>I gotta go with other, more FUD inspired individuals when them claim insecurity was built in from the ground up when I read things like this.</p>
<div class=post>[<i>I wonder how unix debuggers work if they can&#8217;t read the memory of the process being debugged. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565503">
				<div id="div-comment-565503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lionel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565503">
			November 6, 2007 at 1:26 pm</a>		</div>

		<blockquote><p>
  (Besides, if the user hibernates the</p>
<p>  computer, all the pages that aren&#8217;t in the</p>
<p>  page file are going to get written to the</p>
<p>  hibernation file, so they&#8217;ll end up on disk</p>
<p>  one way or another.)
</p></blockquote>
<p>[snip]</p>
<blockquote><p>
  The encryption keys used by these functions</p>
<p>  are generated pseudo-randomly at boot time</p>
<p>  and are kept in kernel mode. (Therefore,</p>
<p>  nobody can ReadProcessMemory them, and they</p>
<p>  won&#8217;t get captured by a user-mode crash</p>
<p>  dump.)
</p></blockquote>
<p>If the user hibernates the computer, the encryption keys would get written to the hibernation file, too, wouldn&#8217;t they?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565513">
				<div id="div-comment-565513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Niels</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565513">
			November 6, 2007 at 1:51 pm</a>		</div>

		<p>Xepol:</p>
<p>One (IMHO) legitimate use of ReadProcessMemory I found a long time ago was in the WinAmp remote API. You could send the WinAmp window some message, and get a pointer to a text string of the current song title returned, but of course that title was in WinAmp&#8217;s memory space, so you had to ReadProcessMemory to access it. Actually that interface was only intended for in-process plugins, but it worked just as well for other processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565523">
				<div id="div-comment-565523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ads</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565523">
			November 6, 2007 at 1:56 pm</a>		</div>

		<blockquote><p>
  &gt; So, aside from creating a huge, gapping security issue, does ReadProcessMemory serve any legimate uses?
</p></blockquote>
<p>Debugging. Benign code injection (powermenu and alikes). Really I feel bad about the opposite. Why is a process running on MY computer actively hiding informations from me ? (I know the answer, sadly).</p>
<p>Besides, if you want to read the memory of a process you can simply virtualize. Or sniff bytes travelling on the bus using electronic equipment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565533">
				<div id="div-comment-565533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565533">
			November 6, 2007 at 1:57 pm</a>		</div>

		<p>I believe that the primary purpose for ReadProcessMemory is debugging. How would you write a debugger without it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565543">
				<div id="div-comment-565543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anony Moose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565543">
			November 6, 2007 at 2:53 pm</a>		</div>

		<p>ReadProcessMemory isn&#8217;t that much of a security hole &#8211; to use it, you have to be on the right side of the airlock, and be able to run code that executes with sufficient rights. For example, user Bob can read memory in his own processes &#8211; or he could just look at the text printed on the screen &#8211; but user Alice can not &#8211; and if she can, then there&#8217;s already a problem. The ReadProcessMemory function just means it can be done correctly, rather than having a thousand ad-hoc incomplete attempts at implementing it for legitimate purposes.</p>
<p>And I don&#8217;t care what the memory manager folks or their documentation says about what will happen &quot;in practise&quot; &#8211; unless there&#8217;s a specific promise that calling a function will prevent the block of memory ever being written to disk, then the fact that currently it won&#8217;t be written to the pagefile doesn&#8217;t prevent the next version of Windows doing something different, but the official &quot;lock memory so it can&#8217;t be paged ever&quot; API, on the other hand, is offering an actual guarantee.</p>
<p>How many problems have we seen caused by people doing what works &quot;in practise&quot; even when the documentation says otherwise and then people have howled when the API is updated to enforce the documented rules?</p>
<p>VirtualLock does not promise to keep your data out of the page file, so relying on a current implementation detail is asking for trouble.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565553">
				<div id="div-comment-565553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DriverDude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565553">
			November 6, 2007 at 2:53 pm</a>		</div>

		<p>With the risk of pointing out the obvious, ReadProcessMemory works only on your processes (unless you&#8217;re root or Admin) Other operating systems have similar facilities, so Windows is no less secure than the rest in this regard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565563">
				<div id="div-comment-565563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">figuredout</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565563">
			November 6, 2007 at 3:07 pm</a>		</div>

		<p>I figured out in the next-to-last paragraph that this blog entry was about people who want to avoid memory blocks being paged out to protect sensitive data. &nbsp;Isn&#8217;t that pretty &nbsp;rare? What I see more in my field is people trying to lock large blocks in RAM for performance reason, for example in image processing or games, or some hardware interaction, including locking buffers for DMA transfer to GPU. &nbsp;</p>
<p>IMHO this is one of those articles article that will make these loose-cannon programmers that surround us try to use some work-around, in this case AWE functions, for a problem that they think there is with the correct API. &nbsp;This article has all the facts, and I get it, but I think casts fear that VirtualLock doesn&#8217;t work if you read it in diagonal. A proper title like &#8216;Preventing sensitive data from getting the page file&#8217; would have been my choice. Might be also more search engine friendly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565583">
				<div id="div-comment-565583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565583">
			November 6, 2007 at 3:13 pm</a>		</div>

		<p>Xepol: I don&#8217;t think you understand the point here. &nbsp;As others have also pointed out, there are other ways of getting the information as well as legit uses. &nbsp;Raymond also pointed out reasonable alternatives if you&#8217;re thinking VirtualLock as a security mechanism; it is more of a performance tool, not a true security mechanism.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works odd alt thread-odd thread-alt depth-1" id="comment-565593">
				<div id="div-comment-565593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565593">
			November 6, 2007 at 3:36 pm</a>		</div>

		<p>The WDM/WDK/DDK provides several functions to pin user buffers to memory. Page faults at the kernel level are pretty much always a BSOD, IIRC, so there needs to be a way to pin it. That&#8217;s in addition to the NPP.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565623">
				<div id="div-comment-565623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anony Moose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565623">
			November 6, 2007 at 7:34 pm</a>		</div>

		<p>If debug APIs required admin rights then authors of third-party debuggers would have to write applications that required admin rights &#8211; and this would introduce the possibility of elevation of priviledge attacks.</p>
<p>The current scheme means that data that is available to a user is accessable to that user, and only that user &#8211; and noone is making promises of security that can&#8217;t be met.</p>
<p>(Ok, its not a very likely opportunity &#8211; but every application that requires admin rights when it doesn&#8217;t need to is just making life more difficult. And it would mean developers would spend more time typing in their password than they&#8217;ld spend coding &#8211; or, perhaps, they might work around that by disabling checks for elevation of priviledge, which would be a great benefit to the spyware community.)</p>
<p>If you can run code in a user&#8217;s context then either you use ReadProcessMemory and have to have a deep knowledge of the data structures being used, or you can just read the same files off the disk and do whatever you want with them. By the time that ReadProcessMemory is any form of risk, it&#8217;s too late to worry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-xepol odd alt thread-odd thread-alt depth-1" id="comment-565633">
				<div id="div-comment-565633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Xepol' rel='external nofollow' class='url'>Xepol</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565633">
			November 6, 2007 at 9:59 pm</a>		</div>

		<p>While the point for debuggers has some validity, I don&#8217;t think that the ability to hack into another application is a feature so much as a less dangerous intrusion that is possible. &nbsp;I suspect that these &quot;legitimate&#8217; methods could be addressed another way by the OS if there was a desire to do so. &nbsp;As it is, people are hacking around the OS, whether it is for good or ill. &nbsp;</p>
<p>I suspect that there has to be a better solution that letting processes peer into each other&#8217;s memory. &nbsp;Full isolation, while inconvenient for some eye-candy features, would probably provide much greater security.</p>
<p>And does every computer need to be able to act as a ring 3 debugger? &nbsp;I seriously doubt it. &nbsp;The OS could continue to do ring 0 debugging for crash log purposes, and act as a proxy for other debugger apps, say if a physical switch was thrown (and default to off). It can be possible to be MORE secure rather than less.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565643">
				<div id="div-comment-565643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565643">
			November 6, 2007 at 10:10 pm</a>		</div>

		<p>I got the idea from that sentence about hibernation people would like to prevent their process&#8217; memory from written to disk even in that case. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565653">
				<div id="div-comment-565653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DriverDude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565653">
			November 6, 2007 at 10:21 pm</a>		</div>

		<p>&quot;What I see more in my field is people trying to lock large blocks in RAM for performance reason, for example in image processing or games&#8230;&quot;</p>
<p>It seems these functions work well for performance optimizations. If the system is under such memory pressure that the Mem Manager is forced to page out VirtualLocked() memory, then the user should get more RAM or kill some processes.</p>
<p>(Though I do wish there is some way to better control the Mem/Cache Manager, e.g., limit the system cache size. Eagerly awaiting Vista SP1 for that capability. But anyway, VirtualLocked memory won&#8217;t be used for caching, right?)</p>
<p>&quot;&#8230;or some hardware interaction, including locking buffers for DMA transfer to GPU.&quot;</p>
<p>On the other hand, if locked memory is required for correctness (concurrent hardware access), then you had better be doing that from kernel mode anyways. Doesn&#8217;t DirectX and the video driver handle that for you?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565573">
				<div id="div-comment-565573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565573">
			November 6, 2007 at 3:08 pm</a>		</div>

		<p>&gt; Tuesday, November 06, 2007 2:53 PM by Anony Moose</p>
<p>ReadProcessMemory isn&#39;t that much of a security hole &#8211; to use it, you have to be on the right side of the airlock, and be able to run code that executes with sufficient rights.</p>
<p>To use ReadProcessMemory, you need to have a handle a process with the PROCESS_VM_READ bit set. I do not believe that is a security hole; but I do believe it&#39;s a security hole that this capability is available to processes that aren&#39;t debuggers.</p>
<div class="post">[<em>Watch my l33t *** skillz:<br /><code>L33tReadProcessMemory()<br />{<br /> &nbsp;AttachAsDebugger(dwTarget);<br />&nbsp;ReadProcessMemory();<br />&nbsp;DetachAsDebugger(dwTarget);<br />}</code>.<br />P0wnd! -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565663">
				<div id="div-comment-565663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565663">
			November 6, 2007 at 11:24 pm</a>		</div>

		<p>VirtualLock() is very usefull. You can use it to lock some frequently used buffer in memory so you don&#8217;t get page faults and TLB misses on it.</p>
<p>Another thing to note, VirtualLock() will fail if you attempt to lock more memory than your working set size allows. To be able to lock large chunks of memory you need to increase your process working set size first.</p>
<p>As for ReadProcessMemory() why bother when you can already inject the thread into the target process easily which not only can read memory but also execute in security context of the target?</p>
<p>Last time I checked there was also a nice backdoor called NtSystemDebugControl() which allows for all sorts of things like read/write CPU MSR registers (which alone is enough to give you ring 0 access), bang over I/O ports and CMOS, and even read/write arbitrary memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-565673">
				<div id="div-comment-565673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565673">
			November 6, 2007 at 11:32 pm</a>		</div>

		<blockquote><p>
  You can use it to lock some frequently used buffer in memory
</p></blockquote>
<p>If it&#8217;s &quot;frequently used&quot; then you don&#8217;t need to VirtualLock it &#8212; it&#8217;ll already be in memory. You use VirtualLock for INfrequently accessed memory that you don&#8217;t want paged out.</p>
<p>Xepol: Don&#8217;t forgot, ReadProcessMemory only works for processes that you already own (unless you&#8217;re an administrator).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565683">
				<div id="div-comment-565683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565683">
			November 7, 2007 at 12:06 am</a>		</div>

		<p>Tuesday, November 06, 2007 11:32 PM by Dean Harding</p>
<p>Xepol: Don&#8217;t forgot, ReadProcessMemory only works for processes that you already own (unless you&#8217;re an administrator).</p>
<p>Then it&#8217;s assuming that you want to allow every process you run to be allowed to do whatever it wants to every other process you run. If 100% of all code was trustworthy, there wouldn&#8217;t be a need for security at all, would there?</p>
<p>[Watch my l33t h4x0r skillz:</p>
<p>L33tReadProcessMemory()</p>
<p>{</p>
<p>AttachAsDebugger(dwTarget);</p>
<p>ReadProcessMemory();</p>
<p>DetachAsDebugger(dwTarget);</p>
<p>}.</p>
<p>P0wnd! -Raymond]</p>
<p>Leetness not withstanding, can you link me to the msdn article for Attach/DetachAsDebugger?</p>
<p>(PS: Only scriptkiddies say p0wnd)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565603">
				<div id="div-comment-565603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565603">
			November 6, 2007 at 4:17 pm</a>		</div>

		<p>Sorry &#8211; off topic.</p>
<p>@Xepol: The 68000 through 68030 CPUs don&#8217;t have a(n) MMU (not sure about the 68030, actually,) so it wasn&#8217;t as much an OS issue as a hardware issue. Things were different for the A4000 with its 68040 CPU.</p>
<p>*waxes nostalgic* I kinda miss my A4000.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565693">
				<div id="div-comment-565693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565693">
			November 7, 2007 at 12:40 am</a>		</div>

		<p>Triangle: Here&#8217;s the MSDN article that says how to debug a running process: <a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/ms679301.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/ms679301.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565703">
				<div id="div-comment-565703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565703">
			November 7, 2007 at 1:15 am</a>		</div>

		<p>&quot;Leetness not withstanding, can you link me to the msdn article for Attach/DetachAsDebugger?&quot;</p>
<p>I think the point was not so much that there are functions called (Attach|Detach)AsDebugger as it was that if only debuggers were able to read the memory of other process, all malware would have to do is act like a debugger.</p>
<p>For all you people complaining about the presence of ReadProcessMemory and probably thinking how superior $YOUR_FAVORITE_OS is because, after all, the presence of ReadProcessMemory is a broken-by-design gaping security hole that illustrates how &quot;insecurity was built in from the ground up&quot;, how does that differ from ptrace(PTRACE_PEEKTEXT, pid, &#8230;) on Linux, ptrace(PT_IO, pid, &#8230;) on BSD, ptrace(1, pid, &#8230;) on SunOS, etc., or the newer procfs debugging mechanisms?</p>
<p>[This is half a facetious question and half real. It&#8217;s possible that there are differences, but seeing as I can debug another of my processes from user space on Unix, I kinda doubt it.]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565713">
				<div id="div-comment-565713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565713">
			November 7, 2007 at 1:41 am</a>		</div>

		<p>Everyone seems to be off saying ReadProcessMemory is a huge security flaw, and that it should only be restricted to debuggers.</p>
<p>(I&#8217;m surprised Raymond hasn&#8217;t brought it up)</p>
<p>Question &#8211; what&#8217;s a debugger (how do we define one?)? How can we define some random EXE as a &quot;debugger&quot;? The way you define it must satisfy a few properties like anyone must be able to write their own debugger (and test it), that some smart person can&#8217;t set some magic &quot;PROCESS_IS_DEBUGGER&quot; flag, and that there&#8217;s no bottleneck in whatever process you implement?</p>
<p>If I write an app, and decide to store some information that could be useful for the end user to provide me in case they need support, a &nbsp;memory block would be ideal. Shared memory won&#8217;t work (only one instance allowed, or lock management issues) since the former may be no doable, and the latter has performance issues if the app accesses it repeatedly. However, a chunk to which I could blindly write to (it&#8217;s my own private memory), and if needed, I can create my own debug app that uses ReadProcessMemory to read this memory block and provide useful debugging and support information. Little impact to 99% usage (just extra memory writes), but also means I don&#8217;t log everything to disk, or distribute a special debug version, yet offers me a good peek inside when I need to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565613">
				<div id="div-comment-565613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565613">
			November 6, 2007 at 6:13 pm</a>		</div>

		<p>The problem on the Amiga was that every program shared the same address space and memory. If a program went haywire it could corrupt the memory of every other program and, if I remember correctly, even the kernel.</p>
<p>The problem wasn&#8217;t security, it was stability. When things crashed badly on the Amiga the entire computer would crash out and have to be rebooted.</p>
<p>Programs on Windows can do some of those things to each other but they have to do it *on purpose* which is a big difference.</p>
<p>I was a bit surprised to find out that on Vista you don&#8217;t need a UAC prompt or admin rights to debug another process (that is running at the same level as you) but if you think things through there would not be much to gain from restricting debug APIs to admin processes. Win32 provides many ways to inject code into other processes (e.g. message hooks which serve a legitimate purpose) so the debug APIs by themselves don&#8217;t matter that much, IMO.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565723">
				<div id="div-comment-565723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565723">
			November 7, 2007 at 2:37 am</a>		</div>

		<p>Worf: Raymond did talk about it, see <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/05/10/594537.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/05/10/594537.aspx</a>.</p>
<p>Basically, every process you run is allowed to do anything you can do, no exceptions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565733">
				<div id="div-comment-565733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hazelrah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565733">
			November 7, 2007 at 5:37 am</a>		</div>

		<p>Per your &#8220;follow-up&#8221; it appears that not only are you a self-important douchesack &#8212; well established prior to this day &#8212; but are a misinformed self-important douchesack. &nbsp;</p>
<p>This is the only time in my memory that you addressed an error on this blog without adding some snarkily critical commentary. &nbsp;In the future, please consider your own shortcomings before you criticize others for theirs.</p>
<div class="post">[<i>I apologize for disappointing you. I shall endeavour to be more snarky in the future. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565743">
				<div id="div-comment-565743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hazelrah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565743">
			November 7, 2007 at 5:39 am</a>		</div>

		<p>Evan: &nbsp;the difference is that in those other OSes the typical user account does not have administrator privileges, contra Windows (at least &lt; Vista).</p>
<div class="post">[<i>Administrator privileges is irrelevant. Or are you saying that on unix only administrators can run a debugger? Do programmers have to run as root? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565763">
				<div id="div-comment-565763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565763">
			November 7, 2007 at 7:53 am</a>		</div>

		<p>Why not use the GMEM_NODISCARD flag to make the memory unswappable?</p>
<div class="post">[<i>May I suggest that you read what that flag does before suggesting it based solely on its name. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565773">
				<div id="div-comment-565773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.mschaef.com' rel='external nofollow' class='url'>mschaef</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565773">
			November 7, 2007 at 10:36 am</a>		</div>

		<p>Sorry &#8211; more off topic:</p>
<p>&quot;@Xepol: The 68000 through 68030 CPUs don&#8217;t have a(n) MMU (not sure about the 68030, actually,)&quot;</p>
<p>The 030 actually did have an MMU. The 020 could be fitted with an external MMU, somewhat like an external math coprocessor chip. The original Macintosh II (020) actually had a socket for an optional MMU. This socket was normally populated with a pass through chip that did some kind of rudimentary 24/32 bit address mapping, somewhat similar to the PC&#8217;s A20 issue. &nbsp;Apparantly, some early Macintosh software liked to use the Most signficant 8 bits of a 32-bit address as flag bits, which caused trouble when you actually had 32 address lines.</p>
<p>I believe it was necessary to install the external MMU for A/UX (Apple Unix) as well as virtual memory under System 7. The Macintosh IIx and SE/30 eliminated this complexity by switching to the 68030.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565913">
				<div id="div-comment-565913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565913">
			November 7, 2007 at 12:52 pm</a>		</div>

		<p>Dean Harding said : &#8220;If it&#8217;s &#8220;frequently used&#8221; then you don&#8217;t need to VirtualLock it &#8212; it&#8217;ll already be in memory. You use VirtualLock for INfrequently accessed memory that you don&#8217;t want paged out.&#8221;</p>
<p>Under heavy memory load even frequently used buffer can be flushed out.</p>
<div class=post>[<i>If a frequently used buffer is paged out, then your program is thrashing and protecting 10 pages from being paged out is going to make the thrashing worse (since those pages become unavailable for relieving the thrashing). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565963">
				<div id="div-comment-565963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565963">
			November 7, 2007 at 1:50 pm</a>		</div>

		<p>&#8220;Evan: &nbsp;the difference is that in those other OSes the typical user account does not have administrator privileges, contra Windows (at least &lt; Vista).&#8221;</p>
<p>Then why hasn&#8217;t this been clearly said before in the thread, and why are people complaining about ReadProcessMemory instead?</p>
<p>&#8220;[Administrator privileges is irrelevant. Or are you saying that on unix only administrators can run a debugger? Do programmers have to run as root? -Raymond]&#8221;</p>
<p>Not sure if this is meant sarcastically or not, but you don&#8217;t need to be root. You can attach to existing processes (of your own&#8230; I think typically ones that belong to the same session, though that goes beyond the level of detail I know) and read their memory, same as on Windows.</p>
<p>And in case that&#8217;s not enough for you, if you&#8217;re admin you can always just read /dev/mem.</p>
<div class=post>[<i>I was pointing out that the statements &#8220;Allowing non-administrators to ReadProcessMemory is a security hole that other OSs do not have&#8221; and &#8220;Debuggers need functionality equivalent to ReadProcessMemory&#8221; implies &#8220;other OSs require administrative privileges in order to use a debugger.&#8221; I was just checking my logic. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565983">
				<div id="div-comment-565983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-565983">
			November 7, 2007 at 2:07 pm</a>		</div>

		<p>Igor, are you referring to this CreateRemoteThread (<a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/ms682437.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/ms682437.aspx</a>)? Because if you are, it must be someone else&#8217;s invention as CreateRemoteThread requires PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ (some of the same rights as ReadProcessMemory and many more) written in the sacred MSDN here (<a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/ms684880.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/ms684880.aspx</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566073">
				<div id="div-comment-566073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566073">
			November 7, 2007 at 9:04 pm</a>		</div>

		<p>For what it&#8217;s worth, Singularity implements per-program security. Since programs are fully specified by the metadata in their assemblies and processes are immutable (no reflection in Singularity: to have dynamic code you must compile it into a new program, run it and interact through IPC), it logically follows that programs can be principals to the security subsystem, rather than just some instance of an user account.</p>
<p>Due to things like LoadLibrary, Read/WriteProcessMemory, due to the fact that the CPU, heck, <em>any</em> VonNeumann machine lets you load arbitrary code at any time, Windows programs are not by themselves immutable identifiers (token objects are. That&#8217;s why they are the principals). You&#8217;ll see various hacks that try to make them so (e.g. some personal firewalls, Microsoft&#8217;s own Safer), but it&#8217;s just not what they are</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566083">
				<div id="div-comment-566083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566083">
			November 7, 2007 at 9:42 pm</a>		</div>

		<p>KJL::Hyperion: LoadLibrary, Write/Read processMemory are all layered way above the CPUs&#8217; level. Per process security is certainly enforcable on current CPUs. Just nobody does it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566003">
				<div id="div-comment-566003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566003">
			November 7, 2007 at 2:16 pm</a>		</div>

		<p>Yes, Raymond, your logic was right. &nbsp;And since other OSes don&#8217;t require administrative privileges to use a debugger, the only conclusion we can draw is that either (a) allowing non-admins to ReadProcessMemory actually isn&#8217;t a security hole, or (b) debuggers don&#8217;t actually need the equivalent of ReadProcessMemory.</p>
<p>Since ptrace *is* the equivalent of ReadProcessMemory (plus a whole bunch of other things), and is allowed on *nix under the same set of conditions that ReadProcessMemory is allowed on Windows (target process has to be running under the same user, or the user has to be an admin), we can discard (b).</p>
<p>Therefore, ReadProcessMemory isn&#8217;t much of a security hole. &nbsp;Or if it is, other OSes do have it as well.</p>
<p>(Remember, people, security is implemented per user, *not* per program. &nbsp;If you want to do security per-program, then you need to run each program under a different account.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566093">
				<div id="div-comment-566093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kuwanger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566093">
			November 8, 2007 at 1:47 am</a>		</div>

		<p>Personally, I&#8217;m just confused about the &#8220;If you have relatively small chunks of sensitive data, the solution I&#8217;ve seen recommended is to use CryptProtectData and CryptUnprotectData.&#8221; &nbsp;Is the recommendation being cited to give an example of a bad solution?</p>
<div class="post">[<i>I added that because if I didn&#8217;t say anything, people would complain, &#8220;No fair telling us what not to do without telling us what we <u>should</u> do.&#8221; And then when I do add the information, people get confused. So it&#8217;s either complaints or confusion. I think I was better off with complaints. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566123">
				<div id="div-comment-566123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">..</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566123">
			November 8, 2007 at 7:48 am</a>		</div>

		<blockquote><p>
  &gt; Per process security is certainly enforcable on current CPUs. Just nobody does it.
</p></blockquote>
<p>I will begin to consider computer security something interesting and well implemented when processes will have different permissions even on minor operations. &quot;Why that download manager is trying to open my address book ? Denied! Why that IM app is deleting a picture file ? DEEENIEEEED!&quot;</p>
<p>User based security in the era of personal workstations is not so useful. So if an app goes south in [ANY OS HERE] and I&#8217;m not root/admin it can ONLY delete my files ? Seems like a car TV spot saying &quot;The engine keeps working even after a crash! Only people inside would die! Isn&#8217;t it great ?&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566143">
				<div id="div-comment-566143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566143">
			November 8, 2007 at 9:41 am</a>		</div>

		<p>Acutally, it&#8217;s more like a car TV spot saying &quot;The engine keeps working, and all the other passengers are guaranteed to survive after a crash. Only the driver who is responsible for actually crashing the car would die! Isn&#8217;t it great.&quot;</p>
<p>And, yes, that would be great. Insulating everyone else from the folly or bad luck of one person is a great practice to follow if you can.</p>
<p>Alternatively, you could change the emphasis in your other sentence to &quot;it can only delete MY files?&quot;. Yup, all the files belonging to your cow-orkers, family members, housemates, etc&#8230; (assuming they have their own non-admin accounts, which they should, even if only for conveniences like having their own bookmarks, address books, email accounts, etc&#8230;) will be fine.</p>
<p>On top of that, if the OS files (which are not &quot;your&quot; files) are safe and intact, it makes restoring from backup a lot easier. Compared with being hosed as an Administrator where you have to restore the OS and apps before you can think about getting your backups, that&#8217;s a great advantage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566163">
				<div id="div-comment-566163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Grow up</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566163">
			November 8, 2007 at 9:48 am</a>		</div>

		<p>Kuwanger wrote:</p>
<p>Personally, I&#8217;m just confused about the &#8220;If you have relatively small chunks of sensitive data, the solution I&#8217;ve seen recommended is to use CryptProtectData and CryptUnprotectData.&#8221; &nbsp;Is the recommendation being cited to give an example of a bad solution?</p>
<p>[I added that because if I didn&#8217;t say anything, people would complain, &#8220;No fair telling us what not to do without telling us what we should do.&#8221; And then when I do add the information, people get confused. So it&#8217;s either complaints or confusion. I think I was better off with complaints. -Raymond]</p>
<p>This is a &#8220;no middle ground&#8221; argument, and you should be ashamed. &nbsp;You &#8216;added the information&#8217;, but you did not actually advise people what do to, you reported second hand advice.</p>
<p>Grow up and stop whining like a baby.</p>
<div class="post">[<i>I gave the best information I had. Sorry that wasn&#8217;t good enough for you. Maybe you were expecting something authoritative? Sorry, this blog is not authoritative. You should know that by now. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566173">
				<div id="div-comment-566173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">..</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566173">
			November 8, 2007 at 10:43 am</a>		</div>

		<blockquote><p>
  &gt; And, yes, that would be great. Insulating everyone else from the folly or bad luck of one person is a great practice to follow if you can.
</p></blockquote>
<p>Except that most of the cars only have the driver in it.</p>
<blockquote><p>
  &gt; Alternatively, you could change the emphasis in your other sentence to &quot;it can only delete MY files?&quot;. Yup, all the files belonging to your cow-orkers, family members, housemates, etc&#8230; (assuming they have their own non-admin accounts, which they should, even if only for conveniences like having their own bookmarks, address books, email accounts, etc&#8230;) will be fine.
</p></blockquote>
<p>Never seen a multiuser system which isn&#8217;t also a terminal server. Every single workstation I&#8217;ve seen is used by a single user. The only case I&#8217;ve seen apart from it is family PCs but usually all users share the same account for a number of reasons (not last being idle).</p>
<blockquote><p>
  &gt; On top of that, if the OS files (which are not &quot;your&quot; files) are safe and intact, it makes restoring from backup a lot easier. Compared with being hosed as an Administrator where you have to restore the OS and apps before you can think about getting your backups, that&#8217;s a great advantage.
</p></blockquote>
<p>You know the OS files are the only ones you know to have a backup for sure. The inconvenience is very minor, compared to &quot;find the backup&quot;, &quot;hoping it exists&quot;, &quot;hoping it&#8217;s readable&quot; and so on.</p>
<p>I really prefer the machine to smoke out, auto destroy itself but present me a safe harddisk with my data intact in it. Everything else is something I can buy. Even time (I want my machine setup faster ? Buy a new one preinstalled. I want my wedding photos back ? no chance).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566183">
				<div id="div-comment-566183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Grow Up</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566183">
			November 8, 2007 at 11:50 am</a>		</div>

		<p>[I gave the best information I had. Sorry that wasn&#8217;t good enough for you. Maybe you were expecting something authoritative? Sorry, this blog is not authoritative. You should know that by now. -Raymond]</p>
<p>I know that. &nbsp;The original poster might not. &nbsp;Why not tell him calmly, instead of throwing all your toys out the pram?</p>
<p>It doesn&#8217;t need to be a nitpick-corner-like-thing (I hate those); a friendly &#8220;sorry X, I just picked that example randomly. &nbsp;This is not the authoritative way to do it &#8211; I leave finding that as an excercise for the reader. &nbsp;(I don&#8217;t know.)&#8221;</p>
<div class="post">[<i>That statement applies to everything I write. Nothing here is authoritative. I write stuff, and it&#8217;s up to you whether or not you believe it. I don&#8217;t repeat it in every article because people hated it when I did. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566203">
				<div id="div-comment-566203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kuwanger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566203">
			November 8, 2007 at 5:42 pm</a>		</div>

		<p>&#8216;[I added that because if I didn&#8217;t say anything, people would complain, &#8220;No fair telling us what not to do without telling us what we should do.&#8221;&#8216;</p>
<p>Except you didn&#8217;t tell us what we should do. &nbsp;You told us what someone else told us we should do.</p>
<p>&#8216;And then when I do add the information, people get confused. So it&#8217;s either complaints or confusion. I think I was better off with complaints. -Raymond]&#8217;</p>
<p>Yes, I was confused because as others pointed out, the &#8220;solution&#8221; is just a step in obfuscation. &nbsp;And passing off the bad advice/information of others, even if it&#8217;s non-authoritative, doesn&#8217;t seem like the best thing to do; even while not being under the authoritative cloud of &#8220;Microsoft employee&#8221;, people do hold you to some authority as &#8220;general computer programmer guy&#8221; either spreading a rumor he heard or possibly passing on advice he&#8217;s heard from others that at least on its face sounds reasonable.</p>
<p>If you really want to claim absolutely no authority, then fine. &nbsp;But then you&#8217;ll really come up with a better mental excuse to removing/commenting to comments than &#8220;but that&#8217;s wrong and people might take it to be authoritative in some way&#8221;. &nbsp;Otherwise, you really should include those little social niceties of clarifying your involvement in advice.</p>
<p>Well, all of the above advice/rant/whatever-you-wish-to-call-it assumes that you wish your blog to be sensical in some way and not just a collection of obtuse arbitrariness.</p>
<div class=post>[<i>The conclusion from the previous round of arguing about this was that I didn&#8217;t have to reiterate &#8220;This information is not authoritative&#8221; in every blog article. I have no current intention of revisiting the issue any time soon. (And I did clarify my involvement: I said that it was a recommendation of other people, not me personally.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566193">
				<div id="div-comment-566193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566193">
			November 8, 2007 at 4:59 pm</a>		</div>

		<p>@..</p>
<p>&quot;I will begin to consider computer security something interesting and well implemented when processes will have different permissions even on minor operations. &quot;Why that download manager is trying to open my address book ? Denied! Why that IM app is deleting a picture file ? DEEENIEEEED!&quot;&quot;</p>
<p>The problem here is that I&#8217;m not convinced there is a good way to do this. How does the OS know that the download manager shouldn&#8217;t be able to open your address book, but your mailer should? They are both just processes to it, ruing a specific image.</p>
<p>I can only think of a few ways to implement fine-grained controls, and they all suck:</p>
<p>1. Make the user specify it for each program. Most people won&#8217;t do it.</p>
<p>2. Have something so the first time a program tries to open your address book, prompt the user. Sucks because it&#8217;s really really obnoxious, and you shouldn&#8217;t ask people questions they don&#8217;t know how to answer.</p>
<p>3. Programs come with the permissions they should have. May help with programs with plugin architectures (X says that it shouldn&#8217;t open your address book, but malicious plugin Y is trying to), but most malware will just come with all the permissions set.</p>
<p>4. Trust the OS vendor to say what programs should be able to do what. Sucks because new programs, or new builds of programs, are screwed, and because you may not *want* to trust the OS vendor for that.</p>
<p>5. Trust a third party to say what programs should be able to do what. Sucks for the same reasons as #4.</p>
<p>6. A slightly more reasonable alternative is to do some combination. For instance, follow #2 if a program is signed, but #1 if not. Or follow #4 if a program is in the database, but #1 if not. But it&#8217;s still obnoxious when it reverts to #1 (or even worse, when it just default denies).</p>
<p>The only approach that seems potentially reasonable (at least until computers can read your mind) is some sort of learning thing, where the OS learns what permissions your software should have. But then what happens for something new?</p>
<p>I don&#8217;t know if there is a way to do that which works well enough. It may just be easier to live with the problems that come from systems that are more insecure. Remember, there is nothing inherently wrong about being insecure; the problem with it is that it can cost you later (in time, money, etc.). If the costs of &quot;fixing&quot; the problem are higher than the costs of the problem, then it&#8217;s probably not worth doing.</p>
<p>@.. (in a later post)</p>
<p>&quot;Except that most of the cars only have the driver in it.&quot;</p>
<p>But most cars aren&#8217;t the only ones on the road, which means that other drivers aren&#8217;t insulated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566213">
				<div id="div-comment-566213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">..</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566213">
			November 9, 2007 at 1:34 am</a>		</div>

		<p>@Evan</p>
<blockquote><p>
  &gt; But most cars aren&#8217;t the only ones on the road, which means that other drivers aren&#8217;t insulated.
</p></blockquote>
<p>What does really help here is ACLs on network drives; I didn&#8217;t say the current security measures should be removed and replaced, I said that they are like, 5% of what we really need. For what it matters botnets, etc. you can do quite some damager with standard users accounts; sure you will not (depending on the OS) be able to use the network card in promiscuous mode or send RAW IP packets or forge IP packets with invalid addresses.. but nothing stops you from sending an email, or opening connections.</p>
<blockquote><p>
  &gt; The problem here is that I&#8217;m not convinced there is a good way to do this. How does the OS know that the download manager shouldn&#8217;t be able to open your address book, but your mailer should? They are both just processes to it, ruing a specific image.
</p></blockquote>
<p>Probably the whole concept should be revisited for true. For example, apart for private files of the app (with which it can do what it wants), all files should be inaccessible by default, with inaccessible meaning also not enumerable. Access would be granted only after &nbsp;an open dialog, drag&amp;drop or doubleclick in folder. All of these should be implemented and insulated so that emulation would not be possible (for example not being able to enumerate files and opening them using tokens instead of filenames). Removing should be allowed only by the shell (which should not be a standard process anymore.. stop an useless generalization). Messaging between apps removed, allowing only sockets or shared memory for IPC (that is, removing the hole where every process can send commands to the others using SendMessage or similars). We can go on. For sure it&#8217;s not something you can plug in an existing architecture and pretend to work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566223">
				<div id="div-comment-566223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kuwanger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566223">
			November 9, 2007 at 4:50 am</a>		</div>

		<p>&#8216;[The conclusion from the previous round of arguing about this was that I didn&#8217;t have to reiterate &#8220;This information is not authoritative&#8221; in every blog article.&#8217;</p>
<p>Which leaves me to wonder the point of your blog, if nothing you say is authoriative. &nbsp;Perhaps I&#8217;d feel differently if all of your blogs was based on readily available (ie, avaialble to the general populace) information and didn&#8217;t include follow-ups based on communications between Microsoft employees.</p>
<p>&#8216;I have no current intention of revisiting the issue any time soon.&#8217;</p>
<p>Fine. &nbsp;</p>
<p>&#8216;(And I did clarify my involvement: I said that it was a recommendation of other people, not me personally.) -Raymond]&#8217;</p>
<p>See, that doesn&#8217;t entirely clarify your involvement. &nbsp;Are you quoting a good friend or an authority that you trust? &nbsp;Are you qouting a random stranger on the street? &nbsp;Did you put very little thought into the validity of the statement? &nbsp;Did you put heavy thought into the validity of the statement, possibly as far as a proof? &nbsp;The only thing that is clear is that the information didn&#8217;t directly come from you. &nbsp;I do hope that you do some filtering of information provided to you that you pass on to others. &nbsp;But, given how you don&#8217;t want to claim any authority behind your words, I can only really hold it to the same level of a fiction writer trying to &#8220;fill in the space&#8221; that&#8217;s left from coming up with other crazy ideas of which they wish to claim no responsibility.</p>
<div class="post">[<i>To answer your questions I would have had to do more research, which I didn&#8217;t want to do. That&#8217;s why this is a blog not a textbook. Perhaps you&#8217;d be happier if I didn&#8217;t accept corrections from other Microsoft employees? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566333">
				<div id="div-comment-566333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566333">
			November 9, 2007 at 2:58 pm</a>		</div>

		<p>Evan, are you familiar with .netfx&#8217;s security permissions? I am not entirely fluent in that area but I think it does implement process level security nicely. You decorate your code with the permissions you need and during startup CLR verifies that requested permisssions can be made available, otherwise, the process doesn&#8217;t even start in the first place. You also have the option to make the CLR specifically revoke certain permissions you know you will never need.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566363">
				<div id="div-comment-566363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566363">
			November 9, 2007 at 4:12 pm</a>		</div>

		<p>Raymond said : &#8220;If a frequently used buffer is paged out, then your program is thrashing and protecting 10 pages from being paged out is going to make the thrashing worse (since those pages become unavailable for relieving the thrashing).&#8221;</p>
<p>If my program locks a buffer size of a L1 cache and uses it to stream say 2GB of data through it, then if the OS decides to page something out while caching input and output files, I would rather that it pages out <em>anything_else_but_that_buffer</em>. I just can&#8217;t trust the OS to do that, that is why I lock the buffer.</p>
<p>You are saying that my program is trashing, why are you making such an assumption?</p>
<p>What if Indexer has decided that it is time to update its database? What if antivirus has decided that it should run its monthly full system scan? Or the defragmenter? What if some other program starts leaking memory and using 100% CPU? Should I not try to prevent them from degrading my code&#8217;s performance?</p>
<div class=post>[<i>&#8220;You are saying that my program is trashing, why are you making such an assumption?&#8221; Thrashing = insufficient memory to hold working set. Frequently used memory = always in working set. Non-working set memory is paged out before working set memory. If working set memory is being paged out, then there must not be enough memory to hold the working set. Therefore, you&#8217;re thrashing. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566373">
				<div id="div-comment-566373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566373">
			November 9, 2007 at 4:15 pm</a>		</div>

		<p>Kuwanger, stop boring Raymond to death please. He has the right to write as he sees fit on his own blog. If you don&#8217;t like it go away, it is his blog, not yours. He is setting the rules, not you. Even if they are wrong you can do nothing about it except bitch and moan which annoys the hell out of everyone here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566383">
				<div id="div-comment-566383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566383">
			November 9, 2007 at 4:31 pm</a>		</div>

		<p>Tanveer said : &quot;Igor, are you referring to this CreateRemoteThread&#8230;&quot;</p>
<p>Yes I am. If you already have SeDebugPrivilege, you could use NtSystemDebugControl() to gain full control over the system. Why bother reading the process memory when you can execute in its context and do whatever you want from the inside?</p>
<p>An example of dumping the physical memory using NtSystemDebugControl():</p>
<p><a rel="nofollow" target="_new" href="http://www.ntsecurity.nu/onmymind/2007/2007-02-04.html" rel="nofollow">http://www.ntsecurity.nu/onmymind/2007/2007-02-04.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566413">
				<div id="div-comment-566413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566413">
			November 9, 2007 at 6:32 pm</a>		</div>

		<p>@Tanveer Badar</p>
<p>&quot;Evan, are you familiar with .netfx&#8217;s security permissions? I am not entirely fluent in that area but I think it does implement process level security nicely. You decorate your code with the permissions you need and during startup CLR verifies that requested permisssions can be made available, otherwise, the process doesn&#8217;t even start in the first place. You also have the option to make the CLR specifically revoke certain permissions you know you will never need.&quot;</p>
<p>You&#8217;re missing the point&#8230; the problem isn&#8217;t how to implement the mechanism, it&#8217;s how to specify the policy.</p>
<p>How does the OS determine if the permissions can be made available to a specific application? In other words, if X.exe specifies that it needs write permission to same file, how does the OS determine if it should grant it?</p>
<p>In other words, say thunderbird.exe and virus.exe both specify the same permissions in their .netfx section. The OS needs to determine to give thunderbird.exe permission to, say, read the address book, and deny virus.exe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566463">
				<div id="div-comment-566463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kuwanger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566463">
			November 9, 2007 at 11:42 pm</a>		</div>

		<p>@Igor: &#8220;Kuwanger, stop boring Raymond to death please. He has the right to write as he sees fit on his own blog. If you don&#8217;t like it go away, it is his blog, not yours. He is setting the rules, not you. Even if they are wrong you can do nothing about it except bitch and moan which annoys the hell out of everyone here.&#8221;</p>
<p>If Raymond tells me he doesn&#8217;t want to see me commenting more on here, then I won&#8217;t. &nbsp;I don&#8217;t really say I comment very often anyways (though the few times I have, I tend to respond when people respond back). &nbsp;I am sorry if the &#8220;bitch[ing] and moan[ing] is annoying the hell out of [you]&#8221;. &nbsp;I could probably come up with some way to disparage other commenters, but I won&#8217;t. &nbsp;It&#8217;s really up to Raymond to decide if he wants someone posting to his blog or not. &nbsp;And I really do hope that people, like you, can deal with the few times a commenter, like me, seem a bit grating to them without feeling a need to force them out of commenting.</p>
<p>Short of someone spamming/trolling/committing-some-crime-on the comment board, I don&#8217;t really see the reason to wish someone to leave. &nbsp;But, again, I happily defer to Raymond&#8217;s wishes on such a matter. &nbsp;But, I won&#8217;t defer to yours, Igor.</p>
<div class="post">[<i>I prefer to let other people do my dirty work. That way it feels more consensus-y. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566483">
				<div id="div-comment-566483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Not Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566483">
			November 10, 2007 at 6:00 am</a>		</div>

		<p>Kuwanger, I do believe Igor is referring to the fact that even though you don&#8217;t often comment here, when you do, it is generally a long, entirely boring, pointless argument with Raymond over minute technicalities and egos, and your apparent insistence on having the last word. You also appear to be incapable of admitting when you are wrong, agreeing to disagree, and realising when to just drop your argument because nobody cares what you&#8217;re saying anyways.</p>
<p>Almost every comment of yours (the ones that I&#8217;ve read anyways, I mostly skip over whenever I see your name for this precise reason) seems to involve arguing with Raymond because either</p>
<p>a) he is Raymond Chen, and you feel you will score some sort of nerd points if you are able to win an argument with him; or</p>
<p>b) he works for Micro$$$$$$$oft and so by sticking it to Raymond you are actually sticking it to THE MAN, billy goats himself; or</p>
<p>c) you are actually Norman Diamond in disguise, and this is your sockpuppet account, kinda like twitter and Erris on slashdot.</p>
<p>Regardless, you actually don&#8217;t contribute much value to the conversation. Please stop the trolling.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566453">
				<div id="div-comment-566453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kuwanger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566453">
			November 9, 2007 at 11:30 pm</a>		</div>

		<p>&#8216;[To answer your questions I would have had to do more research, which I didn&#8217;t want to do. That&#8217;s why this is a blog not a textbook. Perhaps you&#8217;d be happier if I didn&#8217;t accept corrections from other Microsoft employees? -Raymond]&#8217;</p>
<p>No, you&#8217;re missing my general point. &nbsp;This whole blog entry is based upon you believing you knew better than the documentation. &nbsp;And so people who *would* do research are left to either take your word for it or try to disassemble/gain access to the source code underlying the technology you discuss to verify whether you&#8217;re right or not. &nbsp;The fact that someone else at Microsoft is there to correct you that, yes, the documentation is correct underscores how you bow to the authority of *others* in Microsoft.</p>
<p>As for your quoting of others, my general understanding is that you created this blog as a means to inform others (if nothing else, to tell old stories). &nbsp;But, spreading rumors doesn&#8217;t really work to inform people unless you make it clear that what you&#8217;re saying is a rumor. &nbsp;Of course, the fact that you didn&#8217;t go out of your way to clarify or harp upon the information you provided does give me, and others, the point that what you mention is probably a rumor. &nbsp;It just seemed a bit strange that you&#8217;d go quoting a rumor that, with a little bit of thought, could be proven as silly. &nbsp;Isn&#8217;t one of your largest complaints the way in which rumors are spread by ill-informed people as if they were the documentation, not so much because you&#8217;re against rumors, necessarily, but because it creates further burdens that have to be corrected and resolved upon?</p>
<p>But, then, I guess one really shouldn&#8217;t be going to your blog for any sort of programming advice. &nbsp;It is a great way to hear interesting stories, though.</p>
<div class="post">[<i>Just because I give advice doesn&#8217;t mean that it&#8217;s right. You have to evaluate it for yourself. I write what I understand to be true, but my understanding can be wrong. As it was in this case. If you&#8217;re looking for infallibility, this is the wrong place. One of my largest complaints is how people treat what I write as authoritative, which creates burdens upon me that I don&#8217;t wish to bear. It takes me an hour to write each entry. Imagine how much longer it&#8217;d take if I had to research each one to the point of certainty. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566493">
				<div id="div-comment-566493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566493">
			November 10, 2007 at 10:39 am</a>		</div>

		<p>&quot;In other words, say thunderbird.exe and virus.exe both specify the same permissions in their .netfx section. The OS needs to determine to give thunderbird.exe permission to, say, read the address book, and deny virus.exe.&quot;</p>
<p>In thunderbird.exe&#8217;s documentation, you could say that it requires the ability to read the users mail, or whatnot to work. Then the user can make an informed choice about what security privileges it needs. The way I see it, if the user is installing a different Email client than the one included in Windows (Which should already have the correct permissions), then they should be informed enough to know it requires the ability to read their mail.</p>
<p>Of course, it&#8217;s easy to underestimate how stupid people could be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566513">
				<div id="div-comment-566513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aidan Thornton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566513">
			November 10, 2007 at 7:10 pm</a>		</div>

		<p>Actually, one of the added features in Vista (thanks to the demands of the movie industry for better copy protection) is &quot;protected processes&quot;, whose memory can&#8217;t be read by other programs (amongst other things).</p>
<p>Of course, I think they have to be signed by a special key (for obvious reasons, especially since they&#8217;re immune to virus scanners). Unless you&#8217;re working on behalf of the media industry, you can probably forget about being able to use one yourself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566533">
				<div id="div-comment-566533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566533">
			November 11, 2007 at 12:53 am</a>		</div>

		<p>&quot;In thunderbird.exe&#8217;s documentation, you could say that it requires the ability to read the users mail, or whatnot to work. Then the user can make an informed choice about what security privileges it needs. The way I see it, if the user is installing a different Email client than the one included in Windows (Which should already have the correct permissions), then they should be informed enough to know it requires the ability to read their mail.</p>
<p>Of course, it&#8217;s easy to underestimate how stupid people could be.&quot;</p>
<p>But that&#8217;s not the point. This is supposed to protect against malware anyway, which almost by definition usually doesn&#8217;t disclose what it does.</p>
<p>The security threats that &quot;the application says it shouldn&#8217;t have this right, so we&#8217;ll deny it&quot; solve are a small minority of security threats.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566543">
				<div id="div-comment-566543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566543">
			November 11, 2007 at 1:40 am</a>		</div>

		<p>&quot;But that&#8217;s not the point. This is supposed to protect against malware anyway, which almost by definition usually doesn&#8217;t disclose what it does.&quot;</p>
<p>Yes, but combined with <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/11/06/5924058.aspx#6031507" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/11/06/5924058.aspx#6031507</a> and only letting untrusted programs access their own sandbox, it could be a viable security policy that *does* protect from malware.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566563">
				<div id="div-comment-566563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566563">
			November 11, 2007 at 8:01 pm</a>		</div>

		<p>Raymond said : &quot;If working set memory is being paged out, then there must not be enough memory to hold the working set. Therefore, you&#8217;re thrashing.&quot;</p>
<p>I always take care not to use too much physical memory. Problem is that I can&#8217;t monitor what the user (or other resident applications or the OS itself) is doing.</p>
<p>Are you claiming that another program cannot cause my program&#8217;s working set to be paged out?</p>
<p>Kuwanger said : &quot;But, I won&#8217;t defer to yours, Igor.&quot;</p>
<p>You know what? Compared to you even Norman Diamond deserves respect.</p>
<p>True, he nags, but at least he doesn&#8217;t force anyone to share his point of view or to do things his way like you are trying to do with Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-566573">
				<div id="div-comment-566573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codeka.com/blogs' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566573">
			November 11, 2007 at 9:18 pm</a>		</div>

		<p>&quot;Are you claiming that another program cannot cause my program&#8217;s working set to be paged out?&quot;</p>
<p>Are you claiming that the other program is less important than yours?</p>
<p>Besides, that&#8217;s not the point anyway. If there is so much memory contention going on that your working set is being paged out, then VirtualLock isn&#8217;t going to help you anyway&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-566583">
				<div id="div-comment-566583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-566583">
			November 12, 2007 at 1:03 am</a>		</div>

		<p>&quot;Are you claiming that the other program is less important than yours?&quot;</p>
<p>The programs listed in the example are supposed to be background tasks that do not bother the user. &nbsp;In the eyes of the user, they are less important than the program he is actively using.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-642393">
				<div id="div-comment-642393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.microsoft.co.il/blogs/sasha/archive/2008/06/27/non-paging-clr-host.aspx' rel='external nofollow' class='url'>All Your Base Are Belong To Us</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071106-00/?p=24573#comment-642393">
			June 27, 2008 at 1:37 pm</a>		</div>

		<p>I&amp;#39;ve just uploaded a new open-source project called &amp;quot; Non-Paged CLR Host &amp;quot; to CodePlex</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>