<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (34)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-905493">
				<div id="div-comment-905493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905493">
			April 5, 2011 at 7:12 am</a>		</div>

		<p>The apparent invariant &quot;the second parameter equals the third parameter plus one&quot; doesn&#39;t necessarily hold. &nbsp;The second parameter may be less than, equal to, or greater than the third parameter, so the call might actually reduce the value of g_dwUniqueId. &nbsp;In other words, this code is useless.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-905503">
				<div id="div-comment-905503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wizou</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905503">
			April 5, 2011 at 7:13 am</a>		</div>

		<p>It may not proceed to the incrementation if another thread updated the value of g_dwUniqueId in the mean time.</p>
<p>Moreover, dwUniqueId receive the initial value of g_dwUniqueId, so we have no idea if the incrementation occurred.</p>
<p>The compiler might also decide to read the value of g_dwUniqueId twice while building the stack of parameters so g_dwUniqueId &amp; g_dwUniqueId+1 might have unexpected value if changed from other threads.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-905513">
				<div id="div-comment-905513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905513">
			April 5, 2011 at 7:15 am</a>		</div>

		<p>Hmmm. So it&#39;s &quot;let&#39;s ignore InterlockedIncrement, let&#39;s build a broken version using a more complex function&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-905523">
				<div id="div-comment-905523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905523">
			April 5, 2011 at 7:15 am</a>		</div>

		<p>It&#39;s far more complicated than using InterlockedIncrement()?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-905533">
				<div id="div-comment-905533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Lyon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905533">
			April 5, 2011 at 7:17 am</a>		</div>

		<p>That line of code requires the reader to think too hard (because the writer didn&#39;t think enough). Replace it with the obviously bug-free:</p>
<p>&nbsp; &nbsp;dwUniqueId = InterlockedIncrement(&amp;g_dwUniqueId);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-905543">
				<div id="div-comment-905543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905543">
			April 5, 2011 at 7:20 am</a>		</div>

		<p>The call would seem to be useless since you don&#39;t make a copy of g_dwUniqueId like in the linked example&#8230; so it would succeed even if the value changes due to another usage of this piece of code. &nbsp;Example, two threads:</p>
<p>g_dwUniqueId = 0</p>
<p>Thread 1: Compute g_dwUniqueId+1, result: 1</p>
<p>Thread 2: Compute g_dwUniqueId+1, result: 1</p>
<p>Thread 1: Call InterlockedCompareExchange(Pointer to 0, 1, 0). &nbsp;First argument dereferenced is == third argument, so set to second argument.</p>
<p>Thread 2: Call InterlockedCompareExchange(Pointer to 1, 1, 1). &nbsp;First argument dereferenced is == third argument, so set to second argument.</p>
<p>And of course even if it did catch the problem in thread 2 (maybe it does? &nbsp;I&#39;ve never used this function before) the return value is never checked, and there is no loop to try again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-905553">
				<div id="div-comment-905553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905553">
			April 5, 2011 at 7:23 am</a>		</div>

		<p>You need to call InterlockedCompareExchange in a loop until it returns the old unique ID that you passed as the last argument: only then is the new value successfully stored.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-905563">
				<div id="div-comment-905563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Austin Donnelly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905563">
			April 5, 2011 at 7:54 am</a>		</div>

		<p>InterlockedIncrement() is what&#39;s needed here, as others have commented.</p>
<p>But also, this is a global, so will quickly become a scalability bottleneck.</p>
<p>Ideally, there&#39;d be a separate counter for each CPU, each allocating a sequence of non-overlapping integers. &nbsp;And those counters should be on separate cache lines, to avoid cache conflicts between the CPUs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson even thread-even depth-1" id="comment-905573">
				<div id="div-comment-905573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905573">
			April 5, 2011 at 8:12 am</a>		</div>

		<p>In addition to the other valid criticisms, I&#39;d usually (not always, but usually) criticise the act of trying to write such code in the first place. :)</p>
<p>It&#39;s one of those things, like implementing your own containers, that&#39;s extremely difficult to get completely right, even for top programmers. It&#39;s better, if possible, to use building blocks provided by a library/framework/platform that was written by experts (who will have got things wrong, too), subjected to serious review &amp; testing (and maybe formal proof) and then used by thousands of people (and thus less likely to have any lingering bugs, or at least have buggy behaviour well documented). Rolling your own, for one project, is often a recipe for &quot;impossible&quot; bugs and phantom, unreproducible crashes.</p>
<p>I mean, a lot of code that uses basic threads and locks is only one unexpectedly long page-fault away from crashing; doing away with the locks makes things even trickier. And how many threading/synchronisation libraries actually got it right first time?</p>
<p>I&#39;m not criticising what Raymond is doing, which is helping people understand this kind of stuff and writing about an interesting topic. I&#39;m just saying that writing a lock-free algorithm is not to be done on a whim. Don&#39;t catch yourself doing &quot;premature optimisation&quot; or optimisation of the wrong thing.</p>
<p>Sometimes it is the right thing to do, of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-905593">
				<div id="div-comment-905593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905593">
			April 5, 2011 at 8:31 am</a>		</div>

		<p>I write lock free algorithms.</p>
<p>I write proofs of correctness for lock free algorithms.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-905603">
				<div id="div-comment-905603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905603">
			April 5, 2011 at 8:39 am</a>		</div>

		<p>The code only works on certain optimization settings.</p>
<p>Try this fragment:</p>
<p>volatile scv;</p>
<p>do {</p>
<p>&nbsp; scv = g_dwUniqueId;</p>
<p>} while (InterlockedCompareExchange(&amp;g_dwUniqueId,</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;scv+1,</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;scv) != scv);</p>
<p>dwUniqueId = scv;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-905633">
				<div id="div-comment-905633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Mol</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905633">
			April 5, 2011 at 8:49 am</a>		</div>

		<p>@Leo &#8212; Be careful of placing too much trust in &#39;Experts&#39;. Appeal to authority is, er, appealing, but experts are fallible, too. Most times we&#39;ve tried to do something necessarily complicated, we&#39;ve slammed into bug after bug in libraries and third-party code, and wound up having to do it ourselves.</p>
<p>Of course, some things we&#39;ve tried to do ourselves, we eventually found it more effective to use a library such as Boost. If it&#39;s a reasonable library with a reasonable license, we&#39;ve sometimes been able to clean it up to our needs. (I think the Boost code wound up ultimately being stripped out, though, with our own code used instead)</p>
<p>So, I guess, the moral is that the mirror view is valid, too. In some domains, rolling your own will be safer or more effective than using a third-party library.</p>
<p>Sometimes it is the right thing to do, of course. ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-905643">
				<div id="div-comment-905643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Barbie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905643">
			April 5, 2011 at 8:52 am</a>		</div>

		<p>Ah, &quot;lock-free&quot; algorithms. The very ones that use the LOCK x86 prefix on x86. There&#39;s no free lunch. Something, somewhere, has to play the atomic game, and that will always require some form of non-scalable feature. If you want a cross-thread unique id, use the thread-id as part of your id. No lock, no sync, no atomic&#8230; (well, as long as your threads are long living).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-905653">
				<div id="div-comment-905653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Mol</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905653">
			April 5, 2011 at 8:52 am</a>		</div>

		<p>@David Walker</p>
<p>There is a suite of instructions, and they&#39;ve been available since the 486, but there&#39;s no &#39;one instruction for all register widths&#39;, AFAIK. Also, I presume InterlockedIncrement is guaranteed to work on each of the platforms the NT kernel line has ever run on. (Meaning Alpha, x86, x86-64, Itanium&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-905673">
				<div id="div-comment-905673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905673">
			April 5, 2011 at 9:28 am</a>		</div>

		<p>Besides from obvious race condition with multiple access to the original variable in RC&#39;s example, keep in mind that InterlockedX functions operate on LONG type, not DWORD, not &#39;int&#39;, not anything else. If your g_dwIniqueId is a DWORD, it&#39;s wrong. LONG. Get used to using proper types. It will save you in the long run. We&#39;ve seen enough function pointer casts that are a bomb waiting to explode. The fewer casts, the less bugs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-905733">
				<div id="div-comment-905733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905733">
			April 5, 2011 at 12:09 pm</a>		</div>

		<p>Historically, InterlockedIncrement is allowed to return just the sign of the result, not the actual result, at least on x86. Before lock xadd, InterlockedIncrement used to be implemented with lock inc, which can only atomically return the sign of the result</p>
<div class="post">[<i>Yuhong, is that you? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-905743">
				<div id="div-comment-905743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905743">
			April 5, 2011 at 1:46 pm</a>		</div>

		<p>InterlockedIncrement first appeared on NT4. NT4 required a 486. I rest my case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-905753">
				<div id="div-comment-905753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905753">
			April 5, 2011 at 1:57 pm</a>		</div>

		<p>Joshua: Not so. The history of InterlockedIncrement/Decrement: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/06/127141.aspx" rel="nofollow">blogs.msdn.com/&#8230;/127141.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-905613">
				<div id="div-comment-905613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905613">
			April 5, 2011 at 8:42 am</a>		</div>

		<p>Back when I used to write code in assembly language, on IBM mainframes, on the VM platform, there were macros that performed interlocked increment and decrement using the hardware Compare and Swap instruction (HCPCOUNT and HCPMINUS with an optional parm to ask for the interlocked version). &nbsp;That is, the macro would expand to a few instructions that would load a value from storage into a register, increment the value in the register, perform a hardware Compare and Swap instruction between the register and the original storage location, test the return code from the Compare and Swap, and optionally try again in a loop.</p>
<p>It seemed to me that a lot of headache and performance issues could have been solved by getting the IBM 370/390/ESA hardware designers to implement a hardware &quot;Interlocked Increment&quot; instruction that would increment the value at a storage address and return its new value in the specified register that would go back to the caller. &nbsp;(I would probably treat the value as a signed fullword, and maybe have another instruction to increment or decrement a doubleword.)</p>
<p>I don&#39;t do assembly programming any more, but it still seems that, no matter what the platform, *in the hardware* is the place to implement things like this. &nbsp;That&#39;s even better than having experts write the macros for you. &nbsp;Hacking around with global spin-locks, or even worse, trying to roll your own code to do this kind of thing, and worrying about other processors or threads affecting what you do, seems like a mess. &nbsp;</p>
<p>In the x86/x64 world, I see that the InterlockedIncrement function (in C?) is documented with &quot;this function generates a full memory barrier (or fence) to ensure that memory operations are completed in order&quot;. &nbsp;Is there no atomic, single x86 or x64 instruction to increment the value at a real or virtual storage address? &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-905623">
				<div id="div-comment-905623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Mol</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905623">
			April 5, 2011 at 8:42 am</a>		</div>

		<p>InterlockedIncrement is obviously more desirable than InterlockedCompareExchange, as already noted.</p>
<p>If you want a unique number within a process, a 32-bit value may be insufficient in long-running scenarios. That depends on the application.</p>
<p>As noted, Interlocked methods risk scalability problems. That depends on the application.</p>
<p>As noted, writing your own code is probably an error. That depends on the needs of the application.</p>
<p>Someone noted per-CPU globals would be useful, too.</p>
<p>Another approach might be to use the 64-bit variant of InterlockedIncrement available in Vista kernels and later, if you&#39;re running on a 64-bit OS. That increases the pool of available identifiers, but also increases the scalability factor by forcing the coherency enforcement and copying of 64-bit values instead of 32-bit values.</p>
<p>A better approach might be to use a per-use-case counter for the unique value. This increases the scalability concerns as far as cache coherency, but confines the scope (and thus rate) of usage, mitigating that somewhat, and also mitigating the limited number of available identifier values. Combine with thread-local storage to reduce the cache coherency problems (the kernel&#39;s scheduler will try to keep threads in localized places as much as possible).</p>
<p>Another approach may be to use CoCreateUUID instead of the approach shown here. That meets the requirement of a unique number within the process as a subset of producing a *globally* unique number. The drawback, of course, are that 128 bits instead of 32 bits will result in additional overhead. You&#39;re already making a system call with Interlocked*, so CoCreateUUID isn&#39;t necessarily inherently a slower operation on that particular boundary. (Though the implementation will probably be slower than that of InterlockedIncrement)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-905663">
				<div id="div-comment-905663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905663">
			April 5, 2011 at 9:07 am</a>		</div>

		<p>@Michael Mol: The Interlocked* functions are most definitely *not* system calls. &nbsp;The whole point of the Interlocked* functions is to be able to do certain operations very quickly, even when they&#39;re contention among threads. &nbsp;System calls are sloooooow.</p>
<p>On x86, my system implements Interlocked/Increment/Decrement/ExchangeAdd as &quot;lock xadd&quot; and InterlockedExchange/CompareExchange as &quot;lock cmpxchg&quot; (Exchange loops, CompareExchange does not).</p>
<p>More information from the Intel® 64 and IA-32 Architectures Software Developer&#39;s Manuals (<a rel="nofollow" target="_new" href="http://www.intel.com/products/processor/manuals/" rel="nofollow">http://www.intel.com/&#8230;/manuals</a>):</p>
<p>lock prefix: &quot;LOCK—Assert LOCK# Signal Prefix&quot;, Vol 2A, p. 3-606</p>
<p>cmpxchg instruction: Vol 2A, p. 3-192</p>
<p>xadd instruction: Vol 2B, p. 4-489</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-905793">
				<div id="div-comment-905793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905793">
			April 5, 2011 at 4:40 pm</a>		</div>

		<p>That code is perfectly valid&#8230;</p>
<p>&#8230; as long as it&#39;s protected by a critical section. &nbsp;But if you&#39;re already protected you might as well go with dwUniqueId = g_dwNextUniqueId++;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson even thread-even depth-1" id="comment-905713">
				<div id="div-comment-905713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905713">
			April 5, 2011 at 11:30 am</a>		</div>

		<p>@Michael Mol: It&#39;s not that I&#39;m placing lots of trust in experts to get this stuff right. As I said, they make mistakes with this kind of code as well. Lots of mistakes, as the errata for any (maintained) book or library that touches on threading will show.</p>
<p>My point is that I place *even less* trust in the non-experts. An expert should have a really good reason to write this kind of code (and if they don&#39;t have a good reason, I&#39;d question whether they are really an expert). A non-expert shouldn&#39;t attempt to write it at all. (Unless they are just experimenting with concepts for their own enjoyment/curiosity and not inflicting the results on others. Nothing wrong with that, and it&#39;s one way to become more of an expert.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-905833">
				<div id="div-comment-905833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bcs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905833">
			April 5, 2011 at 7:16 pm</a>		</div>

		<p>On the topic of atomic ASM ops not being &quot;lock free&quot; (in that, IIRC, they can halt all memory accesses across all cores): that&#39;s only relevant if you do more than one of them because any mutex will include an atomic op. You might as well make that op do the work you need rather than make it part of your overhead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-905843">
				<div id="div-comment-905843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ferose Khan J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905843">
			April 5, 2011 at 10:53 pm</a>		</div>

		<p>If 2 threads call this statement at the same time.</p>
<p>g_dwUniqueId = 0</p>
<p>Thread 1=&gt; increments g_dwUniqueId to 1 and returns 0</p>
<p>Thread 2=&gt; tries to increment but fails since g_dwUniqueId is already incremented to 1 and returns 0</p>
<p>both call will get the same value which is not unique. I think it may not work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-905853">
				<div id="div-comment-905853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905853">
			April 5, 2011 at 11:00 pm</a>		</div>

		<p>the mathematical operations enclosed in the parenthesis are not safe and it&#39;s not protected. g_dwUniqueId is modified outside, the value could have been in an undefined one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-905863">
				<div id="div-comment-905863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905863">
			April 5, 2011 at 11:08 pm</a>		</div>

		<p>I&#39;m surprised no one has mentioned yet that g_dwUniqueId must be volatile if its address is passed as the first parameter. I think this means that the reads for the second and third arguments must happen separately. So g_dwUniqueId might be different for the second argument than for the third. This function could succeed in doing the exchange, but place the wrong value because the compiler read the variable for the second argument back when the value was smaller than when it read the variable for the third argument.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-905803">
				<div id="div-comment-905803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905803">
			April 5, 2011 at 4:50 pm</a>		</div>

		<p>That said, neither a critical section nor Interlocked* are what I would call &quot;lock-free&quot;. &nbsp;Perhaps a better way to meet the requirement of &quot;generate a unique number&quot; is to combine a thread identifier with an incrementing variable in thread-local storage.</p>
<div class="post">[<i>Interlocked* is &quot;lock-free&quot; in the sense that a thread that is using Interlocked* can be suspended without affecting other clients. (Wikipedia calls this &quot;obstruction-free&quot;.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-905963">
				<div id="div-comment-905963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Mol</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-905963">
			April 6, 2011 at 10:10 am</a>		</div>

		<p>@Phil The definition of g_dwUniqueId was never shown, so we don&#39;t technically know its type from the code snippet. g_dw leads us to infer that it&#39;s a DWORD, but doesn&#39;t tell us about any additional type modifiers. It could as easily have been volatile as not. I assumed it was, because I assumed the code would compile in the context in which it was intended.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-906023">
				<div id="div-comment-906023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brad Bellomo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-906023">
			April 6, 2011 at 11:43 am</a>		</div>

		<p>Raymond is not a college Freshman trying to write a lock free unique number generator. &nbsp;He wrote this code on purpose to teach us something.</p>
<p>This compiles to 2 instructions in assembly:</p>
<p>Store g_dwUniqueId + 1 in a register</p>
<p>Compare g_dwUniqueId to itself and assign it to the register value if it is equal.</p>
<p>g_dwUniqueId will always be equal to itself, so the compare will always assign the register value.</p>
<p>g_dwUniqueId might change between these instructions, in which case you&#39;d repeat a number 1 2 3 4 4 5 6 etc, making the result not unique.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-906073">
				<div id="div-comment-906073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-906073">
			April 6, 2011 at 2:24 pm</a>		</div>

		<p>Raymond, offense taken! I was spilling the beans on Windows internals long before Yuhong Bao! Just be grateful that I&#39;m just discussing a documented (albeit obsolete) API, instead of, say, telling everyone how the Windows CE guys implemented InterlockedXxx functions on CPUs without atomic instructions</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-906143">
				<div id="div-comment-906143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-906143">
			April 6, 2011 at 11:48 pm</a>		</div>

		<p>Most architectures implement an interlocked instruction for the pure purpose of atomic operation implementation in modern OSes.</p>
<p>ARM had to add a register-memory exchange instruction strictly for cases like this, even though it violates RISC principles (registers may only be loaded and unloaded by load-store, and a instruction can only do one thing). The exchange is the only instruction needed &#8211; from there you can implement test-and-set (foundation for ye olde spinlock) and the like.</p>
<p>Otherwise one had to resort to the ultimate lock &#8211; disabling interrupts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-906553">
				<div id="div-comment-906553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-906553">
			April 10, 2011 at 12:27 am</a>		</div>

		<p>@Worf: &quot;ARM had to add a register-memory exchange instruction strictly for cases like this, even though it violates RISC principles&quot;</p>
<p>Which is an interesting choice as LL/SC provides equal capability and is compliant with the RISC worldview. &nbsp;But then, ARM has never been a pure RISC system anyway: the LDM/STM multiple-register load and store instructions were included from the very beginning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-906723">
				<div id="div-comment-906723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110405-00/?p=11033#comment-906723">
			April 11, 2011 at 2:54 pm</a>		</div>

		<p>Wouldn&#39;t it be easier to build up your numbers from two parts? The first part you&#39;d get from a global counter with a proper lock, and the second would be a counter local to the thread. That way you have to pay the locking bill only once at thread start-up, and from then on you can generate unique numbers till the cows come home, without having to worry about whether you implemented your lock-free increment correctly.</p>
<div class="post">[<i>That would be helpful if the unique number generator was high-frequency. It so happens that in this example, the function was called pretty rarely! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>