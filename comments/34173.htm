<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-306523">
				<div id="div-comment-306523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306523">
			September 15, 2005 at 12:44 pm</a>		</div>

		<p>Whee, owner-drawn list items!  ;-)</p>
<p>(Or at least, that&#8217;s how I&#8217;d make the one set of characters larger.  Maybe there&#8217;s a better way, though; I&#8217;m sure that if so, the next post in this series will show it to us.  I&#8217;d like to see it, if it exists.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-306543">
				<div id="div-comment-306543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.highprogrammer.com/alan/' rel='external nofollow' class='url'>Alan De Smet</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306543">
			September 15, 2005 at 2:23 pm</a>		</div>

		<p>Interesting, but I&#8217;m far more curious about the core issue: Some languages (like Chinese) need to be larger to be legible.  Do Chinese language editions of Windows default to larger fonts?  If so, when English text is displayed on such a system, would it look exceptionally large to me?</p>
<p>Relatedly, you simply picked a multiplier (&quot;50% bigger looks good to me&quot;).  As far as I know there is no way to ask &quot;how big does this need to be to be legible&quot;, or &quot;how big does this character set want to be&quot;.</p>
<p>An interesting problem, and not one I&#8217;d considered before (having never needed to worry about any non-European languages).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-306563">
				<div id="div-comment-306563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306563">
			September 15, 2005 at 6:45 pm</a>		</div>

		<p>Owner-draw would break accessibility.</p>
<p>Alan De Smit: I don&#8217;t know the answer. It&#8217;s an interesting question. If I have time I may ask around.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-306573">
				<div id="div-comment-306573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan Evans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306573">
			September 15, 2005 at 7:39 pm</a>		</div>

		<p>(lf.lfHeight + lf.lfHeight) / 2 = lf.lfHeight.  That&#8217;s just adding two halves together to make the whole again.</p>
<p>lf.lfHeight * 1.5 is a 50% increase.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-306583">
				<div id="div-comment-306583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306583">
			September 15, 2005 at 8:12 pm</a>		</div>

		<p>Operator precedence.</p>
<p>lf.lfHeight = lf.lfHeight + (lf.lfHeight / 2);</p>
<p>That is, indeed, adding 50% to the original value.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-306603">
				<div id="div-comment-306603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306603">
			September 15, 2005 at 9:43 pm</a>		</div>

		<p>Wow, almost exactly something that I had to contend with yesterday and am wondering why.  I&#8217;m using MFC but I think under the covers it&#8217;s doing the same APIs:</p>
<p>&gt; if (!GetObject(GetWindowFont(m_hwndLV), sizeof(lf), &amp;lf)) {<br />
<br />&gt;  return -1;<br />
<br />&gt; }<br />
<br />&gt; lf.lfHeight += lf.lfHeight / 2; // 50% bigger<br />
<br />&gt; m_hfChinese = CreateFontIndirect(&amp;lf);<br />
<br />&gt; if (!m_hfChinese) return -1;<br />
<br />&gt; SetWindowFont(m_hwndLV, m_hfChinese, FALSE);</p>
<p>When I do code like that for a window on the screen, it works.  When I do code like that for a printed page, it shrinks the text instead of enlarging it.  Why?</p>
<p>In several of many tests, I commented out the line of code that did the same as this:<br />
<br />&gt; lf.lfHeight += lf.lfHeight / 2; // 50% bigger<br />
<br />So the newly created (indirectly) font was exactly identical to the original font, and the text on the printed page shrank even more.</p>
<p>Eventually I discovered that I had to do this:<br />
<br />@ lf.lfHeight = lf.lfHeight * 80 / 18;<br />
<br />just in order to get the result to print the same size as if I&#8217;d entirely omitted what should be a noop here.</p>
<p>Why?  And why only on printers but not on windows on the screen?</p>
<p>Of course after discovering that, I could proceed to make the change I really wanted in the logical font (and it worked).</p>
<p>Thursday, September 15, 2005 2:23 PM by Alan De Smet<br />
<br />&gt; Some languages (like Chinese) need to be<br />
<br />&gt; larger to be legible. Do Chinese language<br />
<br />&gt; editions of Windows default to larger fonts?</p>
<p>The default in Japanese is 9.  I&#8217;ve read that default in the US is 8 (I&#8217;ve installed a few from MSDN but never checked that) and I&#8217;ve read that the default for Chinese is the same as for Japanese.</p>
<p>&gt; If so, when English text is displayed on<br />
<br />&gt; such a system, would it look exceptionally<br />
<br />&gt; large to me? </p>
<p>I don&#8217;t know how to answer that question.  On a Japanese system, English text is the same height as Japanese text, though of course the average width is only half as wide.  On a US system from MSDN, usually I open Control Panel &#8211; Regional Options and set as much as possible to match Japanese.  On such a US system, in Notepad and Visual Studio 6 I also have to set the individual application&#8217;s options to use a Japanese font &#8212; with one exception.  The exception is that in Windows XP MSDN US version, Notepad displays Japanese characters even when I haven&#8217;t set a Japanese font, and in such cases Notepad picks a Japanese font just for those characters but it picks an unreadably small size.  If I set a font myself then Notepad uses a consistent size (height) for both Japanese and English.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-306613">
				<div id="div-comment-306613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306613">
			September 15, 2005 at 9:55 pm</a>		</div>

		<p>Alan De Smit:</p>
<p>    With my observation, Chinese characters are displayed somehow larger by occupying some space between lines. If normal character size of English char is 8, then for Chinese it&#8217;s 12.</p>
<p>    The observation is made through typing with &quot;Fixedsys&quot; font in Notepad.(I want fixed width font for clearer comparison)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nicholas-allen odd alt thread-odd thread-alt depth-1" id="comment-306623">
				<div id="div-comment-306623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Nicholas+Allen' rel='external nofollow' class='url'>Nicholas Allen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306623">
			September 15, 2005 at 10:47 pm</a>		</div>

		<p>Norman-</p>
<p>Could it be that you&#8217;ve got calculations for the sizes in pixels and you&#8217;re seeing the difference in DPI between the monitor and printer?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-306633">
				<div id="div-comment-306633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306633">
			September 16, 2005 at 12:24 am</a>		</div>

		<p>Thursday, September 15, 2005 10:47 PM by Nicholas Allen </p>
<p>&gt; Norman- Could it be that you&#8217;ve got<br />
<br />&gt; calculations for the sizes in pixels and<br />
<br />&gt; you&#8217;re seeing the difference in DPI between<br />
<br />&gt; the monitor and printer?</p>
<p>It looks like that, but how can I know?  I&#8217;m not sure whether to repeat that in several tests I did no calculation at all, I left the logfont structure completely unchanged, and yet the new font came out roughly 23% of the size of the original font.  Obviously Windows wants me to give it a different size number than Windows gave to me (except that for windows on the screen it doesn&#8217;t), so how can I find out what units it&#8217;s giving me and what units it wants back?  All I can find in MSDN is that they&#8217;re &quot;logical units&quot;.  Let&#8217;s leave for some other time how to figure out what&#8217;s logical about it, first I just need to know what it is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-306643">
				<div id="div-comment-306643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306643">
			September 16, 2005 at 9:09 am</a>		</div>

		<p>The whole lfHeight thing is explained in the Petzold (at least in my old Win95 edition), but essentially it&#8217;s this: &quot;If you need a font with a specific size in points, this size must be converted into logical units and given as a negative number to lfHeight&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-306683">
				<div id="div-comment-306683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306683">
			September 16, 2005 at 12:34 pm</a>		</div>

		<p>Norman, take a look at this article:</p>
<p><a rel="nofollow" target="_new" href="http://www.windevnet.com/documents/s=7609/win0210g/0210g.htm" rel="nofollow">http://www.windevnet.com/documents/s=7609/win0210g/0210g.htm</a></p>
<p>Also, you may want to look up Q74299 in Microsoft&#8217;s knowledge base.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-306793">
				<div id="div-comment-306793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306793">
			September 17, 2005 at 12:36 am</a>		</div>

		<blockquote><p>
  When I do code like that for a window on the screen, it works. When I do code like that for a printed page, it shrinks the text instead of enlarging it. Why?</p>
<p>That sounds to me like the display DC is returning a positive number but the printer DC is returning a negative one and you&#8217;re just blindly adding to it.</p>
<p>&gt; Eventually I discovered that I had to do this:<br />
  <br />&gt; @ lf.lfHeight = lf.lfHeight * 80 / 18;<br />
  <br />&gt; just in order to get the result to print the same size as if I&#8217;d entirely omitted what should be a noop here. </p>
<p>This sounds like you&#8217;re operating on the units of some other coordinate space as opposed whatever the printer DC is on when outputting text. It&#8217;s hard to tell what you&#8217;re doing wrong without looking at the code. GDI is really kludgy and counter-intuitive in some places.</p>
<p>&gt; All I can find in MSDN is that they&#8217;re &quot;logical units&quot;. Let&#8217;s leave for some other time how to figure out what&#8217;s logical about it, first I just need to know what it is.</p>
<p>The best way to explain logical and device coordinates are that 1 unit of device coordinates are the smallest you can possibly render at on a device. Consider it to be a pixel or a dot on a printer. Logical coordinates are the units most GDI functions work with based on some matrix:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/archive/default.asp?url=/archive/en-us/dnargdi/html/msdn_mapping.asp" rel="nofollow">http://msdn.microsoft.com/archive/default.asp?url=/archive/en-us/dnargdi/html/msdn_mapping.asp</a></p>
<p>The majority of the time, the logical coordinates are either a 1-1 mapping between device and logical coordinates (MM_TEXT) or 1/1440th of an inch (MM_TWIPS) which is based on LOGPIXELSY of the device&#8217;s device caps (I can&#8217;t remember but I believe it is a fixed value even if you play with the viewport/window extents).<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-306883">
				<div id="div-comment-306883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306883">
			September 18, 2005 at 10:41 am</a>		</div>

		<p>ChrisR, thank you for pointers to those two documents, and it looks like they will be useful if I ever need someday to set a known point size and convert it to units that a printer DC will use.  But they don&#8217;t say why I had to do such a calculation in the first place, when I don&#8217;t know and don&#8217;t want to know the point size.</p>
<p>asdf, thank you for your effort, but I don&#8217;t understand.  During debugging I displayed a message box showing the value of the lfHeight field and it was +18.  Some experimentation revealed that changing the +18 to +80 would restore it to its original size.  All of this involves the printer DC that MFC hands to an OnPrint() method.  During this experimentation and in the desired code and final code for this, there is no reference to the display DC at all.</p>
<p>An unrelated method did something with an Edit Box&#8217;s font (I&#8217;m away from the code right now and might be misremembering what MFC calls this type).  There it was not necessary to examine or alter the lfHeight field.</p>
<p>How can I know what units or what coordinate space I&#8217;m playing with?  And why are the units or coordinate space different when MFC gives them to me vs. when I give the exact same LOGFONT structure back to MFC?  At one point in debugging my OnPrint method I kept a call to get a pointer logfont from the CDC instance and a call to tell the same CDC instance to select the exact same logfont back into it, with all the rest of the code commented out.  No changes whatsoever in the logfont, only changes in what MFC was thinking (if not the Win32 API).</p>
<p>Maybe or maybe not one of those coordinate systems was based on the smallest dot that could be rendered on the printer, but I think it&#8217;s pretty obvious that both weren&#8217;t.  The printer&#8217;s capabilities didn&#8217;t shrink dots by a factor of more than 4 during that time.  I didn&#8217;t try getting device caps but why should I even have to?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-306943">
				<div id="div-comment-306943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-306943">
			September 18, 2005 at 10:47 pm</a>		</div>

		<p>I&#8217;m going to assume both the display and printer are using MM_TEXT. I&#8217;m assuming your display is 96 dpi so 18 logical units (aka pixels in MM_TEXT) is 3/16ths of an inch (or 13.5 points) on this. Since you had to multiply it by 80/18 to make it match up to 3/16ths of an inch on your printer it looks like the printer is set to around 420 dpi. So you&#8217;re essentially working with dots in all device spaces when you want to be using physical measurements. There are 3 ways to do this:</p>
<p>1. Scale the printer&#8217;s matrix so that it uses the same DPI as the display. Set the map mode to MM_ISOTROPIC on the printer and then mess with the window/viewport extents of it so it matches based on both devices LOGPIXELSY device caps.<br />
<br />2. Leave the matrix alone and scale all the coordinates you pass to GDI functions. This is what you were doing by multiplying by 80/18. But it&#8217;s kind of lame hardcoding that magic value as opposed to reading them from LOGPIXELSY (not to mention it will also work on monitors/printers with a different DPI ratio than yours).<br />
<br />3. Use the same coordinate system for printing and display devices. Most WYSIWYG apps use MM_TWIPS for this but an interesting thing to note is that the next version of mozilla will do something along the lines of <a rel="nofollow" target="_new" href="http://wiki.mozilla.org/Mozilla2:Units" rel="nofollow">http://wiki.mozilla.org/Mozilla2:Units</a></p>
<p>All 3 of these have different tradeoffs and you will definitely hit a wall if you use certain GDI functions that use device coordinates instead of logical ones (especially if you support non-NT OSes with even worse GDI capabilities). Since logical coordinates are essentially broken, I find it&#8217;s much easier to do a combination of 2 and 3 where you use MM_TEXT for all devices and work with some other unit internally and then do the mapping to device coordinates yourself when calling the GDI functions.</p>
<p>But anyway, now you can see why you have to scale it on the printer. I think I misinterpreted what you meant when you said that adding to it shrunk the font so you can disregard that (but just be aware of it). As to why the edit box font works, I have no idea, I&#8217;ve never used MFC. Trace the code paths and compare what MFC is doing to what you&#8217;re doing, I&#8217;m guessing they&#8217;re doing a conversion somewhere or some other magic to make it happen. I did a tiny bit of reading on MFC/printing and it looks like their DC class has 2 HDCs: one for the device you&#8217;re drawing to and another to handle the attributes. I&#8217;m guessing they do that to make print preview work without doing anything special except being careful, make sure you&#8217;re not getting bitten by that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-307383">
				<div id="div-comment-307383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-307383">
			September 20, 2005 at 6:27 am</a>		</div>

		<p>Sunday, September 18, 2005 10:47 PM by asdf<br />
<br />&gt; I&#8217;m going to assume both the display and<br />
<br />&gt; printer are using MM_TEXT.</p>
<p>I&#8217;m not sure how to answer, besides the fact that I didn&#8217;t try to inspect that setting.  For the display, maybe MFC is giving me a logfont with MM_TEXT and then using the same MM_TEXT setting when I give it back.  For the printer, maybe MFC is using MM_TEXT in one direction, but obviously not in both directions.  If MFC were using a consistent unit in both directions then I wouldn&#8217;t have to change lfHeight from 18 to 80, I could just leave it at whatever value it was without even inspecting the value.</p>
<p>&gt; I&#8217;m assuming your display is 96 dpi so 18<br />
<br />&gt; logical units (aka pixels in MM_TEXT) is<br />
<br />&gt; 3/16ths of an inch (or 13.5 points) on this.</p>
<p>Opening the display properties and details, it does say 96 dpi, though I haven&#8217;t calculated whether it&#8217;s accurate or not.  The default font size is 9 (this is a Japanese Windows system), 9 of what unit I don&#8217;t know, and how 18 logical units or 13.5 points are computed from this 9 I also don&#8217;t know.</p>
<p>&gt; Since you had to multiply it by 80/18 to<br />
<br />&gt; make it match up to 3/16ths of an inch on<br />
<br />&gt; your printer it looks like the printer is<br />
<br />&gt; set to around 420 dpi.</p>
<p>But the printer&#8217;s DC still isn&#8217;t always set to 420 dpi.  When MFC calls my OnPrint method, one of its parameters is a pointer to a CDC (MFC&#8217;s version of DC), and I call a method in the CDC to get a pointer to its logfont.  At that time the height is +18.  Ordinarily it prints at a pretty ordinary size (same as the screen or not I didn&#8217;t try to measure, but pretty ordinary).  Now if I do not change the logfont at all but create a new CFont and select that in, the +18 stays the same but now the result prints at a miniature unreadable size.  This is where I have to multiply by 80/18 in order to just stay where I started.</p>
<p>&gt; But it&#8217;s kind of lame hardcoding that magic<br />
<br />&gt; value as opposed to reading them from<br />
<br />&gt; LOGPIXELSY (not to mention it will also work<br />
<br />&gt; on monitors/printers with a different DPI<br />
<br />&gt; ratio than yours). </p>
<p>If a 17-inch monitor and 19-inch monitor both have 1280&#215;1024 resolution then their actual DPI differs, and if someone sets their monitor to 1024&#215;768 then their DPI differs too, but I assuredly do not want to magnify or shrink the printed page according to who ordered the printout that day.</p>
<p>Now different printers with different DPIs could surely be a problem and yes indeed I hate doing that magic calculation.  I wish I didn&#8217;t have to touch the lfHeight field at all.  I don&#8217;t have to know the display&#8217;s lfHeight, I don&#8217;t do any calculations with it, I don&#8217;t touch it.  I wish the printer behaved the same way.  The printer&#8217;s default would be fine, if MFC would just remember the same unit that it was using when it gave me the logfont.  All I want as far as size is concerned is for the printout to occur with the same ordinary font size that it ordinarily got by default anyway, which was pretty reasonable.</p>
<p>The *purpose* why I get the logfont, alter it, and give it back, is that the default proportional font doesn&#8217;t suit the presentation of the data involved and a fixed-width font does it better.  But before even making that change, I had to get the size to be what it was in the first place.</p>
<p>&gt; But anyway, now you can see why you have to<br />
<br />&gt; scale it on the printer.</p>
<p>No, I do not yet see why I have to scale the printer font size to a different printer font size when I&#8217;m not doing anything to change units or anything like that.  To repeat, during some debugging runs, I didn&#8217;t change anything at all in the logfont, and I promise you I don&#8217;t understand why I have to scale the exact same font in the exact same printer DC from what MFC gave me to what MFC takes back from me.</p>
<p>&gt; As to why the edit box font works, I have no<br />
<br />&gt; idea, I&#8217;ve never used MFC.</p>
<p>Well OK I can understand that.  An expert who never used MFC has no idea why some other part of MFC works properly and consistently with itself ^u^  Perhaps I should tell MFC to surrender other underlying Win32 components besides just the logfont and I should call the APIs directly.  If I have time to try this, I&#8217;ll let you know if the magic calculation can go away.</p>
<p>(By the way I didn&#8217;t simply multiply by a magic constant (80 / 18) because that would be an integer and would get truncated too early for this magic calculation.  I multiplied by 80 and then divided by 18.  I think the lfHeight field is a long but haven&#8217;t rechecked it this week yet.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-308993">
				<div id="div-comment-308993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050915-23/?p=34173#comment-308993">
			September 26, 2005 at 9:32 pm</a>		</div>

		<p>OK, I had time for another experiment.  Again pDC is a parameter which MFC passes to the application&#8217;s OnPrint method, and its type is *CDC pointing to MFC&#8217;s encapsulation of a DC.</p>
<p>x = pDC-&gt;GetMapMode();<br />
<br />display a message box: its value was 1<br />
<br />CFont *pfontOld = pDC-&gt;GetCurrentFont();<br />
<br />pfontOld-&gt;GetLogFont(&amp;lfPrinter);<br />
<br />CFont fontNew;<br />
<br />fontNew.CreateFontIndirect(&amp;lfPrinter);<br />
<br />pfontOld = pDC-&gt;SelectObject(&amp;fontNew);<br />
<br />x = pDC-&gt;GetMapMode();<br />
<br />display a message box: its value was still 1</p>
<p>Now look in the MSDN index for things like MM_HIENGLISH and see how many pages it finds for you.  Non-users of MFC will be even more pleased than I was, (not).  I finally found the MM_ values defined, not in an MFC header file, but in WINGDI.H.  Value 1 is MM_TEXT.</p>
<p>So MFC said it was giving me font height 18 in mapping MM_TEXT and said that the 18 I gave back to it was still in mapping MM_TEXT, but the printed size was less than 1/4 of what it used to be.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>