<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1 parent" id="comment-1266375">
				<div id="div-comment-1266375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160928-00/?p=94405#comment-1266375">
			September 28, 2016 at 7:29 am</a>		</div>

		<p>But why is HSTRING_HEADER so big then? It seems to me like it should be: struct { UINT Length; PCWSTR Source; HSTRING nonNullAfterSomebodyDuped; }. It has a lot more space than this and that makes it a bit more mysterious than a plain C string or a BSTR which is why I asked the question in the first place.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-2" id="comment-1266385">
				<div id="div-comment-1266385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160928-00/?p=94405#comment-1266385">
			September 28, 2016 at 9:02 am</a>		</div>

		<p>&#8230;and perhaps you could add a fake ref count field that is set to 0 so it has the same layout as a heap hstring (whatever that might be) and a 0 ref count tells you that you are looking at a fast pass string.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ranta even depth-2 parent" id="comment-1266395">
				<div id="div-comment-1266395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160928-00/?p=94405#comment-1266395">
			September 28, 2016 at 9:58 am</a>		</div>

		<p>I suppose you&#8217;d have the first Windows­Duplicate­String(fastpass) call detect that HSTRING_HEADER::nonNullAfterSomebodyDuped == nullptr, make the copy, and save the duplicate HSTRING there. But if someone then calls Windows­Delete­String(duplicate), what should happen to nonNullAfterSomebodyDuped?</p>
<p>&#8211; If Windows­Delete­String(duplicate) takes the reference count to zero and destroys the duplicate but does not change nonNullAfterSomebodyDuped, then the next Windows­Duplicate­String(fastpass) call will use a danging pointer. No good.</p>
<p>&#8211; If Windows­Delete­String(duplicate) takes the reference count to zero, destroys the duplicate, and resets nonNullAfterSomebodyDuped, then it risks modifying an HSTRING_HEADER that has already been deallocated. No good.</p>
<p>&#8211; If Windows­Delete­String(duplicate) does not destroy the duplicate, then it will leak because the application isn&#8217;t going to call Windows­Delete­String(fastpass). In WRL, the destructor of HStringReference does not do it.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-3 parent" id="comment-1266435">
				<div id="div-comment-1266435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160928-00/?p=94405#comment-1266435">
			September 28, 2016 at 3:43 pm</a>		</div>

		<p>I don&#8217;t know how much internal details Raymond wants posted here and this could of course change at any time but in Win8 WindowsDeleteString simply does &#8220;if (!input || ((*(BYTE*)input) &amp; 1)) return 0; &#8230;&#8221; and a heap HSTRING has a 0 there and the refcount is stored further out. WindowsDuplicateString also checks this byte and will as expected just InterlockedIncrement a heap HSTRING. The surprising thing for me is that it does not modify HSTRING_HEADER, it allocates new memory every time you duplicate a fastpass string. Perhaps it is just not worth it to try to cache the first duplicated string.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1266455">
				<div id="div-comment-1266455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160928-00/?p=94405#comment-1266455">
			September 28, 2016 at 5:03 pm</a>		</div>

		<p>Where would you cache it, given that string references don&#8217;t need to be deleted, so you don&#8217;t get a chance to run cleanup?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-5" id="comment-1266456">
				<div id="div-comment-1266456" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160928-00/?p=94405#comment-1266456">
			September 28, 2016 at 5:40 pm</a>		</div>

		<p>I don&#8217;t know where you would cache it but I assumed there was some type of clever magic going to since a HSTRING_HEADER is 16+sizeof(void*) bytes which is a lot more than you need for a &#8220;duplicate every time&#8221; implementation. WindowsCreateStringReference does seem to store a stack address and a exception handler pointer in there so I assume that is some type of debugging aid&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ranta even thread-odd thread-alt depth-1 parent" id="comment-1266386">
				<div id="div-comment-1266386" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160928-00/?p=94405#comment-1266386">
			September 28, 2016 at 9:39 am</a>		</div>

		<p>The documentation of HSTRING says, &#8220;Every call to WindowsCreateString and WindowsCreateStringReference must be matched with a corresponding call to WindowsDeleteString.&#8221;</p>
<p>The documentation of WindowsCreateStringReference says, &#8220;You don&#8217;t need to call the WindowsDeleteString function to de-allocate a fast-pass HSTRING created by the WindowsCreateStringReference function.&#8221;</p>
<p>Raymond says, &#8220;since this is a fast-pass string, you destroy the HSTRING by simply abandoning it.&#8221;</p>
<p>One against two; the documentation of HSTRING must be wrong then. Doc feedback sent.</p>
<p>Is the thread-safety of HSTRING reference counters documented somewhere?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-chd1 odd alt depth-2 parent" id="comment-1266405">
				<div id="div-comment-1266405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ChDF+T' rel='external nofollow' class='url'>ChDF T</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160928-00/?p=94405#comment-1266405">
			September 28, 2016 at 10:10 am</a>		</div>

		<p>They are documented to be immutable (&#8220;Use HSTRING to represent immutable strings in the Windows Runtime.&#8221;). Something that never* changes is always thread save.<br />
*) as Windows­Delete­String certainly changes the state of the HSTRING (and therefore breaks immutability), you have to ensure that the string is not destroyed while it is still in use</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1266425">
				<div id="div-comment-1266425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160928-00/?p=94405#comment-1266425">
			September 28, 2016 at 1:39 pm</a>		</div>

		<p>The string content may be immutable, but the reference count is not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt depth-3 parent" id="comment-1266445">
				<div id="div-comment-1266445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160928-00/?p=94405#comment-1266445">
			September 28, 2016 at 3:49 pm</a>		</div>

		<p>They usually use atomic operations for reference counts, this keeps it thread safe.<br />
If the reference count wasn&#8217;t as simple as just incrementing/decrementing a number, then something like a critical section could be used.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-ranta even depth-4 parent" id="comment-1266606">
				<div id="div-comment-1266606" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160928-00/?p=94405#comment-1266606">
			September 29, 2016 at 9:47 am</a>		</div>

		<p>In [a C++ implementation from 1998], std::string used reference counters that were not thread-safe at all. If you had an std::string object being used by one thread, and wanted to give another thread a copy that is safe to access without further synchronization, then the copy constructor was not enough because the objects would share the reference counter. The std::string(const char *, size_t) constructor was safer. I don&#8217;t know whether [the vendor] ever categorized that as a bug. Nowadays though, the standard does not even allow reference counting in std::string.</p>
<p>This is why I would prefer explicit documentation on thread safety. OTOH, if HSTRING is thread-safe now, then it seems pretty unlikely that Microsoft would dare make it thread-unsafe later, even if the safety is undocumented.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-5" id="comment-1266665">
				<div id="div-comment-1266665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160928-00/?p=94405#comment-1266665">
			September 29, 2016 at 4:18 pm</a>		</div>

		<p>We are living in a completely different world compared to 1998. In 1998, it was quite rare to get a dual processor system, let alone a multi processor system (&gt;2 processors), so multi threaded programs and thread safety really didn&#8217;t occur that much.<br />
It was 2005 where the first dual core processors were released, and this is when the real need for thread safety really kicked in. But what&#8217;s more, due to the introduction of these processors, multi-threading has become more prominent in programming languages. So it would actually be a lot more surprising if HSTRING was not thread safe. Another thing to really take note of, the Windows Runtime environment has the main function in a MTA thread by default.<br />
So in short, these days, we have the capability to run multiple threads in parallel more readily available and the software does run multiple threads in parallel more often. So I would seriously be surprised if HSTRING, and probably a lot of the WinRT environment, wasn&#8217;t thread safe by default.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>