<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-381553">
				<div id="div-comment-381553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381553">
			May 17, 2006 at 10:12 am</a>		</div>

		<blockquote><p>
  If you try this, however, you&#8217;ll see the string &quot;Meet at 2&quot; on the screen and the &quot;schedule&quot; file will be blank.</p>
<p>The &quot;schedule&quot; file would be blank, yes. &nbsp;But wouldn&#8217;t you see &quot;Meet at &quot; on the screen, not &quot;Meet at 2&quot;? &nbsp;(In fact I just tried it on 2K Pro; the &quot;2&quot; is not printed.) &nbsp;;-)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-381563">
				<div id="div-comment-381563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381563">
			May 17, 2006 at 10:18 am</a>		</div>

		<p>Raymond&gt; As a result, the contents of the &quot;schedule&quot; file is &quot;Meet at 2&lt;space&gt;&lt;cr&gt;&lt;lf&gt;&quot;</p>
<p>Wow. That made me think &quot;Where does the &lt;cr&gt;&lt;lf&gt; come from?&quot; as I assumed that cmd.exe would strip everything after the &quot;&gt;&quot; character and probably barf on anything after the filename.</p>
<p>So, I tried:</p>
<p>c:&gt;echo foo 2&gt;wibble bar<br />
<br />foo &nbsp;bar<br />
<br />c:&gt;</p>
<p>!</p>
<p>Then:</p>
<p>c:&gt;echo foo &gt;wibble bar<br />
<br />c:&gt;type wibble<br />
<br />foo &nbsp;bar<br />
<br />c:&gt;</p>
<p>I never even guessed it might do that before!<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-381593">
				<div id="div-comment-381593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carlos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381593">
			May 17, 2006 at 10:36 am</a>		</div>

		<p>Escaping command lines is a chore. &nbsp;First of all you have to guess that the target app is using CommandLineToArgvW, and then do the reverse of CommandLineToArgvW&#8217;s arcane unescaping rules. &nbsp;(Backslash is the escape character; always escape quotes; only escape backslashes if they precede a quote.)</p>
<p>And if you&#8217;re passing the string to cmd.exe (rather than CreateProcess) you also have to escape special shell characters with ^. &nbsp;Many apps get this wrong.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-381603">
				<div id="div-comment-381603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arlie Davis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381603">
			May 17, 2006 at 10:50 am</a>		</div>

		<p>cmd.exe must go.</p>
<p>If only MS had just adopted a decent shell a long time ago&#8230;</p>
<p>Yes, I&#8217;m aware of Raymond&#8217;s recent criticism of Monad / Power Shell. &nbsp;And I don&#8217;t know if Monad is any good. &nbsp;But anything has got to be better than cmd.exe.</p>
<p>If you want to lose your mind, investigate how aliases, tab-completion, and command history work. &nbsp;It&#8217;s an unholy collaboration between cmd.exe and the CSRSS itself.</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-381623">
				<div id="div-comment-381623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381623">
			May 17, 2006 at 11:07 am</a>		</div>

		<p>BryanK&gt; &quot;I&#8217;m pretty sure the &lt;cr&gt;&lt;lf&gt; comes from cmd.exe&#8217;s echo builtin&quot;</p>
<p>So it does. And always has done. Including the UNIX /bin/echo and all shells builtins that I&#8217;m aware of.</p>
<p>How did I forget that? Must be getting old&#8230;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-381633">
				<div id="div-comment-381633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381633">
			May 17, 2006 at 11:17 am</a>		</div>

		<p>Arlie Davis: It wasn&#8217;t a criticism of PowerShell. It was just pointing out that &quot;Here is a replacement shell&quot; is harder than it looks. The remarks apply just as equally to rc, bash, csh, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-381663">
				<div id="div-comment-381663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">strik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381663">
			May 17, 2006 at 11:27 am</a>		</div>

		<p>This echo discussion reminds me of a problem I encountered lately: Is there a built-in possibility NOT to output the CR/LF at the end?</p>
<p>I have yet to find a solution (other than using echo from Cygwin, that is).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-381683">
				<div id="div-comment-381683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381683">
			May 17, 2006 at 11:43 am</a>		</div>

		<p>I forget where I picked it up, but you can actually put the redirection on the left side of the command:</p>
<p>&gt;schedule echo Meet at 2</p>
<p>This is particularly nice if you&#8217;re creating a file with more than one line, because things line up better.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-381693">
				<div id="div-comment-381693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pavolmarko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381693">
			May 17, 2006 at 11:46 am</a>		</div>

		<blockquote><p>
  Is there a built-in possibility NOT to output the CR/LF at the end? </p>
<p>This site has some options: <a rel="nofollow" target="_new" href="http://www.ericphelps.com/batch/lines/" rel="nofollow">http://www.ericphelps.com/batch/lines/</a>
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-381703">
				<div id="div-comment-381703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381703">
			May 17, 2006 at 11:50 am</a>		</div>

		<p>@strick:</p>
<p>From echo, I don&#8217;t think so. &nbsp;In the old days I believe the trick was to use &quot;prompt&quot; instead, which got ugly. &nbsp;It looks like you can use set/p to do it as well, which is less nasty.</p>
<p>echo|set/p=text but no newline</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-381713">
				<div id="div-comment-381713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">strik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381713">
			May 17, 2006 at 11:56 am</a>		</div>

		<p>pavelmarko: Thank you for the link. Unfortunately, these do not seem to work to write arbitrary texts, like e.g. echo -n on Unix does.</p>
<p>And: Yes, after writing my post I found out that BryanK already mentioned this problem here. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-381723">
				<div id="div-comment-381723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381723">
			May 17, 2006 at 12:01 pm</a>		</div>

		<p>@josh: Thanks, this is it (almost). This set/p trick adds a SPACE after the line, but besides from that, it works as expected.</p>
<p>I will have to find out if the additional SPACE is a problem in my case.</p>
<p>Again, thank jost and pavelmarko for your tips!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-381773">
				<div id="div-comment-381773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/myocom/archive/2006/05/17/600110.aspx' rel='external nofollow' class='url'>Mark Yocom's Script Tips</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381773">
			May 17, 2006 at 1:45 pm</a>		</div>

		<p>For those of you who are more interested in the gritty details of command line redirection, RaymondC&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-381793">
				<div id="div-comment-381793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381793">
			May 17, 2006 at 2:00 pm</a>		</div>

		<p>According to O&#8217;Reilly&#8217;s &quot;Learning the bash Shell&quot; (by Cameron Newham &amp; Bill<br />
<br />Rosenblatt), the command line is parsed by a 12-step process, as follows:</p>
<p> 1) Split command line into tokens by metachars (space, tab newline, ;, (, ), &lt;, &gt;, |, and &amp;).<br />
<br /> 2) Handle compound (block) command keywords (or {} structure).<br />
<br /> 3) Handle command aliases.<br />
<br /> 4) Handle brace expansion.<br />
<br /> 5) Substitute home directory for ~ or ~user shortcuts (tilde expansion).<br />
<br /> 6) Perform $varname variable substitution (parameter expansion).<br />
<br /> 7) Perform $(cmd) command substitution.<br />
<br /> 8) Perform $((expr)) arithmetic substitution.<br />
<br /> 9) Retokenize the command line by $IFS delimiters (word splitting).<br />
<br />10) Perform pathname wildcard expansion (similar to MSVC&#8217;s wild.c).<br />
<br />11) Perform command lookup as function, built-in, or executable file via $PATH.<br />
<br />12) Run the command, after setting up I/O redirection, etc.</p>
<p>Can anybody produce a similar list for cmd?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-381583">
				<div id="div-comment-381583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381583">
			May 17, 2006 at 10:27 am</a>		</div>

		<p>I should note that while cmd.exe expands environment variables before breaking up commands (so you can put the &amp; in there, and cmd.exe will run two different commands), bash (at least v3.1 from Cygwin) does not:</p>
<p>$ VAR=&quot;&amp; ls&quot;<br />
<br />$ echo $VAR &gt;file<br />
<br />$ cat file<br />
<br />&amp; ls<br />
<br />$ </p>
<p>After $VAR is expanded, echo is given two arguments: &quot;&amp;&quot; and &quot;ls&quot;. &nbsp;(If $VAR had been in quotes, then echo would have been given one argument, &quot;&amp; ls&quot;. &nbsp;Doesn&#8217;t matter though.) &nbsp;The shell does not interpret (or reinterpret) the command line after substituting variables. &nbsp;(If you *want* it to, you have to use eval.)</p>
<p>And it works the same way whether you use the shell builtin echo or the /bin/echo program, so it&#8217;s not something special the shell does. &nbsp;It&#8217;s just that the shell interprets ; and &amp; (I&#8217;ve tried this with semicolons as well) before it does parameter expansion.</p>
<p>Adam &#8212; I&#8217;m pretty sure the &lt;cr&gt;&lt;lf&gt; comes from cmd.exe&#8217;s echo builtin &#8212; at least, that&#8217;s the way bash&#8217;s echo builtin works (and /bin/echo as well). &nbsp;If you want to suppress the line-end, you can give bash&#8217;s echo (or /bin/echo) the -n option. &nbsp;I don&#8217;t know if cmd.exe&#8217;s echo has a similar option.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-381753">
				<div id="div-comment-381753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381753">
			May 17, 2006 at 12:48 pm</a>		</div>

		<p>Just an additional bit of info on the &gt;&amp; operator.</p>
<p>As Raymond says:</p>
<p>&#8230; some-command &gt;output 2&gt;&amp;1 </p>
<p>will redirect both stderr and stdout to the file &#8216;output&#8217;.</p>
<p>However,</p>
<p>&#8230; some-command 2&gt;&amp;1 &gt;output</p>
<p>will not &#8211; only stdout will be redirected to the file &#8216;output&#8217;. &nbsp;Stderr in this case is still directed to the console. &nbsp;This confused me at first.</p>
<p>It seems intuitive (to me anyway) that the above line would redirect stderr (2) to stdout (1) then redirect stdout to the file &#8211; so everything should go into the file, right?</p>
<p>But what is really happening is that stderr (2) is redirected to whereever stdout (1) is going *at that point in the cmd line*. &nbsp;So stderr is directed to the console. &nbsp;Then stdout is directed to the file, but that does nothing to the current state of stderr (so it&#8217;s still directed to the console).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-381913">
				<div id="div-comment-381913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381913">
			May 17, 2006 at 11:01 pm</a>		</div>

		<p>@stri: &nbsp;If the space is a problem, try adding parentheses:</p>
<p>(echo|set/p=foo)</p>
<p>Weird that it was adding a space only if you redirected the output. &nbsp;Tacking on &quot;&amp;echo etc&quot; wouldn&#8217;t have the extra space. &nbsp;Parens seem to make it fine either way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-381933">
				<div id="div-comment-381933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Perf Wiz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381933">
			May 18, 2006 at 12:19 am</a>		</div>

		<p>I don&#8217;t have a pagefile. I just buy more RAM and write small programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion even thread-even depth-1" id="comment-381883">
				<div id="div-comment-381883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381883">
			May 17, 2006 at 7:45 pm</a>		</div>

		<p>BryanK: actually now (as of Windows 2000) both expansion styles are possible. %VAR% is expanded first, and the new style !VAR! is expanded last</p>
<p>Arlie: not so evil, just an undocumented parameter (the reserved parameter to ReadConsoleEx) that tells the console implementation what control characters terminate line-based input early</p>
<p>Gabe: I reverse-engineered the steps a long long time ago, thanks to a funny quirk in the language. Every step has a distinct set of &quot;special&quot; characters, and for each step the caret only acts as an escape character if followed by one of those, and is ignored otherwise. I don&#8217;t remember the *exact* steps now, but the first ones are:<br />
<br />1) join multiple lines (caret escapes newline)<br />
<br />2) expand %VARIABLES% (caret escapes %)<br />
<br />3) &#8230;</p>
<p>It gets really horribly painfully complicated from here by the fact that built-in commands and external commands are treated very differently. For starters, they use different tokenizers (that&#8217;s why &quot;cd..&quot; is parsed as &quot;cd ..&quot; and why &quot;cmd.exe&quot; instead stays whole). Then, most built-in commands have their own command-line parser, some changing the syntax considerably</p>
<p>The non-obvious example is &quot;(&quot; &#8211; yes, open-parenthesis is a command, yes you can do most &quot;command&quot; stuff with it (included I/O redirection, which unfortunately can get very quirky if you get too creative, like if you try to pipe one &quot;(&quot; into another, and I don&#8217;t really recommend it), and easily the most powerful one. Its parser digests anything up until an unescaped &quot;)&quot; that occurs outside another built-in command (built-in command parsers nest), and parses multiple lines as multiple statements. It&#8217;s also the most reliable way to delimit a statement, such as the &quot;true&quot; branch of an IF</p>
<p>It&#8217;s&#8230; well&#8230; you don&#8217;t really want to know. You just &quot;get it&quot; after some heavy batch file development, I think</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-381893">
				<div id="div-comment-381893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jerf.org/iri' rel='external nofollow' class='url'>Jeremy Bowers</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381893">
			May 17, 2006 at 8:44 pm</a>		</div>

		<p>And this is why I flat out refuse to do any more shell programming, on any shell, ever. 30+ years of kludges upon kludges upon kludges just doesn&#8217;t appeal to me as an environment to do anything in.</p>
<p>A coworker and I once tried to come up with a Bash script that could be safely and directly used as a CGI script, without enabling command injection. We think we actually managed, but A: We&#8217;re not actually *sure* and B: even if we were right, it sure was hard.</p>
<p>(I know bash isn&#8217;t the topic at hand but the general principle holds.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-381963">
				<div id="div-comment-381963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">strik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381963">
			May 18, 2006 at 3:49 am</a>		</div>

		<p>@josh: Thank you, the parenthesis solution is it! Yes, doing some more tests, I also found out that this extra space is not only added. I did some tests with &quot;od&quot; (from Cygwin) and found out that is does not contain that extra space, either.</p>
<p>Again, thank you!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-381993">
				<div id="div-comment-381993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Commandlinux Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-381993">
			May 18, 2006 at 6:43 am</a>		</div>

		<p>The command line is parsed by a 12-step process.</p>
<p>First step: Admit you have a commandline problem.</p>
<p>Second step: ?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-382043">
				<div id="div-comment-382043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/05/18/600962.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-382043">
			May 18, 2006 at 10:00 am</a>		</div>

		<p>It doesn&#8217;t have to come at the end.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-382103">
				<div id="div-comment-382103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-382103">
			May 18, 2006 at 11:15 am</a>		</div>

		<p>OK. So what’s the proper way to evaluate an environment variable in cmd so that it doesn’t enable command injection? Assuming that the variable might contain redirection characters &lt; &gt; &gt;&gt; &gt;&amp;, piping characters |, unconditional sequence characters &amp;, conditional sequence characters || &amp;&amp;, and whatever else cmd supports?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-382113">
				<div id="div-comment-382113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-382113">
			May 18, 2006 at 11:47 am</a>		</div>

		<p>If the shell does variable substitution before breaking up the command line into individual commands, then there&#8217;s no way to do it. &nbsp;(Short of trying to sanitize the variable, that is. &nbsp;If you can somehow magically escape the redirection, piping, and sequence characters, it might work.)</p>
<p>Actually, it might work to put the variable expansion in quotes; let me try that&#8230;</p>
<p>Well, sort of. &nbsp;If &nbsp;you say:</p>
<p>set VAR=^&amp;^ dir</p>
<p>and then:</p>
<p>echo %VAR%</p>
<p>you will get:</p>
<p>ECHO is on<br />
<br />&lt;normal output of DIR command&gt;</p>
<p>However, if you say:</p>
<p>echo &quot;%VAR%&quot;</p>
<p>you will get:</p>
<p>&quot;&amp; dir&quot;</p>
<p>as output. &nbsp;That&#8217;s probably not any better (the quotes should probably not be there), but at least it didn&#8217;t evaluate the sequence character.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-382563">
				<div id="div-comment-382563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Philip</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-382563">
			May 19, 2006 at 7:09 pm</a>		</div>

		<p>I have a query about echo and escape character, basically I am trying to echo the word ON to a file as in</p>
<p>echo ON&gt;some file</p>
<p>to achieve a result of </p>
<p>ON</p>
<p>&#8230;however since the command becomes echo ON I get a blank file. I tried using the ^ before ON as an escape character, but that doesn&#8217;t work.</p>
<p>any input?</p>
<p>Thanks/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-382523">
				<div id="div-comment-382523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-382523">
			May 19, 2006 at 4:55 pm</a>		</div>

		<p>@Adam:<br />
<br />as you already noticed<br />
<br />echo first &gt;stdout second<br />
<br />writes two spaces between first and second.<br />
<br />Compare that against<br />
<br />&gt;stdout echo first second<br />
<br />echo &gt;stdout first second<br />
<br />echo first second &gt;stdout<br />
<br />and note that CMD.EXE apparently does not collapse multiple spaces like a POSIX shell would do.</p>
<p>%* in a batch file also differs from $* in a POSIX shell script.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-382743">
				<div id="div-comment-382743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-382743">
			May 21, 2006 at 11:14 pm</a>		</div>

		<p>Friday, May 19, 2006 7:09 PM by Philip<br />
<br />&gt; any input?</p>
<p>No but you have to pretend there&#8217;s some:</p>
<p>(echo | set /p =ON) &gt;abcd.txt</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-654423">
				<div id="div-comment-654423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/08/06/8835317.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173#comment-654423">
			August 6, 2008 at 10:42 am</a>		</div>

		<p>It&#8217;s the general-purpose escape character.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>