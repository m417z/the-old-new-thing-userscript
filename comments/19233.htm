<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-706733">
				<div id="div-comment-706733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706733">
			February 6, 2009 at 10:53 am</a>		</div>

		<p>They were being profligate with HMODULE, so who&#8217;s to say they hadn&#8217;t already closed the thread handle?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706763">
				<div id="div-comment-706763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706763">
			February 6, 2009 at 11:31 am</a>		</div>

		<p>The fun is making Thread/DLL code that survives both process shutdown and VB DLL unload when VB unloads an OCX&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706833">
				<div id="div-comment-706833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706833">
			February 6, 2009 at 1:08 pm</a>		</div>

		<blockquote><p>
  because if it went invalid, programming</p>
<p>  would become impossible.
</p></blockquote>
<p>From what I recall, that didn&#8217;t stop the implementers of the C RTL function _beginthread from trying to do the impossible.</p>
<p>(The _beginthread function return the thread handle; the C RTL obligingly closed the handle when the thread main function returned. Hence one reason for the addition of the _beginthreadex function).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706873">
				<div id="div-comment-706873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706873">
			February 6, 2009 at 1:56 pm</a>		</div>

		<blockquote><p>
  &gt; From what I recall, that didn&#8217;t stop the implementers of the C RTL function _beginthread from trying to do the impossible.
</p></blockquote>
<p>There is no problem closing a thread&#8217;s handle if you don&#8217;t want to either wait for it or find it&#8217;s exit code. Compare with pthread_detach.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706883">
				<div id="div-comment-706883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706883">
			February 6, 2009 at 5:32 pm</a>		</div>

		<p>re: porter</p>
<p>Sure &#8211; but there&#8217;s a logical disjunction between (a) returning the handle to the caller, and then (b) arranging so that caller&#8217;s use of the handle is subject to uncertainty about whether it is still valid.</p>
<p>Either give the caller the handle and let him dispose of it, or don&#8217;t give the caller the handle at all because he can&#8217;t trust it to be valid.</p>
<p>_beginthreadex takes the former approach, in recognition that _beginthread had a flawed design.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706903">
				<div id="div-comment-706903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706903">
			February 6, 2009 at 10:51 pm</a>		</div>

		<blockquote><p>
  &gt; _beginthreadex takes the former approach, in recognition that _beginthread had a flawed design.
</p></blockquote>
<p>Or rather an interesting heritage, it came from OS/2 where it would have returned a thread id.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706943">
				<div id="div-comment-706943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706943">
			February 7, 2009 at 7:52 am</a>		</div>

		<p>Programming is impossible, let&#8217;s go shopping!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706963">
				<div id="div-comment-706963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706963">
			February 7, 2009 at 4:52 pm</a>		</div>

		<p>The concept of associating a thread with a handle value are flawed. This is why windows leaks handles all over the place. How fast are handles reused anyway?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706983">
				<div id="div-comment-706983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706983">
			February 7, 2009 at 7:14 pm</a>		</div>

		<blockquote><p>
  &gt; The concept of associating a thread with a handle value are flawed.
</p></blockquote>
<p>Always a problem when GetCurrentThread() &nbsp;returns -2.</p>
<p>Try TIDs and TlsGetValue()&#8230;</p>
<p>However handles are the only way to wait for a thread termination, so they have their place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706993">
				<div id="div-comment-706993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706993">
			February 8, 2009 at 2:32 am</a>		</div>

		<p>I think the people who said the handle was closed really meant the handle is signaled (which afaik is true in this case).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-707063">
				<div id="div-comment-707063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveshe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-707063">
			February 8, 2009 at 10:50 pm</a>		</div>

		<p>@ 640k &#8211; OK, I&#8217;ll bite, what are you talking about when you say &quot;This is why windows leaks handles all over the place&quot;? I have boxes that run for months and don&#8217;t leak any noticeable number of handles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-707073">
				<div id="div-comment-707073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-707073">
			February 8, 2009 at 11:52 pm</a>		</div>

		<p>Won&#8217;t a handle / id remain valid until all references to the underlying object have been released? &nbsp;I&#8217;m pretty sure that&#8217;s the way it works, so as long as you track your references properly you should be fine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-707093">
				<div id="div-comment-707093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-707093">
			February 9, 2009 at 9:37 am</a>		</div>

		<p>Thank you Raymond for your puzzles: they&#8217;re always illuminating.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-707203">
				<div id="div-comment-707203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-707203">
			February 9, 2009 at 2:46 pm</a>		</div>

		<blockquote><p>
  &gt; Won&#8217;t a handle / id remain valid until all references to the underlying object have been released? &nbsp;I&#8217;m pretty sure that&#8217;s the way it works, so as long as you track your references properly you should be fine.
</p></blockquote>
<p>I would not have thought so, DuplicateHandle() returns a new handle, not the same handle with bumped up reference count.</p>
<p>Try&#8230; open file, duplicate handle, close original file, try original handle, close duplicate handle</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-707243">
				<div id="div-comment-707243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-707243">
			February 9, 2009 at 3:23 pm</a>		</div>

		<p>@porter:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/08/29/4620336.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/08/29/4620336.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-707253">
				<div id="div-comment-707253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-707253">
			February 9, 2009 at 3:27 pm</a>		</div>

		<p>John, porter</p>
<p>A kernel object can have multiple handles associated with it, and also other references (each handle holds a reference, as well). An object stays alive until there are references to it. When the last reference is released (this does not mean a last handle is closed), the object is gone.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>