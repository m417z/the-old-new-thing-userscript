<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1284965">
				<div id="div-comment-1284965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Haim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1284965">
			February 15, 2017 at 7:42 am</a>		</div>

		<p>I always assumed the win32 thread pool uses some sort of hill-climbing with the number of threads to prevent exactly this kind of problems, isn&#8217;t it?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1285035">
				<div id="div-comment-1285035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1285035">
			February 15, 2017 at 9:09 am</a>		</div>

		<p>Not sure how <a href="https://en.wikipedia.org/wiki/Hill_climbing" rel="nofollow">hill-climbing</a> comes into play. The deal is that &#8220;the persistent thread&#8221; is the thread that dispatches the work to worker threads. For very short tasks, you can run them directly in the persistent thread. This means they dispatch faster, but it also means that nothing else gets dispatched until you&#8217;re done.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1285045">
				<div id="div-comment-1285045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1285045">
			February 15, 2017 at 9:38 am</a>		</div>

		<p>In which case I can imagine somebody doing this on purpose to pause the entire pool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1285055">
				<div id="div-comment-1285055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Haim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1285055">
			February 15, 2017 at 9:42 am</a>		</div>

		<p>Yes, but is it mandatory that there&#8217;s only one singular persistence thread? The threadpool can see after sometime that the persistence thread is not free, add yet another persistence thread, see if the throughput of the workitems completion rate went up (it should in this case), stop for few seconds, and retry again.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1285065">
				<div id="div-comment-1285065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1285065">
			February 15, 2017 at 10:54 am</a>		</div>

		<p>So you&#8217;re saying that the thread pool should work around other people&#8217;s programming errors? The &#8220;don&#8217;t need to be compatible with apps that break the rules&#8221; people might disagree with you on that.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1285125">
				<div id="div-comment-1285125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Haim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1285125">
			February 15, 2017 at 1:13 pm</a>		</div>

		<p>Well, I have to say that MSDN is really not clear on this, MSDN only writes &#8220;. This flag should be used only for short tasks or it could affect other timer operations.&#8221; , so for me, as a developer, that implies that if my thread pool doesn&#8217;t consume any timers it&#8217;s not the end of the world. MSDN does not really say that this is the dispatcher thread, and you also assume that as a thread pool, it knows to handle with long tasks (and you can clearly see in your debugger that the thread pool injects more threads if needed, aka the hill climbing), you assume it&#8217;s not the end of the world if your task takes longer. I wouldn&#8217;t call it &#8220;programming error&#8221; as much as I call it &#8220;ambiguous documentation&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even depth-4" id="comment-1285085">
				<div id="div-comment-1285085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1285085">
			February 15, 2017 at 11:27 am</a>		</div>

		<p>I feel like that would increase the complexity of the threadpool considerably to support a workflow that the threadpool wasn&#8217;t designed to support (at which point the appropriate response would be, &#8220;write your own threadpool or grab one of the many libraries that does this for you&#8221;).  Honestly I&#8217;m surprised the WT_EXECUTEINPERSISTENTTHREAD flag exists.  I feel like that is just begging for abuse and kind of defeats the purpose of having a threadpool.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1284975">
				<div id="div-comment-1284975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1284975">
			February 15, 2017 at 7:51 am</a>		</div>

		<p>&#8220;We need a persistent thread to monitor registry changes&#8221;<br />
&#8220;Why not run a workitem with WT_EXECUTE­IN­PERSISTEN­THREAD flag then?&#8221;<br />
!!!!Profit!!!!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jeremytais even thread-even depth-1" id="comment-1284995">
				<div id="div-comment-1284995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1284995">
			February 15, 2017 at 8:05 am</a>		</div>

		<p>My guess is that the devs didn&#8217;t read MSDN, and whoever named the flag WT_EXECUTE­IN­PERSISTEN­THREAD was wearing kernel-colored-glasses.  From a developer PoV, the name WT_EXECUTE­IN­PERSISTEN­THREAD kind of sounds like you want the thread pool to allocate a permanent thread to you.  So they were helpfully trying to tell the thread pool that this thread would be running a long time and so issue it its own thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1285025">
				<div id="div-comment-1285025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1285025">
			February 15, 2017 at 9:01 am</a>		</div>

		<p>Wouldn&#8217;t it be nice if all API issues could be solved with a time machine?</p>
<p>&#8220;It hurts when I do this&#8221;<br />
&#8220;I have just made it so that you were never able to do that&#8221;<br />
&#8220;Do what?&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1285095">
				<div id="div-comment-1285095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1285095">
			February 15, 2017 at 12:04 pm</a>		</div>

		<p>&gt; The deal is that “the persistent thread” is the thread that dispatches the work to worker threads. For very short tasks, you can run them directly in the persistent thread. </p>
<p>To put it simply: if an app uses the WT_EXECUTEINPERSISTENTTHREAD but it turns out to be a long running work item, then the whole thread pool is stalled for as long as that work item is being handled.  It doesn&#8217;t matter whether the WT_EXECUTELONGFUNCTION is specified or not.</p>
<p>&gt; We&#8217;re stuck with the existing behavior of allowing the contradictory flags and ignoring the WT_EXECUTELONGFUNCTION flag.</p>
<p>If you wanted to be nice to apps that pass the contradictory flags, couldn&#8217;t a change be made so that the WT_EXECUTELONGFUNCTION flag takes precedence?  That way the dispatcher would spin up a new thread for the work item (or pass it to an existing thread that isn&#8217;t the dispatcher thread).  This would leave the dispatcher free to handle new work items.  The cost would be that if the thread actually was a short task it might not be handled as efficiently.  But it would still be handled.</p>
<p>I don&#8217;t see a downside to such a change, but maybe I&#8217;m missing something (like something to do with APCs).  Of course, the developer can still shoot themselves in the foot if they lie and use only the WT_EXECUTEINPERSISTENTTHREAD flag for a long running task. But at least some small subset of apps that attempt to tell the truth by also setting the WT_EXECUTELONGFUNCTION would be helped.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1285175">
				<div id="div-comment-1285175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1285175">
			February 15, 2017 at 8:08 pm</a>		</div>

		<p>Existing code that sometimes used both flags and sometimes used only WT_EXECUTE­IN­PERSISTEN­THREAD might break when work items that were expected to run from the same thread suddenly start running on two different threads.  (Granted, the code was already broken, but possibly only in the sense of running inefficiently; your proposed change could mean it no longer worked at all.)</p>
<p>It might be safe for the thread pool to create a dedicated &#8220;persistent thread&#8221; separate from the dispatcher thread.  But that would defeat the original purpose of the flag, and make properly written code less efficient than it should be.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1285195">
				<div id="div-comment-1285195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ismo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1285195">
			February 15, 2017 at 8:46 pm</a>		</div>

		<p>Where was it implied that the persistent thread would be the very same every time ? As a developer I would have assumed that the are some persistent threads put a side  which are used when WT_EXECUTEINPERSISTENTTHREAD was specified. The documentation is not good here.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1285256">
				<div id="div-comment-1285256" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1285256">
			February 16, 2017 at 10:11 am</a>		</div>

		<p>Actually, now that I check, the documentation explicitly says that it ISN&#8217;T guaranteed to be the same thread each time.<br />
Nonetheless, if that is the current implementation, there is likely to be existing code that depends on it. :-(</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1285275">
				<div id="div-comment-1285275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170215-00/?p=95435#comment-1285275">
			February 16, 2017 at 10:35 am</a>		</div>

		<p>It&#8217;s been a while since I&#8217;ve had to deal with this kind of stuff on Windows, but in general combining a thread pool with something that &#8216;has to run on a particular thread&#8217; seems like a bad idea to me.  To me a threadpool should be used for work that can occur on any thread.  If the work needs to happen on a particular thread it shouldn&#8217;t be done using a threadpool (or the work done on the threadpool should just pass the real work on to the correct thread).  But maybe I&#8217;m over simplifying real world issues.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>