<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-932673">
				<div id="div-comment-932673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932673">
			August 29, 2011 at 7:33 am</a>		</div>

		<p>If the compiler is complaining about syntax tokens that aren&#39;t there in the source code, then obviously a macro expansion is involved somehow (or sometimes an error in the most recently-included header file, like a lack of a semicolon after a class definition).</p>
<p>Wikipedia doesn&#39;t mention anything about global initializers in C1X, but even if it will allow globals to be initialized from other globals, I wouldn&#39;t count on being able to use the feature anytime soon. &nbsp;Heck, look at the status of C99 support these days, a 12-year-old standard. &nbsp;Many C compiler vendors don&#39;t even try to be C99-compliant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-932693">
				<div id="div-comment-932693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932693">
			August 29, 2011 at 7:42 am</a>		</div>

		<p>&quot;How did you know that?&quot;</p>
<p>Because, after all, if it&#39;s not written down on MSDN or Stack Overflow, it cannot be determined using any technique known to mortal man.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes even thread-even depth-1" id="comment-932723">
				<div id="div-comment-932723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932723">
			August 29, 2011 at 8:25 am</a>		</div>

		<p>In a well-designed IDE, you may even be able to see the macro expansion with a simple mouse action. I am surprised at how many of my fellow developers fail to use the tools right in front of their noses. Usually, they just never knew you could do that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-932733">
				<div id="div-comment-932733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932733">
			August 29, 2011 at 8:34 am</a>		</div>

		<p>@Anonymous Coward: Yeah I think gcc holds some special price for &quot;most unhelpful compiler error&quot; (not to say VC++ doesn&#39;t have its own set of problems, it certainly does). Especially with templates the chances of getting a even somewhat useful error are slim to nonexistant.</p>
<p>I must say that clang is a positive surprise in this regard &#8211; they really put effort into this and it shows [1]</p>
<p>[1] <a rel="nofollow" target="_new" href="http://clang.llvm.org/diagnostics.html" rel="nofollow">clang.llvm.org/diagnostics.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-932753">
				<div id="div-comment-932753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932753">
			August 29, 2011 at 10:06 am</a>		</div>

		<p>@640k: &nbsp;Insert parens and brackets &quot;everywhere&quot; and then suggest that to the developer? &nbsp;Then the developer will take the suggestion, and the syntax might be right but the meaning will change, and the developer will blame the compiler writers assuming the developer ever notices that the wrong thing is happening.</p>
<p>Excel does one thing that is helpful: &nbsp;If you leave out the final ) on a formula, it will suggest that correction. &nbsp;I don&#39;t think it tries to insert ( and ) everywhere to see if that fixes a syntax error!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-932763">
				<div id="div-comment-932763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932763">
			August 29, 2011 at 1:26 pm</a>		</div>

		<p>@Voo: are you by any chance referring to the infamous ‘undefined reference to vtable’ error?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-932773">
				<div id="div-comment-932773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932773">
			August 29, 2011 at 1:30 pm</a>		</div>

		<p>For some other examples of why the compiler shouldn&#39;t generally mess with the input, do some searching for javascript&#39;s semicolon insertion algorithm. &nbsp;It can cause some apparently insignificant syntactic differences to have major semantic ramifications. It also causes problems for minimizers.</p>
<p>One such example is here: <a rel="nofollow" target="_new" href="http://robertnyman.com/2008/10/16/beware-of-javascript-semicolon-insertion/" rel="nofollow">robertnyman.com/&#8230;/beware-of-javascript-semicolon-insertion</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-932783">
				<div id="div-comment-932783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932783">
			August 29, 2011 at 1:50 pm</a>		</div>

		<p>Another bad example for semicolon insertion &#8211; if you&#39;re doing method chaining or string concatenation on multiple lines in JS, you have to put the dot or plus at the end of the line, rather than the start of the next.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-932793">
				<div id="div-comment-932793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932793">
			August 29, 2011 at 2:14 pm</a>		</div>

		<p>@Anonymous Coward: I wasn&#39;t talking about one specific error, but if I had to name one I think I&#39;d go with that one yes. I&#39;m certain that I&#39;ve never seen a more unhelpful, obscure, confusing compiler error ever &#8211; its only advantage is, that there aren&#39;t 3 pages of template errors. Also VC++ never had that problem which makes it all the more fun.</p>
<p>Yep good call.</p>
<p>clang is really godsend and I hope other compilers will take a note from it and improve as well &#8211; macro expanding would&#39;ve made this error obvious. Although I think experienced c++ programmers tend to map certain output patterns to some specific error so one learns to live with it &#8211; but for beginners I now always recommend clang.. makes their life a good deal easier in my experience.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-932713">
				<div id="div-comment-932713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932713">
			August 29, 2011 at 8:22 am</a>		</div>

		<p>One of the main reasons behind the hate component of my love/hate-relationship with C++ derives from the fact that the compiler is apparently incapable of generating helpful error messages. Often this is because too many things are legal C++ and my error was the start of the correct syntax of something I didn&#39;t want; by the time the compiler figures out I screwed up it&#39;s past the error.</p>
<p>But in this case, a bit more context could have saved a whole lot of confusion. Suppose the compiler would have said:</p>
<p>test.cpp(136) : error C2143: syntax error : missing &#39;)&#39; before &#39;{ 0xb725f130, 0x47ef, 0x101a, { &#8230;&#39;</p>
<p>That would have helped a lot, wouldn&#39;t it? And the ‘missing &#39;)&#39; ’ error is unspecific and misleading. It&#39;s the &#39;{&#39; that causes the problem, and &#39;)&#39; would have been illegal here since an expression-list cannot end in a comma, not even in C++0x / C++1x / whenever it&#39;s done. (Note: in C++0x braced-init-list can end in a comma.) So the compiler should have said:</p>
<p>test.cpp(136) : error Cnnnn: syntax error : &#39;{&#39; invalid in expression before &#39; 0xb725f130, 0x47ef, 0x101a, { 0&#8230;&#39;</p>
<p>Or, in the case of C99 or GCC:</p>
<p>test.cpp(136) : error Cnnnn: syntax error : cast required before initializer &#39;{ 0xb725f130, 0x47ef, 0x101a, { &#8230;&#39;</p>
<p>P.S. The board software just ate my comment *and* disabled the back button so I couldn&#39;t go back and try to post it again. Please have someone fix that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-932743">
				<div id="div-comment-932743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932743">
			August 29, 2011 at 9:34 am</a>		</div>

		<p>When code doesn&#39;t compile, a *good* compiler should try to insert (,),[,],{,} and/or other valid chars everywhere and see if it solves the errors. Then suggest this to the developer.</p>
<p>Dumb compilers suggests stupid things that doesn&#39;t compile when following the recommendations in the error message.</p>
<div class="post">[<i><a href="http://blogs.msdn.com/b/ericlippert/archive/2006/07/07/659259.aspx" rel="nofollow">The prescriptive approach comes with its own problems</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-932803">
				<div id="div-comment-932803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932803">
			August 29, 2011 at 6:23 pm</a>		</div>

		<p>Please fix the syntax error in my leet code.</p>
<p>I will accept your first suggestion, fire F7, and forget.</p>
<p>{</p>
<p>&nbsp; &nbsp;extern unsigned int x, y, z;</p>
<p>&nbsp; &nbsp;return x &lt; 10</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;? &nbsp;y + 5 &gt; 8 &nbsp;&amp;&amp; &nbsp;(x &lt; 4 &nbsp;? &nbsp;z &lt;&lt; 4 &nbsp;: &nbsp;2</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp;y &amp; 3 / 2;</p>
<p>}</p>
<p>(Sorry, I reckon the original was just being humorous&#8230; couldn&#39;t resist)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-932833">
				<div id="div-comment-932833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932833">
			August 29, 2011 at 9:35 pm</a>		</div>

		<p>@Simon Buchan: Lol, what a n00b! All the control flow statements, including &lt;ReturnStatement&gt;, don&#39;t allow semicolon insertion for that reason!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-932843">
				<div id="div-comment-932843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932843">
			August 29, 2011 at 10:34 pm</a>		</div>

		<p>@voo: I&#39;m sorry, but the error was obvious to me as soon as I saw it. And I don&#39;t do C/C++ profesionally, only on a hobby project with code from around 1998. In my mind the CAPITAL LETTERS triggered the &#39;it&#39;s a macro!&#39; thought, and then the error makes sense.</p>
<p>Or maybe it&#39;s just that using vim to write C/C++ makes on more used to having to think about what the errors mean instead of relying on an IDE to think for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-932853">
				<div id="div-comment-932853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932853">
			August 29, 2011 at 10:43 pm</a>		</div>

		<p>@Drak: That works for ALL_UPPERCASE_MACROS, but what about the (sort-of-required for compatability) windows.h macros? I&#39;ll bet you wouldn&#39;t guess SetPort is a macro, for example.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-932863">
				<div id="div-comment-932863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SL</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932863">
			August 30, 2011 at 12:06 am</a>		</div>

		<p>@Drak You are right. I guess for all C/C++ programmers out there the error is really obvious (at least I hope so). To me it is strange that customers really come up with such hard to solve problems and say &quot;Please MS fix my code I have no idea whats wrong&quot;. I am curious about to where Raymond is taking us tomorrow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-932813">
				<div id="div-comment-932813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932813">
			August 29, 2011 at 7:08 pm</a>		</div>

		<p>(Tail from Chris B&#39;s Javascript link): Incidentally it&#39;s possible to _comment-out_ the implied semicolon in Javascript as follows:</p>
<p>return /*</p>
<p>*/ {</p>
<p>	javascript : &quot;fantastic&quot;</p>
<p>};</p>
<p>In my opinion this only makes the idea appear worse.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-932823">
				<div id="div-comment-932823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932823">
			August 29, 2011 at 9:31 pm</a>		</div>

		<p>@Chris B, Joshua: That&#39;s not how semicolon insertion works: re ECMA-262v5, 7.9.1, semicolons are inserted before either a closing brace or the first token on a new line if and only if that token is not syntatically valid there. The problem with semicolon insertion is not where it puts them, but where it *doesn&#39;t* put them after you are used to skipping them:</p>
<p>if (!authorized) return</p>
<p>fireTheNukes();</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-932903">
				<div id="div-comment-932903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932903">
			August 30, 2011 at 8:26 am</a>		</div>

		<p>@David Walker: Insert parens and brackets &quot;everywhere&quot; and then suggest that to the developer? &nbsp;Then the developer will take the suggestion, and the syntax might be right but the meaning will change, and the developer will blame the compiler writers assuming the developer ever notices that the wrong thing is happening.</p>
<p>That&#39;s why you should read, and fix, your warnings.</p>
<p>Notice, if there&#39;s multiple ambiguous places where characters could be inserted automatically to fix the code, it should not compile. And of course the message should suggest fixing the code where the most common typos are likely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-932963">
				<div id="div-comment-932963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-932963">
			August 30, 2011 at 10:34 am</a>		</div>

		<p>@Drak You obviously missed the part where anonymous and I were talking about the <code>undefined reference to vtable</code> error in gcc (as the prime example of useless error messages produced by c++ compilers) &#8211; and if THAT one was obvious to you without any further information I&#39;d be extremely surprised. So I assume you should use vim to to read these comments? :p</p>
<p>Obviously a simple error as the above is trivial to trace back to a macro (never said anything else), although if you ever had to work on a project that uses lots of deeply nested macros you&#39;ll probably find it a lot easier to understand the actual problem by letting the preprocessor run over it and see the actual code (so why not let the compiler do it for you? saves work)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933003">
				<div id="div-comment-933003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-933003">
			August 30, 2011 at 10:37 pm</a>		</div>

		<p>@Voo: Argh, I should have @Anonymous&#39;d&#8230; He&#39;s the one that found the bracket error confusing. My bad! I&#39;ve personally never seen a vtable error, so I&#39;d probably freak out over it if it came my way :)</p>
<p>@Simon: My hobby project is on Linux, and the previous creator of the code was nice enough to make all the macros in its header file in all caps. I sort-of presumed this was convention. (Shows I&#39;m a hobby C-er, doesn&#39;t it :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933113">
				<div id="div-comment-933113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-933113">
			August 31, 2011 at 10:21 am</a>		</div>

		<p>@Drak: Oh then you&#39;d love that one. GCC even has a point about this error in their FAQ. To quote: &quot;The ISO C++ Standard specifies that all virtual methods of a class that are not pure-virtual must be defined, but does not require any diagnostic for violations of this rule [class.virtual]/8. Based on this assumption, GCC will only emit the implicitly defined constructors, the assignment operator, the destructor and the virtual table of a class in the translation unit that defines its first such non-inline method.&quot;</p>
<p>Or more humanly formulated: If you don&#39;t define at least one non-inlined virtual method, you&#39;ll get a linker(!) error bemoaning the missing vtable and such.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933323">
				<div id="div-comment-933323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/computer_2D00_dude_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>computer-dude@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-933323">
			September 1, 2011 at 10:58 pm</a>		</div>

		<p>How is this topic anything to do with the recycle bin?</p>
<div class="post">[<i>It doesn&#39;t. But it&#39;s a prerequisite. Hint: In <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/08/30/10202076.aspx" rel="nofollow">the first recycle bin article</a>, there is a link from PSGUID_DISPLACED to this article. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933513">
				<div id="div-comment-933513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Riccardo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110829-00/?p=9783#comment-933513">
			September 4, 2011 at 12:12 pm</a>		</div>

		<p>&quot;Well there&#39;s your problem. After the preprocessor does its substitution, the line becomes</p>
<p>&nbsp; &nbsp;if (IsEqualGUID(guid, { 0xb725f130,</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0x47ef, 0x101a,</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{ 0xa5, 0xf1, 0x02, 0x60, 0x8c, 0x9e, 0xeb, 0xac } })) { &#8230; }</p>
<p>and that&#39;s not legal C/C++. (Though with a little tweaking, you can get GCC to accept it.)&quot;</p>
<p>Wouldn&#39;t a C++11 initializer_list work here? Incidentally, I think C++11 initializer_list&#39;s are far superior to C99 compound literals; no nasty cast necessary.</p>
<div class="post">[<i>Given that the question was asked before C++11 was ratified (or even had a name!), the suggestion is a bit moot. &quot;Hey, this would be a lot easier if you used this technology that hasn&#39;t been invented yet.&quot; (Even today, you&#39;ll probably find that a lot of projects are still being built with pre-C++11 compilers.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>