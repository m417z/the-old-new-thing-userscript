<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1001713">
				<div id="div-comment-1001713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001713">
			July 31, 2012 at 7:06 am</a>		</div>

		<p>&quot;Exercise: What if you want to extract more than 26 words?&quot;</p>
<p>You use the SHIFT command, of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1001753">
				<div id="div-comment-1001753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001753">
			July 31, 2012 at 7:29 am</a>		</div>

		<p>Backquoting is all well and good for simple Unix shell scripts, but if you&#39;re doing any complicated nesting, it&#39;s preferred to use $(command) instead of <code>command</code>, since parens nest but backquotes don&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1001763">
				<div id="div-comment-1001763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001763">
			July 31, 2012 at 7:46 am</a>		</div>

		<p>shift command is for %0-9 (and beyond), won&#39;t work on any other variables AFAIK.</p>
<p>I did not know the for command could do this. &nbsp;I figured you were going to tell us to &gt; to a file and then use for on the file but no, you can cut out that middleman. &nbsp;Good to know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1001793">
				<div id="div-comment-1001793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001793">
			July 31, 2012 at 8:17 am</a>		</div>

		<p>How about</p>
<p>echo &quot;set foo=&quot; &gt; foo.bat</p>
<p>COMMAND &gt; foo.bat</p>
<p>call foo.bat</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-xpclientgmail-com even thread-even depth-1" id="comment-1001823">
				<div id="div-comment-1001823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/xpclient' rel='external nofollow' class='url'>xpclient</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001823">
			July 31, 2012 at 8:27 am</a>		</div>

		<p>1 click bat file to share with &quot;Authenticated Users&quot;:</p>
<p>for /f &quot;delims=&quot; %%A in (&#39;cd&#39;) do (set foldername=%%~nxA)</p>
<p>net share &quot;%foldername%&quot;=&quot;%cd%&quot; /grant:&quot;Authenticated Users&quot;,Read</p>
<p>Life&#39;s good with batch files amidst horrid GUIs. Thankfully, support hasn&#39;t been removed yet from cmd.exe citing lower telemetry usage or availability of PSH.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1001843">
				<div id="div-comment-1001843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jps</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001843">
			July 31, 2012 at 8:38 am</a>		</div>

		<p>Love Batch Week! This is very useful info. Thanks</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1001853">
				<div id="div-comment-1001853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ari</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001853">
			July 31, 2012 at 8:44 am</a>		</div>

		<p>You can also use the delims to your advantage. In this case, if you use &#39;:&#39; as a delimiter you can avoid all the counting.</p>
<div class="post">[<i>No, it just shifts the counting. Now you have to count the dots so you include the right number in your comparison string. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1001863">
				<div id="div-comment-1001863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001863">
			July 31, 2012 at 8:54 am</a>		</div>

		<blockquote><p>
  But this version will get fooled by the line Autoconfiguration IPv4 Address
</p></blockquote>
<p>&#39;ipconfig ^| findstr /C:&quot;IPv4 Address&quot; ^| findstr /v &quot;Autoconfiguration&quot;&#39; will filter that out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1001873">
				<div id="div-comment-1001873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hello71</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001873">
			July 31, 2012 at 9:20 am</a>		</div>

		<p>Or you do this:</p>
<p>&nbsp; &nbsp;ipconfig ^| findstr /R &quot;^IPv4 Address&quot;</p>
<p>Some escaping may be needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1001883">
				<div id="div-comment-1001883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001883">
			July 31, 2012 at 9:57 am</a>		</div>

		<p>The way I have seen people do these kinds of thing back in the DOS days (so, with a more limited batch language) was something like:</p>
<ol>
<li>Write the output of the command (in this example, ipconfig, even though AFAIK ipconfig did not exist in the DOS days) to a .bat file.</li>
<li>
<p>Have a IPv4.bat in the current directory.</p>
</li>
<li>
<p>Run the output of step 1, which will call the IPv4.bat (perhaps after a few &quot;command or filename not found&quot; error messages caused by the preceding lines in the generated file). Execution of the generated .bat file stops here (because it did not use CALL).</p>
</li>
<li>
<p>The IPv4.bat received the value as a parameter. It creates another .bat file with a SET command to set the output to a variable.</p>
</li>
<li>
<p>Run the output of step 4 (execution of IPv4.bat stops here).</p>
</li>
<li>
<p>Run the original .bat file again, passing it a parameter to tell it to skip (with a GOTO) the above steps (execution of the second generated .bat file stops here).</p>
</li>
<li>
<p>(optional) Do a CLS to clear the junk in the screen.</p>
</li>
<li>
<p>(optional) Erase the temporary .bat files created in steps 1 and 4.</p>
</li>
</ol>
<p>Yeah, self-modifying batch file scripting. When all you have is a hammer&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1001903">
				<div id="div-comment-1001903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr&#237;guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001903">
			July 31, 2012 at 10:53 am</a>		</div>

		<p>Preemptive snarky comment: the word &quot;PowerShell&quot; is forbidden during Batch File Week :-P .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1001923">
				<div id="div-comment-1001923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skyborne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001923">
			July 31, 2012 at 11:07 am</a>		</div>

		<p>@Adam Rosenfield, backquotes nest with the appropriate, tricky number of backslashes. &nbsp;It&#39;s just a pain to change the nesting levels.</p>
<p>Unix people like to make it possible to do everything, even if you want to claw your eyes out afterwards, than create an impossible case (&quot;what if I want to send a literal backtick into a printf string run from my zsh prompt?&quot;). &nbsp;This is also why you can technically embed interesting things like 07, 7f, or 1f5b376d in filenames.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1001943">
				<div id="div-comment-1001943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001943">
			July 31, 2012 at 11:32 am</a>		</div>

		<p>@Matt: your resulting batch file looks like</p>
<p>set foo=</p>
<p>[output from command]</p>
<p>which will unset foo then run the output as a command, most likely resulting in &quot;&#8230; is not recognized&#8230;&quot;</p>
<p>I&#39;m not aware of any way to tell the redirection operator to omit the newline.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1001963">
				<div id="div-comment-1001963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henrik Jensen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001963">
			July 31, 2012 at 1:01 pm</a>		</div>

		<p>Suggestion to solution for exercise.</p>
<p>Reserve process the first 25 tokens, reserve the %%z for the reminder and run for /f again on the reminder.</p>
<hr />
<p>@echo off</p>
<p>setlocal</p>
<p>for /F &quot;tokens=1-25,*&quot; %%a in (&#39;echo a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9&#39;) do ^</p>
<p>set _first25= %%a %%b %%c %%d %%e %%f %%g %%h %%i %%j %%k %%l %%m %%n %%o %%p %%q %%r %%s %%t %%u %%v %%w %%x %%y &amp;&amp; ^</p>
<p>for /F &quot;tokens=1-11&quot; %%a in (&#39;echo %%z&#39;) do set _last10= %%a %%b %%c %%d %%e %%f %%g %%h %%i %%j</p>
<p>echo _first25=%_first25%</p>
<p>echo _last10=%_last10%</p>
<hr />

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1001983">
				<div id="div-comment-1001983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henrik Jensen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001983">
			July 31, 2012 at 1:11 pm</a>		</div>

		<p>Ups! 2nd call to echo not needed</p>
<p>for /F &quot;tokens=1-11&quot; %%a in (&#39;echo %%z&#39;) -&gt; for /F &quot;tokens=1-11&quot; %%a in (&quot;%%z&quot;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1001993">
				<div id="div-comment-1001993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1001993">
			July 31, 2012 at 2:46 pm</a>		</div>

		<p>Batch file programming is an exercise in constrained writing that makes Unix shell scripting look positively sane and appropriate. Personally, I&#39;d rather be forced to write everything without the letter &quot;t&quot; than ever go back to systems that don&#39;t have PowerShell installed.</p>
<p>Even when PowerShell didn&#39;t exist, I usually just gave up and copied over Win32 ports of Unix tools. The only dragon left to wrestle with then is figuring out which combination of sigils will get you the desired manner of escaping for your input (if the escaping you&#39;re looking for is even possible, that is, and doesn&#39;t mandate intermediate files).</p>
<p>My mother always told me that if you have nothing nice to say, you shouldn&#39;t say anything at all, so I&#39;d better stop here before I really unload.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1002003">
				<div id="div-comment-1002003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1002003">
			July 31, 2012 at 3:12 pm</a>		</div>

		<p>For the exercise: do you have to use single character variable names? Instead of %%A, %%B, etc can&#39;t you use %ANOTHERVAR%?</p>
<p>In any case, maybe parsing something that complicated with a batch file is a mistake :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1002033">
				<div id="div-comment-1002033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chentiangemalc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1002033">
			July 31, 2012 at 4:59 pm</a>		</div>

		<p>hmm well I love batch file week! must have been growing up on MS-DOS. fun to see the younger IT crowd look in awe as you actually make a batch file do something useful. :) i got bored once and figured out how to take this IP address stuff a bit further, and do full binary conversion, calculate the network address. this allowed me to check if a computer was in a specific subnet. an example of the code i put on my blog here <a rel="nofollow" target="_new" href="http://chentiangemalc.wordpress.com/2011/01/26/how-to-do-binary-conversion-using-command-line-only/" rel="nofollow">chentiangemalc.wordpress.com/&#8230;/how-to-do-binary-conversion-using-command-line-only</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1002023">
				<div id="div-comment-1002023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M Hotchin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1002023">
			July 31, 2012 at 3:38 pm</a>		</div>

		<p>Ah, memories. &nbsp;I remember a similar question came up when I was working as Large Multination Corp, and at the time there were problems with bugs in CMD handling of &#39;delayed environment variable expansion&#39;.</p>
<p>And here&#39;s my part of the thread! &nbsp;I knew keeping old mail around was, um, useful.</p>
<p>&#8212;&#8212;</p>
<p>There are games you can play with delayed env variable expansion, but there are some problems:</p>
<p>•	No good way to put a newline into the value of a env variable, so the &#39;contents&#39; all ends up as one long line</p>
<p>•	You need to enable a special ability, using &#39;cmd /V&#39; (but you can enable it by default).</p>
<p>•	Delayed env expansion is broken on 2195 SP1 (and maybe others).</p>
<p>The example given in the help for &#39;set&#39; is thus:</p>
<p>set LIST=</p>
<p>for %i in (*) do set LIST=!LIST! %i</p>
<p>However, the final result is thus:</p>
<p>E:someplace&gt;set LIST</p>
<p>LIST=!LIST! buildd.log coffbase.ast coffbase.dbg coffbase.rtl dirs gohist.dat srcbase</p>
<p>CMD both interpreted &#39;!LIST!&#39;, and added it to the value of the variable. &nbsp;Even better:</p>
<p>E:someplace&gt;set LIST=foo</p>
<p>E:someplace&gt;for %i in (*) do set LIST=!LIST! %i</p>
<p>E:someplace&gt;set LIST</p>
<p>LIST=foo buildd.log coffbase.ast coffbase.dbg coffbase.rtl dirs gohist.dat srcbase</p>
<p>So, if the variable is empty to begin with, you get the wrong answer. &nbsp;Whee.</p>
<p>But just for grins:</p>
<p>&gt;set FOO=qwerty</p>
<p>&gt;type foo.txt</p>
<p>foo bar</p>
<p>foo</p>
<p>bar</p>
<p>baz</p>
<p>&gt;for /F &quot;delims=&quot; %i in (foo.txt) do set FOO=!FOO!^|%i</p>
<p>&gt;set FOO</p>
<p>FOO=qwerty|foo bar|foo|bar|baz</p>
<p>&gt;set &quot;FOO=%FOO:~7%&quot;</p>
<p>&gt;set FOO</p>
<p>FOO=foo bar|foo|bar|baz</p>
<p>Voila, a env variable with the contents of a file, each line delimited by &#39;|&#39;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1002053">
				<div id="div-comment-1002053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1002053">
			August 1, 2012 at 1:38 am</a>		</div>

		<p>Speaking of batch files, here&#39;s something I ran into a few years ago:</p>
<p><a rel="nofollow" target="_new" href="http://eternallybored.org/misc/mandel.cmd" rel="nofollow">eternallybored.org/&#8230;/mandel.cmd</a></p>
<p>Yes, it does exactly what it&#39;s name implies.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1002043">
				<div id="div-comment-1002043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew T</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1002043">
			July 31, 2012 at 6:40 pm</a>		</div>

		<p>I&#39;m reminded of this cunnining one liner from a previous role &#8211; we were storing custom information in the comment attribute (needed for nt4 compadibility):</p>
<p>for /f %%a in (&#39;dsquery user -name e* -limit 1000^|dsget user -samid&#39;) do for /f &quot;tokens=2,*&quot; %%m in (&#39;net user %%a /domain^|find /i &quot;user&#39;s comment&quot;&#39;) do for /f &quot;tokens=1,2 delims=#&quot; %%p in (&quot;%%n&quot;) do net user %%a /usercomment:&quot;%%p#%%q&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1002063">
				<div id="div-comment-1002063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1002063">
			August 1, 2012 at 1:41 am</a>		</div>

		<p>@Example by Andrew T</p>
<p>This is nearly unreadable. And even on Unix where I have written a good amount of shell and awk scripts myself, I found that using scripts as part of tools makes this tools nearly unmaintenable. At all places command arguments and environment variables get expanded, but most of this breaks with spaces in filenames or directory names because its a real pain to correctly escape / quote all this cases.</p>
<p>Using shell scripts a lot is nearly as bad as using symbolic links to simulate some kind of version control: One or two may be good, but as soon as there are 20 or more, its becomes very hard to understand.</p>
<p>Its just try-and error because you do not have a debugger. You cannot single-step. You cannot inspect variables during the execution (only by putting &quot;echo&quot; everywhere). You do not have &quot;compiler warnings&quot; to catch typos.</p>
<p>But the crown of all this mess goes to the classic Unix makefiles. To control the correct expansion of variables from the make script as also from the environment when using them as part of make rules or as part of commands is a very weird task.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1002073">
				<div id="div-comment-1002073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1002073">
			August 1, 2012 at 2:19 am</a>		</div>

		<p>There&#39;s a reason why I always install Cygwin in my WinXP days. So many neat tools that&#39;ll save the day at your finger tips.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1002083">
				<div id="div-comment-1002083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1002083">
			August 1, 2012 at 3:33 am</a>		</div>

		<p>@Raymond I think Ari means this:</p>
<p>for /f &quot;tokens=2 delims=:&quot; %%a in (&#39;ipconfig ^| find &quot; &nbsp;IP Address&quot;&#39;) do @for /f %%a in (&quot;%%a&quot;) do @echo %%a</p>
<p>The second for is necessary to trim the white space around the IP address found by the first for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1002093">
				<div id="div-comment-1002093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1002093">
			August 1, 2012 at 4:29 am</a>		</div>

		<p>I learned about the ^ line continuation char immediately after I switched from a several-yaes position that involved many cmd file maintenance. It makes long commands so much nicer:</p>
<p>msbuild bla.sln^</p>
<p>&nbsp; &nbsp;/t:clean;build^</p>
<p>&nbsp; &nbsp;/clp:verbosity=minimal</p>
<p>etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1002103">
				<div id="div-comment-1002103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pcooper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1002103">
			August 1, 2012 at 6:46 am</a>		</div>

		<p>You should have Batch File Week every year. It&#39;s kind of like those obfuscated code contents or contrived languages like Whitespace. You can do everything, it&#39;s just a pain, and watching people use it is like watching some twisted type of art…</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1002113">
				<div id="div-comment-1002113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1002113">
			August 1, 2012 at 6:59 am</a>		</div>

		<p>@Someone: There is set -u, which warns of typos in variable names (sort of; it is actually &quot;treat undefined variables as an error&quot;), and set -e, which aborts the script in case any command fails (unless you catch it with || true). There is also set -x, which traces the command execution, and can be very useful for finding errors in your script.</p>
<p>Just today we found an error where a sourced file was with CRLF line endings, resulting in a stray CR at the end of the variables set by that file; bash with set -x nicely showed the value (being passed as a parameter to a command) as $&#39;asdfr&#39; instead of asdf, making it obvious what the problem was.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1002183">
				<div id="div-comment-1002183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120731-00/?p=7003#comment-1002183">
			August 1, 2012 at 7:50 am</a>		</div>

		<p>@Cesar: I did know this all back then :) But when there are many scripts calling each other, each several hundred lines long, some of them containing very long awk/sed/whatever inline scripts (up to the HP UX maximum of 64k text), calling native custom EXEs in between to retrieve various infos from a database etc etc, then its time to throw it all away and use a real program.</p>
<p>Some general remark: Sometimes, you see some command line &quot;cmd arg1 arg2&#8230;.&quot; executed but you cannot see how this is broken up into the argv[] argument of cmd&#39;s main(). Also, with filename expansion done by the shell vs. filenames containing whitespace or special characters, you cannot easely see from the trace what parts of the text line are handled &nbsp;by the interpreter as one or several tokens.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>