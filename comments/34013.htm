<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-309323">
				<div id="div-comment-309323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309323">
			September 28, 2005 at 10:03 am</a>		</div>

		<p>As someone pointed out, you might have vtable problems with this solution.  But you so say it is a workaround and not a full solution.</p>
<p>Simple assignment works since all references to the object are gone and thus there shouldn&#8217;t be any threading issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309333">
				<div id="div-comment-309333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Graham Harper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309333">
			September 28, 2005 at 10:29 am</a>		</div>

		<p>This &quot;m_cRef = DESTRUCTOR_REFCOUNT&quot; is safe simply because if your executing this code nothing else has a reference to the object (in any thread). Only one thread can &quot;Clean up&quot;.</p>
<p>If any other thread did have a reference the count wouldn&#8217;t have transitioned to zero.</p>
<p>The only caveat is when someone has got a non-referenced counted pointer to the object (intentionally or unintentionally). If this is the case then they deserve everything they get (crashes, corrupt memory, objects disappearing etc)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-309343">
				<div id="div-comment-309343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309343">
			September 28, 2005 at 10:38 am</a>		</div>

		<p>It&#8217;s 2005, no need for the enum hack anymore :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309353">
				<div id="div-comment-309353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arlie Davis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309353">
			September 28, 2005 at 11:13 am</a>		</div>

		<p>Um, I would strongly chastise any developer on my team who wrote such code.  A reference count of 42 is quite low; when you include callback interfaces, &quot;site&quot; interfaces, etc. 42 is well within the bounds for a reasonable program.</p>
<p>If you must, use a negative value, or at least some huge positive value.</p>
<p>My solution to this has been to mandate that object destructors only deal with freeing memory (breaking reference cycles on subgraphs, etc.) or releasing handles to unmanaged resources.  &quot;Semantic&quot; actions, such as saving a file, are forbidden.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-309363">
				<div id="div-comment-309363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zahical</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309363">
			September 28, 2005 at 11:47 am</a>		</div>

		<p>&quot;Bytes 2-3 The second word of the file is the TIFF <em>version<br />
<br />number.</em> This number, 42 (2A in hex), is not to be equated<br />
<br />with the current Revision of the TIFF specification&#8230;.<br />
<br />&#8230;The number 42 was chosen for its deep<br />
<br />philosophical significance.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309373">
				<div id="div-comment-309373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.virtualdub.org/' rel='external nofollow' class='url'>Phaeron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309373">
			September 28, 2005 at 11:52 am</a>		</div>

		<p>Doing the Save() operation from Release() instead of from the destructor would avoid the vtable problem and allow the object to survive past the &quot;last&quot; Release() call, since you can keep a legitimate reference on the object. However, you can still run into nasty problems with a client function that isn&#8217;t reentrant. Often member pointers are released in &quot;mp-&gt;Release(); mp = NULL;&quot; order, so if you do something in your Release() that causes recursion into the client function, you&#8217;ll hit a double-Release() problem.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-309383">
				<div id="div-comment-309383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://1001010.com' rel='external nofollow' class='url'>Jason De Arte</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309383">
			September 28, 2005 at 1:29 pm</a>		</div>

		<p>I agree with Arlie in that destructors need to be limited to memory housekeeping and not user actions.  If the user wants to save/write the settings &#8211; let them explicitly do that.</p>
<p>I wouldn&#8217;t multipurpose your m_cRef. That&#8217;s for certain.  What you really need is a simple state variable (&quot;bool m_bShuttingDown&quot;?) or an enum (if you want to get detailed) to check against before doing potentially crashing activities.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309393">
				<div id="div-comment-309393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.simulplex.net/' rel='external nofollow' class='url'>Klaus H. Probst</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309393">
			September 28, 2005 at 2:05 pm</a>		</div>

		<p>@Arlie &#8211; </p>
<p>The 42 is not a reference count threshold, it&#8217;s just being used as a flag. I suppose Raymond used it because 42 is the answer to all questions =)</p>
<p>Maybe using -1 would work better and be more readable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-309403">
				<div id="div-comment-309403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kbiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309403">
			September 28, 2005 at 3:07 pm</a>		</div>

		<p>Arlie,</p>
<p>Using 42 is completely safe since the assertion will not occur until the ref count has reached zero and the object is being destroyed.  At this point any flag value is valid except for 0.</p>
<p>Mandating that destructors only deal with freeing memory and handles and breaking reference cycles is short-sighted.  If that is true, then your object must rely on the consumer to perform some critical behavior such as saving before releasing your object which is even worse than the work around presented in this article since no consumer should be required to keep track of your references.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309413">
				<div id="div-comment-309413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kbiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309413">
			September 28, 2005 at 3:09 pm</a>		</div>

		<p>Klaus,</p>
<p>42 is certainly not the answer to ALL questions.  It is only the answer to The Ultimate Question of Life, The Universe, and Everything.  Now if only we knew the question.  :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-309423">
				<div id="div-comment-309423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309423">
			September 28, 2005 at 3:10 pm</a>		</div>

		<p>Silly question, I&#8217;m sure, but why is InterlockedDecrement used?</p>
<p>The only reason I can think of is for multithread safety.  But that Release function doesn&#8217;t look multithread safe &#8212; what if another thread was about to increment m_cRef?  Does the AddRef refcount incrementer have a special interlocked check for zero to catch this case?</p>
<p>(Mind you, I don&#8217;t know anything about the COM system, I&#8217;m just looking at it from the perspective of refcounting.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309433">
				<div id="div-comment-309433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PiersH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309433">
			September 28, 2005 at 3:14 pm</a>		</div>

		<p>of course, if you were using ATL (and implementinf FinalRelease() ) then this would never have been a problem.</p>
<p>    // Set refcount to -(LONG_MAX/2) to protect destruction and<br />
<br />    // also catch mismatched Release in debug builds<br />
<br />    virtual ~CComObject() throw()<br />
<br />    {<br />
<br />        m_dwRef = -(LONG_MAX/2);<br />
<br />        FinalRelease();<br />
<br />#ifdef _ATL_DEBUG_INTERFACES<br />
<br />        _AtlDebugInterfacesModule.DeleteNonAddRefThunk(_GetRawUnknown());<br />
<br />#endif<br />
<br />        _pAtlModule-&gt;Unlock();<br />
<br />    }</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-309443">
				<div id="div-comment-309443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309443">
			September 28, 2005 at 3:17 pm</a>		</div>

		<p>Daev: Think about how it would be possible for somebody to AddRef() while somebody else was Release()ing to zero.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309453">
				<div id="div-comment-309453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309453">
			September 28, 2005 at 4:30 pm</a>		</div>

		<p>@kbiel: MAndating that destructiosn deal with trivial things is entirely reasonable. As the ::Release method can deal with what happens when the ref-count hits zero before it destroys the object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-309473">
				<div id="div-comment-309473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Maks Verver</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309473">
			September 28, 2005 at 7:18 pm</a>		</div>

		<p>@Arlie: the &#8216;flag&#8217; value must either be positive or (if negative) very large. A small positive value (eg. 1) is preferred to avoid wrap-around. A small negative value doesn&#8217;t work, because a series of increments and decrements could result in another deletion!</p>
<p>Note that the flag value is a lower bound on the possible values the reference count can take (assuming the application increments and decrements correctly &#8211; otherwise things go wrong anyway), so 42 is actually fine as a flag value, but definitely -1 or 2147483647 would definitely not be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309503">
				<div id="div-comment-309503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309503">
			September 28, 2005 at 10:26 pm</a>		</div>

		<p>Wednesday, September 28, 2005 3:17 PM by oldnewthing<br />
<br />&gt; Daev: Think about how it would be possible<br />
<br />&gt; for somebody to AddRef() while somebody else<br />
<br />&gt; was Release()ing to zero.</p>
<p>I&#8217;m not Daev but I&#8217;m trying to think about this.  It seems to me that the reason why InterlockedDecrement() is needed is:  it would be possible for somebody to AddRef() while somebody else was Release()ing to NONZERO.  If somebody else was releasing to zero then no one has a valid pointer to this object for the purpose of AddRef(), so maybe the Release() method could try to figure out whether or not it needs to call InterlockedDecrement() at this particular time or not, but there&#8217;s no point in trying to figure that out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-309523">
				<div id="div-comment-309523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Graham Harper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309523">
			September 29, 2005 at 5:46 am</a>		</div>

		<p>One reason the Interlocked functions are needed can been be seen from the disassembly of this simple code:</p>
<p>&#8211;m_lRef;</p>
<p>When disassembling the simple prefix decrement above from an executable generated by the VS2002 (x86) C++ compiler you get (something like) the following (assume eax holds the address of m_lRef):</p>
<p>mov ecx,dword ptr [eax]<br />
<br />sub ecx,1<br />
<br />mov dword ptr [eax],ecx</p>
<p>If the kernel (for what ever reason) preempts this thread between the first MOV and SUB instruction and subsequently schedules another thread that completes an AddRef() in it’s entirety, the code above (when scheduled again by the kernel) will be operating on a “stale” value. </p>
<p>This can result in all sorts of strange behavior in a multi-threaded environment. Objects disappearing when threads have “valid” references is just one symptom.</p>
<p>Looking at the disassembly of the “InterlockedDecrement” function (again on an x86 machine) from Kernel32 you can see that the load, decrement and store is done atomically thus alleviating the errors encountered above:</p>
<p>SYM:_InterlockedDecrement@4<br />
<br />0x7C809794: 8B4C2404       MOV      ECX,DWORD PTR [ESP+0x4]</p>
<p>0x7C809798: B8FFFFFFFF     MOV      EAX,0xFFFFFFFF</p>
<p>0x7C80979D: F00FC101       LOCK     XADD  DWORD PTR [ECX],EAX</p>
<p>0x7C8097A1: 48             DEC      EAX</p>
<p>0x7C8097A2: C20400         RET      0x4</p>
<p>Interestingly the COM specification does not guarantee the accuracy of the reference count returned by AddRef() or Release() UNLESS the return value is 0. It’s easy to understand why given the fact that you cannot accurately determine the value of the ref count at any-one point unless you are the thread cleaning up, in which case the object is no longer in a volatile state. (NOTE: This is not the only reason COM doesn’t guarantee these return values)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309593">
				<div id="div-comment-309593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Moasat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309593">
			September 29, 2005 at 11:46 am</a>		</div>

		<p>The Interlocked functions should be used for both AddRef and Release if the code will be used in a multi-threaded project.  Even though you only have to know if they hit zero, it still needs to be thread-safe.  This is assuming multiple threads can and will be calling AddRef and Release.</p>
<p>The reason you can do a simple assign to cRef is because it is simply that, an assign.  An assign is not a read/modify/write operation.  It is already atomic.  Increment/Decrement are not atomic and so must have a LOCK prefix, or in Windows terms an Interlocked prefix.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-309633">
				<div id="div-comment-309633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kbiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309633">
			September 29, 2005 at 1:32 pm</a>		</div>

		<p>Chris: MAndating that destructiosn deal with trivial things is entirely reasonable. As the ::Release method can deal with what happens when the ref-count hits zero before it destroys the object.</p>
<p>You still have to deal with the exact same issues whether you call your save method from ::Release or from the destructor.  Beside that fact, not everything is COM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309683">
				<div id="div-comment-309683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ipoverscsi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309683">
			September 29, 2005 at 11:24 pm</a>		</div>

		<p>@Daev</p>
<p>Once the Class Object (essentially a factory for creating COM objects) creates an instance of a COM object, the only way to get another reference to that object is if you already have a reference to it.  This means that it is impossible for AddRef() to be called (in a valid program) if the InterlockedDecrement() in Release() results in the reference count being zero.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-309653">
				<div id="div-comment-309653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-309653">
			September 29, 2005 at 5:07 pm</a>		</div>

		<p>Some very insightful comments have been made showing why the Interlocked instructions are required in a multithreaded program.</p>
<p>However, my original question was a little different:  not why is the InterlockedDecrement necessary, but why is it *sufficient*?</p>
<p>(Raymond&#8217;s answer was a very diplomatic way of suggesting I think about how COM works a bit more.  I&#8217;ve been reasoning from a naive model of refcounted pointers to structs, since I don&#8217;t know COM.)</p>
<p>Assuming AddRef is nothing but an InterlockedIncrement instruction, why doesn&#8217;t the entire Release function need to be mutex-protected?  What if one thread is about to call InterlockedIncrement in AddRef when a second thread gets control, ends up decrementing the object&#8217;s refcount to zero, and is then about to call &quot;delete&quot; when the first thread regains control?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-480953">
				<div id="div-comment-480953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.antcassidy.com/code/?p=44' rel='external nofollow' class='url'>Code &raquo; Blog Archive &raquo; Adding reference counting to something.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-480953">
			March 11, 2007 at 3:50 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.antcassidy.com/code/?p=44" rel="nofollow">http://www.antcassidy.com/code/?p=44</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-679523">
				<div id="div-comment-679523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/11/03/9030246.aspx' rel='external nofollow' class='url'>The Old New Thing : If there's already a bug, it's not surprising that there's a possibility for error</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050928-10/?p=34013#comment-679523">
			November 3, 2008 at 11:29 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2008/11/03/9030246.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2008/11/03/9030246.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>