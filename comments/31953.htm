<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-354113">
				<div id="div-comment-354113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-354113">
			March 13, 2006 at 11:05 am</a>		</div>

		<p>In case of multiple threads waiting for an autoreset semaphore, i hope the thread that started blocking on the semaphore most recently is continued, in the hope that the stack it uses is still in the cpu cache.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion odd alt thread-odd thread-alt depth-1" id="comment-354133">
				<div id="div-comment-354133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-354133">
			March 13, 2006 at 11:29 am</a>		</div>

		<p>The solution, of course, is to ditch events and to use condition variables &#8211; natively implemented for the first time in Windows Vista (could probably be backported all the way back to Windows XP, IIRC it&#8217;s all about basic operations plus keyed events), and independently implemented against the POSIX standard by RedHat as part of the Win32 POSIX threading library (<a rel="nofollow" target="_new" href="http://sourceware.org/pthreads-win32/" rel="nofollow">http://sourceware.org/pthreads-win32/</a>)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354153">
				<div id="div-comment-354153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-354153">
			March 13, 2006 at 12:03 pm</a>		</div>

		<p>&quot;In case of multiple threads waiting for an autoreset semaphore, i hope the thread that started blocking on the semaphore most recently is continued, in the hope that the stack it uses is still in the cpu cache.&quot;</p>
<p>What if that thread is servicing a kernel APC at the time?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-354163">
				<div id="div-comment-354163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pcooper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-354163">
			March 13, 2006 at 12:38 pm</a>		</div>

		<p>You answer your exercise at the end of the linked-to &quot;the PulseEvent function is fundamentally flawed&quot; article.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354173">
				<div id="div-comment-354173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-354173">
			March 13, 2006 at 12:38 pm</a>		</div>

		<p>Why would you want to predict something like this &nbsp;?!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-354243">
				<div id="div-comment-354243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-354243">
			March 13, 2006 at 4:27 pm</a>		</div>

		<p>Even if you take out of consideration that a thread might be pulled out the wait queue to service an APC, I see nothing in the documentation (SDK or DDK) that indicates the system guarantees fairness or a particular order for releasing threads waiting on an event (or other waitable object).</p>
<p>One commenter said that the most recent waiting thread should be dispatched in order to help maintain cache coherency. &nbsp;However, this would introduce a potential starvation problem for other waiting threads, so you might want to have a FIFO ordering.</p>
<p>Then again, the algorithm might be more complex, tending toward releasing the most recent waiting thread (to preserve cache coherency) but not do this all the time to prevent starvation.</p>
<p>Also, you might want to factor in the priority of the waiting threads in the decision.</p>
<p>I don&#8217;t know how Windows decides which thread to release when more than one is waiting, and I believe that code should not be written to expect such a promise (I&#8217;d guess it&#8217;s a FIFO or prioritized FIFO, but code should not depend on this).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354263">
				<div id="div-comment-354263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">8</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-354263">
			March 13, 2006 at 5:37 pm</a>		</div>

		<p>JJ, exactly. Trying to predict it only results in nastiness. (The &quot;WFM&quot; bugs)</p>
<p>Mikeb, I think the cache will already have had several misses by the time execution continues for any given released thread on a uniprocessor machine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-354273">
				<div id="div-comment-354273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">offby1@blarg.net</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-354273">
			March 13, 2006 at 6:27 pm</a>		</div>

		<p>How much would they have to pay you to write Win32 documentation? &nbsp;Why can&#8217;t the official Win32 docs be one-tenth as clear and engaging as your writing? &nbsp;Grr.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354283">
				<div id="div-comment-354283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Farino</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-354283">
			March 13, 2006 at 7:32 pm</a>		</div>

		<p>I once did a kernel debug session to see what happened inside of KeWaitForMultipleObjects when multiple threads were waiting on a single auto-reset event. I was surprised to see all of the threads were actually made runnable as a result of the event being set. (I would have expected only one of the threads to become runnable.)</p>
<p>Each thread, when it was eventually scheduled, would look at the current state of the kernel object it had just waited on. If it was not still signalled, it would simply loop back and begin waiting on the same object again. (The first thread would see the object as signalled, and, since the event was configured to auto-reset, would then set the event to the non-signalled state).</p>
<p>So it seems to me that the answer to the question is: (of the threads that were actually blocked waiting for the event inside of KeWaitForMultipleObjects) the first one to reach the code path in KeWaitForMultipleObjects that<br />
<br />&quot;unsignals&quot; the event. In the case of multiple threads waiting, it seems like the decision is up to the Windows scheduler to determine which of the newly-runnable threads will be run on the CPU(s).</p>
<p>I was surprised to see this, as it means that each thread waiting for an auto-reset event will incur a context switch (even though it will not be runnable for any longer than it takes to see the event is unsignalled).</p>
<p>I&#8217;m not a Windows scheduler expert by any stretch, but I was surprised that I didn&#8217;t see a &quot;queue&quot; of some sort attached to the event. Auto-reset events just seem to let every thread go knowing that all but one will be put back to sleep in short order.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-354333">
				<div id="div-comment-354333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jasonhaley.com/blog/archive/2006/03/14/136320.aspx' rel='external nofollow' class='url'>Jason Haley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-354333">
			March 14, 2006 at 5:41 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354343">
				<div id="div-comment-354343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-354343">
			March 14, 2006 at 6:35 am</a>		</div>

		<p>Do semaphores incur the the same context switch penalties that Dan observed for auto-reset events?</p>
<p>Do critical sections incur similar context switch penalties? In <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/msdnmag/issues/03/12/CriticalSections/default.aspx" rel="nofollow">http://msdn.microsoft.com/msdnmag/issues/03/12/CriticalSections/default.aspx</a> we find out that at the heart of every critical section there&#8217;s an auto-reset event (see the description of the LockSemaphore field).</p>
<p>I&#8217;ve been toying around with building my own critical sections to learn more about them, and after reading the above article I used an event coupled to a basic spinlock. Maybe it&#8217;s time to move to semaphores.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-354643">
				<div id="div-comment-354643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Farino</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-354643">
			March 14, 2006 at 2:46 pm</a>		</div>

		<p>I&#8217;ve recreated my experiment and here&#8217;s what I found:</p>
<p>My original test was done using System.Threading.AutoResetEvent from a .NET application. I was calling WaitOne() on that event from several different threads. It looks like the CLR calls WaitForMultipleObjectsEx with nCount = 1 (instead of just calling WaitForSingleObjectEx). In this case, every thread waiting was made runnable when the event was signalled. </p>
<p>I repeated the test with a C++ app that calls WaitForSingleObjectEx (and, in the kernel, KeWaitForSingleObject). This behaved as expected: only one thread was made runnable after the event was signalled.</p>
<p>So it looks like I got bit by a CLR implementation detail on this one. I guess &nbsp;the optimizations that could be made would be either 1) having the CLR call WaitForSingleObjectEx, or 2) having the kernel optimize the case of WaitForMultipleObjectsEx with nCount = 1.</p>
<p>My apologies for incorrectly sending up the red flag on this one!<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354363">
				<div id="div-comment-354363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">memet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-354363">
			March 14, 2006 at 9:57 am</a>		</div>

		<p>Dan:<br />
<br /> Do you know which kernel you were running on? (NT 4, 5, 5.1?/ sp?).<br />
<br /> I am so surprised by what you wrote because it seems that it is a very simple optimization that could result in *huge* benefits. Just imagine the number of times threads block on events ever second.<br />
<br /> Anyways, can you share more details on what you did. Thanks.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-355433">
				<div id="div-comment-355433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060313-06/?p=31953#comment-355433">
			March 16, 2006 at 9:52 am</a>		</div>

		<p>Sounds to me that the OS is fundamentally flawed, not semaphores or events (PulseEvent) in particular.</p>
<p>If the OS didn&#8217;t do what it does, then these things would work fine.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>