<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1235576">
				<div id="div-comment-1235576" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150724-00/?p=90831#comment-1235576">
			July 24, 2015 at 7:10 am</a>		</div>

		<p>true different compilers mangle differently, however there is no need to worry about mangling here (for C++)</p>
<p>#ifdef _LMHLOGDEFINED_</p>
<p>namespace pdh</p>
<p>{</p>
<p>&nbsp; using HLOG = PDH_HLOG;</p>
<p>}</p>
<p>#endif</p>
<p>This creates a namespaced alias and is the syntax used by the C++ standard library to define functions from the C standard library into the C++ standard library. Because this is only a naming alias it doesn&#39;t have the same side effects as actually using a namespaced version.</p>
<div class="post">[<em>But the underlying problem (the &quot;true&quot; type is in the global namespace) still remains. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1222151">
				<div id="div-comment-1222151" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rangi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150724-00/?p=90831#comment-1222151">
			July 24, 2015 at 7:47 am</a>		</div>

		<p>And with a little bit more thought, they could have called it PDH_HLOG in the first place, and avoid conflict with any future HLOG definitions. Naming everything with a prefix like &quot;PDH_&quot; *is* the usual way to imitate namespaces in C, right?</p>
<div class="post">[<em>See &quot;hubris/lack of creativity&quot;. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1235556">
				<div id="div-comment-1235556" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150724-00/?p=90831#comment-1235556">
			July 24, 2015 at 12:44 pm</a>		</div>

		<p>My memory is hazy, but I ran into a problem with a system function named &quot;Log&quot; once may years ago. On OpenVMS I think. The company I used to work for included an internal diagnostic logging library in its driver products. The library was written in C and statically linked. I remember having to delve into the linker manual to resolve the clash between the system function and our unfortunately named diagnostic &quot;Log&quot; function. If I recall correctly, OpenVMS (at the time) didn&#39;t care about case sensitivity when linking, so maybe it was the C runtime logarithm function that was the problem. Strangely enough, I was reminded of this the other day when the &quot;Make sure the function you&#39;re calling is the right one&quot; article came out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1222141">
				<div id="div-comment-1222141" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150724-00/?p=90831#comment-1222141">
			July 25, 2015 at 6:24 pm</a>		</div>

		<p>Ok, so I&#39;m pretty much a digital hardware engineer though I do write some software for small jobs and/or hardware debugging&#8230; Even I know how to dig into header files when resolving a compiler issue. Didn&#39;t it occur them to *actually open the files* and look at the definitions themselves?</p>
<p>Then again, I remember about 15 years ago digging through an embedded C++ design to find and point out to our software engineer the source of a null-pointer de-referencing bug to prove that my FPGA design was not the cause of spontaneous radio reboots.</p>
<p>I wonder why engineers are so unwilling (or unable) to do basic problem solving when the compiler basically points them to the error (including file names and line numbers).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1235316">
				<div id="div-comment-1235316" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150724-00/?p=90831#comment-1235316">
			July 27, 2015 at 9:37 am</a>		</div>

		<p>Modularity in the language (namespaces) helps impose modularity in the design, but design itself can mitigate these issues. &nbsp;Wrap the Lan Manager functions and expose your wrapper. &nbsp;Do the same for the Perf Counter functions. &nbsp;Code that needs lm.h never needs to see pdh.h, and vice-versa. </p>
<p>If it is required that all header files be visible to all translation units (using stdafx.h), there are 1,967 header files in the latest SDK&#8230; 2 files that do not satifisy the ordering constraint == 99.9% correct. &nbsp;A tremendous achievement by Microsoft engineers, especially considering the rate that new features are added, that must remain compatible with cruft from the past. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234966">
				<div id="div-comment-1234966" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150724-00/?p=90831#comment-1234966">
			July 28, 2015 at 7:07 am</a>		</div>

		<p>Would it be possible for pdh.h to define a symbol and lm.h to use a #error directive to give an error message saying what the correct order to import the libraries is?</p>
<p>OTOH a mechanism like that would probably be overkill.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>