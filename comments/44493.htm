<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (30)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1179403">
				<div id="div-comment-1179403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179403">
			March 11, 2015 at 7:05 am</a>		</div>

		<p>Because some people configure their systems to only allow signed binaries by certain signatories to run.</p>
<p>I personally think that practice sucks and is of dubious value but &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1179423">
				<div id="div-comment-1179423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179423">
			March 11, 2015 at 7:31 am</a>		</div>

		<p>The easiest way to eliminate security vulnerabilities is to eliminate the digital computer, OS, and applications all together. The Fire Control system on the USS North Carolina used a totally analog computing solution. You protect privelege elevation by protecting physical access, and a guard with rifle is pretty effective.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1179433">
				<div id="div-comment-1179433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179433">
			March 11, 2015 at 7:54 am</a>		</div>

		<p>@Brian, you remind me of a quote saying something like the most secure system being unusable. Couldn&#39;t find that one after a quick search, but did find this one from Gene Spafford:</p>
<p>&quot;The only truly secure system is one that is powered off, cast in a block of concrete and sealed in a lead-lined room with armed guards &#8211; and even then I have my doubts.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1179453">
				<div id="div-comment-1179453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179453">
			March 11, 2015 at 8:07 am</a>		</div>

		<p>The user is not really reporting a security vulnerability; they are reporting an instance of poor programming. &nbsp;They just don&#39;t recognize the difference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1179463">
				<div id="div-comment-1179463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skyborne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179463">
			March 11, 2015 at 8:11 am</a>		</div>

		<p>@Brian_EE Why not go one step further and eliminate the USS North Carolina? &nbsp;You won&#39;t need a Fire Control system if there is no ship to catch fire.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1179473">
				<div id="div-comment-1179473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179473">
			March 11, 2015 at 8:14 am</a>		</div>

		<p>As Joshua said, this could be a vulnerability if the administrator has enabled application whitelisting of one form or another, if the whitelisting is done by signatures or fingerprints. &nbsp;It&#39;s a way to make a whitelisted program do something unexpected.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1179483">
				<div id="div-comment-1179483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179483">
			March 11, 2015 at 8:16 am</a>		</div>

		<p>@Skyborne: &quot;Fire Control&quot; == &quot;Aiming the Big Guns Towards the Bad Guys and Making them Go BOOM&quot;. Thus the importance of preventing privelege escalation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1179493">
				<div id="div-comment-1179493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179493">
			March 11, 2015 at 8:35 am</a>		</div>

		<p>&quot;It&#39;s not like the Create&shy;Process function performs a hard drive scan looking for a program whose name is similar to the one you requested and running that other program instead.&quot;</p>
<p>No, but the shortcut fixup code does&#8230;</p>
<div class="post">[<em>In order to trigger shortcut fixup, you have to delete the original and create the rogue version. If you can do that, then you&#39;re already on the other side of the airtight hatchway: Delete the original and <span style="text-decoration:underline;">replace it</span> with the rogue version. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1179513">
				<div id="div-comment-1179513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skyborne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179513">
			March 11, 2015 at 9:45 am</a>		</div>

		<p>@Brian_EE: derp, my bad. &nbsp;(You know, I did wonder, just a bit, why the fire extinguishing system would need an armed guard&#8230; but clearly it didn&#39;t sink in.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1179543">
				<div id="div-comment-1179543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179543">
			March 11, 2015 at 12:56 pm</a>		</div>

		<p>I agree with Adam and Joshua here. &nbsp;It depends on the definition of &quot;privilege&quot;. &nbsp;If code signing is a security boundary, then this is a security exploit.</p>
<p>It&#39;s like my exploit with PowerShell to load unsigned native code DLLs on Windows RT. &nbsp;My exploit is definitely a case of &quot;code execution results in code execution&quot;, yet it&#39;s clearly breaking a boundary: that only Microsoft-signed code is allowed to run in desktop mode on Windows RT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1179553">
				<div id="div-comment-1179553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179553">
			March 11, 2015 at 1:31 pm</a>		</div>

		<p>What if the program is whatever the equivalent of set-UID on windows, and the same bug can be triggered by passing the altered name as command line without renaming the file? (I don&#39;t know if this is possible on windows)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1179583">
				<div id="div-comment-1179583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179583">
			March 11, 2015 at 3:17 pm</a>		</div>

		<p>@Random832: Only if Cygwin is installed AND cygrunsrv is running AND setuid is enabled AND the launching program is linked against cygwin1.dll. And even then it&#39;s a fool of a sysadmin who turns on the setuid bit on any binary not designed for it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1179593">
				<div id="div-comment-1179593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179593">
			March 11, 2015 at 3:36 pm</a>		</div>

		<p>@Skyborne. I read your comment as a statement about war in general. &quot;Why not go one step further and eliminate the need for humans to build things to kill one another.&quot; But that wouldn&#39;t be one simple/small step.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1179623">
				<div id="div-comment-1179623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179623">
			March 11, 2015 at 3:50 pm</a>		</div>

		<p>Thank you Raymond, same Brian from that 2007 comment here and I laugh every time I see one of those references. &nbsp;I try to promote your &quot;airtight hatchway&quot; model for defining a security vulnerability whenever I have the chance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1179653">
				<div id="div-comment-1179653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179653">
			March 11, 2015 at 6:33 pm</a>		</div>

		<p>I can think of a case that where it might lead to problem.</p>
<p>Say when XYZ.EXE has a function that download update from whatever location to local folder (it ought to be data file only and the code verify the filenames does not end with EXE), they can actually trigger the bug by placing XYZ&lt;whatever&gt;.DAT on the server. But suppose there are some way to trigger arbitrary code execution using the buffer overflow bug&#8230;</p>
<p>Okay, maybe I&#39;m thinking too much.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1179663">
				<div id="div-comment-1179663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@cheong00</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179663">
			March 11, 2015 at 7:12 pm</a>		</div>

		<p>I think you are thinking too much :) &nbsp;You said suppose xyz has a function that will execute arbitrary code when tickled the wrong way (in particular, when invoked under a different name). &nbsp;The point Raymond is trying to make is that you have to make a copy of it to tickle it, so you already have the power to execute arbitrary code. &nbsp;Or am I misunderstanding your question?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1179673">
				<div id="div-comment-1179673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179673">
			March 11, 2015 at 11:30 pm</a>		</div>

		<p>I&#39;m saying that XYZ.EXE itself will download some data files from the website. The XYZ.EXE itself is not changed. The XYZ.EXE places files like XYZ&lt;whatever&gt;.DAT to current folder, and it triggered the buffer overflow problem mentioned in the post. Now if the &lt;whatever&gt; part contains bytes that are runnable, and of you know the overflowed part is on some code path that will be triggered routinely, you might successfully trick the XYZ.EXE to run the code bytes you injected.</p>
<p>Of course with NX like technology the possibility of going wrong this way is very small, but consider NX is opt-in by default on Win7 or so I&#39;m not so certain.</p>
<div class="post">[<em>But how do you trigger the overflow? You have to trick the user into running XYX.EXE. If you can do that, then just trick them into running pwnz0red.exe. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1179683">
				<div id="div-comment-1179683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179683">
			March 12, 2015 at 2:08 am</a>		</div>

		<p>What about creating a hard link with another name to the file? Would that work, or do hard links require special permissions as well?</p>
<p>If hard links require admin: Could you have another device (like an external USB drive) prepared on another computer where you have admin rights and that device would contain the hard link to the file?</p>
<p>I also wonder if the bug could also be triggered if the string was part of the path name. Then you could start the file as C:/XYX/../Progra~1/XYZ/XYZ.EXE.</p>
<div class="post">[<em>If you can convince someone to run E:XYX.EXE or C:XYX/..Progra~1XYZXYZ.EXE, then why not simply convince them to run E:pwnz0red.exe? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1179693">
				<div id="div-comment-1179693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Engywuck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179693">
			March 12, 2015 at 6:38 am</a>		</div>

		<p>hard links can only point to files in the same filesystem, so your USB stick would need XYZ.exe on it. But when you already can execute code on some random USB stick&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1179733">
				<div id="div-comment-1179733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179733">
			March 12, 2015 at 8:29 am</a>		</div>

		<p>[But how do you trigger the overflow? ]</p>
<p>That&#39;s why I say &quot;[strike]of[/strike]if you know the overflowed part is on some code path that will be triggered routinely&quot;. I don&#39;t know XYZ.EXE&#39;s nature. If it&#39;s a common application that will be run from time to time (like Notepad++), you can be certain that some day it will be run by some user.</p>
<p>If XYZ.exe is not part of a larger package like Office, the existance if the EXE itself is self-evident that it will be run by some user some day.</p>
<p>Now if the attacker can compromise your system by pwning some web server that&#39;s know not to be used to store program updates, I&#39;d count that as security vulnerability.</p>
<div class="post">[<em>The overflow is &quot;in the way it parses its own file name&quot;. So in order to attack it, you need to alter the file name that is used to execute the program. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1179793">
				<div id="div-comment-1179793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179793">
			March 12, 2015 at 11:31 am</a>		</div>

		<p>So if you have a means to remotely copy a file to a name that you control and then invoke that program, then it&#39;s a security vulnerability. If you can put arbitrary bits on the disk and run them as a program, then it&#39;s no big deal.</p>
<div class="post">[<em>If you can put arbitrary bits on the disk and run them as a program, <span style="text-decoration:underline;">then that&#39;s your problem</span>. The fact that the arbitrary bits are byte-for-byte identical to some other program is not the problem. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1179823">
				<div id="div-comment-1179823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179823">
			March 12, 2015 at 1:37 pm</a>		</div>

		<p>&gt; [If you can convince someone to run E:XYX.EXE or C:XYX/..Progra~1XYZXYZ.EXE, then why not simply convince them to run E:pwnz0red.exe? -Raymond]</p>
<p>A malicous program that is already running in user space but wants admin could do this. Users would just see the &quot;XYZ.EXE asks for elevation&quot; prompt, with XYZ.EXE being a program they know and properly signed by Microsoft, so they think it&#39;s alright and grant permission. It wouldn&#39;t be a code execution bug but still a potential privilege escalation vulnerability.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1179843">
				<div id="div-comment-1179843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179843">
			March 12, 2015 at 3:24 pm</a>		</div>

		<p>If I can get someone to take a pill that I hand to him (that is, eat a capsule of unknown medicine), it doesn&#39;t matter that I have camouflaged the pill by painting it another color, or if I tell him it&#39;s aspirin, or what brand markings I paint on it. &nbsp;(Plus, I hate analogies.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1179983">
				<div id="div-comment-1179983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1179983">
			March 13, 2015 at 4:35 pm</a>		</div>

		<p>I was wondering if there was a way to trip the problem via shortcut resolution (making the original disappear is in fact not unfeasible) but it turns out if you can get the tampered one to run, the only reason to use the original bits is trying to overcome white-listing by signature or hash.</p>
<p>I think both Raymond and I are amazed at the difficulty in comprehending this.</p>
<p>Incidentally the path involved in getting the shortcut resolver to fall for it is straight into dubious security vulnerability territory. I suspect it&#39;s akin to having a world-writable location far down the list in PATH.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1180033">
				<div id="div-comment-1180033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1180033">
			March 14, 2015 at 5:10 pm</a>		</div>

		<p>@Sven2: So simply rename pwnz0rd.exe to XYZ.EXE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1180053">
				<div id="div-comment-1180053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1180053">
			March 15, 2015 at 3:50 am</a>		</div>

		<p>@Coward: Then the elevation prompt will be &quot;XYZ.EXE asks for elevation. Publisher: NOT TRUSTED&quot;. But using that vulnerability and injecting code into the executable of a trusted vendor, you can make it &quot;XYZ.EXE asks for elevation. Publisher: Trusted Vendor (signed)&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1180073">
				<div id="div-comment-1180073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1180073">
			March 16, 2015 at 6:40 am</a>		</div>

		<p>&quot;even then it&#39;s a fool of a sysadmin who turns on the setuid bit on any binary not designed for it.&quot; &#8211; something can be designed for it but still have a bug.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1180083">
				<div id="div-comment-1180083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1180083">
			March 16, 2015 at 6:41 am</a>		</div>

		<p>Also, does Windows itself (without using cygwin or SFU or anything) not have a functionality equivalent to the setuid bit?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1180143">
				<div id="div-comment-1180143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dennis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1180143">
			March 16, 2015 at 9:45 am</a>		</div>

		<p>The converse of this is that &quot;updater can replace &#39;z&#39; with &#39;x&#39; when making a copy&quot; goes from a silly bug to a security vulnerability.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1180193">
				<div id="div-comment-1180193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150311-00/?p=44493#comment-1180193">
			March 17, 2015 at 1:41 am</a>		</div>

		<p>@Random832 &quot;Also, does Windows itself (without using cygwin or SFU or anything) not have a functionality equivalent to the setuid bit&quot;</p>
<p>No it does not have something like setuid.</p>
<p>The only thing that comes near is an application that prompts via UAC for performing an administrative action. But this is only effective, if the user is a member of the Administrators group and if UAC is enabled at all.</p>
<p>If the application does not use UAC for elevation, but is not run by an administrator, the action is denied up-front. If the application is using UAC for elevation, either the user is prompted to enter the credentials of an Administrator account, or he is prompted to confirm that he allows the action. (Problem is, that it is not clear WHAT action the application will really do.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>