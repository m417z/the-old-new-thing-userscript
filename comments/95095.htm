<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1278825">
				<div id="div-comment-1278825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ionel POP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278825">
			January 2, 2017 at 8:16 am</a>		</div>

		<p>It is worth noting that when the vector is updated in place (2nd part of the post), you dropped the const-ness on indices. It may not be the expected behavior for the caller.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-s-m-joshi-02 odd alt depth-2" id="comment-1278836">
				<div id="div-comment-1278836" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278836">
			January 2, 2017 at 8:30 am</a>		</div>

		<p>You could drop the reference as well as the const to copy the indices parameter (or make a copy in the body of the function if you can&#8217;t change the signature). Technically, the time to copy the index vector would depend on n but if we assume that the objects in v are more heavy weight than ints that is a small cost.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1278835">
				<div id="div-comment-1278835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tramboi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278835">
			January 2, 2017 at 8:16 am</a>		</div>

		<p>If you want to do proper modern C++, the indices should be vector::size_type.<br />
Of course proper modern C++ is boring and too verbose, so I&#8217;d settle for a size_t :)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1278905">
				<div id="div-comment-1278905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278905">
			January 2, 2017 at 11:34 am</a>		</div>

		<p>If you haven&#8217;t customized the allocator then size_type must be size_t, since that&#8217;s what the default type for allocator_traits&lt;A&gt;::size_type.</p>
<p>That said I think the purpose of this example was assuming the set of indices to use came from some other data source that speaks ints &#8212; as long as you know that all of the ints will be in the valid range of the vector using size_t instead here buys you nothing. Note that the loop that iterates over the vector itself is already (correctly) using size_t.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1279025">
				<div id="div-comment-1279025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tramboi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279025">
			January 3, 2017 at 1:35 am</a>		</div>

		<p>That was just a comment about how convoluted and verbose the standard library is :)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1278885">
				<div id="div-comment-1278885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278885">
			January 2, 2017 at 11:32 am</a>		</div>

		<p>As far as I am aware there is no standard library facility for this &#8212; if you squint the proposed algorithm looks like selection sort. You could write something like a zip iterator and a predicate that orders the resulting pair by the indices vector and feed that to std::sort. On the other hand, I suspect on real data apply_permutation, despite being technically O(n²) worst case, will perform better.</p>
<p>(As an aside, this is a classic time/memory tradeoff &#8212; if you have O(n) extra memory you can have an O(n) algorithm, which is optimal)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1278915">
				<div id="div-comment-1278915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278915">
			January 2, 2017 at 11:47 am</a>		</div>

		<p>The function looks O(n²) at first glance, but it is O(n) because each item moves at most once.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1278945">
				<div id="div-comment-1278945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278945">
			January 2, 2017 at 11:58 am</a>		</div>

		<p>Oh derp, that&#8217;s right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3 parent" id="comment-1279235">
				<div id="div-comment-1279235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marco</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279235">
			January 4, 2017 at 4:31 am</a>		</div>

		<p>Ok, it&#8217;s O(n) regarding moves/copies, but it&#8217;s O(n2) for the index searching stuff. Right?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1279305">
				<div id="div-comment-1279305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279305">
			January 5, 2017 at 6:04 am</a>		</div>

		<p>Probably not, it should be O(n) as claimed, but the argument for it will be more complicated. The point is that the inner loop modifies itself on the first iteration. When the outer loop visits an already processed slot there will be no inner loop (just a constant number of checks to determine the fact), so the algorithm should be O(n) and not O(n²)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1278935">
				<div id="div-comment-1278935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278935">
			January 2, 2017 at 11:54 am</a>		</div>

		<p>I suppose you could also build a divide and conquer algorithm out of std::rotate:<br />
1. Find middle of the resulting vector. O(1)<br />
2. Search indices vector for element that goes there O(n)<br />
3. std::rotate that element into the middle == 2 O(n) (one O(n) for the elements, one O(n) for the indices array)<br />
4. Recursively do the same on left and right sides.</p>
<p>This produces an algorithm which takes T(n) = 2T(n/2) + O(3n + 1) = 2T(n/2) + O(n), master theorem says O(n lg n). But again, probably worse constant factors than apply_permutation, and this is substantially more complex to code up :)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1278895">
				<div id="div-comment-1278895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://stephencleary.com' rel='external nofollow' class='url'>Stephen Cleary</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278895">
			January 2, 2017 at 11:33 am</a>		</div>

		<p>There&#8217;s a permutation_iterator in Boost, which permits creating an iterator pair over the permuted items, which can either be used directly or used to reify the collection into a new vector.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1278925">
				<div id="div-comment-1278925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.partow.net' rel='external nofollow' class='url'>Arash Partow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278925">
			January 2, 2017 at 11:49 am</a>		</div>

		<p>Out of curiosity what happens when ‘v.size() &gt; indices.size()’ ?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1278975">
				<div id="div-comment-1278975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278975">
			January 2, 2017 at 4:01 pm</a>		</div>

		<p>Even if just out of curiosity, asking for the behavior of an algorithm outside its specification isn&#8217;t very insightful. The rules are simple: Don&#8217;t operate the algorithm outside its designated limits.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1279045">
				<div id="div-comment-1279045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">French Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279045">
			January 3, 2017 at 4:36 am</a>		</div>

		<p>v.size() &gt; indices.size() doesn&#8217;t cause problems (because the algorithm iterates over indices): the elements from 0 to indices.size() &#8211; 1 will be moved (according to indices), and the remaining elements will stay in place (as if indices[i] was i for all i from indices.size() to v.size() &#8211; 1).</p>
<p>The real problem scenario is if indices.size() &gt; v.size(): that will cause out-of-bounds accesses. If you&#8217;re lucky (the language you&#8217;re using checks for them), such accesses will cause exceptions. If you&#8217;re not, expect nasal demons.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1278985">
				<div id="div-comment-1278985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cmon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278985">
			January 2, 2017 at 5:30 pm</a>		</div>

		<p><a href="http://www.cplusplus.com/reference/algorithm/next_permutation/" rel="nofollow">http://www.cplusplus.com/reference/algorithm/next_permutation/</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1279146">
				<div id="div-comment-1279146" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279146">
			January 3, 2017 at 10:05 am</a>		</div>

		<p>Not sure what you&#8217;re trying to say. <code>next_permutation</code> solves a different problem.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1278995">
				<div id="div-comment-1278995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudonym</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278995">
			January 2, 2017 at 9:47 pm</a>		</div>

		<p>Well that&#8217;s nice, but what I&#8217;d really like is:</p>
<p>template void apply_permutation(std::vector&amp; v, const std::vector&amp; indices);</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1279005">
				<div id="div-comment-1279005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudonym</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279005">
			January 2, 2017 at 9:49 pm</a>		</div>

		<p>Curse you HTML markup. What I meant, of course, is that &#8220;indices&#8221; should be const.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1279275">
				<div id="div-comment-1279275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kme</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279275">
			January 4, 2017 at 8:06 pm</a>		</div>

		<p>So just copy &#8216;indices&#8217; at the start then.  It&#8217;s still O(n).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1279015">
				<div id="div-comment-1279015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Micha</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279015">
			January 3, 2017 at 12:59 am</a>		</div>

		<p>In your last iteration you swap the element to the whole, but than, manually swap the indices, how about using swap twice:</p>
<p>    while (i != indices[current]) {<br />
      std::swap(x[i], x[indices[current]]);<br />
      std::swap(indices[i], indices[indices[current]]);<br />
      current = indices[current];<br />
    }</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1279105">
				<div id="div-comment-1279105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279105">
			January 3, 2017 at 8:35 am</a>		</div>

		<p>It&#8217;s spending time on things like the second half of this post and then sitting back, looking at this function or this entire source file and thinking &#8220;wow, look at me go with this ingenious code, I&#8217;m so great&#8221; that makes programming and computer science so fun. Bonus points if you then think to yourself &#8220;&#8230;but I wonder if other people will get it; heck I wonder if *I* will get it six months from now, even with the best comments in the world&#8221; =P</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1279315">
				<div id="div-comment-1279315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279315">
			January 5, 2017 at 6:07 am</a>		</div>

		<p>Bonus points are only applied if you actually add the comments and not only think about them.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1279135">
				<div id="div-comment-1279135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279135">
			January 3, 2017 at 9:42 am</a>		</div>

		<p>It is easier to permute an array given the inverse permutation.  The couple of times I faced your problem it was simpler to change the source function to produce an inverse permutation, rather than trying to apply the normal permutation it was producing.  Obviously this isn&#8217;t always an option.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1279485">
				<div id="div-comment-1279485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xix</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279485">
			January 7, 2017 at 2:08 pm</a>		</div>

		<p>Almost anything can be attacked as a loss of amenity, and almost anything can be defended as not a significant loss of amenity, which seems to signify that one should appreciate the significance of significant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1279635">
				<div id="div-comment-1279635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Taylor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279635">
			January 11, 2017 at 4:00 am</a>		</div>

		<p>There is a compromise position between having const indices (the ideal) and destroying the contents of indices (the given implementation) without sacrificing the O(1) space requirement. Since we know that the indices will be non-negative, we can use the bitwise negation operator (~) to generate sentinels, and then do a post-permutation pass through indices to apply ~ a second time and restore the original values. It&#8217;s not thread-safe, but you can&#8217;t have everything.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>