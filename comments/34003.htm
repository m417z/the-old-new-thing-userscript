<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-309543">
				<div id="div-comment-309543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050929-10/?p=34003#comment-309543">
			September 29, 2005 at 10:10 am</a>		</div>

		<p>Heh, I love ATL and I love running with scissors.</p>
<p>About a year ago, one of my guys showed me some of his ATL code with the DECLARE_PROTECT_FINAL_CONSTRUCT used.  I asked him what it did and he really couldn&#8217;t tell me.  I looked at the MSDN documentation and it gives a physical description of what it does without talking about WHY it is important.  (Protects your FinalConstruct by using a temporary reference count??? WTF???)</p>
<p>Given that I am subject to bouts of stupidity, I pulled the old &quot;well back in my day, we didn&#8217;t need no fancy stuff like them there horseless carriages.&quot;</p>
<p>Now that I understand WHY it exists, I&#8217;m going to start using that macro.  Thanks Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309553">
				<div id="div-comment-309553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dean</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050929-10/?p=34003#comment-309553">
			September 29, 2005 at 10:35 am</a>		</div>

		<p>Hey, I saw lot of 42 in MS sample code, like this one,<br />
<br />enum { DESTRUCTOR_REFCOUNT = 42 };</p>
<p>where this magic 42 comes from? and people like to use foo, bar to name their classes,<br />
<br />where these two babies come from?</p>
<p>Thanks.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-309573">
				<div id="div-comment-309573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050929-10/?p=34003#comment-309573">
			September 29, 2005 at 10:59 am</a>		</div>

		<p>42 is the answer to life, the universe, and everything in Douglas Adams&#8217; Hitchhiker&#8217;s guide to the galaxy series. The specific question the answer is for remains unknown..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309583">
				<div id="div-comment-309583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/frank_hileman' rel='external nofollow' class='url'>Frank Hileman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050929-10/?p=34003#comment-309583">
			September 29, 2005 at 11:16 am</a>		</div>

		<p>&quot;foo&quot; and &quot;bar&quot; are not used in production code. There is a long history in software documentation to use these names as generic names, the same way you might use &quot;x&quot; and &quot;y&quot; in mathematics.</p>
<p>Etymology of foo and bar:</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Metasyntactic_variable#Foo.2C_Bar_and_Baz" rel="nofollow">http://en.wikipedia.org/wiki/Metasyntactic_variable#Foo.2C_Bar_and_Baz</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-309603">
				<div id="div-comment-309603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050929-10/?p=34003#comment-309603">
			September 29, 2005 at 12:38 pm</a>		</div>

		<p>What&#8217;s wrong with simple call to AddRef() after the object is created with new and call Release() instead of delete?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309613">
				<div id="div-comment-309613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rburhum</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050929-10/?p=34003#comment-309613">
			September 29, 2005 at 12:57 pm</a>		</div>

		<p>I thought that the &quot;static HRESULT WINAPI CreateInstance&quot; didn&#8217;t use delete, but Heapfree instead. The reason being that it would allow you to make the destructor private to enforce reference counting behavior as explained by Larry Osterman in <a rel="nofollow" target="_new" href="http://blogs.msdn.com/larryosterman/archive/2005/07/01/434684.aspx" rel="nofollow">http://blogs.msdn.com/larryosterman/archive/2005/07/01/434684.aspx</a><br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-309623">
				<div id="div-comment-309623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050929-10/?p=34003#comment-309623">
			September 29, 2005 at 1:15 pm</a>		</div>

		<p>I hope you were joking about using HeapFree to destroy a C++ object&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309723">
				<div id="div-comment-309723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jbn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050929-10/?p=34003#comment-309723">
			September 30, 2005 at 5:45 am</a>		</div>

		<p>it is never a good idea to expose a partially initialized object. If you need an Initialize method, then you should probably use a factory method to make sure no one gets a reference to a partially constructed object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-309703">
				<div id="div-comment-309703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.winwonk.com' rel='external nofollow' class='url'>Kim Gr&#228;sman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050929-10/?p=34003#comment-309703">
			September 30, 2005 at 2:32 am</a>		</div>

		<p>I think ATL does this for a reason. As far as I can see, there&#8217;s no immediate performance benefit to initializing the m_cRef member to zero over initializing it to one&#8230;</p>
<p>As far as I can see, the problem is that by the time you&#8217;ve called new or CreateInstance, your object has no *interface* references to it, and that&#8217;s what IUnknown&#8217;s implementation tracks.</p>
<p>The fact that there&#8217;s a C++ pointer pointing to it is, I guess, an implementation detail.</p>
<p>The ATL equivalent of your first example, when you add an explicit Initialize method (ATL has no support for parametrized constructors, so this is the only way to init an object with a specific state) looks like this, and has the same problem:</p>
<pre class="brush: plain; title: ; notranslate" title="">&lt;br&gt;CComObject&amp;lt;MyObject&amp;gt;* pobj = 0;&lt;br&gt;hr = CComObject&amp;lt;MyObject&amp;gt;::CreateInstance(&amp;amp;pobj); // refcount == 0&lt;br&gt;if (FAILED(hr)) return hr;&lt;br&gt;&lt;br&gt;hr = pobj-&amp;gt;Initialize(); // still dangerous!&lt;br&gt;if (SUCCEEDED(hr)) {&lt;br&gt; hr = pobj-&amp;gt;QueryInterface(riid, ppvObj);  // refcount == 1, all is well now.&lt;br&gt;}&lt;br&gt;&lt;br&gt;return hr;&lt;br&gt;</pre>
<p>The standard solution is bumping the refcount before calling any methods on the object, and then Release:ing before handing out the now-only reference.</p>
<p>Ah, now I see that you&#8217;re talking about protecting FinalConstruct. That is a bit of a mess, but I like the way it&#8217;s configurable :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-310063">
				<div id="div-comment-310063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.winwonk.com' rel='external nofollow' class='url'>Kim Gr&#228;sman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050929-10/?p=34003#comment-310063">
			October 1, 2005 at 7:09 am</a>		</div>

		<p>jbn: This *is* the implementation of a factory method. As I said, ATL doesn&#8217;t support parameterized constructors, so an explicit Init method is the only way (that I know of) to pass it initial state.</p>
<p>&#8211; Kim</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-310403">
				<div id="div-comment-310403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050929-10/?p=34003#comment-310403">
			October 3, 2005 at 12:05 pm</a>		</div>

		<p>Heh.  C++ is fundamentally broken anyway, so you are always playing with matches.</p>
<p>ATL has one BIG BIG advantage over MFC.  You end up with statically linked code that does not put C++ objects across a DLL boundary.</p>
<p>Why is this good?  Well, MFC objects have been changed several times.  Which means that the objects on both sides of the DLL must be compiled the same way.<br />
<br />Which is impossible to make happen in the real world of ActiveX OCXs loaded into browser pages.<br />
<br />(You end up with random crashes of the browser at some point.)</p>
<p>1. There can be only one OCX on a box, loaded through the registry.   So path is (mostly) irrelevant.<br />
<br />2. MFC OCXs must be linked to MFC as a dll, not as a static library.  (Why?  I&#8217;m sure there is some good reason.)<br />
<br />3. Different versions of IE are compiled against the different versions of MFC.<br />
<br />4. You cannot control the field deployment of versions of IE and versions of your software.<br />
<br />5. You cannot control the deployment other OCXs that might be loaded and their version of MFC.</p>
<p>(I&#8217;m missing some of the obvious facts, like that there can only be one version of the MFC dll loaded into a process space.   And that there is no way to query a C++ object to detect object compilation inconsistencies.)</p>
<p>So, you end up with a no win situation.  Upgrade to the latest version of the compiler, you won&#8217;t work with legacy apps that the customer has.</p>
<p>The only real answer is to rewrite your OCXs away from MFC into ATL, or something else.</p>
<p>And all because someone had to change MFC objects that cross a DLL boundary.  At least ATL doesn&#8217;t do that.  Reference count bugs, I can fix those.  DLL hell deployment issues?  Rewrite.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-311783">
				<div id="div-comment-311783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">f schwiet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050929-10/?p=34003#comment-311783">
			October 7, 2005 at 9:46 pm</a>		</div>

		<p>Are you still using raw pointers?  Try smart pointers.  Suppose class Foo below properly initializes itself with a 0 reference, as all good classes should:</p>
<p>SmartPointer&lt;Foo*&gt; pNewFoo = new Foo();</p>
<p>Guess what happens as soon as I point pNewFoo at the new Foo()?  The reference count is bumped, and you can be sure it won&#8217;t be leaked.  It works dandy.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>