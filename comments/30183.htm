<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-407583">
				<div id="div-comment-407583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060809-18/?p=30183#comment-407583">
			August 9, 2006 at 11:26 am</a>		</div>

		<p>This is really clever!<br />
<br />But it also &#8216;looks&#8217; fragile as it relies on user functions doing the right thing in order for the whole mechanic to work!<br />
<br />Since I am quite a nice guy (no, really ;) ), I am waiting for your tomorrow&#8217;s post to see what evil deeds people managed to do with that!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-407603">
				<div id="div-comment-407603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060809-18/?p=30183#comment-407603">
			August 9, 2006 at 11:49 am</a>		</div>

		<blockquote><p>
  But it also &#8216;looks&#8217; fragile as it relies on user functions doing the right thing in order for the whole mechanic to work!</p>
<p>Well, if you look at it that way, the whole 16-bit Windows world was fragile since it relied on user programs playing nicely. Back in the 16-bit days, it would have been too expensive to protect against misbehaving user programs. If you wanted to bring the whole system down, all you needed to do is not yielding to the OS.</p>
<p>This solution is ideal if you want to be memory efficient and you can assume user programs playing nicely together with you.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-407613">
				<div id="div-comment-407613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://www.darklock.com/blog' rel='external nofollow' class='url'>Caliban Darklock</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060809-18/?p=30183#comment-407613">
			August 9, 2006 at 11:50 am</a>		</div>

		<p>How perceptive of you, Nawak. ;)</p>
<p>I was rather frustrated by programming under 16-bit Windows, not because of Windows itself, but purely because other developers had chosen to implement strange custom solutions to problems that had established &quot;correct&quot; answers. It was reasonably common that someone would reverse-engineer the contents of a handle &#8211; which was deliberately undocumented and unsupported, because it could change at any time &#8211; and access it directly. </p>
<p>In the HHOOK case, for example, someone might try to duplicate the above logic himself rather than use the standard Windows calls. If he happened to get something wrong, probably because he didn&#8217;t really understand the process, the system would behave oddly and nobody would know why. I suspect that may form the basis of Raymond&#8217;s next post.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-407623">
				<div id="div-comment-407623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060809-18/?p=30183#comment-407623">
			August 9, 2006 at 5:37 pm</a>		</div>

		<p>I love opaque data structures. &nbsp;It&#8217;s a relief not knowing how a class or data structure is implemented because otherwise you are tempted to program through the interface instead of to the interface (e.g. guess the implementation by the members of the class so you can &#8216;optimize&#8217; how you call its methods). &nbsp;</p>
<p>I would have to say that if you are using a debugger to find undocumented members of structs/classes and relying on them being there: a) you&#8217;re doing something wrong; and b) you get what you deserve.</p>
<p>I understand that Microsoft makes lots of thunks for broken software (see <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/01/09/510781.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/01/09/510781.aspx</a> &nbsp;for more information), and I can understand why. &nbsp;But it sure would be nice to say &quot;to heck with them&quot; when somebody pokes around internal undocumented structures and expects things to work that way forever.</p>
<p>In regards to hook dispatching, I can&#8217;t imagine how expensive it is for more than one process to have a hook on a high-traffic message. &nbsp;How does Win32 make this work without a ton of context switches?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-407703">
				<div id="div-comment-407703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060809-18/?p=30183#comment-407703">
			August 10, 2006 at 8:40 am</a>		</div>

		<p>Tom: The hook function must reside in a DLL. That DLL must/will be loaded in each target process. So, in addition to message processing, you add clutter the virtual address space and some loading time. (More so if the hook function is just one function in a heavy DLL that&#8217;s then brought into every process.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-407713">
				<div id="div-comment-407713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">swapping</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060809-18/?p=30183#comment-407713">
			August 10, 2006 at 9:00 am</a>		</div>

		<p>CN: 16-bit windows didn&#8217;t have &quot;virtual address space&quot;, it had segmenting at best. Only the (4k) pages that is used is loaded into ram, usually not very much.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-407723">
				<div id="div-comment-407723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/08/10/694362.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060809-18/?p=30183#comment-407723">
			August 10, 2006 at 10:00 am</a>		</div>

		<p>Unhooking by hooking again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-407803">
				<div id="div-comment-407803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060809-18/?p=30183#comment-407803">
			August 10, 2006 at 11:32 am</a>		</div>

		<p>It seems an app that passed a copy of the HHOOK it originally got would defeat the unhooking mechanism. e.g.</p>
<p>DWORD CALLBACK MyHookProc(int nCode, WPARAM wParam, LPARAM lParam)<br />
<br />{<br />
<br /> &nbsp;&#8230;<br />
<br /> &nbsp;HHOOK hhkLocal = g_hhkPrev;<br />
<br /> &nbsp;return DefHookProc(nCode, wParam, lParam, &amp;hhkLocal);<br />
<br />}</p>
<p>Why do this? Who knows: Given the lack of a user parameter I can imagine a scenario where parts of the code use their own copies of an HHOOK.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-408213">
				<div id="div-comment-408213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ATZ Man</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060809-18/?p=30183#comment-408213">
			August 11, 2006 at 3:49 pm</a>		</div>

		<p>@swapping, @DN</p>
<p>Win16 enhanced mode had demand-paged virtual memory. In any mode, all running Win16 applications were in one memory space (accessed by the app through segment registers, it is true). The hook DLL would not have to be mapped into each target process, because the DLL was already jumpable into through a far call from any running application.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>