<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1212502">
				<div id="div-comment-1212502" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212502">
			November 9, 2015 at 7:12 am</a>		</div>

		<p>&gt; if (InterlockedCompareExchange(</p>
<p>Maybe &quot;if (InterlockedCompareExchangeT(&quot; &nbsp;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1212492">
				<div id="div-comment-1212492" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212492">
			November 9, 2015 at 7:29 am</a>		</div>

		<p>&gt; &gt; if (InterlockedCompareExchange(</p>
<p>&gt; Maybe &quot;if (InterlockedCompareExchangeT(&quot; &nbsp;?</p>
<p>Maybe &quot;if (InterlockedCompareExchangePointerT(&quot;?</p>
<p>If you&#39;re going to be pedantic, you may as well be accurate. You could be thorough too: the first argument &amp;p should presumably be &amp;b.</p>
<p>More telling than simple substitutions, however, is the way the naïve &quot;InterlockedCompareExchangePointerT&quot; fails when you *do* use three pointers of the same type: the compiler will complain that it can&#39;t deduce the template parameters U and V. From this, I deduce that Raymond had previously deleted the naïve functions and has attempted to reconstruct them from the fixed versions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ranta even thread-even depth-1" id="comment-1212472">
				<div id="div-comment-1212472" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212472">
			November 9, 2015 at 8:12 am</a>		</div>

		<p>The static_cast in the recommended InterlockedExchangePointerT hides this kind of bug:</p>
<p>class Base { };</p>
<p>class Derived : public Base { };</p>
<p> &nbsp; Derived* p = nullptr;</p>
<p> &nbsp; InterlockedExchangePointerT(&amp;p, new Base);</p>
<p>Now, p points to a Base and the compiler did not warn.</p>
<p>I suggest replacing the static_cast with an assignment. That will still allow a conversion from Derived* to Base* but not vice versa.</p>
<p> &nbsp; T* tvalue = value;</p>
<p> &nbsp; return reinterpret_cast&lt;T*&gt;(InterlockedExchangePointer(</p>
<p> &nbsp; &nbsp; &nbsp;reinterpret_cast&lt;void* volatile*&gt;(target),</p>
<p> &nbsp; &nbsp; &nbsp;tvalue));</p>
<p>I don&#39;t know how often that kind of bug would occur in a real program, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude odd alt thread-odd thread-alt depth-1" id="comment-1212462">
				<div id="div-comment-1212462" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212462">
			November 9, 2015 at 8:26 am</a>		</div>

		<p>Or I could just use std::atomic&lt;T*&gt; which does all of this for me&#8230; and VS2015 supports fully</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1212442">
				<div id="div-comment-1212442" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm100</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212442">
			November 9, 2015 at 8:37 am</a>		</div>

		<p>I would be very interesting to understand why you need volatile in the &#39;target&#39; parameter. volatile is one of the keywords that usually gets inserted when not needed (or even when it has a bad effect) and not inserted when it is needed &#8211; I trust Raymond to have it right and would like to know what the logic is</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1212432">
				<div id="div-comment-1212432" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212432">
			November 9, 2015 at 8:44 am</a>		</div>

		<p>@kantos:</p>
<p>And those stuck using earlier versions where there is no std::atomic should do what exactly?</p>
<p>I love preaching that people should use the latest and greatest tools myself, but you do come across companies and stuff that don&#39;t use VS2015, or VS2013, or&#8230; you get the idea.</p>
<p>@ranta:</p>
<p>To be honest, I would be more tempted to fix that using static_assert or a failed template instantiation at compile time if you can&#39;t use static_assert. This at least makes it look like it should fail if it is wrong. If you use an assignment, someone may &quot;helpfully&quot; come along at some later date and remove the assignment because it is a waste.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1212422">
				<div id="div-comment-1212422" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212422">
			November 9, 2015 at 8:49 am</a>		</div>

		<p>You really should consider replacing those reinterpret_casts with static_casts for increased type safety. You can always cast any pointer to void* and back using static_cast, but it will prevent you from e.g. casting to an int or something like that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1212412">
				<div id="div-comment-1212412" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212412">
			November 9, 2015 at 8:53 am</a>		</div>

		<p>@pm100:</p>
<p>Well, the parameters actually match the underlying API functions. These then match the underlying compiler intrinsic functions that are used to implement them when needed. So basically, he was just matching the existing functions.</p>
<p>As for why this is needed, I would assume multi CPU systems would still be the biggest reason. Since while multi core systems have cache coherency stuff, it is normally to expensive to do it over multiple CPUs. Also, Windows has supported other CPU architectures, Windows currently supports ARM in addition to x86 based, and may support others in the future. So can you guarantee that in this case volatile will never have an effect?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1212392">
				<div id="div-comment-1212392" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212392">
			November 9, 2015 at 8:58 am</a>		</div>

		<p>@Jo:</p>
<p>He can&#39;t. While it is acceptable to cast between void * and type * using static cast. The standard doesn&#39;t allow casting between void ** and type **.</p>
<p>If you convert one of them to static casts, the compiler will complain:</p>
<p>1&gt; &nbsp;main.cpp</p>
<p>1&gt;c:users***documentsvisual studio 2015projectsmehmehmain.cpp(11): error C2440: &#39;static_cast&#39;: cannot convert from &#39;derived *volatile *&#39; to &#39;void *volatile *&#39;</p>
<p>1&gt; &nbsp;c:users***documentsvisual studio 2015projectsmehmehmain.cpp(11): note: Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or function-style cast</p>
<p>1&gt; &nbsp;c:users***documentsvisual studio 2015projectsmehmehmain.cpp(36): note: see reference to function template instantiation &#39;T *InterlockedExchangePointerT&lt;derived,base*&gt;(T *volatile *,U)&#39; being compiled</p>
<p>1&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;with</p>
<p>1&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[</p>
<p>1&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;T=derived,</p>
<p>1&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;U=base *</p>
<p>1&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1212382">
				<div id="div-comment-1212382" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212382">
			November 9, 2015 at 9:02 am</a>		</div>

		<p>*sigh* lots of posts.</p>
<p>I forgot, if you meant the reinterpret_cast on the return statements, then that is locked to the first parameter. So the static cast, bar the one problem pointed out, on the value parameter should pretty much handle any problematic type conversions.</p>
<p>So while it would look nicer, that reinterpret_cast shouldn&#39;t have any problems.</p>
<p>But I could be wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1212372">
				<div id="div-comment-1212372" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212372">
			November 9, 2015 at 9:29 am</a>		</div>

		<p>I&#39;ve been using some helper functions like these, but ran afoul of some of their limitations, such as their lack of support for const pointers (which cause the reinterpret_cast (possibly replaceable by static_cast) to fail compilation).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude odd alt thread-odd thread-alt depth-1" id="comment-1212362">
				<div id="div-comment-1212362" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212362">
			November 9, 2015 at 9:48 am</a>		</div>

		<p>@DarranRowe ideally? they are using a smart pointer library, or write their own atomic smart pointer, preferably one that is easy to switch over to std::atomic later</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1212352">
				<div id="div-comment-1212352" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212352">
			November 9, 2015 at 10:12 am</a>		</div>

		<p>You can remove typename U, typename V from the naive versions (sorry for not including the dots above the i).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1212342">
				<div id="div-comment-1212342" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212342">
			November 9, 2015 at 10:40 am</a>		</div>

		<p>@kantos:</p>
<p>So essentially, they would write their own which would end up calling similar helper functions right?</p>
<p>The thing is, I wouldn&#39;t actually call these functions directly in my code either. Unless you are writing code similar to C with classes (and templates in this instance), then it is just natural that you would wrap these things. But they are still an important implementation detail in atomic code even if you don&#39;t use them directly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1212332">
				<div id="div-comment-1212332" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212332">
			November 9, 2015 at 10:41 am</a>		</div>

		<p>@pm100: I believe the idea is that the objects being operated on by these functions should be defined `volatile`, thus preventing accidentally passing them to functions that don&#39;t use interlocked accesses. &nbsp;(Which isn&#39;t ideal, since it prevents memset-ing the block during initialization when it isn&#39;t yet being shared and therefore ordinary access is ok, but still having the type checker identify problems is worth the added complexity at initialization, IMO)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ranta odd alt thread-odd thread-alt depth-1" id="comment-1212322">
				<div id="div-comment-1212322" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212322">
			November 9, 2015 at 11:11 am</a>		</div>

		<p>@Darran Rowe, now that you suggested it, I tried the following:</p>
<p>&#8211; typename std::enable_if&lt;std::is_convertible&lt;U, T*&gt;::value, T*&gt;::type</p>
<p>&#8211; static_assert(std::is_convertible&lt;U, T*&gt;::value, &quot;cannot convert from U to T*&quot;);</p>
<p>and I found that the error message from the assignment was easiest to understand, static_assert came second, and enable_if was the hardest.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1212302">
				<div id="div-comment-1212302" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212302">
			November 9, 2015 at 11:27 am</a>		</div>

		<p>I pretty much ran into the same issues as you, Raymond, when implementing the same custom wrappers for the raw operations. &nbsp;I had more or less the same solution.</p>
<p>One annoyance is that Visual C++ does not implement _InterlockedCompareExchangePointer for x86-32; on x86-32 you have to use _InterlockedCompareExchange and some lovely reinterpret_casts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1212262">
				<div id="div-comment-1212262" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212262">
			November 9, 2015 at 1:11 pm</a>		</div>

		<p>Been there, wrote that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1212252">
				<div id="div-comment-1212252" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212252">
			November 9, 2015 at 1:40 pm</a>		</div>

		<p>@ranta:</p>
<p>Yeah, those errors can be a pain. That is why I am waiting for concepts to get implemented properly.</p>
<p>But right now, while it is true that the error for the assignment may be easier to understand, as I mentioned originally, the reason why I would prefer something like static_assert or something similar is that it looks like it is meant for error checking. Even if you put a comment by the assignment, it doesn&#39;t stop someone who knows better coming along in the future and getting rid of it. This is especially true if you don&#39;t own the code.</p>
<p>Sometimes you have to take the rough with the smooth and take a more complex error message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1212242">
				<div id="div-comment-1212242" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212242">
			November 9, 2015 at 2:15 pm</a>		</div>

		<p>I&#39;m not sure whether the naive versions are correct or not, but I am sure that the example code at the very end *ought* to lead to a compilation error (even ignoring the typos). Just from the types, it&#39;s not clear that b really has a pointer to Dervied, and yet it could end up in d. </p>
<p>If you want to signal to the compiler, &quot;no really, I&#39;m sure that b is actually a pointer to Derived (at least if a swap is going to take place)&quot; then the way to do that is with a cast. (A static cast, as others have said.) What&#39;s more, the cast also signals that information to the developer reading the code, so it&#39;s important that it stay at the point of the call, not in the wrapper function.</p>
<p>The original point of having templates as a language feature of C++ at all is to catch errors at compile time using the type system even in generic situations. In fact, that&#39;s what it has successfully done for you here in the naive code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1212202">
				<div id="div-comment-1212202" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212202">
			November 10, 2015 at 3:03 am</a>		</div>

		<p>Surely the solution is to make it so that the compiler can&#39;t deduce the type of the subsequent arguments? Something like this:</p>
<p>template&lt;typename T&gt;</p>
<p>T* InterlockedCompareExchangePointerT(</p>
<p> &nbsp; &nbsp;T* volatile *target,</p>
<p> &nbsp; &nbsp;typename std::identity&lt;T&gt;::type* exchange,</p>
<p> &nbsp; &nbsp;typename std::identity&lt;T&gt;::type* compare)</p>
<p>&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1212192">
				<div id="div-comment-1212192" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212192">
			November 10, 2015 at 3:46 am</a>		</div>

		<p>@ranta: </p>
<p>static_assert() looks OK for me in g++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ranta even thread-even depth-1" id="comment-1212142">
				<div id="div-comment-1212142" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1212142">
			November 10, 2015 at 7:24 am</a>		</div>

		<p>Neil, thank you. std::identity is excellent here. &nbsp;Like with std::enable_if, the error message from an incorrect call refers primarily to the call, and Intellisense notices the error too. &nbsp;Unlike with std::enable_if, the error message clearly shows the types. &nbsp;And in code like the following,</p>
<p> &nbsp; &nbsp; &nbsp;BSTR p = nullptr;</p>
<p> &nbsp; &nbsp; &nbsp;CComBSTR cbs(OLESTR(&quot;leap&quot;));</p>
<p> &nbsp; &nbsp; &nbsp;InterlockedExchangePointerT(&amp;p, cbs);</p>
<p>the conversion to BSTR is done from cbs itself and not from a temporary copy, so the pointer stored in p will remain valid until cbs is destroyed. &nbsp;(This kind of time-bomb pointer seems pretty dangerous for multithreaded operation though.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1214691">
				<div id="div-comment-1214691" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1214691">
			November 11, 2015 at 11:48 am</a>		</div>

		<p>@Neil: </p>
<p>std::identity is not actually standard, and MSVC&#39;s version actually breaks when used with nonreferenceable types (in particular, void). Of course, writing one yourself is trivial.</p>
<p>Alternatively, typename std::add_pointer&lt;T&gt;::type (instead of typename std::identity&lt;T&gt;::type*) also works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1214471">
				<div id="div-comment-1214471" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151109-00/?p=92002#comment-1214471">
			November 12, 2015 at 10:25 am</a>		</div>

		<p>Is InterlockedIncrement implemented in silicon yet? &nbsp;</p>
<p>It seems that a smart CPU and a smart memory bus ought to be able to increment data that resides in memory (at a given address and size) with a single, atomic instruction, with access barriers and such.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>