<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-695843">
				<div id="div-comment-695843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695843">
			December 29, 2008 at 10:21 am</a>		</div>

		<p>It&#8217;s posts like these that make me realise quite how much more I still need to learn in this industry. Thank you for opening my eyes :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works odd alt thread-odd thread-alt depth-1" id="comment-695853">
				<div id="div-comment-695853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695853">
			December 29, 2008 at 10:38 am</a>		</div>

		<p>Mark, there are &nbsp;many things in the industry you never have to know and can still be gainfully employed. &nbsp;Consider most web developers, for example ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-695863">
				<div id="div-comment-695863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695863">
			December 29, 2008 at 10:39 am</a>		</div>

		<p>And this is why one should not mess with project settings, unless he really understands the consequences.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-695883">
				<div id="div-comment-695883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695883">
			December 29, 2008 at 12:31 pm</a>		</div>

		<p>I just hit the same issue a few days ago. As soon as wchar_t as native was cleared &#8211; all started building as before.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-695893">
				<div id="div-comment-695893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695893">
			December 29, 2008 at 12:39 pm</a>		</div>

		<p>At my old job I got called upon to fix such problems all the time.</p>
<p>It is also where I learned about declspec(selectany) and it&#8217;s &quot;wonders&quot; (or pains), while trying to export specific template instantiations from a DLL&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-695903">
				<div id="div-comment-695903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">quotemstr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695903">
			December 29, 2008 at 1:31 pm</a>		</div>

		<p>We have this problem in unixland too: at least with gcc, wchar_t can either be two or four bytes long. Guess which option a major web browser uses in its compilation, and guess what every other program on the system uses.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-695913">
				<div id="div-comment-695913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://uint32t.blogspot.com' rel='external nofollow' class='url'>Sohail</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695913">
			December 29, 2008 at 2:27 pm</a>		</div>

		<p>Atleast you didn&#8217;t demangle it in your head. That would scare me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-695923">
				<div id="div-comment-695923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Trevel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695923">
			December 29, 2008 at 2:47 pm</a>		</div>

		<p>Every time Raymond says &quot;At this point the answer is obvious&quot; I prepare myself to feel stupid.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-695933">
				<div id="div-comment-695933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695933">
			December 29, 2008 at 2:58 pm</a>		</div>

		<p>My immediate thought after reading the title was &quot;calling conventions&quot;, which of course is the answer to the second question.</p>
<p>I didn&#8217;t know about undname. I do know that depends.exe does undecoration for exported/imported functions, but that&#8217;s only after you managed to link them into DLLs. And if you look at DLLs from, say, a Symantec product, then the undecorations won&#8217;t work, since they have their own compiler.</p>
<p>And declspec(selectany) is the best thing ever. And #pragma once too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-695943">
				<div id="div-comment-695943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hmm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695943">
			December 29, 2008 at 3:08 pm</a>		</div>

		<p>In C++ why would you want to use wchar_t as a built in type, after all it is not. It is an integral type which uses one of the other integral types as its underlying type. The size and type of its underlying type is implementation defined.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-695953">
				<div id="div-comment-695953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695953">
			December 29, 2008 at 3:27 pm</a>		</div>

		<p>@Hmm: You are correct, except in saying that wchar_t is not built-in. &nbsp;It is true that the C++ standard defines wchar_t to have the same /machine representation/ as an implementation-chosen integer type, but the C++ standard also makes clear that wchar_t must be built into the language and is a distinct type (not a type renaming as typedef does) from any other. &nbsp;This is in contrast with standard C which does define wchar_t as a typedef, allowing the use of constants of the base type without implicit or explicit coercions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-695963">
				<div id="div-comment-695963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695963">
			December 29, 2008 at 3:46 pm</a>		</div>

		<p>I was with you all the way until &quot;At this point the answer is obvious&quot;. &nbsp;I can tell why they&#8217;re different, but I would have had no idea where to go to find out why.</p>
<p>At the risk of being a nitpicker, can anyone tell me why the compiler has that option in the first place?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-695983">
				<div id="div-comment-695983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695983">
			December 29, 2008 at 4:40 pm</a>		</div>

		<p>Hmm: wchar_t as a native type is required for the standard C++ iostream library. Without wchar_t as a native type, either all pointers to (say) unsigned short would have to be printed as wide-character strings (&quot;%ls&quot; in stdio), or all wide-character strings would have to be printed as pointers (&quot;%p&quot;). Neither is ideal, the point of iostream vs stdio is type safety, and C++ syntax is biased against struct/class in favor of built-in types, so wchar_t was made a built-in</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-696013">
				<div id="div-comment-696013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-696013">
			December 29, 2008 at 9:02 pm</a>		</div>

		<p>I ran into a very similar problem a couple of weeks ago. &nbsp;It turned out that I had a function prototype inside of a namespace that forward declared another class inside the prototype as follows:</p>
<p>&lt;pre&gt;</p>
<p>namespace NS</p>
<p>{</p>
<p>&nbsp;void foo(class X *px)</p>
<p>}</p>
<p>&lt;/pre&gt;</p>
<p>Where class X was also defined inside the namespace NS. &nbsp;When decorating the name of foo(), VS2005 decided that class X was in global scope, which gave a different decorated name of what it actually should have been (with X under NS). &nbsp;This resulted in strange linker errors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-695973">
				<div id="div-comment-695973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-695973">
			December 29, 2008 at 4:09 pm</a>		</div>

		<p>&quot;can anyone tell me why the compiler has that option in the first place?&quot;</p>
<p>*Deep breath* Backwards Compatibility!</p>
<p>In previous versions of VC++ (I think version 6, but it might&#8217;ve been earlier), wchar_t was not a built-in type so you could mix-n-match it with unsigned short. In later versions, it became a proper built-in type, but in order to allow you to more easily compile programs built with the older version, the option exists to go back to the old behaviour.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-696053">
				<div id="div-comment-696053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-696053">
			December 30, 2008 at 2:44 am</a>		</div>

		<p>I ran across the second issue a few months ago.</p>
<p>Being that I do WinCE/WinMo on ARM platforms mostly, there is just one true calling convention, and things like __cdecl, __pascal, etc don&#8217;t exist. Naturally, this means stuff like WINAPI are #defined to nothing, so WinMain&#8217;s prototypes began like &quot;int WinMain(&#8230;&quot;, and yes, it works fine on ARM (one calling convention).</p>
<p>Guess what I had to do?</p>
<p>Compile my code for x86 &#8211; spent the next half a dozen builds fixing all these issues&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-696063">
				<div id="div-comment-696063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris J.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-696063">
			December 30, 2008 at 4:50 am</a>		</div>

		<p>Regarding this:</p>
<p>namespace NS</p>
<p>{</p>
<p>void foo(class X *px)</p>
<p>}</p>
<p>I have three words:</p>
<p>obsfucation obsfucation obsfucation</p>
<p>Programmers who code like that should be fired.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-696073">
				<div id="div-comment-696073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-696073">
			December 30, 2008 at 5:43 am</a>		</div>

		<p>Chris J, are you complaining about C++ namespaces or have I missed the point of your post?</p>
<p>If you&#8217;ve failed to understand why namespaces are useful then I think it is you who should be fired. Sorry if I&#8217;ve misunderstood, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-696083">
				<div id="div-comment-696083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-696083">
			December 30, 2008 at 6:25 am</a>		</div>

		<p>@Leo Davidson:</p>
<p>Chris J. is refering to Adam Rosenfield comment.</p>
<p>Forward declaring a class inside a function parameter declaration is obfuscated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-696043">
				<div id="div-comment-696043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-696043">
			December 30, 2008 at 2:35 am</a>		</div>

		<p>It seems that &#8220;link /dump /headers&#8221; will do the name undecoration automatically for you in the COMDAT part.</p>
<p>*** Example from nafxcw.lib of atlmfclib ***</p>
<p>SECTION HEADER #1A</p>
<p>&nbsp; &nbsp;.bss name</p>
<p>&nbsp; &nbsp; &nbsp; 0 physical address</p>
<p>&nbsp; &nbsp; &nbsp; 0 virtual address</p>
<p>&nbsp; &nbsp; &nbsp; 4 size of raw data</p>
<p>&nbsp; &nbsp; &nbsp; 0 file pointer to raw data</p>
<p>&nbsp; &nbsp; &nbsp; 0 file pointer to relocation table</p>
<p>&nbsp; &nbsp; &nbsp; 0 file pointer to line numbers</p>
<p>&nbsp; &nbsp; &nbsp; 0 number of relocations</p>
<p>&nbsp; &nbsp; &nbsp; 0 number of line numbers</p>
<p>C0301080 flags</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; Uninitialized Data</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; COMDAT; sym= &#8220;struct ATL::IAtlAutoThreadModule * ATL::_pAtlAutoThreadModule&#8221; (?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A)</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 4 byte align</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; Read Write</p>
<div class=post>[<i>Is there an echo in here? I thought I mentioned this in the article. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-696153">
				<div id="div-comment-696153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-696153">
			December 30, 2008 at 11:07 am</a>		</div>

		<p>@Chris J, @Leo Davidson:</p>
<p>Yes, forward declaring the class inside the function prototype was not a good idea. &nbsp;I wasn&#8217;t the one who wrote the code, I just fixed it. &nbsp;In my project, we try to use lots of forward declarations to avoid having header files #include lots of header files that they don&#8217;t really need.</p>
<p>And saying that programmers who write code like that should be fired is quite presumptuous. &nbsp;The guy who wrote that code is an awesome graphics programmer whom I would be very sad to see leave.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-696263">
				<div id="div-comment-696263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sys64738</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-696263">
			December 30, 2008 at 12:01 pm</a>		</div>

		<p>OldNewThing wrote:</p>
<p>&gt;&gt;&gt; In particular, if you use the Visual Studio development environment, I&#8217;m told (but have not tried it myself) that the switch you&#8217;re looking for is called &#8220;Treat wchar_t as a built-in type&#8221; on the &#8220;C/C++ Language&#8221; property page. </p>
<p>I&#8217;m curious: you don&#8217;t use VS IDE?</p>
<p>You use the Microsoft VC++ compiler without the VS IDE?</p>
<p>If so, what IDE do you use? (Or you just write code from some simple editor, like Metapad, and invoke the C++ compiler from command-line ?)</p>
<p>Thanks.</p>
<div class=post>[<i>The thing that I haven&#8217;t tried is the &#8220;Treat wchar_t as a built-in type&#8221; checkbox. This was a way for me to pass on a tip without having to go to the work of researching and testing it myself. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis even thread-even depth-1" id="comment-696413">
				<div id="div-comment-696413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-696413">
			December 30, 2008 at 1:16 pm</a>		</div>

		<p>Raymond, just before I read the answer revolving around /Zc, I looked at the differences and (incorrectly assuming that &#8220;unsigned short&#8221; and &#8220;wchar_t&#8221; were the same), I saw the main difference being that the declared function returns non-const and the library function returns const. &nbsp;Does that not play into it as well?</p>
<div class=post>[<i>That would also need to be fixed, but in this case it was an error introduced by me during the writing process. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-696573">
				<div id="div-comment-696573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-696573">
			December 30, 2008 at 8:00 pm</a>		</div>

		<p>&gt; [Is there an echo in here? I thought I mentioned this in the article. -Raymond]</p>
<p>Emmm&#8230; I thought that you said we need another program named &#8220;undname&#8221; to see the undecorated signature for the function. And what I said is &#8220;the link /dump /header&#8221; command will show the undecorated function signature as well.</p>
<p>Not quite an echo, is it?</p>
<div class=post>[<i>&#8220;&#8230; or, if you really want to get fancy, link /dump /headers.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-696663">
				<div id="div-comment-696663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">scorpion007</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-696663">
			December 31, 2008 at 4:54 am</a>		</div>

		<p>Yet another alternative is dumpbin /exports, if all you&#8217;re looking for is what the library or DLL exports, without all the header information.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-697223">
				<div id="div-comment-697223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimmick.demon.co.uk/' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-697223">
			January 2, 2009 at 3:15 am</a>		</div>

		<p>@scorpion007: Ah, but you see dumpbin.exe is just a synonym for link.exe.</p>
<p>No, really: dumpbin, editbin and lib are identical 14.2KB files and all have a description of &#8216;Microsoft Linker Stub&#8217;. That&#8217;s about 14KB of C runtime setup and tear-down code and one function called SpawnLinker that calls _wspawnv or _wspawnvp to start a copy of link.exe.</p>
<p>If Windows (before Vista) supported hard links, and if Windows Installer had a way to create them, it would simply do what numerous Unix utilities have done before, and base its behaviour on the name it was called with. gzip and gunzip spring to mind.</p>
<p>link /dump /exports is not only the same output as dumpbin /exports, but it uses the same program to do it (and also doesn&#8217;t create two processes to do so).</p>
<p>And yes, the reason for /Zc:wchar_t- to exist is if you need to compile some C++ modules with the new compiler against ones you (or someone else) compiled with the old compiler. C modules, or C++ ones where the declarations were all marked &#8216;extern &quot;C&quot;&#8217;, don&#8217;t matter as they don&#8217;t have decorated names &#8211; you can declare whatever number and types of parameters you like, the linker can&#8217;t check them. Not that you should do this, of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-697663">
				<div id="div-comment-697663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">scorpion007</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-697663">
			January 3, 2009 at 1:44 am</a>		</div>

		<p>Mike, I&#8217;m well aware that dumpbin.exe is the same as link /dump. I just used dumpbin as it is shorter to write.</p>
<p>While &#8216;dumpbin /exports&#8217; is the same as &#8216;link /dump /exports&#8217;, it is not the same as &#8216;link /dump /headers&#8217;, which is what Raymond originally suggested.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-697883">
				<div id="div-comment-697883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081229-00/?p=19693#comment-697883">
			January 4, 2009 at 11:39 pm</a>		</div>

		<p>@Mike, Windows XP does support hard links, and according to the docs for CreateHardLink(), so does anything from Windows 2000 Professional onwards. &nbsp;You can also manipulate hard links from the command line using the built-in &#8216;fsutil&#8217; program.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>