<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1116383">
				<div id="div-comment-1116383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mungo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116383">
			March 31, 2014 at 7:42 am</a>		</div>

		<p>Should I consider a career change if I fall asleep after reading the first few lines?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116393">
				<div id="div-comment-1116393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116393">
			March 31, 2014 at 8:06 am</a>		</div>

		<p>@Mungo:</p>
<p>If you were like me and started feeling drowsy, but able to understand what was going on, then don&#39;t worry about it. Mathematics does it to me all the time.</p>
<p>If on the other hand you don&#39;t understand, then the I would urge you at the very least to learn. While you can get things done as a programmer by throwing code together, this post is all about gaining optimisation opportunities through understanding mathematically what is going on. It is surprising how much mathematics is involved with computing, which is why all of the decent computer science degree courses I know involve discrete mathematics, complexity and automata as modules. Having a pretty decent foundation in other areas is also rather important.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116413">
				<div id="div-comment-1116413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116413">
			March 31, 2014 at 9:00 am</a>		</div>

		<p>(In the f3() solution)</p>
<p>What do you actually gain by the &quot;sneaky trick&quot; of using (k + n + x.length) instead of (k + (x.length &#8211; n))? Is subtraction somehow less efficient than addition?</p>
<p>Also, I would have instinctively removed the need for carry and nextcarry in this section</p>
<p>&nbsp;var carry = 0;</p>
<p>&nbsp;for (var i = 0; i &lt; n; i++) {</p>
<p>&nbsp; var nextcarry = c[i];</p>
<p>&nbsp; c[i] = (carry + c[i]) / 2;</p>
<p>&nbsp; carry = nextcarry;</p>
<p>&nbsp;}</p>
<p>by going through the list in reverse order:</p>
<p>&nbsp;for (var i = n-1; i &gt; 0; i++) {</p>
<p>&nbsp; c[i] = (c[i] + c[i-1]) / 2;</p>
<p>&nbsp;}</p>
<p>&nbsp;c[0] /= 2;</p>
<div class="post">[<em>As a mathematician, I perform the sneaky trick instinctively. It eliminates parentheses, and since addition is commutative, it opens future opportunities for simplification. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116423">
				<div id="div-comment-1116423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116423">
			March 31, 2014 at 9:04 am</a>		</div>

		<p>Except that obviously that should be i&#8211; in my version of the loop. I always get that wrong the first time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116433">
				<div id="div-comment-1116433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116433">
			March 31, 2014 at 9:06 am</a>		</div>

		<p>@Crescens2k</p>
<p>People often say these things, but don&#39;t provide concrete examples outside of gaming, data analysis, and specialised scientific/mathematics/development (e.g. writing my own compiler) applications.</p>
<p>The core question is &quot;What relevance is the conceptual example given, specifically, going to have to my software development career? I can only learn so many things, so why should I spend my time on Thing X rather than Thing Y?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116443">
				<div id="div-comment-1116443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116443">
			March 31, 2014 at 9:08 am</a>		</div>

		<p>@Anon</p>
<p>I should add that the example may have no relevance at all, and simply be trivia or a brainteaser &#8212; in which case, the question is irrelevant.</p>
<p>But for my comment, assume the larger issue of &quot;Why do people ask &#39;Why do I need to know this?&#39;&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116453">
				<div id="div-comment-1116453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116453">
			March 31, 2014 at 10:34 am</a>		</div>

		<p>Here&#39;s a cute one someone taught me years ago: Simplify the following expression:</p>
<p>(x-a)(x-b)(x-c)&#8230;(x-z)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116463">
				<div id="div-comment-1116463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116463">
			March 31, 2014 at 10:39 am</a>		</div>

		<p>Myria: am I right in thinking you want the answer 0?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116473">
				<div id="div-comment-1116473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116473">
			March 31, 2014 at 10:43 am</a>		</div>

		<p>@Smithers: &quot;Is subtraction somehow less efficient than addition?&quot;</p>
<p>Actually, yes, sometimes it is. &nbsp;The x86 &quot;lea&quot; instruction is often used to do three-operand addition. &nbsp;The x86 can&#39;t normally do three-operand anything, but lea lets you use the specialized addressing modes. &nbsp;However, the x86 doesn&#39;t have subtraction in its addressing modes &#8211; only addition and optional multiplication by 2, 4, and 8.</p>
<div class="post">[<em>Also, x86 and x64 do not have a reverse-subtraction opcode. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116483">
				<div id="div-comment-1116483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116483">
			March 31, 2014 at 10:50 am</a>		</div>

		<p>@Mark: =^-^=</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116493">
				<div id="div-comment-1116493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116493">
			March 31, 2014 at 11:29 am</a>		</div>

		<p>@Anon:</p>
<p>One example is if you are comparing two lists of strings.</p>
<p>If the lists are unsorted, how long would it take to compare? For both lists being unsorted for every item in one list you would have to start from the beginning of the other. You can stop early if you find the item you are looking for, but you can&#39;t stop early in any other case. For the string itself, again, you can compare as far as needed in the string but it is hard to do more than that.</p>
<p>What happens if both lists are sorted? You can start after the start of one list if you have found an item already, you know that any item in the list you are comparing against will always come after the one you found. You are also able to make other optimisations, like only comparing as many letters as needed until you find a difference, even skipping blocks of the array by first letter comparison alone.</p>
<p>While there are many things that be commented on in this example, the fact is that this kind of runtime analysis for even regular functions is in the area of complexity. Of course it is possible to make this kind of reasoning regardless, but learning the mathematics behind it not only formalises the knowledge, but as I often find, you start doing these things implicitly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1116513">
				<div id="div-comment-1116513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116513">
			March 31, 2014 at 12:19 pm</a>		</div>

		<p> This reminds me how few years ago I participated in a contest for young programmers. One of the tasks was to efficiently calculate 1+2+3+…+1978 in as many high-level programming languages as possible. This was my special hobby these days, so I quickly wrote the simple for loop in 20+ languages, ranging from COBOL to Lisp (have I mentioned that the year was 1978?). To my shame, this solution was rated second after the one that simply printed 1957231.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116523">
				<div id="div-comment-1116523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116523">
			March 31, 2014 at 12:27 pm</a>		</div>

		<p>To my understanding, your &quot;iterating up from 2&quot; example is dynamic programming; you are computing the result bottom up with a cache that lets you reuse previous results. This is no different than the first example usually given for dynamic programming the Fibonacci number N; which is O(2^N) for the recursive formulation:</p>
<p>int f(int n)</p>
<p>{</p>
<p>&nbsp; &nbsp;if (n == 0 || n == 1) { return 1; }</p>
<p>&nbsp; &nbsp;return f(n &#8211; 2) + f(n &#8211; 1);</p>
<p>}</p>
<p>but O(N) for the dynamic programming version:</p>
<p>int f(int n)</p>
<p>{</p>
<p>&nbsp; &nbsp;int nMinusTwo = 1;</p>
<p>&nbsp; &nbsp;int nMinusOne = 1; // This is the &quot;cache&quot; of dynamic programming</p>
<p>&nbsp; &nbsp;for (int idx = 2; idx &lt;= n; ++idx)</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;int currentN = nMinusTwo + nMinusOne;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;nMinusTwo = nMinusOne;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;nMinusOne = currentN;</p>
<p>&nbsp; &nbsp;}</p>
<p>&nbsp; &nbsp;return nMinusOne;</p>
<p>}</p>
<p>(Your recursive version indeed uses no dynamic programming and that&#39;s the point of the article; but people may be confused after seeing the second which does have it)</p>
<div class="post">[<em>It&#39;s a cache in the sense that any variable can be viewed as a cache. (&quot;I&#39;m caching the &#39;largest value seen in elements 0 through i&#39;.&quot;) The value is immediately consumed by the next iteration, so it&#39;s really just an accumulator. Dynamic programming usually means employing a general-purpose cache rather than an accumulator.<br /> <code>int f(int n) {<br /> &nbsp; &nbsp; cache[0] = cache[1] = 1; <br /> &nbsp; &nbsp; for (int idx = 2; idx &lt;= n; ++idx) {<br /> &nbsp; &nbsp; &nbsp; &nbsp; cache[idx] = cache[idx - 2] + cache[idx - 1];<br /> &nbsp; &nbsp; }<br /> &nbsp;&nbsp; return cache[n]; }</code> -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116533">
				<div id="div-comment-1116533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116533">
			March 31, 2014 at 2:39 pm</a>		</div>

		<p>Wait. You&#39;re just numerically solving an initial-boundary value problem for the one-dimensional heat equation, aren&#39;t you? Or am I just seeing things at 2 AM?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-1116543">
				<div id="div-comment-1116543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116543">
			March 31, 2014 at 5:23 pm</a>		</div>

		<p>&quot;To my shame, this solution was rated second after the one that simply printed 1957231.&quot;</p>
<p>I would not have rated it second to that, but I would have rated it second to 1978 * (1978 + 1) / 2, assuming that the assignment was in fact &quot;calculate the answer to&quot; and not simply &quot;print the answer to&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-rat odd alt thread-odd thread-alt depth-1" id="comment-1116503">
				<div id="div-comment-1116503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/hacksoncode' rel='external nofollow' class='url'>hacksoncode</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116503">
			March 31, 2014 at 11:48 am</a>		</div>

		<p>@Anon: This question is exactly analogous to &quot;People tell me I should lift weights, but what relevance does this have, specifically, to my career?&quot;. </p>
<p>The reason you solve problems like this is that mental exercise builds mental muscles just like physical exercise builds physical muscles. </p>
<p>You&#39;re not going to find yourself needing to lift a barbell in (nearly) any career, either. But you will need to do *analogous* things if you have a career where upper-body strength is important. Additionally, it will improve your general physical fitness, which will have beneficial effects on your overall well-being. </p>
<p>Programming is a career where this kind of mental strength is extremely useful, if not actually absolutely vital. And it will improve your general mental fitness, which will have beneficial effects on your overall well-being. </p>
<p>This problem is probably more complicated (mathematically) than most you will encounter in day-to-day programming, this is true. But you want those problems you do encounter to be *easy* for you to solve, not a huge struggle. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116553">
				<div id="div-comment-1116553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BOFH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116553">
			March 31, 2014 at 8:12 pm</a>		</div>

		<p>Either way, it&#39;s just a oneliner:</p>
<p>perl -le &quot;$i += $_ and print $i for 1 .. 1978&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116563">
				<div id="div-comment-1116563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116563">
			March 31, 2014 at 10:23 pm</a>		</div>

		<p>@BOFH:</p>
<p>And now in as may high-level programming languages as possible&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1116573">
				<div id="div-comment-1116573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116573">
			April 1, 2014 at 12:41 am</a>		</div>

		<p>@GregM: you are right, now I remember that the actual prize-winner did exactly as you said, writeln(1978*(1978+1)/2).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116583">
				<div id="div-comment-1116583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116583">
			April 1, 2014 at 4:13 am</a>		</div>

		<p>I would have thought that merely printing &quot;1957231&quot; should be disqualified for a) the inefficiency in having the programmer calculate the result instead of the computer and/or b) not including the algorithm used to calculate the result as part of the submission. (I would accept a solution that moved the computation from the executable to the compiler or optimiser.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116593">
				<div id="div-comment-1116593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrei</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116593">
			April 1, 2014 at 4:14 am</a>		</div>

		<p>Finally, one that is correctly rendered using Internet Explorer, but not using Chrome</p>
<div class="post">[<em>Looks fine to me aside from Chrome&#39;s problem with U+27E8 and U+27E9. Maybe your window isn&#39;t wide enough. Let me see if I can try to fix that. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1116653">
				<div id="div-comment-1116653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116653">
			April 1, 2014 at 10:26 am</a>		</div>

		<p>This article should be re-named &quot;The dangers of buffering up posted messages and then reposting them later&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116673">
				<div id="div-comment-1116673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116673">
			April 1, 2014 at 11:56 am</a>		</div>

		<p>alegr1: itym articles</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1116713">
				<div id="div-comment-1116713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1116713">
			April 1, 2014 at 9:26 pm</a>		</div>

		<p>Chrome fixed, many thanks from my Android device!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1117643">
				<div id="div-comment-1117643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rahul Ramadas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140331-00/?p=1363#comment-1117643">
			April 6, 2014 at 7:06 pm</a>		</div>

		<p>This is still dynamic programming. You are computing values in a table and updating it (as a function of pre-existing values in the table) and arriving at the answer: dynamic programming. You did it bottom-up instead of top-down with memoization, that&#39;s all.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>