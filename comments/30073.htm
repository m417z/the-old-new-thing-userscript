<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-409903">
				<div id="div-comment-409903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">new Poster()</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-409903">
			August 17, 2006 at 10:18 am</a>		</div>

		<p>.Net uses code access security, where security decisions are made by walking up the call stack and performing access checks (obviously it&#8217;s more complicated then that). &nbsp;Could you apply any of those principles to this problem?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-409923">
				<div id="div-comment-409923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-409923">
			August 17, 2006 at 10:24 am</a>		</div>

		<p>The stuff in .net (and equivalents in Java, which also uses stack-frame based security contexts) works because the runtime environment makes it impossible to do funky stuff like modifying your stack to make it look like your function was called by a trusted one.</p>
<p>It can&#8217;t work with native code, not so long as native code can freely modify its call stack (i.e. not on current x86 hardware).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-409933">
				<div id="div-comment-409933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-409933">
			August 17, 2006 at 10:27 am</a>		</div>

		<p>I should comment that I&#8217;m only assuming .Net works like this, as I don&#8217;t have under-the-hood experience of it. I know Java does, though.</p>
<p>See reference here: <a rel="nofollow" target="_new" href="http://www.securingjava.com/chapter-three/" rel="nofollow">http://www.securingjava.com/chapter-three/</a><br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-409943">
				<div id="div-comment-409943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pazu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-409943">
			August 17, 2006 at 10:27 am</a>		</div>

		<p>.NET &quot;stack&quot; is different kind of beast from native stack.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410003">
				<div id="div-comment-410003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-410003">
			August 17, 2006 at 11:03 am</a>		</div>

		<p>But you can still overwrite the .Net stack&#8217;s data, right? &nbsp;Not from .Net code perhaps (and very likely not from verifiable code), but certainly from native code, assuming you can figure out where the .Net stack is and what you have to modify.</p>
<div CLASS=post>[<i>Letting untrusted managed code execute untrusted native code would be a disaster for the reasons you describe. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410093">
				<div id="div-comment-410093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craig Ringer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-410093">
			August 17, 2006 at 12:20 pm</a>		</div>

		<p>The stack / return address is not the only problem, either. Code from different modules (DLLs / shared objects) loaded in the same program shares the same address space. &nbsp;This means that if untrusted code executes, it can just access the interesting bits of your &quot;trusted&quot; data structures directly.</p>
<p>Finding those data structures in the rather large (and sparse) address space can be a challenge, but impossible. It&#8217;s often possible to scan the process&#8217;s memory looking for a signature that&#8217;s known to be constant, and using that with an offset to find the data structure you need, or a pointer that&#8217;ll get you to it. People use this technique all the time when doing dodgy things like patching system call tables (see, eg, binary only modules that add new system calls to Linux kernels; and some rootkits). Sometimes it&#8217;s really embarrassingly easy &#8211; like when the untrusted code provides some data that&#8217;ll be stored at a fixed offset from the data it wants to modify.</p>
<p>Given that, my understanding is that you can&#8217;t share an address space and still protect trusted code from untrusted (native) code. You have to launch the untrusted code in a separate process (to get a separate address space) and use an IPC mechanism over carefully checked APIs. Sound right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410103">
				<div id="div-comment-410103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-410103">
			August 17, 2006 at 12:31 pm</a>		</div>

		<p>Makes sense&#8230; &nbsp;The usual use of CAS is to wrap some system library functions with security implications in managed code. &nbsp;You can trust the system library functions not to do anything weird to the stack. &nbsp;</p>
<p>You definitely aren&#8217;t securing anything if you let someone run native code that would mess with the managed stack. &nbsp;I don&#8217;t think you could even use &quot;unverifiable&quot; managed code to do this because you don&#8217;t exactly have access to registers and you can&#8217;t find out your stack pointer. &nbsp;I might be wrong, however, and the main thread&#8217;s stack might in fact be in a constant location in all managed processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410113">
				<div id="div-comment-410113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Hearn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-410113">
			August 17, 2006 at 12:33 pm</a>		</div>

		<p>Java and .NET use provable type systems so this isn&#8217;t an issue. You can do the same thing for C/C++ code, see research by Lattner et al into proving the memory safety of arbitrary C/C++ programs (can often be done with only small modifications to the code).</p>
<p>In the general case though you can only enforce security decisions at the process level. If you want to do anything more fine grained, you gotta split it into multiple processes using some kind of RPC. My dissertation at university was on this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410243">
				<div id="div-comment-410243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-410243">
			August 17, 2006 at 3:19 pm</a>		</div>

		<blockquote><p>
  [Letting untrusted managed code execute untrusted native code would be a disaster for the reasons you describe.]</p>
<p>Oh, duh, that&#8217;s right; you can&#8217;t make P/Invoke calls to native code unless you&#8217;re already at the full-trust level.</p>
<p>So it&#8217;d have to be one call stack that has full-trust permissions all the way down, making P/Invoke calls that trample on another call stack&#8217;s values (maybe in another thread?). &nbsp;Sounds much more difficult to me, but perhaps not.</p>
<p>Mike Hearn: I haven&#8217;t read that research on provable type systems; is it available somewhere online?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410363">
				<div id="div-comment-410363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">new Poster()</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-410363">
			August 17, 2006 at 4:48 pm</a>		</div>

		<p>re: Mike: &#8220;In the general case though you can only enforce security decisions at the process level. If you want to do anything more fine grained, you gotta split it into multiple processes using some kind of RPC. &#8221; </p>
<p>Are you referring to unmanaged or managed code? </p>
<p>In .net there are many different security boundaries, including processes, assemblies and appdomains. Different security evidence can be associated with each and different permission sets can be granted to each one. The assembly and appdomain boundaries all occur within the same process so different security perminssion grants can occur within the same process, not just at the process boundary. </p>
<div CLASS=post>[<i>You&#8217;re talking about a specific case. Mike is talking about the general case. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-409913">
				<div id="div-comment-409913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-409913">
			August 17, 2006 at 10:20 am</a>		</div>

		<p>I wonder how .net does its &quot;code access security&quot; stuff. &nbsp;(And you probably don&#8217;t know, but perhaps another commenter does?) &nbsp;It seems to do a stack-walk (for at least some types of security demands) and inspects the &quot;evidence&quot; provided by each stack frame (e.g., where the code came from). &nbsp;But if the stack is that easy to spoof, then I wonder how that&#8217;s supposed to be any more secure.</p>
<p>Or maybe it only works if you run verifiable code, and throws SecurityExceptions otherwise? &nbsp;Seems like non-verifiable stuff would be fairly common for innocuous stuff, though (e.g. manipulating bits in a 1-bit image), and you&#8217;d have to fail all security demands if the process had *ever* run any non-verifiable code, because you have no idea what that code did.</p>
<p>Or maybe CAS is just a &quot;marketing term&quot; type of thing, not really anything that you&#8217;re supposed to use to make security decisions. &nbsp;Hmm.</p>
<p>(And obviously it doesn&#8217;t apply to Win32 APIs.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410413">
				<div id="div-comment-410413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">new Poster()</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-410413">
			August 17, 2006 at 5:31 pm</a>		</div>

		<p>Raymond, </p>
<p>.Net is an example of a working system that does not require a separate process to enforce a security decision. This refutes the statement &#8220;you can only enforce security decisions at the process level&#8221;. I don&#8217;t quite see how making a distinction between a specific case versus the general case changes this; please explain. Thanks. </p>
<div CLASS=post>[<i>Sure, you can do it in specific cases, but you can&#8217;t do it in general. It appeared to me that in your comment you tried to use a specific case (.NET managed code) to refute a general statement. The general statement still stands. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410453">
				<div id="div-comment-410453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">silkio</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-410453">
			August 17, 2006 at 7:47 pm</a>		</div>

		<p>.net does require a seperate process; the .net vm. your app runs inside that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410463">
				<div id="div-comment-410463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ted</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-410463">
			August 17, 2006 at 8:34 pm</a>		</div>

		<p>All code in managed .NET is already &quot;trusted&quot; in that it obeys the rules of the framework runtime. The &quot;security&quot; checks are still a matter of the calling code telling the target that it has necesary permissions and the called code &#8216;trusts&#8217; the calling code because it is dot net managed code.</p>
<p>The framework takes away the ability for the caller to lie to the callee. Thus a &#8216;security&#8217; check is simply a logic check and effectively is looking at an additional function param that is a bitfield of security permissions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410373">
				<div id="div-comment-410373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Intel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-410373">
			August 17, 2006 at 5:00 pm</a>		</div>

		<p>Obviously we need to not look at *who* is calling the function, but with what intentions. All processors should therefore extend the flags register with an Evil flag. When set, the process is up to no good and appropriate action can be taken.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411153">
				<div id="div-comment-411153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://plan99.net/~mike/blog' rel='external nofollow' class='url'>Mike Hearn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-411153">
			August 18, 2006 at 3:39 pm</a>		</div>

		<p>BryanK &#8211; for checking memory safety of C programs see here: </p>
<p><a rel="nofollow" target="_new" href="http://llvm.org/pubs/2005-02-TECS-SAFECode.html" rel="nofollow">http://llvm.org/pubs/2005-02-TECS-SAFECode.html</a></p>
<p>The RPC implementation I wrote for my dissertation was designed for this exact case &#8211; where you want to run, for example, the image decoder part of a chat program at a lower level of privilege to the rest of it. That way if the image decoder is compromised, the attacker has no useful privileges. </p>
<p>So, unlike DCOM it was designed to be very high performance and easy to integrate with existing codebases (on the order of a few lines of code to split a function into a less privileged subprocess) at the expensive of losing language neutrality (C/C++ only!), network transparency and portability (x86 only). But you don&#8217;t need complex language/network transparent type systems a la DCOM to split a program into multiple privilege restricted processes.</p>
<p>There were a bunch of other limitations to the sample implementation: Linux only, not thread safe. But those could be fixed with time.</p>
<p>I haven&#8217;t put this anywhere online yet but once I complete the code that prevents malicious stack base manipulation I&#8217;ll be sending it to the SELinux and AppArmor mailing lists. Let me know if you&#8217;re interested.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411383">
				<div id="div-comment-411383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-411383">
			August 19, 2006 at 4:22 am</a>		</div>

		<p>Actually, .NET does NOT require managed programs to follow the rules. &nbsp;There are five different possible configurations for code running under the CLR:</p>
<p>Managed, verifiable IL.<br />
<br />Managed, unverifiable IL.<br />
<br />Managed, native executable code.<br />
<br />Unmanaged, unverifiable IL.<br />
<br />Unmanaged, native executable code.</p>
<p>Managed/Unmanaged refers to whether the code makes use of the CLR&#8217;s garbage collection and type systems. &nbsp;You must do this to be verifiable, but if you don&#8217;t need to be verifiable, you don&#8217;t have to use these facilities.</p>
<p>You might be surprised to learn that the CLR will happily run x86 assembly code. &nbsp;That code may or may not use the CLR type system, and may or may not use garbage collection.</p>
<p>You might be surprised to learn that IL contains instructions for arbitrary memory access: read from address X, write to address X, jump to address X. &nbsp;These instructions are off-limits to verifiable IL, but IL does not have to be verifiable. &nbsp;Straight C++ (including pointers, unchecked array access, and even buffer overflows) can be compiled to IL bytecode and run under the CLR.</p>
<p>Before anybody panics, please realize that this does nothing to the safety of managed code. &nbsp;If you do not have the full trust of the CLR, you can only run managed verifiable IL, and you can only call functions that are explicitly marked as &quot;I am safe to call from untrusted code&quot;.</p>
<p>The upshot of this is that fully trusted code in the CLR can do whatever it wants, subject only to the limits of the OS. &nbsp;The CLR won&#8217;t get in its way unless you ask it to do so. &nbsp;Untrusted code cannot do anything unsafe unless there is a security flaw in a trusted library that is marked as &quot;can be called from untrusted code&quot;.</p>
<p>The nice thing about the CLR is that you CAN ask it &quot;please stop me from doing stupid things, even though I have full trust&quot;. &nbsp;When you do this, you can very easily enumerate the places where you could possibly corrupt the process (i.e. the places where you do a PInvoke, use &quot;unsafe&quot; code, interop with COM, or use the Marshal class), and you can very carefully go over those few places to make extra sure they are bug free.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-411403">
				<div id="div-comment-411403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060817-17/?p=30073#comment-411403">
			August 19, 2006 at 7:00 am</a>		</div>

		<p>To be clear on the .NET issue: the default for code executing from the local machine is Full Trust &#8211; nonverifiable code can be loaded and in effect, Code Access Security is disabled. For code running from a network share, however, CAS is <em>on</em>, and the program can&#8217;t use P/Invoke, unsafe code, etc directly. Indeed, it can&#8217;t open files directly from the file system either, only through the use of the OpenFileDialog&#8217;s OpenFile method &#8211; it cannot get access to the actual file name.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>