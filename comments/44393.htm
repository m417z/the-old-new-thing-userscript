<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1181403">
				<div id="div-comment-1181403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181403">
			March 25, 2015 at 9:23 am</a>		</div>

		<p>&gt; However, some applications mistakenly believe that if a directory is marked read-only, then files within the directory cannot be modified</p>
<p>Turns out it&#39;s not so irrational. This was the behavior of older network servers. You got fed a folder listing w/ the RO bit set if you didn&#39;t have permission to write there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181433">
				<div id="div-comment-1181433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jgh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181433">
			March 25, 2015 at 3:23 pm</a>		</div>

		<p>Arrgh! I hate programs that impose their own expectations of what the underlying API is capable of. Things like &quot;I think it is only possible to read the extent of a file, so I&#39;m never going to pass on your call to write the extent of a file&quot;, &quot;I think filenames will only ever have 0-9A-z characters in it, so will focibly prevent you using any other characters&quot;, &quot;Full paths always start &#39;d:&#39;&quot;, etc etc etc.</p>
<p>Call The API And Respond To The Returned Status. Repeat while forcing programmer&#39;s head into desk in time to the cadence until it gets hammered in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181443">
				<div id="div-comment-1181443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jgh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181443">
			March 25, 2015 at 3:25 pm</a>		</div>

		<p>&gt; &gt; However, some applications mistakenly believe that if a directory is marked</p>
<p>&gt; &gt; read-only, then files within the directory cannot be modified</p>
<p>&gt; Turns out it&#39;s not so irrational. This was the behavior of older network servers.</p>
<p>&gt; You got fed a folder listing w/ the RO bit set if you didn&#39;t have permission to</p>
<p>&gt; write there.</p>
<p>No reason to prevent the user attempting to save there. Just b****y well do the operation, and display the resultant &quot;directory is write protected&quot; error (of whatever).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181503">
				<div id="div-comment-1181503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesJohnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181503">
			March 26, 2015 at 5:15 am</a>		</div>

		<p>This smells of trying to reproduce the logic inside shell namespace and you&#39;ll never quite get it perfect, because you&#39;re not the shell. &nbsp;What&#39;s the bigger picture here? &nbsp;What is the practical use for this? &nbsp;It seems to me that you&#39;re better off in many cases just using the shell API?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181523">
				<div id="div-comment-1181523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bv1</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181523">
			March 26, 2015 at 6:08 am</a>		</div>

		<p>Arghh, the just try it and see if you get away with is the source of a lot of issues that I had to deal with for the last 3 years. &nbsp;The assumption of a network share acting as a safety net fails badly when you have Microsoft + Apple. Not only can other users store things that make it really hard for the other OS, but Macs can store files that will trash Macs. PC&#39;s can shoot themselves in the foot also. </p>
<p>I just wished that each app had been checking itself to see if the name &amp; path was valid as per the OS standards for their machine. &nbsp;Then at least the issues would have been limited to when both MAC and PCs accessed the same area. That would have been a lot less effort to keep fixed and understandable as to why it was occurring in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181533">
				<div id="div-comment-1181533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181533">
			March 26, 2015 at 7:08 am</a>		</div>

		<p>@bv1: oh yes the infamous  in filename trick.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181553">
				<div id="div-comment-1181553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott Brickey</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181553">
			March 26, 2015 at 7:14 am</a>		</div>

		<p>while I imagine that the attributes were reused for performance reasons&#8230; I have to wonder, since NTFS has alternate data streams, whether they could be used (with reasonably similar performance), thus eliminating the &quot;magic values&quot; that the attributes provide.</p>
<div class="post">[<em>Good luck getting Windows 95 to support NTFS alternate data streams. Also, you are increasing an O(1) operation to an O(n) operation due to have to go back to the server to probe for the alternate data stream. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181563">
				<div id="div-comment-1181563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181563">
			March 26, 2015 at 7:39 am</a>		</div>

		<p>@Scott Brickey: the Windows shell aka explorer.exe (which is what does all these &quot;nondefault UI&quot; trickery) already existed back on the Win95 days, which were FAT32 with LFN, so no extended attributes, ACLs or other trickery, and AFAIK no free bits in the directory entries either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181593">
				<div id="div-comment-1181593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181593">
			March 26, 2015 at 7:48 am</a>		</div>

		<p>@Cesar: &quot;creating a file implies modifying the directory&quot; &nbsp;Wha? &nbsp;No, it doesn&#39;t. &nbsp;The directory is actually a file; it doesn&#39;t need to be modified in order to create a file &quot;under&quot; the directory. &nbsp;I can understand the confusion, and it is weird, but that&#39;s why we are the elite. &nbsp;:-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fjeldse odd alt thread-odd thread-alt depth-1" id="comment-1181603">
				<div id="div-comment-1181603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181603">
			March 26, 2015 at 7:52 am</a>		</div>

		<p>@dave and @Scott Brickey: See <a rel="nofollow" target="_new" href="https://support.microsoft.com/en-us/kb/256614/en-us">support.microsoft.com/&#8230;/en-us</a> (from Raymond&#39;s last link, which indicates that this has been around since Windows 95); also, USB sticks often have FAT partitions and several NAS devices that I&#39;ve had to use still pretend that they&#39;re FAT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181633">
				<div id="div-comment-1181633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181633">
			March 26, 2015 at 9:21 am</a>		</div>

		<p>&gt; The directory is actually a file; it doesn&#39;t need to be modified in order to create a file &quot;under&quot; the directory.</p>
<p>Is this a serious response? &nbsp;A directory is a file containing a list of files. &nbsp; You need to write to the directory file to change the list of files that the directory file contains.</p>
<p>Or have I missed some joke?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181483">
				<div id="div-comment-1181483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181483">
			March 26, 2015 at 4:46 am</a>		</div>

		<p>&gt; However, some applications mistakenly believe that if a directory is marked read-only, then files within the directory cannot be modified. As a result, these applications refuse to let you save your documents onto the desktop, for example.</p>
<p>Wait. You can *create* new files on a read-only directory??? That&#39;s&#8230; surprising, to say the least; creating a file implies modifying the directory, and the directory is read-only.</p>
<p>If Windows really allows creating files on a read-only directory, you might once again have the &quot;programmers raised on Unix being asked to create a Windows application&quot; situation, because on Unix it (as one would expect) is not possible to create a file on a read-only directory:</p>
<p>$ mkdir foo</p>
<p>$ chmod -w foo</p>
<p>$ touch foo/bar</p>
<p>touch: cannot touch &#39;foo/bar&#39;: Permission denied</p>
<p>I do agree with the &quot;just try to do the operation and display the resulting error&quot; approach, but it&#39;s not always so simple. Saving a file might mean calling third-party code which outputs a generic error message on failure; checking beforehand for common errors (like the target directory not having &quot;create file here&quot; permissions) can give the user a better error message.</p>
<p>Story time: one program I worked on uses an embedded database engine. A common error on Windows (and only on Windows) is a sharing violation: the embedded database opens the database file exclusively, and fails if some other program (like an antivirus) is holding the file open. My solution: just before calling the embedded database to open the file, I make the program do a CreateFile with the &quot;share nothing&quot; and &quot;open for read and write&quot; flags. If the CreateFile call fails, I display the corresponding Win32 error message to the user.</p>
<p>(I *also* do a SetFileAttributes beforehand, since we&#39;ve had enough problems with the database file being read-only due to it being copied from a CD or something like that.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181683">
				<div id="div-comment-1181683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181683">
			March 26, 2015 at 11:53 am</a>		</div>

		<p>It&#39;s a bad idea to try to predict whether an operation will succeed or fail.</p>
<p>It may fail for a reason you have not allowed for. For example, you find that a directory appears writable but it&#39;s shared from an operating system that has a more complex permissions system and you can&#39;t write to it.</p>
<p>You may block an operation that would have succeeded. This was formerly quite common when programs checked the available disk space and mistakenly reported that there was not enough because there was so much it overflowed their integer representation. It could be that it is effectively impossible to predict such as when the filesystem does compression, whereby the reported free space is either an estmate based on average compression (so the prediction could err either way) or the space for compressed data (which may allow writing a file which is significantly bigger).</p>
<p>A check creates a TOCTOU race &#8211; something may change so you still need to allow for failure even if you have checked perfectly. If you can cope with this, why bother trying to avoid it at all?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181713">
				<div id="div-comment-1181713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181713">
			March 26, 2015 at 12:10 pm</a>		</div>

		<p>ch: The reason to check beforehand is so you can get user input before it&#39;s too late. Typical code will open a dialog box to prompt a user for a filename. When the dialog box closes, the filename is passed to some function to perform the operation. When the operation fails, you can try to tell the user what happened, but by then it&#39;s too late to fix it because the dialog box has closed.</p>
<p>So now you have to put up a message box and then re-open the file dialog, which is much uglier UI. And of course maybe you&#39;ve spent some amount of time or resources performing an operation that you could have known ahead of time would not succeed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181513">
				<div id="div-comment-1181513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181513">
			March 26, 2015 at 5:40 am</a>		</div>

		<p>&gt;You can *create* new files on a read-only directory??? That&#39;s&#8230; surprising, to say the least</p>
<p>Indeed it is surprising. &nbsp;I believe the true explanation is that there is no such thing as a read-only directory (from the ancient DOS attribute point of view). &nbsp;That is, the R attribute simply did not apply to directories.</p>
<p>If I had to characterize the mistake that Unix/Linux programmers (and I are one) make, it would be that they (we) suppose that DOS file attributes are some sort of form of file permissions. They are not. &nbsp;FAT doesn&#39;t have file permissions, and NTFS has proper ACLs. &nbsp;The R bit was a feature that I suppose prevented &#39;accidental&#39; deletion of a file on FAT.</p>
<p>If you don&#39;t want files created in your directory, change its ACL.</p>
<p>Having said that, Explorer&#39;s repurposing of the R bit to mean &#39;special things be here&#39; was a horrible horrible idea. Surely there were better ways? &nbsp;Since the file system team seems to add bits with abandon(*), couldn&#39;t they have given Explorer a new bit?</p>
<p>(*)Exaggerated for comic effect.</p>
<div class="post">[<em>Windows 95 needed to run on a classic FAT drive with no long file names, and <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/11/19/10093594.aspx" rel="nofollow">over existing networks</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 odd alt thread-odd thread-alt depth-1" id="comment-1181743">
				<div id="div-comment-1181743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181743">
			March 26, 2015 at 12:49 pm</a>		</div>

		<p>Gabe: But then what happens is you check, the OS says it&#39;s fine, some other program does something without your knowledge, you attempt the operation and it fails because of whatever happened in the mean time. So your check gains nothing in reality except making code more difficult to follow and the user interface occasionally doing weird things.</p>
<p>@bv1: I&#39;d say that&#39;s the fault of the server OS not knowing about invalid conditions and providing some sort of workaround for whatever protocol it&#39;s implementing if there are differences between it and the host OS&#39;s idea of a valid path.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181813">
				<div id="div-comment-1181813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150325-00/?p=44393#comment-1181813">
			March 26, 2015 at 10:40 pm</a>		</div>

		<p>@dave: Linux permissions aren&#39;t much better. setuid, setgid, sticky, and the file type are not permissions.</p>
<p>Also, setuid, setgid, sticky and executable have different meanings on directories than on files (just like read-only does in Windows)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>