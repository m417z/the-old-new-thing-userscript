<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (40)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-134523">
				<div id="div-comment-134523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134523">
			December 12, 2003 at 10:40 am</a>		</div>

		<p>That must suck when you add checks to the OS that actually _find bugs_ for other people, yet they complain about it. I guess even developers aren&#8217;t exempt from the &quot;people don&#8217;t read help&quot; syndrome, since reading the docs and seeing that there&#8217;s a cbSize member to set would avoid all that trouble in the first place.</p>
<p>That reminds me of a nagging question, and Raymond you are just the guy to ask since it&#8217;s about UI ;) Are there any undocumented checks of list/tree ctrl structs like LVITEM? Over my years of coding and helping others, I&#8217;ve found that if someone doesn&#8217;t init an LVITEM to all zeros, yet sets all the relevant members properly (including mask to indicate which members are valid), calls will sometimes fail. Init&#8217;ing the struct to all zeros fixes it. So it seems like, even though the mask says the OS should ignore some members, it doesn&#8217;t ignore them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134533">
				<div id="div-comment-134533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jelovic.com' rel='external nofollow' class='url'>Dejan Jelovic</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134533">
			December 12, 2003 at 11:04 am</a>		</div>

		<p>What&#8217;s up with all those struct members that are documented as ignored or reserved. How does that happen?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134543">
				<div id="div-comment-134543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134543">
			December 12, 2003 at 11:30 am</a>		</div>

		<p>Mike: The most common error with LVITEM is forgetting to initialize the mandatory iSubItem member.  I bet that&#8217;s what you&#8217;re missing. Any field that has a mask is optional. Fields that don&#8217;t have a mask are mandatory.</p>
<p>Dejan: I guess I don&#8217;t understand the question. Ignored/reserved means &quot;We don&#8217;t use them for anything now, but a future version might use them, so make sure to pass 0 here so you don&#8217;t break in the next vesion.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134553">
				<div id="div-comment-134553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134553">
			December 12, 2003 at 12:16 pm</a>		</div>

		<p>The only thing that&#8217;s bad about all those structs is they all use different naming conventions for the size member. Fortunately all the ones I have come across list it as the first member so I can just do SOMESTRUCT foo = { sizeof foo }; on the first line.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134563">
				<div id="div-comment-134563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeroen-bart Engelen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134563">
			December 12, 2003 at 2:16 pm</a>		</div>

		<p>This feature really frustrated me at first. I create software that uses the RAS and my users have systems that range from Win95 to WinXP. But I do wish to use the Win2k and up features if possible. So I first went and found out how big each structure would be on each platform (only for the ANSI version) and then wrote a function that would return the struct size for the platform I requested. Then I would include the RAS header file with WINVER set to 0x510 (that was XP, right?) and use that structure. Then when I actually called an API that needed a versioned-struct I would first use my function to retrieve the size it would expect and just give it a larger structure. IIRC I only set the cbSize member to the false value. Some APIs also want the size of the struct as a parameter and I believe I do give the real (sizeof) size there.<br />
Works like a charm.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134573">
				<div id="div-comment-134573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134573">
			December 12, 2003 at 7:45 pm</a>		</div>

		<p>Jeroen-bart, you&#8217;re a brave man coding against the RAS APIs :)<br />
I wish all APIs included a Version field in their structs or APIs, instead if using a size field to try to discern between different versions&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134583">
				<div id="div-comment-134583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134583">
			December 12, 2003 at 9:01 pm</a>		</div>

		<p>Much like the extended styles not failing on extra bits being set, it&#8217;s hard to believe you guys had a &gt;= check in there long enough for programs to break as a result of it.  I suppose hindsight is 20/20 though.</p>
<p>Sizes, for all intents and purposes, are versions.  Though it would be nice if in the Windows does they put the different versions of all of the structs in the .h files, rather than the most recent.  Or even rather than the ifs for the versions of Windows.  Just give us LOGFONT_NT5 and LOGFONT_NT4 then just alias LOGFONT to the newest version.</p>
<p>I think I&#8217;m preferring flag members at the top of the class over sizes though.  While it&#8217;s more limiting (it only allows things at the end), flags let you use the newest versions of the structs without worrying about anything except not passing newer flags than the Windows version.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134593">
				<div id="div-comment-134593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134593">
			December 12, 2003 at 10:21 pm</a>		</div>

		<p>Flags and sizes &#8211; does it really matter?</p>
<p>With flags:</p>
<p>s.dwFlags = (use version 2) ? COOL_V2_STUFF : 0;</p>
<p>versus sizes:</p>
<p>s.cbSize = (use version 2) ? sizeof(S_V2) : sizeof(S_V1);</p>
<p>The original code used &gt;= because in the old days, there was an implicit assumption that developers were not stupid, not lazy, and not evil.  &quot;Of course everybody will set their sizes properly. That&#8217;s why they get paid the big bucks.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134603">
				<div id="div-comment-134603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lonnie McCullough</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134603">
			December 12, 2003 at 11:38 pm</a>		</div>

		<p>This also begs the question of why certain structs do not use a cbSize member.  Take LOGFONT for instance.  Now to me the inner workings of the font mapper and fonts in general are a huge mystery and therefore subject to change at any given time (as long as Windows can measure it correctly tho it can remain a mystery to me).  So I was using the theme APIs the other day and came across GetThemeFont which expects a LOGFONT (but in actuality it wants a LOGFONTW).  It seems having a cbSize member here (because the lfFaceName is embedded in the struct) would have made sense in this case, instead I had to spend half an hour realizing that the theme API is all Unicode and therefore wants a LOGFONTW.  This was only after my &quot;this&quot; pointer had been overwritten about 15 times by GetThemeFont because it thought it had a LOGFONTW.  Not complaining really, just wondering why something as variable as font rendering / mapping would not have designed in some future proofness (maybe its really the fault of the theme API writers tho).  Thanks for an awesome blog Raymond!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134613">
				<div id="div-comment-134613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.virtualdub.org/' rel='external nofollow' class='url'>Phaeron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134613">
			December 12, 2003 at 11:59 pm</a>		</div>

		<p>Sorry, Raymond.  I usually agree with you, but I think Microsoft deserves the big wooden spoon for this one.  It is counterintuitive that simply raising _WINNT_WINVER could cause perfectly working code to break on older platforms.</p>
<p>I once set WINVER to 0x0500 in a module so I could enable resizing on file dialogs in Windows 2000, and then got a bug report a couple of weeks later that the menus were broken on NT4.  It turned out that _WINNT_WINVER=0x0500 caused the MENUITEMINFO structure to grow, which broke 95 and NT4.  Gee, thanks.  The Win32 documentation doesn&#8217;t usually say whether a function will accept larger structures or not, or whether redefining WINVER will change the size of a structure.  In any case, it&#8217;s impractical for programmers to retest every API call in their application to determine if any no longer work on downgrade OS versions.</p>
<p>If a structure needs to be enlarged for new features, and existing platforms won&#8217;t accept larger sizes, then the correct action is to create a new structure, not to modify the older structure.  That is, WINVER=0x0500 should be a perfect superset of WINVER=0x0400, and WINVER=0x0501 a perfect superset of WINVER=0x0500.  If you want programmers to take advantage of the features of the newest and greatest OS, you must either make it easy to continue support for older ones.</p>
<p>Incidentally, I&#8217;ve heard that PalmOS has problems like this in its SDK as well &#8212; if they ship an import for function Foo in SDK version 37, they&#8217;ll rename it to FooV37 in v38 and call the incompatible v38 version Foo again.  Drives everyone nuts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134623">
				<div id="div-comment-134623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134623">
			December 13, 2003 at 12:36 am</a>		</div>

		<p>Lonnie: Thanks for the pointer about GetTheme(Sys)Font. I&#8217;ll have that fixed. It should be declared as LOGFONTW*.  Similarly, the TEXTMETRIC in GetThemeTextMetrics should be a TEXTMETRICW*.</p>
<p>Phaeron: I concede that writing for mixed targets is a pain. I can try to keep an eye on the ones I have some influence over, but MENUITEMINFO is alas not one of them. I like to think that the PROPSHEETPAGE_V&lt;x&gt; structures are a little better though.  (Those I do have influence over.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134633">
				<div id="div-comment-134633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134633">
			December 13, 2003 at 1:12 am</a>		</div>

		<p>Raymond, I just dove into prsht.h and was reminded of another nagging question. What the heck is ISOLATION_AWARE_ENABLED for exactly? I know it has something to do with enabling themes on XP (even though from my experience it seems like all I need to get themes is a manifest with the right ID), but the rest is muddy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134643">
				<div id="div-comment-134643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134643">
			December 13, 2003 at 11:27 am</a>		</div>

		<p>Isolation awareness is an entirely different matter. This has to do with activating your manifest at the appropriate times. You need to do this if you are a plug-in in a host program that is not manifest-aware. I am not an expert on this subject so I&#8217;ll shut up now before I make a greater fool of myself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134653">
				<div id="div-comment-134653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom Seddon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134653">
			December 14, 2003 at 1:08 pm</a>		</div>

		<p>Regarding prsht.h, is there any reason why #define is used so much instead of typedef? I&#8217;ve noticed this a lot in MS headers, and it&#8217;s always struck me as strange. And now here I have a chance to ask :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134663">
				<div id="div-comment-134663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134663">
			December 14, 2003 at 2:39 pm</a>		</div>

		<p>No deep reason for #define over typedef. I guess one tiny advantage of #define is that you can #undef a #define if you don&#8217;t like it. But that&#8217;s not a real reason.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134673">
				<div id="div-comment-134673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Krishna</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134673">
			December 14, 2003 at 9:18 pm</a>		</div>

		<p>sorry for being outa topic. Why dont you write something about how a process looks like after the CLR loads and maps managed exec.s / dlls &#8211; you could exemplify the whole process of managed execution, with regard to the native aspects (process, threads, fibers&#8230; etc.). Something no one has done already. looking forward &#8230;. thanks&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134683">
				<div id="div-comment-134683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134683">
			December 14, 2003 at 10:41 pm</a>		</div>

		<p>Um, look at the subtitle: &quot;Not actually a .NET blog&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134693">
				<div id="div-comment-134693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Krishna</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134693">
			December 15, 2003 at 6:22 am</a>		</div>

		<p>ok, i agree but since you were into hardcore Win32, i thought i could suggest that. sorry&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134703">
				<div id="div-comment-134703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134703">
			December 15, 2003 at 8:43 am</a>		</div>

		<p>Hi Raymond,</p>
<p>I like your blog a lot. Could you tell something about that annoying &#8216;Unsafe Removal of Device&#8217; dialog in Windows 2000 that shows up when you disconnect a USB device? Incidentally, it also pops up when you restore from hibernation, which is even more annoying. It seems to be gone in Windows XP. I&#8217;d like to hear about the reasoning behind it. Thanks!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134713">
				<div id="div-comment-134713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134713">
			December 15, 2003 at 11:36 am</a>		</div>

		<p>I wasn&#8217;t involved with that dialog, but here&#8217;s what I remember: The device was indeed removed unsafely. If it was a USB storage device, for example, there may have been unflushed I/O buffers. If it were a printer, there may have been an active print job. The USB stack doesn&#8217;t know for sure (those are concepts at a higher layer that the stack doesn&#8217;t know about) &#8211; all it knows is that it had an active channel with the device and now the device is gone, so it gets upset.and yells at you.</p>
<p>In Windows XP, it still gets upset but it now keeps its mouth shut. You&#8217;re now on your honor not to rip out your USB drive before waiting two seconds for all I/O to flush, not to unplug your printer while a job is printing, etc. If you do, then your drive gets corrupted / print job is lost / etc. and you&#8217;re on your own.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134723">
				<div id="div-comment-134723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134723">
			December 15, 2003 at 11:39 am</a>		</div>

		<p>Krishna: I basically discuss raw Win32. If you want to know how the CLR uses threads, you&#8217;ll have to talk to the CLR folks. I don&#8217;t know how the CLR uses threads, nor do I know how MFC uses threads, how ATL uses threads, how SQL uses threads&#8230; I just know about how threads themselves work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134733">
				<div id="div-comment-134733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134733">
			December 15, 2003 at 11:42 am</a>		</div>

		<p>&quot;Flags and sizes &#8211; does it really matter?&quot;</p>
<p>Yes, it matters.  For one, sizes assumes a monotonically increasing size for the structure.  Say for a future version you would like to CHANGE a member, rather than just add one.  Can&#8217;t do that with a size.</p>
<p>Also, as someone else mentioned, since structs change behind your back with newer WINVERs, you suddenly have compatibility issues.  And not just versions, lets say you have:</p>
<p>struct TestStruct<br />
{<br />
  int size;<br />
  void *ptr1;<br />
};</p>
<p>&#8230; and in code, you initialize it like this &#8230;</p>
<p>TestStruct s = { sizeof( TestStruct ), ptr };</p>
<p>Now, you guys add a new memeber and bam, you have uninitiailized data.  And that&#8217;s not developers being stupid, that&#8217;s just bad API design.  You let code that used to work change behind peoples&#8217; backs without warning.  With flags, you don&#8217;t get this problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134743">
				<div id="div-comment-134743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134743">
			December 15, 2003 at 1:45 pm</a>		</div>

		<p>Actually, in that case you do not have uninitialized data. Unspecified initalizers default to 0. See ARM 8.4.1 or C 3.5.7.</p>
<p>If you want to lock to a previous version of Windows, set WINVER before including &lt;windows.h&gt;. It has always worked that way.</p>
<p>Members in structures are never changed. If there&#8217;s a member you don&#8217;t like any more, you just deprecate it and add a new member that you do like.  (Changing the typf of a member really messes up the marshaller!)</p>
<p>Please point me at an example of how flags would make this easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134753">
				<div id="div-comment-134753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob McAfee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134753">
			December 15, 2003 at 2:19 pm</a>		</div>

		<p>Raymond, I disagree with your rationalizations on this one. First, uninitialized data is easily trapped by range checking; for example, allow expansion by a factor of 2. Second, the idea that GetMenuItemInfo or any other API needs to protect future programmers from themselves, well, thanks but no thanks. I am fully capable of reading documentation and determining how an API will behave on older platforms. What I really want to do is just call GetMenuItemInfo with the structure&#8217;s size field initialized using sizeof. Any other behavior is frustrating. Finally, if a structure expands in such a way that the legacy API would not be able to behave properly (as in the &quot;everyone gets in for free&quot; example), then a new API is warranted, not failure of the legacy API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134763">
				<div id="div-comment-134763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134763">
			December 15, 2003 at 3:38 pm</a>		</div>

		<p>As I noted: We tried that and it didn&#8217;t work.  Even if you allow expansion by a factor of 2, you&#8217;ll find some people who are lucky and the uninitialized value happens to be in the &quot;acceptable&quot; range.</p>
<p>If all you want to do is call GetMenuItemInfo and have it work as far down as NT4, then set _WIN32_WINNT_VERSION=0x0400 before #include&#8217;ing &lt;windows.h&gt; and you will get an NT4-compatible header file.</p>
<p>Yes, it is annoying if you want your program to run on multiple platforms, taking advantage of new features of each platform as it becomes available. But most programs aren&#8217;t written that way; they target one OS and rely on the app compat team to keep them going on the newer OSs.</p>
<p>Be careful what you ask for: Do you really want a new API every time a new feature/field/flag is added?  Check out how many different varieties of GetTextExtent exist. Imagine if every API had that many variations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134773">
				<div id="div-comment-134773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134773">
			December 15, 2003 at 4:51 pm</a>		</div>

		<p>P.S., we tried flags. That didn&#8217;t work either.  Notice that the TVITEM structure does not have a size; it uses flags to determine what version you are using. And we found apps that left the flags uninitialized. But the flags they set were harmless &#8212; until IE4 added new flags that happened to match the uninitialized garbage&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134783">
				<div id="div-comment-134783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134783">
			December 16, 2003 at 12:22 am</a>		</div>

		<p>Can&#8217;t such problems be prevented by checking for invalid flags?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134793">
				<div id="div-comment-134793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134793">
			December 16, 2003 at 1:58 am</a>		</div>

		<p>And so we&#8217;ve come full circle. The code now has to read</p>
<p>if (version_2_detected)<br />
  s.dwFlags = FEATURE_V1 | FEATURE_V2;<br />
else<br />
  // can&#8217;t set FEATURE_V2 on version_1 or it<br />
  // gets rejected as an invalid flag<br />
  s.dwFlags = FEATURE_V1;</p>
<p>but as I understood it the reason people preferred flags is that it avoided the need to do version checking&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134803">
				<div id="div-comment-134803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134803">
			December 16, 2003 at 10:09 am</a>		</div>

		<p>&quot;Actually, in that case you do not have uninitialized data. Unspecified initalizers default to 0. See ARM 8.4.1 or C 3.5.7.&quot;</p>
<p>And zero is always a sensible default?  I consider zero uninitialized, because the implementation of the struct may require a non zero value.</p>
<p>&quot;but as I understood it the reason people preferred flags is that it avoided the need to do version checking&#8230;&quot;</p>
<p>Which had nothing to do with the reasons I just said, which is that with sizes you get an implicit change to code in places that you may not know.</p>
<p>For one, your &quot;people target one version of Windows&quot; argument is bunk.  I had to have all sorts of workarounds for Win98, and we didn&#8217;t feel like redistributing comctl32 for awhile, so we would have checks in there.  Plus, anyone using comctl 6.0 that wants their programs to run on Win2k has to do quite a bit of version checking.</p>
<p>Anyway, you&#8217;re missing the point of the flags &#8211; it&#8217;s not so much for version checking as it is for being forward compatible.  With flags, anything you add can be uninitialized, because it won&#8217;t be touched without a flag there.  You don&#8217;t have to redeclare the struct yourself or hard code a size.  You can get a new version of the platform sdk and bam, all your stuff still works on the versions of Windows it used to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134813">
				<div id="div-comment-134813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134813">
			December 16, 2003 at 11:16 am</a>		</div>

		<p>I understand that flags are much nicer if you assume that everybody is smart and pays close attention and never makes mistakes, but unfortunately that&#8217;s not the case. In fact most programmers are NOT writing industrial strength &quot;must run on all platforms&quot; code. They&#8217;re writing &quot;just get the job done&quot; code. So we have to design things so it&#8217;s easy to get it right. Allowing forward compatibility in structures and flags means that people will leave stuff uninitialized and get away with it.</p>
<p>I understand the frustration, since I too have written my share of programs that need to run on several flavors of the OS. But you and I are in the minority. It&#8217;s pay for play. The easy things are easy, and the hard things are hard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134823">
				<div id="div-comment-134823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob McAfee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134823">
			December 17, 2003 at 4:24 pm</a>		</div>

		<p>At the very least this should be documented in MSDN. Currently the docs state that cbSize must be initialized to sizeof(MENUITEMINFO), and also that the OS requirement is NT4 and above, which just isn&#8217;t true.</p>
<p>GetMenuItemInfo is the only API I&#8217;ve run into in practice that does this sort of strict size enforcement. Is this practice commonplace? If so, I&#8217;m surprised I haven&#8217;t run into it with other API calls.</p>
<p>I also have a hard time believing that tight range checking doesn&#8217;t work in practice&#8230; I&#8217;ve done a certain amount of API development with versioned software, though admittedly on a smaller scale than Win32, and it&#8217;s been my experience that it is a happy compromise. The NT4 implementation could easily have allowed for a small number of additional data members to be added and still have an extremely low risk of false positives, while allowing for forward compatibility with the forseeable future of Windows platforms. The gains outweigh the risks. With admittedly 20-20 hindsight, it turns out that only a 4-byte expansion was needed for compatibility with Win 2000/XP, but even if GetMenuItemInfo had allowed for an 8 or 16 byte expansion in the size-checking logic, a mere handful of programmers would be &quot;lucky&quot; enough to get away with uninit data.</p>
<p>Finally: what does the NT4 implementation of GetMenuItemInfo care what the size is anyway? It&#8217;s not like it&#8217;s going to suddenly start writing to hbmpItem because you handed it a size &gt; 0x2C&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134833">
				<div id="div-comment-134833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob McAfee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134833">
			December 17, 2003 at 4:38 pm</a>		</div>

		<p>Just to answer my own question &quot;what does the NT4 implementation of GetMenuItemInfo care what the size is anyway&quot;&#8230; I see what you were trying to do; prevent programs compiled for NT4 to advertise a bogus size if they are later executed, without recompilation, on a future version of Windows. Whether that&#8217;s reasonable is debatable, but it doesn&#8217;t make sense in this case due to the semantics of GetMenuItemInfo: you have to specify the data you want in fMask using flags. I suppose you could say you were worried about people not initializing their flags also, e.g.</p>
<p>UINT flags;   // Uh-oh! Uninitialized data.<br />
flags |= MIIM_TYPE;   // Who knows what other flags are set in there.</p>
<p>Instead of</p>
<p>UINT flags = MIIM_TYPE;</p>
<p>But that is really paranoid. At some point you have to trust people to be professionals.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134843">
				<div id="div-comment-134843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134843">
			December 17, 2003 at 8:00 pm</a>		</div>

		<p>GetMenuItemInfo uses both flags and size so in that sense it is indeed rather odd.  But since this function thunks down to kernel mode, you have to know the size of the structure in order to marshal it properly. If some NT4 app accidentally set MIIM_BITMAP (say via stack garbage), Windows 2000 would say &quot;Okay, let&#8217;s copy the larger structure&quot; &#8211; and if the structure happened to lie right at the end of a page, trying to copy the larger structure would fault.</p>
<p>Here is why the NT4 version case if you passed a bigger size: somebody takes a program written for Windows 2000 and running it on NT4. The program sets MIIM_BITMAP and calls GetMenuItemInfo and it succeeds (because the size is &gt;= 0x2C) and the the app accesses the hbmpItem member and finds garbage.</p>
<p>&quot;At some point you have to trust people to be professionals.&quot;</p>
<p>And setting the proper size is how you demonstrate that you know what you&#8217;re doing.  (Though I&#8217;ve seen examples of this assumption not being true either&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134853">
				<div id="div-comment-134853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob McAfee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134853">
			December 18, 2003 at 2:28 pm</a>		</div>

		<p>&quot;The program sets MIIM_BITMAP and calls GetMenuItemInfo and it succeeds (because the size is &gt;= 0x2C)&quot;&#8230;</p>
<p>Actually, I have no problem with NT4 failing on unexpected flags; it *should* fail. Unknown flags would only be introduced by mistake or by new client code that uses features that are advertised to be unavailable on NT4, not simple recompilations of legacy code, so I&#8217;m less touchy about the bar being higher in that case. I would expect such client code to have to do special work at runtime to be compatible with NT4. Basically I would have written the compat check in NT4&#8217;s GetMenuItemInfo like so:</p>
<p>if (info-&gt;cbSize &lt; sizeof(MENUITEMINFO)        // Obviously bogus<br />
 || info-&gt;cbSize &gt; sizeof(MENUITEMINFO)+16  // Room for expansion<br />
 || (info-&gt;fMask &amp; ~MIIM_ALLFLAGS) != 0))     // I invented MIIM_ALLFLAGS, but you get the idea: No unknown flags please<br />
{<br />
   // &#8230; SetLastError, then&#8230;<br />
   return FALSE;<br />
}</p>
<p>Or rather, I would write the check like that *now*, after discussing GetMenuItemInfo more than I would have thought possible! :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134863">
				<div id="div-comment-134863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Lund</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-134863">
			December 29, 2003 at 4:21 pm</a>		</div>

		<p>Another way could be having two size fields, one of them being negated.  If they didn&#8217;t add up to 0 the programmer was&#8230;well, not really a programmer :)</p>
<p>Weren&#8217;t the sizes also used to help automatic thunking between WIN16 and WIN32 10 years ago?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-174923">
				<div id="div-comment-174923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://rz_theman@hotmail.com' rel='external nofollow' class='url'>Riad</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-174923">
			May 17, 2004 at 8:25 pm</a>		</div>

		<p>hi</p>
<p>explain carefully the different effects that may occur at runtime with the following declaration of a string:</p>
<p>char*const host=&quot;muser.brad.ac.uk&quot;</p>
<p>what possible differences could occur at runtime if the following alternatives were used:</p>
<p>const char*host=&quot;muser.brad.ac.uk&quot;</p>
<p>thank you</p>
<p>if you can email me the answer, i&#8217;ll be very greatfull</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-185003">
				<div id="div-comment-185003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-185003">
			June 17, 2004 at 11:46 pm</a>		</div>

		<p>Commenting on this article has been closed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-206243">
				<div id="div-comment-206243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/08/26/220980.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-206243">
			August 26, 2004 at 12:59 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-253503">
				<div id="div-comment-253503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2005/02/07/368567.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-253503">
			February 7, 2005 at 1:28 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-349223">
				<div id="div-comment-349223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/02/23/537856.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031212-00/?p=41523#comment-349223">
			February 23, 2006 at 10:00 am</a>		</div>

		<p>It&#8217;s all there in the tool helper library.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>