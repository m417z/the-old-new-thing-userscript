<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1048913">
				<div id="div-comment-1048913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130405-00/?p=4743#comment-1048913">
			April 5, 2013 at 8:17 am</a>		</div>

		<p>Please note the ability to use job for waiting for a process tree is actually an abuse of the system. Your code cannot use it if some other piece of code is using it to monitor you becaue jobs do not nest. (This was fixed starting in Windows 8; however given its market uptake if this is not back-ported to Windows 7 it is useless for a long time yet).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1048923">
				<div id="div-comment-1048923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130405-00/?p=4743#comment-1048923">
			April 5, 2013 at 8:20 am</a>		</div>

		<p>Exercise: JOBOBJECT_ASSOCIATE_COMPLETION_PORT structure: &quot;The system sends messages to the I/O completion port associated with a job when certain events occur. If the job is nested, the message is sent to every I/O completion port associated with any job in the parent job chain of the job that triggered the message.&quot;</p>
<p>So if a process in your job happens to create a nested job, that nested job could generate notifications with a different completion key from your own job, yet these notifications would be sent to your job anyway?</p>
<p>Seems like this is potentially breaking change /w Windows 8, since older Windows versions didn&#39;t have nested jobs, so a program never needed to worry about a job spawning child jobs that generate unwanted notifications. &nbsp;I don&#39;t see why a parent job would be interested in the notifications of its children, where the completion key is not the completion key of interest.</p>
<p>Or did I read the documentation incorrectly here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1048933">
				<div id="div-comment-1048933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smouch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130405-00/?p=4743#comment-1048933">
			April 5, 2013 at 9:41 am</a>		</div>

		<p>Seems the lack of the word &quot;only&quot; is a source of confusion.</p>
<p>&quot;The state of a job object is set to signaled ONLY when all of its processes are terminated ONLY because the specified end-of-job time limit has been exceeded.&quot;</p>
<p>Or something&#8230;</p>
<p>And so it goes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1048953">
				<div id="div-comment-1048953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130405-00/?p=4743#comment-1048953">
			April 5, 2013 at 4:09 pm</a>		</div>

		<p>Jobs would very good tool.. If they wouldn&#39;t be half-cooked. Every time I tried to use them I faced with some very stupid problems. Like unability to nest jobs (&#39;fixed&#39; in Win8) or unfixable impossibility to change thread&#39;s active input layout if it belongs to process attached to job with UI objects restrictions. If not this jobs could be very powerful toolset for creating sandboxes, but instead due to that annoying &#39;little&#39; problems they usable only as batch file execution ime limiters..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1048963">
				<div id="div-comment-1048963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kalle Olavi Niemitalo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130405-00/?p=4743#comment-1048963">
			April 6, 2013 at 2:33 am</a>		</div>

		<p>I wonder whether using the job handle as the completion key is entirely reliable. &nbsp;I mean, the child process does not inherit the job handle, so if the child process also calls CreateJobObject, I&#39;m afraid CreateJobObject could return the same handle value as in the parent process, even though the handle refers to a different job object. &nbsp;I considered other ways to get unique completion keys (a LUID from AllocateLocallyUniqueId, or the process ID of the process that waits for the completion port), but these too require that all processes in the job allocate completion keys in the same way.</p>
<p>For JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO specifically, I guess I&#39;d make the process first wait for the completion notification and check the completion key but then verify the situation with QueryInformationJobObject.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1048983">
				<div id="div-comment-1048983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130405-00/?p=4743#comment-1048983">
			April 6, 2013 at 3:15 pm</a>		</div>

		<p>I use job objects to ensure that my child processes terminate in the worst case if for some reason the parent process terminates.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1049053">
				<div id="div-comment-1049053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130405-00/?p=4743#comment-1049053">
			April 8, 2013 at 10:17 am</a>		</div>

		<p>I am genuinely surprised there is no easy way to make sure that your children processes won&#39;t outlive you, neither on Windows or Linux. When I ran into this problem the first time, I thought there had to be a CREATE_DONT_OUTLIVE_PARENT flag for CreateProcess, but there wasn&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1049093">
				<div id="div-comment-1049093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130405-00/?p=4743#comment-1049093">
			April 8, 2013 at 1:18 pm</a>		</div>

		<p>@Joker_vD: I agree &#8211; there ought to be one. &nbsp;In Windows, using a job with JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE mostly works, particularly if you trust the child process. &nbsp;In Linux, the child process can use prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0).</p>
<p>The problems with these approaches are that you have to trust the child process, and that there is a slight window of not working &#8211; in Windows, between CreateProcess and AssignProcessToJobObject, and in Linux, between fork and prctl.</p>
<p>I don&#39;t know a solution for Mac OS.</p>
<div class="post">[<em>This article shows how you close the window: You start the child process suspended. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1049113">
				<div id="div-comment-1049113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130405-00/?p=4743#comment-1049113">
			April 8, 2013 at 5:08 pm</a>		</div>

		<p>[This article shows how you close the window: You start the child process suspended. -Raymond]</p>
<p>Sorry, I forgot to mention that. &nbsp;My implementation does use CREATE_SUSPENDED. &nbsp;The problem, though, is that if you somehow crash or get terminated between CreateProcess and AssignProcessToJobObject, you leave the suspended child process as a zombie.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1049543">
				<div id="div-comment-1049543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130405-00/?p=4743#comment-1049543">
			April 10, 2013 at 10:37 pm</a>		</div>

		<p>@Myria: one alternative would be to put the parent process into the job object, and let the child processes inherit membership. &nbsp;If the real parent process can&#39;t be put into the job object, create a trusted child process as an intermediary and use it as the job parent.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>