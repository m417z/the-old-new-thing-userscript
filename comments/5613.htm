<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1031823">
				<div id="div-comment-1031823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031823">
			January 9, 2013 at 7:38 am</a>		</div>

		<p>@henke37:</p>
<p>Wouldn&#39;t there be a problem if two libraries define the same symbol, but the one later in the linking order also provides a symbol which is also needed? &nbsp;In that case, the OBJs from both libraries would be pulled in and a conflict would result.</p>
<p>And for printf, since printf itself is large, I think it would be desirable to pull it in only if the function is used&#8230;not generically as part of floating-point support. &nbsp;Perhaps one could have two versions of printf, as you describe, in separate libraries. &nbsp;The one with floating point support would provide two symbols, a standard &quot;printf&quot; one and a second one, the equivalent of &quot;printf_with_FP_support&quot;. &nbsp;Both would point to the same underlying code entry point. &nbsp;The compiler would modify &quot;printf&quot; to &quot;printf_with_FP_support&quot; in cases where it saw the need for FP support, similar to how it added the _fltused symbol. &nbsp;In this way, the linker would pull in one copy of printf only if the underlying function was used.</p>
<div class="post">[<em>(Good point on the multiple definition issue.) The compiler cannot rewrite printf to printf_with_FP_support because the OBJ that calls printf may not use floating point explicitly. Consider this function: <code>void log(const char *format, ...) { va_list ap; va_start(ap, format); vprintf(format, ap); va_end(ap); }</code> This function does not use any floating point, but it might need to use the FP-enabled version of printf based on whether the rest of the program uses floating point. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031843">
				<div id="div-comment-1031843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031843">
			January 9, 2013 at 7:50 am</a>		</div>

		<p>&quot;Another consequence of the algorithm by which the linker pulls OBJs from libraries to form a module is that if a needed symbol can be satsified without consulting a library, then the OBJ in the library will not be used.&quot;</p>
<p>It seems like this should be tricky to pull off in practice. &nbsp;If I understand correctly, when I have a library that contains a.obj, and I want to override a function Foo() in a.obj, then I must also override all other functions in a.obj that my program uses. &nbsp;For instance, if I override Foo() but don&#39;t override Bar() (also defined in a.obj), then this will cause the linker to pull in the entire a.obj file and Foo() will be multiply defined.</p>
<div class="post">[<em>Many libraries are built according to the &quot;one function per OBJ&quot; model. The static C runtime library, for example. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031853">
				<div id="div-comment-1031853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031853">
			January 9, 2013 at 7:57 am</a>		</div>

		<p>For the printf problem, could we solve it using a factory approach similar to the ATL example? &nbsp;Internally, printf could refer to a table of format functions (each entry would be a format specifier and a function pointer). &nbsp;The printf module would define all the entries expect for the floating point entry, which would appear in the floating point module.</p>
<div class="post">[<em>That would work. You could special-case it further, where the only registration entry is for the floating point formats and you just hard-code the integer formats into printf. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031863">
				<div id="div-comment-1031863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031863">
			January 9, 2013 at 7:58 am</a>		</div>

		<p>This is difficult.</p>
<p>Will this work:</p>
<p>printf provided by a lib which is made up of the following:</p>
<p>1 Obj which provides printf with floating point support. Also exports a __printf_with_fp__ symbol.</p>
<p>1 Obj without floating point support. Does not export symbol.</p>
<p>Floating point lib imports (requires) <strong>printf_with_fp</strong> symbol so uses the floating point version.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031873">
				<div id="div-comment-1031873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031873">
			January 9, 2013 at 8:03 am</a>		</div>

		<p>@ZLB: That won&#39;t work if the linker arbitrarily decides to resolve printf ifself before it resolves <strong>printf_with_fp</strong>, or before it even gets around to adding the ordinary floating-point support module.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031883">
				<div id="div-comment-1031883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031883">
			January 9, 2013 at 8:07 am</a>		</div>

		<p>@ZLB: &nbsp;Problem is that if you use FP, but not printf, you get printf in your linked module anyway.</p>
<p>Best I can come up with right now is to factor out the FP support from the rest of printf. &nbsp;This gives 3 OBJ, in link order&#8230;</p>
<p>1) &nbsp;FP support OBJ which provides &quot;__fltused&quot; &nbsp;and &quot;printf__fp&quot; (FP portion of printf)</p>
<p>2) &nbsp;printf &nbsp; OBJ &nbsp; which provides &quot;printf&quot; &nbsp; and needs &quot;printf__fp&quot;</p>
<p>3) &nbsp;dummy &nbsp;OBJ which provides a version of &quot;printf__fp&quot; which just returns an error indicator in case someone uses %f in printf call w/o any other FP used.</p>
<p>In this way, FP support only comes in if you use FP. &nbsp;Also, the bulk of printf only comes in if you actually use printf. &nbsp;But, if you use FP but not printf, you get a copy of &quot;printf__fp&quot; anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031903">
				<div id="div-comment-1031903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031903">
			January 9, 2013 at 8:28 am</a>		</div>

		<p>[The problem is to avoid using the floating point version of printf if the program does not use floating point (even though it links with the floating point library). -Raymond]</p>
<p>The way I remember it being done was printf called a function called something like __ftoa, and there was an implementation of __ftoa() in the floating point library and another __ftoa() all the way on the end of the list that raised an error. The meaning of the error was &quot;Hey, you passed %e, %f or %g to printf() but you didn&#39;t use float or double anywhere. What did you expect this to do?&quot;</p>
<div class="post">[<em>This requires that the FP library be linked ahead of the static CRT. This is the sort of mistake most people will never figure out. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031913">
				<div id="div-comment-1031913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031913">
			January 9, 2013 at 8:31 am</a>		</div>

		<p>@Bob:</p>
<p>Would that really work for the &quot;no FP&quot; variant?</p>
<p>When the linker encounters printf in the second OBJ, it needs to resolve printf__fp. But it will take it from the first OBJ, because of the link order. The first OBJ also providing the unused __fltused doesn&#39;t stop that, does it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031923">
				<div id="div-comment-1031923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031923">
			January 9, 2013 at 8:37 am</a>		</div>

		<p>@Joshua: I don&#39;t think that would work. &nbsp;As soon as printf declares that it needs __ftoa, the linker would pull in the version from the floating point .OBJ.</p>
<p>But it could work if we found the pointer indirectly:</p>
<p>In printf.obj, we declare a section __ftoa_sect_a with a single pointer (__dummy_ftoa), and another section __ftoa_sect_c a pointer to the error version of __ftoa you described.</p>
<p>In the floating point .obj, we declare a section __ftoa_sect_b with a pointer to the real __ftoa.</p>
<p>Now, printf calls __ftoa by (__dummy_ftoa + 1)( &#8230; ). &nbsp;If the floating point .obj is included, this will end up calling the real __ftoa, otherwise it will call the error version.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031943">
				<div id="div-comment-1031943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Max</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031943">
			January 9, 2013 at 8:41 am</a>		</div>

		<p>I just tried to compile a test program where I provided my own implementation of CreateFile ( just returns NULL ) attempting to use the &quot;OBJ overrides the LIB&quot; principle. Linker complains that the CreateFile symbol is already defined blablabla. Does it mean that the behavior is different when we are talking about import libraries ?</p>
<p>Max.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031953">
				<div id="div-comment-1031953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031953">
			January 9, 2013 at 8:43 am</a>		</div>

		<p>[This requires that the FP library be linked ahead of the static CRT. This is the sort of mistake most people will never figure out. -Raymond]</p>
<p>It was all one library. Don&#39;t ask me how the linker knew not to resolve __itoa to the floating point version if __fltused was not defined. I have no idea. Today I&#39;d do it with a weak symbol at the front but I don&#39;t think the 1980&#39;s linker knew about weak symbols.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031963">
				<div id="div-comment-1031963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/stephen.horn_4000_volition_2D00_inc.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>stephen.horn@volition-inc.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031963">
			January 9, 2013 at 8:44 am</a>		</div>

		<p>@Joshua: Wouldn&#39;t printf need to cast the va_list argument to a float before it could call __ftoa()? Wouldn&#39;t that cause the program to bring in whatever floating-point support was needed for its platform?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031973">
				<div id="div-comment-1031973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/stephen.horn_4000_volition_2D00_inc.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>stephen.horn@volition-inc.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031973">
			January 9, 2013 at 8:47 am</a>		</div>

		<p>Nevermind, I&#39;m forgetting that the point is to not pull in any floating-point support except when needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031983">
				<div id="div-comment-1031983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031983">
			January 9, 2013 at 10:18 am</a>		</div>

		<p>Does anyone know the details of library search order? In particular, how does specifying a lib on the linker input line compare to using a #pragma comment(lib,&quot;&quot;) in a source file in the project? How about #pragma&#39;s in different source files in the project?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ipoverscsi even thread-even depth-1" id="comment-1032013">
				<div id="div-comment-1032013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ipoverscsi' rel='external nofollow' class='url'>ipoverscsi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1032013">
			January 9, 2013 at 10:58 am</a>		</div>

		<p>Perhaps I&#39;m over thinking the &quot;link the correct version of printf&quot;, but I would modify the compiler to scan the formatting string to printf and its variants (sprintf, etc.) and if the formatting string referenced floating point variables update the code to call the printf_with_float() instead of printf_no_float() using one of the techniques mentioned in this series.</p>
<div class="post">[<em>What if the format string is generated at run time? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1032023">
				<div id="div-comment-1032023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1032023">
			January 9, 2013 at 11:09 am</a>		</div>

		<p>@ipoverscsi:</p>
<p>&quot;&#8230;but I would modify the compiler&#8230;&quot;</p>
<p>Tell me how that works to link object files in the project that were created in assembly (or any other language) and make calls to printf. Remember, the linker is language-agnostic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ipoverscsi even thread-even depth-1" id="comment-1032033">
				<div id="div-comment-1032033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ipoverscsi' rel='external nofollow' class='url'>ipoverscsi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1032033">
			January 9, 2013 at 11:25 am</a>		</div>

		<p>@Brian_EE:</p>
<p>True. &nbsp;But unless you preprocess the printf format string you won&#39;t know until runtime whether an attempt will be made to format a floating point value. &nbsp;If we assume that we&#39;re only doing static linking (no DLLs) then I can&#39;t think of any other way to know at link time if you need to floating point library.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032043">
				<div id="div-comment-1032043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous123</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1032043">
			January 9, 2013 at 11:27 am</a>		</div>

		<p>For the printf issue &#8211; printf OBJ should not include _fltused. &nbsp;Yes if the app uses %f and does not use floating point the app will crash, but any app that uses floating formats will itself include _fltused so this symbol is not needed by printf</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032053">
				<div id="div-comment-1032053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1032053">
			January 9, 2013 at 11:46 am</a>		</div>

		<p>I think Anonymous123 found it. by knocking out the reference to _fltused in vfprintf&#39;s .OBJ (all other *printf call this one), the floating point library is not called in unless used elsewhere. This assumes that vfprintf&#39;s %e, %f, and %g are fully inlined. You end up with maybe .5k of unreachable garbage if not used. No special cases in the linker required.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1032123">
				<div id="div-comment-1032123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1032123">
			January 9, 2013 at 1:54 pm</a>		</div>

		<p>One way to resolve this is to create an (awesome) namespace.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ipoverscsi even thread-even depth-1" id="comment-1032133">
				<div id="div-comment-1032133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ipoverscsi' rel='external nofollow' class='url'>ipoverscsi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1032133">
			January 9, 2013 at 2:08 pm</a>		</div>

		<p>[What if the format string is generated at run time? -Raymond]</p>
<p>I didn&#39;t think of that one. &nbsp;Hmm. &nbsp;</p>
<p>Well, you stumped me, Raymond. &nbsp;I can&#39;t think of a way to determine which version of printf to use at link-time. &nbsp;I can see how to do it at runtime with DLLs, overlays, or some other dynamic code loading, but not at link time.</p>
<p>I eagerly await the answer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031773">
				<div id="div-comment-1031773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1031773">
			January 9, 2013 at 7:22 am</a>		</div>

		<p>The easy exercise has the following issues:</p>
<p>* It is not allowed to have multiple definitions for a symbol in the same library.</p>
<p>* The correct rule is &quot;If multiple libraries define the same symbol then the linker picks one of them according to the linking order.&quot;.</p>
<p>The way to avoid the namespace collision is to use a namespace. Not all languages support namespaces. Not all languages call them namespaces, the term &quot;package&quot; is common. Some languages define the term &quot;namespace&quot; as something else.</p>
<p>The hard exercise is rather easy. Code two versions of printf, one with floating point support and one without it. Stick the floating point version in the floating point emulation library. Then just ensure that the floating point emulation library is linked in before the library with the non floating point version of printf would be.</p>
<div class="post">[<em>The problem is to avoid using the floating point version of printf if the program does not use floating point (even though it links with the floating point library). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032163">
				<div id="div-comment-1032163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Silly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1032163">
			January 9, 2013 at 3:44 pm</a>		</div>

		<p>[This requires that the FP library be linked ahead of the static CRT. This is the sort of mistake most people will never figure out.]</p>
<p>Surely not in ye olde classical linker days? But from what I recall, the math libary usually went at the end of the library arg list since it had no dependencies, which is sort of the opposite of this FP library idea.</p>
<p>Wasn&#39;t the DOS era floating point emulation stuff either done via an explicit linker option (offloading the choice to the developer), or by the user choosing to run an enumation tsr or having an emu387.exe to be loaded by runtime if needed (maybe triggered by a hardware fault)? I think developers would have cracked the s*ts back in the day if they had to endure a lookup + indirect function call to handle every %f printf argument encounter.</p>
<p>Delay load functionality could also be an option if a time machine is allowed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032173">
				<div id="div-comment-1032173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1032173">
			January 9, 2013 at 3:53 pm</a>		</div>

		<p>I think I&#39;d go with Peter&#39;s approach, as corrected by Raymond (entry point pointing to dummy function and corrected by FP library&#39;s init code to point to FP argument handler). Anonymous123&#39;s approach would require coding a special case into the compiler (remember, when float or double is used, as it must be to implement %f, the compiler always generates _fltused) or coding %f etc. support in assembler (well, maybe that&#39;s what CRT does, but I actually tend to doubt it).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032253">
				<div id="div-comment-1032253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1032253">
			January 10, 2013 at 2:04 am</a>		</div>

		<p>///</p>
<p>/// printf.c provides &quot;printf, dummy_printf_do_f_impl, printf_do_f_fp&quot;</p>
<p>///</p>
<p>void dummy_printf_do_f_impl()</p>
<p>{</p>
<p>&nbsp;printf(&quot;Uh oh &#8211; you used %%f but didn&#39;t use the float keyword anywhere!!&quot;); abort();</p>
<p>&nbsp;// alternatively, you could dynamically load the floating point library here, for example to handle the case where the main program&#39;s &quot;printf&quot; has been passed a float from a plugin.</p>
<p>}</p>
<p>extern FARPROC printf_do_f_fp = &amp;dummy_printf_do_f_impl;</p>
<p>&#8230; printf(&#8230;)</p>
<p>{</p>
<p>&nbsp;case &quot;f&quot;: printf_do_f_fp();</p>
<p>}</p>
<p>///</p>
<p>/// flt.lib provides __fltused, requires _printf_fp_impl</p>
<p>///</p>
<p>int __fltused;</p>
<p>void* force_load_printf_fp = &amp;actual_printf_do_f_impl;</p>
<p>///</p>
<p>/// printf_fp.c in printf_fp.lib (provides _printf_fp_impl)</p>
<p>///</p>
<p>printf_do_f.c requires __fltused</p>
<p>FARPROC printf_do_f = NULL;</p>
<p>void actual_printf_do_f_impl()</p>
<p>{</p>
<p>&nbsp;printf(&quot;Here&#39;s your float: &quot;, &#8230;etc&#8230;);</p>
<p>}</p>
<p>extern</p>
<p>class InitMagicNumber</p>
<p>{</p>
<p>InitMagicNumber()</p>
<p>{</p>
<p>&nbsp; &nbsp;printf_do_f = &amp;actual_printf_do_f_impl;</p>
<p>}</p>
<p>}</p>
<p>_printf_fp_impl;</p>
<p>// Now follow through the compilation of main.c (main() { printf(&quot;This should return an error: %f&quot;); }</p>
<p>main.c requires printf, provided by printf.lib. printf.lib doesn&#39;t require any printf_fp stuff, so that&#39;s not loaded. Now when printf is called, it does normal printf behaviour until it hits %f, when it then calls printf_do_f_fp, which is a symbol in printf.lib defined to point to dummy_printf_do_f_impl, which triggers an error.</p>
<p>// Now follow through the compilation of main_fp.c (main() { printf(&quot;This should work: %f&quot;, 0.0f); }</p>
<p>main_fp.c uses floating point, so automatically requires __fltinit. It calls printf, so we load printf.lib. printf.lib doesn&#39;t use printf_fp, so that doesn&#39;t automatically trigger a load there, but we&#39;re now left with one unresolved symbol: __fltinit. __fltinit is defined in flt.lib, which requires the symbol _printf_fp_impl, defined in printf_fp.lib. This requires the printf_do_f_fp symbol which resolves to the definition in printf.lib. printf_fp.lib also has a &quot;magic&quot; variable and the linker will add its constructor to the list of CRT initialization functions.</p>
<p>Now when main_fp.c runs, the CRT will call all of the constructors in turn, including the InitMagicNumber magic class, which sets printf_do_f (from printf.lib) to point to actual_printf_do_f_impl. The CRT eventually calls main who calls printf, who eventually calls the deref of printf_do_f_fp, which now takes it to actual_printf_do_f_impl.</p>
<p>Result: printf floating point code is only brought along for the ride if you actually use floating point (or are dumb enough to include an extern int __fltused) somewhere in your code. Otherwise, a dummy implementation of printf will handle the case where %f is used on a non-floating-point program, which can either load the expensive fp library, or can explode, or can return &quot;0.0&quot; or whatever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032263">
				<div id="div-comment-1032263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1032263">
			January 10, 2013 at 2:21 am</a>		</div>

		<p>Well, in the case of my microcontroller compiler (avrgcc) there is no magic going on, you have to tell the linker explicitly which version you want. The default version doesn&#39;t include floating point. If I really want that, I have to include the &quot;printf_flt&quot; library. There&#39;s even a third, minimalistic version that supports even less options than the standard one, called printf_min.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032273">
				<div id="div-comment-1032273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130109-00/?p=5613#comment-1032273">
			January 10, 2013 at 2:35 am</a>		</div>

		<p>Sorry if I&#39;ve misremembered this.</p>
<p>In printf.c, declare extern (*printf__fp)();</p>
<p>In fltused.c, define printf__fp.</p>
<p>Then when printf wants to print a floating-point number it just invokes printf__fp and you crash if you didn&#39;t trigger the include of the floating-point library.</p>
<p>Better still would be a weak symbol if that&#39;s supported.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>