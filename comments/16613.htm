<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-770083">
				<div id="div-comment-770083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770083">
			September 23, 2009 at 1:12 pm</a>		</div>

		<blockquote><p>
  &gt; SysAllocString is not a moral equivalent to CoTaskMemAlloc.
</p></blockquote>
<p>As far as I can determine, SysAllocString does use CoTaskMemAlloc but stores the length of the string at the start and returns you the pointer to the string immediately following the length. SysFreeString must presumably decrement by 4 then CoTaskMemFree. So you can&#8217;t mix and match API, but they have come from the same pool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-770103">
				<div id="div-comment-770103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Luke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770103">
			September 23, 2009 at 1:46 pm</a>		</div>

		<p>/me takes a look, shudders, returns to the warm embrace of .NET</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dunn even thread-even depth-1" id="comment-770153">
				<div id="div-comment-770153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Dunn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770153">
			September 23, 2009 at 2:20 pm</a>		</div>

		<p>porter&gt; The implied advice is &quot;if the caller will be freeing with CoTaskMemFree, don&#8217;t return memory you allocated with SysAllocString.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-770173">
				<div id="div-comment-770173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770173">
			September 23, 2009 at 2:58 pm</a>		</div>

		<p>@porter: The reason SysAllocString stores the string length was covered here: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/ericlippert/archive/2003/09/12/52976.aspx" rel="nofollow">http://blogs.msdn.com/ericlippert/archive/2003/09/12/52976.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-770233">
				<div id="div-comment-770233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770233">
			September 23, 2009 at 8:08 pm</a>		</div>

		<p>I apologize if this is considered a moral equivalent, but I think that it&#8217;s kind of an oddball&#8230; if your code ever comes across a STGMEDIUM structure, I recommend reading the documentation for ReleaseStgMedium very thoroughly.</p>
<p>The STGMEDIUM/ReleaseStgMedium mechanism is quite useful, but you should be very clear about who is supposed to free (or release) the medium. I&#8217;ve caused a memory leak or two by getting it wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-770253">
				<div id="div-comment-770253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jdanielsmith.spaces.live.com' rel='external nofollow' class='url'>J. Daniel Smith</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770253">
			September 23, 2009 at 10:35 pm</a>		</div>

		<p>I have to agree with Luke: it certainly has been nice not having to think about this stuff nearly as much since .NET and C# came along.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-770283">
				<div id="div-comment-770283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Pryor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770283">
			September 23, 2009 at 10:52 pm</a>		</div>

		<p>@Nawak:</p>
<p>The COM task memory allocator IS required, because it has one requirement that none of the pre-existing memory allocators (HeapAlloc, LocalAlloc, malloc, etc.) could support: cross-process allocation and freeing.</p>
<p>Due to the joy of DCOM, it&#8217;s entirely possible for process A (on machine X) to allocate memory and send it to process B (on machine Y). &nbsp;No pre-existing allocator (that I know of) will support this, and this is required for DCOM to actually be Distributed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-770323">
				<div id="div-comment-770323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770323">
			September 24, 2009 at 12:20 am</a>		</div>

		<p>I cannot understand how people cannot know this, but then again I learned though the book OLE 2.0, and as far as I can see 99% of programmer seem to just copy/paste/hack as they go along. &nbsp;No one learns.</p>
<p>CoTaskMemAlloc (or rather, IMalloc) is not really about allocating cross-process, it doesn&#8217;t allocate shared memory. It probably just maps to LocalAlloc underneath.</p>
<p>It&#8217;s about having a platform-neutral API that provides 1) alloc 2) free 3) get block size,</p>
<p>all three of which are required by a marshaller.</p>
<p>The OLE API 2.0 is cross platform and is not supposed to be dependent on the Win32, that&#8217;s why it has its own allocation API, and a language neutral one.</p>
<p>It doesn&#8217;t allocate shared memory, there is no shared memory on Windows. </p>
<p>Something that marshals between processes or machine can get the task allocator on one side, get the size of the block with 3) and copy the date in a shared location, then get the allocator on the other side and copy the block back in there. &nbsp;And now the client on the other side can safely free that memory with his task allocator &#8211; even if he&#8217;s using a customized allocator.</p>
<div class=post>[<i>Good point. A lot of people forget that <a href="http://macdevcenter.com/pub/a/mac/2004/04/16/com_osx.html" rel="nofollow">you can do COM on a Mac</a>, and there is no LocalAlloc on OS X&#8230; That&#8217;s one of the reasons for the <a href="http://blogs.msdn.com/oldnewthing/archive/2004/10/05/238050.aspx" rel="nofollow">macro dance</a> you have to do when writing COM interfaces by hand. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-770343">
				<div id="div-comment-770343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Boyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770343">
			September 24, 2009 at 12:32 am</a>		</div>

		<p>OK, can someone hit me over the head with it? Where is the deallocator?</p>
<p>I&#8217;m pretty sure I can point out the allocator; even though it&#8217;s in a language a don&#8217;t know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-770193">
				<div id="div-comment-770193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770193">
			September 23, 2009 at 6:44 pm</a>		</div>

		<p>Maybe it will be an incredibly stupid remark as I don&#8217;t know anything about COM.</p>
<p>Does this CoTaskMemAlloc really solves a problem?</p>
<p>Why is this different from the &#8220;mishmash that we have in plain Win32&#8221;? It really looks like Yet Another Memory Allocator from where I stand (far from the subject remember)</p>
<p>Ok, defining what allocator is *the* COM allocator was really needed, but couldn&#8217;t it have been one of the already existing ones?</p>
<p>It wouldn&#8217;t change the moral of the story here, except that there would be one less allocator in the wild.</p>
<p>It seemed to me that if the returned block of memory had any special property other than &#8220;must be freed with CoTaskMemFree&#8221;, maybe more people on the mailing list would have noticed. &#8220;Dude! Memory you allocate with &#8216;new&#8217; is too coarse and insufficiently lubricated! It can&#8217;t pass module boundaries man!!&#8221;</p>
<div class=post>[<i>See IMallocSpy. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-770363">
				<div id="div-comment-770363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770363">
			September 24, 2009 at 1:51 am</a>		</div>

		<p>@Ian:</p>
<p>eventhough I have never programmed with COM before (i think), the idea is that you should know what the de-allocator is, because of the agreement that COM always uses CoTaskMemAlloc and CoTaskMemFree.</p>
<p>So, implicitly the de-allocator is CoTaskMemFree, because that&#8217;s what was agreed upon when entering the world of COM.</p>
<p>I think Raymod didn&#8217;t add the de-allocator because the people on the mailing list didn&#8217;t know what it was either (they sent the memory to some 3rd pary component maybe).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-770393">
				<div id="div-comment-770393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770393">
			September 24, 2009 at 2:13 am</a>		</div>

		<p>Ian Boyd: in the client, code not shown.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-770423">
				<div id="div-comment-770423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770423">
			September 24, 2009 at 6:40 am</a>		</div>

		<p>Wikipedia has an interesting article on differences between US and UK spelling, but unfortunately &quot;marshalling&quot; isn&#8217;t specifically listed. Many Wikipedia articles, e.g. Travelling salesman problem, have redirects from the wrong^H^H^H^H^H alternate spelling.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-770303">
				<div id="div-comment-770303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770303">
			September 23, 2009 at 11:55 pm</a>		</div>

		<p>Jonathan Pryor: They way cross-process allocation works is that the marsheller in the client frees the memory after it sends it to the server, then the marsheller in the server allocates it in that other process. The memory isn&#8217;t &quot;magically&quot; shared between the two (consider the case where client and server are on different machines).</p>
<p>With that in mind, you still *could* use an existing memory allocation strategy. The reason CoTaskMemAlloc exists is as Raymond said: IMallocSpy (though COM could&#8217;ve been done without IMallocSpy, obviously).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-770723">
				<div id="div-comment-770723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cashto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-770723">
			September 24, 2009 at 4:54 pm</a>		</div>

		<p>My understanding has always been that the reason CoTaskMemAlloc exists was strictly for the in-proc case. &nbsp;If my COM object is served out of DLL 1 and consumed by DLL 2, I can&#8217;t make the assumption that we&#8217;re both using the same implementation of new and delete. &nbsp;</p>
<p>*Most* of the time new just calls into LocalAlloc but it&#8217;s possible that DLL 2 could have been compiled against a custom heap implementation. &nbsp;Thus the need to agree on allocator and deallocator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771403">
				<div id="div-comment-771403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-771403">
			September 25, 2009 at 8:20 pm</a>		</div>

		<blockquote><p>
  &gt; A lot of people forget that you can do COM on a Mac, and there is no LocalAlloc on OS X
</p></blockquote>
<p>I had a look at COM on the Mac. There are two competing implementations, that provided by the module &quot;Microsoft OLE&quot;, where mine is CFM and that done by rolling your own using the CFPlugIn architecture. The later one depends on any plug-in respecting the CFAllocator it was given at factory creation time. So can the real Mac CoTaskMemAlloc stand up?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771653">
				<div id="div-comment-771653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wcoenen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090923-00/?p=16613#comment-771653">
			September 28, 2009 at 8:39 am</a>		</div>

		<p>Maybe it&#8217;s because I&#8217;m not a native speaker, but I&#8217;m confused by the repeated use of the expression &#8220;moral equivalent&#8221; here. I was similarly confused when I read the post on SHCIDS_CANONICALONLY.</p>
<p><a href="http://www.google.be/search?q=define%3A+moral+equivalent" target=_new rel=nofollow rel="nofollow">http://www.google.be/search?q=define%3A+moral+equivalent</a></p>
<p><a href="http://en.wikipedia.org/wiki/Moral_equivalent" target=_new rel=nofollow rel="nofollow">http://en.wikipedia.org/wiki/Moral_equivalent</a></p>
<div class=post>[<i>Moral equivalence = equivalent in a moral sense. I am obviously using the term metaphorically and not literally. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>