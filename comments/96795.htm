<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1305957">
				<div id="div-comment-1305957" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1305957">
			August 10, 2017 at 7:13 am</a>		</div>

		<p>If the processor had a &#8220;one&#8221; register, these could have all been shift operations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1305965">
				<div id="div-comment-1305965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1305965">
			August 10, 2017 at 7:42 am</a>		</div>

		<p>Clearly it is really designed to have constants loaded from a constant pool or the like rather than being constructed from code. I pretty much never have to deal with this level of abstraction, though I find it interesting, so this is intended as a completely serious question: Is going through all these ways of loading constants from code just a fun exercise because it&#8217;s neat, or is there a reason to do it this way rather than just loading memory from a constant pool? It seems that by the time you&#8217;re using multiple instructions to get a value in a register that it has to be easier/faster/etc. to just use one instruction and one constant-pool memory location. But I&#8217;m assuming I must be missing something, and I certainly haven&#8217;t done any performance testing or the like.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1306005">
				<div id="div-comment-1306005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306005">
			August 10, 2017 at 10:25 am</a>		</div>

		<p>Reading constants from memory doesn&#8217;t make the problem go away.  You need to load the address of the constant before you can load the constant, and that&#8217;s the same problem.  Plus now you&#8217;ve got extra code in your compiler to manage the constant pool.</p>
<p>The Alpha was superscalar meaning it could execute more than one instruction in a single clock cycle.  A canonical two instruction sequence for loading a 32-bit constant is something that could easily be recognised by the processor and run in a single cycle.  I don&#8217;t know if the Alpha had this particular optimisation, but it&#8217;s the kind of improvement that could have happened if the design had been continued.</p>
<p>In contrast, memory access is spectacularly slow.  Even if the value is available in L1 cache it will still take several cycles to read it.  If not, it could take hundreds.  Or millions if the memory needs to be paged in.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1306026">
				<div id="div-comment-1306026" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306026">
			August 10, 2017 at 11:28 am</a>		</div>

		<p>Thanks; that&#8217;s starting to make more sense. I guess I assumed that the &#8220;load memory&#8221; instructions could do something more clever (especially if there&#8217;s something like the x86&#8217;s &#8220;segment registers&#8221; so that one could specify loads from a particular place in memory more easily). I can see how at the end of the day, specifying addresses of places to load is roughly the same as specifying the constants in the first place. Does feel like it should only need a couple 32-bit-immediate-load instructions, though (maybe a dedicated instruction to a dedicated register so you don&#8217;t have the problem of both needing bits to specify the register as well as the value to load?). I&#8217;m sure there were good engineering reasons to do things the way they did, though.</p>
<p>I was thinking of &#8220;reading another couple instructions to get the value&#8221; to be roughly equivalent in terms of cache/memory/etc. access as &#8220;reading a value from some other place in memory&#8221;, particularly if the processor has a big enough pipeline to start requesting the memory before it really needs it. I suppose it wouldn&#8217;t be that simple in practice, either, though.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1306055">
				<div id="div-comment-1306055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306055">
			August 10, 2017 at 12:01 pm</a>		</div>

		<p>Traditionally, loading from constant pools like that would be done by putting the constants near the instruction and using a PC-relative address. Loading the address isn&#8217;t really a problem. (I don&#8217;t know that&#8217;s true on Alpha, but I would be very surprised if it&#8217;s not.)</p>
<p>The bigger problem is it doesn&#8217;t really save you anything. You save an instruction, but you&#8217;ve still got the memory access and reduced cache density compared to if it fit into one instruction. But now the constant is separate from the instruction which increases the chance of a cache miss and all that other jazz mentioned above.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-5" id="comment-1306075">
				<div id="div-comment-1306075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306075">
			August 10, 2017 at 1:07 pm</a>		</div>

		<p>We&#8217;ll learn next week that the Alpha does not support PC-relative addressing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1306085">
				<div id="div-comment-1306085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306085">
			August 10, 2017 at 5:30 pm</a>		</div>

		<p>Raymond: I think I finally figured it out. Try this sequence:</p>
<p>BSR at, +1<br />
32 bit constant<br />
LDL (at), rx</p>
<p>BSR at, +2<br />
64 bit constant<br />
LDQ (at), rx</p>
<p>Where this code depends on the Alpha processor not predicting returns based on a call graph (I don&#8217;t see how it can as there is no ret instruction). The linker trampoline depends on BSR is relative so &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-5" id="comment-1306105">
				<div id="div-comment-1306105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306105">
			August 10, 2017 at 10:16 pm</a>		</div>

		<p>The Alpha AXP does have a return address predictor, as we&#8217;ll see tomorrow. It also has a split I-D cache, so loading data from the instruction stream is as slow as any other data access. Though I&#8217;m impressed that you optimized two instructions down to three.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1306246">
				<div id="div-comment-1306246" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306246">
			August 11, 2017 at 3:25 pm</a>		</div>

		<p>I am very surprised! I look forward to seeing the post about that missing PC-relative addressing mode!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1306417">
				<div id="div-comment-1306417" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Les Ismoore</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306417">
			August 14, 2017 at 4:40 pm</a>		</div>

		<p>&#8211;&#8221; Iâ€™m impressed that you optimized two instructions down to three&#8221;<br />
In the true nature of RISC.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1306036">
				<div id="div-comment-1306036" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306036">
			August 10, 2017 at 11:30 am</a>		</div>

		<p>On ARM constant pools are generally placed near the code that uses them (and I&#8217;m pretty sure I&#8217;ve seen similar stuff on compiled x86_64 code with double FP constants); given that you are currently executing code from that region of memory, surely it&#8217;s in some cache (at least, x86 does have separated L1 instruction and data cache, but from L2 down they are shared).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1306116">
				<div id="div-comment-1306116" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306116">
			August 11, 2017 at 1:11 am</a>		</div>

		<p>&gt;Clearly it is really designed to have constants loaded from a constant pool or the like rather than being constructed from code.</p>
<p>No, it&#8217;s clearly designed to have constants loaded from code. However like all cpus with the RISC designation, there are compromises that only make sense when considered as a whole.</p>
<p>Making all instructions the same length means you can&#8217;t load every constant in a single instruction, but programmes don&#8217;t spend all of their time loading constants. On the other hand it simplified the rest of the chip and saved space on the die so that all instructions will be quick.</p>
<p>The original designers wouldn&#8217;t understand why 1 out of 32 single bit loads needing two instructions rather than one, was such a big deal. I would agree with them.</p>
<p>The Alpha was based on an earlier RISC processor called PRISM which was led by Dave Cutler, he left and joined Microsoft when the project was cancelled. I&#8217;ve not looked to see whether PRISM suffered from the same thing, but it would be ironic if Raymonds disgust was caused by someone senior to him at Microsoft :-)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1305975">
				<div id="div-comment-1305975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1305975">
			August 10, 2017 at 8:00 am</a>		</div>

		<p>Just to be clear, that circumlocution is to avoid an automatic sign-extension, right?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1305995">
				<div id="div-comment-1305995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1305995">
			August 10, 2017 at 10:21 am</a>		</div>

		<p>The displacement is a *signed* 16-bits value. Indeed, to add a signed value, it has to be sign-extended. It&#8217;s a bit confusing here because hexadecimal constants are used, which hides that 0x8000 is really negative.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1305996">
				<div id="div-comment-1305996" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deleted' rel='external nofollow' class='url'>Pierre B.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1305996">
			August 10, 2017 at 10:24 am</a>		</div>

		<p>Honestly, I find that bit 31 is unsettling. All other set a single bit. I understand that with 32-bits colored glasses it is correct, but I would not be surprised if it sometimes caused subtle issues?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-2 parent" id="comment-1306015">
				<div id="div-comment-1306015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306015">
			August 10, 2017 at 10:41 am</a>		</div>

		<p>SRL might be problematic.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1306146">
				<div id="div-comment-1306146" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deleted' rel='external nofollow' class='url'>Pierre B.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306146">
			August 11, 2017 at 7:47 am</a>		</div>

		<p>You&#8217;re right, but as other pointed out, the canonical form is always sign-extended, so the compiler always has to assume the high part of the register might contain set bit, so unsigned right shifts have to be synthetised with more than one instruction to mask the unwanted bits shifting in.</p>
<p>I guess it makes sense to always sign-extend for sanity reason and the compiler knows how to compensate every corner cases. They must have had a test harness with all possible pair of operations and check to verify the expected 32-bits results and that canonical form was always resotred at the end.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1306045">
				<div id="div-comment-1306045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306045">
			August 10, 2017 at 11:31 am</a>		</div>

		<p>Raymond calls this &#8220;canonical form&#8221; in Part 1, though I&#8217;m not yet clear on what problems would ensue if one used 32-bit operations on a value that wasn&#8217;t in canonical form.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1306025">
				<div id="div-comment-1306025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306025">
			August 10, 2017 at 11:21 am</a>		</div>

		<p>On other RISC assemblers I know that there are pseudo instructions that load 32 bit constants in a &#8220;smart&#8221; way &#8211; for example, on ARM there&#8217;s the <i>LDR reg, imm</i> that gets exploded into a mov/mvn if it can be expressed as an 8 bit constant + rotate + (possibly) a negation, or puts the value into a literal pool and becomes the corresponding <i>LDR reg, mem</i>.</p>
<p>Did you have anything like this in your Alpha assembler or you had to deal with these oddities by hand?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1306056">
				<div id="div-comment-1306056" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306056">
			August 10, 2017 at 12:03 pm</a>		</div>

		<p>I never wrote Alpha assembly. I only had to debug it, and the disassembler shows the raw instruction. It doesn&#8217;t try to &#8220;prettify&#8221; them. You can read <a href="https://msdn.microsoft.com/en-us/library/aa226705(v=vs.60).aspx" rel="nofollow">the assembler documentation</a> to see what synthetic instructions are available.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1306066">
				<div id="div-comment-1306066" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306066">
			August 10, 2017 at 12:36 pm</a>		</div>

		<p>Not to worry.</p>
<p>On a semi-related note; I confused people when I referred to an instruction as JMP +4. It makes a lot of sense when disassembling but most assemblers don&#8217;t get it (it means 4 relative to next instruction rather than 4 absolute).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1306235">
				<div id="div-comment-1306235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306235">
			August 11, 2017 at 2:03 pm</a>		</div>

		<p>Uh, right, of course. That&#8217;s actually kinda what happened to me with x86 &#8211; having learned it by debugging, I don&#8217;t know most of the assemblers&#8217; tricks, my knowledge is limited to the actual ISA. </p>
<p>By the way, having a quick glance at the instructions I didn&#8217;t find anything like a &#8220;magic load&#8221; (although it&#8217;s possible I didn&#8217;t look hard enough), but I managed to find a &#8220;div&#8221; that has the caveat that destroys some &#8220;t&#8221; registers &#8211; I&#8217;d be curious to see if it generates the &#8220;integer multiply by inverse&#8221; algorithm.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1306256">
				<div id="div-comment-1306256" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306256">
			August 11, 2017 at 6:53 pm</a>		</div>

		<p>This is some kind of magic load: <a href="https://msdn.microsoft.com/en-us/library/aa226676(v=vs.60)" rel="nofollow">https://msdn.microsoft.com/en-us/library/aa226676(v=vs.60)</a>.aspx</p>
<p>Sadly, the documentation doesn&#8217;t describe exactly what it does, though it&#8217;s probably an LDA/LDAH pair.  I&#8217;d give it a go, but the computer I could have tried it on is about fifteen years in the past!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1306095">
				<div id="div-comment-1306095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306095">
			August 10, 2017 at 7:09 pm</a>		</div>

		<p>Couldn&#8217;t the compiler use 64-bit loads for unsigned integers, to avoid the canonicalization issues?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1306106">
				<div id="div-comment-1306106" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170810-00/?p=96795#comment-1306106">
			August 11, 2017 at 12:34 am</a>		</div>

		<p>You can&#8217;t do a 64bit load in a single instruction.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>