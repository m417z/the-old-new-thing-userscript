<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-801753">
				<div id="div-comment-801753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">avek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801753">
			January 8, 2010 at 12:15 pm</a>		</div>

		<p>[Imagine if somebody closed the handle! -Raymond]</p>
<p>The system could duplicate the handle before giving it to application. That&#8217;s what capabilities are for (and the kernel handles are essentially capabilities).</p>
<p>Of course, in that case some apps would not close the duplicated handle, leaking the DIB memory. And DIB section never was a small thing, especially in the days of NT 3.x.</p>
<p>So CreateDIBSection approach seems to be the most reliable: if you want explicit memory control, ask for it explicitly, or you get the safe version.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801773">
				<div id="div-comment-801773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801773">
			January 8, 2010 at 1:14 pm</a>		</div>

		<p>But why use a DIB if you dont want the pointer? </p>
<p>Whats the difference between a DIB created with a null pointer, and a regular old DDB?</p>
<p>In both cases you get to pick the pixel format and dimensions, and in both cases you are not given direct access to the pixel data.</p>
<div class=post>[<i>Um, CreateDIBSection gives you the pointer to the pixel data. If you pass NULL you&#8217;re saying &#8220;Please, GDI, allocate the memory for me and give me a pointer to it.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801833">
				<div id="div-comment-801833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pagetable.com/' rel='external nofollow' class='url'>Myria</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801833">
			January 8, 2010 at 6:20 pm</a>		</div>

		<p>A &quot;section&quot; in Windows NT is a file mapping handle. &nbsp;MapViewOfFile is a thin wrapper around the native NT function NtMapViewOfSection, as an example.</p>
<p>Sometimes this nomenclature difference leaks through to the Win32 side, such as this hSection parameter. &nbsp;Another place is the names of some of the protection flags to CreateFileMapping: &quot;SEC_IMAGE&quot; means to create an image section.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801743">
				<div id="div-comment-801743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801743">
			January 8, 2010 at 11:12 am</a>		</div>

		<p>I don&#8217;t see any reason why the system cannot return that internal handle in dshSection. However, I believe that it does not return it simply because GDI internaly *may* use different memory allocation.</p>
<div class=post>[<i>Imagine if somebody closed the handle! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801853">
				<div id="div-comment-801853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">679</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801853">
			January 9, 2010 at 2:58 am</a>		</div>

		<p>@Joseph Koss:</p>
<p>I may be wrong, but I think you can only select a DDB into a memory device context if it has the same pixel format or is monochrome. CreateDIBSection allocates a DIB in the desired pixel format and, in addition, gives you a handle that you can select into any memory device context or pass to functions that expect a bitmap handle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801863">
				<div id="div-comment-801863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801863">
			January 9, 2010 at 5:56 am</a>		</div>

		<p>For the reason it&#8217;s spelled out in the documentation, see <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/dd183567.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/dd183567.aspx</a>.</p>
<p>CreateDIBSection&#8217;s return value is an HBITMAP, which is in theory all you need to manage the DIB. &nbsp;As it says on the previous line, you can use GetObject to get back a DIBSECTION, which is a BITMAP (with bmBits set to *ppvBits), and some extra information, including the hSection. &nbsp;However, given an HBITMAP to a DIB, you can&#8217;t assume that hSection is set.</p>
<p>Imagine you&#8217;re using a library that wraps CreateDIBSection, and only returns an HBITMAP. &nbsp;If it&#8217;s your responsibility to call DeleteObject, you need to check whether hSection is NULL and skip the subsequent call to CloseHandle.</p>
<p>(In other words, it&#8217;s not wise for a library to leave cleanup of a DIB to the client.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801873">
				<div id="div-comment-801873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801873">
			January 9, 2010 at 12:32 pm</a>		</div>

		<p>[Imagine if somebody closed the handle! -Raymond]</p>
<p>Well, I can give an hSection to the system and close it afterwards. The net effect would be the same, wouldn&#8217;t it?</p>
<p>Like waleri I think that maybe somebody didn&#8217;t want to guarantee via the API that they would always use a traditional keylock and not a smart card.</p>
<div class=post>[<i>The kernel can dup the handle passed in. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801893">
				<div id="div-comment-801893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801893">
			January 10, 2010 at 6:26 am</a>		</div>

		<p>[The kernel can dup the handle passed in. -Raymond]</p>
<p>The kernel can dup the handle passed out too, as noted by avek.</p>
<p>Granted, it&#8217;s all guesswork on your and our part.</p>
<p>Still, I like the &#8220;liability avoidance&#8221; scenario better :)</p>
<div class=post>[<i>Duping the handle on the way out means that applications can use offsets beyond the one used by the DIB section to modify <u>other</u> bitmaps! (GDI might sub-allocate one giant section for multiple bitmaps.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801903">
				<div id="div-comment-801903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801903">
			January 10, 2010 at 5:42 pm</a>		</div>

		<p>[It&#8217;s surprising how often people quietly assume that systems are built upon clairvoyance.]</p>
<p>I&#8217;d say that instead of this assumption, people always try to assume the APIs are built in the most convenient way, that whatever they want to perform can be done in single line of code (no matter how unreasonable it seems).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>