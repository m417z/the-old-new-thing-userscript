<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (45)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-168063">
				<div id="div-comment-168063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168063">
			April 27, 2004 at 7:23 am</a>		</div>

		<p>I may be missing something, but that article hardly seems to explain why C# doesn&#8217;t have const.  It says that the CLI spec doesn&#8217;t allow for a &#8216;const&#8217;-style modifier, and that that leaves us with no good way of implementing that feature of C++.</p>
<p>It doesn&#8217;t seem to put forward any arguments to support the initial decision.  To be honest, I&#8217;m not aware of any.  const is an immensely useful error-catching feature, and it should be retrofitted to the BCL (with all the underlying machinery required to achieve this).</p>
<p>const correctness is an immensely useful correctness-assisting feature.</p>
<p>Contrary to Eric Gunnerson&#8217;s claims, I&#8217;ve not had any negative knock-on effects through using const in large projects, and it&#8217;s not the least bit clear to me how such things could arise.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168073">
				<div id="div-comment-168073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168073">
			April 27, 2004 at 7:28 am</a>		</div>

		<p>Okay, whoever wants to break millions of lines of VB code raise your hand.</p>
<p>Remember, Mort doesn&#8217;t care about &quot;beauty&quot; or &quot;purity&quot;. Mort just wants to get his job done.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168083">
				<div id="div-comment-168083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168083">
			April 27, 2004 at 7:47 am</a>		</div>

		<blockquote><p>
  Mort doesn&#8217;t care about &quot;beauty&quot; or &quot;purity&quot;. Mort just wants to get his job done.</p>
<p>Yeah, and I have to clean up after mort. Enforce some discipline, please. Besides, it&#8217;s not like someone who writes &quot;this.x=x&quot; all over the place is going to blink at casting const away.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168093">
				<div id="div-comment-168093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168093">
			April 27, 2004 at 7:57 am</a>		</div>

		<p>Everything you make Mort do is viewed by Mort as an obstacle to getting his job done.</p>
<p>And what&#8217;s the point of const if you allow people to cast it away?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168113">
				<div id="div-comment-168113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168113">
			April 27, 2004 at 8:03 am</a>		</div>

		<blockquote><p>
  Everything you make Mort do is viewed by Mort as an obstacle to getting his job done. </p>
<p>Screw Mort. Every piece of structure and rigor that makes a program capable of lasting more than a month is viewed as an obstacle to getting his job done, because he only cares about the task at hand, not the people who have to do the next task, or the one after that.</p>
<p>&gt; And what&#8217;s the point of const if you allow people to cast it away?</p>
<p>The alternative is that you either use it everywhere or nowhere and, with third party code, that&#8217;s not going to happen.</p>
<p>Mort is a lost cause &#8211; allow him to muddle around and do write his throwaway code, but cater to the people who write code that will still be here in 30 years, and that, sadly includes Mort.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168123">
				<div id="div-comment-168123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.die.de/blog' rel='external nofollow' class='url'>thomas woelfer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168123">
			April 27, 2004 at 8:08 am</a>		</div>

		<p>Raymond,</p>
<p>why is it that the introduction of a &#8216;const&#8217; modifier to the cli would break a million lines of vb code ?</p>
<p>i&#8217;m not sure i understand that implication.</p>
<p>WM_QUERY<br />
<br />thomas woelfer</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168133">
				<div id="div-comment-168133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168133">
			April 27, 2004 at 8:25 am</a>		</div>

		<p>Cooney: Like it or not, 90% of all programmers are Mort. They&#8217;re not computer scientists and they are NOT stupid. Professional Morts are infrastructure guys who write scripts to get their job done. To them, computer programming is not an art. It is a skill. Tell them to screw off and you lose pretty much every IT department in the world. </p>
<p>Thomas: If you introduce &quot;const&quot;, then VB code that interops with const will break since VB doesn&#8217;t have const. If you go ahead an add const, then you have to retrofit existing VB code to be compatible with it. </p>
<p>Sub CheckNetworkCard(o As ManagementObject)<br />
<br />blah blah<br />
<br />End Sub </p>
<p>&#8216; check all the network cards<br />
<br />dim o as ManagementObject<br />
<br />for each o in _<br />
<br />new ManagementObjectSearcher( _<br />
<br />&quot;SELECT * FROM Win32_NetworkAdapterConfiguration&quot;) _<br />
<br />.Get()<br />
<br />CheckNetworkCard(o)<br />
<br />next </p>
<p>Oops, this doesn&#8217;t work because the ManagementObjectCollection is now a collection of &quot;const&quot; management objects rather than mutable objects, causing the call to CheckNetworkCard fail with the error &quot;passing const to non-const&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168143">
				<div id="div-comment-168143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">confused soul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168143">
			April 27, 2004 at 8:29 am</a>		</div>

		<p>Cooney, I did not follow the &quot;this.x=x&quot; reference. Could you please explain?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168153">
				<div id="div-comment-168153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Trey Nash</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168153">
			April 27, 2004 at 8:30 am</a>		</div>

		<p>Seems to me that the CLI could take the same approach as it has with many other things.  Specifically, introduce &#8216;const&#8217; into the CLI but not force it for CLS.  Then, you could have languages implement it if they please.</p>
<p>I can&#8217;t see how that would be completely different than approaches we took in the past for creating COM components that were to be used with VB.  We had to be very specific when designing the interface.  Handling &#8216;const&#8217; in the CLI in this manner would product a situation very similar.  One would not be able to create interfaces/classes for VB consumption that use &#8216;const&#8217;.</p>
<p>Sounds fine with me.  :-)</p>
<p>   -Trey</p>
<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
<br />Trey Nash<br />
<br />Principal Software Engineer<br />
<br />Macromedia, Inc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168163">
				<div id="div-comment-168163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168163">
			April 27, 2004 at 8:40 am</a>		</div>

		<p>When you quote an article with this justification: &quot;My gut feeling is that a majority of C++ applications do not use const well, but I have no real data and base this on informal conversations with students when I use to teach the language.&quot;</p>
<p>Yeah, students are really great at coding, especially in teams.  I think that&#8217;s a horrible reason to keep something out of a language.</p>
<p>In my personal experience, in team coding, const has stopped me (and lots of others on my team) from making horrible design decisions and hacks.  And while you can cast the const-ness away, ina decently managed environment, someone can see that in a checkin and find out why you felt you needed to do this.</p>
<p>Anyway, all of these arguments against const-ness make the point about const-ness being hard to put into a project.  Yes, it is.  But once it&#8217;s in place, it really helps a lot.</p>
<p>Besides, const-ness has been in C++ for awhile and is implemented in the STL.  You can interoperate with const-supported libraries FINE without worrying so much about your own const correctness.  It&#8217;s only when things in the main application support const-correctness that problems occur in projects.  So to answer your question:</p>
<p>&quot;And what&#8217;s the point of const if you allow people to cast it away?&quot;</p>
<p>More type safety, and safety in general.  Just because you CAN turn it off doesn&#8217;t mean it should never be allowed to be turned on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168193">
				<div id="div-comment-168193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.die.de/blog' rel='external nofollow' class='url'>thomas woelfer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168193">
			April 27, 2004 at 8:52 am</a>		</div>

		<p>Raymond,</p>
<p>regarding your vb sample: i don&#8217;t see why this is a reason to not support constness at all. now, granted that problems might turn up all over the place incase constness was used in the bcl &#8211; then don&#8217;t use constnes in the bcl.</p>
<p>why is this a reason to not support constness in c# at all? </p>
<p>if you&#8217;re not going to use constness in the bcl, thats ok with me. but thats not a reason to deny the use of const for everyone, everywhere.</p>
<p>WM_MY0.02$<br />
<br />thomas woelfer</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168203">
				<div id="div-comment-168203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168203">
			April 27, 2004 at 9:13 am</a>		</div>

		<p>&quot;Okay, whoever wants to break millions of lines of VB code raise your hand. &quot;<br />
<br />Why would it break any?  I&#8217;m not proposing const be default (not yet, at least).  Since everything will be mutable by default, it should have minimal impact on current code.</p>
<p>&quot;Remember, Mort doesn&#8217;t care about &quot;beauty&quot; or &quot;purity&quot;. Mort just wants to get his job done. &quot;<br />
<br />I want to get my job done too.  Fixing other people&#8217;s cock ups that the compiler should have cought (would have caught in C++) hinders me.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168213">
				<div id="div-comment-168213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168213">
			April 27, 2004 at 9:14 am</a>		</div>

		<p>thomas: I guess the question is how important interop is to you. As an OS person, interop is pretty high on my list of important properties of a platform.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168223">
				<div id="div-comment-168223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168223">
			April 27, 2004 at 9:18 am</a>		</div>

		<p>And frankly, fuck Mort.  Mort is being outsourced to India.  I don&#8217;t give a toss about him.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168233">
				<div id="div-comment-168233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168233">
			April 27, 2004 at 9:19 am</a>		</div>

		<p>That&#8217;s great customer focus you&#8217;ve got there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168273">
				<div id="div-comment-168273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">B.Y.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168273">
			April 27, 2004 at 9:37 am</a>		</div>

		<p>It&#8217;s a good mental concept, but I don&#8217;t see a practical need for const. But still, can someone explain in layman&#8217;s terms why there&#8217;s no const in C# ?</p>
<p>Stan Lippman&#8217;s article is confusing and sounds very academic. It probably mades sense to language designers only. When people talk about const, they&#8217;re not thinking about &quot;transitive closure&quot;, whatever that is.</p>
<p>And after reading it, I&#8217;m not sure if he&#8217;s for or against const.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168283">
				<div id="div-comment-168283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168283">
			April 27, 2004 at 10:22 am</a>		</div>

		<p>He&#8217;s for adding const ness, saying that the design decision of not adding it is short sighted, like the earlier C++ design decisions (such as putting this at the end of a class).</p>
<p>Basically the &quot;transitive closure&quot; basically means keeping const-ness throughout an entire tree of operations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168303">
				<div id="div-comment-168303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.die.de/blog' rel='external nofollow' class='url'>thomas woelfer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168303">
			April 27, 2004 at 10:34 am</a>		</div>

		<p>Raymond,</p>
<p>&gt;&gt; I guess the question is how important interop is to you</p>
<p>well i disagree: i don&#8217;t think this is the question. :-)</p>
<p>infact, the questions seems to be if it is desirable to force developers to write code that by any means must be interoperable, thus making it impossible to use a programming construct that has proven to be of value for quite some time. </p>
<p>if a developer chooses to use a specific programming construct and thus creates code that breaks interop with some languages, that should be her decision alone.</p>
<p>if however, the language does not allow for him to use such a construct, something is wrong.</p>
<p>i subscribe to interop beeing a great goal for you guys. however, knowing that my code will never be called from any developer outside my company, that goal isn&#8217;t necessarily mine.</p>
<p>if everything .net has to be interoperable with everything else .net &#8211; no matter who wrote what part of what code &#8211; than why support multiple languages in the first place? </p>
<p>well, i guess we won&#8217;t find a common point of view here ;) &#8211; that nonwithstanding, pls. let me thank you for your very helpful blog anyways.</p>
<p>WM_CHEERS<br />
<br />thomas woelfer</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168313">
				<div id="div-comment-168313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168313">
			April 27, 2004 at 10:36 am</a>		</div>

		<p>I recently inherited some java code that uses this construct (among other sins). Many classes are constructed like this:</p>
<p>class Foo {<br />
<br />  int x;</p>
<p>  Foo(int x) {<br />
<br />    this.x=x;<br />
<br />  }<br />
<br />}</p>
<p>This is ugly, but it works. The problem comes when the class grows large and x is moved, renamed, or removed. This.x=x still compiles, but it does nothing, and the careless programmer won&#8217;t notice it among 2000 lines. When I got the code, there were places where this was occuring, and I found out about it because I went through the codebase and cleaned up about 500 warnings, leaving stuff like this. X had been renamed to x&#8217; &#8211; something similar to x, but not x, but the code (mostly) worked, so I couldn&#8217;t just change it, as it might break something. It&#8217;s been a few months now, and the code is getting better. Soon I will be able to determine whether I can remove this.</p>
<p>Re: customer focus, I want tools that allow me to write better code and make my job easier. Adding const to an interface doesn&#8217;t require the the caller support it, and using a non-const interface when I have const objects requires that I either cast, or write a compatibility layer. I prefer this to not having const, as I have a better chance of isolating bugs to some other guy&#8217;s code. What I&#8217;d really like to do in the ugly case is write some code that casts to const and then checks for modifications (at least in debug mode). How that would work is rather thorny.</p>
<p>Oh yeah, and the much maligned Mort in this case is originally from China, according to the never sufficiently damned source control software.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168323">
				<div id="div-comment-168323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168323">
			April 27, 2004 at 10:41 am</a>		</div>

		<p>Okay, so you&#8217;re all arguing that &quot;const&quot; could be put into the &quot;C#-specific&quot; part of the CLR. If you&#8217;re willing to accept that you&#8217;re going to do a boatload of const-casting then good for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168333">
				<div id="div-comment-168333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sean</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168333">
			April 27, 2004 at 10:49 am</a>		</div>

		<p>I remember the topic of the different theoretical developer roles at MS awhile ago &#8212; is there a place to get more info on these roles? it&#8217;s great stuff ;)</p>
<p>I like the discussion of Mort and specifially the post that contained: &quot;Every piece of structure and rigor that makes a program capable of lasting more than a month is viewed as an obstacle to getting his job done, because he only cares about the task at hand, not the people who have to do the next task, or the one after that.&quot; </p>
<p>Unfortunately the flip side of Mort is that -because- Mort programs with a Hammer, places where the lack of structure and rigor introduce hard-to-find bugs, Mort then tends to blame the makers of his development environment (in this case, MS) for creating such a POS product&#8230;</p>
<p>it&#8217;s a viscous circle&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168353">
				<div id="div-comment-168353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168353">
			April 27, 2004 at 10:59 am</a>		</div>

		<p>I like this:</p>
<p>public class Foo {<br />
<br />  private int x;</p>
<p>  public Foo(int x) {<br />
<br />    this.x = x;<br />
<br />  }<br />
<br />}</p>
<p>We could always go back to prefixing everything with &quot;m_&quot; or &quot;_&quot;.</p>
<p>public class Foo {<br />
<br />  private int m_x;<br />
<br />  public Foo(int x) {<br />
<br />    this.m_x = x;<br />
<br />  }<br />
<br />}</p>
<p>I would think that if people are deleting, or renaming parameters to methods/constructors, then they would bother to see if the particular parameter in question is being used within the method body.<br />
<br />I think this.x = x, isnt ugly, rather elegant. It draws a direct correlation between the parameter, the the variable it is being assigned to. I religously use the &quot;this&quot; keyword, but in the last 2 years of C# programming I have never had an incident where this.x = x, has cuased my problems.</p>
<p>Rather this one messes me up:</p>
<p>public class Foo {<br />
<br />  private int x;<br />
<br />  public int X {<br />
<br />    get { return this.X; }<br />
<br />    set { this.x = value; }<br />
<br />  }<br />
<br />}</p>
<p>See the infinite loop in that one hehe. What makes it worse, is that sometime Intellisense get reall happy about autocomplete, and inserts X, when you want x.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168363">
				<div id="div-comment-168363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.die.de/blog' rel='external nofollow' class='url'>thomas woelfer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168363">
			April 27, 2004 at 11:06 am</a>		</div>

		<p>Nathan,</p>
<p>&gt;&gt; I think this.x = x, isnt ugly, rather elegant</p>
<p>WM_AGREED<br />
<br />thomas woelfer</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168393">
				<div id="div-comment-168393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168393">
			April 27, 2004 at 11:17 am</a>		</div>

		<p>Whether you like this.x=x or not, consider this: you now have two variables with the same name, distinguished by scope. If one changes, then odds are that you won&#8217;t generate an error. If you use the m_ prefix approach, then that same change won&#8217;t compile. I prefer this way because it means that my code tends to behave by default &#8211; this particular programming error is caught by the compiler at the time of the commision.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168403">
				<div id="div-comment-168403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sean</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168403">
			April 27, 2004 at 11:32 am</a>		</div>

		<p>I used to be a this.x=x programmer until I started doing <em>x = x which is far more elegant IMHO&#8230;</p>
<p>and yes, I&#8217;d regularly get those stack overflow exception errors since I&#8217;d have those properties like Nathan explains.. </p>
<p></em> fixes that and makes me more productive..;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168413">
				<div id="div-comment-168413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168413">
			April 27, 2004 at 11:47 am</a>		</div>

		<p>Don&#8217;t worry.  I&#8217;m sure that the next &quot;ultimate solution&quot; &quot;be all and end all&quot; solution to every programming problem on the face of the earth will actually do this right.</p>
<p>Or maybe the one after that.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168463">
				<div id="div-comment-168463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aarrgghh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168463">
			April 27, 2004 at 12:39 pm</a>		</div>

		<p>Raymond says:<br />
<br />&gt; &quot;And what&#8217;s the point of const if you<br />
<br />&gt; allow people to cast it away?&quot;</p>
<p>In C++, you can cast away ANY part of the type system, not just const. C++ static type checking is optional in general. You can #undef STRICT, too. Does that mean STRICT is pointless? Nope. </p>
<p>It&#8217;s more compelling to argue that dealing with const can be a pain in the ass, but in a world full of buffer overruns and other miseries brought on by Convenient Coding Practices, I&#8217;d think people would realize that convenience for the programmer can equal massive inconvenience for the user. Those of us who sell the stuff for money actually have an obligation to get it right. Mort&#8217;s a different story: He IS a user, so he can sacrifice quality for convenience however he likes. He&#8217;s not programming; he&#8217;s playing make-believe, like a kid on an amusement park ride pretending to be an astronaut. If MS products spoil the illusion for him, he&#8217;ll spend his money with a vendor who&#8217;ll give him a more satisfactory play experience. </p>
<p>With programming languages, one size does not fit all and it never will. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168483">
				<div id="div-comment-168483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eisbaer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168483">
			April 27, 2004 at 12:56 pm</a>		</div>

		<p>Who the hell is Mort??</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168533">
				<div id="div-comment-168533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aarrgghh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168533">
			April 27, 2004 at 1:52 pm</a>		</div>

		<p>Python?! </p>
<p>JavaScript would be perfect if there were an implementation with I/O as convenient as Perl, and Perl would be perfect if it were as friendly to data structures as JavaScript. </p>
<p>Thank God there&#8217;s enough interpreted languages to go around.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168583">
				<div id="div-comment-168583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason G</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168583">
			April 27, 2004 at 3:50 pm</a>		</div>

		<p>I can&#8217;t seem to find the article right now, but it was from a while back and talked about why const wasn&#8217;t in C#/CLR.</p>
<p>The story I remember was that a large chunk of developers took const as a guarantee and made security choices based on const presence.</p>
<p>Once that error in judgment was found out, const got pulled to prevent more people from assuming that const guaranteed you anything.</p>
<p>In other words, the risk of a security hole was considered worse than not including const.</p>
<p>Bottom line, do you want const to mean something? If so, it has to be supported by the CLR so that it can&#8217;t be violated (that is the point behind managed code, correct?)  Making const inviolable is actually really hard to do. It can&#8217;t be simple compile time checking, it has to do runtime checking also.</p>
<p>If you want it in C#, work on getting it added to the CLR first.</p>
<p>There are also lots of other gotchas.  For instance, there are fundamental differences between C++ and C#/managed code in how things are stored.</p>
<p>For instance, if the object I pass in as a const parameter returns a property that is another object, is that returned object a const object also?</p>
<p>Does it depend on whether it is a field in the object begin returned?</p>
<p>Is the const&#8217;ness a property of each and every reference made on an object, requiring the object to store a list of which references are (not) const and somehow know how it&#8217;s being accessed?</p>
<p>It just gets really, really ugly.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168243">
				<div id="div-comment-168243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.popcornfilms.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168243">
			April 27, 2004 at 9:26 am</a>		</div>

		<p>The .NET team was always somewhat&#8230; schizoid on whether or not they wanted to actually have real compatibility with VB.</p>
<p>The changes made to create VB.NET were a radical enough of a change from VB6 (and prior versions of the language) that there should have been no question of compatibility at all (in which case, const should have been supported). </p>
<p>However, the .NET team was (seemingly) going through some upper management issues at the time &#8211; certainly in terms of making a decision and sticking with it &#8211; and on a weekly (if not daily) basis, the decision as to whether or not design errors in VB6&#8217;s framework should be duplicated for VB.NET.</p>
<p>A stunning example of this is the Masked Edit control &#8211; which, if you look at the VB6 one, is absolutely fine, except that its behavior is not defined for non-Latin languages (or combining diacritics), and the fact that the set of fields you can specify are assymmetrical (prizes for finding the one case which isn&#8217;t handled in the field specificatiosn).</p>
<p>People went back and forth several times on whether or not it should be absolutely 100% backwards compatible with the VB6 control (warts and all), or whether it should be made more compatible &#8211; all to satisfy the old VB6 developer who ended up not being the target customer anyway. Combine absentee PMs with a politically-green software developer (me), and hey presto &#8211; the control didn&#8217;t even end up shipping. But right until the end, it was flipping and flopping between &quot;Do it like VB6&quot; and &quot;Do it right&quot;.</p>
<p>(Mind you, there were several other examples of sloppiness like this and other abortive meanderings in the design of the framework &#8211; the whole VSForms thing being a prime example). </p>
<p>C# supports features which VB doesn&#8217;t &#8211; that&#8217;s why the CLR is the &quot;***common**** language runtime&quot; &#8211; it&#8217;s a subset which all of the supported languages can talk to. So there&#8217;s nothing per-se stopping C# from having a proper const modifier. But utimately, the moment the choice was made to break with existing VB code, that choice should have been carried out to its logical conclusion. If we&#8217;re still talking about &quot;hey, it&#8217;ll break VB developers&#8217; code&quot;, then obviously there&#8217;s a mixed message on that subject getting out there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168253">
				<div id="div-comment-168253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168253">
			April 27, 2004 at 9:26 am</a>		</div>

		<p>It hardly helps MS to have the likes of Mort cobbling together crappy buggy applications.</p>
<p>Mort&#8217;s const correctness errors are *bugs*.  It might be that his language doesn&#8217;t catch those bugs.  That doesn&#8217;t mean that they don&#8217;t exist.</p>
<p>And frankly, this entire line of argument is idiotic, as VB has undergone breaking change after breaking change after breaking change.  You&#8217;ve never cared about Mort before.  Why start now?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168293">
				<div id="div-comment-168293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://members.cox.net/menright1' rel='external nofollow' class='url'>ATZ Man</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168293">
			April 27, 2004 at 10:27 am</a>		</div>

		<p>It sounds like a redux of how edit-and-continue was not &quot;seen&quot; to be important, even though it can only be implemented in the core by MSFT (can&#8217;t be implemented by 3rd party add-on). </p>
<p>I don&#8217;t understand how VB interop is a breaker for const. Firstly, we&#8217;ve had C++ coders supplying DLL&#8217;s for use from VB for &quot;eons&quot;, so obviously a language with const in it is practically interoperable with one that doesn&#8217;t have it, for some definition of &quot;practical.&quot;</p>
<p>Secondly, if there is some concern about system libraries being used by const and in-const-ant languages alike, there is **obviously** at least one viable way to make that work, and the minimal effort there is to have non-const-correct system libraries. You could even add a functioning const keyword to VB.NET at the same moment as making non-const-correct libraries. </p>
<p>A pragmatic strategy consisting of enabling const in the system and the languages, while leaving the libraries as they are, would allow Morts to keep dodging malpractice suits with their broken code while simultaneously allowing professionals to practice with the care they want to take.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168633">
				<div id="div-comment-168633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168633">
			April 27, 2004 at 5:39 pm</a>		</div>

		<p>If you are happy with an ineffective const, you can always make your own ConstAttribute and slap it on anything you want.</p>
<p>I wonder how many people would have complained if C# did have const but also allowed you to modify const objects (by casting away const). I suspect a lot of people would have said, &quot;Stupid Microsoft. Here was their big chance to fix one of the biggest bugs in C++ and they blew it. Const is useless. Would have been better if it had never been born.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168663">
				<div id="div-comment-168663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew Lock</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168663">
			April 27, 2004 at 6:22 pm</a>		</div>

		<p>Do people really believe stricter languages will get Mort writing better code? I have maintained OO code written by Mort and frankly it would have been better if Mort had just stuck to old procedural code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168703">
				<div id="div-comment-168703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason G</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168703">
			April 27, 2004 at 8:05 pm</a>		</div>

		<p>Nathan,</p>
<p>  It&#8217;s not that they don&#8217;t want to give programmers the tools to be more expressive in their intent, but they do have a short amount of time to get their features in.</p>
<p>  As Raymond said, you can still have a ConstAttribute that can target parameters/methods, and then code verification tools to do checks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168503">
				<div id="div-comment-168503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168503">
			April 27, 2004 at 1:15 pm</a>		</div>

		<p>Mort should be using a language that is dynamically typed, so he doesn&#8217;t have to worry about declaring things const or not. A naive programmer isn&#8217;t going to be able to write super-efficient code anyway so a bit more run-time type checking isn&#8217;t going to hurt. Besides which, dynamically typed languages like Python are *fun*.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168723">
				<div id="div-comment-168723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wondering</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168723">
			April 27, 2004 at 9:44 pm</a>		</div>

		<p>const relies on external libraries using it appropriately in prototypes. Otherwise, you&#8217;re left wondering &quot;was the lack of const and oversight or is there a chance that it may change the argument in some circumstances&quot;.</p>
<p>One example, off the top of my head, CLSIDFromString(). Anyone seen the source code?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168603">
				<div id="div-comment-168603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168603">
			April 27, 2004 at 5:23 pm</a>		</div>

		<p>Why allow static declarations at file scope when they can always be evaded by passing a pointer?</p>
<p>Why allow variables to have types when the type system can always be evaded by use of *(other_type*)&amp; ?</p>
<p>Why have while and for statements when if and goto can do them all?</p>
<p>Why allow variables to have long names when that makes it possible for names to say the opposite of the actual meaning of the variable?</p>
<p>Etc.</p>
<p>Answer:  Because it is beneficial to allow good programmers to use those features for their intended purposes.  Good programmers appreciate the help in catching their unintended mistakes.</p>
<p>Yes C&#8217;s definitions (more than three actually) for the keyword &quot;const&quot; are screwed up, but proper use brings great benefits.</p>
<p>By the way VC header files define all kinds of Microsoft macros that equate to very little in the end.  VC headers could add stuff like this:<br />
<br />#define readonly const<br />
<br />#define immutable const<br />
<br />Bugs will still be possible (a poor programmer&#8217;s practice or good programmer&#8217;s typo could still put readonly on a variable or put immutable on the pointed-to type of a pointer parameter).  But the intended documentary purpose would be there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168743">
				<div id="div-comment-168743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">byron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168743">
			April 28, 2004 at 1:54 am</a>		</div>

		<blockquote><p>
  Who the hell is Mort?? </p>
<p><a target="_new" href="http://weblogs.asp.net/ericlippert/archive/2004/03/02/82840.aspx" rel="nofollow">http://weblogs.asp.net/ericlippert/archive/2004/03/02/82840.aspx</a></p>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168753">
				<div id="div-comment-168753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168753">
			April 28, 2004 at 2:35 am</a>		</div>

		<p>&quot;Okay, so you&#8217;re all arguing that &quot;const&quot; could be put into the &quot;C#-specific&quot; part of the CLR. If you&#8217;re willing to accept that you&#8217;re going to do a boatload of const-casting then good for you. &quot;</p>
<p>No.  It can only work properly if put into the base infrastructure.  It needs to be in the BCL.  It needs to be in the metadata.  It needs to be everywhere.</p>
<p>And it&#8217;s not clear to me why there&#8217;ll be a boatload of const casting.  I don&#8217;t have a boatload of const casting in C++; the only time I const_cast is when interoperating with legacy C void*-using APIs; as I normally const my locals (just because they&#8217;re called variables doesn&#8217;t mean they&#8217;re meant to vary) occasionally a const_cast is required.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168833">
				<div id="div-comment-168833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168833">
			April 28, 2004 at 8:52 am</a>		</div>

		<blockquote><p>
  &gt; I suspect a lot of people would have said, &quot;Stupid Microsoft. Here was their big chance to fix one of the biggest bugs in C++ and they blew it. Const is useless. Would have been better if it had never been born.&quot; &lt;&lt;</p>
<p>Justifying arguments with hypothetical &quot;well people would bitch the other way too&quot; doesn&#8217;t really help.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168853">
				<div id="div-comment-168853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-168853">
			April 28, 2004 at 9:09 am</a>		</div>

		<p>Well, seeing as the commenters here can&#8217;t even agree on what &quot;const&quot; should do, it seems clear that whatever decision was taken, somebody&#8217;s going to write that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-170493">
				<div id="div-comment-170493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/korbyp' rel='external nofollow' class='url'>Korby Parnell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-170493">
			May 3, 2004 at 8:58 am</a>		</div>

		<p>That&#8217;s not synchronicity, that&#8217;s a meme.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-726793">
				<div id="div-comment-726793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lukehalliwell.wordpress.com/2009/04/16/the-trouble-with-state/' rel='external nofollow' class='url'>The trouble with state &laquo; Luke Halliwell&#8217;s Weblog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040427-00/?p=39623#comment-726793">
			April 17, 2009 at 1:23 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://lukehalliwell.wordpress.com/2009/04/16/the-trouble-with-state/" rel="nofollow">http://lukehalliwell.wordpress.com/2009/04/16/the-trouble-with-state/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>