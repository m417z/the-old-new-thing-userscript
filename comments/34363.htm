<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-drpizza even thread-even depth-1" id="comment-302123">
				<div id="div-comment-302123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dr+Pizza' rel='external nofollow' class='url'>Dr Pizza</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302123">
			August 31, 2005 at 10:30 am</a>		</div>

		<p>&quot;One little-known fact about the pigeonhole principle is that it has nothing to do with pigeons&quot;</p>
<p>Erm.  Yes it does.  The desk compartments are named for their similarity to the compartments in pigeon lofts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-302143">
				<div id="div-comment-302143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DavidK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302143">
			August 31, 2005 at 10:38 am</a>		</div>

		<p>Pigeonhole may mean a small compartment, but it is derived from postal uses, in which posts is deposited in a small compartment during sorting.</p>
<p>This itself is derived from pigeons, as pigeon messenger services is the link to postal services. Messenger pigeons belonging to various districts would be housed in one system of compartments, and you would deposit your message in the compartment, and the pigeon keeper would attach it to the bird and release it.</p>
<p>So it is derived from pigeons, just indirectly.</p>
<p>Your statement remains me of one made at the Office 12 TAP recently. In regards to Dog Food #4 of the build of Office it was remarked by the presenter (Head of Office, used to be Head of Project, forgotten his name&#8230; Chris Cappasella perhaps?) that he had no idea where &quot;Dogfood&quot; came from, and he appears to have mis-applied it anyway.</p>
<p>Dogfooding comes from Mars Confectionary in the UK. Whereby everyday the management and board members would go to the factory floor and sample each and every product as a quality test. At the time they also made dog food, and they would sample that too&#8230; thus was coined the phrase &quot;Eat your own dog food&quot;, and from that comes &quot;Dogfood&quot; as a general term meaning to consume your own output, in coding it should ideally mean that Mr Gates would also use Office 12, freak about things that broke and get them fixed before they&#8217;re sold.</p>
<p>Some etymology for you :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-302153">
				<div id="div-comment-302153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302153">
			August 31, 2005 at 11:13 am</a>		</div>

		<p>Duh on me. It comes ultimately from pigeons but indirectly&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-302173">
				<div id="div-comment-302173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DavidK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302173">
			August 31, 2005 at 11:36 am</a>		</div>

		<p>No worries&#8230; how&#8217;s your Swedish coming along btw?</p>
<p>That was actually how I first stumbled onto your blog even though I read a fair few of the MSDN blogs, work for a partner, etc.</p>
<p>I&#8217;m just trying the Level 1 Rosetta Stone course, I&#8217;ll let you know how it goes if you like.</p>
<p>My attempts at evening class were terrible, I could blame the teacher for not knowing the grammar or etymology, but that&#8217;s just making excuses.</p>
<p>Have you ever checked out Francis Strand? <a rel="nofollow" target="_new" href="http://www.francisstrand.blogspot.com/" rel="nofollow">http://www.francisstrand.blogspot.com/</a> That helps, but maybe not as much as exposure does.</p>
<p>My big problem now is how to combine cycling (which I do in London) with living in Gothenburg (which I hopefully will do very shortly). It&#8217;s a problem because unlike sidewalks that attack momentarily, they suffer from severe winters that attack for about 4 months of the year. Might end up hacking a heated blanket into some sort of biking suit and powere by dymo!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-302183">
				<div id="div-comment-302183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudo Masochist</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302183">
			August 31, 2005 at 11:49 am</a>		</div>

		<p>My God, somebody break out the bubbly!  This is the first Raymond Chen technical topic that I not only understood completely, but knew everything that you wrote before reading the article.</p>
<p>I guess even a blind squirrel finds a nut every once in a while. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-302193">
				<div id="div-comment-302193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://ww.apptranslator.com/blog' rel='external nofollow' class='url'>Serge Wautier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302193">
			August 31, 2005 at 11:57 am</a>		</div>

		<p>The English language is much more poetic than the French language for this matter. In French, this is known as &#8216;le principe des tiroirs&#8217;, which translates to &#8216;the drawers principle&#8217;. Much less poetic than this pigeon story !</p>
<p>BTW, Pseudo Masochist, did you also know the etimology of pigeonhole ? ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-302213">
				<div id="div-comment-302213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">michkap</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302213">
			August 31, 2005 at 12:04 pm</a>		</div>

		<p>Reminds me if a post of mine explaining why GetHashCode() in the .NET Framework was not really the right solution for string indexes&#8230;.</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/michkap/archive/2005/02/18/376009.aspx" rel="nofollow">http://blogs.msdn.com/michkap/archive/2005/02/18/376009.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-302243">
				<div id="div-comment-302243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://terrainformatica.com' rel='external nofollow' class='url'>Andrew Fedoniouk</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302243">
			August 31, 2005 at 1:22 pm</a>		</div>

		<p>Back to original task of creating<br />
<br />sting-to-numeric-id functions/maps.</p>
<p>Ternary search trees are generally better approach for that (compact and fast) and do no require non-deterministic hash functions.</p>
<p>Tested by myself on real tasks (HTML/DOM parsing/rendering). Indeed, it shows significant gains in some cases. Especially  in places where hash function were not designed properly.<br />
<br />In general it is hard to create good hash functions &#8211; it&#8217;s design is a serious research as a rule.</p>
<p>Canonical TST paper:<br />
<br /><a rel="nofollow" target="_new" href="http://www.cs.princeton.edu/~rs/strings/" rel="nofollow">http://www.cs.princeton.edu/~rs/strings/</a></p>
<p>And about perfect hashes. There is a well known utility named gperf.exe (google:gperf.exe) &#8211; it allows to generate automaticly perfect and minimal string-to-id functions for C/C++. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-302293">
				<div id="div-comment-302293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ytram</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302293">
			August 31, 2005 at 4:25 pm</a>		</div>

		<p>I&#8217;m posting this here just because it&#8217;s your last tech entry.  Here the past 3 or 4 weeks, I have been getting duplicate entries from you, 15 at a time.   Your 15 most recent entries get resent to my aggregator, and a minute or two later I get them again, 30 in all.</p>
<p>This may have something to do with my reader of choice(Thunderbird), but if it&#8217;s not, I wanted to be sure and let you know in case it has something to do with your auto-pilot program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-302133">
				<div id="div-comment-302133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">User</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302133">
			August 31, 2005 at 10:30 am</a>		</div>

		<p>i think you got i wrong about the origin of &quot;pigeonhole&quot;. its origin is in the shape of storage compartment for *real pigeons* used in antiquity when pigeons were used for message delivery carrier pigeons). they were stored in small square holes in a similar shape to the desk compartment you linked. it&#8217;s a very old thing &#8211; there are carrier-pigeon rooms carved in stone dated from the roman empire period (for example here in israel there are few of these, i&#8217;m sure you can find them in other places too)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-302313">
				<div id="div-comment-302313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mr. Ed</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302313">
			August 31, 2005 at 6:35 pm</a>		</div>

		<p>It&#8217;s always awesome when you can fit &quot;by the pigeonhole principle&quot; into a conversation.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-302323">
				<div id="div-comment-302323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302323">
			August 31, 2005 at 7:19 pm</a>		</div>

		<p>Well, there does in fact exist a hash for unrestricted strings that satisfies uniqueness &#8212; the string itself.  Nothing else will do.  (ducks behind a table to avoid thrown objects.)</p>
<p>And also, it&#8217;s spelled &quot;etymology&quot;, not &quot;etimology&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-302333">
				<div id="div-comment-302333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Fitzpatrick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302333">
			August 31, 2005 at 8:51 pm</a>		</div>

		<p>Can&#8217;t you do a CRC on the string to get a pseudo unique hash. To ensure its unique, add 2 bytes for the length.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-302343">
				<div id="div-comment-302343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302343">
			August 31, 2005 at 9:22 pm</a>		</div>

		<p>Wednesday, August 31, 2005 7:19 PM by Miral<br />
<br />&gt; Well, there does in fact exist a hash for<br />
<br />&gt; unrestricted strings that satisfies<br />
<br />&gt; uniqueness &#8212; the string itself. Nothing<br />
<br />&gt; else will do.</p>
<p>That is in fact true, in the general case.  Everything else (including CRCs, including CRCs plus length fields, etc.) will have collisions sometimes.  The purpose of CRCs was so that the most common kinds of transmission errors would become most reliably detectable.  Not perfectly detectable, only as close as practicable with fixed-length check fields.</p>
<p>In the original note:<br />
<br />&gt; For example, if the domain is a finite set,<br />
<br />&gt; you can develop a so-called perfect hash<br />
<br />&gt; which guarantees no collisions among the<br />
<br />&gt; domain strings. </p>
<p>It is more complicated than that.  Ordinarily you want a fixed-length hash key, and then you can&#8217;t use the string itself as a key, and then Miral&#8217;s hashing method stops working for infinite sets.  But whether that leaves you with a possibility of a perfect hash or not depends on another factor.  It is not enough for the domain to be finite, but the entire domain must be known exactly.  When you know exactly what the strings are, there will be a way of hashing them into hash keys that are just long enough.  For example a perfect hash can be produced for the keywords of the C programming language, but not for all of the identifiers that will be used in all of the C programs that will be written during the next 50 years.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-302263">
				<div id="div-comment-302263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">binaryc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302263">
			August 31, 2005 at 2:38 pm</a>		</div>

		<p>If you want to generate a unique hash code for every string, you have to do something like this:</p>
<p>long long GetHashCode( const char *str ) {<br />
<br />return *(long long *)str;<br />
<br />}</p>
<p>of course, that only works for strings that are 16 bytes long.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-302363">
				<div id="div-comment-302363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302363">
			August 31, 2005 at 10:21 pm</a>		</div>

		<p>As already stated, HASH + Length does not generated a unique value.  Also, there is a downside to trying to generate perfect HASH values.  As the time complexity of the HASH algorithm increases, the usefulness of using them goes down.  In other words, it can take longer to generate the HASH value than to do the search.</p>
<p>Also, in some of my compiler research, I found that adding the string length to the HASH value compare doesn&#8217;t do much for reducing the string compares.</p>
<p>BTW: What I mean by adding the string length compare is this:</p>
<p>if (Hash == Test.Hash &amp;&amp; strcmp (string, Test.String) == 0) </p>
<p>compared to:</p>
<p>if (Hash == Test.Hash &amp;&amp; Length == Test.Length &amp;&amp; memcmp (string, Test.String, Length) == 0)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-302373">
				<div id="div-comment-302373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302373">
			August 31, 2005 at 10:57 pm</a>		</div>

		<p>This isn&#8217;t as entertaining as the origins of the word &quot;pigeonhole&quot;, but I&#8217;ll toss it in because it might help someone:</p>
<p>String.GetHashCode() is peobably fine if you&#8217;re using it to populate whatever hash table you&#8217;ve implemented, because it already expects collisions and has code to deal with them, right? It&#8217;s also fine as a quick check for inequality as long as the code doesn&#8217;t take equal hashes to mean equal strings. On finding equal hashes, a check of true string equivalence would have to happen, but think of all the cycles you save not doing that most of the time.</p>
<p>To best avoid collisons use a known cryptographic hash algorithm. And if you&#8217;re a dev in Windows use one of the stronger ones (not MD5, RC4, et al.) or my PM may have to beat you up (depending on the security implications, mitigation against collisions, etc.).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-302383">
				<div id="div-comment-302383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.virtualdub.org/' rel='external nofollow' class='url'>Phaeron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302383">
			September 1, 2005 at 1:12 am</a>		</div>

		<p>What people don&#8217;t realize about hashing is that it doesn&#8217;t take very many entries before the chance of a hash collision starts climbing alarmingly. For instance, 100K entries in a 32-bit hash space is a density of less than 0.01%, but the chances of at least one hash collision are nearly 70%. Even worse, that&#8217;s assuming a totally unbiased hash function, so actual chances are higher.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-302393">
				<div id="div-comment-302393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302393">
			September 1, 2005 at 1:41 am</a>		</div>

		<p>Drew said:<br />
<br />&gt; To best avoid collisons use a known<br />
<br />&gt; cryptographic hash algorithm. And if<br />
<br />&gt; you&#8217;re a dev in Windows use one of the<br />
<br />&gt; stronger ones (not MD5, RC4, et al.)</p>
<p>Um, RC4 is not a hash function :-(</p>
<p>As a total crypto amateur, it really surprises me how many &quot;schoolboy howler&quot; mistakes MS has made with its crypto. For example, enciphering passwords with symmetric ciphers &amp; secret keys, instead of using the passwords /as/ the keys, to encipher a fixed constant. The first method is trivially breakable &amp; returns all the plaintext passwords! (oops)  :-((</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ericgu odd alt thread-odd thread-alt depth-1" id="comment-302973">
				<div id="div-comment-302973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Eric+Gunnerson' rel='external nofollow' class='url'>Eric Gunnerson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-302973">
			September 2, 2005 at 12:41 pm</a>		</div>

		<p>There&#8217;s a bit of history on the use of &quot;pigeonhole&quot; in mathematics here:</p>
<p><a rel="nofollow" target="_new" href="http://members.aol.com/jeff570/p.html" rel="nofollow">http://members.aol.com/jeff570/p.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-303103">
				<div id="div-comment-303103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dimitre Novatchev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-303103">
			September 3, 2005 at 1:59 am</a>		</div>

		<p>Raymond,</p>
<p>This is actually known as the Dirichlet&#8217;s Box Principle.</p>
<p><a rel="nofollow" target="_new" href="http://mathworld.wolfram.com/DirichletsBoxPrinciple.html" rel="nofollow">http://mathworld.wolfram.com/DirichletsBoxPrinciple.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-303153">
				<div id="div-comment-303153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yaytay</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-303153">
			September 3, 2005 at 11:41 am</a>		</div>

		<p>There are lots of perfect hashing algorithms that don&#8217;t result in the original string and do produce something considerably smaller than the original string.<br />
<br />They are called (lossless) compression algorithms.</p>
<p>That might be useful to someone, somewhere.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-303183">
				<div id="div-comment-303183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://roblevine.blogspot.com/' rel='external nofollow' class='url'>RobL</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050831-17/?p=34363#comment-303183">
			September 3, 2005 at 9:27 pm</a>		</div>

		<blockquote><p>
  There are lots of perfect hashing algorithms<br />
  <br />&lt;snip/&gt;<br />
  <br />&gt;They are called (lossless) compression algorithms.</p>
<p>Yes &#8211; but they take TIME.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>