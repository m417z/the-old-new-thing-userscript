<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-469603">
				<div id="div-comment-469603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469603">
			February 6, 2007 at 11:08 am</a>		</div>

		<p>I&#8217;m curious: why was the decision made to allow creation by ordinal or string?</p>
<div class="post">[<i>I don&#8217;t know. Each method has its own advantages and disadvantages. I thought you folks liked it when Windows had more settings and options? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-469623">
				<div id="div-comment-469623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469623">
			February 6, 2007 at 11:20 am</a>		</div>

		<p>@required: Probably because it was originally ordinal only, because in 1985 those few bytes to store a string would have made Windows 1.0 require more than 256kb of RAM. Or something along those lines.</p>
<p>Doesn&#8217;t it just seem that each new version of Windows becomes more and more hobbled by 10-20 year old design decisions?</p>
<p>Maybe if the .Net CLR was implemented as an NT subsystem, rather than a wrapper around Win32, we would have some way of escaping the insanity and backwardness of Win32, but no sign of that happening any time soon.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-469653">
				<div id="div-comment-469653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469653">
			February 6, 2007 at 12:10 pm</a>		</div>

		<p>When creating a property sheet using pages that have resources from multiple DLLs, you need to reference them by name instead of by ordinal, or you can get the wrong dialog resources because of duplicated ordinals.</p>
<p>(This is from experience, it actually happened to me.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-469673">
				<div id="div-comment-469673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469673">
			February 6, 2007 at 12:29 pm</a>		</div>

		<p>Raymond, I&#8217;m curious why the convention is to prefer ordinals over strings?</p>
<p>I mean, the lookup cost is negligable, is it more so that people don&#8217;t try to hook into standard windows DLLs for their resources? &nbsp;Or is it one of those &#8220;we do it because that&#8217;s how we&#8217;ve always done it&#8221; types of things?</p>
<div class=post>[<i>A floppy disk access is not negligible. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-469693">
				<div id="div-comment-469693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469693">
			February 6, 2007 at 12:43 pm</a>		</div>

		<p>&quot;Doesn&#8217;t it just seem that each new version of Windows becomes more and more hobbled by 10-20 year old design decisions?&quot;</p>
<p>You&#8217;re so right. &nbsp;Vista is completely hobbled because a developer has 2 ways of specifying a resource. &nbsp;I don&#8217;t know how any programs ever manage to run at all!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-469713">
				<div id="div-comment-469713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.differentpla.net/' rel='external nofollow' class='url'>Roger Lipscombe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469713">
			February 6, 2007 at 12:47 pm</a>		</div>

		<p>So: what are the advantages and disadvantages of each method?</p>
<div class=post>[<i>I intentionally left that as an exercise for the reader. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-469743">
				<div id="div-comment-469743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469743">
			February 6, 2007 at 1:05 pm</a>		</div>

		<p>I ran into this recently because I was messing around with a CBitmapButton. &nbsp;The docs have this to say:</p>
<p>===================================</p>
<p>You must specify the ID of your bitmaps within double quotes. Otherwise the resource editor will assign an integer to the resource and MFC will fail when loading the image</p>
<p>===================================</p>
<p>I really had no idea what they were talking about, and the resource compiler didn&#8217;t like it when I put double quotes around the ID in the .rc file.</p>
<p>I finally stumbled on what was intended by the CBitampButton docs. &nbsp;The key is &quot;the resource editor&quot;. &nbsp;When you&#8217;re editing the .rc file using Visual Studio&#8217;s resource editor instead of editing the .rc file directly in a text editor, you get the desired behavior: when the ID is in quotes in the VS resource editor dialog, VS doesn&#8217;t add a &quot;#define&quot; for it in resource.h, otherwise it does.</p>
<p>I suppose that&#8217;s what I get for avoiding UI programming for most of the past 15+ years.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-469763">
				<div id="div-comment-469763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469763">
			February 6, 2007 at 1:15 pm</a>		</div>

		<blockquote><p>
  &gt; &quot;Doesn&#8217;t it just seem that each new version of Windows becomes more and more hobbled by 10-20 year old design decisions?&quot;
</p></blockquote>
<p>You&#8217;re so right. &nbsp;Vista is completely hobbled because a developer has 2 ways of specifying a resource. &nbsp;I don&#8217;t know how any programs ever manage to run at all! &lt;&lt;</p>
<p>Maybe &#8216;hobbled&#8217; is the wrong word, but clearly Windows is a more complex beast because of design decisions made long ago. &nbsp;In fact, that&#8217;s often an important point of Raymond&#8217;s daily postings.</p>
<p>Not to say that this complexity was avoidable; after all, Raymond has yet to invent the time machine. &nbsp;But that&#8217;s on the schedule for Longhorn Server, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-469783">
				<div id="div-comment-469783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frank Richter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469783">
			February 6, 2007 at 1:30 pm</a>		</div>

		<p>String names could perhaps have been better integrated syntax-wise: if a resource is to be named by a string instead of ordinal require the string to be &quot;quoted&quot;. So a token being skipped by the preprocessor would still be caught by the parser, complaining about the lack of quoting&#8230;</p>
<p>Alas, too late now :) &#8230;though it could still be added into the resource compiler. Of course that would give suddenly a lot of trouble with the existing corpus of resource scripts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-469823">
				<div id="div-comment-469823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469823">
			February 6, 2007 at 2:13 pm</a>		</div>

		<p>mikeb: That&#8217;s because there are features in CBitmapButton that cause it to append a character to the string you provide, to find different images for &#8216;hot&#8217; (user is hovering over button), pressed and disabled buttons. Yes, this is pretty lame. You could do the same with ordinal-based resources, but it&#8217;s a little trickier to ensure that the images have sequential resource IDs.</p>
<p>Alternatively they could have required that the bitmap was four times as big as a single button image, and sliced the bitmap appropriately. However, CBitmapButton was designed for (you guessed it) Windows 3.x, where the size of the GDI resource heap was only 64KB, so I&#8217;m guessing that making the bitmap larger and slicing it would have wasted GDI resources unnecessarily.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-469843">
				<div id="div-comment-469843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Foolhardy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469843">
			February 6, 2007 at 3:03 pm</a>		</div>

		<p>Stu: Making .NET independent of Win32 would be lovely. I think something similar may have been happening prior to the &quot;Longhorn reset&quot;.</p>
<p>It seems that NT is doomed to be a platform just to support Win32 for the rest of its lifetime. It&#8217;s a shame too, NT is in many ways the most advanced general purpose kernel and system available today, but it&#8217;s only available via Win32.</p>
<p>Win32 is certainly usable, but it has accumulated so many special cases, gotchas, redundant and counter-intuitive behaviors from compatibility, mistakes (both from ISVs and MS) and lack of foresight that it can be a real pain to use effectively.</p>
<p>The fact that it&#8217;s even possible to make such a mistake so easily is a failure of the API. We&#8217;ve had better type checking available for a long time, and other APIs (like .NET&#8217;s) use them. For that matter, didn&#8217;t we determine that macros were evil a long time ago&#8211; that compiler constants were much better? Why is this still the primary method for writing Windows apps in 2007?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-469903">
				<div id="div-comment-469903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Good Point</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469903">
			February 6, 2007 at 3:53 pm</a>		</div>

		<p>&quot;Why is this still the primary method for writing Windows apps in 2007?&quot;</p>
<p>Because Microsoft highly values backwards compatibility (and A floppy disk access is not negligible).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-469913">
				<div id="div-comment-469913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codeka.com/blogs/' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469913">
			February 6, 2007 at 4:06 pm</a>		</div>

		<p>Wow, how did we jump from being able to specify string-based or ordinal-based resource names to the &#8220;death of Win32&#8221;?</p>
<div class=post>[<i>You must be new here. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-469933">
				<div id="div-comment-469933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469933">
			February 6, 2007 at 5:19 pm</a>		</div>

		<p>Haha, this preprocessor thing reminds me of a mistake I did once by subtracting one #defined value (&quot;X&quot;) from another (&quot;Y&quot;) and the latter was in turn defined as &quot;A &#8211; B&quot;&#8230;</p>
<p>I just saw the calculation as DEF_X &#8211; DEF_Y (i.e. really DEF_X &#8211; (DEF_A &#8211; DEF_B)), but in reality of course got DEF_X &#8211; DEF_A &#8211; DEF_B. :-p</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-469813">
				<div id="div-comment-469813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hamilton Lovecraft</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-469813">
			February 6, 2007 at 1:53 pm</a>		</div>

		<p>Raymond Chen: &#8220;Today in The Old New Thing, I&#8217;m once again going to be throwing bloody chunks of fish guts off the back of the boat!&#8221; </p>
<p>random commenter: &#8220;I&#8217;m a shark! RAAAARRR!&#8221; *CHOMPCHOMPCHOMP*</p>
<p>Chen: &#8220;I really don&#8217;t understand why these sharks keep attacking the boat!&#8221;</p>
<div class=post>[<i>It hadn&#8217;t occurred to me that grayscale algorithms are inflammatory. I&#8217;ll try to avoid them in the future. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-470033">
				<div id="div-comment-470033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Foolhardy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-470033">
			February 6, 2007 at 8:45 pm</a>		</div>

		<p>Re: Dean Harding: *sigh* It just seems like Win32 has become the elephant in the room that no one wants to talk about, and it&#8217;s dragging the quality of Windows down. There are new and good things happening in Windows development, but we can&#8217;t quite make the shift over to them, even for 100% new programs. We still have to deal with pre-processor issues from 20 years ago.</p>
<p>The fact that Win32 permeates even .NET, what should be a clean start API wise, and the fact that Win32 is still the only game in town for many functions is holding Windows back.</p>
<p>It&#8217;s possible to build a clean, modern API alongside Win32 (NT was designed to operate parallel APIs), but instead we&#8217;re stuck in the past and it&#8217;s frustrating.</p>
<p>Larry and Raymond keep warning us about specific pitfalls and peculiarities (enough to publish a book about it!), and the overall conclusion some of us come to is that Win32&#8217;s time has passed to be the primary API of a modern OS&#8211; for the total of the myriad reasons they outline in articles like this one.</p>
<div class=post>[<i>Could we stick to the topic, please? If you want to debate the future of Win32 please do it on your own site. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-470143">
				<div id="div-comment-470143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Prvn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-470143">
			February 7, 2007 at 6:03 am</a>		</div>

		<p>accidently, i saw this blog. I really liked the way you present the so-called &quot;old new&quot; things!!! (even though, i cudnt understand many old and new things. See, am a beginner). I will be watching you&#8230; &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-470173">
				<div id="div-comment-470173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">True #1</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-470173">
			February 7, 2007 at 9:44 am</a>		</div>

		<p>Rookie mistake of all times must be forgetting setting style visible=true when changing from modal (DialogBox) to modeless (CreateDialog), and the dialog does not appear visible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-470113">
				<div id="div-comment-470113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-470113">
			February 7, 2007 at 3:02 am</a>		</div>

		<p>I think the reason there are both numerical and string ID&#8217;s are obvious. The string representation allows for more dynamic runtime behaviour, at the expense of size and speed, while the efficient numerical (binary) representation means both implementations (both the PE exporting the resource and the PE(s) importing it) are binary linked at the hip.</p>
<p>Just compare it to linking a DLL (or other PE exporting symbols) by name or ordinal. Especially with C++ name mangling you can pay a *serious* overhead for exporting by name with the MS-compilers C++ name mangling if you ex/import by name instead of by ordinal. I&#8217;ve myself seen a DLL with carefully and properly applied ordinal-only exports shrink to one third (!) vs. using the compiler-generated names. I can imagine the MFC with its number of export (is it in the range of 7000 or so?) would reach almost astronomical size had it not exported by ordinal only. While this obviously is an extreme compared to the (likely) avg. growth of DLL size using string or ordinal im/export from/to resources, the concept is still the same.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-470403">
				<div id="div-comment-470403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-470403">
			February 7, 2007 at 12:23 pm</a>		</div>

		<p>required: Don&#8217;t forget that you can define your resource by ordinal but reference it by string (such as that obvious #32770 class name).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-471373">
				<div id="div-comment-471373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Pritchard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070206-05/?p=28123#comment-471373">
			February 11, 2007 at 8:15 pm</a>		</div>

		<p>I guess the point of referencing dialogs by string is that it&#8217;s easier to avoid conflicts. IDs conflict very easily, especially if you&#8217;ve got multiple resource DLLs flying around the place.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>