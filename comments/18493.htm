<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (32)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-728503">
				<div id="div-comment-728503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728503">
			April 22, 2009 at 10:51 am</a>		</div>

		<p>That&#8217;s rather interesting. &nbsp;I always assumed Windows used 4 byte alignment for all integral types of 4 bytes or less so that the fields would be properly aligned to the bus for performance reasons. &nbsp;Of course, I may have simply extrapolated that from the fact that a BOOL is actually a DWORD in disguise (a DWORD is awfully big for information encoded in a single bit).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-728563">
				<div id="div-comment-728563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728563">
			April 22, 2009 at 11:05 am</a>		</div>

		<p>Tom,</p>
<p>BOOL is &#8216;int&#8217;, not DWORD. Since Win16. BOOLEAN, on the other hand, is a byte.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-728573">
				<div id="div-comment-728573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728573">
			April 22, 2009 at 11:10 am</a>		</div>

		<p>int&#8230;DWORD&#8230;whatever&#8230;There the same size.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-728583">
				<div id="div-comment-728583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728583">
			April 22, 2009 at 11:10 am</a>		</div>

		<p>int&#8230;DWORD&#8230;whatever&#8230;There the same size.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-728593">
				<div id="div-comment-728593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vasili Zaitsev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728593">
			April 22, 2009 at 11:14 am</a>		</div>

		<p>There is a weird layout bug in MSVC where the presence of virtual functions screws up the layout. Observe the layout in memory of the following struct with and without the comment on double.</p>
<p>class Y</p>
<p>{</p>
<p>&nbsp; &nbsp;virtual void f(); //4bytes for vfptr</p>
<p>&nbsp; &nbsp;int x; &nbsp; //4bytes</p>
<p>// &nbsp; &nbsp;double y; &nbsp; &nbsp; //8bytes</p>
<p>};</p>
<p>It should be [4(vfptr)|4(a)] and [4(vfptr)|4(a)|8(b)]</p>
<p>instead its [4(vfptr)|4-Padding|4(a)|4-padding|8(b)]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-728613">
				<div id="div-comment-728613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vasili Zaitsev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728613">
			April 22, 2009 at 11:19 am</a>		</div>

		<p>meh,</p>
<p>:%s/(a)/(x)/g</p>
<p>:%s/(b)/(y)/g</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-728683">
				<div id="div-comment-728683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728683">
			April 22, 2009 at 1:05 pm</a>		</div>

		<p>Vasili: &nbsp;It looks like the standard leaves the layout up to the implementation, so it&#8217;s not really a bug.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-728713">
				<div id="div-comment-728713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728713">
			April 22, 2009 at 1:18 pm</a>		</div>

		<p>Tom: &quot;I always assumed Windows used 4 byte alignment for all integral types of 4 bytes or less so that the fields would be properly aligned to the bus for performance reasons.&quot;</p>
<p>I don&#8217;t see how such alignment would improve performance. &nbsp;If I need to get two bytes from a dword, why does it matter if it&#8217;s in the top or bottom pair?</p>
<p>AIUI, the only case where alignment causes extra delays is when the misalignment means the processor needs to fetch additional words of memory (word being 64 bits on most modern machines). Which this arrangement completely avoids.</p>
<p>Eric: &nbsp;&quot;int&#8230;DWORD&#8230;whatever&#8230;There the same size.&quot;</p>
<p>not in win16 they aren&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-728753">
				<div id="div-comment-728753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728753">
			April 22, 2009 at 4:11 pm</a>		</div>

		<p>My Grandpa told me stories about win16.</p>
<p>I think is goes back to when he fought the Keiser.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-728763">
				<div id="div-comment-728763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728763">
			April 22, 2009 at 4:33 pm</a>		</div>

		<blockquote><p>
  a DWORD is awfully big for information encoded in a single bit
</p></blockquote>
<p>Ah, but you&#8217;re forgetting parity&#8230; and error correction&#8230; and 29 other things I can&#8217;t think of at the moment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-728773">
				<div id="div-comment-728773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sebastian Redl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728773">
			April 22, 2009 at 4:58 pm</a>		</div>

		<blockquote><p>
  and 29 other things I can&#8217;t think of at the moment.
</p></blockquote>
<p>FILE_NOT_FOUND</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-728843">
				<div id="div-comment-728843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728843">
			April 22, 2009 at 11:17 pm</a>		</div>

		<p>&#8230; and does it match the default packing of &#8216;midl&#8217; &amp; &#8216;mktyplib&#8217;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-728853">
				<div id="div-comment-728853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728853">
			April 22, 2009 at 11:26 pm</a>		</div>

		<p>Eric: &nbsp;&quot;int&#8230;DWORD&#8230;whatever&#8230;There the same size.&quot;</p>
<p>Actually, no. We recently (2007) had an application fail horribly because it was ported from 32-bit Windows to 64-bit Unix. When sizeof(int) suddenly became 8 instead of 4, doing a read(handle, &amp;version_number, sizeof(int)) gave us file version numbers about eight billions larger than expected.</p>
<p>If you REALLY want 32-bit values, use int32_t instead of int. Please.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-728883">
				<div id="div-comment-728883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728883">
			April 23, 2009 at 1:55 am</a>		</div>

		<p>Funny, I always thought the default alignment would be 16 bytes, a &quot;paragraph&quot;. This is because of the x86, of course, supporting it implicitly with the segment:offset method.</p>
<p>I wonder if the alignment is 32-bits on ARM (Windows Embedded CE or Windows Mobile) &#8211; ARM, like most architectures, cannot access unaligned memory (throws exception).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-728903">
				<div id="div-comment-728903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728903">
			April 23, 2009 at 5:17 am</a>		</div>

		<p>Worf, segment:offset is extremely ancient real mode x86. In protected mode, as soon as you turn on segmented addressing, the segment is no longer used directly but the relative address of a segment descriptor in one of the local or global descriptor tables. That descriptor can have any base address &#8211; a full 32 bits is available to describe the base address. The Intel manual says they should be aligned to 16-byte boundaries but it is not required.</p>
<p>In 32-bit mode, the offset can address any part of the 4GB physical address space. With paging enabled, the segment base address plus the offset calculate a virtual address; this is translated to a physical address via the Translation Look-aside Buffer (TLB) and page tables. If in Processor Address Extensions mode, the page table points to (architecturally) 64-bit physical addresses, although only 36 bits are implemented on 32-bit x86 processors. (I believe 48 bits are available on x64, even in 32-bit mode.) Windows now generally runs in PAE mode even if less than 4GB is fitted, because the No Execute/eXecute Disable feature is implemented only in PAE mode, as there was no space for the new bit in the 32-bit Page Table Entry. It&#8217;s the top bit of the 64-bit physical address in the extended PTE used in PAE mode.</p>
<p>Segments are almost entirely unused in Windows, with the single code segment set to a base of 0 and limit of 4GB, SS DS and ES all pointing to a data segment, also with base 0 and limit 4GB, and FS pointing to a data segment whose base is the address of the thread environment block (TEB). This allows code to reference e.g. the exception handler chain and thread-local storage via the FS segment &#8211; the system sets FS correctly for each new thread.</p>
<p>x64 processors have vestigial segment support in 64-bit &quot;long mode&quot;. ES, DS and SS segments are completely unused and some of the opcodes which reference them were reused for the new features. They are implicitly 0-based. Limits are no longer used. CS must still point to a code segment. FS and GS can still be used for offset addressing.</p>
<p>Alignment is an issue on all processors; x86 will not (by default) raise exceptions for misalignment, but it will take substantially longer to retrieve misaligned data. ARM will always raise exceptions as it has no compatibility behaviour. Default alignment on ARM is the same as on x86, 8 bytes.</p>
<p>You can still compile &#8216;misaligned&#8217; code on ARM using packing pragmas or options, but the code balloons in size as it has to detect the current alignment and perform the correct fixup for every possible misalignment. Don&#8217;t do it unless you need to for compatibility with a previously-created data file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-728913">
				<div id="div-comment-728913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wolf550e</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728913">
			April 23, 2009 at 5:49 am</a>		</div>

		<p>SSE types require 16-byte alignment. I guess they aren&#8217;t used in the Windows SDK? How about directX or something where they are used?</p>
<div class="post">[<i>Yeah, how about DirectX? Check out d3dx8math.h. (Hey, you can do the research yourself. Don&#8217;t make me do it.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-728923">
				<div id="div-comment-728923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Austin Donnelly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728923">
			April 23, 2009 at 6:01 am</a>		</div>

		<p>Can someone give me an example T such that sizeof(T) &gt;= 8 bytes. &nbsp;Remember, T must also be either an integral or pointer type.</p>
<p>I can&#8217;t think of any.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-728933">
				<div id="div-comment-728933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.tapuchim.com' rel='external nofollow' class='url'>configurator</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728933">
			April 23, 2009 at 7:02 am</a>		</div>

		<p>@Austin Donnelly: int128, of course.</p>
<p>You didn&#8217;t say it has to already exist.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-728943">
				<div id="div-comment-728943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728943">
			April 23, 2009 at 7:42 am</a>		</div>

		<p>&quot;Can someone give me an example T such that sizeof(T) &gt;= 8 bytes.&quot;</p>
<p>Raymond gave several examples. &nbsp;I assume you actually meant sizeof(T) &gt; 8 bytes.</p>
<p>long double, if it were actually implemented on Windows as more precise than double, would fit sizeof(T) &gt; 8 bytes.</p>
<p>&quot;Remember, T must also be either an integral or pointer type.&quot;</p>
<p>Why does it need to be an integral or pointer type? &nbsp;Structures can contain other structures.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-728963">
				<div id="div-comment-728963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728963">
			April 23, 2009 at 9:39 am</a>		</div>

		<p>@Vasili</p>
<p>I was just working on a packing problem with the same basic layout as your layout. &nbsp;I didn&#8217;t see that problem. &nbsp;It packed as expected. &nbsp;</p>
<p>Is your example more complicated in reality?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-728993">
				<div id="div-comment-728993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-728993">
			April 23, 2009 at 11:05 am</a>		</div>

		<p>The last time I used an ARM it didn&#8217;t raise an exception for an unaligned read, but only the bottom byte was guaranteed to be correct as all it did was read the aligned value and rotate it by the appropriate multiple of 8 bits.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-729063">
				<div id="div-comment-729063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-729063">
			April 23, 2009 at 12:53 pm</a>		</div>

		<p>I haven&#8217;t programmed ARM since 1992, so this may well be out-of-date.</p>
<p>The bottom two bits of an address aren&#8217;t given to the memory controller, so reads are implicitly 4-byte aligned. &nbsp;These two bits are multiplied by 8 and used to rotate the 32-bit value that&#8217;s been read. &nbsp;If you also set the B (byte) flag on your instruction the top 24 bits of the value are set to zero. &nbsp;This simulates byte-size reads. &nbsp;If you don&#8217;t set the B flag you do get the full 32 bits (contrary to what Neil said), but they&#8217;ve been rotated. &nbsp;If you need to read then rotate a value you can save an instruction. &nbsp;Writing works similarly.</p>
<p>ARM also supports multi-word reads and writes. &nbsp;These are slightly quicker if 16-byte aligned, but work with any alignment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-729153">
				<div id="div-comment-729153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-729153">
			April 23, 2009 at 2:34 pm</a>		</div>

		<p>@Vasili Zaitsev: why do you consider that a bug? I&#8217;m sure it&#8217;s laid out that way so that 2 classes that are the same except for one having a vptr and one not a vptr get laid out in the same way. Also, Remember that the location if the vptr is not specified (actually, the compiler if free to not use one at all if it wants to implement virtual method dispatch some other way). &nbsp;I think that there maybe even are some situations where MSVC doesn&#8217;t put the vptr at the start of the object (though I&#8217;m not really sure about that). &nbsp;See <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/01/20/515327.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/01/20/515327.aspx</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-729163">
				<div id="div-comment-729163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-729163">
			April 23, 2009 at 3:29 pm</a>		</div>

		<p>@ Austin Donnelly:</p>
<p>Well, if you really meant &gt;= 8, here&#8217;s an example using VC7.1 (pointer to member of a class derived using multiple inheritance).</p>
<p>class Base1</p>
<p>{</p>
<p>public:</p>
<p>&nbsp; virtual int DoSomething()</p>
<p>&nbsp; {</p>
<p>&nbsp; &nbsp; &nbsp;return 1;</p>
<p>&nbsp; }</p>
<p>&nbsp; int x;</p>
<p>};</p>
<p>class Base2</p>
<p>{</p>
<p>public:</p>
<p>&nbsp; virtual int DoSomethingElse()</p>
<p>&nbsp; {</p>
<p>&nbsp; &nbsp; &nbsp;return 1;</p>
<p>&nbsp; }</p>
<p>&nbsp; int y;</p>
<p>};</p>
<p>class Derived : public Base1, public Base2</p>
<p>{</p>
<p>public:</p>
<p>&nbsp; virtual int DoSomething()</p>
<p>&nbsp; {</p>
<p>&nbsp; &nbsp; &nbsp;return 0;</p>
<p>&nbsp; }</p>
<p>&nbsp; virtual int DoSomethingElse()</p>
<p>&nbsp; {</p>
<p>&nbsp; &nbsp; &nbsp;return 0;</p>
<p>&nbsp; }</p>
<p>};</p>
<p>typedef int (Derived::* PFN_Derived)();</p>
<p>PFN_Derived pfnFunc = Derived::DoSomething;</p>
<p>sizeof( pfnFunc ) == 8</p>
<hr />
<p>For further reading:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2004/02/09/70002.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2004/02/09/70002.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-729223">
				<div id="div-comment-729223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-729223">
			April 23, 2009 at 5:07 pm</a>		</div>

		<p>How&#8217;s this for sizeof(T) &gt; 8:</p>
<p>class A {};</p>
<p>class B {};</p>
<p>class VirtD: public virtual A, public virtual B {</p>
<p>public:</p>
<p>&nbsp; &nbsp;virtual int Dfunc() { return 5; };</p>
<p>};</p>
<p>typedef int (VirtD::* Derived_mfp)();</p>
<p>int main()</p>
<p>{</p>
<p>&nbsp; &nbsp;VirtD virtd;</p>
<p>&nbsp; &nbsp;Derived_mfp mfp = &amp;VirtD::Dfunc;</p>
<p>&nbsp; &nbsp;printf( &quot;sizeof( mfp) == %dn&quot;, sizeof( mfp));</p>
<p>}</p>
<p>Displays: sizeof( mfp) == 12</p>
<p>See <a rel="nofollow" target="_new" href="http://www.codeproject.com/KB/cpp/FastDelegate.aspx" rel="nofollow">http://www.codeproject.com/KB/cpp/FastDelegate.aspx</a> for more fun with member function pointers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-729263">
				<div id="div-comment-729263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-729263">
			April 23, 2009 at 6:34 pm</a>		</div>

		<blockquote><p>
  &gt; it was ported from 32-bit Windows to 64-bit Unix. When sizeof(int) suddenly became 8 instead of 4
</p></blockquote>
<p>Unlikely, 64 bit UNIXes use the LP64 model and still have int as 32 bit, but have long as 64bit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-729283">
				<div id="div-comment-729283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-729283">
			April 23, 2009 at 6:54 pm</a>		</div>

		<blockquote><p>
  &gt; Unlikely, 64 bit UNIXes use the LP64 model and still have int as 32 bit, but have long as 64bit.
</p></blockquote>
<p>Hmm &#8211; I thought that there was at least one major Unix variant that used the ILP64 model. In any case, maybe he meant that sizeof(long) suddenly became 8 instead of 4, and that was the cause of the bug?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-729333">
				<div id="div-comment-729333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-729333">
			April 24, 2009 at 1:30 am</a>		</div>

		<p>FYI, modern ARM cores require types to be aligned appropriately, but you can do 8/16 bit accesses without a data abort. Unaligned accesses always throw a data abort, so you must access/shift in software.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-729353">
				<div id="div-comment-729353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steelbytes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-729353">
			April 24, 2009 at 3:57 am</a>		</div>

		<p>DrawTextW and TextOutW are sensitive to memory aligment when drawing to a DIBSection</p>
<p><a href="http://louis.steelbytes.com/DrawTextBug.html" target="_new" rel="nofollow">http://louis.steelbytes.com/DrawTextBug.html</a></p>
<div class="post">[<i>The pointer is declared as LPCWSTR (pointer to WCHAR) not LPUWSTR (pointer to unaligned WCHAR). Passing an unaligned pointer to a function that expects an aligned pointer is a violation of the <a href="http://blogs.msdn.com/oldnewthing/archive/2006/03/20/555511.aspx" rel="nofollow">ground rules of programming</a> and therefore all bets are off. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-729363">
				<div id="div-comment-729363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-729363">
			April 24, 2009 at 4:45 am</a>		</div>

		<blockquote><p>
  &gt; read(handle, &amp;version_number, sizeof(int))
</p></blockquote>
<p>He should also have used &quot;sizeof(version_number)&quot; rather than sizeof some type that may or not be what version_number actually is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-729543">
				<div id="div-comment-729543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-729543">
			April 25, 2009 at 9:01 am</a>		</div>

		<p>It got caught out with this recently when compiling code using bluetooth winsock calls (on Windows Mobile). Most of the Windows include files have the packing set at the top of the file but the ws2bth.h file doesn&#8217;t.</p>
<p>On Windows the ws2bth.h is actually packed to 1-byte boundaries, which doesn&#8217;t work so well on ARM processors, so it appears the packing was removed but not explicitly set to 8. This caused problems of course because for some reason the application I was compiling was aligning on 4 byte boundaries.</p>
<p>Funnily enough if you look at ws2bth.h for Windows Mobile 5.0 you will see this lonesome comment:</p>
<p>// Turn 1 byte packing of structures on</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-729563">
				<div id="div-comment-729563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090422-00/?p=18493#comment-729563">
			April 25, 2009 at 10:53 pm</a>		</div>

		<p>[The pointer is declared as LPCWSTR (pointer to WCHAR) not LPUWSTR (pointer to unaligned WCHAR). Passing an unaligned pointer to a function that expects an aligned pointer is a violation of the ground rules of programming and therefore all bets are off. -Raymond]</p>
<p>BTW, on alignment, why doesn&#8217;t NT set CR0.AM by default? I am not expecting any OS to set EFLAGS.AC by default for compatibility reasons, but OSes should at least set CR0.AM so that apps that do set EFLAGS.AC will actually get the alignment check exceptions. It would help a lot when testing for alignment issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>