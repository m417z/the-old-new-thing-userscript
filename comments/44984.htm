<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1187394">
				<div id="div-comment-1187394" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187394">
			April 29, 2015 at 7:44 am</a>		</div>

		<p>Out if interest, how do situations like this (where there&#39;s no supported way of doing something, but there&#39;s an undocumented-yet-commonly-used solution) usually get resolved? Does the behaviour get formally documented and committed to, or is a new mechanism introduced and the undocumented solution deprecated (and potentially relegated to an app compat shim)?</p>
<p>I&#39;d guess that the answer is &quot;both&quot;, but it would be interesting to know what approach is preferred when you have a choice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1187414">
				<div id="div-comment-1187414" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187414">
			April 29, 2015 at 7:56 am</a>		</div>

		<p>&gt; This behavior is not documented, but the ATL library relies on it, so if the undocumented behavior changes in the future, it&#39;ll have an app compat shim to keep ATL happy.</p>
<p>I wouldn&#39;t rely on it. It&#39;s possible that for instance the theoretical app compat shim only enables itself if it detects that the process uses ATL, or only does its work if it has been called by a DLL called &quot;atlXX.dll&quot;.</p>
<p>It&#39;s also possible that the app compat shim does only the minimum it has to do for ATL, and whatever ATL needs is less than what you need.</p>
<p>It&#39;s ALSO possible that one of these annoying evil intercepting DLLs replaces your Get­Class­Info call with its own &quot;shim&quot; which returns only 0 or 1, because the DLL writer looked only at the documentation and treated it as a &quot;bool&quot;.</p>
<p>So yeah, better treat it as an opaque value as much as possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1187424">
				<div id="div-comment-1187424" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">poizan42</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187424">
			April 29, 2015 at 8:01 am</a>		</div>

		<p>It&#39;s almost like someone should have realised that if ATL need the information then somebody else does, and made it officially supported. Though I&#39;m going to guess that this is most likely a case of bad communication between teams.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com0003400182c5b091 odd alt thread-odd thread-alt depth-1" id="comment-1187434">
				<div id="div-comment-1187434" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Eddie+Lotter' rel='external nofollow' class='url'>Eddie Lotter</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187434">
			April 29, 2015 at 9:23 am</a>		</div>

		<p>Raymond, a couple of problem sentences:</p>
<p>&quot;The customer found that the call to ERROR_CLASS_EXISTS&quot; should be &quot;The customer found that the call to Register­Class returned ERROR_CLASS_EXISTS&quot;</p>
<p>and</p>
<p>&quot;that atom can in turned by used as a synonym for the class name.&quot; should be &quot;that atom can in turn be used as a synonym for the class name.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1187444">
				<div id="div-comment-1187444" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187444">
			April 29, 2015 at 10:04 am</a>		</div>

		<p>Considering that ATL code usually winds up embedded in the EXE or DLL which consumes it, and it&#39;s usually used to create ActiveX controls that could be loaded by any process in the system, it would be a bad idea to change the return behaviour of GetClassInfoEx. Better to document it so that no-one does break it in future.</p>
<p>Mind you, examining the source for ATL 6.0 (SP6), ATL 9.0 (SP1) and ATL 12.0 (Update 4), although CContainedWindowT::RegisterWndSuperclass does return an ATOM, CContainedWindowT::Create only tests whether the return value is 0. Unfortunately, CContainedWindowT::RegisterWndSuperclass is public and is documented in MSDN.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hikari odd alt thread-odd thread-alt depth-1" id="comment-1187454">
				<div id="div-comment-1187454" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Chris+Crowther' rel='external nofollow' class='url'>Chris Crowther</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187454">
			April 29, 2015 at 11:25 am</a>		</div>

		<p>I think &quot;not documented&quot; means &quot;no public documentation exists for this&quot; rather than &quot;no documentation exists&quot;, i.e. the functionality is almost certainly documented internally within Microsoft.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1187464">
				<div id="div-comment-1187464" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187464">
			April 29, 2015 at 11:35 am</a>		</div>

		<p>Question:</p>
<p>Why not make an option to pass all class info straight to CreateWindowEx, without having to register a class? Classes only make sense for reusable windows. For app windows, who cares?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1187474">
				<div id="div-comment-1187474" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187474">
			April 29, 2015 at 11:49 am</a>		</div>

		<p>@alegr1: Well, then you would have two kinds of windows, reusable and one-off, with different ways of creating them. I&#39;m not sure what is simpler.</p>
<p>I always use the value returned by RegisterClass as a class name in CreateWindow, kind of &quot;registered window class&quot; handle.</p>
<p>Makes the code prettier than using a magic string twice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1187484">
				<div id="div-comment-1187484" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187484">
			April 29, 2015 at 12:46 pm</a>		</div>

		<p>&quot;There is no way to query the registered window class atom table directly&quot; this is of course not 100% true, this atom table is shared with some other things and just by using public APIs you can glean useful information, for debugging purposes only of course&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1187504">
				<div id="div-comment-1187504" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187504">
			April 30, 2015 at 1:13 am</a>		</div>

		<p>@Chris Crowther: Are you implying that for all APIs, there&#39;s one version of public documentation and one version with &quot;secret&quot; details?</p>
<p>I can understand not publishing documentation of an API at all if you don&#39;t want others to rely on it. But what would be the point of making an API public but keeping some details secret? This seems like a huge waste of resources to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1187514">
				<div id="div-comment-1187514" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187514">
			April 30, 2015 at 4:28 am</a>		</div>

		<p>&gt; ● Possibly others, too.</p>
<p>Thereby avoiding mention of registered window messages!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle odd alt thread-odd thread-alt depth-1" id="comment-1187534">
				<div id="div-comment-1187534" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187534">
			April 30, 2015 at 5:51 am</a>		</div>

		<p>@Sven2: Keeping track of we-need-this-for-compatibility behaviors without binding them as part of the public contract is one reason for having separate documentations. &nbsp;Keep in mind this documentation could be captured in a source comment, changelog, or something more formal. &nbsp;I don&#39;t think Chris was implying that Microsoft had a secret MSDN or anything like that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1187544">
				<div id="div-comment-1187544" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jonwil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187544">
			April 30, 2015 at 7:02 am</a>		</div>

		<p>Why didn&#39;t they either make the function actually return a BOOL (by converting the value to TRUE or FALSE explicitly) or declare it to return an atom (which is what it actually returns)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1187574">
				<div id="div-comment-1187574" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187574">
			April 30, 2015 at 7:45 am</a>		</div>

		<p>I suspect the scenario is much less nefarious than hidden docs. &nbsp;I suspect it was more along the lines like one of the ATL guys (at a much younger, smaller Microsoft) was talking to one of the Windows guys and mentioned that he needed this functionality. &nbsp;The Windows guy realized he could sneak in the extra behavior without breaking the contract to Get­Class­Info and just did it. &nbsp;The ATL guy used it and pretty much no one else noticed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fjeldse even thread-even depth-1" id="comment-1187634">
				<div id="div-comment-1187634" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187634">
			April 30, 2015 at 8:51 am</a>		</div>

		<p>@SimonRev: I suspect the scenario is even less nefarious than that. Back when the function was introduced memory was more precious, so I suspect that return the atom handle directly would save space and be faster than doing an additional check. Why the function was officially returning a BOOL is a mystery though; perhaps the designers didn&#39;t want to be hemmed-in by exposing an implementation detail in the future if they changed the behaviour of the function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hikari odd alt thread-odd thread-alt depth-1" id="comment-1187794">
				<div id="div-comment-1187794" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Chris+Crowther' rel='external nofollow' class='url'>Chris Crowther</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187794">
			May 1, 2015 at 5:28 am</a>		</div>

		<p>MNGoldenEagle: That&#39;s exactly what I meant, yes :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1187844">
				<div id="div-comment-1187844" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187844">
			May 1, 2015 at 8:17 am</a>		</div>

		<p>About ClassName/ClassAtom table, by personal experience:</p>
<p>from NT4 to Win7&#8230; we can build a table of names by scanning the range C000-FFFF via GetClipboardFormatName (not via GlobalGetAtomName), and this table will contain not only all ClipboardFormatNames, but also all Registered Window Messages and all Registered Window Classes.</p>
<p>Actually formats, messages and the classes lie in different tables, but share common values: for example, if the Name of Registered WindowMessage and the Name of Registered WindowClass are equal, then its return values (atoms) are equal also.</p>
<p>And so we can get ClassName/ClassAtom via GetClipboardFormatName/GetClassInfoEx, respectively.</p>
<div class="post">[<em>And then the window manager team decides to split them into separate atom tables since lumping them into one table is getting full, and now your app breaks. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1187894">
				<div id="div-comment-1187894" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1187894">
			May 1, 2015 at 7:46 pm</a>		</div>

		<p>&gt; [And then the window manager team decides&#8230;]</p>
<p>Oh, Raymond, &quot;from NT4 to Win7&quot; = 20 long years, I&#39;m afraid I (with my hypothetical app) will not live to the moment &quot;And then&quot; :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1188144">
				<div id="div-comment-1188144" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150429-00/?p=44984#comment-1188144">
			May 5, 2015 at 11:07 am</a>		</div>

		<p>Serious question: Why doesn&#39;t Microsoft just change the return value of this function to ATOM in Windows.h, and take this as a formal dependency? There&#39;s no app-compat risk in this case, since code that previously relied on the function returning a BOOL will silently continue to work, but it will avoid the undocumented behavior by documenting it in the return type of the function itself.</p>
<div class="post">[<em>sizeof(ATOM) != sizeof(BOOL) so this would be a breaking change. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>