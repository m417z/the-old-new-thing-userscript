<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1305726">
				<div id="div-comment-1305726" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305726">
			August 8, 2017 at 8:54 am</a>		</div>

		<p>odd that the compiler generates a form that DEC didn&#8217;t recommend. I know they go out of their way to do that sort of optimization on x86</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1305735">
				<div id="div-comment-1305735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Bremner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305735">
			August 8, 2017 at 10:19 am</a>		</div>

		<p>Integer division by a constant can be converted to a reciprocal multiplication and a correction step (usually a shift or add). <a href="https://gmplib.org/~tege/divcnst-pldi94.pdf" rel="nofollow">Division by Invariant Integers using Multiplication</a> is a widely cited paper on this topic.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1305815">
				<div id="div-comment-1305815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305815">
			August 8, 2017 at 9:17 pm</a>		</div>

		<p>Presumably that would be the part in the article where he says:<br />
• If dividing by a constant n, you may be able to use the UMULH instruction to multiply by (2⁶⁴÷n) and then extract the high 64 bits (which means to divide by 2⁶⁴).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1305745">
				<div id="div-comment-1305745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305745">
			August 8, 2017 at 10:41 am</a>		</div>

		<p>Ouch, the destination operand on the right!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1305746">
				<div id="div-comment-1305746" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305746">
			August 8, 2017 at 11:43 am</a>		</div>

		<p>If it weren&#8217;t for the fact I can&#8217;t get a modern HTTPS stack I would consider running NT4 on Alpha for a web server and laugh as memory corruption exploits that should yield SYSTEM don&#8217;t because their shellcode is for the wrong processor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1305756">
				<div id="div-comment-1305756" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Clarkstone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305756">
			August 8, 2017 at 12:19 pm</a>		</div>

		<p>Those logical operations look rather like a bitwise-logic unit that can switch between AND, OR, and XOR, plus an optional inversion on the right operand. That plus the choice of which way round the operands are gives you all of the bitwise operations except nand and nor.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1305775">
				<div id="div-comment-1305775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305775">
			August 8, 2017 at 1:31 pm</a>		</div>

		<p>I like your observation so much I reordered the table to reflect it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1305785">
				<div id="div-comment-1305785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305785">
			August 8, 2017 at 3:20 pm</a>		</div>

		<p>The instruction encoding supports this.  The function codes (using Raymond&#8217;s ordering) are:</p>
<p>0x00 AND<br />
0x20 BIS<br />
0x40 XOR<br />
0x08 BIC<br />
0x28 ORNOT<br />
0x48 EQV</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1" id="comment-1305825">
				<div id="div-comment-1305825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305825">
			August 8, 2017 at 11:15 pm</a>		</div>

		<p>I wonder that since all registers are 64 bit, will there be exception/interrupt thrown when you add 2 32-bit values with ADDL and result in carry/overflow.</p>
<p>If not, I think the &#8220;count number of leading zero bits&#8221; may in fact have some use.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1306456">
				<div id="div-comment-1306456" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thiago Macieira</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1306456">
			August 14, 2017 at 10:59 pm</a>		</div>

		<p>How does the compiler produce 32-bit logical right shifts? If loading 32-bit value from memory will sign extend the value to 64-bit, the upper half might contain 1 bits. Then, using SRL would shift in 1s instead of zeroes.</p>
<p>To perform that, the compiler would need to zero out the upper half first. How does it do that optimally?</p>
<p>I can think only of a very inefficient way with the instructions presented so far (zero a register, shift logically left 32, then AND with the actual value).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1306535">
				<div id="div-comment-1306535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1306535">
			August 15, 2017 at 9:42 am</a>		</div>

		<p>Stay tuned!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>