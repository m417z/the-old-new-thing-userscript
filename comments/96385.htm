<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1299655">
				<div id="div-comment-1299655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170613-00/?p=96385#comment-1299655">
			June 13, 2017 at 7:23 am</a>		</div>

		<p>One wonders what happens when the release fails due to the exceeded maximum count. I guess that&#8217;s one case where calling abort() makes some sense. Or putting whatever was managed by the semaphore in an invalid state and stop all requests. After all, it looks like counts would be leaked. (It&#8217;s hard to believe that the caller that provided the wrong count (thus proving that&#8217;s it&#8217;s buggy) can fix things up&#8230; Not that somehow stopping processing things associated with the semaphore won&#8217;t have bad consequences for the rest of the system.</p>
<p>Just an instance of garbage in, garbage out. Once you start with bad data, everything&#8217;s up.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1299665">
				<div id="div-comment-1299665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170613-00/?p=96385#comment-1299665">
			June 13, 2017 at 7:26 am</a>		</div>

		<p>I can&#8217;t imagine any use of a maximum count either. When I went to school they taught it as resource consumption but the modern semaphores don&#8217;t consume more with larger counts.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1299745">
				<div id="div-comment-1299745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170613-00/?p=96385#comment-1299745">
			June 13, 2017 at 3:06 pm</a>		</div>

		<p>Perhaps if the semaphore is limiting use of a resource, e..g, &#8220;only let three working threads at a time perform resource-hungry task A&#8221; ?  Typically, you would both claim and release the semaphore in the working threads, so the maximum count would only come into play if there was a bug, but I guess there might be scenarios where it is more convenient to release the semaphore from other threads and rely on the maximum count to avoid over-committing.  (A producer-consumer queue of some sort?)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1299675">
				<div id="div-comment-1299675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170613-00/?p=96385#comment-1299675">
			June 13, 2017 at 7:31 am</a>		</div>

		<p>Why would you want a semaphore with a maximum token count? What&#8217;s the use case?</p>
<p>The only thing I can think of is as a debugging aid. You know if you hit the maximum token count that one of the users is buggy and is releasing a semaphore too many times, either releasing a held semaphore more than once, or releasing a semaphore they never actually held. Spotting this and crashing before any more data gets corrupted, or breaking into a debugger, is your best bet.</p>
<p>However, in my experience with synchronisation primitives, the place where you notice the bug is rarely the place where the bug occurred. If the bug is at site A, then site A typically puts the primitive into a valid but unexpected state, and its only when site B tries to manipulate the primitive some time later that you notice it&#8217;s not in the state you thought it was in. So your data is already corrupt, and the debugger is showing you a call site where the code is correct.</p>
<p>I&#8217;ve had better results using static analysis, virtualisation/runtime monitoring, or adding copious logging (printf-style debugging) to track those down.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1299735">
				<div id="div-comment-1299735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170613-00/?p=96385#comment-1299735">
			June 13, 2017 at 2:58 pm</a>		</div>

		<p>Just knowing that there&#8217;s a bug can be useful, I guess, even if it doesn&#8217;t give you much of a clue as to the cause.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1299705">
				<div id="div-comment-1299705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170613-00/?p=96385#comment-1299705">
			June 13, 2017 at 9:24 am</a>		</div>

		<p>It&#8217;s odd that RELEASING a token is where the maximum token count comes in to play.  It sounds counterintuitive.  Releasing a token should decrease the token count!</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1299715">
				<div id="div-comment-1299715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170613-00/?p=96385#comment-1299715">
			June 13, 2017 at 9:32 am</a>		</div>

		<p>Releasing a token transfers ownership from the thread back to the semaphore itself, so the semaphore&#8217;s count of available tokens goes up.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1299727">
				<div id="div-comment-1299727" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170613-00/?p=96385#comment-1299727">
			June 13, 2017 at 2:38 pm</a>		</div>

		<p>You are right, of course.  Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>