<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-524183">
				<div id="div-comment-524183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pcooper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524183">
			July 11, 2007 at 10:11 am</a>		</div>

		<p>GetFileSize does the same thing, for the same reason. It just returns the high and low values rather than taking in the high and low values.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-524193">
				<div id="div-comment-524193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524193">
			July 11, 2007 at 10:34 am</a>		</div>

		<p>On Unix &#8212; it&#8217;s true that most (perhaps all?) Unix system calls will keep errno set to whatever it was before if they succeed. &nbsp;But all the system calls I&#8217;ve ever used have an unambiguous way of signaling success or failure, too. &nbsp;;-)</p>
<p>(It helped that when the large-file spec was added to POSIX (or whatever standard), it simply typedef&#8217;ed off_t to off64_t, and added new functions where needed. &nbsp;Most of the seek functions take and return an off_t (and the top bit of an off_t can never be set, so if the seek functions return a value less than zero, they failed). &nbsp;So if your program defines _FILE_OFFSET_BITS=64, then you get a 64-bit off_t (and the docs say you have to make sure all your libraries support it too), and the other file functions are redefined to be ones that handle the correct offset size. &nbsp;If you don&#8217;t set that define, then you get the old 32-bit off_t.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-524203">
				<div id="div-comment-524203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sohail</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524203">
			July 11, 2007 at 10:49 am</a>		</div>

		<p>That logic is a bug waiting to happen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-524213">
				<div id="div-comment-524213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524213">
			July 11, 2007 at 10:51 am</a>		</div>

		<p>If you did a SetLastError(ERROR_SUCESS) when an error did not occur would that potentially mask an important error that you wanted to find out about?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-524223">
				<div id="div-comment-524223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Psa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524223">
			July 11, 2007 at 11:05 am</a>		</div>

		<p>I think your table is wrong.</p>
<p>If lpDistanceToMoveHigh == NULL and retVal == INVALID_SET_FILE_POINTER then the function hasn&#8217;t necessarily failed. &nbsp;You need to call GetLastError.</p>
<p>For example, suppose the file offset is 0xfffffffe and you move forward 1 byte. &nbsp;The return value is 0xffffffff but the function didn&#8217;t fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-524243">
				<div id="div-comment-524243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Risto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524243">
			July 11, 2007 at 11:13 am</a>		</div>

		<p>In this context, how does it matter how any Unix does it? Is that way &quot;the right way&quot;, and give us the ability to time-travel to &quot;fix&quot; Win32?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-524253">
				<div id="div-comment-524253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Psa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524253">
			July 11, 2007 at 11:17 am</a>		</div>

		<p>Thinking about it a little more, shouldn&#8217;t the test be:</p>
<p>BOOL succeeded = (retVal != INVALID_SET_FILE_POINTER) || (GetLastError() == NO_ERROR);</p>
<p>It doesn&#8217;t depend on lpDistanceToMoveHigh.</p>
<div class=post>[<i>I think you&#8217;re right. But then again, if you&#8217;re using only 32-bit offsets and you seek to position 0xFFFFFFFF you&#8217;re on the verge of losing anyway. That one extra byte is probably not going to win you much. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-524293">
				<div id="div-comment-524293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jprl.com/Blog' rel='external nofollow' class='url'>Jonathan Pryor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524293">
			July 11, 2007 at 11:45 am</a>		</div>

		<p>RE: BryanK</p>
<p>Alas, Unix isn&#8217;t always consistent &#8212; there are some functions which have a <code>void' return value which requires checking</code>errno&#8217; to determine if an error occurred.</p>
<p><a rel="nofollow" target="_new" href="http://www.jprl.com/Blog/archive/development/mono/2007/Jun-29.html" rel="nofollow">http://www.jprl.com/Blog/archive/development/mono/2007/Jun-29.html</a></p>
<p>Granted, these aren&#8217;t system calls, but they&#8217;re still C library calls defined by POSIX. &nbsp;It&#8217;s unfortunate that some functions have this error reporting mechanism.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-524303">
				<div id="div-comment-524303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524303">
			July 11, 2007 at 12:06 pm</a>		</div>

		<p>&quot;So is that deemed a success case?&quot;</p>
<p>Yeah, what&#8217;s wrong with that? &nbsp;I&#8217;m really not seeing anything confusing or contradictory about what you&#8217;ve pasted for GetWindowsDirectory. &nbsp;A function can define success or failure however it wants, and in this case success isn&#8217;t defined by whether it was able to put the path into your buffer. &nbsp;I would suppose that this approach simplifies the function for the caller and minimizes the number of parameters, in addition to reserving failure cases for real failures like permission problems or something.</p>
<p>&quot;If the function succeeds [in finding the path to the Windows directory], the return value is the length of the string copied to the buffer, in TCHARs, not including the terminating null character [, but only if the buffer was large enough to hold the entire string]. &nbsp;If the length is greater than the size of the buffer, the return value is the size of the buffer required to hold the path. &nbsp;If the function fails [to find the path to the Windows directory], the return value is zero.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-524333">
				<div id="div-comment-524333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524333">
			July 11, 2007 at 12:28 pm</a>		</div>

		<p>&quot;Just because GetLastError() returned an error code doesn&#8217;t mean that the SetFilePointer function failed.&quot;</p>
<p>But if GetLastError() returned NO_ERROR, then it <em>does</em> mean the SetFilePointer function succeeded, right? &nbsp;Or does this function not SetLastError() if it fails when lpDistanceToMoveHigh == NULL?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-524343">
				<div id="div-comment-524343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524343">
			July 11, 2007 at 12:32 pm</a>		</div>

		<p>The atoi function from the C standard library has to be one of the worst offenders for overloading valid results with error codes.</p>
<p>It takes a string and returns an integer. If it cannot convert the string to an integer it returns zero.</p>
<p>There is no good way to check whether the input string represents zero or couldn&#8217;t be converted without having to re-create some of the logic of atoi (skipping blanks, handling the optional sign indicator).</p>
<p>SetFilePointer and GetFileSize are bad and unfortunate designs but at least they let you work out errors from successes in an easy and reliable way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-524353">
				<div id="div-comment-524353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524353">
			July 11, 2007 at 1:17 pm</a>		</div>

		<p>Jonathan Pryor: &nbsp;Ouch, that is a PITA; . &nbsp;I guess I just haven&#8217;t run into any of those functions yet, then. &nbsp;:-) &nbsp;(Certainly I&#8217;ve never used setgrent().)</p>
<p>Yikes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-524403">
				<div id="div-comment-524403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524403">
			July 11, 2007 at 2:00 pm</a>		</div>

		<p>@JS:</p>
<blockquote><p>
  &gt; But if GetLastError() returned NO_ERROR, then it <em>does</em> mean the SetFilePointer function succeeded, right? &nbsp;&lt;&lt;
</p></blockquote>
<p>The problem is that if GetLastError() returns some failure code, you can&#8217;t be sure that SetFilePointer() is what set the failure code unless the returned value is INVALID_SET_FILE_POINTER.</p>
<p>However, taking your point, the API sets the error code if it fails regardless of whether or not lpDistanceToMoveHigh is NULL. &nbsp;So you can test for failure using:</p>
<p>BOOL failed = (result == INVALID_SET_FILE_POINTER) &amp;&amp; (GetLastError() != &nbsp;ERROR_SUCCESS);</p>
<p>*Note that this is a corollary to Psa&#8217;s comment that success can be determined in either case using:</p>
<p>BOOL succeeded = (retVal != INVALID_SET_FILE_POINTER) || (GetLastError() == NO_ERROR);</p>
<p>I&#8217;d suggest using one of these tests for any use of SetFilePointer() &#8211; using 32 or 64 bit offsets &#8211; so you don&#8217;t have to worry about coding a nightmare logic puzzle.</p>
<p>Or just move on over to SetFilePointerEx().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-524433">
				<div id="div-comment-524433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Psa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524433">
			July 11, 2007 at 3:42 pm</a>		</div>

		<p>&#8220;But then again, if you&#8217;re using only 32-bit offsets and you seek to position 0xFFFFFFFF you&#8217;re on the verge of losing anyway.&#8221;</p>
<p>Only if you care about the value of the new file position, which you often don&#8217;t if you&#8217;re processing a file sequentially.</p>
<p>For example, suppose you&#8217;re processing a file that contains a sequence of sections, each section containing a header and variable length data. &nbsp;Like some compression formats or media files. &nbsp;In each section the size of the variable length data is stored using 32 bits in the header. &nbsp;You write the obvious code to skip through the file looking for particular records, and you use the error test recommended in this post. &nbsp;The program fails when a section happens to start at 0xFFFFFFFF. &nbsp;Get the error test right and it will reliably process files of any size.</p>
<div class=post>[<i>Well, actually you still can&#8217;t process files &gt;= 4GB since SetFilePointer will not let you move the file pointer past 0xFFFFFFFF when lpDistanceToMoveHgih is NULL. You really only gained one extra byte. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-524443">
				<div id="div-comment-524443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Psa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524443">
			July 11, 2007 at 5:12 pm</a>		</div>

		<p>&quot;SetFilePointer will not let you move the file pointer past 0xFFFFFFFF when lpDistanceToMoveHigh is NULL&quot;</p>
<p>This isn&#8217;t an obvious restriction. &nbsp;It really ought to be documented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-524453">
				<div id="div-comment-524453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524453">
			July 11, 2007 at 5:15 pm</a>		</div>

		<p>&#8220;Well, actually you still can&#8217;t process files &gt;= 4GB since SetFilePointer will not let you move the file pointer past 0xFFFFFFFF when lpDistanceToMoveHgih is NULL.&#8221;</p>
<p>It will if you pass FILE_CURRENT or FILE_END in the dwMoveMethod parameter.</p>
<p>e.g. if you do:</p>
<p>SetFilePointer(hFile, 0, NULL, FILE_END);</p>
<p>and the file is currently 0xFFFFFFFF bytes in size, you&#8217;ll get back 0xFFFFFFFF even though the function hasn&#8217;t failed.</p>
<div class=post>[<i>What I wrote is that you can&#8217;t go <u>past</u> 0xFFFFFFFF. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-524483">
				<div id="div-comment-524483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524483">
			July 11, 2007 at 6:13 pm</a>		</div>

		<p>Tangentially, I was recently emailed by a guy for whom Windows Installer completely stopped working. Every time he tried to install a product he got an error 2932.</p>
<p>Looking that up in the documentation revealed that the corresponding message is &quot;Could not create file [2] from script data. Error: [3]&quot;. I guessed that the last parameter is a Windows error code and asked him to get a verbose log so we could see what it was.</p>
<p>It turned out to be error 131, ERROR_NEGATIVE_SEEK. The only APIs documented to return this value are SetFilePointer and family: it means that the file pointer that would result from this call would be before the beginning of the file, which isn&#8217;t allowed. (Setting the file pointer beyond the end of the file isn&#8217;t a problem: if you do this, the next write you make is written to that location and the &#8216;hole&#8217; between the start of the file and the file pointer is filled with zeros.)</p>
<p>I couldn&#8217;t believe that Microsoft would make such a coding error that a) always failed on his machine, regardless of the package being installed, and yet b) worked fine on everyone else&#8217;s system. I therefore guessed that it was probably a rogue file system filter driver (e.g. an on-access anti-virus scanner). I don&#8217;t know if my guess was right, because he hasn&#8217;t responded.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-524273">
				<div id="div-comment-524273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524273">
			July 11, 2007 at 11:37 am</a>		</div>

		<p>Return value scenarios like this are bugs waiting to happen, no matter how much you explain them. That&#8217;s *because* of how much you *have* to explain them.</p>
<p>It reminds me of GetWindowsDirectory: &quot;If the function succeeds, the return value is the length of the string copied to the buffer, in TCHARs, not including the terminating null character.&quot; Then in the VERY NEXT SENTENCE it backtracks with &quot;If the length is greater than the size of the buffer, the return value is the size of the buffer required to hold the path.&quot; So is that deemed a success case? It must be, because the *next* sentence says &quot;If the function fails, the return value is zero.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-524513">
				<div id="div-comment-524513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524513">
			July 11, 2007 at 7:47 pm</a>		</div>

		<blockquote><p>
  &quot;SetFilePointer will not let you move the file pointer past</p>
<p>  0xFFFFFFFF when lpDistanceToMoveHigh is NULL&quot;
</p></blockquote>
<p>></p>
<blockquote><p>
  This isn&#8217;t an obvious restriction. &nbsp;It really ought to be documented.
</p></blockquote>
<p>It&#8217;s quite obvious: SetFilePointer returns the new file pointer value. If lpDistanceToMove is NULL, then it can&#8217;t return the new file pointer if it&#8217;s &gt; 0xFFFFFFFF.</p>
<blockquote><p>
  SetFilePointer(hFile, 0, NULL, FILE_END);
</p></blockquote>
<p>></p>
<blockquote><p>
  and the file is currently 0xFFFFFFFF bytes in size, you&#8217;ll get back</p>
<p>  0xFFFFFFFF even though the function hasn&#8217;t failed.
</p></blockquote>
<p>That&#8217;s answered by Mike&#8217;s comment: negative file pointers are not allowed. So 0xFFFFFFFF is not a valid file pointer if lpDistanceToMove is NULL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-524573">
				<div id="div-comment-524573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524573">
			July 11, 2007 at 9:25 pm</a>		</div>

		<blockquote><p>
  &gt;&gt; &quot;SetFilePointer will not let you move the file pointer past</p>
<p>  &gt;&gt; 0xFFFFFFFF when lpDistanceToMoveHigh is NULL&quot;</p>
<p>  &gt;</p>
<p>  &gt; This isn&#8217;t an obvious restriction. &nbsp;It really ought to be documented.
</p></blockquote>
<p>></p>
<blockquote><p>
  It&#8217;s quite obvious: SetFilePointer returns the new file pointer value.</p>
<p>  If lpDistanceToMove is NULL, then it can&#8217;t return the new file</p>
<p>  pointer if it&#8217;s &gt; 0xFFFFFFFF.
</p></blockquote>
<p>According to the documentation of SetFilePointer:</p>
<p>===================</p>
<p>If the SetFilePointer function succeeds and lpDistanceToMoveHigh is NULL, the return value is the low-order DWORD of the new file pointer.</p>
<p>===================</p>
<p>This implies that SetFilePointer() will move the file pointer past 0xFFFFFFFF even when lpDistanceToMoveHigh is NULL &#8211; you simply lose the high order half of the 64-bit file pointer in the result.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-524773">
				<div id="div-comment-524773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shannon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524773">
			July 12, 2007 at 12:56 pm</a>		</div>

		<p>It doesn&#8217;t imply that to me&#8230; it implies that <em>if</em> setFilePointer <em>will</em> move the file pointer past 0xffffffff when lpDistanceToMoveHigh is NULL, <em>then</em> all you get is the low order word. (actually, it states that.) That doesn&#8217;t imply that SetFilePointer is going to be willing to do that.</p>
<p>Or, boiled down a lot, (a =&gt; b) !=&gt; a</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-524783">
				<div id="div-comment-524783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524783">
			July 12, 2007 at 12:58 pm</a>		</div>

		<p>mikeb: I assume that this is an extra restriction (not fully documented) that reduces the incidence of wraparound bugs (since for both 0xFFFFFFFF + 1 and position 0 the return value of SetFilePointer is 0). Programs that don&#8217;t pass a valid lpDistanceToMoveHigh cannot cope with files over 4GB.</p>
<p>Dean Harding: the return value is unsigned. 0xFFFFFFFF is a valid return value for SetFilePointer (it represents an offset of 4GB minus one byte). What you cannot do is call SetFilePointer with FILE_CURRENT and a negative value larger than the current file pointer, with FILE_BEGIN and any negative value, or FILE_END and a negative value larger than the size of the file.</p>
<p>You cannot seek more than 2GB forwards (in one call) without specifying lpDistanceToMoveHigh &#8211; the lDistanceToMove value *is* treated as signed in this case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-524853">
				<div id="div-comment-524853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-524853">
			July 12, 2007 at 2:44 pm</a>		</div>

		<p>&gt;&gt; It doesn&#8217;t imply that to me&#8230; it implies that _if_ setFilePointer _will_ move the file pointer past 0xffffffff when lpDistanceToMoveHigh is NULL, _then_ all you get is the low order word. (actually, it states that.) That doesn&#8217;t imply that SetFilePointer is going to be willing to do that. &lt;&lt;</p>
<p>That&#8217;s 100% correct, but you can say the same for file offsets below 0xffffffff. SetFilePointer&#8217;s documentation makes no promise to work even for offsets below 0xffffffff (it could be written to always return a failure regardless of the parameters and still be strictly following it&#8217;s documentation &#8211; it wouldn&#8217;t be very useful, but it wouldn&#8217;t be breaking it documented claims).</p>
<p>However, empirical testing shows that SetFilePointer() behaves as Raymond and you describe (not that it would have to, though). But, the fact that it will *not* move the file pointer past 0xffffffff if lpDistanceToMoveHigh is NULL just happens to be undocumented behavior.</p>
<p>So, I think that Psa&#8217;s statement that &quot;This isn&#8217;t an obvious restriction. &nbsp;It really ought to be documented.&quot; has some merit. &nbsp;Not that I really expect or need to see a doc change, I just think that Psa&#8217;s point should not have been dismissed as something that was &#8216;quite obvious&#8217;. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-525423">
				<div id="div-comment-525423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SetFilePointerEx</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-525423">
			July 13, 2007 at 8:21 pm</a>		</div>

		<p>Does SetFilePointerEx have the same problems with 2^64-1 byte files?</p>
<p>Can SetFilePointerEx can only seek 2^63 bytes forward?</p>
<div class="post">[<i>I think you already have the information to answer this for yourself. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586793">
				<div id="div-comment-586793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/01/08/7022158.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070711-00/?p=26063#comment-586793">
			January 8, 2008 at 10:41 am</a>		</div>

		<p>They&#8217;re everywhere now.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>