<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-913983">
				<div id="div-comment-913983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skyborne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-913983">
			May 19, 2011 at 7:18 am</a>		</div>

		<p>I was once on a platform where a failed assert() called abort(), which did its job by issuing an illegal instruction to the CPU. &nbsp;I was expecting lots of output from my program and redirecting it all to a file, but the shell was helpfully reporting that my program died of an illegal instruction. &nbsp;It took several rounds of adding printf()s and wondering why I wasn&#39;t seeing any output to remember that I was capturing it. &nbsp;Derp!</p>
<p>(This being 10 years ago, details may not be 100% accurate. &nbsp;Please take with the necessary amount of salt.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914013">
				<div id="div-comment-914013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914013">
			May 19, 2011 at 7:46 am</a>		</div>

		<p>A good convention is that error codes should always be positive. &nbsp;Why? &nbsp;Because error code handling is often via the &quot;IF ERRORLEVEL <em>N</em>&quot;. &nbsp;The IF ERRORLEVEL <em>N</em> command test to see if the value is greater than or equal to; it doesn&#39;t do &quot;if not zero&quot; very easily.</p>
<p>Link to ERRORLEVE: <a rel="nofollow" target="_new" href="http://support.microsoft.com/kb/69576" rel="nofollow">support.microsoft.com/&#8230;/69576</a>) &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914023">
				<div id="div-comment-914023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914023">
			May 19, 2011 at 7:54 am</a>		</div>

		<p>Portable software should always only use exit statuses 0 through 127 inclusive (and <em>really</em> portable software should only use the macros EXIT_SUCCESS and EXIT_FAILURE). &nbsp;On POSIX systems, only the lower 8 bits of the exit status are retained, and exit statuses 128-255 are used for abnormal process termination (segfaults, abort(), etc.). &nbsp;So, normal process termination via exit() or returning from main should only use statuses 0-127.</p>
<p>You can then tell exactly how a process exited using macros such as WIFEXITED, WIFSIGNALED, etc. (<a rel="nofollow" target="_new" href="http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html" rel="nofollow">pubs.opengroup.org/&#8230;/wait.html</a>). &nbsp;There&#39;s no possibility of confusing normal termination with status 3 with abnormal termination via abort().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914043">
				<div id="div-comment-914043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914043">
			May 19, 2011 at 8:53 am</a>		</div>

		<p>A thing that bit me once is an unhandled exception uses its code as the exit code, and most managed exceptions have negative codes. This breaks IF ERRORLEVEL 1 and caused me quite a headache until I figured it out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914053">
				<div id="div-comment-914053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914053">
			May 19, 2011 at 9:02 am</a>		</div>

		<p>@Joshua: You&#39;re right. I&#39;m also accustomed to this convention.</p>
<p>Errors have negative return value. When program state is success but has something it wants to tell, use a positive value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914063">
				<div id="div-comment-914063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914063">
			May 19, 2011 at 9:11 am</a>		</div>

		<p>@Adam Rosenfield: And if you&#39;re trying to be <em>really</em>, <em>REALLY</em> portable (while writing in C or C++), you shouldn&#39;t return EXIT_SUCCESS or EXIT_FAILURE from main(). &nbsp;Instead, you should call exit() with one of those values.</p>
<p>Returning from main generally causes the value to be passed back to the OS without any interpretation. &nbsp;Calling exit(), however, will generally translate the EXIT_SUCCESS and EXIT_FAILURE values to corresponding values OS.</p>
<p>For example, on VAX/VMS, even values are failures, and odd values are successes. &nbsp;So returning EXIT_SUCCESS, which is typically defined to be 0, causes an apparent crash on exit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914073">
				<div id="div-comment-914073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914073">
			May 19, 2011 at 9:59 am</a>		</div>

		<p>You guys are way off. &nbsp;Error code 3 on Windows is ERROR_PATH_NOT_FOUND. &nbsp;Clearly the program could not find the correct code path to take.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914083">
				<div id="div-comment-914083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914083">
			May 19, 2011 at 10:03 am</a>		</div>

		<p>@Adrian: No, returning from main is entirely equivalent to calling exit. &nbsp;C90 ยง2.1.2.2:</p>
<p>&quot;A return from the initial call to the main function is equivalent</p>
<p>to calling the exit function with the value returned by the main</p>
<p>function as its argument. &nbsp;If the main function executes a return that</p>
<p>specifies no value, the termination status returned to the host</p>
<p>environment is undefined.&quot;</p>
<p>Or the more recent C99 ยง5.1.2.2.3:</p>
<p>&quot;If the return type of the main function is a type compatible with int, a return from the</p>
<p>initial call to the main function is equivalent to calling the exit function with the value</p>
<p>returned by the main function as its argument;10) reaching the } that terminates the</p>
<p>main function returns a value of 0. If the return type is not compatible with int, the</p>
<p>termination status returned to the host environment is unspecified.&quot;</p>
<p>That behavior you describe on VAX/VMS was likely pre-ANSI C where the language was not standardized.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914093">
				<div id="div-comment-914093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914093">
			May 19, 2011 at 10:25 am</a>		</div>

		<p>Adrian said &quot;portable&quot; not &quot;standards compliant&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914103">
				<div id="div-comment-914103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jim steele</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914103">
			May 19, 2011 at 11:02 am</a>		</div>

		<p>Clearly, the number three refers to the number of rank insignia on Commander Riker&#39;s uniform.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes even thread-even depth-1" id="comment-914123">
				<div id="div-comment-914123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914123">
			May 19, 2011 at 12:19 pm</a>		</div>

		<p>@jim steele &#8211; I don&#39;t know which is worse &#8212; that you made that reference, or that I know exactly what you&#39;re talking about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914153">
				<div id="div-comment-914153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914153">
			May 19, 2011 at 1:37 pm</a>		</div>

		<p>@jim steele</p>
<p>That was fantastic. I&#39;m still chuckling to myself a couple minutes later.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914163">
				<div id="div-comment-914163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914163">
			May 19, 2011 at 7:13 pm</a>		</div>

		<p>But&#8230; Riker was &quot;number one&quot;??</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914183">
				<div id="div-comment-914183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914183">
			May 20, 2011 at 12:19 am</a>		</div>

		<p>@Adam: &quot;reaching the } that terminates the main function returns a value of 0&quot;</p>
<p>I&#39;ve worked with an awfully large number of C compilers that don&#39;t comply with this requirement.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914203">
				<div id="div-comment-914203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914203">
			May 20, 2011 at 1:06 am</a>		</div>

		<p>That said, it&#39;s an awful requirement from a purist standpoint, where a function whose return type is int should always have an explicit return statement.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914253">
				<div id="div-comment-914253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914253">
			May 20, 2011 at 4:19 am</a>		</div>

		<p>3 is an awful value for abort(), because it can be very easily confused with a legitimate exit code (as happened with that customer).</p>
<p>I did a quick test on a Linux machine, and the value it returns is much better: 134. This is much harder to confuse with a legitimate exit code. It is also a better value if you follow that the &quot;higher value indicates more severe failure&quot; rule of thumb.</p>
<p>(Why 134? In hex it is 0x86, and SIGABRT is 6, so I can guess it is simply the signal number with a high bit set.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914263">
				<div id="div-comment-914263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914263">
			May 20, 2011 at 5:18 am</a>		</div>

		<p>@Jules: that&#39;s because it&#39;s a recent addition. It&#39;s a C++-ism that was backported to C99. C89 says: &quot;if the main function executes a return that specifies no value, the termination status returned to the host environment is undefined&quot; (2.1.2.2) and &quot;reaching the } that terminates a function is equivalent to executing a return statement without an expression&quot; (3.6.6.4). Not returning anything from main() is &quot;merely&quot; undefined behavior in C89, which of course compilers don&#39;t need to do anything about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914343">
				<div id="div-comment-914343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914343">
			May 20, 2011 at 9:21 am</a>		</div>

		<p>@Cesar: Yes, see my first comment and the documentation for wait(2). &nbsp;Processes terminated with a signal are given the exit status (128 + signal#).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914223">
				<div id="div-comment-914223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">K&amp;R</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914223">
			May 20, 2011 at 4:07 am</a>		</div>

		<p>In *pure* K&amp;R C a return type of int was assumed for functions which didn&#39;t specify any explicit type.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914463">
				<div id="div-comment-914463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110519-00/?p=10623#comment-914463">
			May 21, 2011 at 12:29 pm</a>		</div>

		<p>Actually, that&#39;s the shell that populates &quot;$?&quot; with 128+signal. The actual value given by wait(2) is 16 bits and fully distinguishes between an 8-bit exit status and a signal termination, along with additional information to represent suspend/continue and a flag for whether the core was dumped. It&#39;s still a good idea to avoid exit statuses of 128 or above, so that shell scripts can make a distinction.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>