<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1225041">
				<div id="div-comment-1225041" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160127-00/?p=92934#comment-1225041">
			January 27, 2016 at 8:28 am</a>		</div>

		<p>I hadn&#8217;t realized that the order objects were destroyed in was guaranteed by the standard &#8211; thanks for the pointer.  For those curious, this StackOverflow post goes into the details a bit more: <a href="http://stackoverflow.com/questions/14688285/c-local-variable-destruction-order" rel="nofollow">http://stackoverflow.com/questions/14688285/c-local-variable-destruction-order</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1225072">
				<div id="div-comment-1225072" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160127-00/?p=92934#comment-1225072">
			January 27, 2016 at 11:08 am</a>		</div>

		<p>Even further, [class.base.init](10) says &#8220;non-static data members [of a class] are initialized in the order they were declared in the class deÔ¨Ånition&#8221; (note! not the order of initialization in the constructor!) and [class.dtor](8) says that &#8220;Bases and members are destroyed in the reverse order of the completion of their constructor&#8221; so they destruct in reverse order of declaration.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-maurits even depth-3 parent" id="comment-1225121">
				<div id="div-comment-1225121" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160127-00/?p=92934#comment-1225121">
			January 27, 2016 at 3:36 pm</a>		</div>

		<p>Compiler non-standard exception feature request: allow me to enforce that bases/members in the initializer list are in the same order as the class definition.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-gregm odd alt depth-4 parent" id="comment-1225123">
				<div id="div-comment-1225123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160127-00/?p=92934#comment-1225123">
			January 27, 2016 at 5:18 pm</a>		</div>

		<p>Clang and GCC already do this.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1225181">
				<div id="div-comment-1225181" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160127-00/?p=92934#comment-1225181">
			January 28, 2016 at 5:24 am</a>		</div>

		<p>&gt; Clang and GCC already do this.</p>
<p>Only if you use -Werror, since it&#8217;s a warning. I&#8217;d expect it to be the same in MSVC (a warning which can be turned into an error in the command line).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1225102">
				<div id="div-comment-1225102" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160127-00/?p=92934#comment-1225102">
			January 27, 2016 at 12:22 pm</a>		</div>

		<p>This is a huge feature in C++ and has been for a long time: reliable construction/destruction order of objects is critical to making resource lifetime management (memory, files, handles, whatever) more, well, manageable for us humans. This can make awkward error-handling a lot easier for the programmer, as when you need to use multiple resources in a function, and acquiring them may not be guaranteed, Use classes that acquires in the constructors, and releases in the destructors, and you can make error handling cleanup as simple as returning from the function (or throwing an exception) at the spot where a problem is encountered. I sometimes say that &#8216;}&#8217; is my favorite C++ &#8216;operator&#8217;.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ipoverscsi even thread-odd thread-alt depth-1 parent" id="comment-1225044">
				<div id="div-comment-1225044" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ipoverscsi' rel='external nofollow' class='url'>ipoverscsi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160127-00/?p=92934#comment-1225044">
			January 27, 2016 at 8:30 am</a>		</div>

		<p>Raymond: it&#8217;s been some time since I looked at the C++ specification, but is it really guaranteed that objects will be destructed in the opposite order of construction within an activation record? This would have to been the case for the assertion that &#8220;RAII would have solved [&#8230;] the order-of-destruction problem&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1225054">
				<div id="div-comment-1225054" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160127-00/?p=92934#comment-1225054">
			January 27, 2016 at 8:42 am</a>		</div>

		<p>It does. How nice!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1225071">
				<div id="div-comment-1225071" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160127-00/?p=92934#comment-1225071">
			January 27, 2016 at 10:30 am</a>		</div>

		<p>It is in there with the class destructors.<br />
There is an unconditional statement that bases and members are destroyed in the reverse order of construction. See 12.4 paragraph 8, unless it has changed in the interim.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1225152">
				<div id="div-comment-1225152" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160127-00/?p=92934#comment-1225152">
			January 28, 2016 at 2:55 am</a>		</div>

		<p>Although temporaries used in the construction of a variable (or temporary with an extended lifetime) will get constructed before that variable but also destroyed before that variable is destroyed. (You can use this to detect whether a RAII class got assigned to a variable or just created incorrectly as a temporary by mistake.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>