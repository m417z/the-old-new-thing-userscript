<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (34)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-757333">
				<div id="div-comment-757333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757333">
			July 27, 2009 at 10:19 am</a>		</div>

		<p>Good to know I&#8217;m doing things right. :)</p>
<p>Reminds me of a strange experience I&#8217;ve had with Sleep() though. &nbsp;Sometimes I need to poll and wait for an event on another thread to finish (or an asynchronous event such as a response to a network request) before I can continue, though, and so I choose to use the Sleep method myself. &nbsp;Interestingly enough, simply using Sleep(0) to yield execution to another thread results in high CPU usage:</p>
<p>Dim timeout As TimeSpan = somevalue</p>
<p>Dim timeoutat As Date = Date.Now + timeout</p>
<p>While operationnotcomplete AndAlso Date.Now &lt; timeoutat</p>
<p>&nbsp;Threading.Thread.Sleep(0)</p>
<p>End While</p>
<p>Sorry for the VB.NET, and the .NET in general, I know this is not a .NET blog but hey I figure that Sleep function just wraps the WinAPI Sleep anyway.</p>
<p>Anyways, I never did figure out the high CPU usage, unless it&#8217;s simply because my CPU didn&#8217;t have anything better to do than run this while loop repeatedly, querying the system time every iteration. &nbsp;Changing the sleep period to 10ms was more than enough to bring down the CPU usage without any noticeable delays.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757343">
				<div id="div-comment-757343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757343">
			July 27, 2009 at 10:23 am</a>		</div>

		<blockquote><p>
  I don&#8217;t quite understand why you want to pause every so often. Why not just do the work at low priority?
</p></blockquote>
<p>I&#8217;m not the author of the question but I followed your link. &nbsp;Francois&#8217; quote is:</p>
<p>while( fKeepGoing )</p>
<p>{</p>
<p>//Check something</p>
<p>Sleep(50);</p>
<p>}</p>
<p>so if I understand him, he wants only to &quot;check&quot; something every 50 ms. I assume most of the times that check will say &quot;nothing new&quot; and once in a while it will decide to do some more work.</p>
<p>What is it that he checks? I don&#8217;t know, I know that having a callback is better design when possible, and that Win32 can actually really notify for some events properly so that he doesn&#8217;t have to put that small 50 ms constant in</p>
<p>WaitForSingle( hEvent, 50 )</p>
<p>But as an illustration of his direction, I remember as I was impressed to discover:</p>
<p>Running a Script Based on an Event</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/aa393250" rel="nofollow">http://msdn.microsoft.com/en-us/library/aa393250</a>(VS.85).aspx</p>
<p>It sounded just too good to be true. And it was.</p>
<p>When I searched more I&#8217;ve seen that the event there is not really an event but polling where &quot;WITHIN 5 &quot; means &quot;run the query every 5 seconds.&quot; At least the interface is in seconds, and the implementation maybe doesn&#8217;t have to access the hard disk, so maybe it&#8217;s actually still good enough to conserve battery power on the notebook. I&#8217;ve never investigated further.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757353">
				<div id="div-comment-757353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757353">
			July 27, 2009 at 10:26 am</a>		</div>

		<p>It seems to me that there is some justification for the methodology.</p>
<p>You (A) want to use less CPU, but (B) want some real CPU time so that the job does get done reasonably quickly.</p>
<p>Going low priority could completely starve the thread of cpu time, at least temporarily, and I&#8217;m not really sure what limits are placed on that. Is it concievable that a low priority thread could go for several seconds without any attention? Several minutes?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757363">
				<div id="div-comment-757363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757363">
			July 27, 2009 at 10:26 am</a>		</div>

		<p>Dan: &quot;another thread to finish (or an asynchronous event such as a response to a network request)&quot;</p>
<p>Both things can be done using the real WaitFor&#8230; calls or whatever the .NET equivalents for that call are, I&#8217;m certain tath they must exist. You shouldn&#8217;t use polling for something that doesn&#8217;t have to be polled at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757373">
				<div id="div-comment-757373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757373">
			July 27, 2009 at 10:31 am</a>		</div>

		<p>In my debug builds, I do this when I want code to wait until I attach the debugger.</p>
<p>while (!IsDebuggerPresent ()) Sleep (1000);</p>
<p>__debugbreak ();</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757383">
				<div id="div-comment-757383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757383">
			July 27, 2009 at 10:39 am</a>		</div>

		<p>@Joseph: How long a low priority thread can wait for CPU time is probably entirely dependent on the quality and fairness of the scheduler in question. That is almost certainly a &quot;real&quot; implementation detail that doesn&#8217;t have much in the way of back-compat requirements, and is therefore likely to change significantly between different versions of Windows.</p>
<p>More recent kernels are probably fairer than older ones. e.g. NT6+ (Vista and later) tracks cpu usage by cycle count rather than by time intervals as older versions (NT5.x-) did.</p>
<p>Aside from that, I&#8217;m not aware of much detail having been released on Windows&#8217; schedulers, so you&#8217;ll probably have to do your own benchmarking to find out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757393">
				<div id="div-comment-757393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757393">
			July 27, 2009 at 10:43 am</a>		</div>

		<p>Another possibility is that the questioner was wondering whether using Sleep was more efficient than WaitFor. And I believe the answer is that Sleep is implemented as a call to WaitFor, so there is no difference.</p>
<p>As for why somebody might want to do this, there are many possible things you might want to poll. One example is checking to see if a file on the network has changed. Although Windows has an API to notify you when a directory changes, network fileservers are under no obligation to support it, so you may have to poll.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757413">
				<div id="div-comment-757413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave O</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757413">
			July 27, 2009 at 11:17 am</a>		</div>

		<p>@Dan: Sleep(0) will do nothing if there&#8217;s no other thread ready to run on that CPU core. So it will help reduce CPU usage of a thread when there&#8217;s other competing threads, but it won&#8217;t yield to idle. You have to give the system some hint as to how much time you want to yield if you want to do that (or some event on which you want to do so and use WaitFor*).</p>
<p>I believe the most basic option would be to use SwitchToThread() to give up the timeslice (essentially, WaitFor(next_tick) ).</p>
<p>Otherwise you need to estimate the time you want to yield for (and maybe mess about with timeBeginPeriod if this is down around the scheduling quantum &#8211; e.g. for frame sync in games or, worse, emulation, although I keep hoping to find out about a better method for doing that&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757423">
				<div id="div-comment-757423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757423">
			July 27, 2009 at 11:26 am</a>		</div>

		<blockquote><p>
  Anyways, I never did figure out the high CPU usage, unless it&#8217;s simply because my CPU didn&#8217;t have anything better to do than run this while loop repeatedly, querying the system time every iteration.
</p></blockquote>
<p>Sleep( 0 ) only discards your quantum of the CPU. When no other thread is wainting to run, your thread will be the next to run.</p>
<p>Idle is never executed when another thread may run.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757453">
				<div id="div-comment-757453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757453">
			July 27, 2009 at 12:01 pm</a>		</div>

		<p>If you have just a &quot;Sleep&quot; in your production code and no other way of waking up that thread then in my book that is a poor solution.</p>
<p>The trick to getting a system performing well, is to not do anything as efficiently as possible in order to get out of the way, and to be ready to start doing your thing as soon as the conditions are right.</p>
<p>The one forgotten about is also to stop doing it when you are no longer required, eg application shutdown, do we have to wait for all these sleeps to expire before the process can exit?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757473">
				<div id="div-comment-757473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757473">
			July 27, 2009 at 12:56 pm</a>		</div>

		<p>Polling is generally bad compared to being awakened when an interesting event happens, but there are legitimate reasons to want to have a thread do work, sleep, and repeat.</p>
<p>If you have one thread cranking through a simulation, and you want to have another thread update the UI to give the user a sense of progress, then the work-sleep-repeat pattern makes sense. &nbsp;There&#8217;s no point in updating the UI faster than a human can appreciate the changes. &nbsp;Making the visualization thread low-priority would make the UI jerky, assuming the normal-priority threads ever relinquish control.</p>
<p>Also, the 100 ms figure quoted as reaction time seems a bit low. &nbsp;Wikipedia says human reaction times are often more than double that. &nbsp;I have heard 100 ms described as the maximum time the UI should take to respond to a user action before the UI starts to feel hesitant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757483">
				<div id="div-comment-757483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757483">
			July 27, 2009 at 1:18 pm</a>		</div>

		<p>One place I&#8217;ve seen similar code is in games that are framerate-locked. &nbsp;Although in that case you would (hopefully) be waiting for a variable amount of time rather than a hard-coded amount.</p>
<p>Whether or not it&#8217;s useful or harmful in the long run people do frequently complain about 100% cpu usage. &nbsp;Sometimes were forced to fix the perception of a problem in addition to real problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757493">
				<div id="div-comment-757493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757493">
			July 27, 2009 at 1:48 pm</a>		</div>

		<p>In regards to sleep(0), it should be noted that it will not yield to lower priority threads (at least under normal circumstances.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757503">
				<div id="div-comment-757503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave O</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757503">
			July 27, 2009 at 1:51 pm</a>		</div>

		<p>Adrian: &quot;the 100 ms figure quoted as reaction time seems a bit low. &nbsp;Wikipedia says human reaction times are often more than double that. &nbsp;I have heard 100 ms described as the maximum time the UI should take to respond to a user action before the UI starts to feel hesitant.&quot;</p>
<p>Perception time != reaction time. 100ms is probably a good ballpark, but it depends on the situation, particularly if there&#8217;s sound involved.</p>
<p>If you&#8217;re watching a video with sound sync problems you can perceive errors as low as 50ms. And Guitar Hero on a HDTV with 60ms lag is bad enough. 100ms would be a nightmare!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757513">
				<div id="div-comment-757513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757513">
			July 27, 2009 at 1:55 pm</a>		</div>

		<p>Mike:</p>
<p>Indeed it is gameloops that I was thinking of with my suggestion that low priority threads were sometimes unacceptable.</p>
<p>A fixed-step physics thread and an interpolating-renderer thread. </p>
<p>The rendering thread should run full steam as much as possible, but the physics thread needs to idle from time to time if its getting too far ahead of &#8220;real time.&#8221;</p>
<div class=post>[<i>Synchronization against wall-clock time is clearly not the issue in the original question. My comments clearly do not apply to gameloops, but I didn&#8217;t realize people would interpret that they were intended to. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757523">
				<div id="div-comment-757523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Van</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757523">
			July 27, 2009 at 2:03 pm</a>		</div>

		<p>@Mike</p>
<p>A lot of games engines use co-routines (using fibers if they&#8217;re on xbox) and just yield to another thread instead of having a timeout.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757543">
				<div id="div-comment-757543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sascha</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757543">
			July 27, 2009 at 4:53 pm</a>		</div>

		<p>a spellchecker that consumes 100% cpu in a low priority thread can be quite a nuisance when running in a vm or other shared environment.</p>
<p>it also makes it more complicated for power management with a dynamic frequency scaling cpu.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-757573">
				<div id="div-comment-757573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757573">
			July 27, 2009 at 7:38 pm</a>		</div>

		<p>&#8220;if the user accidentally changes the process priority from low to real-time&#8221;</p>
<p>What the&#8230;? How does a user &#8220;accidentally&#8221; change a process priority from low to real-time? Especially when you can see in Task Manager that it&#8217;s already consuming 100% (or near 100%) CPU time!</p>
<div class=post>[<i>If you&#8217;re going to worry about the user screwing with your process, you have bigger things to worry about. What if the user accidentally terminates the thread? What if the user accidentally suspends the UI thread? What if the user accidentally VirtualFree&#8217;s your process heap? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757593">
				<div id="div-comment-757593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mythbuster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757593">
			July 27, 2009 at 9:13 pm</a>		</div>

		<p>If it&#8217;s single time rare occurance I would agree with the 0-200 ms area figure to not being very perceivable. But lets suppose it&#8217;s something more frequent. Such as opening the explorer. Suppose for years you&#8217;ve seen the window pop in 66 ms and then someone at MS decides to add some features that triple that time to around 200 ms.</p>
<p>And remember, pressing a key you hear a sound coming from hitting it so that&#8217;s the start point of the measurement, not when explorer receives the command.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757603">
				<div id="div-comment-757603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mythbuster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757603">
			July 27, 2009 at 9:16 pm</a>		</div>

		<blockquote><p>
  a spellchecker that consumes 100% cpu in a low priority thread can be quite a nuisance when running in a vm or other shared environment.
</p></blockquote>
<p>same goes for defraggers in Vista and Win7 that think the user is idle when he may be actually doing streaming video capture or playing a software music instrument.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757623">
				<div id="div-comment-757623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Bacher</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757623">
			July 27, 2009 at 11:08 pm</a>		</div>

		<p>Use the multimedia timers with the periodic flag in order to limit frame rate:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms712713" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms712713</a>(VS.85).aspx</p>
<p>Sleep and WaitFor don&#8217;t tell Windows your intent; the MM Timer with the periodic flag does, and so Windows knows you are trying to run at 20fps (50ms interval), and does its best to invoke your function every 50ms.</p>
<p>If you use the WaitFor approach, you would run WaitFor and check the result. &nbsp;For a time out result, you would run your loop. &nbsp;That way, you could create the hEvent in your main loop, and then set it when it is time for the other loop to terminate. &nbsp;You wouldn&#8217;t be &quot;wasting&quot; a handle &#8212; because you need a way to signal that thread to exit in order to terminate it, and an event handle would be the right way to signal it to exit.</p>
<p>I would personally not use the Sleep approach, because the WaitFor approach is going to be safer.</p>
<p>With all 3 approaches, you have to start off by computing how much time has actually passed. &nbsp;Even the MM timer is just a &quot;best effort,&quot; and you don&#8217;t know what else the user is doing; they could be transcoding all of pirate bay to 32&#215;32 MP4 files to play on their iWatch in the background, and Windows might just flat out not be able to keep up. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757633">
				<div id="div-comment-757633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lunesu.com' rel='external nofollow' class='url'>Lio</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757633">
			July 28, 2009 at 12:13 am</a>		</div>

		<p>&quot;Which is better, hammering with a screwdriver or hammering with pliers?&quot;</p>
<p>Hammering with pliers, no contest.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757643">
				<div id="div-comment-757643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757643">
			July 28, 2009 at 12:44 am</a>		</div>

		<p>One note on Sleep(0) and SwitchToThread(), since some of the comments were mistaken:</p>
<p>Both of these calls end up yielding execution to any thread which is ready to run on the current processor, regardless of the priority relation (on a multi-proc machine, threads waiting on other processors do not count). This is the behavior as of Vista and Win7. Earlier OSes had slightly different behaviors with regard to priority. Sleep(0)/SwitchToThread() is a generally pretty useless operation, so I wouldn&#8217;t encourage doing it.</p>
<p>From the perspective of efficiency of doing this unfortunately inefficient action, Sleep(50) is marginally better than a wait.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757563">
				<div id="div-comment-757563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.net/' rel='external nofollow' class='url'>Igor Levicki</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757563">
			July 27, 2009 at 6:33 pm</a>		</div>

		<p>&gt;&gt;Why not just do the work at low priority?&lt;&lt;</p>
<p>Good luck interrupting such a thread if the user accidentally changes the process priority from low to real-time class.</p>
<p>I personally hate polling but one question remains unanswered &#8212; how would you check for things which do not have notification mechanism exposed except by polling?</p>
<p>For example, you need to sit there in the background and wait for a program to finish writing to a file and close the handle so you can move it out to some other folder, send it via email, burn to a CD, whatever.</p>
<p>There is ReadDirectoryChangesW() all right, but thanks to ingenious shell developers there is no such thing as FILE_NOTIFY_CHANGE_CLOSE (nor OPEN apart from creation).</p>
<p>The only thing you can do is poll(*) and when you are already forced to do it due to the stupid OS design, then you might take care to use as little resources as possible.</p>
<p>So instead of ranting it would be better to give an answer which of the two polling methods is more efficient and less resource consuming from the OS point of view.</p>
<div class=post>[<i>Um, there&#8217;s a second half to the article. You might want to try reading that part too. And you wonder why I get frustrated at comments. &#8220;Hey, you jerk, instead of doing X, why not do Y?&#8221; Um, I did do Y. -Raymond</i>]</div>
<p>* &#8211; yes, you can also write a filesystem filter driver or a kernel mode driver which hooks CloseHandle(), but that is completely out of scope because it complicates otherwise very simple task. Or a task which would be simple if there was a proper notification for you to subscribe to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757653">
				<div id="div-comment-757653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757653">
			July 28, 2009 at 1:47 am</a>		</div>

		<p>Using WaitFor and an event handle can be more efficient if you can slow down your poll rate. For example, in checking a network drive, instead of polling once a second, why not poll every 5? The user probably won&#8217;t notice that it took &quot;that long&quot; for it to discover the change, and you poll 5 times less frequently.</p>
<p>The event can be used to signal shutdown &#8211; so the thread exits immediately rather than when the sleep expires &#8211; a more important consideration as you spend more and more time in sleep.</p>
<p>E.g., say you&#8217;re polling for e-mail. If you poll once every 10 minutes, a sleep solution will mean the user may have to wait 10 minutes for the thread to shutdown, while WaitFor will have it exiting quickly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757673">
				<div id="div-comment-757673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.net/' rel='external nofollow' class='url'>Igor Levicki</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757673">
			July 28, 2009 at 4:39 am</a>		</div>

		<p>&gt;&gt;Um, there&#8217;s a second half to the article. You might want to try reading that part too.&lt;&lt;</p>
<p>I did but only the first part stuck with me :)</p>
<p>&gt;&gt;And you wonder why I get frustrated at comments.&lt;&lt;</p>
<p>You get frustrated by comments, people get frustrated with Windows. Personally, I think you got better part of a deal ;)</p>
<div class="post">[<i>I&#8217;m flattered by the suggestion that I&#8217;m responsible for all of Windows, but alas my paycheck doesn&#8217;t reflect that. (You must be a lot of fun at social events. &#8220;Nice to meet you. Oh, you work for company X? I will now be unpleasant towards you.&#8221;) But we&#8217;ll play it your way: Since I&#8217;m not interested in backward compatibility with your earlier comments, I&#8217;ll just uninstall your comments. (P.S., you&#8217;re supposed to say that Vista sucks.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757693">
				<div id="div-comment-757693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757693">
			July 28, 2009 at 5:33 am</a>		</div>

		<p>How does a tool like Perfmon work? I would&#8217;ve thought it would work by polling performance counters using a windows timer, or a thread with Sleep or WaitForMultipleObjects. Is there a better way?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-757703">
				<div id="div-comment-757703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757703">
			July 28, 2009 at 6:36 am</a>		</div>

		<p>@Jonathan: performance counters do have to be measured on a periodic basis with a Windows timer (for example), as there is no way for a performance counter DLL to say that its value has changed &#8211; and you wouldn&#8217;t want the service to have to wait to tell any viewers that something had occurred!</p>
<p>The performance counter model is that (usually at least) the counts always increase, and the application presenting the data does the division into &#8216;per second&#8217;. So if I have a &#8216;requests/sec&#8217; counter, I tell Windows that it&#8217;s a PERF_COUNTER_RATE counter, then add one to it every time I handle a request. Perfmon remembers what the last sample value was, subtracts it from my new value, and divides by the sample period to display the rate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757713">
				<div id="div-comment-757713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757713">
			July 28, 2009 at 8:26 am</a>		</div>

		<p>nksingh:</p>
<p>Thats not true about sleep(0) according to MSDN:</p>
<p>&quot;A value of zero causes the thread to relinquish the remainder of its time slice to any other thread of equal priority that is ready to run. If there are no other threads of equal priority ready to run, the function returns immediately, and the thread continues execution.&quot;</p>
<p>This is also documented the same for sleepEx(0)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757723">
				<div id="div-comment-757723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tony</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757723">
			July 28, 2009 at 9:32 am</a>		</div>

		<p>I often use polling of serial ports for example.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757783">
				<div id="div-comment-757783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757783">
			July 28, 2009 at 1:49 pm</a>		</div>

		<p>@Joseph Koss,</p>
<p>nksingh said that the behavior changed in Vista+, where the thread will relinquish the timeslice to threads even of lower priority. Supposedly, that makes badly designed apps more cooperative.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757853">
				<div id="div-comment-757853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-757853">
			July 28, 2009 at 5:30 pm</a>		</div>

		<blockquote><p>
  &gt; I often use polling of serial ports for example.
</p></blockquote>
<p>Why? You can used overlapped ReadFile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-758063">
				<div id="div-comment-758063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arno</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-758063">
			July 29, 2009 at 6:18 am</a>		</div>

		<p>It hasn&#8217;t been mentioned: If fKeepGoing is accessed by another thread, it must be declared volatile. Otherwise the code is incorrect.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-758083">
				<div id="div-comment-758083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090727-00/?p=17353#comment-758083">
			July 29, 2009 at 7:04 am</a>		</div>

		<p>The query operation itself might be comparedly costly, or hit a limited ressource other than CPU.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>