<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-137413">
				<div id="div-comment-137413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/roberthorvick' rel='external nofollow' class='url'>Robert Horvick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-137413">
			January 20, 2004 at 7:10 am</a>		</div>

		<p>Re: So don&#8217;t do that. When you declare a variable, make sure to declare it accurately.</p>
<p>I could be way off here, but it seems like the compiler might be able to stub out ambiguous declarations and then LTGC (link time code generation) could be used to fixup the stub using the correct code?</p>
<p>Thanks.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137423">
				<div id="div-comment-137423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-137423">
			January 20, 2004 at 8:12 am</a>		</div>

		<p>The linker should take care of this.  It should notice that &quot;b&quot; is being declared in the small data section in one object and the large data section in another.  Two same-named symbols going into two different sections should be causing a link error every time.  We have this on a PPC architecture and it&#8217;s exactly what happens.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137433">
				<div id="div-comment-137433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.interact-sw.co.uk/iangblog/' rel='external nofollow' class='url'>Ian Griffiths</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-137433">
			January 20, 2004 at 9:09 am</a>		</div>

		<p>So what happens if I *do* declare a million DWORDs?  (OK, slightly more than a million &#8211; enough to go over 4MB.)</p>
<p>That&#8217;s obviously unlikely to come up in any real hand-written code, but it&#8217;s not completely out of the question for generated code, even if it is somewhat outlandish.  Does the compiler simply tell me to stop being so stupid?  (Or will I crash and burn due to other resource constraints long before hitting this problem?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137443">
				<div id="div-comment-137443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Curt Hagenlocher</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-137443">
			January 20, 2004 at 9:42 am</a>		</div>

		<p>Anyone care to recommend a book on the ia64 architecture?  Or are these only available from Intel?</p>
<p>I haven&#8217;t seen a lot of new books on assembly language in the past few years&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137453">
				<div id="div-comment-137453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve Sheppard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-137453">
			January 20, 2004 at 9:47 am</a>		</div>

		<p>Hey Raymond,</p>
<p>I todays examples I noticed that you used double semicolons on some lines, singles on another and some lines even had none, was this on purpose or is this an error? </p>
<p>Just curious&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137463">
				<div id="div-comment-137463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Montgomery</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-137463">
			January 20, 2004 at 9:59 am</a>		</div>

		<p>Do Intel employees get a bonus when they introduce segmentation into their architectures?  This whole &quot;small&quot; / &quot;large&quot; thing is right out of the 8086 segmented architecture playbook.  That did &lt;nothing&gt; but make life difficult for everyone who had to use it.</p>
<p>What possible reason do they have for this latest design?  Not enough transistors?  Compatibility with an imaginary previous architecture?  A desire to make Z80 assembly code run un-changed?  Seriously, it&#8217;s like they just aren&#8217;t happy until they have some useless level of indirection built permanently into their chips, thus causing programmers and compiler writers no end of extra work and grief.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137473">
				<div id="div-comment-137473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://palmoswerks.com' rel='external nofollow' class='url'>Ben Combee</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-137473">
			January 20, 2004 at 10:18 am</a>		</div>

		<p>The architectural limit is likely due to the tradeoffs of making processor instructions fit into 64 bits.  You have to have enough bits to encode the opcode, the registers affected, conditional execution flags, and the immediate value.  This kind of limit isn&#8217;t unique to the IA-64.  Almost any RISC architecture has it &#8212; both ARM dnd Thumb code have similar limits, and there was a similar issue back on the 68000, as you could only access +-32K from an address register without generating a lot of extra code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137483">
				<div id="div-comment-137483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-137483">
			January 20, 2004 at 10:46 am</a>		</div>

		<p>Jack: You&#8217;re right, if you mismatch the linker does yell at you. Serves me right for trying to blog from memory.</p>
<p>Ian: I haven&#8217;t actually tried declaring four million global variables. I suspect you&#8217;ll run into a linker or compiler limitation before you get that far.</p>
<p>Steve: The double-semicolons have special meaning in ia64 assembly. (I don&#8217;t see any single-semicolons in my assembly code; if there are then they are typos.) If people are interested in learning more about ia64 I can write more about it, but it&#8217;s pretty deep geek stuff that is probably not of general interest.</p>
<p>Peter: The ia64 was actually developed originally by HP. Intel joined in later and wound up with star billing. I suspect the things you&#8217;re complaining about were developed in the HP era.</p>
<p>Ben: Actually the architectural limits aren&#8217;t really limits; they&#8217;re just a different way of doing things. The ia64 was designed around the principles of EPIC: Explicitly Parallel Instruction Computing. The theory behind EPIC is &quot;Do a lot of work at compile time (happens only once) instead of doing it at run time (happens every time the instruction is executed)&quot;. The theory is that by doing the hard work offline, the runtime performance is much better.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137493">
				<div id="div-comment-137493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas H&#228;ber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-137493">
			January 20, 2004 at 11:35 am</a>		</div>

		<p>&quot;If people are interested in learning more about ia64 I can write more about it, but it&#8217;s pretty deep geek stuff that is probably not of general interest.&quot;</p>
<p>IMO it&#8217;s very interesting to see how IA64 works more practical, since I&#8217;ve only experienced it in theory. From the theory I&#8217;ve read it seems great :). So, yeah &#8211; please write more about IA64!</p>
<p>But if you&#8217;d like to share some insight into the Windows shell please do that too :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137503">
				<div id="div-comment-137503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimmick.demon.co.uk/' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-137503">
			January 20, 2004 at 3:20 pm</a>		</div>

		<p>IIRC the double semicolon indicates an architectural stop. An instruction bundle on IA64 consists of a 128-bit template divided into three 41-bit blocks. The template indicates which arithmetic unit each portion of the instruction bundle runs on, and whether there are architectural stops between each position in the bundle. The 5 spare bits indicate which of the templates this is.</p>
<p>The processor is allowed to execute any operations between architectural stops in parallel. All operations in one group must be completed before the next group is begun.</p>
<p>Amost all instructions on IA64 can be predicated, using a predicate register to decide whether to execute an operation. There are nominally 64 1-bit predicate registers (which can be saved to an integer register as required). If the register is 1 at the point of instruction retire, the instruction&#8217;s final state is kept, otherwise it is discarded. 6 of the 41 bits of every instruction slot are used to encode the qualifying predicate (pr0 is hardwired to 1 and means &#8216;always&#8217;, and is normally omitted from assembly listings).</p>
<p>Short sequences of predicated instructions can typically perform better than branchy code, due to branch penalties.</p>
<p>The earliest predicated architecture I&#8217;m aware of is ARM, where instructions are predicated on the state of the flags. IA64 improves on this by only setting predicates for the conditions we&#8217;re actually interested in, and in being able to hold onto them for longer.</p>
<p>The 22 bit limit simply comes from the fact that the immediate field of the &#8216;add immediate to register&#8217; opcode is 22 bits in size. Unlike x86, IA64 instructions generally allow source and destination to be specified separately: of the form rx = y + z rather than just rx += y. In this case, you&#8217;ve got 7 bits for specifying the source and 7 for the destination.</p>
<p>There are &#8216;very long&#8217; load-immediate operations, but these are obviously unsuitable for position-independent code without requiring a relocation fixup for every load. Microsoft have clearly decided to go for position independent code (as far as practical) this time around. Relocation requires the loader to patch every relocated address, which requires the OS to allocate fresh pages to the relocated code (pages can be shared between processes if the DLLs are loaded at their expected base address).</p>
<p>You can get IA64 manuals from <a target="_new" href="http://developer.intel.com/design/itanium/manuals/iiasdmanual.htm" rel="nofollow">http://developer.intel.com/design/itanium/manuals/iiasdmanual.htm</a>. That&#8217;s where I learned all this from &#8211; I haven&#8217;t yet touched an actual IA64 box (and am probably unlikely to in my current job).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137513">
				<div id="div-comment-137513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Maas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-137513">
			January 20, 2004 at 4:22 pm</a>		</div>

		<p>I don&#8217;t know of a 64-bit architecture that allows 64-bit literals embedded in the code. e.g. on Alpha, to load a 64-bit constant into the register you have to load half the bits, shift them into place, and then load the other bits.</p>
<p>x86 is really an oddball as far as allowing opcodes and literals of varying sizes. (from 1 to over 10 bytes I think)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137893">
				<div id="div-comment-137893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">B.Y.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-137893">
			January 21, 2004 at 11:07 pm</a>		</div>

		<p>This reminds me of the near/far models of 16-bit DOS/Windwos programming. You could mix near/far code/data with enough combinations to shoot yourself in both feet and hands. Programmers were really happy when it was replaced by flat 32-bit model. Why are they bringing this back ? When will we get flat 64-bit pointers ? </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137903">
				<div id="div-comment-137903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-137903">
			January 21, 2004 at 11:31 pm</a>		</div>

		<p>Um, the pointers in Win64 mode are already flat.  Once a (flat) pointer to the global variable has been computed, you can use it like any other pointer.</p>
<p>The only wrinkle is the way the address of the global variable is computed in the first place. But that&#8217;s all invisible to the programmer, assuming you declared your variables correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-138653">
				<div id="div-comment-138653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mikedimmick.blogspot.com/2004_01_01_mikedimmick_archive.html#107490611481306996' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-138653">
			January 23, 2004 at 5:15 pm</a>		</div>

		<p>Manual trackback: I wrote more about global pointers (which I hope is correct!) at my blog.</p>
<p>The link above should be correct, or follow <a target="_new" href="http://mikedimmick.blogspot.com/2004_01_01_mikedimmick_archive.html#107490611481306996" rel="nofollow">http://mikedimmick.blogspot.com/2004_01_01_mikedimmick_archive.html#107490611481306996</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-138683">
				<div id="div-comment-138683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://grumpy.conman.org/' rel='external nofollow' class='url'>Mark Grosberg</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-138683">
			January 23, 2004 at 8:36 pm</a>		</div>

		<p>&gt;  If people are interested in learning more about ia64 I can write </p>
<p>Yup! More IA-64. Its an interesting architecture and geeks love new CPU architectures. If only I could come across an IA-64 box to actually play with. They seem to be rather rare. </p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-138723">
				<div id="div-comment-138723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-138723">
			January 24, 2004 at 8:35 am</a>		</div>

		<p>I&#8217;m also in favour of more 64 bit articles. I&#8217;d also be interested in AMD64 stuff if you ever come across it, not only IA64.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-140303">
				<div id="div-comment-140303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Lund</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-140303">
			February 1, 2004 at 5:11 am</a>		</div>

		<p>IA64, an architecture with perhaps even more quirks than the IA32.  What&#8217;s next, windows on the TMS320? ;)</p>
<p>What about an article on debug info formats?  Is there anything similar to DWARF2 in the Windows world?  If there isn&#8217;t, how can the debugger handle single-stepping and local variable display in the face of compiler optimizations?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-140323">
				<div id="div-comment-140323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-140323">
			February 1, 2004 at 5:19 am</a>		</div>

		<p>I&#8217;m going to pass on debugger issues, since I know very little about how they work. (I only do object-level debugging; I don&#8217;t use a source-level debugger.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-140453">
				<div id="div-comment-140453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Lund</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-140453">
			February 1, 2004 at 5:17 pm</a>		</div>

		<p>So you haven&#8217;t yet encountered a buggy program that relied on some peculiarity of its debug info to work? ;)</p>
<p>I&#8217;m pretty sure the different debugging APIs various Windows versions have had would make for a good article, though :)</p>
<p>I rarely use debuggers myself but I&#8217;m fascinated by how they work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-153133">
				<div id="div-comment-153133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/joshwil/archive/2004/03/10/87656.aspx' rel='external nofollow' class='url'>Josh Williams</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-153133">
			March 10, 2004 at 9:40 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201763">
				<div id="div-comment-201763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-201763">
			August 6, 2004 at 1:35 pm</a>		</div>

		<p>Commenting closes after two weeks.</p>
<p><a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/02/21/77681.aspx" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/02/21/77681.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-271963">
				<div id="div-comment-271963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/04/21/410397.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040120-00/?p=40993#comment-271963">
			April 21, 2005 at 9:00 am</a>		</div>

		<p>The Itanium has two stacks, so don&#8217;t assume that there&#8217;s only one.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>