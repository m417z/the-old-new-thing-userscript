<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-886853">
				<div id="div-comment-886853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">missing the question</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-886853">
			January 7, 2011 at 7:37 am</a>		</div>

		<p>That doesn&#39;t explain when the id becomes available for reuse. How long does the process have to be terminated before a new process can reuse the same id? If a id is reused immediately then other processes doesn&#39;t know the process has terminated. Maybe it (the id) has terminated twice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-886863">
				<div id="div-comment-886863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-886863">
			January 7, 2011 at 7:52 am</a>		</div>

		<p>Like he said, the pid can be reused when all handles to that process are closed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-886873">
				<div id="div-comment-886873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rangoric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-886873">
			January 7, 2011 at 7:53 am</a>		</div>

		<p>That&#39;s the point. If you are tracking it, it won&#39;t go away.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-886883">
				<div id="div-comment-886883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-886883">
			January 7, 2011 at 8:31 am</a>		</div>

		<p>Or we could just use the &quot;What if this was true&quot; approach.</p>
<p>The statement to be proven is &quot;process ids are reused for zombie processes&quot;. Let&#39;s assume that it is true. Now imagine the scenario that another process wants to know the exit code by looking up the process id. Ops, not possible, you&#39;d get the wrong process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk even thread-even depth-1" id="comment-886893">
				<div id="div-comment-886893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-886893">
			January 7, 2011 at 9:06 am</a>		</div>

		<p>@missing: &nbsp;When the THREADS go away, there can still be handles. &nbsp;When the handles go away, the process goes away and then the process ID can be reused. &nbsp;At least that&#39;s my understanding.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-886903">
				<div id="div-comment-886903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [Visual C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-886903">
			January 7, 2011 at 9:27 am</a>		</div>

		<p>@Henke37: Yes, you&#39;d get the wrong process. &nbsp;That&#39;s a risk you run by using PIDs instead of handles. &nbsp;If you don&#39;t already own a handle to the process, the last existing handle could be closed, the zombie could be reaped, and the PID could be reused. &nbsp;Preventing PIDs of zombies from being reused doesn&#39;t actually help much.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-886913">
				<div id="div-comment-886913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob Kennedy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-886913">
			January 7, 2011 at 9:48 am</a>		</div>

		<p>I think it&#39;s clear that a pid becomes eligible for re-use when the process it previously identified ceases to exist.</p>
<p>But what&#39;s still not clear is precisely when a process ceases to exist. We know it&#39;s not when the process terminates &#8212; the process can continue to exist afterward if there are still handles open on that process. During that time, it&#39;s a &quot;zombie process.&quot; But once all the handles are closed, you only say the kernel knows the process object CAN be destroyed. Does that mean the kernel destroys it immediately, or can the process object continue to exist even after the last handle is closed? And if it can continue to exist, can somebody call OpenProcess on that pid and get a handle to that not-yet-destroyed process, even though there were no other handles open at the time?</p>
<p>However, for an application developer, I don&#39;t see how it really matters. Suppose you&#39;re writing application A and it has a handle to process B. All that&#39;s important is to know that as long as A has an open handle, the pid will continue to identify B. Once A closes its last handle to B, it should assume that the pid is invalid and stop using it. It should not assume that B continued running afterward, nor that any other program C still has a handle to B.</p>
<div class="post">[<i>When most people ask the question, it&#39;s not with the goal of forcing process IDs to be recycled faster; it&#39;s how to delay the recycling. And the answer is &quot;To delay the recycling, convert the process ID to a handle.&quot; Even if all application handles to the process are closed, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/07/23/192531.aspx" rel="nofollow">kernel components may have a reference to the process</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-886923">
				<div id="div-comment-886923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-886923">
			January 7, 2011 at 9:56 am</a>		</div>

		<p>Just to add my 2 cents worth &#8211; this seems to be a case of &quot;just like everything else&quot;. &nbsp;While you&#39;ve got an open handle to file FOO.BAR, it will continue to be the same FOO.BAR. &nbsp;If you close your open handle and open a new handle based on the file name, it may not be the same file. &nbsp;If that matters to you, don&#39;t do it :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-886933">
				<div id="div-comment-886933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-886933">
			January 7, 2011 at 9:59 am</a>		</div>

		<p>The question is from the category &quot;if you&#39;re asking this, you&#39;re doing it wrong&quot;. It&#39;s the same as asking &quot;when a freed memory becomes reused&quot; or &quot;how to check if the memory address is valid&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-886943">
				<div id="div-comment-886943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-886943">
			January 7, 2011 at 10:37 am</a>		</div>

		<p>I&#39;m wondering &#8211; was this really necessary? Why the duality &#8211; PID and handle, which identify the same thing? Couldn&#39;t we have just one unique identifier, like a GUID?</p>
<div class="post">[<i>All that does is change the noun in the question. &quot;How long is a process ID valid?&quot; becomes &quot;How long is a process GUID valid?&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-886963">
				<div id="div-comment-886963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-886963">
			January 7, 2011 at 11:30 am</a>		</div>

		<p>This is one of the few places where Windows actually did it better than UNIX. Under UNIX there&#39;s no way to get a handle to a process so no way other than being the parent to prevent the pid from being recycled on you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-886973">
				<div id="div-comment-886973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-886973">
			January 7, 2011 at 1:19 pm</a>		</div>

		<p>Vilx: Handles are not unique identifiers, while PIDs are. Think of it this way: PID:process::filename:file. Processes need both PIDs and handles just as much as files need names and handles. Since a process doesn&#39;t otherwise have a unique name it gets assigned a number, essentially allowing you to talk about a process that you don&#39;t have a handle to.</p>
<p>Perhaps you are wondering why you even need handles to processes at all (UNIX doesn&#39;t). UNIX has only two permissions on processes (if you own the process or you&#39;re root, you can do anything to the process, otherwise you can do nothing to it), meaning that for anything you want to do to a process (debug, signal, renice, etc.) it is sufficient to just pass the PID. Windows has a dozen different permissions (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms684880.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms684880.aspx</a>) and handles are used to manage those. In this respect processes are just like any other object on the system (threads, mutexes, files, registry keys, etc.). The big difference is their namespace (PIDs).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-886983">
				<div id="div-comment-886983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-886983">
			January 7, 2011 at 8:15 pm</a>		</div>

		<p>Just think about process as any other kernel object (like mutex, event etc) and PID in this analogie is a process object&#39;s &quot;name&quot;. While there&#39;re any opened to existing object handles &#8211; you may call Open*** (OpenMutex, OpenEvent, OpenProcess) to get another handle to to. While all handles closed &#8211; Open*** will fail. But there is 2 differences between process and other objects name lifetime: </p>
<p>1) Process holds reference to itself while its not terminated -so its possibe to open &#39;running&#39; process even there&#39;re no external handle on it yet.</p>
<p>2) If after process terminated there still remained any references (handles) for any of its (already dead too) thread(s) &#8211; its possible to &#39;open&#39; process even if there&#39;re no other already opened handles to it.</p>
<p>When exactly process id will be release is a complicated question, cause threads deferencing performed asynchronously by backround &#39;reaper&#39; thread. So on one side &#8211; when thread terminates it pushes itself to &#39;reap&#39; queue that processed asynchronously. On another side &#8211; when you calls &#39;final&#39; CloseHandle related to already exited process &#8211; it will dereference and destroy process object synchonousy if all its thread alrready reaped asynchronously until this moment.</p>
<p>So practical conclusion: you may relay that process ID will not be reused while process alive and/or while there any opened handle(s) (in other processes) referencing this process or any its thread. But you may not be sure that PID will be reused after you closed everything related to process.</p>
<p>PS: BTW the story about handle count is even more complicated, cause every kernel object has actually 2 ref counters &#8211; &#39;handles&#39; and &#39;pointers&#39; count &#8211; second always same or greater than first. And kernel object &#39;deleted&#39; when its pointer count reaches zero, while object&#39;s name removed from namespace when its handles count zeroed. Actually I don&#39;t know if this same (thinking like PID==&quot;name&quot;) for process/thread handles, but while object refcounter may be modified directly only from kernelmode its out of this article&#39;s scope but interesting for me too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-887023">
				<div id="div-comment-887023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-887023">
			January 8, 2011 at 8:06 pm</a>		</div>

		<blockquote><p>
  I&#39;m writing some code that depends on process IDs and I&#39;d like to understand better problem of process ID reuse.
</p></blockquote>
<p>FAIL</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-887153">
				<div id="div-comment-887153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-887153">
			January 10, 2011 at 1:10 pm</a>		</div>

		<p>Hmmm&#8230; this leads to an interesting question: Is there&#39;s any way to open a process and know that it&#39;s the process you were trying to open (other than to arrange to have created the process yourself, I suppose)? It would seem there&#39;s an inherent race condition in finding the process ID you want to open and then calling OpenProcess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-887433">
				<div id="div-comment-887433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110107-00/?p=11803#comment-887433">
			January 11, 2011 at 9:42 am</a>		</div>

		<p>Ray Trent: Yes, there&#39;s an inherent race condition, and it happens everywhere. For example, let&#39;s say a user tells a program to open file FOO.TXT; you have no way of knowing if FOO.TXT has been deleted or renamed and had a new file of the same name placed in its directory between the time the user chooses it and you actually open the file. It is only once you open the file that you can control what happens to it.</p>
<p>Of course, this race condition isn&#39;t limited to computers. I could give you my phone number, and by the time you call me I could have closed my account with the phone company and they could have assigned my number to somebody else.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>