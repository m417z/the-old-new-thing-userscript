<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-joshuaganes even thread-even depth-1" id="comment-954413">
				<div id="div-comment-954413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954413">
			December 21, 2011 at 7:44 am</a>		</div>

		<p>This solution sounds like a very reasonable strategy. Any new format will require some programming effort to handle. Telling an application about it is rather pointless. I suppose one possible scenario where the old interface may be useful would be in an application that can call home and look for automatic updates when it encounters an unknown format.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-954423">
				<div id="div-comment-954423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Barbie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954423">
			December 21, 2011 at 7:56 am</a>		</div>

		<p>Oh, there are potential use cases, like an end-user-provided texture that they would _somehow_ tag as the newfangled format (streaming blissfully through the game with no validation whatsoever). Not very common for sure. Really, if your game only supports the list of formats that were exposed at the time, that&#39;s still plenty (and your typical end-user has _no_ idea what a DXT3 is anyways)</p>
<div class="post">[<i>&#8230; and of course that &quot;tag&quot; would be&#8230; a pixel format! So you could pass it to CheckDeviceFormat. In other words, &quot;You can still do that.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-954433">
				<div id="div-comment-954433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Silly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954433">
			December 21, 2011 at 8:19 am</a>		</div>

		<p>Was going to say something like &quot;game studios must want users to play &lt;2011 game&gt; in 2026 without any datedness or emulation&quot;, But more likely game studios just want their software to run now on all modern hardware despite what D3D reports&#8230; they hope to sort out the hardware themselves.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-954443">
				<div id="div-comment-954443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thorsten</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954443">
			December 21, 2011 at 8:35 am</a>		</div>

		<p>One could call the changed pattern IoIoC: Inversion-of-Inversion-of-Control.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-954453">
				<div id="div-comment-954453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954453">
			December 21, 2011 at 9:15 am</a>		</div>

		<p>@Thorsten: by double negation, that&#39;s just &quot;Control&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-954463">
				<div id="div-comment-954463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954463">
			December 21, 2011 at 9:49 am</a>		</div>

		<p>I actually did run into a special case once where I could support image formats that I had never heard of before so long as GDI+ did. Depending on what their program was doing (e.g. copying buffers around and using DirectX functions to convert them) it might be able to support such things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-954473">
				<div id="div-comment-954473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954473">
			December 21, 2011 at 10:24 am</a>		</div>

		<p>As long as the &quot;format X&quot; is a reasonable short integer, you can still try everyone.</p>
<p>These problems are common in handshaking algorithms between hardware/apis and apps, when determining the best common format. Most developers get such logic wrong because:</p>
<ol>
<li>
<p>Long, long list which boils down to:</p>
</li>
<li>
<p>They don&#39;t care.</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-954483">
				<div id="div-comment-954483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tobi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954483">
			December 21, 2011 at 12:25 pm</a>		</div>

		<p>Returning all available formats at once in a buffer and shuffling that buffer randomly would have solved some of the (forseeable!) compatibility problems.</p>
<p>Analogy: NTFS has the same problem now. It can never stop returning sorted file names. It would have been better to randomly shuffle the first few items so applications could never have assumed sort order.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-954493">
				<div id="div-comment-954493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954493">
			December 21, 2011 at 1:58 pm</a>		</div>

		<p>It&#39;s also, perhaps, an instance of giving people the smallest amount of information they need to act upon. Give them extra irrelevant information, like the old system, and people will inevitable act on that instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-954513">
				<div id="div-comment-954513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">blah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954513">
			December 21, 2011 at 3:32 pm</a>		</div>

		<p>+1 to tobi. The D3D debug runtime takes care to scramble buffers and whatnot. It should have done the analogue here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher even thread-even depth-1" id="comment-954533">
				<div id="div-comment-954533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954533">
			December 21, 2011 at 6:20 pm</a>		</div>

		<p>There&#39;s also a performance advantage here, that&#39;s not immediately apparent.</p>
<p>DX6-era video cards used fixed-function circuits built in to the chips for most of their texture processing.</p>
<p>DX8-era video cards would have started to use programs to process the textures. &nbsp;The change in the API call would enable them to load just those programs the application asked about, prior to receiving a texture, which would likely be an improvement in memory usage and performance on the video card, as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-954613">
				<div id="div-comment-954613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954613">
			December 22, 2011 at 12:10 pm</a>		</div>

		<p>This reminds my the COM strategy: all you are guaranteed to have is IUnknown, and from there you start querying for the interfaces you understand.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-954683">
				<div id="div-comment-954683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony Williams</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954683">
			December 22, 2011 at 5:41 pm</a>		</div>

		<p>Alex: this is exactly why QueryInterface is the way it is.</p>
<p>Joshua: your example is a kind of opaque pass-through where the intermediary doesn&#39;t know the format but both ends need to. Someone needs to do the checking, but without understanding the format itself. That&#39;s why we created interface IDs. There are methods in COM interfaces that do this kind of thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-954693">
				<div id="div-comment-954693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954693">
			December 22, 2011 at 6:24 pm</a>		</div>

		<p>By enumerating CLSIDs in registry it should be easy to query for all supported interfaces.</p>
<div class="post">[<i>Who says that every interface must be recorded in the registry? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-954753">
				<div id="div-comment-954753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954753">
			December 23, 2011 at 11:26 am</a>		</div>

		<p>Tim: The real reason you would want to ask a COM object what interfaces it has (instead of calling QI with every one you know) is that you know lots more interfaces than an object is likely to have. If you know how to handle 1000 different interfaces, do you really want to QI each object 1000 times? No, it would be better to just ask each object which interfaces it can give you, and look up their GUIDs in a dictionary to see if you support them.</p>
<p>Fortunately this scenario doesn&#39;t apply to texture formats because the author of a DX client will know what formats they have textures in and in what order they would prefer them.</p>
<div class="post">[<i>Oh, you mean <code>IMulti&shy;QI::Query&shy;Multiple&shy;Interfaces</code>? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-954723">
				<div id="div-comment-954723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954723">
			December 23, 2011 at 4:30 am</a>		</div>

		<p>@640k: Why go through the trouble of enumerating CLSIDs in the registry? You could just as well query for ALL possible interfaces (GUIDs). Either way you are left with a second, impossible to answer problem: What are you going to do with your shiny new void* (besides casting it to IUnknown* and calling Release() on it)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-954793">
				<div id="div-comment-954793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954793">
			December 23, 2011 at 2:44 pm</a>		</div>

		<p>Gabe, I suppose I wasn&#39;t clear enough in my previous post. The point I was trying to make is that if you ask for a random interface (which is what taking class IDs from the registry boils down to) there is nothing you can do with that interface.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-954893">
				<div id="div-comment-954893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-954893">
			December 25, 2011 at 12:02 am</a>		</div>

		<p>Tim: If you ask for a random interface (say, by enumerating CLSIDs in the registry), it is useless. Asking for an interface you don&#39;t understand is useful only for proxies (like what IMulti&shy;QI::Query&shy;Multiple&shy;Interfaces does).</p>
<p>The scenario I was contriving was one where you have a large number of interfaces that you understand and don&#39;t want to QI for them all. If you understand 1000 interfaces and 1000 objects, that&#39;s 1M calls to QI (or 1000 calls to Query&shy;Multiple&shy;Interfaces which results in 1M calls to QI). If you could enumerate the interfaces each object supported, you&#39;d only have to make 1000 calls for 1000 objects.</p>
<p>Of course, this is contrived and I can&#39;t think of an actual time this would be needed for COM. I was just trying to demonstrate that there are times when the old way (enumeration) is better than the new way (asking for just what you understand), even in situations like this where some getting back items that you don&#39;t understand would be useless.</p>
<div class="post">[<i>Either way, you need to make 1M GUID comparisons. The comparison happens either in QI or in your own code that studies the results of GetInterfaces. And where are you going to put the results of your 1M comparisons? In a table of some sort, keyed by object and interface. In other words, you&#39;ve reimplemented object-&gt;QI(interface) with TableLookup(object, interface). Not sure what you gained here. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955093">
				<div id="div-comment-955093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-955093">
			December 26, 2011 at 5:20 pm</a>		</div>

		<p>[Who says that every interface must be recorded in the registry? -Raymond]</p>
<p>COM.</p>
<div class="post">[<i>Um, no. There are plenty of interfaces not in the registry. IRunnableTask ({85788d00-6807-11d0-b810-00c04fd706ec}), for example. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955233">
				<div id="div-comment-955233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-955233">
			December 27, 2011 at 7:34 am</a>		</div>

		<p>[Um, no. There are plenty of interfaces not in the registry. IRunnableTask ({85788d00-6807-11d0-b810-00c04fd706ec}), for example. -Raymond]</p>
<p>Then it&#39;s not COM. It&#39;s &quot;registry-less COM&quot;.</p>
<div class="post">[<i>I will not get dragged into a game of <a href="http://en.wikipedia.org/wiki/No_true_Scotsman" rel="nofollow">no true Scotsman</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955413">
				<div id="div-comment-955413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843#comment-955413">
			December 27, 2011 at 5:20 pm</a>		</div>

		<blockquote><p>
  [I will not get dragged into a game of no true Scotsman. -Raymond]
</p></blockquote>
<p>Please read the COM spec. It&#39;s more than vtables, you know.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>