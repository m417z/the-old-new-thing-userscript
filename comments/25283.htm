<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-546663">
				<div id="div-comment-546663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546663">
			September 4, 2007 at 11:26 am</a>		</div>

		<p>The Old New Thing: 4 out of 5 Usenet users recommend it!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-546673">
				<div id="div-comment-546673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.gibixonline.com' rel='external nofollow' class='url'>Joshua</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546673">
			September 4, 2007 at 11:44 am</a>		</div>

		<p>I feel smart&#8230; I actually found the deadlock problem before he told us! I think that&#8217;s a first for me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-546693">
				<div id="div-comment-546693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jaspax.com' rel='external nofollow' class='url'>JS Bangs</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546693">
			September 4, 2007 at 11:58 am</a>		</div>

		<p>&quot;&#8230; [A]ll DllMain functions are serialized.&quot;</p>
<p>Is there a current architectural reason why this must be so? Or is it a holdover from the olden days, kept for compatibility reasons? In either case, it&#8217;s rather too bad, since as dual- and quad-core CPU&#8217;s become common, startup could be sped up a lot by parallelization.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-546703">
				<div id="div-comment-546703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546703">
			September 4, 2007 at 12:22 pm</a>		</div>

		<p>[Note: Wild speculation. Raymond, Larry, feel free to tell me I&#8217;m an idiot.]</p>
<p>Certainly everything was serialized by definition in the uniproc 3.x days, but I&#8217;d think life is still easier with serialized DllMains. This way you don&#8217;t have to worry about reentrancy. DLLs with no significant startup cost return quickly enough from DllMain that it&#8217;s not a major issue.</p>
<p>DLLs that do need to fire up other threads/libraries (such as winmm.dll or DirectX) could theoretically have their exports called in mid-startup by other cores. They&#8217;d have to block anyway to prevent uninitialized interfaces, etc., from being called, so why not just serialize everything and make people&#8217;s lives easier? (Not to mention that this avoids the case of multiple simultaneous loadings.)</p>
<p>Plus I&#8217;m guessing that enough otherwise-correct code has been written under the serial DllMain assumption that we&#8217;d suffer a total meltdown if this was no longer the way of things in a future version of Windows. I&#8217;d almost expect the introduction of a DllMainEx&#8211;i.e., a separate entry point&#8211;in that case, and wouldn&#8217;t THAT be fun to explain?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-546713">
				<div id="div-comment-546713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wang-Lo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546713">
			September 4, 2007 at 12:26 pm</a>		</div>

		<p>Thank you so much, Raymond, for that tutorial on how to get a thread started from DllMain.</p>
<p>I believe The Old New Thing has helped my professional development more than any other site on the Web. &nbsp;I program mostly in platforms, like Delphi C/S and Paradox for Windows, that insulate me from both the power and the complexity of the Windows APIs. &nbsp;Sometimes I am frustrated by the limitations of these platforms, and I am haunted by the feeling that by avoiding the native Windows environment, I am missing a rich and rewarding experience.</p>
<p>Whenever that happens, I come here and read Raymond&#8217;s wonderfully detailed explanations of how the Windows architecture really works, and the feeling soon passes.</p>
<p>-Wang-Lo.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-546733">
				<div id="div-comment-546733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546733">
			September 4, 2007 at 12:55 pm</a>		</div>

		<p>Wang-Lo is right. I tell the devs I work with that they can learn more about Win32 development in a weekend of reading Raymond&#8217;s archives than in a year of reading Win32 books. Of course, now that part of those archives have been made into a book, maybe that&#8217;s not so true anymore.</p>
<p>PMP</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-546763">
				<div id="div-comment-546763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546763">
			September 4, 2007 at 1:28 pm</a>		</div>

		<p>@JSBangs: You may want to check out this link:</p>
<p><a rel="nofollow" target="_new" href="http://www.codinghorror.com/blog/archives/000942.html" rel="nofollow">http://www.codinghorror.com/blog/archives/000942.html</a></p>
<p>Basically the result is that general purpose applications are not benefitting from parallelization. &nbsp;Only specific applications like graphics rendering or scientific number crunching are benefitting.</p>
<p>Of course, the author of the article does point out that general purpose applications are not designed with parallelization in mind. &nbsp;That said, though, I think Bob is right. &nbsp;General purpose tasks, especially initialization tasks, don&#8217;t lend themselves to parallelization. &nbsp;Designing DllMain to be thread safe is probably more trouble than it&#8217;s worth.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-546783">
				<div id="div-comment-546783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jaspax.com' rel='external nofollow' class='url'>JS Bangs</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546783">
			September 4, 2007 at 2:06 pm</a>		</div>

		<p>Anon: Actually I had just read that article before reading Raymond&#8217;s post, which is why it was on my mind. It seemed to be an example of a place where the OS might be serializing unnecessarily. But the objections raised here are good&#8211;the benefits or making DllMain thread-safe are small, and the costs enormous.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-546823">
				<div id="div-comment-546823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anony Moose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546823">
			September 4, 2007 at 5:16 pm</a>		</div>

		<p>Sounds like another case of &quot;it seems to work for me&quot; not being close to the same as &quot;it actually will work perfectly for everyone&quot;. Just because something &quot;seems&quot; to work doesn&#8217;t mean it&#8217;s a good idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-546833">
				<div id="div-comment-546833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546833">
			September 4, 2007 at 5:21 pm</a>		</div>

		<p>Don&#8217;t forget that a large amount of initialization time is actually taken up with hard page faults. That isn&#8217;t the sort of thing that would be sped-up by executing multiple threads in parallel.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-546853">
				<div id="div-comment-546853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546853">
			September 4, 2007 at 5:55 pm</a>		</div>

		<p>And if you call DisableThreadLibraryCalls() as the first thing in DllMain()?</p>
<p>I believe that then it is possible to create threads and use TLS safely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-546863">
				<div id="div-comment-546863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546863">
			September 4, 2007 at 6:23 pm</a>		</div>

		<p>OK, I am a little weirded out here. I&#8217;m the Pete mentioned above. I haven&#8217;t thought about this topic in months, but today I got confused while debugging somebody else&#8217;s code, came back here in hopes of finding more information, and sure enough not only is it here but it was just posted today in direct response to an earlier question I posed! Talk about good service! Where is the tip jar?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-546883">
				<div id="div-comment-546883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546883">
			September 4, 2007 at 7:01 pm</a>		</div>

		<p>Important note for everyone who thinks &quot;I&#8217;m not writing system software, I just write plain C, so I don&#8217;t need to think about this.&quot;</p>
<ul>
<li>atexit functions for DLLs are called from DllMain during a DLL_PROCESS_DETACH.</li>
</ul>
<p>That means two things to keep in mind when you&#8217;re writing C code that will go into a DLL:</p>
<p>(1) You can&#8217;t signal and wait for other threads to shut down safely inside your atexit functions.</p>
<p>(2) You can&#8217;t rely on other DLLs even being present when you&#8217;re running your atexit functions; for instance, you can&#8217;t call WinSock to close open sockets.</p>
<p>If your atexit function is being called on the same thread as called exit() then you have nothing to worry about, however. &nbsp;exit explicitly runs through your atexit functions before it leaves. &nbsp;It&#8217;s other thread&#8217;s atexit functions that are at risk &#8212; in particular, other threads created by other DLLs or main EXEs, which might have their own C run-time libraries bound to them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-546893">
				<div id="div-comment-546893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546893">
			September 4, 2007 at 7:22 pm</a>		</div>

		<p>From the No Good Deed Goes Unpunished Department, I&#8217;ve now moved on to being confused about a slightly different matter.</p>
<p>I&#8217;ve got a module with two functions; call them Start and Stop. Start creates a thread, which in turn creates a window and enters a message loop. Stop sends WM_CLOSE to the window and then waits for the thread to end. (There&#8217;s some extra cleverness in Stop to handle the case in which Start hasn&#8217;t yet created the window, but I don&#8217;t think that&#8217;s important right now.)</p>
<p>Suppose I statically link this module into some program and call Start and Stop as the result of, say, the user pressing a button. It would seem that I can call Stop with impunity, and indeed when I do that everything works as expected.</p>
<p>But now let&#8217;s suppose I call Stop from a DLL_PROCESS_DETACH handler. What would you expect? Given all this discussion, I&#8217;d expect you to say waiting for the thread to end will deadlock. And that was what I was expecting, too, and I was prepared to link this page in a comment and be done with the issue. But that&#8217;s not what happens.</p>
<p>What happens instead is that SendMessage returns immediately without having delivered the message to the window. And then things get weirder: WaitForSingleObject returns immediately as if the thread were already signalled (ended). What the heck is going on here?</p>
<div class=post>[<i>I think it&#8217;s kind of obvious. When would <code>SendMessage</code> return immediately? When does <code>WaitForSingleObject</code> return immediately? <a href="http://blogs.msdn.com/oldnewthing/archive/2007/05/03/2383346.aspx" rel="nofollow">Why is process termination the scariest moment of a process&#8217;s lifetime?</a> -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-546923">
				<div id="div-comment-546923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546923">
			September 4, 2007 at 9:27 pm</a>		</div>

		<p>After reading the &quot;scariest moment&quot; post, I have an explanation for the behavior I&#8217;m seeing. Developers must assume that, rather than tear down resources and DLLs in some orderly, document-able sequence, Windows does these things in no particular order. Consequently, DLL_PROCESS_DETACH is a good time to do a whole lotta nothin&#8217; if that last parameter is non-NULL. However, please allow me to respectfully submit that this is not obvious from the specific symptoms I posted. It&#8217;s only obvious if you have more experience with these things than I do. And I&#8217;m glad not only that you do but also that you share it. Once again, I am looking for the tip jar.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-546933">
				<div id="div-comment-546933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546933">
			September 5, 2007 at 12:18 am</a>		</div>

		<p>Pete, you can buy Raymond&#8217;s book.</p>
<p>When you are writing DLL which allocates resources and creates threads &#8216;n&#8217; stuff, usually you do all that alloc/create and free/destroy stuff in separate functions called YourLibNameInit() and YourLibNameExit() which are then called after the DLL gets loaded by its client, and not from DllMain().</p>
<p>This not only speeds up application loading time (nothing is done inside of DLL until it is actually needed), but it also saves you from a lot of headache related to all-night debugging sessions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-546983">
				<div id="div-comment-546983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546983">
			September 5, 2007 at 3:47 am</a>		</div>

		<p>How about creating a thread in DllMain as a way of waiting until the loader lock is unlocked? I mean, you can create a thread with it&#8217;s entry point pointing to an initialization procedure, and then after you return from DllMain, the procedure will be called when the loader lock is unlocked. And at the beginning of any exported function, check that the thread created during DllMain has been terminated. But what if the function calling the exported function is in the thread that was created during DllMain itself? Then maybe report an error. But what if also the DLL that called the exported function is the DLL itself? How about having the exported function be a stub that checks that the thread has been terminated and then calls another internal function. Then the DLL itself can call the internal function directly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-546993">
				<div id="div-comment-546993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Harris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-546993">
			September 5, 2007 at 8:02 am</a>		</div>

		<p>Anonymous,</p>
<p>It&#8217;ll take a while for general purpose applications to take advantage. My employer (we write shrink-wrap desktop apps) is only just starting to do this, because until recently the multi-core machines weren&#8217;t a significant part of our market. And because it&#8217;s hard, of course. In 5 or 10 years time going from 2 to 4 cores will bring a bigger benefit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-547043">
				<div id="div-comment-547043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jasonhaley.com/blog/archive/2007/09/05/140346.aspx' rel='external nofollow' class='url'>Jason Haley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-547043">
			September 5, 2007 at 10:27 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-547053">
				<div id="div-comment-547053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-547053">
			September 5, 2007 at 10:36 am</a>		</div>

		<p>&quot;Just don&#8217;t forget to FreeLibrary() your DLL before your initialization thread exits. &quot;</p>
<p>BTW, that is what FreeLibraryAndExitThread() is for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-547123">
				<div id="div-comment-547123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-547123">
			September 5, 2007 at 11:44 am</a>		</div>

		<p>About creating a thread from DLLMain (and other code that should be run only after loader lock is released), wouldn&#8217;t it be possible to queue a user mode APC?</p>
<p>Won&#8217;t solve neither the shutdown nor &quot;pulling the rug&quot; problem, but perhaps this &quot;trick&quot; can help someone.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-547133">
				<div id="div-comment-547133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-547133">
			September 5, 2007 at 12:09 pm</a>		</div>

		<p>Igor, nobody questions the wisdom or lack thereof of putting significant logic into DllMain given a choice. (Personally, I come from a Mac background, and the same is true of the CFM and Mach-O equivalents.) Many of us, however, are stuck with figuring out the messes left behind by other programmers. This is one such case. My charter for this maintenance task does not include adding Start/Stop entry points to the DLL since clients which do not call these functions are presumed to exist already somewhere out there in the world.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-547173">
				<div id="div-comment-547173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-547173">
			September 5, 2007 at 1:58 pm</a>		</div>

		<p>Interestingly, I&#8217;ve been plumbing the depths of MFC&#8217;s DllMain lately. It&#8217;s a busy little beast! (imagine usual note from Raymond about how he is just the messenger and isn&#8217;t accountable for the actions of others within Microsoft)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-547003">
				<div id="div-comment-547003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-547003">
			September 5, 2007 at 8:12 am</a>		</div>

		<p>@Yuhong Bao: As the &quot;not recommended&quot; document mentions, if the DLL is unloaded before the thread you created in your DllMain has run to comletion, your new thread will cause an access violation. This could easily happen if some other DLL causes your DLL to be loaded, but then returns FALSE for DLL_PROCESS_ATTACH. </p>
<p>Heh. Reminds me of that trick of pulling the table cloth off the table after dinner is served. It&#8217;s awesome when it works, but has a tendency to leave catsup stains on the walls.[Great entertainment either way.]</p>
<p>However, there&#8217;s a trick to avoid having your DLL being unloaded from under you on Windows XP and later: call GetModuleFileName() to get the filename of your DLL, followed by LoadLibraryEx() with the DONT_RESOLVE_DLL_REFERENCES flag. This has the effect of incrementing the DLL&#8217;s reference count without incrementing the loader lock when called from DllMain. Just don&#8217;t forget to FreeLibrary() your DLL before your initialization thread exits. Preferably, enable SEH and use a __try/__finally block to make sure this happens.</p>
<p>I&#8217;ve not used this trick in any production code, but it has passed all the tests I&#8217;ve thrown at it. In particar, I&#8217;ve used it to host the CLR after having had a &#8216;gawd, this is sooooo much easier C#!&#8217; moment.</p>
<p>For the &#8216;Never host the CLR in a DLL!&#8217; crowd: This is my &lt;expletive deleted&gt; computer, and I&#8217;ll do any &lt;expletive deleted&gt; &lt;expletive deleted&gt; thing I &lt;expletive deleted&gt; well please to it. *snub*</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-547983">
				<div id="div-comment-547983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070904-00/?p=25283#comment-547983">
			September 10, 2007 at 1:24 am</a>		</div>

		<p>You know what might be cool, if the DllMain for each thread was run only the first time the thread calls into a Dll, and then some magic was done to make subsequent calls go through normally. Like a delay-load for DllMain. Could that be possible ?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>