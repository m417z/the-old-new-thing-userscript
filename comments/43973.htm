<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1152983">
				<div id="div-comment-1152983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140926-00/?p=43973#comment-1152983">
			September 26, 2014 at 11:04 am</a>		</div>

		<p>Another one for &quot;The ways people mess up IUnknown::QueryInterface&quot;:</p>
<p>Returning a new, stateful and reset object for tear-off interface pointers.</p>
<p> E.g. when you query for an enumerator type, you get a new, fresh enumerator. &nbsp;And it won&#39;t work that way across apartments.</p>
<p>Really, it&#39;s not the COM rules, it&#39;s the P̶I̶T̶A̶ learning curve for people that want to do it as close to the metal as possible. &nbsp;It&#39;s just a huge amount of details, you have to abstract something, let a squint bit of performance go away for interoperability.</p>
<p>Just use ATL or some other wrapper library. &nbsp;I mean, it&#39;s cool to dig into the low-level details to learn, but not to develop (hopefully) maintainable code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152993">
				<div id="div-comment-1152993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140926-00/?p=43973#comment-1152993">
			September 26, 2014 at 11:07 am</a>		</div>

		<p>@Marcelo Lopez Ruiz, actually, you should return E_INVALIDARG for NULL in arguments, E_POINTER is for NULL out or in-out arguments.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152973">
				<div id="div-comment-1152973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcelo Lopez Ruiz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140926-00/?p=43973#comment-1152973">
			September 26, 2014 at 10:58 am</a>		</div>

		<p>&quot;It&#39;s up to the object to enforce marshaling rules&quot; is a bit of an odd statement to make &#8211; yes, if the object wants to enforce those rules, it&#39;s up to it, but I don&#39;t think the object *should* in general. Marshaling is meant to be transparent to the extent that it can (of course you can still get transport errors and such).</p>
<p>That said, I would still expect the object to check for null pointers and return E_POINTER if it&#39;s unhappy with what it gets. That seems like a sensible rule for writing an implementation. Returning RPC_X_NULL_REF_POINTER just to make it consistent with marshaled cases seems very, very odd.</p>
<p>And then of course there&#39;s the whole can of worms of which error code clients should be checking for &#8211; although presumably nobody does anything interesting with E_POINTER &#8211; if you&#39;re smart enough to recover from that, you might as well get it right the first time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1153003">
				<div id="div-comment-1153003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140926-00/?p=43973#comment-1153003">
			September 26, 2014 at 11:27 pm</a>		</div>

		<p>@John Doe:</p>
<p>I don&#39;t really think in this case it is the learning curve that is the issue. IUnknown is a very simple interface and QI has some very strict but simple rules. These are quite clearly called out in the MSDN reference, and any learning text that I have seen also highlights them. By returning a tear off interface from QI, you are violating rules.</p>
<p>But I think the biggest issue is that the fact you are working with an object doesn&#39;t get across to some people. Because they just see the interfaces, and not the interfaces are a window into an object, then the rules don&#39;t make complete sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1153013">
				<div id="div-comment-1153013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140926-00/?p=43973#comment-1153013">
			September 26, 2014 at 11:42 pm</a>		</div>

		<p>Let me remind you that it all started with COM object&#39;s author misunderstanding. It would have been weird for them to turn any error on NULL pointer that they thought could be legitimately NULL. They failed to communicate their expectations to COM marshaller, but hey, while it is not involved, [optional] will mean whatever they wanted it to mean.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1153033">
				<div id="div-comment-1153033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140926-00/?p=43973#comment-1153033">
			September 28, 2014 at 6:11 pm</a>		</div>

		<p>Will there be series on (creative) ways people (mis-)implementing QueryInterface?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1153043">
				<div id="div-comment-1153043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140926-00/?p=43973#comment-1153043">
			September 28, 2014 at 10:18 pm</a>		</div>

		<p>@Cheong00. Well there are &quot;The ways people mess up IUnknown::QueryInterface&quot; episodes in this blog&#39;s archives. But maybe you crave more creativity.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1153063">
				<div id="div-comment-1153063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140926-00/?p=43973#comment-1153063">
			September 29, 2014 at 7:13 am</a>		</div>

		<p>@meh: You mean like return HRESULT_NOTIMPLEMENTED?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1153093">
				<div id="div-comment-1153093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140926-00/?p=43973#comment-1153093">
			September 29, 2014 at 7:41 am</a>		</div>

		<p>@Crescens2k, there&#39;s nothing wrong with tear-off interface pointers per-se, as long as they&#39;re a kind of window into the object, as you say, instead of actual tear-off objects. &nbsp;The only interface pointer that has to be the same is IUnknown.</p>
<p>As for the learning curve, once you know the thing, you don&#39;t call it a curve anymore. &nbsp;But add the most common COM related topics (e.g. pick a book, say Inside COM+), and just see how much knowledge you&#39;ve condensed. &nbsp;Better yet, just look at the MSJ archive for the epic awe and realization that some (otherwise) respectable authors describe when they found out about a(nother) dark corner, that takes 20 paragraphs to explain in detail what it is and how to avoid it (mostly).</p>
<p>And since history repeats itself, nowadays we see just about the same with e.g. Objective C and other reference counting, call-by-name techs. &nbsp;But it&#39;s from the grail, so it must be good for you these days.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1153203">
				<div id="div-comment-1153203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140926-00/?p=43973#comment-1153203">
			September 30, 2014 at 6:11 am</a>		</div>

		<p>@Joshua. Could be creative, or maybe just a mix-up between E_NOTIMPL and E_NOINTERFACE. They both contain mostly the same letters, but NOTIMPL has four less letters to type. Plus it&#39;s numerically one less than NOINTERFACE, making it the lighter choice. <a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/11092313/how-do-i-choose-between-e-notimpl-and-e-nointerface">stackoverflow.com/&#8230;/how-do-i-choose-between-e-notimpl-and-e-nointerface</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>