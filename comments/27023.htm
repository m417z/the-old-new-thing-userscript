<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-498503">
				<div id="div-comment-498503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.vyvojar.cz/jachymko' rel='external nofollow' class='url'>jachymko</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498503">
			May 2, 2007 at 10:38 am</a>		</div>

		<p>Adam: Just thinking, how would threads created by another process (using CreateRemoteThread) know they should quit?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-498523">
				<div id="div-comment-498523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498523">
			May 2, 2007 at 10:43 am</a>		</div>

		<p>I kind-of like Java&#8217;s approach to this issue: exit when all of the threads have exited, except those that have marked themselves as &quot;daemon&quot; threads. &nbsp;It has its downsides (tracking down application exit bugs when you&#8217;ve forgotten to mark one of your threads as a daemon can be annoying) but seems to work reasonably well in most circumstances.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-498533">
				<div id="div-comment-498533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498533">
			May 2, 2007 at 10:54 am</a>		</div>

		<p>Why not just follow the approach of going into standby? If those nasty threads don&#8217;t exit within 2 seconds when main one does, just kill them!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-498543">
				<div id="div-comment-498543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498543">
			May 2, 2007 at 11:00 am</a>		</div>

		<p>Ok, maybe not stadby, I meant turning off, when the applications must close. My point was why one is right to do while the other is not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-498553">
				<div id="div-comment-498553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498553">
			May 2, 2007 at 11:02 am</a>		</div>

		<p>Java&#8217;s (and indeed .net&#8217;s similar) approach can still bite you if classes you don&#8217;t have control over create their own non daemon threads (much like a dll spinning off its own threads). If there&#8217;s no cleanup method, you&#8217;re hosed.</p>
<p>You can of course just call System.exit()/Environment.Exit() &#8211; but that doesn&#8217;t do any special clean up for you, doesn&#8217;t run finalizers etc&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-498603">
				<div id="div-comment-498603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.vyvojar.cz/jachymko' rel='external nofollow' class='url'>jachymko</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498603">
			May 2, 2007 at 1:01 pm</a>		</div>

		<p>Adam: it&#8217;s not relevant whether CRT() is useful or not (for an example, see <a rel="nofollow" target="_new" href="http://www.sf.net/projects/console" rel="nofollow">http://www.sf.net/projects/console</a>).</p>
<p>the point is there may be threads which the process isn&#8217;t aware of. in your case, how would the injecting process determine it&#8217;s time to clean the injected thread up? you&#8217;d need some protocol to coordinate the shutdown between the target process and the injecting one. which makes any</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-498613">
				<div id="div-comment-498613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.vyvojar.cz/jachymko' rel='external nofollow' class='url'>jachymko</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498613">
			May 2, 2007 at 1:03 pm</a>		</div>

		<p>&#8230;injecting quite impossible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-498623">
				<div id="div-comment-498623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://kccollg.blogspot.com' rel='external nofollow' class='url'>Lackey</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498623">
			May 2, 2007 at 1:16 pm</a>		</div>

		<p>..and to think i believed in William Stallings to the end! :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-498653">
				<div id="div-comment-498653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498653">
			May 2, 2007 at 2:19 pm</a>		</div>

		<p>[And if two unrelated DLLs are both using a common DLL, how do they decide which one should call Common_Cleanup()?]</p>
<p>Last one out, turn off the lights? Careful with those circular dependencies, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-498673">
				<div id="div-comment-498673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cmov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498673">
			May 2, 2007 at 2:25 pm</a>		</div>

		<p>&quot;how do they decide which one should call Common_Cleanup()?&quot;</p>
<p>The Common_Init function returned a handle. Wether that handle is shared or unique, the data structure behind that handle tells if it&#8217;s still initialised or not. Just pass it back to the Cleanup().</p>
<p>If the library doesn&#8217;t work that way, it has a bug IMHO. I always stuff a handle down the applications throat if there&#8217;s an init with a corresponding fini. If they don&#8217;t eat it, the resulting memory leak/zombied process/whatever isn&#8217;t my fault. The handle could be a pointer, an index integer for a pointer array or something else, whatever fits.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-chris-ashton even thread-even depth-1" id="comment-498683">
				<div id="div-comment-498683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Chris+Ashton1' rel='external nofollow' class='url'>Chris Ashton1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498683">
			May 2, 2007 at 2:42 pm</a>		</div>

		<p>[And if two unrelated DLLs are both using a common DLL, how do they decide which one should call Common_Cleanup()? No, wait, don&#8217;t answer. ]</p>
<p>And if two unrelated objects are both using a common object, how do they decide which one should destroy the object?</p>
<p>(and I think I will call my new invention &#8230; &quot;reference counts&quot;!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-498693">
				<div id="div-comment-498693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cmov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498693">
			May 2, 2007 at 3:14 pm</a>		</div>

		<p>But how does plain reference counting solve the mutual/cross dependency problem?</p>
<p>(I know, if I have a call to a_fini() in b_fini() and vice versa there&#8217;s a problem too. But then, the design of atleast one of the librarys is at fault.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-498723">
				<div id="div-comment-498723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498723">
			May 2, 2007 at 4:26 pm</a>		</div>

		<p>Well, of course &#8216;the process&#8217; does know about all of the threads executing it in. &#8216;The process&#8217; is an exec object, one of whose jobs it is to know about all threads executing in it.</p>
<p>Which is not just a nit-pick; it leads me to ask whether or not calling the Win32 function ExitProcess does not, in fact, work as advertised: it terminates all threads and then deletes the process.</p>
<p><em>Inside Windows 2000</em> indicates that all attached DLLs are notified during an ExitProcess call. (I don&#8217;t have the XP version of the book handy).</p>
<p>It may not be pretty but it seems though it would get the job done, though I&#8217;d maybe hesitate to use that size hammer for normal exits from production code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-498733">
				<div id="div-comment-498733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cmov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498733">
			May 2, 2007 at 5:07 pm</a>		</div>

		<p>Don&#8217;t all win32 programs eventually call ExitProcess before they die naturally? (As opposed to TerminateProcess which is like SIGKILL.)</p>
<div class=post>[<i>Now I&#8217;m sure people don&#8217;t read before commenting. The entire first half of the article described how programs exited without calling ExitProcess. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-498493">
				<div id="div-comment-498493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498493">
			May 2, 2007 at 10:26 am</a>		</div>

		<p>How about this old-fashioned theory on how processes exit: When a process wants to exit, it releases all the resources it&#8217;s allocated, and then exits the main thread (normally by returning from main() or WinMain())</p>
<p>If a process has a thread pool, it destroys the thread pool. The thread pool is in charge of destroying all threads it created, and not returning to its caller until that&#8217;s done.</p>
<p>If a process has done RPC, it stops RPC (e.g. by calling CoUninitializeEx()). The RPC library is in charge of destroying all the threads *it* created, and not returning to its caller until that&#8217;s done.</p>
<p>If the process has called a DLL, and that DLL has created worker threads, that DLL should have a function to clean up after itself, including all its threads.</p>
<p>Only if a process has created threads *by hand* does it tell those threads (and *only* those threads) that the show is over, wait for them, and then exit.</p>
<p>The great thing about this &#8220;old-fashioned&#8221; way of doing things is that it it doesn&#8217;t just work for threads! It works for all kinds of resources. (And with RAII it&#8217;s automatic!)</p>
<p>Still, I guess there&#8217;s some reason that this doesn&#8217;t work 100% of the time with threads. I&#8217;m now looking forward to the next article(s) in the series to learn why&#8230;</p>
<div class="post">[<i>Wouldn&#8217;t life be grand if every DLL had a shutdown function? And of course, that shutdown function wouldn&#8217;t deadlock or block on the user, and it would magically know to shut things down <a href="http://blogs.msdn.com/oldnewthing/archive/2005/05/23/421024.aspx" rel="nofollow">in the correct order</a>. Sounds like you live in the same ideal world as the people who designed process shutdown. I hope you&#8217;re happy together. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-498573">
				<div id="div-comment-498573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498573">
			May 2, 2007 at 12:11 pm</a>		</div>

		<p>DLLs that allocate resources should have a function to call to release those resources when you don&#8217;t want them anymore. Threads are resources. IMHO, any DLL that is not so written is guaranteed to be buggy because of it. (Resource leaks are also bugs.) Counter-examples gladly appreciated though.</p>
<p>As for ordering, that&#8217;s up to the application to define. An app should release resources in the reverse order it acquired them.</p>
<p>In the previous article that you link to, you point out that A.DLL is buggy in the assumptions it makes, which stem from *not* having an explicit function to release acquired resources and attempting to do it automagically when the DLL is unloaded. Isn&#8217;t that article an argument *for* explicit resource release functions?</p>
<div class=post>[<i>And if two unrelated DLLs are both using a common DLL, how do they decide which one should call Common_Cleanup()? No, wait, don&#8217;t answer. The point is that you&#8217;re assuming programmers are smart. &#8220;Programming is hard. What did you expect? If you&#8217;re not up to it, go get a job sorting onions.&#8221; -Raymond</i>]</div>
<p>jachymko &gt; CreateRemoteThread() generally gives me the willies. What on earth is it useful for, anyway? MSDN gives a couple of examples of common use, and then points out that none of those uses are recommended. Still, if you&#8217;re going to inject threads into a remote process, you should clean them up. If one process called the equivalent of RemoteMalloc() to allocate memory in another process, or RemoteFOpen() to open a file handle in another process, would you expect the original process to free that memory or close that file? If so, why? (If you&#8217;ve got a system in place so that you can transfer ownership of the resource to the remote process, so that it can free those resources, then that&#8217;s how you&#8217;d do it with the threads too. Transfer ownership of the thread to the remote process, and it would then be responsible for clearing it up.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman even thread-even depth-1" id="comment-498793">
				<div id="div-comment-498793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498793">
			May 3, 2007 at 12:12 am</a>		</div>

		<p>And then of course, what do you do about the application that forgets to call X_Cleanup?</p>
<p>Or better yet, what happens when DLL Foo forgets to call X_Cleanup &#8211; your app calls Foo_Cleanup, but Foo forgot to call X_Cleanup. &nbsp;Now your app never goes away.</p>
<p>And, of course Foo.Dll was written 10 years ago and the company that makes it no longer supports it &#8211; but your code requires it. &nbsp;Gotta love the giblets.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-498763">
				<div id="div-comment-498763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498763">
			May 2, 2007 at 7:42 pm</a>		</div>

		<p>It&#8217;s great that everybody can come with a perfect design for library termination. I&#8217;d *love* for all libraries to come with an X_Cleanup() function that automatically handles multiple initializations, circular references and so on.</p>
<p>But, getting back to reality for a minute, many libraries DO NOT work like that. *Of course* it&#8217;s their fault and *of course* it&#8217;s a bug, but while I&#8217;m waiting for that bug to be fixed, I&#8217;ve got to get on with my own job &#8212; which means I need to terminate my process *without* waiting for the buggy library.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-498813">
				<div id="div-comment-498813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498813">
			May 3, 2007 at 3:56 am</a>		</div>

		<p>[Now I&#8217;m sure people don&#8217;t read before commenting. The entire first half of the article described how programs exited without calling ExitProcess. -Raymond]</p>
<p>However, the guy in question is using Visual C++. And the ms visual c-runtime has for the longest time called ExitProcess on the applications behalf when WinMain returns.</p>
<p>In order to subvert that process one would have to change the entry point symbol under the linker settings, or provide an alternative WinMainCrtEntryPoint implementation.</p>
<p>Given the Hello-World nature of the sample code, I&#8217;d guess that &quot;this person&quot; is somewhat new to windows development and has accidentally changed the entry point symbol on the Visual C++ linker settings to point directly to WinMain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-498823">
				<div id="div-comment-498823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498823">
			May 3, 2007 at 5:06 am</a>		</div>

		<p>Chris Becke, now we&#8217;re blaming Visual C++ for standard ANSI C behavior? (i.e. returning from main is the same as calling exit)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-498833">
				<div id="div-comment-498833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-498833">
			May 3, 2007 at 5:12 am</a>		</div>

		<p>dave, has reading documentation fallen out of fashion? From the SDK page on ExitProcess:</p>
<p>&quot;[&#8230;]</p>
<p>Exiting a process causes the following:</p>
<ol>
<li>All of the object handles opened by the process are closed.</li>
<li>
<p>All of the threads in the process, except the calling thread, terminate their execution. The entry-point functions of all loaded dynamic-link libraries (DLLs) are called with DLL_PROCESS_DETACH. After all attached DLLs have executed any process termination code, this function terminates the current process, including the calling thread.</p>
</li>
<li>
<p>The state of the process object becomes signaled, satisfying any threads that had been waiting for the process to terminate.</p>
</li>
<li>
<p>The states of all threads of the process become signaled, satisfying any threads that had been waiting for the threads to terminate.</p>
</li>
<li>
<p>The termination status of the process changes from STILL_ACTIVE to the exit value of the process.</p>
</li>
</ol>
<p>[&#8230;]&quot;</p>
<p>What doesn&#8217;t work as advertised?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-499183">
				<div id="div-comment-499183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-499183">
			May 3, 2007 at 2:35 pm</a>		</div>

		<p>&gt;What doesn&#8217;t work as advertised?</p>
<p>Nothing, and I did read the documentation, as I thought was apparent (the &#8216;as advertised&#8217; part).</p>
<p>My dilemma was that I understood that &#8216;the fine old fashioned way&#8217; of calling ExitProcess could not possibly fail to work, and furthermore the Win32 documentation seemed to agree with me. &nbsp;</p>
<p>So what if there were threads that I didn&#8217;t know about in my application code? They were doomed in any case. I didn&#8217;t have to know to terminate them, because ExitProcess was going to do that for me.</p>
<p>Yet the subject of this thread was that the old-fashioned theory was not correct. &nbsp;So did that mean that the ExitProcess documentation was wrong in some respect? </p>
<p>I guess I should now head on over to &#8220;part 2&#8221; of the discussion.</p>
<div class=post>[<i>The old-fashioned theory is neither correct nor incorrect since was a set of expectations, not a experimental truth. But you yourself noted that those expectations don&#8217;t always hold up. Those &#8220;doomed&#8221; threads can be your downfall. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-499253">
				<div id="div-comment-499253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cmov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-499253">
			May 3, 2007 at 3:47 pm</a>		</div>

		<p>&quot;Now I&#8217;m sure people don&#8217;t read before commenting. The entire first half of the article described how programs exited without calling ExitProcess.&quot;</p>
<p>Ah, sorry. I was a bit puzzled when I read TFA, but now I remember something about using ExitThread to end the program. IIRC it worked for me, but it&#8217;s been quite a while since I learned about ExitProcess ;)</p>
<p>And yes, I have my own entry point. No, it&#8217;s not WinMain because that has a whole different prototype.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-499463">
				<div id="div-comment-499463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-499463">
			May 4, 2007 at 1:34 am</a>		</div>

		<blockquote><p>
  Tell all its threads that the show is over.</p>
<p>  Wait for each of those threads to finish up.
</p></blockquote>
<p>Even that can be dangerous. &nbsp;I don&#8217;t blame Windows for this, I just observe that it can be dangerous.</p>
<p>Example: &nbsp;Subthread gets a notification that a particular resource is going to be unstable (for some known reason), so subthread sleeps for 60 seconds before resuming its monitoring. &nbsp;User uses the &quot;Services&quot; applet to shut down the service. &nbsp;Main thread waits for subthread to terminate. &nbsp;30 seconds pass. &nbsp;Windows kills both threads. &nbsp;User starts the service again. &nbsp;It behaves oddly because some resources leaked and need a reboot.</p>
<p>I&#8217;m not sure if the resource leakage could be solved by having the main thread wait for a timeout, call the dangerous TerminateThread, close known handles and then exit itself. &nbsp;(I solved the problem differently.)</p>
<p>Fortunately Windows records a particularly well worded message in the event log when it terminates a non-responding service. &nbsp;Otherwise I&#8217;d probably still be uselessly looking in a different .exe file where the code&#8217;s &quot;owner&quot; thought the problem was.</p>
<blockquote><p>
  &quot;Programming is hard. What did you expect? If</p>
<p>  you&#8217;re not up to it, go get a job sorting</p>
<p>  onions.&quot; &nbsp;[sarcasm observed]
</p></blockquote>
<p>Wrong. &nbsp;It&#8217;s go get a job firing anyone who knows how to program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-500933">
				<div id="div-comment-500933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-500933">
			May 8, 2007 at 4:07 am</a>		</div>

		<p>@ KJK::Hyperion</p>
<p>Blaming Visual C++ for standard ANSI C behavior? Not at all. The &quot;some person&quot; however thats having the exit problem did state that they were using Visual C++, and did include a code sample showing a WinMain.</p>
<p>This makes me confused on two fronts :- On the one, how is this person getting this lockup? He is creating a thread that never terminates, but is falling out of WinMain in an ANSI C compliant environment. ExitProcess() should be called? Why not? He must have specified a custom entry point. Perhaps he did it by accident by adding &quot;WinMain&quot; as the entry point symbol in the MSVC++ linker settings. Yes the signatures <em>are</em> different but the linker doesn&#8217;t know that, and given the only function above WinMain would be BaseProcessStart the resulting stack silliness might not be ehough to crash (and thus cause process exit).</p>
<p>On the other front, what is this &quot;old days&quot; that Raymond Chen alludes to. ANSI C is pretty damn old. It predates my entire programming career, and, as pointed out, its standard behaviour has always been to call exit() after main() returns.</p>
<p>At least some subset of developers has always been exposed to the idea that simply exiting your &quot;main&quot; thread will terminate the application &#8211; regardless of any outstanding threads.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-501013">
				<div id="div-comment-501013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WikiServerGuy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-501013">
			May 8, 2007 at 6:12 am</a>		</div>

		<blockquote><p>
  Still, you learned enough today to be able to solve this person&#8217;s problem.
</p></blockquote>
<p>Chris Becke is right. &nbsp;When I first read this entry it sort me back a bit as I was sure the MSVC CRT WinMain <em>always</em> called ExitProcess, thus terminating all secondary threads&#8230;</p>
<p>Even went and tested it myself:</p>
<hr />
<p>#include &quot;stdafx.h&quot;</p>
<p>#include &lt;process.h&gt;</p>
<p>void myThread(void *param){</p>
<p>&nbsp; &nbsp; &nbsp;while(1)</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;//nothing</p>
<p>//if loop commented everything is OK and program exits, otherwise</p>
<p>//windows is closing but program wouldn&#8217;t exit.</p>
<p>}</p>
<p>LRESULT CALLBACK WndProc(HWND hwnd, UINT Message, WPARAM wparam,LPARAM</p>
<p>lparam){</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;if (Message == WM_DESTROY ){</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PostQuitMessage(0);</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return 0;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;}</p>
<pre><code>    return DefWindowProc(hwnd, Message, wparam, lparam);
</code></pre>
<p>}</p>
<p>void main() {}</p>
<p>int __stdcall WinMain(HINSTANCE hinstance, HINSTANCE</p>
<p>hPrevInstance,LPSTR lpszCmdLine, int nCmdShow){</p>
<p>// variables defined</p>
<pre><code>HINSTANCE hinst = GetModuleHandle(NULL);

WNDCLASSEX wcex;

wcex.cbSize = sizeof(WNDCLASSEX); 

wcex.style          = CS_HREDRAW | CS_VREDRAW;

wcex.lpfnWndProc    = (WNDPROC)WndProc;

wcex.cbClsExtra     = 0;

wcex.cbWndExtra     = 0;

wcex.hInstance      = hinst;

wcex.hIcon          = NULL;

wcex.hCursor        = LoadCursor(NULL, IDC_ARROW);

wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);

wcex.lpszMenuName   = (LPCSTR)NULL;

wcex.lpszClassName  = &amp;quot;MainWndClass&amp;quot;;

wcex.hIconSm        = NULL;

RegisterClassEx(&amp;amp;wcex);

MSG msg;
</code></pre>
<p>&nbsp; &nbsp; &nbsp; &nbsp;HWND hwndMain = CreateWindow(&quot;MainWndClass&quot;,</p>
<p>&quot;Sample&quot;,WS_OVERLAPPEDWINDOW,100,100,250,210,NULL,NULL, hinst,NULL);</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;if(!hwndMain)</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return FALSE;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;ShowWindow(hwndMain,SW_SHOWNORMAL);</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;UpdateWindow(hwndMain);</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;_beginthread(myThread, 0,NULL);</p>
<pre><code>    int bRet;
</code></pre>
<p>&nbsp; &nbsp; &nbsp; &nbsp;while((bRet=GetMessage(&amp;msg,NULL,0,0))!=0){</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (bRet == -1){}</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TranslateMessage(&amp;msg);</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DispatchMessage(&amp;msg);</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;}</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;return (int)msg.wParam;</p>
<p>}</p>
<hr />
<p>Exits fine with standard CRT entry point; but if you set custom it never exits as expected.</p>
<p>Sort of feel sorry for the person in that linked thread; at least he got a response though&#8230; hopefully one of the things that person reads points out that ExitProcess gets called by the CRT on exit :).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-501783">
				<div id="div-comment-501783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070502-00/?p=27023#comment-501783">
			May 8, 2007 at 9:30 pm</a>		</div>

		<p>Tuesday, May 08, 2007 4:07 AM by Chris Becke</p>
<blockquote><p>
  falling out of WinMain in an ANSI C compliant environment.
</p></blockquote>
<p>Huh?</p>
<p>Tuesday, May 08, 2007 6:12 AM by WikiServerGuy</p>
<blockquote><p>
  void main() {}</p>
<p>  int __stdcall WinMain(HINSTANCE hinstance,</p>
<p>  &nbsp;HINSTANCE hPrevInstance, LPSTR lpszCmdLine,</p>
<p>  &nbsp;int nCmdShow){
</p></blockquote>
<p>[&#8230;]</p>
<blockquote><p>
  }
</p></blockquote>
<p>Huh????? &nbsp;OK, I suppose you could detect that the MS VC CRT calls ExitProcess, but I can&#8217;t quite figure out what environment your code could be valid in.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>