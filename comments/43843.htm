<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (40)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1155693">
				<div id="div-comment-1155693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155693">
			October 15, 2014 at 7:06 am</a>		</div>

		<p>GetCurrentThreadId</p>
<p>I suppose the primary benefit of GetCurrentThread and Process is they do not fail so you do not have to write error handling code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155703">
				<div id="div-comment-1155703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155703">
			October 15, 2014 at 7:06 am</a>		</div>

		<p>I like the follow up exercise &#8211; why is it that whenever I ask the system to make a copy of a handle, it&#39;s never the same as the original copy I took some time ago?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155713">
				<div id="div-comment-1155713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155713">
			October 15, 2014 at 7:17 am</a>		</div>

		<p>Should have probably been a constant, then everything would be obvious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155723">
				<div id="div-comment-1155723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">poizan42</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155723">
			October 15, 2014 at 7:40 am</a>		</div>

		<p>Maybe the real question one should ask is why there are functions which returns constant values. If the pseudohandles was simply HANDLE_CURRENT_PROCESS and HANDLE_CURRENT_THREAD it would probably cause less confusion (like the HKEY_* pseudo handles).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155733">
				<div id="div-comment-1155733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Z</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155733">
			October 15, 2014 at 7:41 am</a>		</div>

		<p>I don&#39;t know that much about Windows programming, but I was successfully able to guess for the 2nd exercise that == isn&#39;t a valid way to check that two thread handles refer to the same thread (the first exercise, of course, is exactly the non-working code mentioned earlier). But then, what is the correct way?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155743">
				<div id="div-comment-1155743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimplyGed</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155743">
			October 15, 2014 at 7:46 am</a>		</div>

		<p>In the first example (CFoo) OnCorrectThread() will always return TRUE because it is comparing pseudo handles.</p>
<p>In the second exercise it will always return FALSE because DuplicateHandle will produce a different handle each time and they will never match</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155753">
				<div id="div-comment-1155753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bozox</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155753">
			October 15, 2014 at 7:52 am</a>		</div>

		<p>@Paul Z: use GetCurrentThreadId() instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155763">
				<div id="div-comment-1155763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155763">
			October 15, 2014 at 8:00 am</a>		</div>

		<p>asdbsd: That&#39;s exactly what I thought. Instead of</p>
<p>HANDLE GetCurrentThread(void);</p>
<p>why not simply</p>
<p>#define CURRENT_THREAD ((HANDLE) -2)</p>
<p>For the exercises:</p>
<p>1. CSingleThreadedObject does not need to access the thread itself, just identify it. Hence it should use GetCurrentThreadId() instead of GetCurrentThread().</p>
<p>2. Well, that completely failed to address the issue I raised, but never mind. The class needs a destructor which calls CloseHandle(_hCreatedThread);</p>
<p>(Did I do a good job of missing the point there?)</p>
<p>Actually, I see an issue with my first answer; after a thread terminates, another thread could start with the same ID.</p>
<p>Assuming that Michael_99&#39;s comment on GetThreadId (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683233%28v=vs.85%29.aspx">msdn.microsoft.com/&#8230;/ms683233%28v=vs.85%29.aspx</a>) is correct (a thread id remains unique as long as there is a handle to it, even after it has terminated), the solution should be</p>
<p>bool OnCorrectThread() { return GetThreadId(_hThreadCreated) == GetCurrentThreadId(); }</p>
<p>otherwise, I you would have to &amp;&amp; that test with WaitForSingleObject(_hThreadCreated, 0) == WAIT_TIMEOUT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155773">
				<div id="div-comment-1155773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155773">
			October 15, 2014 at 8:01 am</a>		</div>

		<p>@Paul Z, @bozox</p>
<p>Or, if you actually do have two thread handles you want to compare, use GetThreadId() on each of them and compare the results. That&#39;s the wrong tool for this exercise, because you never really needed handles at all, but it is an answer to the question you asked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1155783">
				<div id="div-comment-1155783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155783">
			October 15, 2014 at 8:01 am</a>		</div>

		<p>I am afraid the GPS metaphor is not very successful. I&#39;d rather choose a person who looks out of the train window, sees the city of Leningrad, goes to sleep, and looks out of the same window again. To his astonishment, he sees Moscow.</p>
<p>PS The idea comes from a Russian children poem by Samuil Marshak. The intrigue there was that the train was not connected to the engine, and it remained in Leningrad every time the passenger woke up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155793">
				<div id="div-comment-1155793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155793">
			October 15, 2014 at 8:01 am</a>		</div>

		<p>Should have been a define instead, people are going to hardcode the value either way. Might as well let the compiler inline the value too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155803">
				<div id="div-comment-1155803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155803">
			October 15, 2014 at 8:06 am</a>		</div>

		<p>@Paul Z: the correct way would be to store the thread ID returned by GetCurrentThreadID() and later compare to it. You can have several handles referring to the same object, but a thread&#39;s ID doesn&#39;t change. Obviously, if the thread terminates, its ID can be assigned to a new one, but that&#39;s another problem (and AFAIK, Windows tries not to reuse thread and process IDs, even if it is not in the contract).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155823">
				<div id="div-comment-1155823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Silly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155823">
			October 15, 2014 at 8:17 am</a>		</div>

		<p>Did you know that &#39;time&#39; spelled backwards is &#39;emit&#39;?</p>
<p>Ancient Egyptian: I did not know that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155833">
				<div id="div-comment-1155833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155833">
			October 15, 2014 at 8:22 am</a>		</div>

		<p>@Smithers,Henke37:</p>
<p>Afaik the value of the pseudo handle is implementation defined. So it is possible to change between Windows versions. This is why you prefer GetCurrentThread/GetCurrentProcess to hard coding the value. I know it may seem like it is prehistoric, but can you guarantee that the Windows 9x family returned the same values as the Windows NT based systems that we use these days do? Can you guarantee that Windows 7 returns the same values as Windows 8, or Windows 10? While it is unlikely that they will change values for the sake of changing them, there is no mention of the value or that it wont change in the documentation. Therefore you should not assume that the handle value will always be the same. All the documentation says is that it will return a pseudo-handle.</p>
<p>Remember, taking advantage of undocumented behaviour is a future bug report waiting to happen. Surprisingly, if there is no mention of something in the documentation, it is undocumented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155843">
				<div id="div-comment-1155843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155843">
			October 15, 2014 at 8:32 am</a>		</div>

		<p>Antonio: if the thread terminates while you&#39;ve got a handle to it, surely the kernel object is still kept around, so the TID can&#39;t be reused?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155853">
				<div id="div-comment-1155853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155853">
			October 15, 2014 at 8:42 am</a>		</div>

		<p>I have a sneaky suspicion I wrote the code in today&#39;s puzzle&#8230; &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1155863">
				<div id="div-comment-1155863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155863">
			October 15, 2014 at 8:43 am</a>		</div>

		<p>@Crescens2k: The point of their post is not &quot;why not make it a constant now&quot; but &quot;why was it never a (documented) constant in the first place&quot;, which would have avoided all the problems you mention by making it contractual.</p>
<p>The answer is probably &quot;it&#39;s on the time machine to-do list&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155873">
				<div id="div-comment-1155873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155873">
			October 15, 2014 at 9:03 am</a>		</div>

		<p>@Mark: what you say makes a lot of sense. It depends on how the kernel tracks process/thread IDs (whether using the process/thread objects or a dedicated structure), and maybe it is implementation detail and not part of the contract. I would read documentation carefully before relying on it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155883">
				<div id="div-comment-1155883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155883">
			October 15, 2014 at 9:40 am</a>		</div>

		<p>@Medinoc:</p>
<p>That answer wasn&#39;t a &quot;why not make it constant now&quot; answer anyway. While it may be worded in present tense, I did mention a possible heart of the issue all of the way since the early 90s. Cross version compatibility and future compatibility. It is easy to look backwards, but it is always much harder to look forwards.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155893">
				<div id="div-comment-1155893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">theultramage</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155893">
			October 15, 2014 at 9:41 am</a>		</div>

		<p>Can the pseudo-handle be meaningfully compared against real handles? In Microsoft Detours they have</p>
<p>&nbsp; &nbsp;// Silently (and safely) drop any attempt to suspend our own thread.</p>
<p>&nbsp; &nbsp;if (hThread == GetCurrentThread())</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;return NO_ERROR;</p>
<div class="post">[<em>Yup, that&#39;s a bug. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155903">
				<div id="div-comment-1155903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155903">
			October 15, 2014 at 9:47 am</a>		</div>

		<p>@theultramage</p>
<p>That wouldn&#39;t be safe (although I would consider attempting to suspend the current thread worthy of a log event and exception rather than silent ignoring).</p>
<p>However:</p>
<p>if (GetThreadId(hThread) == GetCurrentThreadId()) is nearly as easy, and would be safe. &nbsp;Possibly add a check that GetCurrentThreadId didn&#39;t return zero in the case of an invalid thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155913">
				<div id="div-comment-1155913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155913">
			October 15, 2014 at 9:49 am</a>		</div>

		<p>Hrm, I misread your comment ultramage. &nbsp;If they do it in Detours, then it probably works, but I am not sure I would trust that unless they expect that hThread would have come from an earlier call to GetCurrentThread().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155923">
				<div id="div-comment-1155923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cherry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155923">
			October 15, 2014 at 10:35 am</a>		</div>

		<p>I think they do it wrong in Detours. Yyou are right, this isn&#39;t safe (and therefore it doesn&#39;t work even though Microsoft themselves are doing it &#8211; it&#39;s nothing new that Microsoft&#39;s employees make mistakes too).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1155933">
				<div id="div-comment-1155933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155933">
			October 15, 2014 at 11:45 am</a>		</div>

		<p>@Crescens2k: Win95 only uses the same value for the thread handle:</p>
<p>kernel32!GetCurrentThread:</p>
<p>bff93ed8 b8feffffff &nbsp; &nbsp; &nbsp;mov &nbsp; &nbsp; eax,0FFFFFFFEh</p>
<p>bff93edd c3 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret</p>
<p>kernel32!GetCurrentProcess:</p>
<p>bff94633 b8ffffff7f &nbsp; &nbsp; &nbsp;mov &nbsp; &nbsp; eax,7FFFFFFFh</p>
<p>bff94638 c3 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret</p>
<p>Why -1 is not used I don&#39;t know, maybe it seemed too magical so it was reserved for future use?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155943">
				<div id="div-comment-1155943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">s</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155943">
			October 15, 2014 at 12:11 pm</a>		</div>

		<p>@sxsdnw &#8211; -1 is already taken by INVALID_HANDLE_VALUE, which IIRC has that value for Win16 compat reasons.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155963">
				<div id="div-comment-1155963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AKFrost</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155963">
			October 15, 2014 at 3:14 pm</a>		</div>

		<p>reminds me of a Chinese idiom: 刻舟求劍.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155973">
				<div id="div-comment-1155973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Silly Gisms</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155973">
			October 15, 2014 at 4:27 pm</a>		</div>

		<p>My favorite parts of your blog is when you liken some programming detail to something real-worldish&#8230; GetCurrentThread is like a GPS device, very nice!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1155993">
				<div id="div-comment-1155993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155993">
			October 15, 2014 at 5:10 pm</a>		</div>

		<p>@Mauritis:</p>
<p>The thread ID will stay valid while there is a handle opened to the thread. This keeps the thread object afloat, with the ID assigned to the object. The thread, in the meantime, may be long over.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156003">
				<div id="div-comment-1156003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156003">
			October 15, 2014 at 6:15 pm</a>		</div>

		<p>@Maurits: if you have a group of threads created about the same time (all of them existed at a certain point in time), then your point is right: no two threads from the group will share the same ID. But if it is not the case, there is a corner case: thread A creates the object, thread A terminates, thread B is created and gets the same ID as thread A, thread B accesses the object. Then, even if thread B is not the original creator, it gets access to the object. If what alegr1 says in the previous comment is contractual (I haven&#39;t checked the documentation, sincerely), then the solution would be to keep a handle to the original thread inside the object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1155953">
				<div id="div-comment-1155953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155953">
			October 15, 2014 at 3:00 pm</a>		</div>

		<p>&gt; if the thread terminates, its ID can be assigned to a new one</p>
<p>The ID check tells you whether two threads are, in fact, the same.</p>
<p>As long as both of the following are true, the ID check is safe:</p>
<p>* There was at least one instant in time in which both threads were running.</p>
<p>* At least one of the threads is running at the time of the ID check.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156013">
				<div id="div-comment-1156013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156013">
			October 15, 2014 at 10:29 pm</a>		</div>

		<p>@Antonio: is that not why Maurits said:</p>
<p>&#8211; There was at least one instant in time in which both threads were running.</p>
<p>In your example thread A is terminated before thread B is created, so your example does not take that statement into account.</p>
<p>Ps. does everyone else need to click &#39;sign in&#39; twice before actually being signed in?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1156023">
				<div id="div-comment-1156023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156023">
			October 15, 2014 at 10:40 pm</a>		</div>

		<p>@SimonRev: To be honest, GetThreadId is not available on WinXP (I wonder why GetProcessId is available on WinXP since SP1, but not GetThreadId).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155983">
				<div id="div-comment-1155983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155983">
			October 15, 2014 at 5:07 pm</a>		</div>

		<p>theultramage: surely that&#39;s just ensuring that hThread *is* a real handle? If it&#39;s GetCurrentThread(), we should ignore it; if the user passes in a duplicated handle to the current thread, they deserve what they get.</p>
<p>Maurits: your comment implies that thread IDs can be reassigned while the threads still exist. Does that mean my comment about holding a handle is incorrect, or is there just some simple intuition behind your assertion?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156033">
				<div id="div-comment-1156033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156033">
			October 16, 2014 at 2:00 am</a>		</div>

		<p>Thanks for this posting. I&#39;ve checked the codebase of a project I&#39;m working on, and it has the same bug as in your first example!</p>
<p>Now I hope fixing this bug won&#39;t uncover all kinds of cross-thread-calls that weren&#39;t detected before.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156043">
				<div id="div-comment-1156043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John M. Długosz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156043">
			October 16, 2014 at 2:30 am</a>		</div>

		<p>I suppose that if it is determined that any major popular software assumes the constant used as the pseudo-handle, then MS won&#39;t change it. &nbsp;That&#39;s the story I&#39;ve seen on this blog before, e.g. the story behind MSVCRT.dll.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156063">
				<div id="div-comment-1156063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156063">
			October 16, 2014 at 3:33 am</a>		</div>

		<p>Maybe it would have been clearer if the pseudo-handles had been exported constants?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156123">
				<div id="div-comment-1156123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156123">
			October 16, 2014 at 12:59 pm</a>		</div>

		<p>@Neil: While exporting a constant or a variable is possible, it usually boils down to being a bad idea due to high penalties incurred from the way the loader has to process the fixups.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156223">
				<div id="div-comment-1156223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Will</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156223">
			October 17, 2014 at 12:02 am</a>		</div>

		<p>I once actually bookmarked &quot;Current Location&quot; in the maps app on my phone when I was trying to remember where I parked. &nbsp;I didn&#39;t know the area well, and I had just gotten a whizzy new smartphone. &nbsp;It seemed like a foolproof plan. &nbsp;I went to the restaurant, had a beer, had a nice walk on the beach. &nbsp;Then, in the dark, I pulled out my phone, looked up the car bookmark and asked it for directions. &nbsp;It said I was already there. &nbsp;I became enlightened. &nbsp;I also spent half the night wandering through a strange neighborhood I&#39;d paid no attention to because my phone knew where I had parked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156353">
				<div id="div-comment-1156353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156353">
			October 17, 2014 at 8:00 am</a>		</div>

		<p>&quot;I became enlightened.&quot;</p>
<p>Sorry for laughing at your misfortune but this made me grin hard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156443">
				<div id="div-comment-1156443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156443">
			October 17, 2014 at 8:27 pm</a>		</div>

		<p>While I am not 100% sure I remember looking at the assembly produced by the mingw-w64 compiler and it inlined the function call to GetCurrentThread meaning any software compiled with it is effectively using a constant. That was several years ago with an early version of the mingw-w64 compiler so they may have fixed it since then.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>