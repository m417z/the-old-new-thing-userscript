<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1137943">
				<div id="div-comment-1137943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1137943">
			July 14, 2014 at 7:09 am</a>		</div>

		<p>Does integer composition have any useful usage in the real world?</p>
<div class="post">[<em>You must be new here. Monday programs do not come with motivation. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1137973">
				<div id="div-comment-1137973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1137973">
			July 14, 2014 at 9:49 am</a>		</div>

		<p>@Yuri</p>
<p>According to Wikipedia &quot;[integer partitions] occur in a number of branches of mathematics and physics,&quot; but there is no citation. I&#39;ve done something similar but with factorization. It was a DSP application where breaking a high-order operation down into several lower-order passes could give huge performance gains, but there was no straightforward way of knowing the ideal order of each pass because the performance of each pass depended on the chain of previous pass orders. The number of passes involved was small enough that I could just brute-force the solution at the beginning of the task.</p>
<p>Also, like Raymond says, we don&#39;t need motivation. :-) It&#39;s just a fun problem on its own.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1137983">
				<div id="div-comment-1137983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1137983">
			July 14, 2014 at 9:57 am</a>		</div>

		<p>OK understood, it&#39;s just that I never experienced the &#39;fun with mathematics&#39; part.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1137993">
				<div id="div-comment-1137993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1137993">
			July 14, 2014 at 10:17 am</a>		</div>

		<p>I think my favorite part of this series is that it clearly demonstrates how problems that seem different on the surface can actually be transformed between each other in straightforward ways. It isn&#39;t a skill that you always use in day-to-day programming, but when you get an interesting problem to work on being able to identify those connections can be invaluable.</p>
<p>I&#39;ve been tying together the fields of control systems and DSP in very powerful and novel ways with my current project, and it comes from recognizing similarities in the structures of the algorithms or the math behind them.</p>
<div class="post">[<em>Recognizing how one problem can be transformed into another is important in software engineering. It lets you reuse code. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1138003">
				<div id="div-comment-1138003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138003">
			July 14, 2014 at 10:37 am</a>		</div>

		<p>&gt; &nbsp;for (i = k &#8211; 1; i &gt;= 1; i&#8211;) {</p>
<p>Gack! var this i, please; you can actually get away with this, but only once.</p>
<div class="post">[<em>Fixed, but only once. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1138013">
				<div id="div-comment-1138013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138013">
			July 14, 2014 at 10:42 am</a>		</div>

		<p>@Maurits: Little Programs aren&#39;t polished.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1138023">
				<div id="div-comment-1138023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138023">
			July 14, 2014 at 5:41 pm</a>		</div>

		<p>&quot;If you wanted to generate all compositions of any length &#8230; What&#39;s the easier way of doing it?&quot;</p>
<p>A composition can be identified by whether or not a break is present in each of the n-1 possible slots, as you said at the start. So just enumerate all numbers from 0 to 2^(n-1)-1 and consider the binary representation of each number as a composition.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1138033">
				<div id="div-comment-1138033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138033">
			July 15, 2014 at 3:48 am</a>		</div>

		<p>I guess the ultimate limit of all these partitioning exercises is the problem of solving the Numbers game in Countdown. (Just for the record, the hardest problem that I have ever seen on the show was to compute 834 given 100, 75, 50, 25, 10 and 5.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1138623">
				<div id="div-comment-1138623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138623">
			July 15, 2014 at 5:30 pm</a>		</div>

		<p>@Neil, you can do it with only 100 and 10:</p>
<p>(100*10 &#8211; 100 &#8211; 100) + (100/10 + 100/10 + 100/10) + (10/10 + 10/10 + 10/10 + 10/10)</p>
<p>Obviouslyâ„¢, it gets cuter with the rest of the numbers:</p>
<p>75*5 + 50*10 &#8211; 50 + 10 &#8211; 25/25</p>
<p>Oh, the possibilities&#8230; Say, *that* would be an awesome little program!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1138783">
				<div id="div-comment-1138783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138783">
			July 16, 2014 at 6:34 am</a>		</div>

		<p>@John Doe, you can&#39;t reuse the numbers. The goal is to get as close as possible, so something like 75*10 + 50 + 25 + 10 = 835 would be good, but there may be a way to reach it exactly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1138893">
				<div id="div-comment-1138893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138893">
			July 16, 2014 at 8:11 am</a>		</div>

		<p><a rel="nofollow" target="_new" href="http://rve.org.uk/countdown?n=100&amp;n=75&amp;n=50&amp;n=25&amp;n=10&amp;n=5&amp;t=834">rve.org.uk/countdown</a></p>
<p>This finds the exact solution, but I can&#39;t imagine how anyone could figure it out in the game show situation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1139763">
				<div id="div-comment-1139763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1139763">
			July 21, 2014 at 7:11 am</a>		</div>

		<p>@Katie, Thanks.</p>
<p>Sometimes, my hubris fogs me to the point I can&#39;t tell I&#39;m stupid, much less how stupid I am.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>