<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (32)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-488803">
				<div id="div-comment-488803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-488803">
			April 3, 2007 at 10:16 am</a>		</div>

		<p>Once I found the thread pool I never looked back. &nbsp;I&#8217;ve used it for handling long running tasks, timed waits, waiting on objects and alertable I/O. &nbsp;I even use it with WT_EXECUTELONGFUNCTION when I want a thread but don&#8217;t want to call _beginthreadex(). &nbsp;The WIN32 thread pool has helped me to become the multi-threaded programming god that I am today. ;)</p>
<p>Just make sure to use -D_WIN32_WINNT=0x0500 if you want to use the thread pool on Windows 2000!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488813">
				<div id="div-comment-488813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-488813">
			April 3, 2007 at 11:02 am</a>		</div>

		<p>It seems Raymond&#8217;s example is just shy of the break-even point where it would become worthwhile to start a second thread on a dual-core machine.</p>
<p>The first thread starts: &nbsp;+1 ms.</p>
<p>The second thread starts in parallel with the first thread running the first task: &nbsp;+1 ms.</p>
<p>The second and third tasks now run in parallel: &nbsp;+1 ms.</p>
<p>Two threads are taken down serially: &nbsp;+2 ms.</p>
<p>Total wall-clock time is 6 ms, half of which is overhead, only a millisecond more than Raymond&#8217;s example. &nbsp;As more tasks are added this is amortised AND those tasks can potentially run in parallel. &nbsp;With just a couple more tasks, you&#8217;re ahead of the game with two-threads on a dual-core machine.</p>
<p>Obviously you don&#8217;t want to create a thread for each task, but it seems like it could make sense to create one for each processor core in all but the most limited circumstances (in which case, the extra overhead is probably unnoticed anyway).</p>
<p>I wrote my own thread pooling that works this way (one thread per core) for a compute-intensive project. &nbsp;I&#8217;ve had great success with it a dual-core machine running XP. &nbsp;On Vista, however, the machine becomes quite sluggish if you try to interact with another app while my program is running in the background.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488863">
				<div id="div-comment-488863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JeffCurless</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-488863">
			April 3, 2007 at 12:17 pm</a>		</div>

		<p>My problem with the thread pool pre-vista is there is no way to be 100% sure that a task assigned to the thread pool is complete. &nbsp;The documentation is sorely lacking when talking about lifetime management of threads in the pool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488873">
				<div id="div-comment-488873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-488873">
			April 3, 2007 at 1:21 pm</a>		</div>

		<p>@JeffCurless</p>
<p>I would recommend using an event or some other flag (possibly contained in a struct passed as a parameter to the thread) to indicate when the task is complete. &nbsp;Using some other synchronization primitive like waiting on the thread handle is not guaranteed to work as you have no idea when that thread will actually be terminated. &nbsp;Heck, the same thread that starts processing the task might not be the same one that finishes it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488893">
				<div id="div-comment-488893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-488893">
			April 3, 2007 at 2:17 pm</a>		</div>

		<p>I think the point is &#8211; why does the thread &quot;pool&quot; only use a -single- worker thread? Why not call it something different, and leave the name &quot;thread pool&quot; to something where you actually can have a pool of threads waiting to be assigned tasks?</p>
<p>That way, 2 of the 3 tasks could run concurrently (on a dualcore processor that is), and all 3 tasks would finish in 2ms (and since you could use an application-wide thread pool, the initial thread creation overhead would be close to 0, hidden somewhere in the application startup time).</p>
<p>Or am I missing something?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488903">
				<div id="div-comment-488903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-488903">
			April 3, 2007 at 2:22 pm</a>		</div>

		<p>I&#8217;m not sure that you really addressed the original question &#8211; which was asking why the thread pool only used a single work thread for compute tasks.</p>
<p>Was it because they had only a few large tasks (that weren&#8217;t marked as &#8216;long&#8217;)?</p>
<p>What if there were 5000 &#8220;brief tasks&#8221;?</p>
<p>Just curious.</p>
<div class=post>[<i>The linked articles demonstrate that the thread pool will create additional worker threads when it feels the need to. I don&#8217;t know what the precise rules are; I suspect they have changed over time. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488913">
				<div id="div-comment-488913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kbiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-488913">
			April 3, 2007 at 3:55 pm</a>		</div>

		<p>Re: The documentation is sorely lacking when talking about lifetime management of threads in the pool.</p>
<p>That might be because the thread pool is NOT there to solve threading lifetime management problems. &nbsp;It has very specific purpose, to allow programmers a efficient way of running multiple small tasks in separate thread(s) without having to create and tear down threads constantly. &nbsp;If I remember correctly, the thread pool is also smart enough to know when you&#8217;ve given it the same task (section of code) multiple times and use the same thread to execute that code gaining some efficiency.</p>
<p>Personally, I&#8217;ve used the thread pool in .Net to call event delegates since I don&#8217;t care what happens and don&#8217;t want the event consumer running on MY threads possibly choking my application. &nbsp;In that case, I really, really don&#8217;t care about lifetime management of those threads.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488933">
				<div id="div-comment-488933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JeffCurless</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-488933">
			April 3, 2007 at 4:25 pm</a>		</div>

		<p>Re: That might be because the thread pool is NOT there to solve threading lifetime management problems.</p>
<p>&lt;snip&gt;</p>
<p>Think about this in non-managed C++ code then. &nbsp;I start a long running operation. &nbsp;Then something causes the application to close, which causes some memory to be cleaned up, which may or may not cause the long running operation to crash, since there is no way to do a WaitForSingleObject on the thread pool to ensure it has completed. &nbsp;Now if Microsoft explicitly stated when and how the thread pool was cleaned up, I could design the rest of my application accordingly. &nbsp;Right now, I have absolutely no knowledge of how they cleanup, so therefore I can&#8217;t in good conscience use the threadpool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488943">
				<div id="div-comment-488943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-488943">
			April 3, 2007 at 4:42 pm</a>		</div>

		<p>Thanks for the response Raymond</p>
<p>I certainly don&#8217;t envy the group that manages the heuristics for the thread pool implementation, as the optimum strategy is different depending on whether the tasks are cpu heavy or i/o heavy.</p>
<p>And heaven help you if you have tasks that are both cpu and i/o heavy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488953">
				<div id="div-comment-488953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kbiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-488953">
			April 3, 2007 at 5:03 pm</a>		</div>

		<p>Jeff,</p>
<p>You&#8217;re still assuming that the it&#8217;s the thread pool&#8217;s job to help you with thread lifetime management. &nbsp;That&#8217;s not what it is designed to do regardless of whether the code is managed or unmanaged. &nbsp;Managed code can and does have the same issues. &nbsp;I don&#8217;t understand why you want the thread pool to inform YOU of whether YOUR code is complete or not. &nbsp;It&#8217;s your job to manage your thread lifetime and communicate with it if necessary. &nbsp;I would suggest, though, that if your threading scenario is that complicated then the thread pool is not the right tool to use. &nbsp;In fact, the documentation (<a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/ms686756.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/ms686756.aspx</a>) seems fairly clear on that subject:</p>
<p>&quot;To use thread pooling, the work items and all the functions they call must be thread-pool safe. A safe function does not assume that the thread executing it is a dedicated or persistent thread. In general, you should avoid using thread local storage or making an asynchronous call that requires a persistent thread, such as the RegNotifyChangeKeyValue function.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488993">
				<div id="div-comment-488993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-488993">
			April 3, 2007 at 9:41 pm</a>		</div>

		<p>&lt;&lt; In a sense, you shouldn&#8217;t be surprised that the thread pool is using only one thread; instead, you should be happy! &gt;&gt;</p>
<p>Uhhh. No. I&#8217;d be happy if it was a single core processor. &nbsp;If it was a dual or quad core system, I&#8217;d be peeved at all of the CPU time being squandered. &nbsp;Especially when you change this example to be 10 or 100 or 10,000 &#8220;tasks&#8221;, the overhead for creating a thread is completely marginalized.</p>
<div class=post>[<i>Please send me a pointer to your program that creates 10,000 tasks where the thread pool doesn&#8217;t create a second thread. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-489013">
				<div id="div-comment-489013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489013">
			April 4, 2007 at 12:18 am</a>		</div>

		<p>Why doesn&#8217;t the thread pool start with a number of threads equal to the number of apparent CPUs?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-489023">
				<div id="div-comment-489023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489023">
			April 4, 2007 at 12:27 am</a>		</div>

		<blockquote><p>
  The purpose of the thread pool, as I noted above, was to reduce the overhead of creating and terminating threads
</p></blockquote>
<p>If it&#8217;s already virtualizing threads, why not amortize the cost of creating threads by keeping a harem of threads for the lifetime of the pool. If something is scaling perfectly you&#8217;d need one thread per core, which is a very small number anyways, and just means a few megs of unused stack if you don&#8217;t bother using less.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-489043">
				<div id="div-comment-489043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489043">
			April 4, 2007 at 2:43 am</a>		</div>

		<p>I know this doesn&#8217;t have anything to do with you Ray, but&#8230; how many MSN Messenger&#8217;s threads does it take to change a light bulb? Seriously, why the heck does Messenger need so many threads? (sorry, I needed to vent)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-489053">
				<div id="div-comment-489053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489053">
			April 4, 2007 at 3:06 am</a>		</div>

		<p>Anonymous Coward: check out how many threads ActiveSync uses: <a rel="nofollow" target="_new" href="http://codeka.com/blogs/index.php/dean/2006/08/02/activesync_and_the_number_of_threads_in_" rel="nofollow">http://codeka.com/blogs/index.php/dean/2006/08/02/activesync_and_the_number_of_threads_in_</a></p>
<p>And to those people wondering why the thread pool only creates one thread even if you have more than one processor, you just need to realize that thread pools are meant to be used in a server environment. In a server, the wall time required for an operation to complete (that is, the &quot;response time&quot;) is not (usually) as important as the throughput (that is, the number of requests processed per second). Even though on multiple CPUs, creating two threads takes the same amount of &quot;wall time&quot; as creating one thread, you&#8217;re still using twice as many CPU cycles to create them both &#8211; CPU cycles that could be doing something else.</p>
<p>Besides, as Raymond says, the thread pool WILL eventually create another thread if the number of requests increases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-489073">
				<div id="div-comment-489073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489073">
			April 4, 2007 at 6:29 am</a>		</div>

		<p>Wednesday, April 04, 2007 3:06 AM by Dean Harding</p>
<blockquote><p>
  And to those people wondering why the thread</p>
<p>  pool only creates one thread even if you have</p>
<p>  more than one processor, you just need to</p>
<p>  realize that thread pools are meant to be</p>
<p>  used in a server environment.
</p></blockquote>
<p>That reinforces the question. &nbsp;Servers make it so much more likely that there will be a heavy load on the thread pool. &nbsp;Servers make it so much more likely that the number of thread pool threads will grow as large as the number of processors (and maybe even more). &nbsp;So much more the reason to create them to begin with, instead of leaving cores idle in the meantime.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-489083">
				<div id="div-comment-489083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489083">
			April 4, 2007 at 6:48 am</a>		</div>

		<p>Just for interest, there are two .net CLR thread pools. One for &#8216;work items&#8217; and one to manage IO Completions. Both thread pools start out with as many threads as there are cores.</p>
<p>The CLR will grow the pools, but not immediately &#8211; it&#8217;s quite prepared to let remoting calls block at the server waiting for an available thread, and the pool isn&#8217;t grown nearly as quickly as I&#8217;d expect (which is probably a fault of my expectations).</p>
<p>Socket accept calls are each done on their own non-pooled thread. Makes sense, as these could block forever&#8230;</p>
<p>(I mention all this because the CLR thread pools probably use the underlying windows thread pool and there&#8217;s a 1:1 mapping between CLR threads and real kernel threads).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-489123">
				<div id="div-comment-489123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489123">
			April 4, 2007 at 8:38 am</a>		</div>

		<p>Nar: A &#8216;harem of threads&#8217; &#8211; is this the official collective noun for threads? Are Harems kept in Pools? Is there an undocumented Harem api somewhere deep in Vista? I look forward to the MSDN page (I&#8217;d be willing to write it for that matter).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-489253">
				<div id="div-comment-489253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489253">
			April 4, 2007 at 10:55 am</a>		</div>

		<p>&quot;That reinforces the question. &nbsp;Servers make it so much more likely that there will be a heavy load on the thread pool. &nbsp;Servers make it so much more likely that the number of thread pool threads will grow as large as the number of processors (and maybe even more). &nbsp;So much more the reason to create them to begin with, instead of leaving cores idle in the meantime.&quot;</p>
<p>This assumes that there is only ever one process running on the server, and therefore that process should be given all of the CPU time it can take. &nbsp;It is very unlikely that this is true.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-489323">
				<div id="div-comment-489323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hayden</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489323">
			April 4, 2007 at 11:27 am</a>		</div>

		<p>I&#8217;d go with the assertion that a &quot;pool&quot; is a bad term for this object. Database connection pools usually have a bunch (or harem, I like that) of connections ready for use by the program. The entire purpose being to elimiate as much as possible the connection setup/teardown time.</p>
<p>Perhaps we have all read</p>
<p><a rel="nofollow" target="_new" href="http://www-128.ibm.com/developerworks/java/library/j-jtp0730.html" rel="nofollow">http://www-128.ibm.com/developerworks/java/library/j-jtp0730.html</a></p>
<p><a rel="nofollow" target="_new" href="http://www.cs.wustl.edu/~schmidt/PDF/OM-01.pdf" rel="nofollow">http://www.cs.wustl.edu/~schmidt/PDF/OM-01.pdf</a></p>
<p>It seems kind of counter-intuitive that a &quot;pool&quot; should only contain one thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion even thread-even depth-1" id="comment-489463">
				<div id="div-comment-489463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489463">
			April 4, 2007 at 1:13 pm</a>		</div>

		<p>&quot;S&quot;: there specifically is NOT an 1:1 mapping between native and managed threads. See Thread.BeginThreadAffinity/EndThreadAffinity, HostProtectionResource.ExternalThreading, etc. and the ICLRTask hosting interface</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-489093">
				<div id="div-comment-489093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.morganalley.com' rel='external nofollow' class='url'>Dewi Morgan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489093">
			April 4, 2007 at 7:09 am</a>		</div>

		<p>I do hope nobody posts the current algorithm for deciding when to create another thread in the pool.</p>
<p>Because, you just *know* someone will assume that behaviour when programming, and then the algorithm will never be able to change again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-489503">
				<div id="div-comment-489503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489503">
			April 4, 2007 at 2:14 pm</a>		</div>

		<p>KJK::Hyperion &#8211; I meant for .net 1.0/1.1 only (some of us have to remain in the dawn, whilst other bask in the sun). 2.0+ adds all the goodness you describe.</p>
<p>(and in the .net world, shouldn&#8217;t you be KJK.Hyperion?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-489703">
				<div id="div-comment-489703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489703">
			April 4, 2007 at 8:30 pm</a>		</div>

		<p>Hayden: Read the whole article. There is NOT &quot;only&quot; one thread. There is &quot;only&quot; one thread when the number of queued tasks is small.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-489713">
				<div id="div-comment-489713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489713">
			April 4, 2007 at 8:33 pm</a>		</div>

		<p>And my own &quot;nitpicker&#8217;s corner&quot;:</p>
<p>s/small/too small to warrant creating another thread/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-489723">
				<div id="div-comment-489723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489723">
			April 4, 2007 at 10:48 pm</a>		</div>

		<p>Wednesday, April 04, 2007 10:55 AM by GregM</p>
<blockquote><p>
  &gt; &quot;So much more the reason to create them to</p>
<p>  &gt; begin with, instead of leaving cores idle in</p>
<p>  &gt; the meantime.&quot;
</p></blockquote>
<p>></p>
<blockquote><p>
  This assumes that there is only ever one</p>
<p>  process running on the server,
</p></blockquote>
<p>No, the possibility that cores might be left idle assumes that there&#8217;s only one process running on the server, but the reason to create them is because of the possibility that there might be only one nontrivial process running. &nbsp;Sure if you&#8217;re running Exchange and SQL on the same 4-core server then you might only want 1, I mean 2, initial threads in each pool, if you&#8217;re sure you want to initially restrict each to 50% of the CPU.</p>
<p>Nitpicker&#8217;s corner:</p>
<p>s/one/fewer than the number of apparent cores/</p>
<p>s/leaving cores idle/sometimes leaving cores idle/</p>
<p>Wednesday, April 04, 2007 8:33 PM by Dean Harding</p>
<blockquote><p>
  And my own &quot;nitpicker&#8217;s corner&quot;:</p>
<p>  s/small/too small to warrant creating another thread/
</p></blockquote>
<p>Yes nitpickers&#8217; corners are too small to warrant creating another thread, so we put them in a subthread pool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-489823">
				<div id="div-comment-489823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489823">
			April 5, 2007 at 7:59 am</a>		</div>

		<p>So:</p>
<p>Why thread pool doesn&#8217;t use same number of threads as the number of physical cores?</p>
<p>And of course, are the threads from the pool really persistent or we are still dealing with overhead of creating threads for each QueueWorkItem() call?</p>
<p>I have a feeling that this behavior could be fixed by a hotfix.</p>
<div class=post>[<i>Um, read the article again. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-489973">
				<div id="div-comment-489973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-489973">
			April 5, 2007 at 1:50 pm</a>		</div>

		<p>I don&#8217;t know precisely how the native threadpool works, but from the documents about the CLR threadpool (which is likely managed by the CLR itself), threads are created dynamically in response to demand. &nbsp;</p>
<p>You don&#8217;t want to spin up threads until they&#8217;re asked for. &nbsp;If you make threads beforehand, then every program gets NCPUS threads at startup, even if they&#8217;re some little console app that does all calculations and work on the main thread. &nbsp;It makes a lot more sense to make threads lazily. &nbsp;If you&#8217;re building an app where you know explicitly that you want to peg all of the cores with your work items, then by all means write your own thread pool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-490033">
				<div id="div-comment-490033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-490033">
			April 5, 2007 at 4:28 pm</a>		</div>

		<p>Why not spin up the threads at the first use of the threadpool? After that, make a new thread whenever a task is blocked up to the number of cores (or whatever). Beyond that, you might make new threads when it looks like some of the tasks are long running.</p>
<div class=post>[<i>I don&#8217;t know what to say when people suggest that something be changed to work the way it already does. Perhaps I&#8217;ll just say &#8220;That&#8217;s interesting.&#8221; That&#8217;s interesting. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-490133">
				<div id="div-comment-490133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-490133">
			April 5, 2007 at 8:40 pm</a>		</div>

		<p>nks said: &quot;then by all means write your own thread pool&quot;</p>
<p>So basically you are suggesting us to reinvent the wheel, not to reuse existing code, and to do the work OS is supposed to do for us? Nice logic. Too bad it&#8217;s broken.</p>
<p>Raymond, actually I was interested in WT_EXECUTEINPERSISTENTTHREAD flag which you haven&#8217;t discussed. MSDN says:</p>
<p>&quot;Note that currently no worker thread is truly persistent&quot;</p>
<p>Why is that so and has it changed in Vista?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-490353">
				<div id="div-comment-490353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-490353">
			April 6, 2007 at 2:40 pm</a>		</div>

		<p>[I don&#8217;t know what to say when people suggest that something be changed to work the way it already does. Perhaps I&#8217;ll just say &quot;That&#8217;s interesting.&quot; That&#8217;s interesting. -Raymond]</p>
<p>I&#8217;m suggestign that this is a reasonable implementation, not that it&#8217;s different from that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-491923">
				<div id="div-comment-491923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Cohn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070403-00/?p=27393#comment-491923">
			April 11, 2007 at 6:18 am</a>		</div>

		<blockquote><p>
  Why not spin up the threads at the first use of the threadpool?
</p></blockquote>
<p>The &quot;new&quot; thread pool, as avaliable for Vista and Longhorn, does inlcude a SetThreadpoolThreadMinimum() function, see <a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/ms686268.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/ms686268.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>