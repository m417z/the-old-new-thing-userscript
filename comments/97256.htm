<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1 parent" id="comment-1313285">
				<div id="div-comment-1313285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313285">
			October 20, 2017 at 7:18 am</a>		</div>

		<p>I&#8217;m very curious about how the failure condition was removed, especially without increasing the size of the CRITICAL_SECTION structure. Is it related to the (apparently Vista-introduced if I read the doc right) ability to have a critical section without debug info (which sets that pointer to -1)?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-s-m-joshi-02 odd alt depth-2" id="comment-1313295">
				<div id="div-comment-1313295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313295">
			October 20, 2017 at 7:27 am</a>		</div>

		<p>In the XP timeframe, they introduced a Keyed Event which is used as an alternative to the Event Object that is normally allocated for a Critical Section. A Keyed Event uses a pointer-sized value as a key.  There is a single low memory Keyed Event for the entire system which means that no allocation is necessary. The performance of Keyed Events was improved in Vista and that&#8217;s why we can have SRW locks etc.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1313305">
				<div id="div-comment-1313305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313305">
			October 20, 2017 at 9:46 am</a>		</div>

		<p>For a very long time, people used to build with /eha, catching &#8230; and whatnot. Probably still do.</p>
<p>But doing  that prevents the &#8221; only thing you can do is to just crash the process before things get any worse&#8221; solution to the problems.</p>
<p>So in practice chances are, programs who fell on those must have been borked very badly.</p>
<p>BTW&#8230; .NET, until v4 (erm&#8230; I think), was catching SEs as well, that was unhealthy, too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kirbyfcf2 odd alt thread-even depth-1 parent" id="comment-1313325">
				<div id="div-comment-1313325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Kirby+FC' rel='external nofollow' class='url'>Kirby FC</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313325">
			October 20, 2017 at 6:21 pm</a>		</div>

		<p>&#8220;No, that&#8217;s not what it&#8217;s saying. It&#8217;s saying that starting in Windows Vista, the function never fails.&#8221;</p>
<p>Really?  That&#8217;s great!!  Now the next question is, since Microsoft has invented a function that never fails, why don&#8217;t they design ALL their functions like that?  No more failures!!!</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1313345">
				<div id="div-comment-1313345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313345">
			October 21, 2017 at 1:03 am</a>		</div>

		<p>Don&#8217;t allocate memory.<br />
That&#8217;s basically how to &#8220;never fail&#8221;.</p>
<p>Doesn&#8217;t mean it can&#8217;t crash &#8211; if calling exceeds stack depth&#8230;</p>
<p>It&#8217;s also pretty useless advice, as most of the interesting things you can do involve allocating memory.</p>
<p>Quite a lot of applications really do work this way though. They allocate all the memory they will ever need at startup, and so if they start, they will run and cannot run out of memory.</p>
<p>This is the usual approach on embedded microcontrollers with extremely limited memory &#8211;  4KB is enough for anyone, right?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1313757">
				<div id="div-comment-1313757" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Crowther</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313757">
			October 25, 2017 at 12:54 am</a>		</div>

		<p>It&#8217;s pretty common in games as well, I believe.  They block allocate at start-up and then handle their own memory management.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1313355">
				<div id="div-comment-1313355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The_Assimilator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313355">
			October 21, 2017 at 11:54 am</a>		</div>

		<p>In all honesty the <i>Initialize­Critical­Section­And­Spin­Count</i> documentation isn&#8217;t clear unless you happen to have read this blog post. I would rewrite it to something along the lines of &#8220;This function returns a nonzero value on success, and zero (0) on failure. Windows Vista and later: This function is guaranteed to succeed.&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1313365">
				<div id="div-comment-1313365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313365">
			October 21, 2017 at 4:10 pm</a>		</div>

		<p>Yup, I have a doc change request pending to make the description more clear.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1313385">
				<div id="div-comment-1313385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313385">
			October 22, 2017 at 7:51 am</a>		</div>

		<p>I&#8217;m pretty sure it fails if I pass it 0x100 for the pointer value. I haven&#8217;t had the guts to find out if it returns false or crashes.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1313386">
				<div id="div-comment-1313386" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313386">
			October 22, 2017 at 10:00 am</a>		</div>

		<p>That&#8217;s one of those basic rules of programming: If you pass arguments to a function that violate it&#8217;s contract you&#8217;re operating outside the defined contract and can no longer rely on any of its guarantees. So you get undefined behavior.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1313415">
				<div id="div-comment-1313415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313415">
			October 23, 2017 at 4:08 am</a>		</div>

		<p>&#8220;So you get undefined behavior.&#8221; This case is not about C compiler assumptions, so in my opinion, &#8220;undefined behavior&#8221; is just not the correct term here. </p>
<p>The Initialize­Critical­Section­And­Spin­Count call itself may silently override the memory pointed to by the first argument, or it may trigger an Access Violation on the attempt, but that&#8217;s it. Any other outcome would be bug in the implementation of an API to initialize some given memory block.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1313425">
				<div id="div-comment-1313425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313425">
			October 23, 2017 at 5:17 am</a>		</div>

		<p>Replying to someone &#8211; but what are the effects of that silent overwrite?  What if the memory is partially overwritten again by the true owner of that memory?  Well, now your mutex may be corrupt, and you may get a dead-lock, or you may get incorrect locking that results in silent data corruption somewhere else (that might be protected by that mutex).  </p>
<p>Maybe that data corruption results in a flag being set that that makes your program think its been invoked in a mode that formats all the hard-disks&#8230;  That&#8217;s why undefined behaviour is undefined.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1313435">
				<div id="div-comment-1313435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313435">
			October 23, 2017 at 5:53 am</a>		</div>

		<p>@GWO: all true. But this is not the same as stating that a function call of the OS API can do random things, as how a C compiler can emit random code when faced with Undefined Behavior. The case of Joshua will throw an Exception, always. I would consider the behavior of such APIs well-defined, not undefined.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1313445">
				<div id="div-comment-1313445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313445">
			October 23, 2017 at 6:58 am</a>		</div>

		<p>There&#8217;s no particular reason it couldn&#8217;t contain if (criticalsection &lt; 65536) {SetLastError(access violation); return FALSE;} I rather expect it&#039;s there for NULL. Some people write their null arguments as catch any very low pointer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1313456">
				<div id="div-comment-1313456" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313456">
			October 23, 2017 at 9:15 am</a>		</div>

		<p>Replying to someone: There is also undefined behavior in operating systems. It means &#8220;Anything can happen (within your security boundary).&#8221; For user-mode code, it means that your process (and anything your process has access to) can behave unpredictably.&#8221; For examples, see pretty much every security vulnerability report. There are versions of Windows where passing a null pointer to InitializeCriticalSection did not guarantee an instant fault.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1313367">
				<div id="div-comment-1313367" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">martin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313367">
			October 22, 2017 at 3:04 am</a>		</div>

		<p>I had to try it. I run following simple program on my 32 bit windows 7 with 3 GB RAM:<br />
#define CS_BLOCK (1024*1024)<br />
#define CS_BLOCKS 40<br />
#define CS_COUNT (CS_BLOCKS*CS_BLOCK)<br />
CRITICAL_SECTION gArr[CS_COUNT];<br />
void main()<br />
{<br />
    int i,j;<br />
    size_t n = 0;</p>
<p>    memset(gArr,0, sizeof(gArr));<br />
    printf(&#8220;Allocated&#8221;);getch();</p>
<p>    for(j = 0; j &lt; CS_BLOCKS;j++)<br />
    {<br />
        for(i = 0; i &lt; CS_COUNT; i++)<br />
        {<br />
            InitializeCriticalSection(&amp;gArr[n]);<br />
            n++;<br />
        }<br />
        printf(&quot;%i\n&quot;,j);<br />
    }<br />
    printf(&quot;Initialised&quot;);getch();<br />
}<br />
The program allocates 960MB of RAM for the array and waits for a key. The it starts to initialise all the critical sections.<br />
If you run at and watch the task manager, you will see, that InitializeCriticalSection() allocates memory, if possible. This code is in userspace.<br />
Then when there is not enough RAM, kernel takes the job (enable &quot;show kernel times&quot; in the task manager).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1313526">
				<div id="div-comment-1313526" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313526">
			October 24, 2017 at 12:33 am</a>		</div>

		<p>I&#8217;ve always wondered how Initialize­Critical­Section could fail with an out-of-memory error, given that the memory is supplied by the calling process&#8230; is there some kernel-mode pointer that needs to be allocated for refer to it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1313976">
				<div id="div-comment-1313976" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dennis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171020-00/?p=97256#comment-1313976">
			October 25, 2017 at 9:17 pm</a>		</div>

		<p>Hey, Raymond, I just discovered that you keep writing these. Wow. Thanks a bunch!</p>
<p>Just curious though, do you have a Twitter account that we can follow? Or even better, maybe a YouTube channel to do screencasts to explain these things? Would be awesome!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>