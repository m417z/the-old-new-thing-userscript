<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1214761">
				<div id="div-comment-1214761" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EMB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214761">
			November 11, 2015 at 8:16 am</a>		</div>

		<p>And in Windows 98 SE, Raymond implemented an algorithm that specifically defeates the function that specifically defeates the sequential-scan detector.</p>
<p>Just kidding&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1214751">
				<div id="div-comment-1214751" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Niklas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214751">
			November 11, 2015 at 8:57 am</a>		</div>

		<p>Why would Quake want to use that algorithm? I guess it would somehow help them achieve a smoother frame rate?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-brambrambrambram even thread-even depth-1" id="comment-1214741">
				<div id="div-comment-1214741" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Sintendo' rel='external nofollow' class='url'>Sintendo</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214741">
			November 11, 2015 at 9:18 am</a>		</div>

		<p>Am I missing something or is that an unused variable (int j)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1214731">
				<div id="div-comment-1214731" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214731">
			November 11, 2015 at 9:19 am</a>		</div>

		<p>@Niklas: Sure. It guarantees that a particular chunk of memory is marked as recently used, so it&#39;s less likely to be paged out.Presumably, they kept tight control on what parts of their world needed to be in memory at any one time, and didn&#39;t want to incur &nbsp;extra cost of paging in memory multiple times, just because Windows XP had a bad use case (for which it decided to apply something of a hack to the paging rules).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1214721">
				<div id="div-comment-1214721" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Buck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214721">
			November 11, 2015 at 9:21 am</a>		</div>

		<p>*Everything* in Quake, and games in general (but especially so in Quake at the time it was released), is about trying to get a smoother framerate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1214711">
				<div id="div-comment-1214711" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken in NH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214711">
			November 11, 2015 at 9:32 am</a>		</div>

		<p>@Sintendo</p>
<p>I suspect j was meant to hold (size &#8211; 16 * 0x1000).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1214701">
				<div id="div-comment-1214701" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ancient_Hacker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214701">
			November 11, 2015 at 11:14 am</a>		</div>

		<p>Oh my, that explains, 20 years later, why some of my attempts to touch my critical heap areas way back then did not work very well. &nbsp; 20 years too late. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1214681">
				<div id="div-comment-1214681" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214681">
			November 11, 2015 at 12:30 pm</a>		</div>

		<p>Makes me wonder what the rules for detecting sequential memory access were. If Windows was detecting only forward accesses, then maybe the Sys_PageIn() function could have walked through the pages backwards.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1214671">
				<div id="div-comment-1214671" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214671">
			November 11, 2015 at 5:25 pm</a>		</div>

		<p>@EMB: I think it could be earlier, as Virtual*() APIs are just available in NT based systems. The trick was needed by games written for Win3.X and Win9X families to improve performance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1214651">
				<div id="div-comment-1214651" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214651">
			November 11, 2015 at 9:57 pm</a>		</div>

		<p>Surely the combination of low-end memory capacity and high-end video would have been an unusual one (though I understand it still had to be supported)? 800x600x16 was a good video card back then; I wouldn&#39;t have thought that people who were on a tight enough budget to only get 4MB of RAM would be splurging on 1024&#215;768 graphics.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1214641">
				<div id="div-comment-1214641" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214641">
			November 11, 2015 at 10:39 pm</a>		</div>

		<p>Scarlet, you have a very poor memory of the time. 1024&#215;768 was common, 1280&#215;1024 not unusual and 24 bit was common too (at least on the desktop &#8211; games may have been deliberately configured to run at lower resolutions and depths.)</p>
<p>My second PC &#8211; a Pentium 133 with 8MB &#8211; was bought about the same time as Quake&#39;s release, and even my first &#8211; a 486 with 4MB &#8211; was capable of running resolutions and colour depths you think were exotic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1214631">
				<div id="div-comment-1214631" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214631">
			November 11, 2015 at 11:22 pm</a>		</div>

		<p>Wasn&#39;t this an example of using a global solution to resolve a local problem? Not Quake, I mean &#8211; that Sys_PageIn() was a local solution to a global problem.</p>
<p>The local problem of desktop refresh could have been solved by smart bitmap renderer that could have much smaller memory footprint than the whole bitmap. But instead, the solution was built into the system core, and caused troubles for Ancient_Hacker and many many others, who could not understand what was going on, and could not ask Raymond to find a hack around.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1214621">
				<div id="div-comment-1214621" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Boris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214621">
			November 12, 2015 at 12:19 am</a>		</div>

		<p>I think I need an (HTML) diagram of this, showing the in-memory locations of the desktop, the window before the desktop reappeared and the new window which covered it again, and exactly which area is covered by the 64KB. Although the desktop wasn&#39;t accessed recently (being covered by the original application), it also wasn&#39;t unloaded from memory so it didn&#39;t need to be loaded again in the interim before the second application was launched?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1214611">
				<div id="div-comment-1214611" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214611">
			November 12, 2015 at 2:34 am</a>		</div>

		<p>@Boris: The key here is that painting the desktop mostly corresponds to copying memory from the bitmap to video memory. You don&#39;t actually need all of the bitmap in memory at once to achieve this, so the sequential page scan detector said &quot;It looks like you&#39;re doing a memory copy, and you&#39;ll only be needing the memory you paged in once, so I&#39;ll just mark the RAM as ready to page out again&quot;. This means that as the memory copy pages in the bitmap, it recycles the same RAM that it used 64KB ago, rather than loading the whole bitmap into RAM at once.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1214601">
				<div id="div-comment-1214601" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214601">
			November 12, 2015 at 4:50 am</a>		</div>

		<p>Well that&#39;s a blast from the past!</p>
<p>I remember porting WinQuake to Windows CE 2.11 and commented that function out because it made it take a while to startup.</p>
<p>Also remember something about not being able to malloc more than about 11Mb of ram, so used either HeapAlloc or VirtualAlloc which did work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1214591">
				<div id="div-comment-1214591" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214591">
			November 12, 2015 at 5:05 am</a>		</div>

		<p>@AlexCohn &#8211; I think it&#39;s more that the wallpaper-displaying code is just one example of a very common class of problem, where &quot;some program&quot; would do a single sequential read of a very large chunk of memory, using it (or only part of it) once, and not need the memory again for a long time. But, if you&#39;re using a least-recently-used algorithm for you memory pages, you&#39;ve just evicted everything else that was very recently being used in a random-access manner &#8211; and will be again very shortly, which you now have to page back in. Therefore, this is a solution to that entire class of problems, system-wide, for all programs that do this.</p>
<p>In fact, I remember one of John Carmack&#39;s .plan updates many years ago discussing this very problem with regards to the amount of texture memory on the graphics cards of the time. When rendering a scene with a LRU cache, if the size of the textures needed for a scene was just slightly larger than the texture memory available, performance would suddenly suffer *really* badly. IIRC, the idea is that if you have 32Mb of memory, and 33 1Mb textures, the first 32 textures fill up your cache slots 0-31, and then texture 33 fills up the oldest used slot, slot 0. When painting the next frame, texture 0 has to be reloaded from main RAM and goes in the oldest used slot, slot 1, whereupon tx 1 immediately needs to be reloaded &#8211; into slot 2, etc&#8230; His solution was to switch to a MRU cache, which reuses slot 31 for tx 32 when painting the first frame. Then, when painting the second frame, txs 0-30 are already in the graphics card&#39;s texture memory, and only tx 31 and 32 need to be reloaded from main RAM, each into slot 31, which ends up acting as a &quot;scratch&quot; buffer.</p>
<p>Of course, doesn&#39;t work well over the entire lifetime of a program. He probably had some kind of counter or timer so that if a texture wasn&#39;t used for long enough then it could get evicted from the graphics card&#39;s memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1214581">
				<div id="div-comment-1214581" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214581">
			November 12, 2015 at 5:36 am</a>		</div>

		<p>@McBucket: I guess it probably had to detect backward accesses, since bitmaps where commonly stored in a bottom-up manner. I could be wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle odd alt thread-odd thread-alt depth-1" id="comment-1214421">
				<div id="div-comment-1214421" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214421">
			November 12, 2015 at 11:49 am</a>		</div>

		<p>@Matt: I don&#39;t know what kind of circles you were in, but most people I knew used mostly 640&#215;480 or 800&#215;600 back in the Windows 95 days. &nbsp;We were at the whims of our parents, of course, who couldn&#39;t afford fancy monitors or powerful graphics cards, and I know I saw references to the higher resolutions back then, though I didn&#39;t actually get access to them until later, when we got Windows 98 SE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1214411">
				<div id="div-comment-1214411" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214411">
			November 12, 2015 at 12:21 pm</a>		</div>

		<p>@MNGoldenEagle Circles that are older than you, obviously.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1214391">
				<div id="div-comment-1214391" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bzakharin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214391">
			November 12, 2015 at 12:39 pm</a>		</div>

		<p>Our first computer, bought in 1993, had 4 MB RAM and a 33 MHz 486 processor. It was capable of doing 1024&#215;768, though I don&#39;t recall the BPP. We did keep it at 800&#215;600 because the 14&quot; monitor made 1024&#215;768 hard to read. By the time Windows 95 came out, we did upgrade it to 83 MHz Pentium and 8 MB RAM, but not the video card, which was powerful enough for everything we did. I don&#39;t recall playing Quake on it, but Doom ran fine. In DOS at lower resolutions, obviously. That setup lasted as our primary computer for 3 more years after that, though at some point we doubled the memory again and bought an additional hard drive. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1214221">
				<div id="div-comment-1214221" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214221">
			November 13, 2015 at 6:13 am</a>		</div>

		<p>Okay, now I know I can purge all that weird paging and memory locking hacks from my own Quake sourceport :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1214211">
				<div id="div-comment-1214211" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214211">
			November 13, 2015 at 6:18 am</a>		</div>

		<p>@sense: Perhaps, but even if the backwards scan is detected as sequential memory access, it may not have mattered, considering what Raymond describes as the &#39;fix&#39;:</p>
<p>&quot;The trick that Windows 95 used was to watch your pattern of page faults, and if it saw that you were doing sequential memory access, it started marking the memory 16 pages behind the current access as not recently accessed.&quot;</p>
<p>Depending on what &quot;behind&quot; means, it may just be marking pages as not recently used that are actually &quot;ahead&quot; of the way you&#39;re accessing them anyways. </p>
<p>Even so, the upside down bitmap issue might not be detected as sequential either. Yes, the scan lines are stored upside down, but the pixels are not reversed in the scan line. Read a scan line that spans a page would have a forward access, but then reading the next scan line would result in a backwards access. I guess a lot goes into how sophisticated the sequential memory access detection was.</p>
<p>One other thing that&#39;s on my mind on this: why is accessing every byte necessary? Can&#39;t you ensure that an entire page is in memory by just accessing a single byte in the page? Unless, from the example above, the variable sys_checksum is meaningful for more than just making sure that accesses are actually used, and so don&#39;t get optimized out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1214181">
				<div id="div-comment-1214181" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214181">
			November 13, 2015 at 6:58 am</a>		</div>

		<p>@McBucket: sys_checksum is never used, but it&#39;s volatile so it won&#39;t get optimized out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1214031">
				<div id="div-comment-1214031" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1214031">
			November 13, 2015 at 11:06 am</a>		</div>

		<p>@Azarien: Oh, duh &#8212; it&#39;s in the original code, which I glanced at a couple of days ago, but ignored thereafter. Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213621">
				<div id="div-comment-1213621" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972#comment-1213621">
			November 17, 2015 at 1:36 pm</a>		</div>

		<p>I&#39;m missing the point of the n loop. And what if ptr is a 4k+2 byte ptr (eg 16*0x1000+2)?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>