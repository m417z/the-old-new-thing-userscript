<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-965943">
				<div id="div-comment-965943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ipoverscsi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-965943">
			February 9, 2012 at 7:38 am</a>		</div>

		<p>For those too lazy to click the link, PreserveLastError is a C++ class that captures the error code on construction and restores it on destruction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965953">
				<div id="div-comment-965953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">si</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-965953">
			February 9, 2012 at 7:42 am</a>		</div>

		<p>yes, because if we break the error code in IsAnExceptionICanRepair or IsAnExceptionICanHandle, return EXCEPTION_CONTINUE_SEARCH and some other handler can handle it they restore a bad error code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-965963">
				<div id="div-comment-965963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erwin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-965963">
			February 9, 2012 at 7:47 am</a>		</div>

		<p>&quot;Exercise: Why isn&#39;t it important to restore the last error code if you return EXCEPTION_EXECUTE_HANDLER?&quot;</p>
<p>The code path changes (the _except path is taken immediately), so the last error code does not change &quot;magically&quot;</p>
<p>&quot;Exercise: Is it important to restore the last error code if you return EXCEPTION_CONTINUE_SEARCH? &quot;</p>
<p>Yes, if another exception handler repairs the exception and returns an EXCEPTION_CONTINUE_EXECUTION, that exception handler sees your last exception.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-965993">
				<div id="div-comment-965993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-965993">
			February 9, 2012 at 9:38 am</a>		</div>

		<p>Am I being simple if I say that you should just save the last error immediately upon encountering an error if you need it?</p>
<div class="post">[<i>This assumes you get a chance! Consider: <code>m_hEvent = CreateEvent(...); if (!m_hThing) { GetLastError(); }</code>. You might take an exception trying to write to <code>m_hEvent</code>, or even just trying to fetch the next instruction from memory. Both of these happen before you get a chance to call <code>GetLastError</code>. Remember, these are asynchronous exceptions, not C++ exceptions. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966003">
				<div id="div-comment-966003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966003">
			February 9, 2012 at 9:50 am</a>		</div>

		<p>PreserveLastError preserveLastError;</p>
<p>Ugh. &nbsp;Anyone who abuses case sensitivity like this ought to have their coding license revoked and their compiler impounded.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes odd alt thread-odd thread-alt depth-1" id="comment-966013">
				<div id="div-comment-966013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966013">
			February 9, 2012 at 9:56 am</a>		</div>

		<p>@Mason Wheeler &#8211; This is exactly how I would capitalize this code. How would you do it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966023">
				<div id="div-comment-966023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966023">
			February 9, 2012 at 10:01 am</a>		</div>

		<p>@Joshua: By not using the same name with different capitalization for the class and the instance. &nbsp;That&#39;s just confusing and makes the code harder to read. &nbsp;That&#39;s one of the reasons why I prefer case insensitive languages. &nbsp;No case sensitivity = no case sensitivity abuse.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966033">
				<div id="div-comment-966033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Avi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966033">
			February 9, 2012 at 10:07 am</a>		</div>

		<p>@Mason Wheeler:</p>
<p>It&#39;s not an abuse. &nbsp;It&#39;s a common idiom in case sensitive languages that types have an initial capital letter and variables do not. &nbsp;Thus, if one understands the culture of the language in use, there is no confusion. &nbsp;And by using the same name, the type becomes very easy to infer.</p>
<p>I&#39;ve seen this recommended in both Java and Objective-C (languages I use daily).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes even thread-even depth-1" id="comment-966043">
				<div id="div-comment-966043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966043">
			February 9, 2012 at 10:09 am</a>		</div>

		<p>This isn&#39;t really a matter of case sensitivity. Keep in mind that the following code would function exactly the same way:</p>
<p>PreserveLastError PreserveLastError;</p>
<p>I feel that the real issue is whether or not to use a class designed in this way. I feel that it&#39;s not intuitive to declare a variable (apparently unused) in order to preserve the error code. It is, however, quite practical.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966053">
				<div id="div-comment-966053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966053">
			February 9, 2012 at 10:34 am</a>		</div>

		<p>@Mason Wheeler: I&#39;d agree with you if you were editing your code in 1990. But this is 2012, every code editor has color-coding, and there&#39;s no confusion involved because type names have a different color from variable names.</p>
<p>If you&#39;re not using color-coding, then I&#39;d say the problem exists between keyboard and chair.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966063">
				<div id="div-comment-966063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966063">
			February 9, 2012 at 10:47 am</a>		</div>

		<p>@James Schend: Some of us have various eye problems that result in having to live without color coding.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966073">
				<div id="div-comment-966073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966073">
			February 9, 2012 at 11:21 am</a>		</div>

		<p>@Joshua</p>
<p>Well, to be fair, your eye problem does indeed reside &quot;between keyboard and chair&quot;. ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966083">
				<div id="div-comment-966083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966083">
			February 9, 2012 at 11:42 am</a>		</div>

		<p>@James I don&#39;t even see the problem in 1990. Classes start with an uppercase letter, variables with a lowercase one. If you&#39;re not using stupid fonts where l and I are indistinguishable and other fun things, it&#39;s perfectly clear what what is in every possible situation at one glance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966093">
				<div id="div-comment-966093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966093">
			February 9, 2012 at 12:10 pm</a>		</div>

		<p>I don&#39;t like using variables like this preserveLastError whose only purpose is to effect a change on construction and destruction &#8212; some ignorant programmer could just come along and say &quot;oh hey, it looks like this variable isn&#39;t being used for anything, I&#39;ll just delete it&quot;, and suddenly your program breaks in impossible ways two months later.</p>
<p>Yes, the class and variable are well-named in this case, and you should avoid trying to work with obtuse programmers as much as possible, but it&#39;s still a possibility to worry about. &nbsp;I&#39;m particularly fond of the &quot;explicit is better than implicit&quot; rule from the Zen of Python.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966103">
				<div id="div-comment-966103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966103">
			February 9, 2012 at 12:24 pm</a>		</div>

		<p>@Adam Rosenfield: The problem is, C++ doesn&#39;t let you do this explicitly. You could add an explicit GetLastError() to the beginning and a RestoreLastError() before every return, but then you aren&#39;t exception-safe: any exception will prevent the code from restoring the error code.</p>
<p>The exception-safe explicit way would be a try-finally construct, but C++ doesn&#39;t support that. All you can do is writing a class for every possible cleanup scenario, and declare an instance of that class any time you need that specific cleanup code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966123">
				<div id="div-comment-966123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peeter Joot</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966123">
			February 9, 2012 at 1:35 pm</a>		</div>

		<p>Won&#39;t your printf() call potentially change the value of GetLastError() too? &nbsp;That&#39;s not a signal safe function on Unix (where it can do bad things like acquire C runtime library mutexes that could already be held), so I&#39;m suprised to see it used in a Windows exception handler.</p>
<div class="post">[<i>Good catch. Bad example. I&#39;ll change it to a comment. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966133">
				<div id="div-comment-966133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966133">
			February 9, 2012 at 1:54 pm</a>		</div>

		<p>@Evan: Well, I wouldn&#39;t call what ~PreserveLastError() does in this example &quot;resource cleanup&quot;. I guess that&#39;s why this solution bothers me &#8212; if the destructor would truly just clean up resources acquired in the constructor, no one would be surprised. I believe that the Java equivalent:</p>
<p>int lastError = GetLastError();</p>
<p>try {</p>
<p>&nbsp;// do stuff</p>
<p>} finally {</p>
<p>&nbsp;RestoreLastError(lastError);</p>
<p>}</p>
<p>is both more explicit and more readable than the C++ code:</p>
<p>{</p>
<p>&nbsp; PreserveLastError preserveLastError;</p>
<p>&nbsp; // do stuff</p>
<p>} // Note: the last error is magically restored here</p>
<p>Maybe the Java version is prone to copy-pasting (as you didn&#39;t abstract your setup and restoration into separate methods), but at least you can clearly see that something <em>is</em> happening at the end of the block.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966143">
				<div id="div-comment-966143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966143">
			February 9, 2012 at 1:59 pm</a>		</div>

		<p>Man, a lot of very strong opinions on such a trivial detail of the post!</p>
<p>I still find it hard to keep in mind that not every SEH exception is an error. Though I expect that people writing SEH vectored exception handlers would be better about keeping an eye on this sort of thing?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966153">
				<div id="div-comment-966153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bekenn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966153">
			February 9, 2012 at 2:51 pm</a>		</div>

		<p>PreserveLastError is a proper use of the RAII idiom, though I agree that an explanatory comment would be worthwhile. &nbsp;I really like D&#39;s scope(exit) construct; thankfully, with C++11, you can recreate its semantics. &nbsp;The following code works in VC10 and VC11:</p>
<p>// In some header file:</p>
<p>template &lt;class Callback&gt;</p>
<p>class do_at_scope_exit</p>
<p>{</p>
<p>public:</p>
<pre><code>do_at_scope_exit(Callback cb) : callback(cb) { }

~do_at_scope_exit() { callback(); }
</code></pre>
<p>private:</p>
<pre><code>Callback callback;
</code></pre>
<p>};</p>
<p>#define PASTE(a, b) PASTE2(a, b)</p>
<p>#define PASTE2(a, b) a ## b</p>
<p>template &lt;class Callback&gt;</p>
<p>do_at_scope_exit&lt;Callback&gt; at_scope_exit_do(Callback cb) { return do_at_scope_exit&lt;Callback&gt;(cb); }</p>
<p>#define at_scope_exit(cb) auto PASTE(at_scope_exit, <strong>COUNTER</strong>) = at_scope_exit_do(cb)</p>
<p>// &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>
<p>// Use case:</p>
<p>LONG ExceptionFilter(LPEXCEPTION_POINTERS ExceptionPointers)</p>
<p>{</p>
<pre><code>DWORD lastError = ::GetLastError();

at_scope_exit([=]() { ::SetLastError(lastError); });
</code></pre>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-966173">
				<div id="div-comment-966173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966173">
			February 9, 2012 at 6:34 pm</a>		</div>

		<p>&gt; I don&#39;t like using variables like this preserveLastError whose only purpose is to effect a change on construction and destruction &#8212; some ignorant programmer could just come along and say &quot;oh hey, it looks like this variable isn&#39;t being used for anything, I&#39;ll just delete it&quot;, and suddenly your program breaks in impossible ways two months later.</p>
<p>I&#39;ll confess that my initial thought once saw it is that I can&#39;t see any read or write action to it, so it should be removed.</p>
<p>It would be better if some comments can be put beside the code, I think.</p>
<div class="post">[<i>Um, the comments are in the accompanying prose. You forget that code is formatted differently for the Web site. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966183">
				<div id="div-comment-966183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966183">
			February 9, 2012 at 7:30 pm</a>		</div>

		<p>@cheong00: Standard idiom in C++. But yeah comment is nice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966113">
				<div id="div-comment-966113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966113">
			February 9, 2012 at 1:30 pm</a>		</div>

		<p>@Adam, Csaboka:</p>
<p>Further, even *if* C++ had try-finally, using that for resource cleanup is, at least I think, super obnoxious. Deterministic destructors are way better. The only solutions that I consider comparable are something like Python&#39;s &#39;with&#39; or C#&#39;s &#39;using&#39; and D&#39;s &#39;scope(exit)&#39;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966223">
				<div id="div-comment-966223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966223">
			February 10, 2012 at 2:07 am</a>		</div>

		<p>@Joshua et aliae:</p>
<p>Standard idiom in used language, self-explanatory names, and you still want to add a comment?</p>
<p>Why don&#39;t you explain every token, be it comment or source code, as well?</p>
<p>Thus you&#39;d be in serious danger of drowning in a sea of irrelevance, not able to find the one and only important insight hidden in all the clutter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966233">
				<div id="div-comment-966233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966233">
			February 10, 2012 at 2:24 am</a>		</div>

		<p>Of course you have to take care not to write PreserveLastError(); by mistake. Or maybe</p>
<p>#define PreserveLastError() PreserveLastError preserveLastError</p>
<p>(This does not work for typical RAII classes that need parameters, of course.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966243">
				<div id="div-comment-966243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skyborne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966243">
			February 10, 2012 at 6:15 am</a>		</div>

		<p>Clearly ;-) the best way is:</p>
<p>WithErrorSaved last_err_trash;</p>
<p>&quot;trash&quot; would signal I know I&#39;m not using it, and &quot;With&quot; would indicate RAII. &nbsp;Like <code>with open(fname) as f: ...</code> in Python.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966253">
				<div id="div-comment-966253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966253">
			February 10, 2012 at 7:17 am</a>		</div>

		<p>@Deduplicator &#8211; For most developers, their code code does not cease to be used once it is complied. As someone who spends a lot of time reading other people&#39;s code, often written in languages in which I do not regularly write myself, you&#39;d be hard pressed to over-comment code. Making assumptions about the depth of familiarity of your reader with the the language is a mistake.</p>
<p>Comments are a beautiful thing to accelerate others understanding of the INTENT fo your code. Since developers are not perfect, their code sometimes deviates fronm their intent. Comments help ME to find YOUR mistakes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-966453">
				<div id="div-comment-966453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966453">
			February 11, 2012 at 6:56 am</a>		</div>

		<p>@Steve: You have to assume that a craftsman can use his tools, else he shouldn&#39;t be &quot;crafting&quot;. This is about who to optimize the readability for. A developer or a non-developer?</p>
<p>You should only comment the non-obvious. RIAA is obvious in C++.</p>
<p>Also, as Agile suggest, there is no developer who write poor code and good comments. It&#39;s either poor code+lying comments OR self explaining code+redundant comments.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-966703">
				<div id="div-comment-966703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@640K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120209-00/?p=8343#comment-966703">
			February 14, 2012 at 6:53 am</a>		</div>

		<p>What a wonderful world you live in, can you post info on how to get to this utopia?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>