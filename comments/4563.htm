<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1052293">
				<div id="div-comment-1052293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ajgelado_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>ajgelado@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052293">
			April 24, 2013 at 7:04 am</a>		</div>

		<p>You made me double check the calendar &#8211; it isn&#39;t April 1st! O:-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052303">
				<div id="div-comment-1052303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052303">
			April 24, 2013 at 7:47 am</a>		</div>

		<p>Does pre-C89 C, which is to say pre-standardization C, really exist as a living programming language?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1052313">
				<div id="div-comment-1052313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052313">
			April 24, 2013 at 7:54 am</a>		</div>

		<p>@dave:</p>
<p>Current compilers still support many pre-standard behaviors (which you may wish go away). Such as old style function declarations, l-value cast, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052323">
				<div id="div-comment-1052323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052323">
			April 24, 2013 at 8:01 am</a>		</div>

		<p>I think I&#39;m at that point in learning C++ where everything I find out about what it can do (other than the new standards of course) is something horrible.</p>
<p>Nitpicker&#39;s corner: Yes &quot;You mean you started learning it today?&quot; is a valid answer, thank you Mr. Hilarious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052333">
				<div id="div-comment-1052333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">creaothceann</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052333">
			April 24, 2013 at 8:04 am</a>		</div>

		<p>@dave:</p>
<p>#define &quot;living programming language&quot;;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052343">
				<div id="div-comment-1052343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052343">
			April 24, 2013 at 8:10 am</a>		</div>

		<p>@dave, alegrl: The Pre-ANSI C feature that is old-style function declarations is actually needed in a few obscure cases. E.g. what is the correct prototype of the open() system call? The third argument may be omitted altogether if the flags to the call (second argument) are such that no file can be created.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052353">
				<div id="div-comment-1052353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Estix</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052353">
			April 24, 2013 at 8:18 am</a>		</div>

		<p>@Simon: &nbsp;Wait until you see a code file with #include &lt;setjmp.h&gt; at the top :D</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052373">
				<div id="div-comment-1052373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052373">
			April 24, 2013 at 8:52 am</a>		</div>

		<p>@Kaso:</p>
<p>Indeed, the POSIX standard specifies the signature of open as &quot;int open(const char *path, int oflag, &#8230; );&quot;. No need for K&amp;R C.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052383">
				<div id="div-comment-1052383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Dunn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052383">
			April 24, 2013 at 9:06 am</a>		</div>

		<p>wat</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052403">
				<div id="div-comment-1052403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052403">
			April 24, 2013 at 10:07 am</a>		</div>

		<p>Compile-time safety is for wimps &#8211; real men do it with inline asm.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052413">
				<div id="div-comment-1052413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052413">
			April 24, 2013 at 10:30 am</a>		</div>

		<p>I would hope old-style function definitions don&#39;t go away. I work on a code base that still has #ifdefs for VMS and DOS (it was originally written for a VAX), so it is all in K&amp;R C.</p>
<p>If somebody decided the compiler should stop supporting K&amp;R, we&#39;d have to revise a million lines of code for no reason. Or, more likely, simply never upgrade to a newer compiler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052423">
				<div id="div-comment-1052423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052423">
			April 24, 2013 at 11:41 am</a>		</div>

		<p>@Gabe:</p>
<p>Ever see this</p>
<p>#ifdef _stdc</p>
<p>#define _P(args) (args)</p>
<p>#else</p>
<p>#define _P(args)</p>
<p>#endif</p>
<p>int fopen(_P(path, mode))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052433">
				<div id="div-comment-1052433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052433">
			April 24, 2013 at 12:17 pm</a>		</div>

		<p>@Joshua: Right idea, but you can&#39;t have extra parentheses in function declarations, and you have to pass the correct number of arguments to the macro. &nbsp;I&#39;ve seen code that looks like this in order to support both function prototypes and old-style definitions:</p>
<p>#ifdef <strong>STDC</strong></p>
<p>#define P(args) args</p>
<p>#else</p>
<p>#define P(args) ()</p>
<p>#endif</p>
<p>int open P((path, mode))</p>
<p>The extra parentheses in the macro invocation cause the whole parenthesized expression to get passed as a single argument to the macro.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052443">
				<div id="div-comment-1052443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052443">
			April 24, 2013 at 12:18 pm</a>		</div>

		<p>My first introduction to C was in high school from a programmer friend of mine. He explained macros as a way to define your own language within the language. At the time I thought that was the coolest thing I&#39;d ever heard of. Now I see it as nearly pure evil.</p>
<p>The heartbreaking thing about growing older is that you learn your lessons after you&#39;ve done most of the damage you&#39;ll be remembered for. Like, creating your own language out of macros.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052453">
				<div id="div-comment-1052453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052453">
			April 24, 2013 at 12:35 pm</a>		</div>

		<p>In fact, in &quot;typedef const volatile unsigned long int x&quot;, the first six words can appear in any order and it&#39;s still valid C, with the same meaning. Yes, &quot;long typedef int const unsigned volatile x&quot; is perfectly cromulent C, why wouldn&#39;t it be?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052473">
				<div id="div-comment-1052473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052473">
			April 24, 2013 at 1:31 pm</a>		</div>

		<p>Another one that&#39;s not well-known: 2[&quot;meow&quot;] == &#39;o&#39;. &nbsp;x[y] is defined as *(x + y), and the + operator for a pointer and scalar addition allows the scalar to be on either side.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052483">
				<div id="div-comment-1052483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052483">
			April 24, 2013 at 1:56 pm</a>		</div>

		<p>@Adam Rosenfield: Have you seen HTUtils.h from CERN httpd source code? It has contains crazy workarounds like the one you posted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052493">
				<div id="div-comment-1052493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">j b</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052493">
			April 24, 2013 at 2:12 pm</a>		</div>

		<p>JM,</p>
<p>Hmmm&#8230; You are saying that &quot;volatile typedef &#8230; &quot; is perfectly valid. I&#39;d say it is perfectly confusing :-)</p>
<p>But C is not the only one with &quot;funny&quot; grammatical properties. Good old Fortran doesn&#39;t have any reserved words at all. A real value may be named INTEGER, a subroutine may be called FUNCTION and so on. So</p>
<p>&nbsp;CALL FUNCTION(INTEGER, REAL)</p>
<p>may be a perfectly valid statemement. Spaces are also insignificant, so if your subroutine is named FUNCTIONX. and you have a real variable INTEGER5 and a complex variable REALCOST,</p>
<p>&nbsp;CALL FUNCTION X(INTEGER 5, REAL COST)</p>
<p>is a perfectly valid call to this function.</p>
<p>And finally, variables need not be declared: God is real, unless declared integer in an explicit og IMPLICT statement.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052503">
				<div id="div-comment-1052503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052503">
			April 24, 2013 at 2:13 pm</a>		</div>

		<p>Myria, that may compile fine, but don&#39;t be surprised if it crashes because the compiler decided to put &quot;meow&quot; in a memory page that is read only (or in non-volatile memory in an embedded system)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1052513">
				<div id="div-comment-1052513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052513">
			April 24, 2013 at 2:24 pm</a>		</div>

		<p>@SimonRev:</p>
<p>No, it won&#39;t. ==</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052363">
				<div id="div-comment-1052363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kaso</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052363">
			April 24, 2013 at 8:33 am</a>		</div>

		<p>@Joshua : At least on the code I have in front of me open() is implemented using va_arg, eg:</p>
<p>int __open(const char*, int, int);</p>
<p>int open(const char* pathname, int flags, &#8230;) {</p>
<p> &nbsp; &nbsp;mode_t mode = 0;</p>
<p> &nbsp; &nbsp;//&#8230;snip&#8230;</p>
<p> &nbsp; &nbsp;mode = va_arg(args,int);</p>
<p> &nbsp; &nbsp;//&#8230;snip&#8230;</p>
<p> &nbsp; &nbsp;return __open(pathname, flag, mode);</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052533">
				<div id="div-comment-1052533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WPARAM Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052533">
			April 24, 2013 at 4:21 pm</a>		</div>

		<p>Windows widened its shorts going from 16 to 32 bit.</p>
<div class="post">[<em>Short is still 16 bits even in Win32. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052553">
				<div id="div-comment-1052553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052553">
			April 24, 2013 at 9:05 pm</a>		</div>

		<p>The array stuff is always fun.</p>
<p>A couple of times I have swapped the scalar and variable around (2[x] instead of x[2]), and then sit back and waited until someone came to me in a panic about the array being incorrect.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052523">
				<div id="div-comment-1052523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052523">
			April 24, 2013 at 3:00 pm</a>		</div>

		<p>Well as long as we&#39;re on the subject of operations that look dangerous but aren&#39;t: the Standard mandates that &amp;(*p) is just the same as p without the pointer being dereferenced, meaning that stuff like</p>
<p>int x[10];</p>
<p>int *p = &amp;x[10];</p>
<p>is legal and well-defined since x[10] is the same thing as *(x + 10), so &amp;x[10] is the same thing as x + 10, and forming a pointer to one past the end is OK (but, for heaven&#39;s sake, no further than that!). Of course, x[10] by itself is not OK since dereferencing such a pointer is undefined behavior.</p>
<p>It&#39;s been ages since I&#39;ve moonlighted as a C language lawyer, but I remember how much fun it was. In spite of (or likely because of) its wonky semantics, C has an excellent standard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1052543">
				<div id="div-comment-1052543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052543">
			April 24, 2013 at 6:41 pm</a>		</div>

		<p>Thanks for the good laugh. :)</p>
<p>Btw, I think the &quot;typedef int short;&quot; line is a *cough* good *cough* way for tricking future people who don&#39;t know this and following your code to introduce bugs into the system. And then we&#39;ll have one more entry to TDWTF.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1052563">
				<div id="div-comment-1052563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052563">
			April 25, 2013 at 4:36 am</a>		</div>

		<p>@Estix: Wait, you mean in C++? Oh. My. Nonexistent. God.</p>
<p>&quot;A setjmp/longjmp call pair has undefined behavior if replacing the setjmp and longjmp by catch</p>
<p>and throw would invoke any non-trivial destructors for any automatic objects&quot;</p>
<p>(C++11 n3290, book 18, chapter, 10, verse 4)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052593">
				<div id="div-comment-1052593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052593">
			April 25, 2013 at 8:06 am</a>		</div>

		<p>@Medinoc: What&#39;s funny about that is the &quot;undefined behavior&quot; is essentially the same as calling free on a new&#39;d object in an implementation where new calls malloc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052753">
				<div id="div-comment-1052753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jake</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052753">
			April 25, 2013 at 12:15 pm</a>		</div>

		<p>@Joshua &#8211; I dont think &quot;undefined behavior&quot; means what you think it means. Maybe in one compiler it does that, but it could do just about anything. I suggest everyone who programs in C/C++ read <a rel="nofollow" target="_new" href="http://blog.regehr.org/archives/213" rel="nofollow">blog.regehr.org/&#8230;/213</a> and <a rel="nofollow" target="_new" href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html" rel="nofollow">blog.llvm.org/&#8230;/what-every-c-programmer-should-know.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052833">
				<div id="div-comment-1052833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130424-00/?p=4563#comment-1052833">
			April 26, 2013 at 1:13 am</a>		</div>

		<p>A little more than a year ago someone pointed me to this programming puzzle problem: <a rel="nofollow" target="_new" href="http://www.spoj.com/problems/HAJIME/" rel="nofollow">http://www.spoj.com/&#8230;/HAJIME</a></p>
<p>It drove me crazy figuring out the solution that doesn&#39;t rely on /**/ to replace spaces. &nbsp;The fact that I&#39;m posting about the puzzle here is obviously a clue to the non-comment solution.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>