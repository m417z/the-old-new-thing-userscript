<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20181226-00/?p=100565#respond" style="display:none;">Cancel reply</a></small></h3><p class="must-log-in">You must be <a href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20181226-00%2F%3Fp%3D100565">logged in</a> to post a comment.</p>	</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-joker150491 even thread-even depth-1" id="comment-1374635">
				<div id="div-comment-1374635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joker_vD' rel='external nofollow' class='url'>Joker_vD</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181226-00/?p=100565#comment-1374635">
			December 26, 2018 at 1:21 pm</a>		</div>

		<p>Yep, it&#8217;s a pretty nice thing, and really helps to write your own relational operators, if you okay with them being lexicographical: throw in a std::tie around the fields, and compare the resulting tuples.</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20181226-00%2F%3Fp%3D100565">Log in to Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-odd thread-alt depth-1 parent" id="comment-1374685">
				<div id="div-comment-1374685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181226-00/?p=100565#comment-1374685">
			December 27, 2018 at 5:56 am</a>		</div>

		<p>I think this is the only redeeming quality of <code>std::pair</code> and <code>std::tuple</code>; whenever you need to store &#8220;just&#8221; a pair of values, you&#8217;ll soon discover that on every other aspect you&#8217;ll be better served by a (possibly local) structure with aptly named fields. The code that uses it will be way clearer (using semantically correct names over the verbose and semantically empty &#8220;first&#8221; and &#8220;second&#8221; &#8211; every time I iterate over a <code>std::map</code> I wish the members were called <code>key</code> and <code>value</code>), and in the entirely possible situation where you&#8217;ll need to add an extra member or change the type of one of the two it&#8217;ll be as easy as updating the structure definition &#8211; as opposed to going around fixing all those <code>std::pair&lt;blah, blah&gt;</code>.</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20181226-00%2F%3Fp%3D100565">Log in to Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wswiktor even depth-2 parent" id="comment-1374705">
				<div id="div-comment-1374705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Azarien' rel='external nofollow' class='url'>Azarien</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181226-00/?p=100565#comment-1374705">
			December 28, 2018 at 9:57 am</a>		</div>

		<p>That&#8217;s why it is usually better to have appropriate `typedef` or `using`, instead of all those std::map&lt;std::pair&gt; all over the code.</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20181226-00%2F%3Fp%3D100565">Log in to Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-matteo odd alt depth-3" id="comment-1374715">
				<div id="div-comment-1374715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181226-00/?p=100565#comment-1374715">
			December 28, 2018 at 1:18 pm</a>		</div>

		<p>That only fixes half of the problem, ugly names remain :-(</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20181226-00%2F%3Fp%3D100565">Log in to Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>