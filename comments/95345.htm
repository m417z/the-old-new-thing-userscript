<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1282465">
				<div id="div-comment-1282465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170203-00/?p=95345#comment-1282465">
			February 3, 2017 at 8:24 am</a>		</div>

		<p>Well. you managed to pick a case where it doesn&#8217;t matter, but in general closing sockets from DLL_PROCESS_DETACH is a lot better than letting them fall off the process because this generates a graceful shutdown the other side can decide was graceful. In particular, this causes the reader on the other side to get EOF rather than an error condition on read and so know it reached the end and handle likewise.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1282535">
				<div id="div-comment-1282535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170203-00/?p=95345#comment-1282535">
			February 3, 2017 at 11:16 am</a>		</div>

		<p>Network considerations require the other side to handle an error condition gracefully.  The network can go down at any time.  Ergo, it should be reasonably safe (if perhaps a bit impolite) to let the OS close the connection.</p>
<p>You should probably also have an explicit in-band indication that the connection is about to close (e.g. the Connection header in HTTP).  That way, you don&#8217;t need to depend on the TCP FIN handshake.  But, fundamentally, if the other side is no longer talking to you, there&#8217;s little you can do about it, other than trying to reconnect or going away and finding someone else to talk to.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1282545">
				<div id="div-comment-1282545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170203-00/?p=95345#comment-1282545">
			February 3, 2017 at 1:45 pm</a>		</div>

		<p>Handle error condition gracefully != never have a success condition.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1282525">
				<div id="div-comment-1282525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alois Kraus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170203-00/?p=95345#comment-1282525">
			February 3, 2017 at 10:59 am</a>		</div>

		<p>I guess the customer is not always keeping correctly track of its shared_ptr which on exit may or may not trigger the dtor of the SharedMemoryCache. Another cause might be that the Extension::s_extension is not always loaded but only under specific circumstances which might also be the cause for sporadic crashes in specific process environments.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1282627">
				<div id="div-comment-1282627" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Haim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170203-00/?p=95345#comment-1282627">
			February 5, 2017 at 12:00 am</a>		</div>

		<p>Speaking about winhttp and thread pool, why winhttp&#8217;s thread pool opens so many threads for asynchronous requests? I remember when I tried to make about 10,000 asynchronous connection, the thread pool hit the worker count limit (512), and the application pretty much froze down. No matter how much i&#8217;ve tried to optimize the code, it appeared that winhttp didn&#8217;t really think it over before asking new thread from the threadpool. </p>
<p>Libcurl in this case was magnitude better, and using the &#8220;multi&#8221; interface with just on thread I was able to receive the entire responses without having any of them freeze or die in the middle.</p>
<p>I would definitely want a winhttp internals guide.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher odd alt thread-odd thread-alt depth-1" id="comment-1283295">
				<div id="div-comment-1283295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170203-00/?p=95345#comment-1283295">
			February 7, 2017 at 10:00 am</a>		</div>

		<p>There&#8217;s some program &#8212; contososerver.  It has loaded an Extension named contoso, which has some tuple based cache.  Some of the tuples reference the same SharedMemoryCache object, and when the last reference goes stale, it is releasing the SharedMemoryCache.  That uses a ThreadPool that is also a static / global object.  The ThreadPool has already been reclaimed by the C runtime.</p>
<p>Since you can&#8217;t really determine the order here, barring whatever interface contososerver is using to talk to contoso having some explicit destroy call, your best bet may be to actually handle this exception.  Ideally, if you control both (the names imply that), you&#8217;d want to have your extension interface perform the cleanup after WM_CLOSE but before WM_DESTROY (so likely the WM_CLOSE handler after you&#8217;ve made the determination you&#8217;re not going to veto), so that you have a working message pump if your extension or a dependency needs it.</p>
<p>At any rate, waiting until detach would generally be the wrong thing.  In this specific case, if you didn&#8217;t control the interface (but it looks like they did), it would probably be OK to catch the exception, ignore it and continue.  Probably.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>