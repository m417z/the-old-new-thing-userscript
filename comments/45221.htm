<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1238836">
				<div id="div-comment-1238836" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238836">
			July 3, 2015 at 8:51 am</a>		</div>

		<p>Speaking of const BYTE*, it&#39;s funny that the core headers do not declare LPCBYTE, but that you have to include winscard.h to get it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1221891">
				<div id="div-comment-1221891" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1221891">
			July 3, 2015 at 9:50 am</a>		</div>

		<p>The cost of not changing the prototype is that anyone who has genuinely read-only data that they wish to add to the backup is forced to allocate a buffer and make a writeable copy to feed to the function. Merely using a cast isn&#39;t sufficient because the API doesn&#39;t promise not to write to the buffer and we&#39;re good programmers who don&#39;t exploit undocumented behaviour (however plausible that behaviour might be).</p>
<p>In contrast, the cost of changing the prototype (at least in the example here) *is* simply a cast.</p>
<p>My guess is that the number of people who would benefit from a change in prototype far exceeds the number who would be inconvenienced and that the benefit greatly exceeds the inconvenience.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1238826">
				<div id="div-comment-1238826" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238826">
			July 3, 2015 at 10:50 am</a>		</div>

		<p>The answer to Ken Hagan&#39;s complaint is simple. Document the buffer is never written to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1238816">
				<div id="div-comment-1238816" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238816">
			July 3, 2015 at 11:58 am</a>		</div>

		<p>Well the SAL annotation on the parameter says it&#39;s an &#39;in&#39;, so I guess it has that going for it in addition to the documentation. Kind of like the annotation on the command line parameter for CreateProcess says in/out, which is not immediately obvious and could perhaps lead one to assume things incorrectly if it were not there. I&#39;m guessing Microsoft would fix any incorrect SAL annotations that they would find or be made aware of.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1221881">
				<div id="div-comment-1221881" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VinDuv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1221881">
			July 3, 2015 at 12:02 pm</a>		</div>

		<p>I’m wondering why the TestableBackupWrite = BackupWrite; assignment is not allowed (after the proposed change to BackupWrite).</p>
<p>The modified BackupWrite is allowed to modify fewer of its arguments than TestableBackupWrite; calls to TestableBackupWrite can be replaced with calls to BackupWrite without introducing compilation issues (since a X* can be silently converted to a const X*). So shouldn’t the compiler allow the assignment? Is it just an arbitrary limitation of the C type checking system, or am I missing something?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1238806">
				<div id="div-comment-1238806" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238806">
			July 3, 2015 at 2:07 pm</a>		</div>

		<p>@VinDuv: Even if that limitation did not exist, people could write stuff like:</p>
<p>auto TestableBackupWrite = BackupWrite;</p>
<p>if (testing) TestableBackupWrite = TestModeBackupWrite;</p>
<p>and that would try to assign the non-const parameter version to a const parameter type.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1238796">
				<div id="div-comment-1238796" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238796">
			July 3, 2015 at 4:57 pm</a>		</div>

		<p>It&#39;s been a while since I&#39;ve done any C, but I think the example code is missing the `typedef` keyword when declaring the function pointer type. &nbsp;Not that it matters much, as I can&#39;t see many people trying to use this sample.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1238776">
				<div id="div-comment-1238776" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238776">
			July 4, 2015 at 12:58 pm</a>		</div>

		<p>@VinDuv: Known bug in C language specification.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1238766">
				<div id="div-comment-1238766" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238766">
			July 6, 2015 at 6:58 am</a>		</div>

		<p>&quot;&#8230;but for now, the cost/benefit tradeoff biases toward leaving things alone&quot;</p>
<p>The chief problem with that line of thinking, and I see it all the time, is that the cost/benefit analysis always ignores the fact that the longer you wait to change something, the harder it becomes.</p>
<p>Better to just be honest and say &quot;&#8230;but the cost/benefit tradeoff will never allow this to be changed.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1221871">
				<div id="div-comment-1221871" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Riccio</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1221871">
			July 6, 2015 at 7:39 am</a>		</div>

		<p>@meh CreateProcess arguments *do* actually need to be writable, as Raymond&#39;s written about before. And no, Microsoft is (with lots of respect!) pretty bad about fixing broken SAL in headers.</p>
<p>Speaking of SAL, there&#39;s a specific annotation for this sort of backwards-compatibility problem: `_Const_`</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1238736">
				<div id="div-comment-1238736" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Timothy Byrd (ETAP)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238736">
			July 6, 2015 at 10:40 am</a>		</div>

		<p>I&#39;ve been in C++ land too long.</p>
<p>Why not add an override that takes a const pointer?</p>
<p>(And have one method call the other.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1221861">
				<div id="div-comment-1221861" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Timothy Byrd (ETAP)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1221861">
			July 6, 2015 at 10:42 am</a>		</div>

		<p>I&#39;ve been in C++ land too long.</p>
<p>Why not add an *overload* that takes a const pointer?</p>
<p>(And have one method call the other.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1238646">
				<div id="div-comment-1238646" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238646">
			July 7, 2015 at 12:39 am</a>		</div>

		<p>Because no matter how hard Microsoft tries to ditch it, C isn&#39;t gone. The function is extern &quot;C&quot; as library functions must be, so it would have to be inline&#8230; which could still cause problems with function pointers.</p>
<p>A worse case where const-correctness is concerned is DrawText and its flag to modify the text, despite taking a const pointer. So does ShellAboutW, but this one isn&#39;t supposed to be caĺled by user code anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1238616">
				<div id="div-comment-1238616" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238616">
			July 7, 2015 at 7:49 am</a>		</div>

		<p>@Alexander Riccio: As Raymond did indeed write, only CreateProcessW needs to have a writeable input. &nbsp;The ANSI version CreateProcessA can take a read-only input since it constructs a temporary buffer for converting the string to Unicode, which is then writeable.</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2009/06/01/9673254.aspx">blogs.msdn.com/&#8230;/9673254.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1238186">
				<div id="div-comment-1238186" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238186">
			July 8, 2015 at 3:31 pm</a>		</div>

		<p>Seems like this is more of a &quot;const/benefit analysis&quot;&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1238136">
				<div id="div-comment-1238136" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238136">
			July 9, 2015 at 12:21 am</a>		</div>

		<p>For CreateProcessW, the right migration to const correctness would be: Deprecate the current call, and introduce a new one which have separate parameters for the executable path name and for the rest of the command line. This way, there would be no need for CreateProcessW to guess where the executable path name ends (when &quot; is not used as the first character).</p>
<p>Not only could the new parameters be flagged as &quot;const&quot;, also this terrible guessing would be eliminated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1238096">
				<div id="div-comment-1238096" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Burov Dmitry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238096">
			July 9, 2015 at 6:20 am</a>		</div>

		<p>i think you can have both function declarations in the header-files, making it look like an overloaded by parameters function ?</p>
<p>Somewhat similr to how you have both declarations for CreateProcessW and for CreateProcess while it is not two functions and a single one with an optional shortcut for it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237976">
				<div id="div-comment-1237976" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1237976">
			July 9, 2015 at 8:39 am</a>		</div>

		<p>@CreateProcessW: That&#39;s an awful lot of work for very little benefit, and CreateProcess already takes separate arguments for the executable path and the command line, although using both is optional for callers; perhaps you mean to change the semantics to make them both required? &nbsp;Remember, all features start at -100 points.</p>
<p>@Burov Dmitry: Adding an overload with a const (obviously in C++ only) will help in many situations, but it can cause code which previously compiled correctly to now give compiler errors. &nbsp;For example, if you tried to take the address of CreateProcess in certain contexts, or if you tried to use it as a template parameter, the overload resolution might fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>