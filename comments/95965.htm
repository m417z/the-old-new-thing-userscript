<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1292575">
				<div id="div-comment-1292575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170414-00/?p=95965#comment-1292575">
			April 14, 2017 at 8:21 am</a>		</div>

		<p>How can I atomically leave a critical section and delete it? Same as doing any other two operations atomically: wrap them in a critical section. Oh wait…</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1292585">
				<div id="div-comment-1292585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>GL</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170414-00/?p=95965#comment-1292585">
			April 14, 2017 at 8:57 am</a>		</div>

		<p>What that customer is trying to do is `delete`ing something that some other guy is holding reference to. Guess s/he never heard of &#8220;dangling pointer&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1292605">
				<div id="div-comment-1292605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Cohn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170414-00/?p=95965#comment-1292605">
			April 14, 2017 at 10:24 am</a>		</div>

		<p>I am afraid I cannot imagine the motivation to delete such CS.</p>
<p>If the idea is that after the job is done, other threads can cut the overhead of dealing with an obsolete CS, it&#8217;s enough to introduce a simple boolean flag that says, &#8220;everybody is welcome to proceed without waisting time on CS&#8221;.</p>
<p>But there is another, terrifying possiblility: maybe they create so many Critical Sections that they run out of handles and need to delete obsolete ones…</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1292625">
				<div id="div-comment-1292625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170414-00/?p=95965#comment-1292625">
			April 14, 2017 at 4:05 pm</a>		</div>

		<p>If the problem can&#8217;t exist (that is, you ensured that nobody can take it and you&#8217;re only worried about threads in it):</p>
<p>EnterCriticalSection(&amp;criticalsection);<br />
DeleteCriticalSection(&amp;criticalsection);</p>
<p>And yeah, I know why you might want to delete CS. This comes up from time to time when you have CS objects protecting dynamically allocated objects.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1292635">
				<div id="div-comment-1292635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170414-00/?p=95965#comment-1292635">
			April 14, 2017 at 4:06 pm</a>		</div>

		<p>Whoops NVM I forgot EnterCriticalSection is not a queue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1292665">
				<div id="div-comment-1292665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>GL</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170414-00/?p=95965#comment-1292665">
			April 15, 2017 at 10:27 am</a>		</div>

		<p>This isn&#8217;t any kind of solution&#8230; First, you still have the problem that others might be awaiting the CS when you have entered it. Second, it is mandated that the CS to be deleted must be <em>unowned</em> (owned = entered for this case). In this case, your thread owns the CS. See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682552(v=vs.85)" rel="nofollow">https://msdn.microsoft.com/en-us/library/windows/desktop/ms682552(v=vs.85)</a>.aspx</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jeff-cassar even thread-even depth-1" id="comment-1292675">
				<div id="div-comment-1292675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jeff+cassar' rel='external nofollow' class='url'>jeff cassar</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170414-00/?p=95965#comment-1292675">
			April 15, 2017 at 12:17 pm</a>		</div>

		<p>in a well designed app, a synchronization object lifespan will ALWAYS be one to one in relation to the objects lifespan, in which it protects. this sounds like extremely poor code/design. who just arbitrarily wants to go and delete an object/synchronization object in a multi-threaded environment without knowing how many references the object/synchronization object has to it currently, AND without preventing further references to that object, so that it can be deleted in the future, when there are no more references?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>