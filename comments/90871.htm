<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1236576">
				<div id="div-comment-1236576" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236576">
			July 20, 2015 at 7:05 am</a>		</div>

		<p>What will this report for devices connected to the PC that aren&#39;t keyboards, but identify themselves as such? Two things that come to mind are some types of barcode scanners and some prank devices that you can buy from ThinkGeek.</p>
<p>Seems like an unreliable endeavor from the get go.</p>
<div class="post">[<em>If it identifies itself as a keyboard, then it&#39;s a keyboard. There is no second-guessing. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236566">
				<div id="div-comment-1236566" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236566">
			July 20, 2015 at 7:09 am</a>		</div>

		<p>To expand on what Brian EE asked, what if there is a touch screen that can bring up a touch screen keyboard?</p>
<div class="post">[<em>A touch screen does not report itself as a keyboard. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236556">
				<div id="div-comment-1236556" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236556">
			July 20, 2015 at 7:17 am</a>		</div>

		<p>If it walks like a keyboard and quacks like a keyboard, it&#39;s a keyboard. You could probably blacklist known device ids.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1236546">
				<div id="div-comment-1236546" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jimmy Queue</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236546">
			July 20, 2015 at 7:28 am</a>		</div>

		<p>What this is really answering is, is there a device attached that has a type of RIM_TYPEKEYBOARD?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236536">
				<div id="div-comment-1236536" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236536">
			July 20, 2015 at 8:40 am</a>		</div>

		<p>This runs into problems on convertible systems. A keyboard device may be present, but the hardware can be in a configuration that doesn&#39;t make it accessible.</p>
<p>But Raymond&#39;s post is technically correct &#8211; it tells you if there is a keyboard attached, not if there is a usable keyboard attached.</p>
<p>PowerDeterminePlatformRoleEx tells you which configuration a system is in, and should match up with the logic Windows uses for determining when it should automatically use the touch keyboard in Universal apps. A convertible system should go back and forth between Mobile and Slate, unless it is plugged into a fixed docking station, where it may report itself as a desktop. There is an API for determining if a system is docked, but that can be misleading &#8211; I think a Surface will behave differently if docked to it&#39;s mobile keyboard case or to a fixed dock designed to support external monitors.</p>
<div class="post">[<em>Convertibles typically disconnect the keyboard when placed in tablet mode, so no keyboard will be enumerated. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1236526">
				<div id="div-comment-1236526" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236526">
			July 20, 2015 at 8:46 am</a>		</div>

		<p>GetRawInputDeviceList is a nicely designed function because it allows you to retrieve the total number of items even when you pass in a insufficient non-null buffer:</p>
<p>std::vector&lt;RAWINPUTDEVICELIST&gt; devices;</p>
<p>UINT numDevices = 2, retr = !numDevices, gle;</p>
<p>for (;retr != numDevices;)</p>
<p>{</p>
<p>	devices.resize(numDevices);</p>
<p>	retr = GetRawInputDeviceList(&amp;devices[0], &amp;numDevices, sizeof(RAWINPUTDEVICELIST));</p>
<p>	if (-1 == retr &amp;&amp; ERROR_INSUFFICIENT_BUFFER != (gle = GetLastError())) throw gle;</p>
<p>}</p>
<p>In this example it is probably not that helpful because you will probably allocate a insufficient buffer the first time around for anything except simple desktop machines.</p>
<p>Switching to a query first style loop is also easy:</p>
<p>std::vector&lt;RAWINPUTDEVICELIST&gt; devices;</p>
<p>UINT numDevices = 0, retr = !numDevices, gle;</p>
<p>for (;retr != numDevices;)</p>
<p>{</p>
<p>	devices.resize(numDevices);</p>
<p>	retr = GetRawInputDeviceList(numDevices ? &amp;devices[0] : nullptr, &amp;numDevices, sizeof(RAWINPUTDEVICELIST));</p>
<p>	if (-1 == retr &amp;&amp; ERROR_INSUFFICIENT_BUFFER != (gle = GetLastError())) throw gle;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236516">
				<div id="div-comment-1236516" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236516">
			July 20, 2015 at 9:26 am</a>		</div>

		<p>I&#39;m going to guess that what this actually tells you is whether there is a keyboard in your current session. If you connect via RDP to a remote computer, it would tell you that your own local computer has a keyboard rather than the remote computer has a keyboard attached to it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236506">
				<div id="div-comment-1236506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236506">
			July 20, 2015 at 10:47 am</a>		</div>

		<p>Wow nitpickers everywhere.</p>
<p>Thanks for the small program Raymond, I enjoy these!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236496">
				<div id="div-comment-1236496" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236496">
			July 20, 2015 at 1:13 pm</a>		</div>

		<p>&quot;[Convertibles typically disconnect the keyboard when placed in tablet mode, so no keyboard will be enumerated. -Raymond]&quot;</p>
<p>That&#39;s what I thought too, until I tried it out. I needed a quick-and-dirty way to know if my Surface was docked or not for some tests (nothing ever to be used near production) I was doing, and discovered that it still reported a keyboard. I was in C# Universal App land, so used Windows.Devices.Input.KeyboardCapabilities to detect it. KeyboardPresent was true, even when undocked! My assumption was that the actual USB device is integrated into the Surface, not the keyboard case, but I didn&#39;t look into it further because it didn&#39;t really matter. The convertible device guidelines for OEMs don&#39;t mention physically disconnecting the keyboard, just the details of how to get the GPIO driver for the laptop/slate indicator working, and how the OS responds to it. Unfortunately, there doesn&#39;t seem to be a way for a Universal app to query the platform role.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236476">
				<div id="div-comment-1236476" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236476">
			July 20, 2015 at 2:25 pm</a>		</div>

		<p>@skSdnW: Put a simple `numDevices += 2` just before std::vector&lt;RAWINPUTDEVICELIST&gt; devices(numDevices);</p>
<p>`numDevices` gets overwritten on second call to `GetRawInputDeviceList`</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1236466">
				<div id="div-comment-1236466" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236466">
			July 20, 2015 at 3:15 pm</a>		</div>

		<p>@wqw: Why are you talking to me but quoting Raymond&#39;s code? My code uses a loop to avoid the race condition and having GetRawInputDeviceList overwrite numDevices is sort of the point. Doing a += 2 might not be enough, a docking station might provide more than two devices etc&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236446">
				<div id="div-comment-1236446" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236446">
			July 20, 2015 at 11:22 pm</a>		</div>

		<p>Mil $ qeustion : why does anyone ever want to know if there is a keyboard?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236436">
				<div id="div-comment-1236436" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236436">
			July 20, 2015 at 11:32 pm</a>		</div>

		<p>@skSdnW: I&#39;m commenting your over-engineered code. Again: a simple bicrement would be enough. Now you have to figure out why.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236426">
				<div id="div-comment-1236426" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236426">
			July 21, 2015 at 12:06 am</a>		</div>

		<p>@Amit: We don&#39;t want to show keyboard key hints over our buttons in a game if the MS Surface doesn&#39;t have a keyboard attached at the moment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236416">
				<div id="div-comment-1236416" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236416">
			July 21, 2015 at 12:07 am</a>		</div>

		<p>@wqw</p>
<p>&gt; a simple bicrement would be enough</p>
<p>No it won&#39;t. Stop misleading other readers, please.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236396">
				<div id="div-comment-1236396" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236396">
			July 21, 2015 at 3:27 am</a>		</div>

		<p>Here&#39;s my little program to detect whether a keyboard is attached, but with all the error-checking removed, as is standard for little programs:</p>
<p>@echo off</p>
<p>pause</p>
<p>@skSdnW: Why the for (;condition;) loop instead of a while (condition) loop?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1236386">
				<div id="div-comment-1236386" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236386">
			July 21, 2015 at 4:13 am</a>		</div>

		<p>@Neil: My initial code was for(;;) and a break (while(true) can cause warnings). You could probably remove the ?: condition from the second example as well but I try to not edit the code too much in the comment reply field.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236296">
				<div id="div-comment-1236296" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236296">
			July 21, 2015 at 8:01 am</a>		</div>

		<p>@skSdnW Does while(true) give a warning in any recent compiler?</p>
<p>I noticed the other &quot;trick&quot; of putting the constant first to avoid = being allowed when you meant ==, but it&#39;s not 1995 anymore and it makes it harder to write descriptive code for those of us who read left to right. A good compiler should pick up on that. </p>
<p>Hiding the assignment inside the if also hurts readability as is putting the if and throw on the same line.</p>
<p>You&#39;re using different techniques for preventing errors but then using a style that makes it easy to make mistakes it can&#39;t warn against. i.e. always use {} even for single line if&#39;s, don&#39;t hide variable definitions on one line etc. Anytime I see a ? operator my spider sense activates, thankfully you can breakpoint them these days but it&#39;s still a much more tiresome task than splitting the code up.</p>
<p>I know you are probably happy with it because it&#39;s your style, but someone else will either have to slow down when skim reading your code or they&#39;ll miss important details (some developers do this on purpose to deter anyone else touching their code). </p>
<p>If I was asked to fix a bug in this code I&#39;d just rewrite it rather than try to figure out what it does compared to what it would actually need to do.</p>
<p>This comes across as arrogant and negative, but I just thought that maybe nobody ever questioned how you structure your code and I thought it might actually help if you re-evaluate it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1236286">
				<div id="div-comment-1236286" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236286">
			July 21, 2015 at 8:25 am</a>		</div>

		<p>@boogaloo: I don&#39;t want to start a style debate here. I agree that the &quot;if&quot; is a bit iffy and the throw belongs on the next line but I was not going for readability, I was trying to keep it short because it is throwaway code posted as a comment&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236226">
				<div id="div-comment-1236226" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236226">
			July 21, 2015 at 11:12 am</a>		</div>

		<p>I have a function that asks the user to press &#39;Y&#39; or &#39;N&#39;, when asked &quot;Is there a keyboard present&quot;. &nbsp;But, if there is no keyboard present, the user can not press &#39;N&#39;, so my program stops. &nbsp;This is a Denial Of Service bug. &nbsp;Please fix it, thanks. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236156">
				<div id="div-comment-1236156" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236156">
			July 22, 2015 at 12:59 am</a>		</div>

		<p>The race condition is in</p>
<p>| return std::find_if(devices.begin(), devices.end(),</p>
<p>| &nbsp; &nbsp;[](RAWINPUTDEVICELIST&amp; device)</p>
<p>| &nbsp; &nbsp;{ return device.dwType == RIM_TYPEKEYBOARD; }) != devices.end(); }</p>
<p>which might search uninitialized entries in devices. To fix it one should call</p>
<p>| devices.resize(numDevices);</p>
<p>before the `std::find_if`.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1236106">
				<div id="div-comment-1236106" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236106">
			July 22, 2015 at 7:49 am</a>		</div>

		<p>If we&#39;re going to turn Win32 errors into unhandled exceptions, I think I&#39;d rather throw HRESULT_FROM_WIN32(GetLastError()) than the raw Win32 error value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1236096">
				<div id="div-comment-1236096" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1236096">
			July 22, 2015 at 8:10 am</a>		</div>

		<p>Why does the MSDN documentation for GetRawInputDeviceList have the same race condition in it&#39;s example as you have in yours? &nbsp;I would think that MS wouldn&#39;t want to promote bad code by providing examples that have bugs. &nbsp;It is not even mentioned that the example has a race condition so the unwary learner will end up writing bad code because the example provided by an authority has bugs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1235976">
				<div id="div-comment-1235976" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150720-00/?p=90871#comment-1235976">
			July 22, 2015 at 4:05 pm</a>		</div>

		<p>@Query: A getter function like this will always have some type of a race. To keep it simple they could change it and check the return value against &gt;= 0 in the second call. After all, something could be added/removed at any point after a successful call even if you use a loop. </p>
<p>What happens to the handles in the array when something is unplugged is another question, perhaps they are not real handles?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>