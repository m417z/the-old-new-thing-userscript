<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-959303">
				<div id="div-comment-959303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959303">
			January 12, 2012 at 7:58 am</a>		</div>

		<p>You could also just look at it as undefined behavior: you violated the functions preconditions, so anything could happen. &nbsp;It could fail silently and appear to succeed, it could crash, or it could start sending snarky emails to your coworkers. &nbsp;You just got lucky in that it failed with an error code, at least in this version of Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-959363">
				<div id="div-comment-959363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MWF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959363">
			January 12, 2012 at 9:25 am</a>		</div>

		<p>&quot;Okay, first of all, building a table of all known error codes is another compatibility problem waiting to happen. &#8230; What will your program do when it gets this new error code?&quot;</p>
<p>It&#39;s not necessarily a compatibility problem (at least not one of any note). It depends on what your table of errors is used for&#8230; if you just want to translate/transform an error message to a preferred form, then it&#39;s not really a problem. If you don&#39;t get one of your expected values, then you just issue &quot;Unknown error #123&quot; or fall back to FormatMessage(). I do this often, in fact. There are lots of times when you &#8211; the programmer &#8211; can interpret a standard error code to a more context-correct error message than FormatMessage() would.</p>
<p>Of course, it would be a huge folly to use a list of known error codes to &quot;limit&quot; the return codes of a function, resulting in an exception, crash, or otherwise bad behaviour if an unexpected value is encountered. That&#39;s just ridiculous; I don&#39;t know why any sane person would consider such an approach.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-959393">
				<div id="div-comment-959393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959393">
			January 12, 2012 at 10:08 am</a>		</div>

		<p>@MWF: Yes, it&#39;s good like this that makes me facepalm:</p>
<p>int result = SomeAPIFunction();</p>
<p>if(result == API_SUCCESS) {</p>
<p>&nbsp;&#8230;</p>
<p>} else if(result == API_FAILURE) {</p>
<p>&nbsp;&#8230;</p>
<p>}</p>
<p>Where the code assumes that only API_SUCCESS or API_FAILURE will be returned. &nbsp;When the next version of the API comes out and it now returns API_WARNING, the code will break because it failed to account for the third case. &nbsp;Obviously the correct thing to do is just a bare else, not an else-if, for the final case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-959443">
				<div id="div-comment-959443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ajgelado_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>ajgelado@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959443">
			January 12, 2012 at 11:25 am</a>		</div>

		<p>Maybe the person that asked the question in the first place didn&#39;t know about the Kernel namespace. But then, how did they know about CreateEvent? Where did they learn about it? And even without knowing about namespaces, Windows uses the backslash as path separator, so seeing that backslashes were banned, his/her psychic powers should have pointed him/her in the right direction&#8230;</p>
<p>Where I work, we keep a list of common error codes not in the code, but in paper, in order to help technical support people diagnose them. It&#39;s like a knowledge base (sort of). I agree that hard-coding the list in the code would be insane, but keeping record of error codes and possible causes is really useful and saves a lot of time!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-959453">
				<div id="div-comment-959453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959453">
			January 12, 2012 at 11:29 am</a>		</div>

		<p>Adam Rosenfield: while I get what you are trying to say, I think the example isn&#39;t very good to demonstrate your point. To me, it isn&#39;t &quot;obvious&quot; that a new return value will represent a new kind of error and not a new kind of success. (Even your example can be interpreted that way: API_WARNING sounds like a success with minor issues, not like a failure.) If an API wants to extend the range of its return values during its evolution like your example shows, the least the designers need to do up front is separating the success codes from the error codes. If you have a rule like &quot;error codes are negative, success codes are positive&quot;, callers can deal with new codes in a more roboust way.</p>
<p>Of course, the simplest way to partition the return values between successes and errors is to limit one of the categories to one specific value (i.e. you have only one error code or only one success code), so that&#39;s what most APIs do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-959483">
				<div id="div-comment-959483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959483">
			January 12, 2012 at 11:50 am</a>		</div>

		<p>The other problem with FormatMessage() is that a small number of the messages have insertion strings.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-959523">
				<div id="div-comment-959523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959523">
			January 12, 2012 at 7:00 pm</a>		</div>

		<p>Hopefully you pointed them in the direction of the excellent Windows Internals book and WinObj ;)</p>
<p>Seriously though, what were they using -named- events for? Was it a valid use case?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-959533">
				<div id="div-comment-959533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959533">
			January 12, 2012 at 7:09 pm</a>		</div>

		<p>Also, on the topic of object names &#8211; why do all the other object types ignore obcaseinsensitive? Only NtCreateFile respects it&#8230; You can happily create events, for example, with NtCreateEvent that differ in case alone if OBJ_CASE_INSENSITIVE is not passed and the object manager is running in case insensitive mode&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-959553">
				<div id="div-comment-959553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959553">
			January 12, 2012 at 7:17 pm</a>		</div>

		<p>Adam Rosenfield: Maybe the code should have else-if in the second part afterall, but not the API_FAILURE, just for those kinds like API_NOERROR.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-959563">
				<div id="div-comment-959563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959563">
			January 12, 2012 at 7:37 pm</a>		</div>

		<blockquote><p>
  &gt;&gt; what were they using -named- events for?
</p></blockquote>
<p>Umm, sending events from one app to another?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-959573">
				<div id="div-comment-959573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959573">
			January 12, 2012 at 7:54 pm</a>		</div>

		<p>Yes, I know what they&#39;re used for.</p>
<p>I was shocked that they would have a use case where they needed named events, yet got away with being blissfully unaware of the object namespace and didn&#39;t research it further before contacting Microsoft when getting that error.</p>
<p>I just find that worrying and unlikely, hence my curiosity if it was the valid usecase of needing an event to be cross-process or just naming it because the parameter is there, and, heck, why not?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-959583">
				<div id="div-comment-959583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959583">
			January 12, 2012 at 9:00 pm</a>		</div>

		<p>@Nick Lowe</p>
<p>The way these functions work means that they can be used without knowing about the NT object namespace. For all intents and purposes, it is just a name for the event that Windows stores somewhere that you don&#39;t really need to care about. So someone asking why the  is bad is understandable. Also remember that unless you have a bit of an idea of the workings under the bonnet, it is hard to know where to start in researching.</p>
<p>So really it being a valid use case is a moot point here. Not knowing about the NT object namespace is not uncommon because the Win32 API abstracts it away. I think it would actually be more unreasonable to think that programmers new in the Win32 API field have read anything to do with the internals of Windows. Yet these programmers should be able to use CreateEvent or even CreateFile without having to worry about any of that. Just imagine what it would be like if people who used CreateFile had to know that C:thisfile.txt was in fact a symlink to something like DeviceHardDiskVolume1thisfile.txt in the object namespace. So is it any less reasonable for new Win32 API programmers to not know that the event MyEvent created with CreateEvent is actually something like Sessions1BaseNamedObjectsMyEvent in the object namespace? I don&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-959593">
				<div id="div-comment-959593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959593">
			January 12, 2012 at 9:19 pm</a>		</div>

		<p>Oh, and just to make sure that people don&#39;t pick out the obvious faults.</p>
<p>Yes, C: may not be on HardDiskVolume1, so if it isn&#39;t then use the actual number in place of 1.</p>
<p>Also, yes, the event may be created in a different session, so substitute the correct session number in instead of 1. Finally, it may have been created in the global base named objects part of the namespace, in that case it would be BaseNamedObjectsMyEvent instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-959623">
				<div id="div-comment-959623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Farnsworth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959623">
			January 13, 2012 at 2:24 am</a>		</div>

		<p>@Csaboka:</p>
<p>It doesn&#39;t matter whether the new API return code is a failure or a success code &#8211; you don&#39;t know how to handle it, so treating it as a failure is the only safe option. Indeed, this is a restriction on existing APIs &#8211; you cannot add new success codes unless the cleanup required after success is the same as the cleanup required after failure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-959633">
				<div id="div-comment-959633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959633">
			January 13, 2012 at 3:29 am</a>		</div>

		<p>@John Insertion strings also confuse NET HELPMSG which spits out its generic &quot;error 3871&quot; (a special message internal to NET HELPMSG) instead of (say) 317.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-959733">
				<div id="div-comment-959733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-959733">
			January 13, 2012 at 9:20 am</a>		</div>

		<p>@Crescens2k:</p>
<p>Having thought about what you&#39;ve said, I agree with you entirely. I&#39;m guilty of wearing the goggles and falling victim to the &quot;It seems obvious to me, so it surely should be to others?&quot; fallacy&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-960023">
				<div id="div-comment-960023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clovis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-960023">
			January 14, 2012 at 8:13 am</a>		</div>

		<p>Nice error code, but in reality, nothing is ever rejected by slashdot, they just moan on and on about what ever offends them until they all get into a hysterical ego feedback loop and need calming down by their mothers. So perhaps ERROR_POSSIBLE_RECURSIVE_SLASHDOT_EGO_STORM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-960053">
				<div id="div-comment-960053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sean McGeough</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-960053">
			January 14, 2012 at 3:42 pm</a>		</div>

		<p>NTSTATUS values are a far better return than flat Win32 Error Codes as you have classes of severity &#8211; Success, Informational, Warning or Error &#8211; and, sadly, things often get lost in translation in RtlNtStatusToDosError.</p>
<p>It&#39;s tougher to do the right thing in the Win32 world, but I suppose it avoids the need to understand bitops.</p>
<p>(You get people often checking for a literal NTSTATUS value of STATUS_SUCCESS rather than looking at the severity class.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-960103">
				<div id="div-comment-960103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120112-00/?p=8583#comment-960103">
			January 15, 2012 at 3:29 am</a>		</div>

		<p>@Nick Lowe</p>
<p>It is easy to do that, I&#39;ve done it too many times myself.</p>
<p>@Sean McGeough</p>
<p>Of course, NTSTATUS is newer than the Win32 error codes. I&#39;m sure that to get the Win32 error codes fixed, we&#39;d need that time machine working so someone can go back and fix it.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>