<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (38)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-670293">
				<div id="div-comment-670293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670293">
			September 25, 2008 at 11:55 am</a>		</div>

		<p>How would someone know that the call to FreeEnvironmentStrings() did nothing? Do some people regularly disassemble API functions to see if it&#8217;s OK to not call them or something?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670313">
				<div id="div-comment-670313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Q</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670313">
			September 25, 2008 at 12:17 pm</a>		</div>

		<p>&quot;To fix this, the GetEnvironmentStrings function was changed to return a copy of the environment block even if you call the Unicode version.&quot;</p>
<p>When did that happen? It appears XP SP3 (+ all updates) still returns a direct pointer:</p>
<p>kernel32!GetEnvironmentStringsW:</p>
<p>7c812f98 64a118000000 &nbsp; &nbsp; mov &nbsp; &nbsp; eax,fs:[00000018]</p>
<p>7c812f9e 8b4030 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov &nbsp; &nbsp; eax,[eax+0x30]</p>
<p>7c812fa1 8b4010 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov &nbsp; &nbsp; eax,[eax+0x10]</p>
<p>7c812fa4 8b4048 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov &nbsp; &nbsp; eax,[eax+0x48]</p>
<p>7c812fa7 c3 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ret</p>
<p>kernel32!FreeEnvironmentStringsW:</p>
<p>7c814b77 33c0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xor &nbsp; &nbsp; eax,eax</p>
<p>7c814b79 40 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inc &nbsp; &nbsp; eax</p>
<p>7c814b7a c20400 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ret &nbsp; &nbsp; 0x4</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-670373">
				<div id="div-comment-670373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670373">
			September 25, 2008 at 1:21 pm</a>		</div>

		<p>Ah irony. Q indirectly answers Karellen&#8217;s question.</p>
<p>I still have bad memories of our architect doing similar things. The &quot;who cares what MSDN says, their code doesn&#8217;t do anything, so don&#8217;t call it&quot;..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670383">
				<div id="div-comment-670383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">t3hm4x</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670383">
			September 25, 2008 at 1:29 pm</a>		</div>

		<p>Q:</p>
<p>32bit Vista the changes Raymond mentions take place as well as the 64bit editions as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-670413">
				<div id="div-comment-670413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670413">
			September 25, 2008 at 3:02 pm</a>		</div>

		<p>Sorry, but if we&#8217;d have to read the MSDN page for every single method of every single class we have ever used (citing .NET Framework&#8217;s 10.000+ classes as an example), we would not have finished writing any reasonably complex piece of software. That&#8217;s why people are relying on conventions and recurring patterns in the blackbox code they use. Changing API implementations &#8211; after the fact &#8211; might seem correct for the engineer who designed the API (and knows his/her &quot;own&quot; MSDN page by heart), but not for the rest of us.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670423">
				<div id="div-comment-670423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670423">
			September 25, 2008 at 3:13 pm</a>		</div>

		<p>Anonymous Coward, please stop writing software if you think it&#8217;s better to guess about what APIs do rather than read their contracts. Your software must only work by chance.</p>
<p>It&#8217;s not like it takes long to push F1 and read about the function (at least if you&#8217;re writing .Net and F1 still takes you to the function for your language/framework and not Windows CE, MFC or .Net).</p>
<p>I&#8217;d argue that it would take longer to experiment with the API to determine its behaviour than it would to simply skim the documentation.</p>
<p>Whenever the OS gives you a piece of data, especially when &#8212; as is the case here &#8212; we are talking unmanaged C/C++ and not .Net, the first thing you should be asking is &quot;who owns this memory/object and how is it freed? The second thing should be &quot;what are the error return values and/or behaviours. You don&#8217;t get any of that by guessing.</p>
<p>Back to the root post: This is why I still call GlobalLock and GlobalUnlock even though they &quot;don&#8217;t do anything anymore&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-670453">
				<div id="div-comment-670453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Craighead</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670453">
			September 25, 2008 at 4:00 pm</a>		</div>

		<p>The sentiment is great, but this seems like one of those cases where you&#8217;re simply doomed if you want to change the API&#8217;s implementation. &nbsp;For all practical purposes, this is a compatibility break.</p>
<p>It&#8217;s hard enough to make internal API changes that affect 100 other developers on your own team.</p>
<p>Sometimes I&#8217;ve been tempted to have an API implementation walk up the call stack and rewrite (using self-modifying code) the buggy calling code. &nbsp;Never actually done that, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670483">
				<div id="div-comment-670483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Leo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670483">
			September 25, 2008 at 4:38 pm</a>		</div>

		<p>Do you still need to use Global or Local Memory functions? &nbsp;I suppose there are a few system APIs which require memory allocated from them, but I&#8217;d stick with the CRT or the Heap* APIs for any other uses.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-670493">
				<div id="div-comment-670493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670493">
			September 25, 2008 at 4:43 pm</a>		</div>

		<p>&quot;Back to the root post: This is why I still call GlobalLock and GlobalUnlock even though they &quot;don&#8217;t do anything anymore&quot;.&quot;</p>
<p>Don&#8217;t GlobalLock and GlobalUnlock do something for GMEM_MOVEABLE memory?</p>
<p>I go further. I call UnlockResource, even though it&#8217;s clearly marked as obsolete and not doing anything, and probably implemented as a macro doing nothing. I just feel that there&#8217;s something wrong with locking something but not unlocking it. I&#8217;m not sure that it&#8217;s available in latest Win32 SDK headers.</p>
<p>I&#8217;m curious. Do FreeEnvironmentStrings do anything in Windows 95/98/Me? Win32 != Windows NT/2000/XP! Assuming that Windows is necessarily based on the NT kernel is stupid!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670513">
				<div id="div-comment-670513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jerf.org/iri/' rel='external nofollow' class='url'>Jeremy Bowers</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670513">
			September 25, 2008 at 5:25 pm</a>		</div>

		<p>&quot;For all practical purposes, this is a compatibility break.&quot; &#8211; As Leo Davidson says, for &lt;i&gt;every&lt;/i&gt; bit of data in C(++), you must always know who is responsible for freeing it, it is part of the language itself, and there is no way to represent this in the language itself so you have no choice. If you start with the assumption that people won&#8217;t do this&#8230; well, you might as well not write the code at all, because they have to.</p>
<p>You just can&#8217;t build APIs built on the assumption that the API users won&#8217;t know the language the API is in. (This isn&#8217;t an absolute, it&#8217;s good to think about common mistakes, how to catch them and mitigate them, but at fundamental level you have to assume your API users know how the language works, because without that your API doesn&#8217;t matter, those programmers are screwed no matter what.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-670553">
				<div id="div-comment-670553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://tmorris.net/' rel='external nofollow' class='url'>Tony Morris</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670553">
			September 25, 2008 at 6:21 pm</a>		</div>

		<p>You guys, who are married to the degenerate imperative programming mindset, have got it all backwards.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670573">
				<div id="div-comment-670573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Poochner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670573">
			September 25, 2008 at 7:52 pm</a>		</div>

		<p>@Jeremy: I disagree. &nbsp;It&#8217;s quite possible and preferable for an API to be written in a language agnostic way. &nbsp;That doesn&#8217;t mean you ignore common sources of programming errors, because they&#8217;re common to many programming languages. &nbsp;To twist a phrase, a lousy programmer can leak memory in any language. &nbsp;It&#8217;s just harder in some than others. &nbsp;This is especially true in systems such as Win32 that return some resource that need to be freed at a later time, and can&#8217;t necessarily be just garbage collected. &nbsp;File handles / descriptors / ports? &nbsp;Something like that exists almost in almost every OS and if it&#8217;s just a random small number, well, there ya go.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-670623">
				<div id="div-comment-670623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric TF Bat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670623">
			September 25, 2008 at 9:35 pm</a>		</div>

		<p>I must be a real old fart, because I saw this heading and thought immediately of FindFirst, FindNext and FindClose. &nbsp;In Win 3.1, FindClose did nothing, but you were advised to call it anyway; sure enough, in Win95 FindClose was a dispose, and people who did the Right Thing [TM] were rewarded with fewer memory leaks.</p>
<div class="post">[<i>Oh, you mean <a href="http://blogs.msdn.com/oldnewthing/archive/2005/02/03/366277.aspx" rel="nofollow">something like this</a>. -Raymond</i>]</div>
<p>There are a lot of contracts in programming. &nbsp;The one that DOESN&#8217;T exist is the one that says &#8220;This is going to be easy, so you don&#8217;t need to learn anything&#8221;. &nbsp;Programmers who think they can coast on gut feeling and googled example code are bad programmers; no doubt about it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670653">
				<div id="div-comment-670653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cale Gibbard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670653">
			September 25, 2008 at 10:13 pm</a>		</div>

		<p>Why not instead design the API such that the programmer cannot fail to use it correctly and still have their program compile?</p>
<p>I think this mindset of requiring the programmer to follow instructions rather than enforcing the rules in the language is primarily a property of the inexpressiveness of the languages under consideration.</p>
<p>In this case for instance, in a slightly richer language, you could have a function WithEnvironmentStrings which takes a function that takes the environment strings to a procedure to be performed with them, and does whatever allocation and deallocation is required with regard to the table, with the procedure performed in between. You can do this in C too, but your users will hate you, because C has no anonymous functions or procedures.</p>
<p>I think this is what Tony Morris was getting at with his remark that the imperative mindset has things all backwards. It&#8217;s too hard to express the constraints on how APIs are to be used in your language, so you pass the responsibility off to your users, and then get upset when they don&#8217;t follow your rules. :)</p>
<p>Instead, it&#8217;s much nicer to handle issues like this using techniques such as garbage collection in the common case of things like memory, or continuation passing style allocation (like the WithEnvironmentStrings example I mentioned above) in more complex situations, but of course you need a language which provides you enough luxuries to express it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-670433">
				<div id="div-comment-670433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670433">
			September 25, 2008 at 3:17 pm</a>		</div>

		<p>@Anonymous Coward</p>
<p>Apples and oranges! &nbsp;If we are writing in this blog then we are writing about the Win32 API, which is not .NET, so don&#8217;t compare the two.</p>
<p>The collection of API calls, while not small, is manageable. &nbsp;Let me rephrase, the collection of API calls *that matter* is manageable. &nbsp;There is no reason to scoff at the MSDN and go on your own based on disassembly listings of Windows&#8217; DLL files.</p>
<p>Are these errors in the MSDN? &nbsp;Sure, it happens. &nbsp;However, and I cannot speak for .NET development, I have always been satisfied with the level of detail the MSDN provides for *Win32 API* functions. &nbsp;I have never needed to disassemble a Win32 function to figure out what is going on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670523">
				<div id="div-comment-670523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Craighead</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670523">
			September 25, 2008 at 5:54 pm</a>		</div>

		<p>&quot;you have to assume your API users know how the language works, because without that your API doesn&#8217;t matter, those programmers are screwed no matter what&quot;</p>
<p>Until you get blamed because your upgrade &quot;caused&quot; their program to stop working, at which point it is automatically your fault.</p>
<p>I have a lot of sympathy for Raymond&#8217;s arguments in favor of compatibility. &nbsp;It can be taken too far, though.</p>
<p>In this case, I would have suggested that the original API should *not* have had a Free function, and that rather than changing the existing API, we&#8217;d have to create a new API GetEnvironmentStrings2() (or whatever you want to call it). &nbsp;But then we get into the mess that this was only an issue with the Unicode version of the function, and&#8230; well&#8230; yuck. &nbsp;(And as for Windows&#8217;s Unicode support strategy, which makes it painful to write code that handles Unicode and is portable across Windows/Linux/Mac, that&#8217;s a topic for another day&#8230; oh, if only you could pass UTF-8 strings to the &quot;A&quot; functions rather than them using the current code page&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-670683">
				<div id="div-comment-670683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670683">
			September 26, 2008 at 2:02 am</a>		</div>

		<p>I think Cale means &#8216;in hindsight, it would have been better that &#8230;&#8217; and it&#8217;s a good idea for the future.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670563">
				<div id="div-comment-670563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670563">
			September 25, 2008 at 7:04 pm</a>		</div>

		<p>The simple fact is that the documented contract has always required people to call the FreeEnvironmentStrings function afterwards. &nbsp;If application vendors decided not to do so (whether because they thought they knew better or because they didn&#8217;t bother to read the documentation), then they deserve to get taken out behind the woodshed and thrashed.</p>
<p>Having said that, as a user, if I upgrade to Vista and it makes an application I use frequently not work any more, then I am going to blame it on Vista, not the application. &nbsp;Even if it really is the app&#8217;s fault :) &nbsp;(&quot;It worked perfectly *before* I installed Vista&#8230;&quot;)</p>
<p>You just can&#8217;t win.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-670753">
				<div id="div-comment-670753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670753">
			September 26, 2008 at 6:32 am</a>		</div>

		<p>&quot;but of course you need a language which provides you enough luxuries to express it.&quot;</p>
<p>You mean: Using a .NET language such as C#?</p>
<p>You&#8217;re free to do so, as you&#8217;re free to use the good old simple Win32 API with a good old simple standard portable language such as C.</p>
<p>One solution to prevent API contract violations, for older API, such as Win32, is to validate every input, even in release versions, since bad programmers don&#8217;t use debug tools. For system resources leaks, it cannot do more than logging the system leak to a clearly visible and accessible file, through a per-process counter for every type of resources. It has performances implications, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670663">
				<div id="div-comment-670663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670663">
			September 26, 2008 at 1:16 am</a>		</div>

		<p>You want Windows programming to *require* the use of a newer and entirely distinct programming language which is not compatible with any known standard?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-670783">
				<div id="div-comment-670783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wtroost</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670783">
			September 26, 2008 at 8:57 am</a>		</div>

		<p>In my experience documentation is only used for blaming other people. &nbsp;This article is no exception. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670893">
				<div id="div-comment-670893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670893">
			September 26, 2008 at 12:59 pm</a>		</div>

		<p>of course it is also incredible that the api was designed that way at first. system architects should be able to forsee the future problems of a no-op function. unfortunately all kinds of problems like this can arise in unmanaged code. they are much less likely in managed code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-670923">
				<div id="div-comment-670923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670923">
			September 26, 2008 at 3:06 pm</a>		</div>

		<p>&quot;of course it is also incredible that the api was designed that way at first.&quot;</p>
<p>Who said that the API was designed that way at first?</p>
<p>&quot;However, some people noticed that on Windows NT 4, the Unicode version of the FreeEnvironmentStrings function didn&#8217;t do anything.&quot;</p>
<p>Notice that this says &quot;on Windows NT 4&quot; and &quot;the Unicode version&quot;, not &quot;since the function was first introduced, all versions of this function did nothing&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670943">
				<div id="div-comment-670943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670943">
			September 26, 2008 at 3:17 pm</a>		</div>

		<p>If you program in a native language, you need to know what memory is. No excuses! The sad reality is that there are many native code programmers who don&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-670953">
				<div id="div-comment-670953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670953">
			September 26, 2008 at 3:19 pm</a>		</div>

		<p>Paraphrasing Anonymous, Matt, Cale, et al:</p>
<p>&quot;Why can&#8217;t you just design a telepathic and clairvoyant API that automatically fixes all my boneheaded bugs for me?&quot;</p>
<p>What surprises me isn&#8217;t that some people have a habit of writing poor code. &nbsp;What surprises me is that they can be so entrenched in that habit that they will loudly proclaim that it&#8217;s really somebody else&#8217;s problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670963">
				<div id="div-comment-670963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mdahmus.monkeysystems.com/blog/' rel='external nofollow' class='url'>M1EK</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670963">
			September 26, 2008 at 3:32 pm</a>		</div>

		<p>As a sometimes systems-programmer myself, I&#8217;m dismayed that it took until just a couple of comments ago before somebody pointed out that it was ALSO a dumb thing to stick in a do-nothing function call and then assume people would call it by contract.</p>
<p>Uh, did that REALLY seem like a good idea to anybody? By Windows NT 4, had we not all figured out a long time ago that many application developers are not going to do things exactly the way you tell them?</p>
<p>This is MS&#8217;s error first; the app developer&#8217;s second. Neither one is right, but MS was more wrong.</p>
<div class=post>[<i>Okay, you have a time machine. What do you do? Do you have the cleanup function do some pointless busy work just so it does &#8220;something&#8221;? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-670803">
				<div id="div-comment-670803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jerf.org/iri' rel='external nofollow' class='url'>Jeremy Bowers</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670803">
			September 26, 2008 at 10:46 am</a>		</div>

		<p>APIs may be language-agnostic, but an API in a given language are automatically bound to the language you are using.</p>
<p>I&#8217;ve seen Python and Perl wrappers of very complicated C(++) APIs that do indeed take away the problems of leaking (if we assume you trust the Perl/Python GC). But that doesn&#8217;t do anything to change the fact that if you use the native C(++) API, you&#8217;ve got to worry about such things. </p>
<p>Demanding a C(++) API that automatically handles these things and makes the programmer not have to think is demanding something other than a C(++) API. Which in the abstract is OK; I&#8217;d program .Net before C(++) Win32 in a heartbeat. But that doesn&#8217;t change a single thing about Raymond&#8217;s post, which already starts with the assumption that we&#8217;re in C(++). And if you&#8217;re programming in C(++) without a constant awareness of memory issues, you&#8217;ve *already lost*, long before Microsoft changed an API in a way they told you about in advance. Lossage that I&#8217;ve seen more times than I can count, so it&#8217;s hardly theoretical.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-670993">
				<div id="div-comment-670993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-670993">
			September 26, 2008 at 6:21 pm</a>		</div>

		<p>[Okay, you have a time machine. What do you do? Do you have the cleanup function do some pointless busy work just so it does &quot;something&quot;? -Raymond]</p>
<p>no, you <em>always</em> create a copy for the application. what if the app decides to use the returned buffer as some kind of working memory an does string operations in it? this is not the least unlikely. future calls of the Get-api will then return the modified result.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-671003">
				<div id="div-comment-671003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-671003">
			September 26, 2008 at 6:44 pm</a>		</div>

		<p>&quot;what if the app decides to use the returned buffer as some kind of working memory an does string operations in it?&quot;</p>
<p>Then the app is ignoring the part of the documentation that says:</p>
<p>&quot;Treat this memory as read-only&quot;</p>
<p>Aside from that, the end-to-end principle applies. If you need a copy for applications-specific reasons, make a copy. It&#8217;s not the operating system&#8217;s job to write your application for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-671013">
				<div id="div-comment-671013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-671013">
			September 26, 2008 at 6:50 pm</a>		</div>

		<p>&quot;Then the app is ignoring the part of the documentation that says&quot;</p>
<p>this is constantly happening. after all, this blog is partially about the phenomenon of bad code. as a systems designer you cannot ignore this. i even have to think about it when coworkers are using my code!</p>
<p>&quot;If you need a copy for applications-specific reasons, make a copy. It&#8217;s not the operating system&#8217;s job to write your application for you.&quot;</p>
<p>of course it is! the operating system provides services to you in order to alleviate the need for implementing them yourself. the reason for choosing a development platform is that one platform might reduce your work more than the other.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-671033">
				<div id="div-comment-671033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-671033">
			September 26, 2008 at 7:01 pm</a>		</div>

		<p>The name of the API is &quot;GetEnvironmentStrings.&quot; Its job, believe it or not, is to get environment strings and then let the application move on&#8211; not to anticipate whether you need a copy, how many, for how long, from which allocators, etc., etc. All of those are things the application can manage for itself, using other APIs, or no APIs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-671043">
				<div id="div-comment-671043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-671043">
			September 26, 2008 at 7:25 pm</a>		</div>

		<p>what would you have done at the time you created your first win32 window? i believe that you are now capable of using win32 correctly but only because you have gone through every misery unmanaged code has to offer at least once ;-) unfortunately many programmers are, after 10 years of experience, still at the entry level.</p>
<p>an api can be designed to help you and it can be designed without consciousness of usability. GetEnvironmentStrings one is of the latter (although the usability problem is only minor. there are other examples as well).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-671073">
				<div id="div-comment-671073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-671073">
			September 27, 2008 at 4:51 am</a>		</div>

		<p>[Okay, you have a time machine. What do you do? Do you have the cleanup function do some pointless busy work just so it does &quot;something&quot;? -Raymond]</p>
<p>I don&#8217;t think the implementation is flawed, but if I had a time machine I might take a very defensive approach: Counting resource references. Incrementing a process-wide counter when GetEnvironmentStrings is called and decreasing it when FreeEnvironmentStrings is called. If the count, when a process terminates or exit, is non-zero, this event would be logged.</p>
<p>However, its limit are obvious:</p>
<p>1) It doesn&#8217;t prevent application from calling FreeEnvironmentStrings on the wrong pointer.</p>
<p>Adding testing logic is possible, but would necessarily GetEnvironmentStrings to copy the string.</p>
<p>(An instance ordinal would be added in the bytes preceding the string&#8230; People would obviously mess with it&#8230;)</p>
<p>2) Programmers would ignore the logs.</p>
<p>3) It is making the release version of Windows look like a debug version. Just because bad programmers don&#8217;t use debugging tools, end users would suffer from performances of debugging tools.</p>
<p>@M1EK: So, are you telling us that the average programmer doesn&#8217;t read the manual but disassemble the Windows code? I cannot believe that!</p>
<p>I would rather expect the bad programmer not to care about resource leaks as far as the memory leaks don&#8217;t make his program crash in an &quot;out of memory&quot; condition afer 10 minutes, which is not likely to happen with little-used resources such as environment blocks and kernel handles.</p>
<p>&quot;what would you have done at the time you created your first win32 window?&quot;</p>
<p>I remember very well. I carefully read the SDK documentation and took an extremely defensive approach everywhere I wasn&#8217;t sure&#8230; Of course, as I usually do, I freed resources in the reverse order of their allocation. Later, as I better knew the documentation, I relaxed my programming technique.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-671183">
				<div id="div-comment-671183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">fdiv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-671183">
			September 29, 2008 at 8:20 am</a>		</div>

		<p>I never disassemble the Windows code to see what an API does and not just because the EULA forbids it. Most of the time either Raymond explains it, or I look at what Wine does and that often explains things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-671293">
				<div id="div-comment-671293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Craighead</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-671293">
			September 29, 2008 at 3:29 pm</a>		</div>

		<p>If we really want to criticize the API design in any detail, I would also point out that getting the entire environment block is very rarely what you want. &nbsp;Nor is the format of the environment block very application-friendly to parse, and there are plenty of opportunities for bugs there, too (can you say case sensitivity problems?).</p>
<p>I would rather keep the format and order of the environment block hidden (so you&#8217;re free to change it &#8212; what if you wanted to change it to a hash table or binary tree to increase performance?), and only provide getenv/setenv APIs. &nbsp;There is then the question of providing an environment block at process creation, but there, I expect you generally either want to (A) inherit everything or (B) build a new environment from scratch, selectively inheriting using getenv() if necessary.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-671313">
				<div id="div-comment-671313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mdahmus.monkeysystems.com/blog/' rel='external nofollow' class='url'>M1EK</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-671313">
			September 29, 2008 at 4:21 pm</a>		</div>

		<p>Ding ding ding for Matt Craighead&#8217;s answer.</p>
<p>Also, you don&#8217;t need a time machine to identify that more than one party was to blame here. That doesn&#8217;t change the solution now, but it does help us possibly avoid future problems of this type.</p>
<p>A programming API that requires that every programmer have read every single line of the manual to avoid dying in flames is not a good API. There was a time I felt differently, of course. I got better.</p>
<div class=post>[<i>You didn&#8217;t have to read every single line of the manual. The information was right there in the documentation for GetEnvironmentStrings: &#8220;When the block returned by GetEnvironmentStrings is no longer needed, it should be freed by calling the FreeEnvironmentStrings function.&#8221; And besides, when you call a function that returns some sort of resource, don&#8217;t you naturally want to know &#8220;What do I do when I&#8217;m done with it?&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-671343">
				<div id="div-comment-671343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-671343">
			September 29, 2008 at 10:17 pm</a>		</div>

		<p>You don&#8217;t need to read every line of the manual in this case.</p>
<p>You have a function that returns a pointer (and a non-const one, no less). &nbsp;People with common sense should ask, &quot;who owns the pointee, and if it&#8217;s the caller&#8217;s responsibility to free it, how does the caller do so?&quot;. &nbsp;You don&#8217;t even need to look at the manual first to know to ask these questions; they&#8217;re implied by the function signature.</p>
<p>A quick scan through the documentation should answer those questions.</p>
<p>But sadly, I admit that common sense is not nearly as common as it ought to be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-672063">
				<div id="div-comment-672063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080925-00/?p=20763#comment-672063">
			October 1, 2008 at 3:13 pm</a>		</div>

		<p>Windows APIs has a lot of magic, can&#8217;t be sure about anything.</p>
<p>C functions which returns buffers are always tricky, easy to get it wrong both when implementing the api code and the application code.</p>
<p>&quot;const&quot; keyword doesn&#8217;t compile to anything, and isn&#8217;t enforced when executing.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>