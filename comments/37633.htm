<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-215343">
				<div id="div-comment-215343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041007-00/?p=37633#comment-215343">
			October 7, 2004 at 9:42 am</a>		</div>

		<hr />
<p>Since a C++ constructor cannot fail, there are various conventions for how one handles failure during construction. One convention, which I use here, is to put the bulk of the work in an Initialize method, which can return an appropriate error code if the initialization fails.<br />
<br />&#8212;&#8212;&#8212;</p>
<p>Actually, the way you fail a C++ ctor is to throw an exception.  It will unwind the stack properly and will destroy appropriate obects if you throw in the middle of a ctor initialization.</p>
<p>By putting your work in Initialize methods, you run the risk of not having fully formed objects, so that if an exception happens in between your ctor and initialize, your dtor could crash, causing all sorts of badness.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215353">
				<div id="div-comment-215353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041007-00/?p=37633#comment-215353">
			October 7, 2004 at 10:07 am</a>		</div>

		<p>I&#8217;ll read the full post during my lunch break, but after a quick skim I&#8217;m confused by your CCompositeContextMenu::QueryInterface. If you do these steps:<br />
<br />  IUnknown* punk;<br />
<br />  punk = static_cast&lt;IContextMenu*&gt;(this);<br />
<br />  *ppv = punk;<br />
<br />Won&#8217;t the first assignment counteract the cast, since by C++ rules the rvalue gets converted to an IUnknown*? ((IContextMenu*)this) is going to be a different value than ((IUnknown*)this), so wouldn&#8217;t *ppv end up pointing at the wrong place in the vtbl?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215363">
				<div id="div-comment-215363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041007-00/?p=37633#comment-215363">
			October 7, 2004 at 10:50 am</a>		</div>

		<p>It&#8217;s great to use a throwing model if your entire program follows it, but COM does not allow exceptions to be thrown across the COM boundary.</p>
<p>Mike: I discussed this yesterday in a comment.</p>
<p><a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/10/06/238630.aspx#239019" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/10/06/238630.aspx#239019</a></p>
<p>The double-cast works due to the rules for COM object layout.  COM requires that</p>
<p>(void*)(IBaseInterface*)(IDerivedInterface*)p == (void*)(IDerivedInterface*)p</p>
<p>In other words, the implicit cast to IUnknown is required by COM rules not to change the numeric value of p.</p>
<p>Most C++ compilers for Windows will conform to COM object layout rules if you set the right compiler flags or use the right macros.</p>
<p><a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/10/05/238050.aspx" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/10/05/238050.aspx</a><br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-239113">
				<div id="div-comment-239113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2005/01/04/346274.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041007-00/?p=37633#comment-239113">
			January 4, 2005 at 10:00 am</a>		</div>

		<p>Building a new enumerator by combining existing ones.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-357853">
				<div id="div-comment-357853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ailight.jp/blog/sha256/archive/2006/03/23/11241.aspx' rel='external nofollow' class='url'>社本＠ワック Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041007-00/?p=37633#comment-357853">
			March 22, 2006 at 1:33 pm</a>		</div>

		<p>IContextMenu のホスト方法 &#8211; Shell</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-401273">
				<div id="div-comment-401273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://notgartner.com/posts/744.aspx' rel='external nofollow' class='url'>Community Blogs</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041007-00/?p=37633#comment-401273">
			July 16, 2006 at 11:16 am</a>		</div>

		<p>I&#8217;ve been following in awe the series of posts (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) by Raymond Chen about</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>