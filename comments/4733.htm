<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1049003">
				<div id="div-comment-1049003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130408-00/?p=4733#comment-1049003">
			April 8, 2013 at 7:28 am</a>		</div>

		<p>Huh, didn&#39;t realize this stuff existed. &nbsp;I assumed .NET apps were entirely locked into their own little world unless you used P/Invoke.</p>
<p>I guess programs like AutoIt wrap the native version of this API&#8230; it looks sort of similar to what they do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1049063">
				<div id="div-comment-1049063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130408-00/?p=4733#comment-1049063">
			April 8, 2013 at 10:59 am</a>		</div>

		<p>(Sorry if this is double post, I didn&#39;t get a confirm from the blog software)</p>
<p>We use this heavily in our &quot;Automation Framework&quot; and wrap it in a driver that allows us to easily create mappings and generate tests. Think Microsoft&#39;s Test Professional, but the editing of Automated Tests being much easier without the pain of re-recording everything. UI Automation was a huge boon for us, especially because its one of the few ways to programatically interact with Windows Presentation Foundation interfaces. This saved countless man hours of work, and in addition was included!</p>
<p>The only thing I&#39;d include in Raymond&#39;s blog is the suggestion to use the &quot;Inspect&quot; tool included in the SDK which based on my understanding is what they intend you to use, its almost like a UI Spy, but specifically for UIAutomation (and MSAA to an extent). It does a really nice job of showing you the &quot;Tree&quot; it sees along with just about any other piece of information you&#39;d most likely need for writing UIAutomation &quot;Clients&quot;.</p>
<p>For all of its pros there are some cons, for one I couldn&#39;t for the life of me find a book on it, and at the time the MSDN documentation was a little scarce (but I&#39;ve noticed that it has improved in recent years). We had some experience coming in dealing with automating programs which use the windows &#39;Common Controls&#39; which was a big help. We also had access to the code which we were automating so were able to add AutomationId&#39;s to our projects which is a big help.</p>
<p>Third Party support seems a little spotty, but it is getting better (I won&#39;t mention names as per the blog rules) with some of the more well known control makers out there. All of the &quot;stock&quot; controls have great support already which is a testament to the team responsible for WPF. I do wish there was more documentation (I know wrong blog) on how to implement custom AutomationPeers, our product has a few places where we&#39;ve had to create custom controls internally and it&#39;d be nice to actually extend a custom AutomationPeer instead of the FrameworkAutomationPeer default (although I appreciate that its there, for 95% of what we do its good enough because it enables you to slap on the AutomationId and get a simple Click and BoundingRectangle).</p>
<p>The last thing I&#39;d mention (and yes again I know not the right blog, I&#39;d like to get in contact with the author(s) and buy him/her a case of beer) is that I&#39;d like to see how you add AutomationId&#39;s to WinForms and MFC type applications. The MSDN Documentation seems to be very WPF-centric which makes sense as It seems the push for this was during the introduction of that technology. For those wondering, in a lot of cases when the Framework can&#39;t find a good AutomationId for these windowing libraries it falls back to using the Window Handle, which of course is not reliable.</p>
<p>As always great blog Raymond, sorry for the length of the comment, but I&#39;m super passionate about this stuff and I LOVE when your blog mentions this type of stuff! Brightens my day right up.</p>
<div class="post">[<em>Thanks for the comment. It saddens me that UI Automation (and accessibility in general) don&#39;t get the visibility they deserve. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1049103">
				<div id="div-comment-1049103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130408-00/?p=4733#comment-1049103">
			April 8, 2013 at 2:18 pm</a>		</div>

		<p>UI spy is dead (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms727247.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms727247.aspx</a>), and we can&#39;t find it anymore, but Inspect (make sure you get the last version that has the tree view) is better anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1049133">
				<div id="div-comment-1049133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marco</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130408-00/?p=4733#comment-1049133">
			April 9, 2013 at 5:20 am</a>		</div>

		<p>John, you can use Dynamic Annotation API to set automation ids (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd318060.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/dd318060.aspx</a>).</p>
<p>Check also Michael Bernstein&#39;s blog post &quot;Using Dynamic Annotation with Child IDs&quot; (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/winuiautomation/archive/2012/04/25/using-dynamic-annotation-with-child-ids.aspx" rel="nofollow">blogs.msdn.com/&#8230;/using-dynamic-annotation-with-child-ids.aspx</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1049383">
				<div id="div-comment-1049383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130408-00/?p=4733#comment-1049383">
			April 10, 2013 at 8:58 am</a>		</div>

		<p>I tried out Inspect, and left it running minimized for a few days. I must say that it caused several applications to exhibit really strange behavior. It must trigger something that causes programs to think some accessibility mode has been activated.</p>
<p>It&#39;s a shame, because it&#39;s a really neat tool that is the kind of thing that&#39;s useful to have running.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050083">
				<div id="div-comment-1050083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alasdair</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130408-00/?p=4733#comment-1050083">
			April 15, 2013 at 4:26 am</a>		</div>

		<p>&gt; It must trigger something that causes programs to think some accessibility mode has been activated.</p>
<p>Inspect looks like it sets SPI_SETSCREENREADER, which indicates to Windows and other applications that a screenreader is running and (if necessary) they should make themselves more accessible &#8211; possibly even turning on and off UIA (or MSAA) support.</p>
<p>A good example is the View tab in Folder Options in Windows Explorer. Run Inspect, open it up, and you&#39;ll see that the checkboxes on that tab now have ON and OFF appended to their labels so that screenreader users can tell if they are checked &#8211; clearly the checkboxes don&#39;t report that through UIA or MSAA correctly, and there was some reason why they couldn&#39;t be made to do so.</p>
<p>INFO: How Clients and Servers Should Use SPI_SETSCREENREADER and SPI_GETSCREENREADER</p>
<p><a href="http://support.microsoft.com/kb/180958" target="_new" rel="nofollow">support.microsoft.com/&#8230;/180958</a></p>
<div class="post">[<em>Those checkboxes were written before MSAA Annotation was invented, so they had to show the ON/OFF state some other way. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>