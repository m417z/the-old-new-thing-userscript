<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1294125">
				<div id="div-comment-1294125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294125">
			April 26, 2017 at 7:12 am</a>		</div>

		<p>I remember serial ports all too well. The GPS on some laptop can only be accessed through a (virtual) serial port.</p>
<p>It&#8217;s also an USB device listed as a network card.</p>
<p>Why so compicated ?!</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mzzt odd alt depth-2" id="comment-1294186">
				<div id="div-comment-1294186" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294186">
			April 26, 2017 at 9:57 am</a>		</div>

		<p>Well if you&#8217;re making a device to talk over a wire serial is a lot simpler to code than a full networking stack, I imagine. It depends on how lightweight the device is going to be and whether you can stuff Linux or some other OS on it to abstract those problems away, I would assume.</p>
<p>Having the USB interface impersonate a generic device means you don&#8217;t have to write your own drivers, and it will work out of the bov everywhere.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1294245">
				<div id="div-comment-1294245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294245">
			April 26, 2017 at 12:37 pm</a>		</div>

		<p>See the comment below about NMEA-0183. If your GPS receiver already needs to speak that protocol, which it pretty much does if you plan to sell it in certain markets, then it&#8217;s just plain cheaper/easier to layer some other protocol on top of that one.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1294145">
				<div id="div-comment-1294145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294145">
			April 26, 2017 at 8:37 am</a>		</div>

		<p>Serial ports are never far from my mind.  One of the products that I support transfers data from small lab instruments &#8211; balances, pH meters, titrators, and the like &#8211; to PCs.  The most common port for these instruments is still RS232c with a DB9 socket.  Nowadays, many instruments come with an array of modern ports, but you&#8217;ll still see a DB9 socket in the mix.  We use a serial-to-ethernet converter to hook these instruments up to the network, which simplifies things on the PC side, but we still have to work with the messy details of serial ports.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-bboorman even depth-2 parent" id="comment-1294286">
				<div id="div-comment-1294286" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294286">
			April 26, 2017 at 2:37 pm</a>		</div>

		<p>Pet peeve &#8211; there is no such thing as a DB-9 connector. D stands for D-shell (because of the shape), and the second character is the shell size. B is the shell size for a 25-pin connector (ala printer parallel port). </p>
<p>The correct nomenclature is DE-9. E size shell is for the standard density 9 pin connector, or the 15 pin high density connector.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1294375">
				<div id="div-comment-1294375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294375">
			April 27, 2017 at 10:08 am</a>		</div>

		<p>Off to the nitpickers corner with you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1294445">
				<div id="div-comment-1294445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://bhtooefr.org' rel='external nofollow' class='url'>bhtooefr</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294445">
			April 28, 2017 at 6:03 am</a>		</div>

		<p>Of course, then you&#8217;ve got the 19-pin 2-row standard-density appropriately-sized-shell connectors that Apple used for floppy drives, and Atari used for ACSI (their SASI/SCSI-adjacent protocol), which isn&#8217;t a standard D-sub size at all.</p>
<p>A lot of people just call that DB-19, even though it&#8217;s not in a B-size shell &#8211; it&#8217;s smaller. But, it&#8217;s not DA-19 either &#8211; that only has room for 15 pins. I usually go for &#8220;19-pin D-subminiature&#8221; and don&#8217;t specify the shell size&#8230;</p>
<p>Of course, this is getting <i>really</i> tangential to the article&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hikari odd alt thread-even depth-1" id="comment-1294155">
				<div id="div-comment-1294155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Chris+Crowther' rel='external nofollow' class='url'>Chris Crowther</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294155">
			April 26, 2017 at 9:08 am</a>		</div>

		<p>We still have to deal with them a lot.  NMEA 0183 talkers still inherently use them (though they&#8217;re generally RS422, rather than RS232).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jeremytais even thread-odd thread-alt depth-1 parent" id="comment-1294165">
				<div id="div-comment-1294165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294165">
			April 26, 2017 at 9:43 am</a>		</div>

		<p>I can attest the the Jitter bit, they really are fairly forgiving.  When I was an intern, I used VB6 to talk to a device over the serial port.  The device used a baud of 57600 but VB6&#8217;s serial port used an enum (presumably modeled after the COMMPROP structure) that only offered 56k.  </p>
<p>The code worked for years without any apparent problems.  I eventually brought it up with one of the EEs who said that usually you got at least 5% jitter before errors started to creep in.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1294526">
				<div id="div-comment-1294526" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294526">
			April 29, 2017 at 7:01 am</a>		</div>

		<p>In an asynchronous serial protocol like RS-232, every transition between 0 and 1 allows the receiver to resynchronise its receiving bit clock. RS-232 specifies a stop and start bit between each byte (up to 8 bits) of user data, allowing resynchronisation every 10 bit times at worst. If the receiver samples the value in the middle of each bit time, that gives you 5% margin.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1294175">
				<div id="div-comment-1294175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294175">
			April 26, 2017 at 9:47 am</a>		</div>

		<p>Why would you divide 115200 by 1048 = 2^3 * 131?  Was a confusion of 1024 and 2048? Wouldn&#8217;t it make more sense to divide 115200 / 1024 = 112.5?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1294235">
				<div id="div-comment-1294235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294235">
			April 26, 2017 at 12:30 pm</a>		</div>

		<p>Probably because 1048 is the divisor that gives you a value close to 110. 110 baud as a standard predates the 8250 by quite a few years.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even depth-2" id="comment-1294295">
				<div id="div-comment-1294295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294295">
			April 26, 2017 at 2:41 pm</a>		</div>

		<p>That, and this isn&#8217;t C code doing the counting. It&#8217;s generally implemented as a counter that loads the value from a register, and counts down to 0. At 0, a timing pulse is sent to the enable of the shift register to clock the bit in.</p>
<p>And I&#8217;ll correct Raymond a bit &#8211; it wasn&#8217;t that the 8250 only supported those rates &#8211; the divisor value was completely programmable. Those were just the common baud rates everyone used, and the driver enumerated those and programmed the appropriate values into the chip registers.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mzzt odd alt thread-odd thread-alt depth-1 parent" id="comment-1294185">
				<div id="div-comment-1294185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294185">
			April 26, 2017 at 9:55 am</a>		</div>

		<p>Alright, I have a question. Why are constants so heavily favored in the Windows API for such things? Wouldn&#8217;t it make more sense to use an enumeration? Especially with modern tools it makes more sense since you get Intellisense or similar functionality, and the compiler will detect when you make mistakes like this. I would imagine there must be some downside if the Windows team went the constants route.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-jeremytais even depth-2 parent" id="comment-1294196">
				<div id="div-comment-1294196" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294196">
			April 26, 2017 at 9:59 am</a>		</div>

		<p>I think that Raymond answered that one way way back (like in the first year of this blog).  I cannot find the post now, but IIRC, it went something along the lines that originally Windows headers had to work with both Pascal and C (or maybe just Pascal) and #defines were the lowest common denominator.  There might also have been something along the lines of not all C compilers supported enums back in the mid eighties or at least there was no standard way for enums to work back then.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1294215">
				<div id="div-comment-1294215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294215">
			April 26, 2017 at 11:26 am</a>		</div>

		<p>&#8220;originally Windows headers had to work with both Pascal and C (or maybe just Pascal) and #defines were the lowest common denominator.&#8221;</p>
<p>Pascal doesn&#8217;t have &#8220;#define macros, as far as I know.  Older versions of the Windows API were defined using the &#8216;__pascal&#8217; calling convention (<a href="https://en.wikipedia.org/wiki/X86_calling_conventions#pascal" rel="nofollow">https://en.wikipedia.org/wiki/X86_calling_conventions#pascal</a>), but that&#8217;s no longer true.</p>
<p>&#8220;There might also have been something along the lines of not all C compilers supported enums back in the mid eighties or at least there was no standard way for enums to work back then.&#8221;<br />
I used the Lattice C compiler starting in 1983, and enums were supported, as far as I can recall. Enums are just integral constants, so I&#8217;d be hard-pressed to understand how they would work any way that would not be compatible with a, um, non-standard way&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1294265">
				<div id="div-comment-1294265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294265">
			April 26, 2017 at 12:49 pm</a>		</div>

		<p>Enums used to be chars.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1294275">
				<div id="div-comment-1294275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294275">
			April 26, 2017 at 1:16 pm</a>		</div>

		<p>Enumerations are signed integers, which makes them not so great for bitfields: without casting, you likely will get compiler complaints (and you have to look out for sign extension!)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-3 parent" id="comment-1294255">
				<div id="div-comment-1294255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294255">
			April 26, 2017 at 12:48 pm</a>		</div>

		<p>I think &#8220;not all C compilers supported enums&#8221; might be the right answer. K&amp;R 1st edition mentions #define, but not enum, so it likely wasn&#8217;t a viable option until ANSI C was widely available.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1294305">
				<div id="div-comment-1294305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294305">
			April 26, 2017 at 6:07 pm</a>		</div>

		<p>I&#8217;m pretty sure the main reason for using #define instead of enums is that C programmers back in the day simply were more accustomed to using #define for manifest constants.  It still seems to be preferred by many. Maybe because if you want to give a string literal a zero-overhead name #define is the simplest way to go even today, so why not do the same thing for numbers?</p>
<p>Another reason (though I think this probably happened more after-the-fact than by plan) is that you can preprocess #defines for use in assembly code pretty easily and the same is not true for enums.  Remember that MS-DOS was 100% (or pretty close to 100%) assembly language, and I wouldn&#8217;t be surprised if a decent chunk of 16-bit Windows was too.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1294225">
				<div id="div-comment-1294225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre Bisaillon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294225">
			April 26, 2017 at 12:11 pm</a>		</div>

		<p>The main reason is that enum had no defined storage size defined; you can&#8217;t say if it will be 1 byte/2 bytes/4 bytes which can be a huge problem when defining a fixed interface for methods.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1294335">
				<div id="div-comment-1294335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294335">
			April 27, 2017 at 3:55 am</a>		</div>

		<p>I&#8217;ve always needed a convenient constant to represent 5 minutes&#8230; Now I can use CBR_300!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1294355">
				<div id="div-comment-1294355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294355">
			April 27, 2017 at 7:39 am</a>		</div>

		<blockquote><p>That&#8217;s where the COMMPROP structure came in: It reports baud rates as a bitmask that is filled out by  the Get­Comm­Properties function. That way, the program that wants to do serial communications can find out what baud rates are supported by the current hardware. And since it&#8217;s reporting a set of values, a bitmask seems the natural way of representing it.</p></blockquote>
<p>Wait, it reports a <strong>set</strong> of values, as a bitmask, in a field called dwMaxBaud?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle odd alt depth-2" id="comment-1294415">
				<div id="div-comment-1294415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170426-00/?p=96045#comment-1294415">
			April 27, 2017 at 1:42 pm</a>		</div>

		<p>I&#8217;m pretty sure proper API design is an NP-Hard problem in the real world.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>