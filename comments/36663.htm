<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-246763">
				<div id="div-comment-246763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Foolhardy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-246763">
			January 19, 2005 at 7:59 am</a>		</div>

		<p>Besides, at what point would the process be considered &quot;started&quot;?<br />
<br />When the kernel object is created? (like it is now)<br />
<br />When the first thread is created?<br />
<br />When all the libraries have been loaded?<br />
<br />When they&#8217;ve been initialized?<br />
<br />When the process begins to listen for messages? &#8211;this won&#8217;t work if the process doesn&#8217;t create any windows.<br />
<br />Since there isn&#8217;t a defined point for a process being &quot;started&quot;, CreateProcess can&#8217;t very well wait for it to happen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-246773">
				<div id="div-comment-246773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stuart Dootson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-246773">
			January 19, 2005 at 8:30 am</a>		</div>

		<p>Best you can do (if you can&#8217;t code in an explicit synchronisation) is to use WaitForInputIdle, always assuming that your child process meets the requirements needed for WaitForInputIdle to indicate the process is up and running! In fact, if you think about it, the only signal you can guarantee getting about a process is that it&#8217;s terminated, if you wait on it&#8217;s handle. Don&#8217;t think that really counts as &#8216;the process has started&#8217; :-).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-246793">
				<div id="div-comment-246793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/' rel='external nofollow' class='url'>Michael Kaplan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-246793">
			January 19, 2005 at 8:57 am</a>		</div>

		<p>Perhaps a Monty Python-esque &quot;The process is not quite dead, yet?&quot; is all we can hope for, since there really is no other metric&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-246813">
				<div id="div-comment-246813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.reactos.org' rel='external nofollow' class='url'>Steven Edwards</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-246813">
			January 19, 2005 at 9:09 am</a>		</div>

		<p>I do builds of Win32 software using gcc on Linux and Windows using mingw and my mingw cross-compiler on the same box is almost twice as fast under Linux. Does windows do more magic with process accounting or is there overhead from the VM and Cache Manager?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-246873">
				<div id="div-comment-246873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-246873">
			January 19, 2005 at 10:05 am</a>		</div>

		<p>Re: why is it slow:</p>
<p>Because Windows processes, like VMS processes before them and RSX processes before them are large complex security containers.</p>
<p>This topic gets plenty of attention internally and over time you should see the cost of NT processes approach other OSs&#8217; costs.</p>
<p>The typical debate here centers around use of fork() for multithreaded applications.  You can imagine what it looks like: side #1: fork is easy and you get cheap parallelism out of it side #2: fork is expensive and most of the time you fork and then exec anyways.</p>
<p>Maybe the old timer NT guys have another perspective but it would seem to be the same debate as back at Digital when VMS&#8217;s process creation was slammed in comparison to fork().</p>
<p>The key things that might shift the balance here about which tradeoff is better are (a) 64 bit machines with plenty of kernel mode address space and (b) the move away from running extensibility points in-process due to reliability and security concerns.</p>
<p>Honest answer to the simple question: it&#8217;s the usual story.  The perf team gets the badness that was added to the create process code path in version n cleaned up in version n+1 but then so many people want to do interesting things at process creation time, someone often uses up the headroom gained.  (My team unfortunately did this in XP; the kernel team did a lot of good work to speed up process creation and then we added manifest processing without caching and basically it ended up a wash.  This one in particular is getting fixed in LH but I&#8217;m sure there&#8217;s several new teams planning to add all kinds of cool stuff to the process creation/initialization path.)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-246883">
				<div id="div-comment-246883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Weiss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-246883">
			January 19, 2005 at 10:30 am</a>		</div>

		<p>I bet we&#8217;ve all seen code that works around this like so:</p>
<p>CreateProcess(&#8230;);<br />
<br />Sleep(5000); // wait for sub-process to start</p>
<p>Great, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-246953">
				<div id="div-comment-246953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Confused</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-246953">
			January 19, 2005 at 12:34 pm</a>		</div>

		<p>Raymond&#8217;s post sounds contradicting. Does CreateProcess wait for the subprocess to load it&#8217;s dlls or not?</p>
<p>If not (&quot;it doesn&#8217;t wait for the process&quot;), how could CreateProcess return STATUS_ENTRYPOINT_NOT_FOUND?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-246973">
				<div id="div-comment-246973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-246973">
			January 19, 2005 at 12:37 pm</a>		</div>

		<p>Please read again: &quot;The exit code is the reason why the process couldn&#8217;t get started.&quot;</p>
<p>The exit code of the process, not the return value of CreateProcess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-246993">
				<div id="div-comment-246993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-246993">
			January 19, 2005 at 1:18 pm</a>		</div>

		<p>CreateProcess is another function that causes long-term heartache by doing a favor for sloppy people. I just love the way it parses an ambiguous application name that includes spaces. It also uses the current directory and appends .exe for you if you forgot. That can cause trouble too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-247003">
				<div id="div-comment-247003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-247003">
			January 19, 2005 at 3:06 pm</a>		</div>

		<p>Whe windows starts kernel services (for example when a driver is loaded), is the service started with CreateProcess? If yes, as DriverEntry can return immediatly, how does the process stay loaded?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-247063">
				<div id="div-comment-247063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-247063">
			January 19, 2005 at 4:38 pm</a>		</div>

		<p>CreateProcess is a user-mode win32-specific function.  Driver entry points are called by (I assume) the kernel initialization thread (for boot-start drivers), and the entry points are called directly.  Drivers in kernel mode are analogous to user-mode DLLs.  DriverEntry behaves similarly to DllMain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-247073">
				<div id="div-comment-247073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-247073">
			January 19, 2005 at 5:39 pm</a>		</div>

		<p>The obvious question is why it wasnt designed so that CreateProcess returns only after the operating system has loaded the process and is going to call the process entry point (specified in the PE header).<br />
<br />That makes sense to me (although to someone more versed in the internals of win32, it probobly doesnt)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-247083">
				<div id="div-comment-247083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-247083">
			January 19, 2005 at 5:43 pm</a>		</div>

		<p>DLL initialization occurs before the process entry point is called. If a DLL hangs in its initialization function, do you want CreateProcess to hang also?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-247133">
				<div id="div-comment-247133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric TF Bat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-247133">
			January 20, 2005 at 4:16 am</a>		</div>

		<p>Dave&#8217;s right &#8211; if Raymond&#8217;s experiences are anything to go on, MSFT systems programmers spend an awful lot of their time working around the sloppiness of non-MSFT applications programmers.  I hereby coin a new term to describe the reason they have to put so much rubbish into their libraries, in an attempt to help the users who are stuck with poorly-written software that relies on bugs and coincidences: I call it slopward compatibility.  Now, next time you curse the bizareness of Windows libraries, you know what to call it, and who REALLY deserves the blame.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-247183">
				<div id="div-comment-247183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-247183">
			January 20, 2005 at 7:27 am</a>		</div>

		<p>&quot;&#8230;who REALLY deserves the blame.&quot;</p>
<p>I wasn&#8217;t trying to place blame as much as express frustration with the process. There is no &quot;right&quot; solution. Some programmer made one or more mistakes that weren&#8217;t caught before their program sold thousands of copies. Then Microsoft makes a change in the OS that reveals the mistake. MS can either work around the problem or let them suffer. Unfortunately, &quot;them&quot; isn&#8217;t just the poor developers that overlooked a bug, but thousands of their innocent customers. </p>
<p>But back to blame. When someone upgrades their version of Windows and an app breaks, who do users blame in most cases whether they deserve it or not? (Nine letters, starts with M.) Yes, workarounds make the APIs more complicated for developers. If you want to minimize total worldwide units of Microsoft blame, though, it is more economical to annoy developers instead of users.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-249113">
				<div id="div-comment-249113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CreateProcess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050119-00/?p=36663#comment-249113">
			January 25, 2005 at 9:15 am</a>		</div>

		<p>What would cause the hThread, dwProcessID and dwThreadID in lpProcessInformation to be unitialized after calling CreateProcess()?  I have seen this but the documentation implies that these values will always be &quot;returned&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>