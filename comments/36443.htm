<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (41)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-255653">
				<div id="div-comment-255653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255653">
			February 15, 2005 at 7:19 am</a>		</div>

		<p>&quot;Since you&#8217;re going to have to write fallback code anyway&#8230;&quot;</p>
<p>My my, such a fancy name for the ASSERT macro! :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255673">
				<div id="div-comment-255673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.zero-one-zero.com/' rel='external nofollow' class='url'>Jonathan Payne</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255673">
			February 15, 2005 at 7:48 am</a>		</div>

		<p>Couldn&#8217;t something similar be achieved by creating a non-rebasable DLL and forcing it to be loaded into every process (I think there is some hook to make every process load a DLL but I could be mistaken)?  I thought GDI did something along these lines to store the GDI handle table at the same address in each Win32 process.  I am not suggesting this is a good idea but it might achieve something similar to globally reserving some memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255683">
				<div id="div-comment-255683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kbiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255683">
			February 15, 2005 at 7:48 am</a>		</div>

		<p>&quot; Occasionally, somebody asks for a way to reserve user-mode address space globally.&quot;</p>
<p>One might as well ask why we can&#8217;t go back to the good old days of the Win16 memory model.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255693">
				<div id="div-comment-255693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255693">
			February 15, 2005 at 7:55 am</a>		</div>

		<p>This is actually possible on 9x, no? IIRC addresses used by memory-mapped files are always in the upper 2GB of the process space, which is shared among all processes. So you can map a block of memory once and pass the address to your child processes.<br />
<br />Of course, no one&#8217;s really supposed to know this or rely on it, but that never stopped lazy programmers before.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255703">
				<div id="div-comment-255703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Moi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255703">
			February 15, 2005 at 8:00 am</a>		</div>

		<p>Raymond &#8211; &quot;Here were&#8217;s&quot; doesn&#8217;t make sense. I guess you meant &quot;Here we&#8217;re&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255713">
				<div id="div-comment-255713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rnk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255713">
			February 15, 2005 at 8:15 am</a>		</div>

		<p>IIRC, OS/2 shared memory was mapped to the same addresses in all processes. Made writing marshalling code trivial compared to NT. Of course, OS/2 limited processes to 512MB so there was plenty of address space to go around. </p>
<p>Who would even need more than 512MB?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255723">
				<div id="div-comment-255723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lowercase josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255723">
			February 15, 2005 at 8:24 am</a>		</div>

		<p>Do not use asserts for things like this that you can legitimately expect to happen during normal operation.  If your program crashes because of a perfectly valid system state, it is buggy.  That&#8217;s what an assert would do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255743">
				<div id="div-comment-255743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255743">
			February 15, 2005 at 8:34 am</a>		</div>

		<p>If the system is out of ram, it&#8217;s of little help to write fallback code.</p>
<p>A program isn&#8217;t buggy if the developer chooses it to require an amount of availabale ram.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255753">
				<div id="div-comment-255753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255753">
			February 15, 2005 at 8:35 am</a>		</div>

		<p>If the system is out of ram, it&#8217;s of little help to write fallback code.</p>
<p>A program isn&#8217;t buggy if the developer chooses it to require an amount of availabale ram.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255763">
				<div id="div-comment-255763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mikedimmick.blogspot.com/' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255763">
			February 15, 2005 at 8:42 am</a>		</div>

		<p>I concur with josh. An ASSERT is for situations where you&#8217;re self-checking data structures for consistency. If an ASSERT fires, it means you violated some fundamental assumptions, and you can&#8217;t afford the cost of checking in the release build.</p>
<p>Error handling is for every day &#8211; ASSERTs are for special occasions. I often add an ASSERT to a case with error handling. Why? Because I want the debug build to tell me I messed up. But I want the release build to not crash.</p>
<p>A lot of my case statements have ASSERT(FALSE) in the &#8216;default&#8217; block. It catches situations where I think I&#8217;ve handled every possibility already &#8211; if I haven&#8217;t, the debug build tells me about it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255773">
				<div id="div-comment-255773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255773">
			February 15, 2005 at 8:58 am</a>		</div>

		<p>As Mike pointed out, Asserts dont show up in release builds, so unless you release debug builds, you will basically have no error checking for this GlobalAlloc hack.</p>
<p>&gt; IIRC, OS/2 shared memory was mapped to the same addresses in all processes. Made writing marshalling code trivial compared to NT. Of course, OS/2 limited processes to 512MB so there was plenty of address space to go around.</p>
<p>Also makes your code hard to port from OS2, especially if you were lazy and didn&#8217;t isolate (or even use) marshalling.</p>
<p>&gt;Who would even need more than 512MB? </p>
<p>Yeah, I think we&#8217;ve all heard that one before. My video card has more ram than my system did 5 years ago.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255783">
				<div id="div-comment-255783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255783">
			February 15, 2005 at 8:59 am</a>		</div>

		<p>As Mike pointed out, Asserts dont show up in release builds, so unless you release debug builds, you will basically have no error checking for this GlobalAlloc hack.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255793">
				<div id="div-comment-255793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255793">
			February 15, 2005 at 9:01 am</a>		</div>

		<p>Geez, no sense of humor around here. I agree that assert should be for debugging logic errors. But I do have to wonder what &quot;fallback code&quot; would do in the case where no address space is left, other than clean up and bail out of the operation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255803">
				<div id="div-comment-255803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Memet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255803">
			February 15, 2005 at 9:05 am</a>		</div>

		<p>Concurring with Mike and josh, I think ASSERTS are for checking invariants. OOM situations are clearly not invariants.<br />
<br /> (thanks for listening to me beat the dead assertion horse a little further)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255813">
				<div id="div-comment-255813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.valhallalegends.com/skywing' rel='external nofollow' class='url'>Skywing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255813">
			February 15, 2005 at 9:17 am</a>		</div>

		<p>If you use the SEC_BASED flag with a section object (file mapping object in Win32 terms), then the section will always map at the same base address in every process that you try to map it in.</p>
<p>Of course, it will fail to map if that address is already in use.</p>
<p>In fact, CSRSS (the Win32 subsystem), WinSrv.dll, user32.dll, and Win32k.sys all require that certain shared memory regions be mapped at the same place in every process.</p>
<p>Actually, the kernel itself requires that NTDLL be mapped at the same spot in every process as well.</p>
<p>The reason these things can get away with such is they typically have a chance to set up their static allocations before any &quot;end-user&quot; code would have a chance to touch a new process&#8217;s address space.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255823">
				<div id="div-comment-255823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lowercase josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255823">
			February 15, 2005 at 9:24 am</a>		</div>

		<p>Eh, this isn&#8217;t a case where there is no address space left, nor is the system out of RAM.  This would be a case where there&#8217;s no address space left IN A DIFFERENT PROCESS.  It could be normal operating behavior for the other process to use its entire address space.</p>
<p>Anyway, it&#8217;s very rare indeed that resources are so tight that you can&#8217;t even notify the user before dying.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255833">
				<div id="div-comment-255833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255833">
			February 15, 2005 at 9:33 am</a>		</div>

		<p>Fyi, there&#8217;s only a tiny bit of magic associated with how ntdll gets the same address in every process.  The other ones have no magic; they have a preferred load address and they just fail if they have to get relocated.</p>
<p>Ntdll&#8217;s magic is that the kernel opens it during the boot initialization sequence and it&#8217;s automatically mapped, at the same VA, in every process that&#8217;s created.  Nothing really special; the kernel needs well known addresses to jump to in user mode to do things like initialize the process and start threads.</p>
<p>User32&#8217;s magic is very similar.  The kernel mode part of user32 needs to call back into user mode, and rather than having a per-process address to jump to (I&#8217;m pretty sure it&#8217;s about message dispatch&#8230;), there&#8217;s a single storage location in kernel mode for the trampolines.  I&#8217;m not sure if it&#8217;s the right trade off but there you go.</p>
<p>kernel32 is interesting because the start address for a process that&#8217;s created using the kernel32!CreateProcess* family of APIs is a function inside kernel32 (createremotethread also has this issue).  We experimented with using a dynamic registration mechanism that jumped through ntdll to find the initialization entry point in kernel32 but it introduced new modes of failure and it wasn&#8217;t clear why it would be of much real benefit.</p>
<p>ole32 used to have a similar issue but I&#8217;ve been told it&#8217;s been fixed and I couldn&#8217;t find what it was, so maybe it has been removed.</p>
<p>fyi.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255843">
				<div id="div-comment-255843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255843">
			February 15, 2005 at 9:51 am</a>		</div>

		<p>I&#8217;m sorry, but those answers are quite contrived.  Just document in MSDN under what conditions the function would work and when it wouldn&#8217;t.  Programmers are used to writing fallback code, thats called error handling.  I can quite easily imagine a framework where you could get a callback from the os each time a process started, with the process id and a bool as to whether or not the hooking worked.  Of course you could always do the mapping BEFORE any of the processes modules are loaded, and that way you would ALWAYS get the address space you wanted.  There are very simple ways to get this to work.</p>
<p>-Jeff</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255853">
				<div id="div-comment-255853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255853">
			February 15, 2005 at 9:53 am</a>		</div>

		<p>I&#8217;m sorry, but those answers are quite contrived.  Just document in MSDN under what conditions the function would work and when it wouldn&#8217;t.  Programmers are used to writing fallback code, thats called error handling.  I can quite easily imagine a framework where you could get a callback from the os each time a process started, with the process id and a bool as to whether or not the hooking worked.  Of course you could always do the mapping BEFORE any of the processes modules are loaded, and that way you would ALWAYS get the address space you wanted.  There are very simple ways to get this to work.</p>
<p>-Jeff</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255863">
				<div id="div-comment-255863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daveh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255863">
			February 15, 2005 at 10:05 am</a>		</div>

		<p>&quot;Well, first of all, there&#8217;s no guarantee that by the time you request your global address space, there will be any available addresses at all.&quot;</p>
<p>While I agree it would certainly be a security risk, I disagree (like Jeff and others) on the other reasons. Its akin it saying you shouldn&#8217;t open files because by the time you request to open it the file might not be there or there might not be any available file handles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255873">
				<div id="div-comment-255873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255873">
			February 15, 2005 at 10:12 am</a>		</div>

		<p>I disagree on the security risk.  Only allow administrators to use this hook.  Or make it a privilege that can be granted, like CreateGlobalObjects.</p>
<p>-Jeff</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255883">
				<div id="div-comment-255883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255883">
			February 15, 2005 at 12:53 pm</a>		</div>

		<p>Jeff,<br />
<br />  If it&#8217;s an admin-only feature, then my application will use it, not caring that it locks the user into being an administrator.  And it will fail when it gets run as a limited user.</p>
<p>  And we&#8217;ve got yet another reason why people surf the web as an administrator.</p>
<p>  Which is ALWAYS a bad thing.  Administrators should NEVER be able to surf the web.  It&#8217;s just too dangerous.</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255903">
				<div id="div-comment-255903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255903">
			February 15, 2005 at 2:17 pm</a>		</div>

		<p>&quot;Of course you could always do the mapping BEFORE any of the processes modules are loaded, and that way you would ALWAYS get the address space you wanted.&quot;</p>
<p>And Raymond&#8217;s nasty program would prevent any other program from running at all, because it&#8217;s chewed up/reserved most of the address space of the new process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255923">
				<div id="div-comment-255923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.thewalrus.org' rel='external nofollow' class='url'>Matt Sayler</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255923">
			February 15, 2005 at 3:56 pm</a>		</div>

		<p>Larry:<br />
<br />&gt; Which is ALWAYS a bad thing. Administrators should NEVER be able to surf the web. It&#8217;s just too dangerous.</p>
<p>Isn&#8217;t that kind of backwards?  I would like to think the correct assertion is &quot;web browsers should be secure enough that Administrators can use them if they need to.&quot;</p>
<p>After all, what&#8217;s fundimentally wrong with visiting a vendor web site and downloading a driver?</p>
<p>Dave:<br />
<br />&gt; While I agree it would certainly be a security risk, I disagree (like Jeff and others) on the other reasons. Its akin it saying you shouldn&#8217;t open files because by the time you request to open it the file might not be there or there might not be any available file handles.</p>
<p>I agree.  It&#8217;s debatable whether or not this is a desirable feature (since it is more-or-less a shortcut and not &quot;new functionality.&quot;).  Programmers have to deal with globally limited resources all the time (port numbers would be another example).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255953">
				<div id="div-comment-255953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeka.com/blogs/' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255953">
			February 15, 2005 at 4:09 pm</a>		</div>

		<p>&quot;Isn&#8217;t that kind of backwards? I would like to think the correct assertion is &quot;web browsers should be secure enough that Administrators can use them if they need to.&quot;</p>
<p>I don&#8217;t think so.  If you need to install a driver you should download it as a normal user, and only run as an admin for exactly as long as you need to install the driver and no longer.</p>
<p>It&#8217;s always been considered an extreme faux pas to run a web browser, email program, or irc client as root under unix.  Why is Windows any different?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255963">
				<div id="div-comment-255963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://24.odessa.ua/' rel='external nofollow' class='url'>AT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255963">
			February 15, 2005 at 4:16 pm</a>		</div>

		<p>P.S&gt;  BTW,  Is it possible to allocate memory in address-space over 2Gb (3Gb for /3Gb tuning) ?</p>
<p>One that reserved to use by system and mapped in all processes ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255983">
				<div id="div-comment-255983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255983">
			February 15, 2005 at 6:19 pm</a>		</div>

		<p>Congratulations Raymond on your 666th post! =)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255993">
				<div id="div-comment-255993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SHA-1 CRACKED</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255993">
			February 15, 2005 at 6:28 pm</a>		</div>

		<p>Raymond, please publicize this. Apologies for offtopic, but this is VERY IMPORTANT.</p>
<p>&lt;a href=&quot;<a target="_new" href="http://schneier.com/&quot;&gt;Bruce" rel="nofollow">http://schneier.com/&quot;&gt;Bruce</a> Schneier&lt;/a&gt; reports that SHA-1, a commonly used cryptographic hashing protocol, &lt;a href=&quot;<a target="_new" href="http://www.schneier.com/blog/archives/2005/02/sha1_broken.html&quot;&gt;has" rel="nofollow">http://www.schneier.com/blog/archives/2005/02/sha1_broken.html&quot;&gt;has</a> reportedly been broken&lt;/a&gt; by a prestigious research team from Shanghai University. Together with recent attacks on MD5, as &lt;a href=&quot;<a target="_new" href="http://developers.slashdot.org/developers/04/12/07/2019244.shtml?tid=93&amp;tid=172&amp;tid=8&quot;&gt;previously" rel="nofollow">http://developers.slashdot.org/developers/04/12/07/2019244.shtml?tid=93&#038;tid=172&#038;tid=8&quot;&gt;previously</a> covered by /.&lt;/a&gt;, we need new hashing functions as a matter of urgency, and we need them now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-255913">
				<div id="div-comment-255913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeka.com/blogs/' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255913">
			February 15, 2005 at 3:10 pm</a>		</div>

		<p>&quot;I&#8217;m sorry, but those answers are quite contrived. Just document in MSDN under what conditions the function would work and when it wouldn&#8217;t. Programmers are used to writing fallback code, thats called error handling.&quot;</p>
<p>The problem is that (proper) fallback code would have to do what you do today anyway (i.e. using file-mapping objects or something), so what&#8217;s the point of a magic &quot;GlobalVirtualAlloc&quot; when you have to write the file-mapping code anyway?</p>
<p>There&#8217;s two ways a &quot;GlobalVirtualAlloc&quot; could fail when it encounters a process that is unable to map the address.</p>
<p>The first way it could fail is by not mapping any addresses in any processes.  But this is no good, since if it fails for one process, you&#8217;d have to write your file-mapping fallback code anyway.  And it&#8217;s also bad because what if it succeeds when your program starts up, but then another process starts that can&#8217;t map that address &#8211; do you then unload all other blocks and fail?</p>
<p>The other way it might fail is when it can&#8217;t map an addresses in a given process, it just indicates failure *for that process* and continues to work in other processes.  But again, you have to write your file-mapped fallback code, and in this case you&#8217;d have some processes with the memory mapped via this &quot;GlobalVirtualAlloc&quot; and some via a file-mapping.</p>
<p>Personally, I don&#8217;t see why such a function would be useful anyway, surely any magic &quot;GlobalVirtualAlloc&quot; would be so limited in what it can do that it would only be useful in very limited circumstances, in which case you&#8217;re better off writing your own version which has the functionality you want.  It&#8217;s not like it would do anything that you can&#8217;t do already, and surely you know better than Microsoft what you want to happen in the case of failure (maybe if it fails for a given process, you can live with just ignoring that process.  A general solution couldn&#8217;t do that, however).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-255933">
				<div id="div-comment-255933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://24.odessa.ua/' rel='external nofollow' class='url'>AT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-255933">
			February 15, 2005 at 4:00 pm</a>		</div>

		<p>;-) This is possible to create memory mapped file and map it to same address in all processes you need it. </p>
<p>This can be done after fact &#8211; it you will have access to it. </p>
<p>As well &#8211; there were suggestion to create a DLL file &#8211; if you need this to be done in some specific processes only.</p>
<p>Even more &#8211; this is possible to override CreateProcess  system calls and map all pages you need &#8211; in kernel Ldr* function &#8211; even before first image will be loaded.</p>
<p>Thus &#8211; even if user-binary will try to use your address as their base (no needs to reserve all memory for you to fail ;-) &#8211; it will be forced to relocate or die. </p>
<p>Something not good &#8211; user process can remove your reserved region &#8211; if you will will not restrict it from doing so using some additional hacks in Mm* memory manager.  </p>
<p>There are amlost anything possible. The only question &#8211; is the development costs/burden. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-256033">
				<div id="div-comment-256033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-256033">
			February 16, 2005 at 12:13 am</a>		</div>

		<p>Larry Osterman:<br />
<br />&quot;Administrators should NEVER be able to surf the web. It&#8217;s just too dangerous. &quot;</p>
<p>Tell this to <a target="_new" href="http://WindowsUpdate.MicroSoft.Com" rel="nofollow">http://WindowsUpdate.MicroSoft.Com</a> team ;-))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-256043">
				<div id="div-comment-256043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-256043">
			February 16, 2005 at 4:11 am</a>		</div>

		<p>&quot;If it&#8217;s an admin-only feature, then my application will use it, not caring that it locks the user into being an administrator. And it will fail when it gets run as a limited user. &quot;</p>
<p>Oh come on Larry, what if I am writing an application that I know is ONLY ever going to run with privileges, and if it doesn&#8217;t it SHOULD fail.</p>
<p>Your excuse doesn&#8217;t make any sense, what if I am writing a program that creates global objects, and it runs on Win2k sp4 as non-admin?  It will FAIL, unless CGO privileges are setup.  Now, I as a programmer need to do my job and correctly engineer my program to work right.  Just because it MIGHT fail doesn&#8217;t mean we SHOULDN&#8217;T use it.  If that were true I wouldn&#8217;t have even turned on Win9x!</p>
<p>Remember that the use cases set the requirements.  If my use case is to run a service with admin privileges and ONLY as that, then why can&#8217;t I call a function that works for admin only?</p>
<p>&quot;And Raymond&#8217;s nasty program would prevent any other program from running at all, because it&#8217;s chewed up/reserved most of the address space of the new process.&quot;</p>
<p>And thats why I said Admin only.  I was assuming that an admin would be smart enough only to buy from companies he trusted.  Of course there are always bugs, but after the first time, I think I would boot into safe mode and uninstall rather quickly.</p>
<p>&quot;The problem is that (proper) fallback code would have to do what you do today anyway (i.e. using file-mapping objects or something), so what&#8217;s the point of a magic &quot;GlobalVirtualAlloc&quot; when you have to write the file-mapping code anyway? &quot;</p>
<p>That just doesn&#8217;t make sense. So lets see, I&#8217;m writing code that wants to know when a session starts on terminal services.  If I&#8217;m on WinXP I can use the nice new callbacks that give me exactly what I want.  If I&#8217;m on Win2k I have to use an old semi-polling method.  So by your account, I should ALWAYS use the crappy old way that isn&#8217;t necessarily as reliable as the newer way.  If that mentality were the case we would all still be using fprintf()!</p>
<p>I&#8217;m not really arguing for GlobalVirtualAlloc() as much as a change in the mindset of Microsofties.  Just because YOU think there are problems with it, doesn&#8217;t mean I&#8217;m not willing to use it in the cases where it DOES work, especially if it makes my life way easier.  Sure, I understand I may have to write some old code too, but hopefully as time goes on I&#8217;ll get to remove the old code.</p>
<p>I guess I really can&#8217;t get over the mindset of &quot;well since it might not work all the time, I&#8217;ll just not use it at all.&quot;  I&#8217;d rather analyze why and where it won&#8217;t work, and code up a backup for those areas.</p>
<p>-Jeff</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-256113">
				<div id="div-comment-256113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-256113">
			February 16, 2005 at 7:45 am</a>		</div>

		<p>You can fix &quot;out of memory&quot; by buying more memory. You can&#8217;t &quot;buy more address space&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-256213">
				<div id="div-comment-256213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeka.com/blogs/' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-256213">
			February 16, 2005 at 2:22 pm</a>		</div>

		<p>&quot;So lets see, I&#8217;m writing code that wants to know when a session starts on terminal services. If I&#8217;m on WinXP I can use the nice new callbacks that give me exactly what I want. If I&#8217;m on Win2k I have to use an old semi-polling method.&quot;</p>
<p>No, that&#8217;s a different issue.  That is taking advantage of new features in a new platform and falling back to old features on an old platform.  Seemingly when the old platform is retired, you no longer have to do the fallback.</p>
<p>With the &quot;GlobalVirtualAlloc&quot; thing, it&#8217;s not a platform-dependent thing.  You might have to do the fallback whether you&#8217;re on an old version of Windows, or whether you&#8217;re on the newest version (or even some hypothetical version that doesn&#8217;t exist yet).  The need for the fallback is due to the fact that &quot;GlobalVirtualAlloc&quot; would be inheritly unreliable, not because it&#8217;s just not supported on some particular platform or configuration.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-256073">
				<div id="div-comment-256073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-256073">
			February 16, 2005 at 7:10 am</a>		</div>

		<p>There&#8217;s a difference between code that fails due to design requirements (running as Admin, choosing a supported OS) and circumstances that are pseudo-random (fixed address space availability).</p>
<p>Suppose the user buys your program *and* a program that requires a lot of virtual address space (say, Halo), or your program *and* another program that also uses global address space. The user can&#8217;t run both. Are you going to say on the box &quot;Not compatible with Exchange Server, SQL Server, Halo, or any other address-space-intensive programs&quot;?</p>
<p>&quot;Just because YOU think there are problems with it, doesn&#8217;t mean I&#8217;m not willing to use it in the cases where it DOES work.&quot; Feel free to use PulseEvent all you want. Even though it doesn&#8217;t work reliably.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-256103">
				<div id="div-comment-256103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-256103">
			February 16, 2005 at 7:42 am</a>		</div>

		<p>&quot;Suppose the user buys your program *and* a program that requires a lot of virtual address space (say, Halo), or your program *and* another program that also uses global address space. The user can&#8217;t run both. Are you going to say on the box &quot;Not compatible with Exchange Server, SQL Server, Halo, or any other address-space-intensive programs&quot;?&quot;</p>
<p>If I remember correctly, almost every application on the planet comes with a recommendation for how much memory you need.  Besides, you have that problem already when trying to run large programs&#8230; try running WinDbg with a few copies of VS .Net around&#8230; better have a gig of memory.</p>
<p>&quot;circumstances that are pseudo-random (fixed address space availability)&quot;</p>
<p>They aren&#8217;t pseudo-random at all.  You listed them out.  And you could give a callback that listed the process id (even better a handle to the process) and the reason the hooking didn&#8217;t occur.  Problem solved.</p>
<p>-Jeff</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-256253">
				<div id="div-comment-256253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://24.odessa.ua/' rel='external nofollow' class='url'>AT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-256253">
			February 16, 2005 at 4:23 pm</a>		</div>

		<p>Raymond,  if your application requere so many memory &#8211; sell it in black-box. Bundle your application with hardware. </p>
<p>This is very common mistake that all hardware in the world must run &quot;Exchange Server, SQL Server, Halo&#8230;&quot;. </p>
<p>There are exists markets for customised solutions. One that can potentialy requere this kind of memory allocation pattern. </p>
<p>Allocating memory globaly is tradeoff similar to allocating it in every user process. You can get something in return for something else. There are nothing free in our world.</p>
<p>You see problem. We see solution. </p>
<p>Here is one more way to do this (in addition to replacing CreateProcess syscalls) :<br />
<br />You can use custom kernel mode driver and map/unmap requered memory region using callback registered by<br />
<br />PsSetCreateProcessNotifyRoutine routine</p>
<p>(see<br />
<br /><a target="_new" href="http://msdn.microsoft.com/library/en-us/kmarch/hh/kmarch/k108_6ae7797a-ecbe-4665-85d5-e199f13613cd.xml.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/kmarch/hh/kmarch/k108_6ae7797a-ecbe-4665-85d5-e199f13613cd.xml.asp</a> )</p>
<p>As for administrator vs. regular user debate &#8211; not all hardware directly used by users.<br />
<br />Some hardware can serve users using network-only or in some other way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-256153">
				<div id="div-comment-256153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-256153">
			February 16, 2005 at 10:30 am</a>		</div>

		<p>You may not be able to reserve &quot;user mode address space&quot;, but you can make a block of globally-addressed non-paged kernel-mode address space read/writable by user-mode applications. </p>
<p>I&#8217;m not saying I *recommend* doing this, but it&#8217;s technically possible. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-256793">
				<div id="div-comment-256793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Carstens [carstens AT seattleu DOT edu]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-256793">
			February 20, 2005 at 6:24 am</a>		</div>

		<p>There sure seems to be a lot of desire to map into every process&#8217; address space.  Perhaps I&#8217;m just naive, but I fail to see why this is such a necessary feature.</p>
<p>Presumably there is some problem that I&#8217;m trying to solve in which my process requires the ability to share a memory space withe very other process.  I can only see one general reason to do this: for some reason, every process needs to be able to share large blocks of memory.</p>
<p>This assumes that every process that is currently running knows what to -do- with this shared memory.  So along comes my program, which allocates some of the global address space.  Now what?  Nobody else has any code that uses this space.  So what have I accomplished?</p>
<p>Ok, so suppose we add this global-alloc function to the platform.  Perhaps then some component will get published that allows IPC via this shared memory space.  Again, unless every process makes use of this functionality, there&#8217;s no reason to demand a block of every process&#8217; address space.</p>
<p>Now, suppose we design the global-alloc such that it asks every process whether or not it wants to opt-in to our scheme.  Presumably, only the processes who know what to do with the shared space will opt-in.  Now I&#8217;ve got a bunch of processes that use this space to share large blocks of memory.  What if EvilCode.exe is running as an unpriviledged user, and chooses to opt-in.  Since it&#8217;s shared memory he can trash it as he pleases.  By trashing memory he can violate the design invariants of the protocol my legitimate processes use in the shared address space.  Oh, and don&#8217;t forget: the global-alloc function can only be invoked by processes running as Administrator.  And now look where we are: an under-priviledged process can manipulate the behavior of Administrator&#8217;s processes.</p>
<p>Depending on the purpose of the shared address space, this could be seriously bad news.  Suppose that only the invoking process had write access and that every other process involved had read-only access.  We&#8217;re still in bad shape, since unauthenticated processes can monitor communications between other processes.  This is still a security risk waiting to happen, since it allows potentially untrusted applications (spyware, anyone?) to tap the communications between Administrator&#8217;s processes.</p>
<p>There are only two advantaged to a shared memory space:<br />
<br />1. If you like using separate processes instead of separate threads (and there is a school of people who do this,) you don&#8217;t have to compromise the shared-memory capabilities of threads.  Of course, if you use separate processes instead of threads, odds are you&#8217;re doing it so that one bad process doesn&#8217;t crash the others.  Of course, memory-related bugs are often why threads crash each other, so only in some cases have we actually accomplished anything.<br />
<br />2. If you have some processes (that couldn&#8217;t be consolodated into multiple threads) that need to share large amounts of data at high speeds.  From this perspective, global-alloc is an optimization technique.  Of course, this doesn&#8217;t legitimize taking some of -everyone&#8217;s- address space.  And I don&#8217;t think that this optimization compensates for the deplorable security risks you&#8217;re inviting.</p>
<p>Lastly, I respond to this type of statement (which I&#8217;ve seen many times in this thread): &quot;Oh, I&#8217;m a good developer, I&#8217;ll use it responsibly!  It&#8217;s the developer&#8217;s job to use the tools right!  So you should open it up so I can use it!&quot;</p>
<p>In an ideal world, where nobody blamed MSFT for things that weren&#8217;t their fault, this argument might hold.  However, it turns out that there&#8217;s a lot of people who hold MSFT accountable for the design of Windows (go figure).  The more dangerous functions they have in the platform, the greater the risk that flaky developers will use the functions incorrectly, decrease the stability of the platform, and in turn get MSFT in more heat.</p>
<p>This function is a disaster waiting to happen.  How many malicious apps have to use this functionality to gain priviledges, crash applications, and collect data before someone asks &quot;Why did MSFT introduce this functionality in the first place.  What&#8217;s wrong with marshalled IPC?&quot;</p>
<p>Moral of the story: sometimes when you want to do something right, you have to put some time into it.  Security, particularly w.r.t. IPC, is one of those things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-269463">
				<div id="div-comment-269463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://excastle.com/blog/archive/2005/04/07/848.aspx' rel='external nofollow' class='url'>Joe White's Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-269463">
			April 7, 2005 at 8:26 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-471693">
				<div id="div-comment-471693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://excastle.com/blog/archive/0001/01/01/848.aspx' rel='external nofollow' class='url'>Joe White's Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050215-00/?p=36443#comment-471693">
			February 12, 2007 at 11:27 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>