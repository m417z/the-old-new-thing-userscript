<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-130233">
				<div id="div-comment-130233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://supersat.livejournal.com/' rel='external nofollow' class='url'>Karl</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130233">
			November 4, 2003 at 6:00 am</a>		</div>

		<p>I updated all of my code that creates and executes other code dynamically the other day, so I&#8217;m already ready for this.</p>
<p>I considered writing you a few weeks ago wondering why PAGE_READWRITE acted as PAGE_READWRITE_EXECUTE, but I discovered the sad truth myself: the x86 doesn&#8217;t support it.</p>
<p>However, I&#8217;ve come across several tricks to work around this issue. The first is to take advantage of the x86 segment registers, by making the code segment not cover the entire 4 GB address space, and putting the  stack and default heap above this boundry, so it can&#8217;t be executed. </p>
<p>The second is to take advantage of an undocumented quirk of Intel and AMD processors: there are actually two TLBs, one for code, and one for data. The trick is to make the data page table entries unavailable most of the time. When the CPU tries to read/write to the page, it causes a page fault. The OS then determines what operation caused the page fault. If it was an instruction fetch, it terminates the process unless the page was marked as executable. If it was a read or write operation, it creates the page table entry and resumes execution. Then, a few milliseconds later, it removes the page table entry. The PTE is cached by the data TLB, so further reads/writes to the page won&#8217;t cause a page fault, but instruction fetches will (since it&#8217;s not cached by the instruction TLB).</p>
<p>Any chance SP2 will use tricks like those mentioned above to enforce page execute protection on CPUs where it isn&#8217;t explicitly supported? </p>
<p>Oh, and how will backwards compatibility be dealt with? I imagine this will break a LOT of apps. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-130243">
				<div id="div-comment-130243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.smackfu.com' rel='external nofollow' class='url'>Smack</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130243">
			November 4, 2003 at 11:54 am</a>		</div>

		<p>Are there actually programmers that follow the rules?  I thought they everyone just screwed with their code until it compiled and worked well enough.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-130253">
				<div id="div-comment-130253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florian W.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130253">
			November 4, 2003 at 11:55 am</a>		</div>

		<p>&gt;Oh, and how will backwards compatibility be dealt with? I imagine this will break a LOT of apps.</p>
<p>May be I&#8217;m wrong, but every ATL based window application would fail, because MS does such a trick inside message dispatching.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-130263">
				<div id="div-comment-130263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">runtime</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130263">
			November 4, 2003 at 1:03 pm</a>		</div>

		<p>OpenBSD 3.4 just added a similar feature for x86 processors. Since Intel x86 does not support per-page  &quot;read but don&#8217;t execute&quot; mode, they use changed their system compiler to fake it using segment protection.</p>
<p>i386 binaries have their executable segments rearranged to support isolating code from data, and the cpu CS limit is used to impose a best effort limit on code execution. </p>
<p><a href="http://www.openbsd.org/34.html" rel="nofollow">http://www.openbsd.org/34.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-130273">
				<div id="div-comment-130273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sean McLeod</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130273">
			November 4, 2003 at 1:34 pm</a>		</div>

		<p>Any idea when Intel x86 CPUs will start supporting the execute permission bit? Maybe the Prescott cpus?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-130283">
				<div id="div-comment-130283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130283">
			November 4, 2003 at 2:31 pm</a>		</div>

		<p>Intel CPUs do support execute protection, but only if the OS writers don&#8217;t cheat :) by using flat memory model.  By deciding that VA == PA always (except when using PAE) you lose a lot of the security that the x86 gives you (but not for free, segmented memory models are a pain).  Of course all modern operating systems go the flat memory-model route (although some have created various hacks and patches to make a non-executable stack that get rather complex &#8212; like the above OpenBSD mention, Solar Designer&#8217;s patch for Linux, or RedHat&#8217;s Exec-Shield).</p>
<p>But I just have to say &quot;Yay!  Good on you for ignoring backwards compatibility!&quot;  I mean that seriously.  Windows has suffered too much at the hands of backwards compatibility.  </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-130293">
				<div id="div-comment-130293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130293">
			November 4, 2003 at 2:46 pm</a>		</div>

		<p>Oh, look.  I just read that article and have found that the changes to RPC will kick my ass.  Why must you give up on backwards compatibility?!</p>
<p>I guess I can&#8217;t have it both ways.  :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-130303">
				<div id="div-comment-130303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimmick.demon.co.uk/' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130303">
			November 4, 2003 at 3:30 pm</a>		</div>

		<p>I posted recently on Chris Brumme&#8217;s blog about this.</p>
<p>ATL uses a thunk code block allocated as part of the window object (ATL 3.1 and earlier on x86) or on the heap (ATL 7.0 and later) as the window procedure for a window. The thunk block replaces the first parameter on the stack (an HWND) with the value of the window object&#8217;s this pointer, then calls the class&#8217;s WindowProc (returned from the virtual GetWindowProc function). As such, ATL UI programs will break if the heap is protected. I expect that MS will include an AppCompat patch for this issue.</p>
<p>The problem with code segments in a flat memory model is basically that your code segment would need to be contiguous, which Windows does not guarantee. Indeed, Windows fills up your process address space from the bottom (low addresses) with your executable, but from the top (high addresses) with system DLLs, with the stacks and heaps in the middle. Windows never knows how many threads you&#8217;re going to create and hence how many stacks you will have, so it can&#8217;t easily reserve space for them.</p>
<p>The two TLBs solution will perform really poorly, IMO, and your &#8216;few milliseconds&#8217; could be enough to still allow an attacker through. The only way you could be sure would be to single-step the processor &#8211; ouch. I&#8217;m also not sure you can rely on there being separate instruction and data TLBs. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-130313">
				<div id="div-comment-130313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130313">
			November 4, 2003 at 4:30 pm</a>		</div>

		<p>Yes, ATL is probably the biggest offender. We&#8217;ve got a good amount of app compat work ahead of us. If a service pack breaks a program you use every day, your take-away is &quot;Don&#8217;t install service packs!&quot; which is not the message we are trying to get across.</p>
<p>Taking advantage of undocumented behavior of the Intel and AMD processors is hardly something an OS should be doing. (Imagine the flamage if it Windows XP were incompatible with AMD&#8217;s next CPU &#8211; but worked on Intel&#8217;s &#8211; because it relied on some undocumented CPU quirk. Conspiracy theorists would have a field day.)  It&#8217;s this sort of &quot;well that&#8217;s how the chip works today so I&#8217;ll rely on it&quot; shortcutting that is creating this app compat mess in the first place!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-130323">
				<div id="div-comment-130323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.geary.com/' rel='external nofollow' class='url'>Michael Geary</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130323">
			November 5, 2003 at 2:03 am</a>		</div>

		<p>SP2 is going to break *every* app that creates a window using ATL? Wow&#8211;that will be a lot of broken programs. No matter how many AppCompats you do, you are going to miss a lot of them. End users will not know why their applications have started crashing, and they will blame Microsoft for putting out a buggy SP.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-130333">
				<div id="div-comment-130333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130333">
			November 5, 2003 at 8:27 am</a>		</div>

		<p>This will also break all programs created with Borland RAD tools such as Delphi and C++Builder. The VCL library creates small routines on the fly to route window procedures to method calls on objects. No doubt ATL does something similar.</p>
<p>Adding the execute protection to SP2 might be something you/Microsoft may want to reconsider, since this will break a *lot* of applications.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-130343">
				<div id="div-comment-130343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimmick.demon.co.uk/' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130343">
			November 5, 2003 at 9:09 am</a>		</div>

		<p>I got confused here &#8211; AMD never used K8 as a codename, but it&#8217;s typically used to refer to the first generation Opteron and Athlon 64 processors.</p>
<p>According to the documentation, these processors do support a no-execute bit, but only when run in Physical Address Extension mode. In this mode, Page Table Entries and Page Directory Entries are 64 bits in size; a PDE can describe the location of a Page Table (of PTEs) for 4Kbyte pages, or it can describe the location of a 2Mbyte page. AMD have chosen to use bit 63 (the Most Significant Bit) to represent &#8216;No Execute&#8217; &#8211; set to 1 for execution not allowed, 0 for execution allowed. This should therefore be compatible with PAE mode on Intel processors (these bits were supposed to be set to zero).</p>
<p>I can&#8217;t remember if Windows runs itself in PAE mode if the processor supports it, or only if there is more than 4Gb of memory actually fitted. There are more structures to negotiate (one more level) in PAE mode, which I imagine slows down TLB fills slightly (although x86 processors do this in hardware, if the PTE is valid). I assume on Opteron/Athlon 64 32-bit Windows will now always run in PAE mode. It&#8217;s not entirely clear to me whether the AMD64 architecture supports DOS and Win16 &#8211; IIRC, Itanium does not support Virtual 8086 mode at all.</p>
<p>Intel should be encouraged to add No Execute to Prescott (currently expected to be called Pentium 5) or the following generation, in exactly the same way as AMD have done.</p>
<p>Maybe no-execute needs to work on an opt-in basis, rather than opt-out: the app tells the loader if it&#8217;s no-execute safe. Is there room in the image header for a bit to represent this? As far as I can see, bit 7 in the Characteristics WORD in IMAGE_FILE_HEADER appears to be unused.</p>
<p>All images in the process would need to have the bit set in order for the stack and heap to be protected with NoExecute. You&#8217;d have to be careful with LoadLibrary still: if you loaded a DLL with this bit not set, and the process was running with No Execute turned on, you&#8217;d have to turn No Execute off as the process tried to execute pages (taking a page fault each time it tries to execute a new page). That would of course enable the attacker to get access to the stack by forcing the process to load a &#8216;no execute unsafe&#8217; DLL, though&#8230;</p>
<p>You&#8217;d have to extend the linker to support the new flag, and probably provide a tool for setting it as well (enhancement to EDITBIN, I expect). I would expect all binaries shipped with XP SP2 to be compiled with this flag turned on.</p>
<p>Will there be some way to tell the Heap code that you want to execute from a heap? A new option on HeapSetInformation seems appropriate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-130353">
				<div id="div-comment-130353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130353">
			November 5, 2003 at 4:31 pm</a>		</div>

		<p>Frederik: It won&#8217;t break Delphi and C++Builder because they already include the EXECUTE flag (and always have).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-130363">
				<div id="div-comment-130363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-130363">
			November 6, 2003 at 3:59 am</a>		</div>

		<p>Jordan: You are correct, sorry for the interruption. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-184353">
				<div id="div-comment-184353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-184353">
			June 16, 2004 at 8:45 pm</a>		</div>

		<p>I suspect the answer for ATL is to ship a new atl.dll with XPSP2 that contains the proper call to VirtualProtect (and to document it for those who have for whatever reasons decided to build their own atl.dll file)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-184363">
				<div id="div-comment-184363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031104-00/?p=41963#comment-184363">
			June 16, 2004 at 8:56 pm</a>		</div>

		<p>Commenting on this article has been closed.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>