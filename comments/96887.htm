<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1307255">
				<div id="div-comment-1307255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307255">
			August 25, 2017 at 7:08 am</a>		</div>

		<p>Well, as per the linked article, since the only instruction that is NEVER optimized out is the branching instruction, then I guess that the only way to create a non-optimized-out nop is to branch directly to the following instruction, using the zero-register as the return address receptacle. However I can also think of other nop-like constructs without side-effects that don&#8217;t involve the zero register (like copying a register to itself).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1307315">
				<div id="div-comment-1307315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307315">
			August 25, 2017 at 7:30 am</a>		</div>

		<p>x86&#8217;s &#8220;NOP&#8221; comes to mind. The x86 ISA doesn&#8217;t have an specific NOP opcode, so it&#8217;s tradition to use XCHG AX, AX (a valid instruction with no effects) as a NOP. The first processors in the line &#8220;executed&#8221; the instruction. Later ones treated this 1-byte opcode as a true NOP and ignored it.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1307336">
				<div id="div-comment-1307336" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Lund</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307336">
			August 25, 2017 at 9:41 am</a>		</div>

		<p>It certainly is treated as a real NOP in 64-bit mode, otherwise &#8220;XCHG EAX, EAX&#8221; would clear the upper 32 bits of RAX.</p>
<p>There are semi-official encodings for multi-byte NOP instructions, as well.  A long sequence of prefixes followed by 0x90 (NOP) seems to work well but it&#8217;s not the only option.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1307345">
				<div id="div-comment-1307345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307345">
			August 25, 2017 at 11:41 am</a>		</div>

		<p>The x86 multi-byte nop instructions are official; they are listed in public Intel manuals as 0F 1F /0.  The Intel manual&#8217;s description of &#8220;nop&#8221; also shows their preferred encodings of nop for 2 to 9 bytes.  I assume that these are &#8220;recommended&#8221; because they are the byte patterns specifically recognized by the instruction decoder.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1307365">
				<div id="div-comment-1307365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307365">
			August 25, 2017 at 4:46 pm</a>		</div>

		<p>IIRC, the first processor that treated it as a true NOP was the Pentium (or maybe the 80486?). Back then, x86 was a 16/32-bit hybrid architecture, where you had 32-bit registers and ALU, and the opcodes would affect the full 32 bits or only the lower 16 bits depending on the processor mode and the instruction prefix (if any). But in either case, &#8220;self-swapping&#8221; was an effective NOP, no matter wether you juggled with the lower 16 bits or the whole 32-bit register.</p>
<p>I can&#8217;t find about when 0x90 became the official NOP. But when searching for it, I remembered Raymond already wrote about all of this (talking about NOPs in Windows 95, of course): <a href="https://blogs.msdn.microsoft.com/oldnewthing/20110112-00/?p=11773" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20110112-00/?p=11773</a> .</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1307265">
				<div id="div-comment-1307265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307265">
			August 25, 2017 at 7:10 am</a>		</div>

		<p>I think the JMP instruction is in a later part. I&#8217;d solve the exercise by JMP zero, +0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1307305">
				<div id="div-comment-1307305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307305">
			August 25, 2017 at 7:24 am</a>		</div>

		<p>Well i&#8217;d say just use another register. Theres quite a few to play with!</p>
<p>Other than that, a branch to next instruction would work, but I do wonder if there are side effects of a branch that could cause a stall even though it could never be mispredicted.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1307325">
				<div id="div-comment-1307325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307325">
			August 25, 2017 at 7:45 am</a>		</div>

		<p>My recall from college is that an unconditional jump doesn&#8217;t stall unless there is a cache miss.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1307327">
				<div id="div-comment-1307327" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Lund</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307327">
			August 25, 2017 at 9:38 am</a>		</div>

		<p>&#8220;Load into the zero register from memory&#8221; was my first thought but a quick look in the Alpha Architecture Reference Manual says that it can be optimized away as well.</p>
<p>So, what about a dummy move of a normal register to itself?  MOV rx, ry, which is really BIS rx, rx, ry?</p>
<p><a href="http://download.majix.org/dec/alpha_arch_ref.pdf" rel="nofollow">http://download.majix.org/dec/alpha_arch_ref.pdf</a></p>
<p>The Alpha had three standard NOP instructions: NOP/bis R31, R31, R31, UNOP/LDQ_U R31, 0(Rx), FNOP/CPYS F31, F31, F31.  The AARM 4th ed doesn&#8217;t mention a NOP that won&#8217;t be optimized away but I dimly remember reading about such a NOP variant in the Alpha manuals twenty years ago.</p>
<p>CPYS = Copy Sign for floating-point registers, btw.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1307415">
				<div id="div-comment-1307415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307415">
			August 28, 2017 at 1:07 am</a>		</div>

		<p>&#8220;What if you explicitly don&#8217;t want your instruction to be optimized out?&#8221;</p>
<p>Why would I? In the absence of flags, what side-effects such an instruction can have at all?<br />
Even if this would change the timing (of in-order execution) a little bit, you should not write anything that depends on this because it would be very very fragile.</p>
<p>“XCHG EAX, EAX” would clear the upper 32 bits of RAX.&#8221;</p>
<p>I thought &#8221; AL, &#8221; leaves all other bits of AX / EAX / RAX unchanged.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1307435">
				<div id="div-comment-1307435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307435">
			August 28, 2017 at 1:16 am</a>		</div>

		<p>The blog software ate some parts: ” AL, ” should be &#8220;opcode AL, anything&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1307546">
				<div id="div-comment-1307546" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307546">
			August 28, 2017 at 11:03 pm</a>		</div>

		<p>Yes, but it&#8217;s different for EAX vs RAX. Most operations on EAX are sign-extended to RAX, modifying the upper 32 bits.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1307455">
				<div id="div-comment-1307455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307455">
			August 28, 2017 at 1:57 am</a>		</div>

		<p>&#8220;Why would I? In the absence of flags, what side-effects such an instruction can have at all?&#8221;</p>
<p>Time.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1307475">
				<div id="div-comment-1307475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307475">
			August 28, 2017 at 3:33 am</a>		</div>

		<p>What time? The exercise was &#8220;What if you explicitly don&#8217;t want your instruction to be optimized out?&#8221; You want to be able to implement a something where this additional time is important?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1307485">
				<div id="div-comment-1307485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307485">
			August 28, 2017 at 5:35 am</a>		</div>

		<p>The question was &#8220;In the absence of flags, what side-effects such an instruction can have at all?&#8221;<br />
The answer is the time taken to execute the instruction. For example if you need a delay between multiple io accesses.</p>
<p>Discarding nops at run time is normally a pointless optimisation, you&#8217;re spending gates on removing something that would only be put there for a reason. Even a CPU with branch delays should always have an instruction that can fill the delay slot, although MIPS ultimately added branches that didn&#8217;t always execute the following instruction instead.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1307505">
				<div id="div-comment-1307505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307505">
			August 28, 2017 at 9:51 am</a>		</div>

		<p>&#8220;For example if you need a delay between multiple io accesses.&#8221; If code would depend on such timings it will break as soon as the CPU or the delay of the mounted RAM modules or some other parameter in the system is different. Or you would create a the same mess as the old DOS ganes which timed gameplay or sound or IO on CPU timing. I repeat: Why would someone want to consider the question of the exercise even a sensible one? You should just not care about a machine cycle or two at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1307506">
				<div id="div-comment-1307506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307506">
			August 28, 2017 at 10:38 am</a>		</div>

		<p>When smf is talking about IO delays, they are probably talking about delays communicating with memory mapped IO devices, or a device on an SPI bus or something, where timing is important and getting it wrong (or having an instruction that is optimized out) will cause unreliable behavior.  Of course you won&#8217;t usually need to worry about this when doing user space Win32 programming, but given that this series is about lower level concepts, it shouldn&#8217;t be a surprise that people will discuss things that are out of scope for regular Win32 programming.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1307536">
				<div id="div-comment-1307536" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307536">
			August 28, 2017 at 4:55 pm</a>		</div>

		<p>NOPs are commonly used to align the start address of hot loops, among other things. For fall-through, a few nops are generally preferable to an unconditional branch to the start of the loop. That makes them fairly common instructions, and many modern CPUs special-case them for that reason.</p>
<p>At the other extreme, most in-order processors explicitly don&#8217;t discard NOPs. That&#8217;s because strategically inserted NOPs are a great way to work around CPU pipeline bugs :). Google &#8220;Cortex A53 Erratum 835769&#8221; or &#8220;SPARC LEON erratum NOP&#8221; for some fun, relatively recent examples.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1307516">
				<div id="div-comment-1307516" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307516">
			August 28, 2017 at 2:32 pm</a>		</div>

		<p>Will we get Raymond&#8217;s answer to the exercise?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1307526">
				<div id="div-comment-1307526" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170825-00/?p=96887#comment-1307526">
			August 28, 2017 at 2:33 pm</a>		</div>

		<p>I would copy a nonzero register to itself.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>