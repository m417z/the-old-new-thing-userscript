<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (59)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-793753">
				<div id="div-comment-793753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793753">
			December 10, 2009 at 7:15 am</a>		</div>

		<p>Igor is clearly right&#8230;</p>
<p>If a memory allocation fails, the Windows should blue-screen.</p>
<p>If a non-existent file is open, white-noise should be played as loud as possible and all the window contents (if any) should flash in inverse video.</p>
<p>If the user mistype a command in the shell, the screen should rapidly blink various colors randomly non stop until the computer is turned off.</p>
<p>If you click on a dead URL in the web browser, all fans should be stopped and your CPU and graphics card left to melt.</p>
<p>You&#8217;re either a real man or you don&#8217;t touch computers. That&#8217;s were the line is drawn. Igor knows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-793763">
				<div id="div-comment-793763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793763">
			December 10, 2009 at 7:20 am</a>		</div>

		<p>If the application is going to cause an Access Violation then it should die as fast as possible so as not to mask a latent bug.</p>
<p>However, the OS should not crash and burn. &nbsp;I think it is proper that the OS validates input and returns an error code on bad input.</p>
<p>The difference here is that the app is going down by its own doing. &nbsp;The OS didn&#8217;t do anything wrong, it is just dealing with foreign programs that probably should not be trusted (these days, at least).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-793773">
				<div id="div-comment-793773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793773">
			December 10, 2009 at 7:21 am</a>		</div>

		<p>The answer is actually simple: when running for your QA dept, it should crash immediately; when running for your customer, it should silently keep going.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-793783">
				<div id="div-comment-793783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793783">
			December 10, 2009 at 7:22 am</a>		</div>

		<p>If the app crashed (for a lack of parameter validation), a lightning bolt should strike the programmer.</p>
<p>Each and every time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-793793">
				<div id="div-comment-793793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mvadu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793793">
			December 10, 2009 at 7:24 am</a>		</div>

		<p>Nice article Ray, but how on earth you keep track of all these comments you linked!!</p>
<p>One from 2008, other from 2007 for an article in 2009 which speaks about valid point and links both. Impressed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-793803">
				<div id="div-comment-793803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793803">
			December 10, 2009 at 7:24 am</a>		</div>

		<p>More seriously, I&#8217;m surprised people are still doubtful about error checking.</p>
<p>1. Only the function doing the actual work knows all the failure modes and thus can really validate the parameters.</p>
<p>2. Those failure modes can change from implementation to implementation, making it nigh impossible for the caller to know what and how to validate.</p>
<p>3. Some validation is impossible. Trying to create a file with a unique name? You need to open it and see if the open fails. Need to know if you can read a file? Only opening and reading it can actually validate that you can.</p>
<p>4. It reduces code clutter: validation is only done in one place and it is done consistently. If the caller validates, then they&#8217;ll get it wrong half of time. (Being generous here.)</p>
<p>5. Try-and-handle-failure is a common coding practice and usually leads to clearer code, at least in some languages.</p>
<p>6. Failure is often not a local property but a global one. When something fails, the correct failure mode is usually to fail the whole operation. Most language still don&#8217;t get this right. Exception is a valiant attempt to make the error handling more global, but the true answer might lie in some form of aspect programming where the error handling policies are designed globally based on whole-program semantics.</p>
<div class=post>[<i>You are starting to conflate invalid parameters with errors in general. Be careful. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-793813">
				<div id="div-comment-793813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.voidnish.com' rel='external nofollow' class='url'>Nish</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793813">
			December 10, 2009 at 7:25 am</a>		</div>

		<blockquote><p>
  &gt; Who&#8217;s the idiot now?
</p></blockquote>
<p>All programmers are idiots some of the time, and some programmers are idiots all of the time. You cannot claim to be an experienced programmer unless you provide provable claims to have indulged in various forms of idiocy over the years!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-793833">
				<div id="div-comment-793833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793833">
			December 10, 2009 at 7:31 am</a>		</div>

		<p>Not to start a flame war, but I blame this &quot;everything throws an exception&quot; mentality on the rise of programming paradigms that get further and further away from the hardware. &nbsp;Anyway, my belief is that (at the Win32 API level) exceptions should only be raised in exceptional circumstances. &nbsp;To me, passing an invalid window handle to some function doesn&#8217;t qualify. &nbsp;Yes, this could potentially mask serious problems, but the people who don&#8217;t check return values are the same people who would catch and swallow all exceptions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-793843">
				<div id="div-comment-793843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BOFH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793843">
			December 10, 2009 at 7:33 am</a>		</div>

		<p>Here is the red, blinking exception:</p>
<p><a rel="nofollow" target="_new" href="http://haftbar.de/wp-content/guru-meditation_error.gif" rel="nofollow">http://haftbar.de/wp-content/guru-meditation_error.gif</a></p>
<p>The red box blinked at 1Hz.</p>
<p>Captcha 066; Wow, only one digit off.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-793893">
				<div id="div-comment-793893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793893">
			December 10, 2009 at 9:03 am</a>		</div>

		<p>@Gabe: Suppose the customer&#8217;s software deals with money. If some sort of corruption occurs that affects the totals, then it could run incorrectly for hours (or days, if no end-of-day accounting is performed). In a situation like that, it would definitely be better for the program to exit as soon as the error condition is detected, when diagnostics might be more useful.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-793903">
				<div id="div-comment-793903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793903">
			December 10, 2009 at 9:08 am</a>		</div>

		<p>Yeah, validation is for p*ssies!!!</p>
<p>Especially if writing web-apps! After all, in popular use &quot;injection&quot; is almost synonymous to &quot;innoculation&quot;, so allowing users to inject anything they want can only make your system healthier right?</p>
<p>Oh look! User &quot;Fred; drop user app_user cascade; &quot; logged in again!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-793923">
				<div id="div-comment-793923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793923">
			December 10, 2009 at 9:09 am</a>		</div>

		<p>I&#8217;m all for crashing and burning when in debug mode, because it makes errors obvious to the programmer.</p>
<p>However, when the app is in the user&#8217;s hand and an error happen, the operation should just fail silently instead of taking the app down in flames.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-793953">
				<div id="div-comment-793953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793953">
			December 10, 2009 at 9:17 am</a>		</div>

		<p>I will say this: parameter validation certainly makes triaging by call stacks</p>
<p>easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-793993">
				<div id="div-comment-793993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-793993">
			December 10, 2009 at 10:06 am</a>		</div>

		<p>Hey, Raymond, would yo consider a star for Gabe?</p>
<p>@John (&quot;people who don&#8217;t check return values are the same people who would catch and swallow all exceptions&quot;)</p>
<p>No, these people are e.g. dumb to know they need to check retval or e.g. either lazy. If exception is thrown at them, they would do nothing if they are dumb (don&#8217;t know they can catch) and they would do nothing if they are lazy (try/catch around each call is a much bigger pita than an if). So it clearly works better &#8211; dumb and lazy are punished ;-).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794013">
				<div id="div-comment-794013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sab39.netreach.com' rel='external nofollow' class='url'>Stuart</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794013">
			December 10, 2009 at 10:13 am</a>		</div>

		<p>&#8230; please forgive the boneheaded use of entirely the wrong name in the prior comment. Where it came from may be obvious but I&#8217;m not gonna state it because that just makes it even more embarrassing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794023">
				<div id="div-comment-794023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bd_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794023">
			December 10, 2009 at 10:25 am</a>		</div>

		<p>@Stuart,</p>
<p>I think with .NET it&#8217;s not so much that you have exceptions now, but rather, the language itself guarantees you can&#8217;t have invalid pointers.</p>
<p>The kind of validation mentioned here is the kind of stuff that would complain if you passed some arbitrary number to a function that wants a window handle. In .NET this can&#8217;t happen &#8211; you can&#8217;t turn that into a reference to a window in the first place. The language automatically does this specific kind of validation for you, so there&#8217;s no need to add it everywhere manually.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794033">
				<div id="div-comment-794033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.paulbetts.org' rel='external nofollow' class='url'>Paul Betts</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794033">
			December 10, 2009 at 10:39 am</a>		</div>

		<p>Who says you can&#8217;t have it both ways? Run it normally, it returns an error, but run it under App Verifier, and it blows up. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-brantgurga odd alt thread-odd thread-alt depth-1" id="comment-794043">
				<div id="div-comment-794043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brant+Gurganus' rel='external nofollow' class='url'>Brant Gurganus</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794043">
			December 10, 2009 at 10:45 am</a>		</div>

		<p>I think the issue isn&#8217;t so much parameter checking or not parameter checking&#8230; it&#8217;s what you do about it. You want the issue fixed so fail early and fail fast. That&#8217;s why you do parameter checking. You don&#8217;t not do paramter checking and sometimes work by accident and not work other times. It&#8217;s more about error detection than whether parameters are validated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794083">
				<div id="div-comment-794083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794083">
			December 10, 2009 at 10:58 am</a>		</div>

		<p>I think it&#8217;s important to differentiate between errors that occur by virtue of using invalid input in the normal course of operations vs. the actual error of passing invalid input itself. I always preferred validating parameters and throwing some InvalidArgument exception, rather than relying on the fact that passing an out-of-range value is going to wind up causing an exception/fault down the line.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794103">
				<div id="div-comment-794103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Olivier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794103">
			December 10, 2009 at 11:23 am</a>		</div>

		<p>@Mike : injections in websites are essential! They are here to transform a normal and boring website into a social network where everybody can contribute to it :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794113">
				<div id="div-comment-794113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794113">
			December 10, 2009 at 11:28 am</a>		</div>

		<p>Paul Parks: Yes, I wrote my comment somewhat tongue-in-cheek. However, there is nothing more annoying than a program crashing due to some irrelevant, inconsequential error. Remember, crashing not only causes the user to lose any unsaved data, but it also leaves any open files in an unknown state. As long as the state is going to be unkown in either case, you may as well let the user decide what to do.</p>
<p>Of course, for security reasons, you might want to immediately crash at any sign of damage. Nothing makes it easier for malware to invade your program than trying to cover up faults like buffer overflows.</p>
<p>So let&#8217;s say that you&#8217;ve just spent the last few months typing your document in your word processor and decide to save it for the first time. But when you tell it where to save you accidentally give it the name of an existing folder, causing an error that the author of the program never anticipated.</p>
<p>Would you rather that it crash that instant, or just ignore the error and let you think your document is saved? Of course it&#8217;s horrible to let the user think their document is saved when it&#8217;s not, but at least it gives them another chance. Otherwise your document is gone and there&#8217;s nothing you can do about it!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794123">
				<div id="div-comment-794123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sab39.netreach.com' rel='external nofollow' class='url'>Stuart</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794123">
			December 10, 2009 at 11:29 am</a>		</div>

		<p>@bd_ &#8211; partly true but not entirely. There are all kinds of checks that you might need to do that aren&#8217;t enforced by simple typesafety.</p>
<p>The most obvious is null-checks, because .NET doesn&#8217;t support non-nullable types. A method that requires its parameters not be null is supposed to check each of them and throw an ArgumentNullException if it is.</p>
<p>Then there are all kinds of semantic requirements like &#8216;this method accepts a Stream argument and the stream that&#8217;s passed in must not be closed&#8217;.</p>
<p>In my own code I&#8217;m certainly MORE than fallible in this regard, but at least there&#8217;s a clear best practice that addresses both sides of the concern, in the .NET world. In a world of error codes it&#8217;s &#8216;EITHER do parameter validation OR crash&#8217;. In the .NET world you get to have your validation and eat your crash too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794133">
				<div id="div-comment-794133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lucas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794133">
			December 10, 2009 at 11:32 am</a>		</div>

		<p>In terms of writing code that&#8217;s easy to debug, the obvious approach is to always check error codes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jamescurran odd alt thread-odd thread-alt depth-1" id="comment-794143">
				<div id="div-comment-794143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Garry Trinder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794143">
			December 10, 2009 at 11:32 am</a>		</div>

		<p>I always question redundant parameter checking. &nbsp;Given the following:</p>
<p>string MakeUpper(string str)</p>
<p>{</p>
<p>&nbsp; if (str == null)</p>
<p>&nbsp; &nbsp; throw NullReferenceException();</p>
<p>&nbsp; &nbsp;return str.ToUpper();</p>
<p>}</p>
<p>Now, if you were to remove the parameter check, and you passed a null, you will still get the exact same error (on the same line number)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jamescurran even thread-even depth-1" id="comment-794153">
				<div id="div-comment-794153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Garry Trinder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794153">
			December 10, 2009 at 11:36 am</a>		</div>

		<p>Also, this reminds me of a discussion I had on two different projects. &nbsp;On both, the project manager said &quot;the application will be running 24&#215;7 &#8212; it cannot crash, so we must have a top-level try/catch around the entire thing&quot;</p>
<p>My respond &#8211; &quot;No. &nbsp;since it cannot to allowed to stop, any problem which might cause it to throw an exception must be found and fixed immediately &#8212; hence, no catch&#8230;.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794163">
				<div id="div-comment-794163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gaspar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794163">
			December 10, 2009 at 11:39 am</a>		</div>

		<p>@Marquess, Oh god please no. &nbsp;I make typos and I don&#8217;t like being struck by lightning. &nbsp;=)</p>
<p>To me it sounds like a NIMBA (Not in my back yard) issue. &nbsp;The people complaining now never had to deal with most of the issues caused by non-validation. &nbsp;</p>
<p>My personal preference has always been that for a USER the application should never crash, it should exit as gracefully as possible and hopefully save all needed state.</p>
<p>Where is the benefit to the USER if a program crashes? &nbsp;From the average USER perspective, they just lost their work and it is someones fault.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794173">
				<div id="div-comment-794173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gaspar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794173">
			December 10, 2009 at 11:42 am</a>		</div>

		<p>@JamesCurran 1: &nbsp;That is a perfect example of bad error handling.</p>
<p>@JamesCurran 2: &nbsp;I think your solutions is what should be implemented most often. &nbsp;I still think that in many cases you should have a top level try/catch, but only to allow for a graceful exit instead of a &quot;Your program is done, hit OK.&quot; message box.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794203">
				<div id="div-comment-794203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794203">
			December 10, 2009 at 11:53 am</a>		</div>

		<p>A standard way of injecting foreign code is to pass invalid data and force a crash or overwrite the stack. If you don&#8217;t check arguments or return codes then don&#8217;t be surprised that your application gains publicity for having exposing a stupid exploit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794213">
				<div id="div-comment-794213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794213">
			December 10, 2009 at 12:02 pm</a>		</div>

		<p>In a world where the callee shares the caller&#8217;s address space, it makes sense that a bad pointer would cause a crash. &nbsp;But I think it&#8217;s wrong to compare this with certain parts of the OS. With a syscall, it makes more sense for the kernel to check your buffer and return an error if it&#8217;s not valid or points to a kernel-only page (for example syscalls that return EFAULT in the Unix world). &nbsp;Similar reasoning ought to apply for things like file handles and other handles to kernel objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794233">
				<div id="div-comment-794233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794233">
			December 10, 2009 at 12:10 pm</a>		</div>

		<p>A good example is IsBadxxxPtr, which was invented in Windows 3.1 for parameter validation. Now it is recommended that it should not be called. To be honest, part of it is because MS did a poor implementation when they ported it to Win32, the problems of which are well-known now, but guess what the other reason is?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794273">
				<div id="div-comment-794273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wojciech Gebczyk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794273">
			December 10, 2009 at 12:58 pm</a>		</div>

		<p>(NR1 star) &quot;The answer is actually simple: when running for your QA dept, it should crash immediately; when running for your customer, it should silently keep going.&quot;</p>
<p>&quot;it should silently keep going&quot;&#8230; yes! It&#8217;s brililant! excellent!</p>
<p>OS should record each application&#8217;s last minute of it&#8217;s live and in case of failure windo content should be discarded and media player should start playing recorded content in loop.</p>
<p>That would be REAL and TRUE &quot;silently keep going&quot; ultimate solution. :&gt;</p>
<p>NR1 &#8211; Not Raymond One</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794283">
				<div id="div-comment-794283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794283">
			December 10, 2009 at 1:02 pm</a>		</div>

		<p>I&#8217;d say one should understand where are borders of the subsystem. On the borders do parameter validation, inside get code right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794323">
				<div id="div-comment-794323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794323">
			December 10, 2009 at 1:39 pm</a>		</div>

		<p>I think parameter validation is very good indeed &#8212; improves your application&#8217;s (or OS) security. Whether you implement that by error codes or exceptions (eg vaguely useful ones, not a generic UAE), who cares, grab your soapbox and head to the park and join the line next to the Mac vs Windows people.</p>
<p>@Mark: To nitpick a little: IsBadPtr does work as advertised some of the time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794333">
				<div id="div-comment-794333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">microbe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794333">
			December 10, 2009 at 1:42 pm</a>		</div>

		<p>It&#8217;s not a simple question, as it&#8217;s really case by case.</p>
<p>But the bottom line is, if a wrong parameter could affect the OS&#8217;s stability, then it should be validated, otherwise feel free to kill the application.</p>
<p>I imagine Windows 3.x wasn&#8217;t protected enough from user errors (only 3.1 had protected mode, and probably not as isolated as now due to the DOS legacy), so validation was probably more important.</p>
<p>So, both are right, depending on the situation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794343">
				<div id="div-comment-794343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794343">
			December 10, 2009 at 1:56 pm</a>		</div>

		<p>I&#8217;m not sure anyone who doesn&#8217;t work on low-level OS frameworks really understands this issue.</p>
<p>Both of the views Raymond (proxily) expresses are valid. The tradeoff is performance.</p>
<p>Validation takes time, but it&#8217;s worth doing if the consequences of not doing it are severe enough. If you crashed in Windows 3.1 or other OSes of similar vintage, the entire system went down, and maybe trashed the disk too, which is a pretty severe consequence.</p>
<p>If you crash on a modern OS, you&#8217;re taking down the application only, so it&#8217;s less valuable. The danger with validation is that apps begin to routinely pass crap into the APIs, and the developers may not realize it.</p>
<p>Note that you have no choice but to validate incoming handles received from a different process (or handles transmitted from user to kernel). Anything less is a security problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794353">
				<div id="div-comment-794353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jolyon Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794353">
			December 10, 2009 at 2:18 pm</a>		</div>

		<p>I&#8217;m glad someone mentioned the Guru Meditation.</p>
<p>And yet also I wish they hadn&#8217;t so that I might have had the pleasure. &nbsp;:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794373">
				<div id="div-comment-794373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">avek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794373">
			December 10, 2009 at 3:06 pm</a>		</div>

		<p>I think it&#8217;s hardly fair to compare UAEs of those days past and exceptions.</p>
<p>Exceptions of today unwind stacks partially, form a types hierarchy with unrestricted subdivision, can contain arbitrary data in their instances which will travel from the error point to the error handling point automatically.</p>
<p>UAE box was bad because it could do nothing of these features, not just because it crashed the program. It didn&#8217;t let partially undo work or analyze the failure in great detail. The only solution to local problem (memory access error) was through the global state (program termination), and that couldn&#8217;t be changed.</p>
<p>So throwing exceptions on bad input in &quot;modern&quot; languages just isn&#8217;t the all-or-nothing it was before. Exceptions are not the same thing as crash&amp;burn, instead they are configurable, in the range from the end of the world to minor nuisance. But still, the explicit parameters validation doesn&#8217;t go anywhere. Without it, it&#8217;s usually not possible to obtain meaningful exceptions.</p>
<p>For instance, in JamesCurran&#8217;s example, the parameter check doesn&#8217;t really do anything. But if we change it to throw ArgumentNullException instead, the situation changes. Now we know that the caller of the function has given it something untasty, it&#8217;s not just some bug within the function itself. So some meaningful recovery can be done in the caller, or in the caller of caller, or somewhere else above, like obtaining argument value from some other source and calling the function again.</p>
<p>The further up the stack from the call, though, the less meaningful for potential handler ArgumentNullException will become. Would be even better if it was some completely custom exception type MissingValueYzwException, not one of the predefined classes. The simplest way to get such a custom exception that I know of is a parameters check.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794383">
				<div id="div-comment-794383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794383">
			December 10, 2009 at 4:16 pm</a>		</div>

		<p>Sm, I agree. The old problem wasn&#8217;t that validation wasn&#8217;t going on as such, the problem was that things weren&#8217;t validated properly before entering the kernel. And we still have that problem with us today, although to a much smaller extent. Half the time Windows Update tells me to install a patch, it is because somewhere a system function didn&#8217;t validate its parameters correctly, allowing applications to get higher privileges or crash the whole system, although in a cooperative multitasking environment that is already possible anyway. Still, checking parameter calls restricts the amount of damage you can do, even accidentally, greatly.</p>
<p>Furthermore, I posit that the current exceptions are actually more like returning an error code than like a random crash, since today exceptions can be typed, can unwind the stack, can be caught so you can do something about it, can be checked so you know if you&#8217;re handling them correctly, and cannot be silently ignored like error return codes. On the whole I think life would be a lot more pleasant if the compiler would check if you check your return codes properly, since it&#8217;s way too easy to simply ignore the result of a function call. We all promise ourselves at new year not to do that, but you know how it is. You get an idea on how to solve something, you code up a first try, you test it a bit, you forget that you didn&#8217;t check the result properly, and presto: a potential bug leaked into production code.</p>
<p>Simon, Jolyon: I would love it if the windows crash dump tool were restyled to look like the guru meditation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794003">
				<div id="div-comment-794003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sab39.netreach.com' rel='external nofollow' class='url'>Stuart</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794003">
			December 10, 2009 at 10:10 am</a>		</div>

		<p>Coming from the .NET world, seems to me the only reason these two views are incompatible at all is the limitation of the technology of error codes (as opposed to exceptions). (If I remember rightly, Eric has strong views on error codes *in general* as opposed to exceptions, so I&#8217;m making no comment on the *overall* tradeoffs, just the ones applicable to this particular question)</p>
<p>The problem with error codes is that the default action in the case of an inept programmer is that the code gets ignored. With exceptions, the default action in the case of an inept programmer is that the application blows up.</p>
<p>So in a world which supports exceptions, the answer is &quot;of course you should do parameter validation, *so that* you can make the application blow up when the parameters are wrong&quot; &#8211; and incidentally pass along a helpful message in debug mode telling the programmer which parameter they passed was incorrect.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794403">
				<div id="div-comment-794403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [Visual C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794403">
			December 10, 2009 at 6:19 pm</a>		</div>

		<p>False dichotomy (as Paul Parks has observed).</p>
<p>Raymond&#8217;s post presumes that:</p>
<p>(1) Use of an invalid parameter causes an immediate spectacular crash.</p>
<p>(2) Bailing out with an error code causes the operation to continue and succeed.</p>
<p>The disadvantage of #1 is that some problems might have been recoverable but weren&#8217;t recovered. &nbsp;The disadvantage of #2 is that programmers might not become aware of the problem even though it occurs frequently during development. &nbsp;Hence the disagreement on inclusion of error correction.</p>
<p>But the basis for both sides of the argument is totally bogus, because both ignore the substantial class of errors that corrupt state which causes a failure later (and Murphy&#8217;s Law implies in seemingly unrelated code).</p>
<p>Definitely the parameters should be validated and there should be entries made in an event log that cannot be cleared by any user-mode program (let it roll over). &nbsp;And encourage teams to include &quot;no validation failures in the event log&quot; as a mandatory part of certification (perhaps as a Windows Logo requirements).</p>
<p>Wait a sec&#8230; Windows already does all of that except the encouragement part. &nbsp;It&#8217;s called a &quot;checked&quot; build. &nbsp;Imagine that!</p>
<p>In my opinion, public enemy #1 of Windows users is failure to use a checked build for WHQL and Windows Logo testing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794053">
				<div id="div-comment-794053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://catphive.net' rel='external nofollow' class='url'>Brendan Miller</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794053">
			December 10, 2009 at 10:46 am</a>		</div>

		<p>I think the main thing is that the fact of an error is recorded *somewhere* that a dev can look at when he&#8217;s debugging. At my work they generally want us to just have extensive logs, which works ok, although it&#8217;s not my favorite approach.</p>
<p>I tend to like validating parameters with assertions. This is especially helpful if you write your own assertion macros that include stack traces, and both the expressions and values being compared. That way something like ASSERT_EQUAL(x,y) can give you a lot of information about why it failed.</p>
<p>The nice thing about assertions is they dovetail with unit testing. It&#8217;s like mixing your tests with the code itself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794183">
				<div id="div-comment-794183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794183">
			December 10, 2009 at 11:48 am</a>		</div>

		<p>@Gabe: Your point is valid. That&#8217;s why I said &quot;exit&quot; rather than &quot;crash,&quot; although I do contend that in some situations the only thing an app should do is crash. It&#8217;s better, however, to exit as gracefully as possible, with the caveat that data may be corrupted. There are examples of software that cannot fail (life support, flight control, etc.), but even then the software should only continue to function while causing lights to flash and klaxons to blare. I mainly object to the notion of *silent* error recovery.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794423">
				<div id="div-comment-794423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lawrence</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794423">
			December 10, 2009 at 7:51 pm</a>		</div>

		<p>I make the distinction between &#8216;my own app&#8217; and &#8216;anything else&#8217;.</p>
<p>If I&#8217;m writing a function in my app and it&#8217;s only my app that calls it, I can choose whether I want parameter validation (typically I will use Assertions &#8211; so they die in debug but disappear in release)</p>
<p>If I&#8217;m writing a function that is either called by or calls anything third party, I will validate everything, always. No third party code is going to crash MY APP if I can help it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794433">
				<div id="div-comment-794433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794433">
			December 10, 2009 at 8:08 pm</a>		</div>

		<blockquote><p>
  &gt; No third party code is going to crash MY APP if I can help it.
</p></blockquote>
<p>Hang on, I&#8217;m just going to call CreateRemoteThread()&#8230;..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794443">
				<div id="div-comment-794443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794443">
			December 10, 2009 at 8:33 pm</a>		</div>

		<blockquote><p>
  To nitpick a little: IsBadPtr does work as advertised some of the time.
</p></blockquote>
<p>Despite the flak it gets, I really like IsBadPtr(), I always have these enabled in my debug builds, they&#8217;re great for catching mistakes made during code changes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794303">
				<div id="div-comment-794303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794303">
			December 10, 2009 at 1:15 pm</a>		</div>

		<p>Yuhong Bao: because IsBadxxxPtr can *never* work. &nbsp;Implementation details are irrelevant.</p>
<p>Some things have to be crash-on-access, like invalid pages. &nbsp;Some things have no dependable way to detect an error, like PostMessage. &nbsp;Win32&#8217;s ABI by definition doesn&#8217;t &quot;crash and burn&quot;, which is what makes programming it in Assembly as straightforward as VB.</p>
<p>However, speaking of conflating errors with validation, isn&#8217;t sending a message to a closed window an error? &nbsp;It&#8217;s not something you can validate beforehand&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794453">
				<div id="div-comment-794453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794453">
			December 10, 2009 at 9:16 pm</a>		</div>

		<p>What I want to know is that why the default behaviour in .NET is to <em>ask the user</em> whether to continue in the case of an unhandled exception. WTF??</p>
<p>Parameters should always be validated, because sometimes an invalid parameter WON&#8217;T cause a crash.</p>
<p>Whether to crash or not should be decided on a case-by-case basis. If I try to delete a file that isn&#8217;t there, it is hard to see why the app should halt. If I get a combination of parameters that should never happen (ie an undefined state), it is hard to see why the app should be allowed to continue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794463">
				<div id="div-comment-794463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mordy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794463">
			December 10, 2009 at 10:15 pm</a>		</div>

		<p>if your function is likely to be used by idiots, then you have to validate incoming parameters or you too are an idiot&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794473">
				<div id="div-comment-794473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://fukanchik.ru/' rel='external nofollow' class='url'>sergey</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794473">
			December 10, 2009 at 11:50 pm</a>		</div>

		<p>Of course both opinions are correct. You should add parameter check in kernel functions of win31 because when win31 application fails in kernel function some important memory will be overwritten or something&#8230; and entire OS becomes unusable. User angry.</p>
<p>With separate memory for processes and all that overall security in winnt-based systems it is of course better to fail and display flashy dialog box. The only application will fail. The OS and other applications will continue to work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794533">
				<div id="div-comment-794533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RobO (It's not you, it's me)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794533">
			December 11, 2009 at 7:38 am</a>		</div>

		<p>Taken collectively, these posts simply prove the title of the blog entry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794543">
				<div id="div-comment-794543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794543">
			December 11, 2009 at 7:49 am</a>		</div>

		<p>Killer{R}:</p>
<p>This is not utopia, it&#8217;s an essay. &nbsp;Don&#8217;t you have a blog?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794593">
				<div id="div-comment-794593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794593">
			December 11, 2009 at 11:25 am</a>		</div>

		<p>@porter:</p>
<p>&#8220;Hang on, I&#8217;m just going to call </p>
<p>CreateRemoteThread()&#8230;..&#8221;</p>
<p>Add &#8220;Deny PROCESS_VM_READ|PROCESS_VM_WRITE|PROCESS_CREATE_THREAD&#8221; for OWNER_RIGHTS SID. Works only in Windows 7/Vista SP2+, though&#8230;</p>
<div class=post>[<i>I see your wall and raise you a ladder: WRITE_DAC. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-794503">
				<div id="div-comment-794503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://killprog.com' rel='external nofollow' class='url'>Killer{R}</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794503">
			December 11, 2009 at 6:51 am</a>		</div>

		<p>Any input parameter can take some set of values. Lets split that set into 2 subsets &#8211; &#8216;valid&#8217; and &#8216;invalid&#8217;. &#8216;valid&#8217; subset contains definetly more than one value, thats why he have input parameter, but not hardcoded constant.</p>
<p>But the border between that &#8216;valid&#8217; and &#8216;invalid&#8217; sets is not clean and very fuzzy. Usual parameters &#8216;validation&#8217; means that you check that passed parameter will not cause underlying functional that you&#8217;re using to terminate your application. For exampe if your function accepts some pointer you probably will check it using IsBad***Ptr so you can ensire that accessing it will not cause AV, because underlying functional &#8211; OS memory managment will raise SEH or segmentation fault if pointer invalid from its point of view.</p>
<p>But stop. It means you&#8217;re checking that passed parameter is not valid for logic of underlying functional, but this check will not prevent using of parameter that acceptable by underlying functional, but not acceptable by YOU APPLICATION logic. It means that not all &#8216;valid&#8217; subset you accepted is really &#8216;valid&#8217; for &#8216;business&#8217; logic you implemented inside your function or/and in you whole app. For example it can be valid pointer, but it points to some memory that should be modified by current logic execution flow. Or you specified some HBRUSH handle to close, but due to some logic error this HBRUSH handle value still will be used by someone else.</p>
<p>You can tell &#8216;yeh, user will see some rendering bug and thats all&#8217;, but now lets go to question what is the purpose of your program to do?</p>
<p>If parameter can be &#8216;invalid&#8217; from underlying API point of view, then this means that parameter under some curcomstances can take some random values that can be &#8216;valid&#8217; for your validator, but not valid for real application business logic.</p>
<p>Lets return to wrong HBRUSH. If you close &#8216;valid&#8217; HBRUSH that should be really closed now then you will get rendering bug. If this is a just some winamp visualisation plugin &#8211; this really doesn&#8217;t matter.</p>
<p>But you you&#8217;re writing some graphical editor this means that it can render wrong image. Is this a good price for application not crashed previously? Or is it a good price for billing application to overpay some 10^n $$ to client account instead of showing fatal error some time ago, when &#8216;invalid&#8217; paramter was passed, but silently &#8216;filtered out&#8217; by your validator?</p>
<p>Of cause, you may switch application to &#8216;debug&#8217; mode and test it enough with you QA. But user will not work on you QA machines and system, and there can remain bugs that you didn&#8217;t find.</p>
<p>So I think the simple answer for &#8216;to validate or not to validate?&#8217; question is what will give user much more problems in result of invalid parameter &#8211; if application crash is more &#8216;expensive&#8217; than a silent logic error &#8211; then you may hide you exceptions, and work until system will actually be powered off. But if logic error can potentially cause much more &#8216;damage&#8217; than simple crash &#8211; then you should crash. And get a report about a bug from user and fix it.</p>
<p>Yep. This is utopia, i know ;(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-794663">
				<div id="div-comment-794663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-794663">
			December 12, 2009 at 12:08 am</a>		</div>

		<p>To go off in another direction, error handling in Erlang always sounded neat. An Erlang application will typically contain lots of lightweight threads (which Erlang calls processes, because they don&#8217;t share state). Processes might crash, but there are other processes that watch them. These watchdog processes decide what to do &#8211; they might restart the failed process, they might try something different, or they might bring down the whole subsystem. I think by default, linked processes bring each other down. What that has to do with parameter validation, I don&#8217;t know, but I think it&#8217;s cool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-795213">
				<div id="div-comment-795213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Spock</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-795213">
			December 14, 2009 at 8:58 pm</a>		</div>

		<p>@Gabe</p>
<p>Your comments indicate what I believe to be an all too common, but erroneous assumption. That is; the worst thing a program can do is crash. This is not the case, The worst thing a program can do is continue to run with its internal state corrupted. I work in SCADA software, we call this kind of situation the &quot;pour molten steel on someone&#8217;s head&quot; scenario. If I have written a function and it is called with an invalid parameter, how can I safely continue? The call indicates a programming error, and the only safe recourse is to abort at this point. Obviously, this issue is not as important in every industry, but I&#8217;d still rather Word crashed on me than corrupted my data after running in an invalid state.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-795723">
				<div id="div-comment-795723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-795723">
			December 16, 2009 at 12:03 am</a>		</div>

		<p>Spock: Why not let the human decide if the program should crash or not? If I have lots of unsaved changes, I want Word to have a chance to save them before dying. On the other hand, if I have a large document with only minor unsaved edits, I might prefer it crash than corrupt my huge document.</p>
<p>As for SCADA software, I work in the electric power industry. We write our software to continue after exceptional conditions, retry, or restart if it has to. The very last thing we want to do is crash the system!</p>
<p>Consider the case of the Bright Field, a 69,000 ton freighter that plowed into a New Orleans mall 13 years ago. While navigating the Mississippi river, an oil pump on the engine failed, causing the engine&#8217;s computer to cut power. With the sudden loss of power, the ship couldn&#8217;t maneuver, and kept going where it was headed &#8212; right towards a moored casino boat, a hotel, and a mall.</p>
<p>In this case, a computer made the ship literally crash to avoid corrupting the engine due to it running in an invalid state. I&#8217;m willing to bet that there are at least several hundred people who wish the computer gave the pilot a dialog that said &quot;Bad engine state &#8212; crash or keep running with bad state?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-796003">
				<div id="div-comment-796003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AdamWu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-796003">
			December 16, 2009 at 6:04 pm</a>		</div>

		<p>Raymond, I don&#8217;t agree. From what you described, parameter validation isn&#8217;t out of fashion at all &#8212; it is just the bar of error checking and handling is raising.</p>
<p>Let me put it this way: making system calls are like entering some sort of secured area.</p>
<ol>
<li>With no parameter validation, it is like to let everyone in, even if they carry a gun or bomb.</li>
<li>
<p>With basic parameter validation, a security screening is performed and persons with dangerous items are turned away.</p>
</li>
<li>
<p>But, that is not enough. For the bad guys, we want not only deny them of entrance, but also trigger &quot;big red alarms&quot;, catch them and put them in jail.</p>
</li>
</ol>
<p>To achieve the latter, we need parameter validation, and a good one.</p>
<p>For example, a program may close a handle, and later tries to use it again. To ensure this behavior is caught, the kernel should not only validate input handle, but also avoid reusing handles. Otherwise, if other files are opened in between and got the recycled handle, the program may get pass the handle validation, and corrupt data files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-796053">
				<div id="div-comment-796053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Spock</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-796053">
			December 16, 2009 at 11:34 pm</a>		</div>

		<p>@Gabe</p>
<p>I deliberately simplified the situation to demonstrate the point. SCADA software needs 100% up-time, so it is necessary to have solutions to the inevitable programming bug. In our case this achieved by handling exceptions at defined component boundaries (an entire module is unplugged and re-plugged in essence), and via redundancy. Redundancy is the primary mechanism by which the &quot;cannot continue safely&quot; situation is handled. The entire process is restarted while the standby server/s take over. This has the added advantage of handling hardware failure as well. In the case of Word, the situation has already been handled by having a hidden incremental backup that is stored for this very situation. When the application crashes I can simply restart and &quot;recover&quot;. In this instance it is much better to crash then to carry on risking data corruption of the entire file. Redundancy would have saved your freighter as well, and is standard practice in flight control systems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-796063">
				<div id="div-comment-796063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Spock</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091210-00/?p=15713#comment-796063">
			December 16, 2009 at 11:51 pm</a>		</div>

		<p>@Gabe</p>
<p>Actually, I missed the point of your freighter example. The computer system did not crash, leaving the crew unable to operate the boat; an engineer designed the system to shut down the engine in the advent of a pump failure. That there was presumably no &quot;operator override&quot; available was an engineering oversite. I do get the allusion to the fact that shutting down a system (crashing) may cause greater harm then continuing to run in a potentially dangerous state, but as I mentioned in my previous post, redundancy is designed to solve this problem. In the example of the freighter, they would have needed a redundant engine (may not be practical), but in software systems an extra server is not particularly onerous. Allowing the user the choice to continue has potential benefits if we assume that the software is always &quot;manned&quot; (i.e., not so good for server processes etc). I think we may have strayed a long way of topic here. My only point was to say that crashing is not always the worst thing, and try{}catch(&#8230;){} is your worst enemy.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>