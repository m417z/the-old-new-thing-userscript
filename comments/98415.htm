<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (30)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-michael-ratanapintha even thread-even depth-1 parent" id="comment-1331635">
				<div id="div-comment-1331635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Michael+Ratanapintha+%28ex-Microsoft%29' rel='external nofollow' class='url'>Michael Ratanapintha (ex-Microsoft)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331635">
			April 2, 2018 at 7:15 am</a>		</div>

		<p>I look forward to your explaining the branch delay slot (and the branch if likely instructions if Windows used them). That will be &#8220;fun&#8221;!</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1331655">
				<div id="div-comment-1331655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331655">
			April 2, 2018 at 7:18 am</a>		</div>

		<p>Maybe Raymond will explain what happens if you get interrupt in the branch delay slot. I got a dumb/wrong answer in grad school.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1331855">
				<div id="div-comment-1331855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://os161.eecs.harvard.edu' rel='external nofollow' class='url'>David Holland</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331855">
			April 2, 2018 at 4:57 pm</a>		</div>

		<p>If you get a trap (interrupt, TLB miss, whatever) in a delay slot, the processor rolls back to the beginning of the branch instruction, so afterwards the branch gets restarted. There&#8217;s a flag in one of the supervisor status registers that tells the kernel what happened if it needs to know. (Which it might, e.g. for emulation of floating point instructions.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1331965">
				<div id="div-comment-1331965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331965">
			April 3, 2018 at 1:21 pm</a>		</div>

		<p>Which nicely explains why a conditional branch in a delay slot is undefined despite appearing to work (my Google-fu has limits).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even thread-odd thread-alt depth-1 parent" id="comment-1331645">
				<div id="div-comment-1331645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331645">
			April 2, 2018 at 7:16 am</a>		</div>

		<p>I presume the calculus for not doing 64bit support at the time was that the ram wasn&#8217;t available and the extra memory needed for the 64bit structures wasn&#8217;t worth it?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1331705">
				<div id="div-comment-1331705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331705">
			April 2, 2018 at 10:41 am</a>		</div>

		<p>Also, you probably don&#8217;t want to make developers (both Microsoft and ISV) do two really hard things to a code base at the same time: Port to a radically different architecture + port to a new pointer size.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1331735">
				<div id="div-comment-1331735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331735">
			April 2, 2018 at 12:06 pm</a>		</div>

		<p>Rationale for why MIPS added 64-bit support when they did straight from the horse&#8217;s mouth: <a href="http://yarchive.net/comp/64bit.html" rel="nofollow">http://yarchive.net/comp/64bit.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude odd alt depth-3 parent" id="comment-1331745">
				<div id="div-comment-1331745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331745">
			April 2, 2018 at 12:19 pm</a>		</div>

		<p>The snarky programmer in me says &#8220;But if they had been writing standards compliant code in the first place!&#8221; but the realist knows that&#8217;s <b>never</b> the case in reality. Moreover I know the windows ABI changed between x86 and x64 as well.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1331755">
				<div id="div-comment-1331755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331755">
			April 2, 2018 at 12:51 pm</a>		</div>

		<p>The x86 and x64 share a lot of architectural properties, like &#8220;atomic read-modify-write operations&#8221;, &#8220;extremely forgiving of misalignment&#8221; and &#8220;has an architectural stack pointer!&#8221; This means that nearly all of your porting issues are due to the pointer size, not the architecture behaving in fundamentally different ways from what you are used to.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-5" id="comment-1331765">
				<div id="div-comment-1331765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331765">
			April 2, 2018 at 1:04 pm</a>		</div>

		<p>In all honestly I don&#8217;t think <code>intptr_t</code> and <code>uintptr_t</code> even existed at the time this port would have been made anyway. I think the assumption was that <code>long</code> would manage that. I suspect the reason both exist in the first place is because of MS&#8217; struggles with <code>LONG</code> when porting windows.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1331665">
				<div id="div-comment-1331665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331665">
			April 2, 2018 at 9:18 am</a>		</div>

		<p>&#8220;Internally, the registers are used by kernel mode as scratch variables during interrupt and exception handling&#8221; I suppose that this means that the kernel had to be careful not to leak reserved information through these registers? Or they were just used for plumbing about the current process, so no reserved stuff is handled there at all?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1331725">
				<div id="div-comment-1331725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aged .Net Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331725">
			April 2, 2018 at 10:57 am</a>		</div>

		<p>I&#8217;m betting  that concerns for co-executing malware and information leakage were not nearly so prevalent then as now.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1331835">
				<div id="div-comment-1331835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331835">
			April 2, 2018 at 3:41 pm</a>		</div>

		<p>The thing k0/k1 were intended for was the TLB miss handler. (MIPS R4000 has software-managed TLBs; not sure if this is still true for current MIPS designs.)</p>
<p>Since this is a TLB miss and thus more likely/frequent than a &#8220;true&#8221; page fault, performance was a concern, and burning 2 out of 32 registers on it was considered a worthwhile trade-off. Other interrupts and exceptions took a different route that was considered less critical, so saving a few registers, switching to a kernel stack, etc. was acceptable overhead there. Some notes and history here: <a href="http://yarchive.net/comp/software_tlb.html" rel="nofollow">http://yarchive.net/comp/software_tlb.html</a> &#8211; search for &#8220;UTLBMISS&#8221;.</p>
<p>I&#8217;m not sure whether OS kernels at the time bothered with clearing k0/k1 before returning; they potentially contain information about physical addresses and contents of user-mode page table entries, which is now (a couple decades of ingenious exploits later&#8230;) unambiguously considered a security risk but might not have been then. Either way, clearing the two registers would add 2 instructions at the end of the handler, which could probably be smuggled into the already-present branch/coprocessor delay slots. (See the two NOPs at the end of the code fragment in the post I linked to.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1331935">
				<div id="div-comment-1331935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331935">
			April 3, 2018 at 10:01 am</a>		</div>

		<p>Really interesting, thank you for the explanation.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1331685">
				<div id="div-comment-1331685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331685">
			April 2, 2018 at 10:04 am</a>		</div>

		<p>Ah I love this series. It is very interesting how these details differ for different chips</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-even depth-1" id="comment-1331695">
				<div id="div-comment-1331695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331695">
			April 2, 2018 at 10:20 am</a>		</div>

		<p>I always enjoy these CPU series but at the end I&#8217;m always glad that x86 won.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1331715">
				<div id="div-comment-1331715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331715">
			April 2, 2018 at 10:44 am</a>		</div>

		<p>oh thing brings back memories of intro-to-arch classes and xspim (the unix mips emulator)..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1331865">
				<div id="div-comment-1331865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">quiret</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331865">
			April 3, 2018 at 1:45 am</a>		</div>

		<p>A big personality at MSFT really did not want to optimize for the x86 architecture so he kept NT compatible to MIPS as big reminder: NT gotta run on everything that computes :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-p-glizniewicz even thread-odd thread-alt depth-1 parent" id="comment-1331875">
				<div id="div-comment-1331875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GL1zdA' rel='external nofollow' class='url'>GL1zdA</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331875">
			April 3, 2018 at 5:05 am</a>		</div>

		<p>I&#8217;ve read in &#8220;Inside Windows NT&#8221; that the MIPS was the reason why the address space is split this way on NT. But was NT compatibility the reason why Windows 95&#8217;s address space is split the same way (so that effectively Windows 95 memory partitioning was made MIPS compatible)?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1332035">
				<div id="div-comment-1332035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332035">
			April 4, 2018 at 12:52 am</a>		</div>

		<p>The 2GB split <a href="https://blogs.msdn.microsoft.com/oldnewthing/20170809-00/?p=96785">was also important for Alpha AXP</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1331915">
				<div id="div-comment-1331915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Euro Micelli</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331915">
			April 3, 2018 at 9:17 am</a>		</div>

		<p>So, when you said this week would be &#8220;boring topics&#8221;, that was obviously an April Fool&#8217;s joke.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1331925">
				<div id="div-comment-1331925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://e8johan.se' rel='external nofollow' class='url'>Johan Thelin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331925">
			April 3, 2018 at 9:51 am</a>		</div>

		<p>I just have to say that I really love these ISA series. I actually spent a semester at university implementing something very similar to the MIPS architecture back in the early 2000 &#8211; the JAM CPU.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1331945">
				<div id="div-comment-1331945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331945">
			April 3, 2018 at 10:11 am</a>		</div>

		<p>It&#8217;s kind of cool to have a zero register that you can always read from.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fjeldse odd alt depth-2" id="comment-1332005">
				<div id="div-comment-1332005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332005">
			April 3, 2018 at 7:36 pm</a>		</div>

		<p>That&#8217;s also the place where you can return bits to the processor once you&#8217;ve used them. It&#8217;s really quite a useful register!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1332105">
				<div id="div-comment-1332105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332105">
			April 4, 2018 at 12:34 pm</a>		</div>

		<p>It&#8217;s also really useful as a prefetch hint but I can&#8217;t remember if MIPS supported that.</p>
<p><a href="http://yarchive.net/comp/zero_register.html" rel="nofollow">http://yarchive.net/comp/zero_register.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1332525">
				<div id="div-comment-1332525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332525">
			April 9, 2018 at 9:38 pm</a>		</div>

		<p>I have no idea what you mean by a separate cached and uncached mapping</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1332545">
				<div id="div-comment-1332545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332545">
			April 10, 2018 at 8:40 am</a>		</div>

		<p>A mapping in this context is used by the processor to translate from physical addresses to virtual addresses.  It also has some flags, one of which specifies whether accesses to the memory are cached or not.  Having an uncached block of memory is useful if you want to give it to a device to perform DMA to/from.  A cached block is more useful if you want to use the CPU to read/write the block.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1332585">
				<div id="div-comment-1332585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332585">
			April 10, 2018 at 8:35 pm</a>		</div>

		<p>So &#8220;cached&#8221; is in the sense of &#8220;should I use the L2 cache&#8221;?<br />
Makes sense I guess.  Thanks!</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1332675">
				<div id="div-comment-1332675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332675">
			April 11, 2018 at 9:16 am</a>		</div>

		<p>Correct, but the cached flag means any CPU cache, not just the L2 cache.  Writing to non-cached memory with the CPU is much slower since every byte you read/write has to go out to the physical memory.  That&#8217;s why you normally use cached mappings, and in a typical program you never really think about this because all your memory is always cached and set up by the OS.  However, using cached memory makes using DMA more complex since you have to invalidate and/or flush the cache whenever you use the CPU to read/write the memory or you will get inconsistent results.</p>
<p>I should have also specified that the mapping is for translating from virtual to physical addresses as well, which from a typical programming perspective is probably the more useful way to think about it.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1332965">
				<div id="div-comment-1332965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332965">
			April 12, 2018 at 8:14 pm</a>		</div>

		<p>Thanks.  I&#8217;m so used to cached memory it never occurred to me until I read your comment that non-cached is even an option!<br />
But it makes sense: if the CPU is not the only one using the memory, than having the CPU cache things is just asking for trouble.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>