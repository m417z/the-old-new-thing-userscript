<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-979233">
				<div id="div-comment-979233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979233">
			April 20, 2012 at 12:02 pm</a>		</div>

		<p>Is it guaranteed that new&#39;d pointers are multiples of four?</p>
<div class="post">[<i>Depends on what kind of pointer, right? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-979273">
				<div id="div-comment-979273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979273">
			April 20, 2012 at 3:38 pm</a>		</div>

		<p>[This is difficult when your code doesn&#39;t control the thread creation. -Raymond]</p>
<p>Static instance of class in C++. Problem solved.</p>
<div class="post">[<i>&quot;Hey, let&#39;s do complicated stuff in DLL_PROCESS_ATTACH. What could possibly go wrong?&quot; Also, remember the super secret evil trick for making your program start up faster. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-979283">
				<div id="div-comment-979283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979283">
			April 20, 2012 at 8:21 pm</a>		</div>

		<p>Static instance of class in C++. Problem solved.</p>
<p>[&quot;Hey, let&#39;s do complicated stuff in DLL_PROCESS_ATTACH. What could possibly go wrong?&quot; -Raymond]</p>
<p>In case you might doubt what Raymond is saying here, I just spent months trying to get a third-party component supplier to fix an intermittent hang that happened only on the machines at one customer site. &nbsp;It happened because a static initializer called a function that led through a chain of 5 dlls and 20 calls, including several system calls, and then it caused the load of another dll, and bang, deadlock, because the loader lock is already held. &nbsp;This was NOT FUN.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-979263">
				<div id="div-comment-979263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979263">
			April 20, 2012 at 2:14 pm</a>		</div>

		<p>I&#39;ve never understood the point of this pattern in the first place. &nbsp;If you know you&#39;re going to need exactly one of something that&#39;s going to be used by multiple threads, the smart thing to do is to create it exactly once *before you spawn the multiple threads that are going to need it*. &nbsp;No possibility of race conditions that way, and no weird, bug-prone complexity at getting the just-in-time initialization to work right.</p>
<div class="post">[<i>This is difficult when your code doesn&#39;t control the thread creation. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-979293">
				<div id="div-comment-979293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roisin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979293">
			April 21, 2012 at 8:48 am</a>		</div>

		<p>Agreed that 1) Homemade one-time initialization in the face of multi-threading is easy to get wrong. 2) Static initialization of non POD C++ objects is dangerous.</p>
<p>But.. Isn&#39;t it a sign of an underlying weakness of the architecture of a given program / framework if there isn&#39;t a well-defined / clean / safe method of doing &quot;complex&quot; initialization / termination?</p>
<div class="post">[<i>Win32 isn&#39;t a framework. It&#39;s a bunch of building blocks. The CLR is a framework, and it handles this nicely via static class constructors. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-979303">
				<div id="div-comment-979303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mathieu Garstecki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979303">
			April 21, 2012 at 8:57 am</a>		</div>

		<p>@Roisin: it&#39;s a sign of a language that was designed before multi-thread was the norm. Any progress on that time machine yet ?</p>
<p>I believe current/future evolutions of C++ try to remedy that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-979313">
				<div id="div-comment-979313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clovis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979313">
			April 21, 2012 at 10:01 am</a>		</div>

		<p>INIT_ONCE_CTX_RESERVED_BITS &#8211; ooh, bad encapsulation leakage &#8211; I foresee a world of compatibility pain in Windows 8+n (where n &gt;= 0) when the kernel folks want some of those bits back, but app writers have taken the lot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-979323">
				<div id="div-comment-979323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979323">
			April 21, 2012 at 12:23 pm</a>		</div>

		<p>Clovis: The kernel folks can never have those bits back. How would that even work? If your application was using all of the unreserved bits and the kernel wanted some of them back, what would you expect to happen? Would everybody have to write their applications to check the number of reserved bits and then allocate additional space if it wasn&#39;t enough?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-979343">
				<div id="div-comment-979343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979343">
			April 21, 2012 at 2:27 pm</a>		</div>

		<p>&quot;Also, remember the super secret evil trick for making your program start up faster. -Raymond&quot;</p>
<p>AppInit_Dlls to eagerly load everything into memory, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980043">
				<div id="div-comment-980043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-980043">
			April 24, 2012 at 11:03 pm</a>		</div>

		<p>Is the internal data masked by INIT_ONCE_CTX_RESERVED_BITS guaranteed to be 0 after initonce or do you have to mask them off every time you use the pointer?</p>
<div class="post">[<em>As it says in the documentation, the Context contains &quot;data stored with the one-time initialization structure.&quot; It returns the data you stored. Since the data you stored set the INIT_ONCE_CTX_RESERVED_BITS to zero, the value returned will have those bits set to zero. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-980393">
				<div id="div-comment-980393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Freek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-980393">
			April 26, 2012 at 7:01 am</a>		</div>

		<p>Thanks for the reference to the double checked lock.</p>
<p>While reading it I remembered seeing code like that within our software. I immediately wrote a regex to find this double checked lock and I found 5 occurrences&#8230;</p>
<p>Thanks!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>