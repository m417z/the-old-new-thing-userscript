<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-923113">
				<div id="div-comment-923113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923113">
			July 7, 2011 at 7:19 am</a>		</div>

		<p>The exercise answer is simple:</p>
<p>There is no rule that the writes will all first be to one pipe and then to the other. Disregarding the buffer, an example situation is like this:</p>
<p>Write to stdout.</p>
<p>Stdout is read.</p>
<p>Write to stderr.</p>
<p>Stderr is read.</p>
<p>Write to stdout.</p>
<p>No more reading of any of the pipes, deadlock.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923133">
				<div id="div-comment-923133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923133">
			July 7, 2011 at 7:43 am</a>		</div>

		<p>Simultaneously reading from a child process&#39;s stdout and stderr without the possibility of deadlock is tricky. &nbsp;One option is to use multiple threads. &nbsp;Another option is to use a named pipe opened with FILE_FLAG_OVERLAPPED (overlapped operations are not supported by anonymous pipes) and use asynchronous ReadFile calls along with WaitForMultipleObjects. &nbsp;Neither option is trivial.</p>
<p>Unix programmers would use select(2)/poll(2).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923173">
				<div id="div-comment-923173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Torben Nehmer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923173">
			July 7, 2011 at 8:52 am</a>		</div>

		<p>You should be able to avoid a deadlock without threads by using PeekNamedPipe, which according to MSN allows a peek into anonymous pipes as well (despite the name). Haven&#39;t tested it yet though. However, in combination with writing to the processes stdin it is quite tricky to get things right without a deadlock (if not impossible as you cannot peek into the pipes buffer as far as i know). I am currently dealing with a situation like this in Axapta 3.0, which doesn&#39;t support sane multi-threading making things &#8211; well &#8211; interesting to say the least&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923183">
				<div id="div-comment-923183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923183">
			July 7, 2011 at 8:53 am</a>		</div>

		<p>On Unix this is solved with SIGALRM, select or poll.</p>
<p>It could also be solved easily with some sort of ReadFileTimeout function or WaitForSingleObject/WaitForMultipleObjects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923223">
				<div id="div-comment-923223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923223">
			July 7, 2011 at 9:42 am</a>		</div>

		<p>This may be too simple an answer which may well be mocked.</p>
<p>Exercise 1 &#8211; it&#39;s hanging because the process is waiting for input. &nbsp;And since you&#39;ve redirected stdout/err, you never know it is waiting&#8230; you just get a blinky cursor. &nbsp;So you should see what is actually being generated and process it accordingly.</p>
<p>-customer attempts to follow the advice-</p>
<p>Exercise 2 &#8211; The bytes in stdout are emptied and the bytes in stderr are emptied before the condition occurs that requires attention. &nbsp;All you&#39;ve done is, well, nothing. &nbsp;And you fall back into the same condition in Exercise 1.</p>
<p>-customer realizes theyre going about the problem the wrong way and cleans their act up-</p>
<p>Maybe thats just wishful speculation though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923263">
				<div id="div-comment-923263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">problem solved</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923263">
			July 7, 2011 at 11:02 am</a>		</div>

		<p>Solution: Increase buffer size until bugs go away.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923303">
				<div id="div-comment-923303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Kelly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923303">
			July 7, 2011 at 11:21 am</a>		</div>

		<p>Exercise #1: If the program being created writes enough data to the standard output/error to exceed the pipe buffers then there will be a deadlock. The helper program will be waiting for the spawning program to read the data, while the spawning program will be waiting for the helper program to exit.</p>
<p>Exercise #2: The MSDN points out this specific problem. If the helper program writes enough to the standard error stream to exceed the pipe buffers then a deadlock will occur. The helper program will be stuck waiting for the spawning program to read from standard error, but the spawning program will be waiting for the program to write to standard output or close the pipes/exit.</p>
<p>MSDN points out that you can use the asynchronous methods BeginOutputReadLine or BeginErrorReadLine of the Process class to solve this issue, by asynchronously reading one stream and synchronously reading the other. (You can also asynchronously read both or put synchronously read both in separate threads)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923343">
				<div id="div-comment-923343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Timothy Byrd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923343">
			July 7, 2011 at 1:37 pm</a>		</div>

		<p>Raymond &#8211; thanks for the stock market analogy. It made me smile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923363">
				<div id="div-comment-923363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GSerg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923363">
			July 7, 2011 at 1:56 pm</a>		</div>

		<blockquote><p>
  CreatePipe(&amp;hReadStdin, &amp;hWriteStdin, NULL, 0);
</p></blockquote>
<p>Surely, SECURITY_ATTRIBUTES cannot be null? Otherwise the pipe handle will not be inherited by the child process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923383">
				<div id="div-comment-923383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923383">
			July 7, 2011 at 2:23 pm</a>		</div>

		<p>For once I can solve the exercises, but it looks like Ian got the correct answers first.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-923453">
				<div id="div-comment-923453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923453">
			July 8, 2011 at 1:13 am</a>		</div>

		<p>Stupid software apparently ate my comment, since I got no confirmation message. And of course, clicking &quot;back&quot; gives you only a blank field&quot;. Anyway:</p>
<p>The worst part about polling is that pipes are not listed as supporting wait functions ( <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms687032(VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms687032(VS.85).aspx</a> ).</p>
<p>At least now we can always use PeekNamedPipe(), since Win9x is more or less gone and even named pipes are implemented with anonymous pipes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923463">
				<div id="div-comment-923463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923463">
			July 8, 2011 at 3:45 am</a>		</div>

		<p>If he doesn&#39;t want the output of the process, why doesn&#39;t he redirect its output to NUL and/or start the process in a detached console?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923483">
				<div id="div-comment-923483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leo Davidson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923483">
			July 8, 2011 at 5:44 am</a>		</div>

		<p>PeekNamedPipe is virtually useless.</p>
<p>How do you know when to call it?</p>
<p>If you use a separate event (or other synchronization object), you might as well use that to signal when it&#39;s time to do a normal read of the pipe.</p>
<p>If you don&#39;t, you end up polling, which is terrible.</p>
<p>It really should be possible to pass pipe handles to the wait functions. Overlapped I/O is ridiculously difficult to get right if you work through all the possible cases (as Raymond has discussed in the past), unless you cheat and only read one character at a time or something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923503">
				<div id="div-comment-923503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923503">
			July 8, 2011 at 7:02 am</a>		</div>

		<p>@Medinoc: Actually, it&#39;s the other way around. &nbsp;According to the docs for CreatePipe, &quot;Anonymous pipes are implemented using a named pipe with a unique name. Therefore, you can often pass a handle to an anonymous pipe to a function that requires a handle to a named pipe.&quot;</p>
<p>And yes, it&#39;s incredibly annoying that the blog software eats comments if you don&#39;t submit them within X seconds of loading the page, for some absurdly small value of X. &nbsp;I sincerely hope somebody&#39;s informed the MSDN blogs folks about this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-923523">
				<div id="div-comment-923523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923523">
			July 8, 2011 at 7:43 am</a>		</div>

		<p>@Adam Rosenfield: Damn, I have dyslexia today. You&#39;re right, absolutely right, it&#39;s what I was trying to say in the first place.</p>
<p>About the comment eating part, I think it&#39;s linked to that captcha thing that used to be visible on the page: It&#39;s invisible now, but it guess it&#39;s that part that expires.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923583">
				<div id="div-comment-923583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923583">
			July 8, 2011 at 12:20 pm</a>		</div>

		<p>The list of objects that MSDN says WaitForSingleObject can wait on is not an exhaustive list. For example, file handles are waitable yet not on the list. So it&#39;s quite likely that named pipes are perfectly acceptable to wait on too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923623">
				<div id="div-comment-923623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leo Davidson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923623">
			July 8, 2011 at 10:29 pm</a>		</div>

		<p>@Gabe: File handles are only waitable in very specific, limited situations involving overlapped I/O, where you can already tie an event to the operation anyway.</p>
<p><a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/775014/waitforsingleobject-on-a-file-handle" rel="nofollow">stackoverflow.com/&#8230;/waitforsingleobject-on-a-file-handle</a></p>
<p>As for pipes, if they even are waitable handles, I would not use them in a wait call without knowing what their wait semantics are (i.e. when they become signalled/unsignalled). You&#39;d have to make an awful lot of assumptions to use them, and it&#39;d be behaviour which could change.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923633">
				<div id="div-comment-923633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mixedup</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923633">
			July 10, 2011 at 9:50 am</a>		</div>

		<p>Do the customers really bother you with such a simple things?!? In my project it took me a second to think &quot;gosh that&#39;ll deadlock for sure&quot; and think about asynchrony.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>