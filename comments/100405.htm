<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fjeldse even thread-even depth-1" id="comment-1372645">
				<div id="div-comment-1372645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181205-00/?p=100405#comment-1372645">
			December 5, 2018 at 8:52 am</a>		</div>

		<p>It makes a lot of sense that this is true: the pathological case where both strings have been paged out could make the comparison time exponentially longer! It&#8217;s unlikely that this would happen very often nowadays, but in the days of Windows 95 it seemed to happen quite frequently.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-pierrebai odd alt thread-odd thread-alt depth-1" id="comment-1372655">
				<div id="div-comment-1372655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/pierrebai' rel='external nofollow' class='url'>pierrebai</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181205-00/?p=100405#comment-1372655">
			December 5, 2018 at 9:16 am</a>		</div>

		<p>Actually, the reason for the slow-down is more likely the cache eviction during the random string *initialization*, not the cache eviction during access. Allocating and initializing larger string will more-likely overflow the caches, so the comparison loop will now fetch each characters from memory. </p>
<p>If the strings really are very short, maybe two will fit inside a single cache line, but that becomes false very fast. Cache lines are not big. I&#8217;m pretty sure the main culprit is the initialization. It could be tested by making the cache hot again by doing a first loop of untimed  comparisons, then doing it a second time. As long as NUMBER_OF_STRINGS does not overflow the main cache, and STRING_LENGTH is not extremely small (say, smaller than 16), it should become constant again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-paulmoore100 even thread-even depth-1 parent" id="comment-1372665">
				<div id="div-comment-1372665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/paulmoore100' rel='external nofollow' class='url'>paulmoore100</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181205-00/?p=100405#comment-1372665">
			December 5, 2018 at 9:49 am</a>		</div>

		<p>This is why it would be nice for perfmon , resource monitor etc to include cache miss / hit info (as well as instruction pipeline bubbles, branch mis predict etc). Today 100% cpu usage can mean cpu is 100% busy or CPU is 90% idle due to cache issues. Its almost impossible to find this info out</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-d-sturm odd alt depth-2" id="comment-1372675">
				<div id="div-comment-1372675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DanStur' rel='external nofollow' class='url'>DanStur</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181205-00/?p=100405#comment-1372675">
			December 5, 2018 at 11:03 am</a>		</div>

		<p>The Intel performance profiler includes that information iirc. </p>
<p>On Linux you can also use one of the valgrind suite to get the same information.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>