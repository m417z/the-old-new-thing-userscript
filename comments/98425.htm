<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1331895">
				<div id="div-comment-1331895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1331895">
			April 3, 2018 at 8:39 am</a>		</div>

		<p>In the 6502, the BRK instruction&#8217;s opcode is 0x00 ($00 in 6502 notation). This has the side effect of dropping into the debugger whenever there is a jump to a position in memory that doesn&#8217;t contain code (0 is pretty common among data or uninitialized memory, so there is a big chance that the processor will hit a zero pretty soon if something goes bad).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1331905">
				<div id="div-comment-1331905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">calvin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1331905">
			April 3, 2018 at 9:05 am</a>		</div>

		<p>Just be careful: SLL 0, 0, 0 might not work properly on some processors: <a href="https://apebox.org/wordpress/linux/545" rel="nofollow">https://apebox.org/wordpress/linux/545</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1331995">
				<div id="div-comment-1331995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://os161.eecs.harvard.edu' rel='external nofollow' class='url'>David Holland</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1331995">
			April 3, 2018 at 6:18 pm</a>		</div>

		<p>Having all-bits-zero be a valid instruction is definitely not a good idea&#8230; having it be NOP is worse. It&#8217;s easy to have a bug in your virtual memory system that results in getting pages of zeros where you intended to have code; if that happens, and you jump to that page, the processor silently executes the NOPs. Then it either (if you&#8217;re lucky) runs off the end of that chunk of memory and triggers a fatal trap, or (otherwise) gets to a non-zeroed page, where it will continue executing in some entirely unrelated code. When that code then crashes it can be very difficult to figure out what happened or how you managed to get a clearly impossible call stack.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1332015">
				<div id="div-comment-1332015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Petteri Aimonen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332015">
			April 3, 2018 at 10:22 pm</a>		</div>

		<p>Another not-good idea is how some microcontrollers such as ARM Cortex-M have vector table at 0x0000. Having null pointer be a mapped address is bad enough, having it be a mapped address that always contains lots of valid pointers is even worse. It&#8217;s easy to end up in a very confusing state when calling e.g. a virtual function on a null pointer to C++ object.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1332045">
				<div id="div-comment-1332045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332045">
			April 4, 2018 at 6:43 am</a>		</div>

		<p>The x86 has that in real mode. I&#8217;m 2 steps from the guy who formatted his hd by it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1332065">
				<div id="div-comment-1332065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Patrick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332065">
			April 4, 2018 at 7:35 am</a>		</div>

		<p>x86 realmode has the same issue, with the IVT living at address 0:0.<br />
In fact, if I&#8217;m not totally mistaken, there were special hacks in Win95 (using expand-down segments) to protect it from misbehaving applications.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1332025">
				<div id="div-comment-1332025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332025">
			April 3, 2018 at 10:53 pm</a>		</div>

		<p>0x00 was the NOP instruction on the Z80 as well (the first processor I ever got down to machine code with). Of course, not many people were putting a virtual memory system onto one of those.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1332085">
				<div id="div-comment-1332085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R P (MSFT)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332085">
			April 4, 2018 at 9:32 am</a>		</div>

		<p>I had a Z80-based S-100 box (made by Digitex) that sported 256KB of RAM and a 20MB hard drive. It was also a multi-user system, so it&#8217;s more than likely that it wasn&#8217;t using virtual memory as we know it now, but just switching between static pages on context switches.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even depth-2 parent" id="comment-1332195">
				<div id="div-comment-1332195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332195">
			April 5, 2018 at 6:51 am</a>		</div>

		<p>The Motorola 68k had both a 16-bit NOP with a specific code, and a 0x00000000 instruction that decoded to &#8220;ORI.b #0, D0&#8221; (or in C terms, &#8220;D0 |= 0&#8221;) which is which is, in fact, also a no-op.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1332205">
				<div id="div-comment-1332205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332205">
			April 5, 2018 at 7:07 am</a>		</div>

		<p>Close to a no-op, but not quite &#8211; it affected condition codes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even depth-3" id="comment-1332215">
				<div id="div-comment-1332215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332215">
			April 5, 2018 at 7:12 am</a>		</div>

		<p>Well thinking about it, it might not be a <i>complete</i> no-op: It&#8217;s possible it sets the status bits (zero, negative etc.) according to the D0 register.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1332235">
				<div id="div-comment-1332235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332235">
			April 5, 2018 at 9:31 am</a>		</div>

		<p>&gt;  The U suffix officially means &#8220;unsigned&#8221;, but this is confusing because the addition can be performed on both signed and unsigned values, thanks to twos complement. The real issue is whether an overflow trap is raised. </p>
<p>Not that this makes them a good name, but I wonder if the names come from C. C signed int overflow is undefined behavior, meaning a trap is an acceptable response (and I actually think is a /good/ response, though I&#8217;m sure that&#8217;s controversial), so the trapping ADD/SUB instructions can be used. Unsigned overflow* /is/ defined though, so it can&#8217;t trap &#8212; or rather, it could, but then it would just have to continue execution, so that&#8217;s slow &#8212; and you have to use the non-trapping ADDU/SUBU instructions.</p>
<p>I don&#8217;t know what MIPS compliers actually do, and Compiler Explorer doesn&#8217;t seem to have a MIPS option. It&#8217;d be interesting to know.</p>
<p>* Technically, the C and C++ standards say that, because it&#8217;s defined, unsigned arithmetic /can&#8217;t/ overflow, because overflow is UB. But I&#8217;m not convinced anyone uses &#8220;overflow&#8221; in that sense who doesn&#8217;t read the C/C++ standards for fun. :-)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1332365">
				<div id="div-comment-1332365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hubert Lamontagne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332365">
			April 6, 2018 at 3:43 pm</a>		</div>

		<p>I&#8217;ve definitely seen C++ code that overflows signed integers on purpose. In an emulator for the sound chip of the SNES, the calculations are done in 16-bit 2&#8217;s complement, and to get the original wraparound behavior (needed to get the wind sound in Chrono Trigger), you have to do essentially this:<br />
int32_t value = adpcm_decode();<br />
value = value &lt;&gt; 16;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1332435">
				<div id="div-comment-1332435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332435">
			April 8, 2018 at 11:12 am</a>		</div>

		<p>No you don&#8217;t &#8220;have to do&#8221; any such things. Undefined behavior is exactly that: undefined. Writing the correct code is a negligible extra amount of work and means your code will actually work.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>