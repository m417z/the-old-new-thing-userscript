<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (42)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-636563">
				<div id="div-comment-636563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636563">
			June 6, 2008 at 11:21 am</a>		</div>

		<p>I do wonder about such customers.</p>
<p>Is this what happens to the kids who would normally try to drink drain cleaner as a kid, but manage to survive to adulthood ? Then they try equally dumb things like &quot;gee, lets add 3 to some returned handle-like value and see what happens ?&quot;</p>
<p>I mean, Steve Irwin made a career out of it with poking testy animals..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636583">
				<div id="div-comment-636583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reena Agrawal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636583">
			June 6, 2008 at 11:51 am</a>		</div>

		<p>I had never noticed that process ids were multiples of 4, but seriously why would anyone even bother about trying something like that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636593">
				<div id="div-comment-636593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636593">
			June 6, 2008 at 12:07 pm</a>		</div>

		<p>Reena:</p>
<p>It&#8217;s obvious: they had a program that launched 3 other processes and needed the process ID of the third one: take your own process ID and add 3. Voila! :-)</p>
<p>(Don&#8217;t laugh. Some people think like this.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-636613">
				<div id="div-comment-636613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636613">
			June 6, 2008 at 12:26 pm</a>		</div>

		<p>As I recall, Windows CE adds a randomization factor to any handle it gives out so it has a greater chance of success in detecting handles that outlived the object.</p>
<p>In this case I would imagine adding three would point to nothing at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636623">
				<div id="div-comment-636623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636623">
			June 6, 2008 at 12:58 pm</a>		</div>

		<p>The guys who implemented that bit of code should be smacked on the head, repeatedly.</p>
<p>This is a clear violation of Curly&#8217;s Law: A variable should mean one thing, and one thing only. </p>
<p>How the h*ll dit code like this end up in something as critical as the kernel ?</p>
<div class=post>[<i>The guys who implemented the handle table were following the spec: The bottom two bits of handles are ignored. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636643">
				<div id="div-comment-636643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636643">
			June 6, 2008 at 1:50 pm</a>		</div>

		<blockquote><p>
  &quot;The guys who implemented the handle table were following the spec: The bottom two bits of handles are ignored&quot;
</p></blockquote>
<p>Then it&#8217;s a bad spec, and the guys who wrote the spec should receive the asswhooping.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636653">
				<div id="div-comment-636653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Greg D</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636653">
			June 6, 2008 at 2:42 pm</a>		</div>

		<p>I sense a pre-emptive Aaargh! comment in the future&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636663">
				<div id="div-comment-636663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://f0dder.reteam.org' rel='external nofollow' class='url'>f0dder</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636663">
			June 6, 2008 at 2:44 pm</a>		</div>

		<p>Aaargh: or perhaps developers should follow the code contract, and don&#8217;t make silly assumptions. Sometimes you do stuff, especially in kernels, for performance reasons.</p>
<p>Don&#8217;t tell me that the &quot;reserved for OS use&quot; bits in the pagetable structures shouldn&#8217;t be used by the OS, because it might break a lame driver that does manual modification of the pagetable structures :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636673">
				<div id="div-comment-636673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636673">
			June 6, 2008 at 3:01 pm</a>		</div>

		<p>&quot;Aaargh: or perhaps developers should follow the code contract, and don&#8217;t make silly assumptions.&quot;</p>
<p>Of course you need to follow the code contract, but that doesn&#8217;t excuse the stupid design.</p>
<p>&quot; Sometimes you do stuff, especially in kernels, for performance reasons.&quot;</p>
<p>Sometimes you do stuff like that, indeed. And almost every time you do it, it comes back to bite you in the arse eventually.</p>
<p>It&#8217;s far more important to have a clean, future-proof design than to try and squeeze out every last bit of performance only to find yourself having spent 6 years on the release of your next OS version with nothing to show for it but a but a slightly updated GUI, just because you had to have all those performance- and compatibility-enhancing hacks in decades before.</p>
<p>It&#8217;s just a bad case of short-term thinking. It&#8217;s a nasty habit humans have to only think of the short-term and never about long-term consequences.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636683">
				<div id="div-comment-636683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636683">
			June 6, 2008 at 3:01 pm</a>		</div>

		<blockquote><p>
  This is a clear violation of Curly&#8217;s Law: A variable should mean one thing, and one thing only.
</p></blockquote>
<p>A handle or object ID, by definition, is <em>opaque</em>. It doesn&#8217;t mean &quot;one thing&quot;. It doesn&#8217;t mean a thing, actually.</p>
<p>its 2 least significant bits, which are ignored and can be messed. Nobody should do any operation with those 30 significant bits, because there is no arithmetic defined for them. Other than comparison to NULL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636693">
				<div id="div-comment-636693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636693">
			June 6, 2008 at 3:04 pm</a>		</div>

		<p>&quot;Don&#8217;t tell me that the &quot;reserved for OS use&quot; bits in the pagetable structures shouldn&#8217;t be used by the OS, because it might break a lame driver that does manual modification of the pagetable structures :)&quot;</p>
<p>No, but you might ask yourself why that lame driver has access to those bits in the first place. Restrict access, encapsulate your data.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636703">
				<div id="div-comment-636703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gordon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636703">
			June 6, 2008 at 3:07 pm</a>		</div>

		<p>Why is it a bad spec? Because you say so?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636723">
				<div id="div-comment-636723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frymaster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636723">
			June 6, 2008 at 3:15 pm</a>		</div>

		<p>&quot;No, but you might ask yourself why that lame driver has access to those bits in the first place. Restrict access, encapsulate your data.&quot;</p>
<p>Then you get people moaning that you&#8217;re writing a nanny OS that doesn&#8217;t let Real Programmers get the control they need</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636733">
				<div id="div-comment-636733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636733">
			June 6, 2008 at 3:16 pm</a>		</div>

		<p>Poor Yuhong Bao, just trying to inform us a bit further on the subject&#8230;</p>
<p>Aaargh! shouldn&#8217;t have gone postal on that post about the &quot;accelerators for hidden controls still active&quot;. &nbsp;<em>THAT</em> was a terrible hack. &nbsp;Had I know about it&#8230; I probably wouldn&#8217;t have dared posting..</p>
<p>:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636743">
				<div id="div-comment-636743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636743">
			June 6, 2008 at 3:17 pm</a>		</div>

		<p>&quot;Why is it a bad spec? Because you say so?&quot;</p>
<p>No, because it stores 2 kinds of information in one variable. It makes things less transparent and thus it increases the risk of bugs. Changing the information stored one part may affect data the functionality of the other.</p>
<p>Suppose someone forget to mask the 2 lower bits before comparing a handle passed as a parameter to some kind of internal table. Most of the time this would be ok, because most of the time the 2 lower bits are left alone. But if some information was stored there, the compare would not find a match. Actually, with a codebase as big as Windows, I&#8217;ll bet you there is a bug like this somewhere in the OS.</p>
<p>It&#8217;s an unnecessary risk, and it&#8217;s actually easier to use it wrongly (as this and previous posts about this subject prove) than to use it right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636753">
				<div id="div-comment-636753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636753">
			June 6, 2008 at 3:19 pm</a>		</div>

		<blockquote><p>
  &quot;Then you get people moaning that you&#8217;re writing a nanny OS that doesn&#8217;t let Real Programmers get the control they need&quot;
</p></blockquote>
<p>Those Real Programmers(tm) are the same people who complain their hackish app doesn&#8217;t work on OS version n+1. They won&#8217;t be missed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636763">
				<div id="div-comment-636763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636763">
			June 6, 2008 at 3:23 pm</a>		</div>

		<p>On a rival operating system, we got tired of the compatibility issues and started carefully validating inputs and returning parameter errors (in new APIs) if we received bit values which would be otherwise ignored.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636773">
				<div id="div-comment-636773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gordon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636773">
			June 6, 2008 at 3:28 pm</a>		</div>

		<p>@Aaargh: Why isn&#8217;t the caller masking out the two bits? If the hypothetical function is expecting a handle, the low bits should be 0 when the handle is passed in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636783">
				<div id="div-comment-636783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636783">
			June 6, 2008 at 3:40 pm</a>		</div>

		<blockquote><p>
  &quot;@Aaargh: Why isn&#8217;t the caller masking out the two bits&quot;
</p></blockquote>
<p>Why should it ? As someone stated before, the handle is opaque, it&#8217;s an internal data format for use by the kernel as the kernel sees fit. You&#8217;re just passing the data you got from some other kernel function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636813">
				<div id="div-comment-636813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636813">
			June 6, 2008 at 4:04 pm</a>		</div>

		<p>&quot;I do wonder about such customers.&quot;</p>
<p>My guess is they were not doing this on purpose. Perhaps they had a table of handles and were accidentally incrementing the handles themselves instead of pointers to them when working on the table.</p>
<p>Something like that may have resulted in a lot of head-scratching because, strangely enough, some of the handles in the table still worked but others didn&#8217;t. Once the bug was found the customer may have worked out that it was only the handles that didn&#8217;t have 4 or more added to them which worked, and then asked Microsoft why that was in order to properly understand the issue (and ensure there wasn&#8217;t another problem lurking in their code).</p>
<p>Just a guess, of course. I&#8217;m sure there are lots of ways this problem could come from a valid mistake instead of something purposely doing stupid things by adding to handles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636823">
				<div id="div-comment-636823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636823">
			June 6, 2008 at 4:05 pm</a>		</div>

		<p>@Aaaargh, there is something you&#8217;re not getting. &nbsp;Maybe that&#8217;s why you&#8217;re going on this:</p>
<blockquote><p>
  Suppose someone forget to mask the 2 lower bits</p>
<p>  before comparing
</p></blockquote>
<p>NT ignores the two lower bits. &nbsp;It does NOT mean that YOU have to mask these lower bits. &nbsp;You can&#8217;t &quot;forget&quot; to mask them, you&#8217;re not supossed to be masking them at all.</p>
<p>It&#8217;s a handle. &nbsp;When you get it, the two lower bits are always zero.</p>
<p>The lower bits not having meaning when they are used internally by NT in an implementation detail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636833">
				<div id="div-comment-636833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636833">
			June 6, 2008 at 4:51 pm</a>		</div>

		<p>&quot;@Aaaargh, there is something you&#8217;re not getting. &nbsp;Maybe that&#8217;s why you&#8217;re going on this:</p>
<p>(&#8230;)</p>
<p>NT ignores the two lower bits. &nbsp;It does NOT mean that YOU have to mask these lower bits. &quot;</p>
<p>I don&#8217;t think it&#8217;s me not getting it (see my post 2 posts above yours). NT is not some magical piece of code that just magically appeared out of thin air, it was written by someone. It&#8217;s not immune to bugs, which is exactly my point.</p>
<p>NT is indeed SUPPOSED to ignore the lower two bits but SUPPOSE someone (@ microsoft, working on NT) forgets to do so, it won&#8217;t immediately show up. It might even ship with that bug (and it probably has in some place) which is exactly why this is a bad practice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636843">
				<div id="div-comment-636843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wolf Logan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636843">
			June 6, 2008 at 5:04 pm</a>		</div>

		<p>Wow, I think we&#8217;ve passed some kind of threshold here&#8230;Microsoft is now getting dinged for bugs that theoretically could exist, but have never been observed, and for which there&#8217;s no evidence of their likelihood.</p>
<p>Maybe Raymond&#8217;s &quot;preemptive snarky comments&quot; have spawned &quot;preemptive bug reports&quot;. You know, just in case it ever actually happens, someone will be able to say &quot;See? I was right!&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636853">
				<div id="div-comment-636853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">akex.r.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636853">
			June 6, 2008 at 5:47 pm</a>		</div>

		<p>Aaargh:</p>
<p>At some point, when you look down the layers of your system, you don&#8217;t have variables, just a big pool of memory.</p>
<p>It&#8217;s difficult to say memory shouldn&#8217;t be used for two things. But you could argue that a certain portion of memory should be used for a single thing throughout the life of a system&#8230; (at the extreme, basically preventing dynamic memory allocation.)</p>
<p>Nevertheless, this use of the handle would still be valid in this respect, since the first 2 bits are always used for the same thing, as are the next 30.</p>
<p>The limitation that the high level language most developers will use to access this memory can&#8217;t associate two different names with these two distinct portion of memory could be an issue when designing a language-agnostic OS&#8230; but it&#8217;s not clear to me that it should always be, especially when you have no idea what the high-level language will be down the road.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636863">
				<div id="div-comment-636863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636863">
			June 6, 2008 at 6:57 pm</a>		</div>

		<p>Aargh:</p>
<p>The bug you are afraid of (someone forgetting the mask the two low bits) is unlikely for kernel handles since all accesses to the handles quite sensibly go through a common set of routines that are pretty heavily tested. &nbsp;</p>
<p>In some rival OSes, such as the ones Chris may use, different types of kernel objects exist in different namespaces and different handle systems, so such bugs may be likely due to duplicated code to deal with opaque descriptors. &nbsp;NT has a centralized approach to handling HANDLEs (and pids), so I think you should not be so concerned about this possiblity.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636873">
				<div id="div-comment-636873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Victor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636873">
			June 6, 2008 at 7:29 pm</a>		</div>

		<p>Aaargh:</p>
<p>You&#8217;re an idiot, quit posting. Your form of argument is repeating your original statement over and over. Why don&#8217;t you go join O&#8217;Reilly on Fox? It would be an improvement.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636713">
				<div id="div-comment-636713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636713">
			June 6, 2008 at 3:10 pm</a>		</div>

		<p>&gt; &quot;A handle or object ID, by definition, is _opaque_. It doesn&#8217;t mean &quot;one thing&quot;. It doesn&#8217;t mean a thing, actually&quot;</p>
<p>Of course it means something, it&#8217;s at least a key in a table somewhere, or whatever. </p>
<p>Maybe it&#8217;s opaque to the *user* of the handle, but inside the kernel, it has to have some meaning. If it didn&#8217;t mean anything, why have a handle at all ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636883">
				<div id="div-comment-636883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://coldacid.net' rel='external nofollow' class='url'>Chris Charabaruk</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636883">
			June 6, 2008 at 11:53 pm</a>		</div>

		<p>Victor, it wouldn&#8217;t be an improvement. Because then there&#8217;d be two of them. Like attack of the pod idiots or something. :p</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-636903">
				<div id="div-comment-636903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636903">
			June 7, 2008 at 7:31 am</a>		</div>

		<p>Let&#8217;s all just stop writing code right now, because for every line of code we write, there&#8217;s a non-zero chance that a bug might be introduced.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-636923">
				<div id="div-comment-636923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reena Agrawal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636923">
			June 7, 2008 at 11:56 am</a>		</div>

		<blockquote><p>
  It&#8217;s obvious: they had a program that launched 3 other processes and needed the process ID of the third one: take your own process ID and add 3. Voila! :-)</p>
<p>  (Don&#8217;t laugh. Some people think like this.)
</p></blockquote>
<p>:-D</p>
<p>Wow!! Such a out of the box solution.. :D</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-636973">
				<div id="div-comment-636973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-636973">
			June 8, 2008 at 10:13 am</a>		</div>

		<p>What Aaargh! is trying to say is that if you have a door handle, you expect it to open or close a door, not to have some bits slapped on it that are used for other tasks.</p>
<p>@Aaargh!:</p>
<p>Give it up man, some programmers just cannot see the flaw in their own code or reasoning, they are blind to their own errors by design.</p>
<p>@Yuhong Bao:</p>
<p>Congratulations, now you are the one being pre-empted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-637023">
				<div id="div-comment-637023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-637023">
			June 8, 2008 at 6:13 pm</a>		</div>

		<p>&quot;Let&#8217;s all just stop writing code right now, because for every line of code we write, there&#8217;s a non-zero chance that a bug might be introduced.&quot;</p>
<p>As we get closer to a release of software, we get closer to that point&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-637033">
				<div id="div-comment-637033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tragedy of the commons</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-637033">
			June 8, 2008 at 10:12 pm</a>		</div>

		<p>Sigh, I fear the armchair kernel developers will have killed yet another topic for Raymond. &nbsp;</p>
<p>I wish he&#8217;d post all the would-have-been future stuff he wrote and killed off in some place that doesn&#8217;t allow comments.</p>
<p>I happened to be reading through an older entry the other day, and it&#8217;s sad how jaded Raymond has become. &nbsp;The contrast in tone is quite stark.</p>
<p>All right, I can&#8217;t hold it in any longer: anyone who is complaining about the last two bits holding extra information should just shut up and stop spewing their ignorant, stupid complaints about internal use of arbitrary parts of an arbitrary number. &nbsp;Clearly none of you has ever read (or just plain has not understood) a single historical article Raymond has written, because every time, some clown says, &quot;why was this done in such a stupid way&quot; and every time the answer is &quot;because it had to run on a toaster with a 2 MHz processor and 5 bytes of RAM.&quot; &nbsp;Bonus points if the person also complains about how bloated software is nowadays.</p>
<p>Ok, so I now understand what it&#8217;s like to be in Raymond&#8217;s position, constantly inundated with ignorant comments insulting his work. &nbsp;It looks like I&#8217;m jaded too now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-637043">
				<div id="div-comment-637043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Speck Tator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-637043">
			June 8, 2008 at 10:21 pm</a>		</div>

		<p>Arrgghhh: &nbsp;You&#8217;re an idiot. &nbsp;You&#8217;re whining about an implementation detail, which is only visible when YOU (an app developer) do the wrong thing. &nbsp;And then you&#8217;re making up examples of completely idiotic app behavior &#8212; and then blaming the results on NT. &nbsp;That&#8217;s just idiotic.</p>
<p>Igor Levicki: Congratulations, now someone looks stupider than you. &nbsp;Yay, that&#8217;s something for you to be happy about.</p>
<p>The fact that NT chose to use 30-bit handles (by setting the bottom 2 bits to zero when returning them, and ignoring them on usage) is an implementation detail, and has no relevance to app developers. &nbsp;If an app developer relies on specific HANDLE values, then they are a f*ing idiot, and they deserve whatever brain-damage happens.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-637073">
				<div id="div-comment-637073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-637073">
			June 9, 2008 at 8:55 am</a>		</div>

		<p>Speaking of PIDs, weren&#8217;t they multiples of 2 on NT4 &#8211; so probaby OpenProcess wouldn&#8217;t work if you increased PID by 3 before passing it to OpenProcess there?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-637093">
				<div id="div-comment-637093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-637093">
			June 9, 2008 at 10:10 am</a>		</div>

		<p>Good grief</p>
<p>I love it when people rant about good practice without any apparent knowledge on the topic at hand. &nbsp;Consider some basic principles:</p>
<ol>
<li>&nbsp;To the external user a handle is a handle, no more and no less. &nbsp;The API gives it to you and you use it verbatim. &nbsp;If you mess with it, then maybe it works and maybe it doesn&#8217;t. &nbsp;Nobody cares. &nbsp;You&#8217;ve broken the contract.</li>
<li>
<p>&nbsp;On the inside (API implementation), a handle is whatever you want it to be. &nbsp;An int, a pointer, a struct, whatever. &nbsp;As long as you use it consistently and always behave as advertised, you are in the clear.</p>
</li>
<li>
<p>&nbsp;Much of this code is descended from antique versions that ran on 80286s (or worse) in 640K of RAM (or less). &nbsp;In that environment, you used every bit as efficiently as possible. &nbsp;Now that version 93 is running on modern chips with multi-GBs of RAM, doesn&#8217;t mean that you want to break working code for some esoteric reasons. &nbsp;None of us (except possibly a few MS folks) know what is the reason behind the design of the relevant handle, nor (obviously) whether that reason is still important.</p>
</li>
<li>
<p>&nbsp;If you want to comment, why not try to ad to the conversation, rather than just criticise others. &nbsp;(Hmmm. &nbsp;Kind of like I&#8217;ve been doing).</p>
</li>
</ol>
<p>OK, a positive thought: do our resident kernel experts know whether PIDs get re-used quickly, after a process dies? &nbsp;If so, does that impact on how one programs when using PIDs?</p>
<p>(Yes, I know the answer. &nbsp;If nobody posts it, I&#8217;ll write something later.)</p>
<p>Raymond, thanks for sharing your knowledge. &nbsp;It is generally quite interesting, and this is no exception.</p>
<p>Michael J.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-637123">
				<div id="div-comment-637123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KenW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-637123">
			June 9, 2008 at 2:21 pm</a>		</div>

		<p>@Aaargh!: &quot;I don&#8217;t think it&#8217;s me not getting it&quot;</p>
<p>Yes, it is.</p>
<p>The point you seem to be missing here is *adding 3 to a handle*. If a handle is an opaque item, why would you expect doing *any* mathematical operation on it to have meaningful results? It&#8217;s not an INT, or a WORD &#8211; it&#8217;s a HANDLE.</p>
<p>@Igor Levicki: Great. You&#8217;re not only a troll, but now a liar. You promised us you weren&#8217;t going to post here any more. And congratulating &nbsp;Yuhong Bao for being classified alongside you is an insult, not a compliment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-637293">
				<div id="div-comment-637293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-637293">
			June 10, 2008 at 7:33 am</a>		</div>

		<p>While the reactions of some may have been a little, shall we say, irrational, there is a potential issue here:</p>
<p>A 32-bit value where the bottom two bits are not zeroed out is an invalid HANDLE. And yet kernel-mode functions accept such values. Any time a kernel-mode function accepts, and operates on, invalid data, there is the potential for a security issue. All it would take would be one kernel routine incorrectly dealing with such handles and not getting away with it, and one sufficiently cunning and unscrupulous programmer, and you have a privilege escalation.</p>
<p>It&#8217;s very likely that all the relevant kernel routines are carefully written, and mask out the bottom two bits for you. There are at least three ways in which an &#8220;invalid argument&#8221; failure would have been better, or at least no worse:</p>
<p>1) Incorrect application code now works by chance. MS lose; the bottom 2 bits have to remain unused forever, or important applications will break.</p>
<p>2) Performing the check and masking off these bits are the same level of complexity, so the implementation cost of getting this right compared to the current solution is approximately zero.</p>
<p>3) If such a HANDLE was required to cause an &#8220;invalid argument&#8221; error to be returned, that requirement would be easily testable. The current situation is &#8220;yeah, we&#8217;re pretty confident this will be OK, but we can&#8217;t easily prove it with a unit test&#8221;.</p>
<p>Back when these APIs were designed, no-one really &#8220;got&#8221; security the way we hopefully are all starting to now. It&#8217;s understandable that the APIs were designed the way they were. It&#8217;s understandable that, in order to avoid breaking existing applications, they need to stay the way they are. But, if these APIs were being designed today, I am very confident that all invalid handles would result in an error return, rather than the current behaviour. Does that mean these APIs are not well-designed? I think that&#8217;s a judgement call.</p>
<div class=post>[<i>Thanks everybody for not reading the linked articles. Especially the one <a href="http://blogs.msdn.com/oldnewthing/archive/2005/01/21/358109.aspx" rel="nofollow">that explains that the bottom bit is meaningful but in a different way</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-637323">
				<div id="div-comment-637323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Speck Tator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-637323">
			June 10, 2008 at 7:47 am</a>		</div>

		<blockquote><p>
  And yet kernel-mode functions accept such values. Any time a kernel-mode function accepts, and operates on, invalid data, there is the potential for a security issue.
</p></blockquote>
<p>Uhhh, bullshit. &nbsp;You think you&#8217;ve found something, but you&#8217;re just inventing something out of nothing.</p>
<p>The bottom two bits are ignored. &nbsp;There are NO security implications to this. &nbsp;All handle-to-object translations are handled by the same module, which is what handles shifting the handle value down by two bits.</p>
<blockquote><p>
  Back when these APIs were designed, no-one really &quot;got&quot; security the way we hopefully are all starting to now.
</p></blockquote>
<p>Again, bullshit. &nbsp;The attack scenarios were mostly based on user-to-user attacks, not data-to-user attacks, but it&#8217;s bullshit to assert that no one &quot;got&quot; security. &nbsp;And handle table look-ups are an obvious place where security matters.</p>
<p>NT-based OSes have been on the market for about 15 years now. &nbsp;The fact that NT handles ignore the bottom 2 bits has never been &quot;exploited&quot;, because it isn&#8217;t a freakin&#8217; bug.</p>
<p>Get over it, people. &nbsp;You WISH there were a problem here, but wishing don&#8217;t make it so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-637333">
				<div id="div-comment-637333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Edgar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-637333">
			June 10, 2008 at 8:03 am</a>		</div>

		<p>My guess:</p>
<p>The 2 bits are never used in the Kernel, but in the System-Layers above.</p>
<p>There it is used to store state information for an object.</p>
<p>Each process can therefore store 2 bits of information in all handles(objects).</p>
<p>You avoid reading the object behind the handle.</p>
<p>Good design ?</p>
<p>Performance rules sometimes more.</p>
<p>As I said before: Only a guess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-638083">
				<div id="div-comment-638083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-638083">
			June 12, 2008 at 7:39 am</a>		</div>

		<p>@Speck Tator</p>
<p>You seem to be misinterpreting what I said.</p>
<p>&gt; &gt; And yet kernel-mode functions accept such values. Any time a kernel-mode function accepts, and operates on, invalid data, there is the potential for a security issue.</p>
<p>&gt; Uhhh, bullshit. &nbsp;You think you&#8217;ve found something, but you&#8217;re just inventing something out of nothing.</p>
<p>I think no such thing. Do you genuinely not understand the difference between a *potential* security issue and an *actual* security issue, or are you deliberately making a strawman of my argument? Do you really think that kernel calls shouldn&#8217;t always validate their arguments?</p>
<p>Now Raymond makes a good point here &#8212; despite saying &quot;these are not valid kernel-mode HANDLEs&quot;, one third of them actually are. But the argument appears to apply unchanged to HANDLEs with bit 1 set.</p>
<p>&gt; The bottom two bits are ignored. &nbsp;There are NO security implications to this.</p>
<p>That&#8217;s quite an assertion you&#8217;re making there. Can you prove that? Or are you just posturing?</p>
<p>Suppose some part of the kernel were to assume that two handles were equivalent iff they were equal. I could easily imagine situations where that could enable an attacker to do something e wasn&#8217;t supposed to be able to do. Again, I&#8217;ll remind you that this is a *potential*, *hypothetical* security issue. However, anyone who &quot;gets&quot; security knows that, unlike hypothetical bugs, hypothetical security issues *are* very important. If you don&#8217;t check them, attackers certainly will, eventually.</p>
<p>And I&#8217;m sure someone will come up with some clever reason why that particular type of problem will &quot;never&quot; cause problems in practice (ho, ho). But it&#8217;s just one example of possible problems. When you&#8217;re in the security game, the burden of proof is on you to show your code has mitigations for the relevant potential issues, not on others to show it doesn&#8217;t.</p>
<p>&gt; &gt; Back when these APIs were designed, no-one really &quot;got&quot; security the way we hopefully are all starting to now.</p>
<p>&gt; Again, bullshit. &nbsp;The attack scenarios were mostly based on user-to-user attacks, not data-to-user attacks, but it&#8217;s bullshit to assert that no one &quot;got&quot; security.</p>
<p>That&#8217;s why I didn&#8217;t assert that. Strawman again. I said (more or less) that no-one &quot;got&quot; security *to the extent we do now*. No-one did STRIDE back then, for instance. Security analysis was a much more casual, informal process. It is the nature of our industry that we learn more as time progresses.</p>
<p>&gt; NT-based OSes have been on the market for about 15 years now. &nbsp;The fact that NT handles ignore the bottom 2 bits has never been &quot;exploited&quot;, because it isn&#8217;t a freakin&#8217; bug.</p>
<p>Of course it&#8217;s not. The fact that the bottom 2 bits are ignored isn&#8217;t a problem. The problem is making sure that everything that should ignore them, actually does ignore them. And my point (which I think you&#8217;ve indirectly agreed with by saying &quot;handle table look-ups are an obvious place where security matter&quot;) is that failing to ignore them could have security implications, where a different design would be immune to that class of potential issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-662393">
				<div id="div-comment-662393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/08/27/8898863.aspx' rel='external nofollow' class='url'>The Old New Thing : What possible use are those extra bits in kernel handles? Part 1: Sentinels</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080606-00/?p=22043#comment-662393">
			August 27, 2008 at 11:23 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2008/08/27/8898863.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2008/08/27/8898863.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>