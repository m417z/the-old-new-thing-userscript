<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1150103">
				<div id="div-comment-1150103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150103">
			September 11, 2014 at 7:49 am</a>		</div>

		<p>Because, to a first approximation, it is never called.</p>
<p>Also, if you can&#39;t allocate an auto-reset event, your system is very, very, overloaded &#8211; you just need to survive until the overload goes away.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1150133">
				<div id="div-comment-1150133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VinDuv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150133">
			September 11, 2014 at 7:55 am</a>		</div>

		<p>“Exercise: Why isn&#39;t it important that the fallback algorithm be highly efficient? ”</p>
<p>An Out-of-memory situation is not supposed to occur frequently, so it makes no sense to optimize for it. Anyway, the program will probably not continue running for long if it’s getting out-of-memory errors.</p>
<p>I was wondering how the contention event is created. What if two threads try to enter a locked critical section with no contention event?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1150153">
				<div id="div-comment-1150153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150153">
			September 11, 2014 at 8:06 am</a>		</div>

		<p>&gt;What if two threads try to enter a locked critical section with no contention event?</p>
<p>I expect both will create an event, then use InterlockedCompareExchangePointer to set it, and one of the events will be freed.</p>
<p>But the whole lazy allocation sceme so reeks of NT 3.1 era. If the kernel is so out of nonpaged memory that it cannot allocate about 128 bytes, them it will not even be able to run any I/O (including paging), because typical IRP, MDL and SRB will require allocations of similar size. The kernel is pretty much constipated at that point and the application will simply fail one by one, even if they don&#39;t use CRITICAL_SECTION.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1150203">
				<div id="div-comment-1150203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150203">
			September 11, 2014 at 8:55 am</a>		</div>

		<p>Very interesting stuff! Thanks Raymond.</p>
<p>I like reading about kernel changes in Windows. Channel9 had some good videos about this topic years ago, as well as TechNet magazine, some MSFT blogs and the Windows Internals book. These days I can&#39;t seem to find descriptions of kernel improvements anymore. Can anyone recommend some resources covering Windows 8/8.1?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1150233">
				<div id="div-comment-1150233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Grier [MSFT]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150233">
			September 11, 2014 at 9:19 am</a>		</div>

		<p>Things were somewhat even worse before N. fixed this. &nbsp;I thought he fixed it in XP but yeah it could be Vista.</p>
<p>Prior to moving to keyed events (so that no kernel object had to be allocated at all), the contention object could be allocated by the thread releasing the critical section. &nbsp;Which meant that LeaveCriticalSection could throw the exception and when it did, the CS was corrupt. &nbsp;There was even verbiage in MSDN at the time advocating putting __try/__except around critical section entry and exit to catch the exceptions but the problem was that there was really nothing reasonable that you could do in light of the exception in the first place. &nbsp;There&#39;s obviously contention (so you can&#39;t just hope the problem is theoretical rather than real) and the CS is not usable any further.</p>
<p>These were dark times. &nbsp;The world is a much better place now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1150253">
				<div id="div-comment-1150253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitry Z</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150253">
			September 11, 2014 at 10:13 am</a>		</div>

		<p>Joe Duffy has a good explanation on the CS and keyed events</p>
<p><a rel="nofollow" target="_new" href="http://joeduffyblog.com/2006/11/28/windows-keyed-events-critical-sections-and-new-vista-synchronization-features/">joeduffyblog.com/&#8230;/windows-keyed-events-critical-sections-and-new-vista-synchronization-features</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-1150263">
				<div id="div-comment-1150263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150263">
			September 11, 2014 at 10:20 am</a>		</div>

		<p>&quot;Windows 2000 added the Initialize­Critical­Section­And­Spin­Count function&quot;</p>
<p>NT4 SP3 did:</p>
<p><a rel="nofollow" target="_new" href="ftp://ftp.microsoft.com/bussys/winnt/winnt-public/fixes/usa/nt40/ussp3/readme.htm">http://ftp.microsoft.com/&#8230;/readme.htm</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1150273">
				<div id="div-comment-1150273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150273">
			September 11, 2014 at 10:20 am</a>		</div>

		<p>&quot;Windows 2000 added the Initialize­Critical­Section­And­Spin­Count function&quot;</p>
<p>NT4 SP3 did:</p>
<p><a rel="nofollow" target="_new" href="ftp://ftp.microsoft.com/bussys/winnt/winnt-public/fixes/usa/nt40/ussp3/readme.htm">http://ftp.microsoft.com/&#8230;/readme.htm</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1150283">
				<div id="div-comment-1150283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150283">
			September 11, 2014 at 10:25 am</a>		</div>

		<p>&gt;the contention object could be allocated by the thread releasing the critical section</p>
<p>I&#39;m not sure how that would work at all. If there is a contention, a thread already needs an event handle to wait on.</p>
<div class="post">[<em>This is in the case where the owner of the critical section exits the critical section before the waiting thread can allocate the event handle to wait on. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1150313">
				<div id="div-comment-1150313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150313">
			September 11, 2014 at 11:15 am</a>		</div>

		<p>[This is in the case where the owner of the critical section exits the critical section before the waiting thread can allocate the event handle to wait on. -Raymond]</p>
<p>I believe this case can be handled by having the contending thread (which successfully allocated and set the event) decrement the contention counter and go back and try to acquire the CS again.</p>
<div class="post">[<em>Nope, there is still a race. Owner thread: Check for contention. Yes, there is contention. Is the event created? No: Don&#39;t set it. &lang;Pre-empted&rang; Contending thread: Create the event, decrement contention count, loop back. Try to enter critical section, cannot. Increment contention count. Wait on event. &lang;thread switch&lang; Owner thread: Decrement contention count, return. Result: Contending thread stuck waiting on event that is not signaled. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1150333">
				<div id="div-comment-1150333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150333">
			September 11, 2014 at 12:03 pm</a>		</div>

		<p>Didn&#39;t you know that open source is the solution to every problem? </p>
<p>Anyway the open source solution to the problem is &#39;change the implementation, screw the users of software that relied on internal details&#39;. </p>
<p>There is no hope for anyone that cannot recognize that this strategy is not tenable for Microsoft.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston odd alt thread-odd thread-alt depth-1" id="comment-1150403">
				<div id="div-comment-1150403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150403">
			September 11, 2014 at 6:56 pm</a>		</div>

		<p>The details are not important. &nbsp;</p>
<p><a rel="nofollow" target="_new" href="http://basicinstructions.net/basic-instructions/2009/1/8/how-to-repel-the-inevitable-invasion-of-the-moon-men.html">basicinstructions.net/&#8230;/how-to-repel-the-inevitable-invasion-of-the-moon-men.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston even thread-even depth-1" id="comment-1150413">
				<div id="div-comment-1150413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150413">
			September 11, 2014 at 7:02 pm</a>		</div>

		<p>@Yukkuri: that&#39;s if you&#39;re lucky. &nbsp;If you&#39;re not, the sentence ends at &quot;users&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1150493">
				<div id="div-comment-1150493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150493">
			September 12, 2014 at 3:29 am</a>		</div>

		<p>Before reading the rest of the comments, my idea for solving the event contention problem would have been to wrap the creation of the event in its own critical section (a global one with a preallocated event; we don&#39;t want to contend over creating that critical section&#39;s event!) just in case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1150543">
				<div id="div-comment-1150543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150543">
			September 12, 2014 at 6:42 am</a>		</div>

		<p>@Harry Johnston &#8212; You&#39;re not wrong, sadly :p</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1150703">
				<div id="div-comment-1150703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150703">
			September 12, 2014 at 11:28 am</a>		</div>

		<p>&quot;In Windows Vista, the internals of the critical section object were rejiggered once again, this time to add convoy resistance&quot;</p>
<p>I think it was Server 2003 SP1 that did that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1150793">
				<div id="div-comment-1150793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150793">
			September 12, 2014 at 4:47 pm</a>		</div>

		<p>[Nope, there is still a race.-Raymond]</p>
<p>The idea is to try enter the CS. Check if the CS is currently owned and an event is not allocated. In this case, allocate and set the event, and only then really proceed with incrementing the contention count and waiting on the event if necessary. This also has a nice side effect that raising an exception on CreateEvent failure still leaves the CS in the original consistent state.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1150893">
				<div id="div-comment-1150893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1150893">
			September 14, 2014 at 3:09 am</a>		</div>

		<p>@Yukkuri: &quot;willingness to make internal changes that break programs that do dumb stuff&quot; is orthogonal to &quot;amount of people the source code is visible to&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1151333">
				<div id="div-comment-1151333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">win32s ftw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140911-00/?p=44103#comment-1151333">
			September 16, 2014 at 3:28 pm</a>		</div>

		<p>@Yukkuri:</p>
<p>Sell the source code to NSA is at least always an option for the greedy. Dunno if it counts a open though.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>