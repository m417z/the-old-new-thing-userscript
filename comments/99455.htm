<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1356105">
				<div id="div-comment-1356105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180809-00/?p=99455#comment-1356105">
			August 9, 2018 at 7:15 am</a>		</div>

		<p>How does that priority signalling actually work?  Is it something that the CPU itself uses to e.g. go into a lower power mode?  Or is it something used by the OS software (by decoding the instructions?) to make decisions about thread priorities?</p>
<p>Having had to debug a lot of optimized PPC assembly on the Xbox 360, I can tell you that the rotate and shift family of instructions are absolutely bonkers, and I was constantly having to refer to the PPC ISA manuals to understand what the code I was stepping through was doing.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1356135">
				<div id="div-comment-1356135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180809-00/?p=99455#comment-1356135">
			August 9, 2018 at 7:49 am</a>		</div>

		<p><a href=https://stackoverflow.com/a/5427094/902497 rel="nofollow">StackOverflow says</a> that it adjusts the relative priorities of execution units within a single core. So it&#8217;s to adjust how aggressively the execution unit competes for resources with other execution units.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1356185">
				<div id="div-comment-1356185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180809-00/?p=99455#comment-1356185">
			August 9, 2018 at 1:43 pm</a>		</div>

		<p>It&#8217;s not really about execution unit priority; it&#8217;s about which hardware thread gets how many issue slots. Assuming you have multiple hardware threads running on the same CPU core that is.</p>
<p>If either 0 or 1 hardware threads are currently in a runnable state (i.e. not waiting on say a cache miss or otherwise stalling), it doesn&#8217;t matter. You just issue instructions from the one thread you can, if any.</p>
<p>But if you have at least 2 HW threads in runnable state (say thread A and thread B), the way HW multithreading works is that on some cycles thread A gets to feed new instructions into the pipe, and on some cycles thread B does. There is only one frontend that decodes instructions, and it&#8217;s time-sliced between the threads. The priority adjustments control how many time slices each thread gets. (This is time-slicing at the individual cycle level, mind, much finer-grained than OS-level threading is.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-msn odd alt thread-odd thread-alt depth-1" id="comment-1356155">
				<div id="div-comment-1356155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180809-00/?p=99455#comment-1356155">
			August 9, 2018 at 10:11 am</a>		</div>

		<p>There are 8 bitwise operators out of 16 logical connectives, so I was curious about which ones are missing.</p>
<p>Contradiction and tautology (constant false and true) are obviously missing since they are independent of input. Then there are &#8220;Proposition P&#8221; and &#8220;Proposition Q&#8221; &#8211; the ones that just gives the first or second input back &#8211; as well as their negations. So that takes away 6 of the operators as not using both inputs. The last 2 remaining are andc and orc with swapped arguments (or alternatively the negation of them). Since you can just swap the arguments around it would seem that all 16 logical connectives are actually accessible in at most one instruction.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>