<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-895953">
				<div id="div-comment-895953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-895953">
			February 17, 2011 at 9:09 am</a>		</div>

		<p>Once upon a time, I worked on a very large application that exceeded either the 2^15 or 2^16 limit on string identifiers, and we started to have bugs. &nbsp;Calls to LoadString would simply return the wrong string.</p>
<p>Now, this was a long time ago (Windows 95 was brand new), so maybe it was just a bug in the resource compiler back then, but it was a very real problem for our team. &nbsp;For a while, we managed to split some of the strings out into another DLL, but for various reasons that proved inconvenient. &nbsp;I ended up writing a code-scanning tool that identified unused string resources, gaps in the assigned string IDs, and duplicate strings. &nbsp;We used the output of that to get back under the 2^15 limit.</p>
<p>Although Raymond&#39;s reasoning is correct, I&#39;d be wary of using string IDs over 2^15. &nbsp;Windows may be perfectly fine with it, but I wouldn&#39;t be surprised if a tool, library wrapper, or framework still mangles larger IDs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-895983">
				<div id="div-comment-895983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-895983">
			February 17, 2011 at 10:19 am</a>		</div>

		<p>&quot;&#8230; the convention that in Win32, the first 64KB of address space is permanently invalid&quot;</p>
<p>Useful to know, because it means you do not need to worry about integer overflows when writing</p>
<p>&nbsp; &nbsp;if (pString1 &#8211; 75 &lt;= pString2) &#8230;</p>
<p>to test if pString1 is before or at most 75 characters past pString2.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896023">
				<div id="div-comment-896023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896023">
			February 17, 2011 at 12:21 pm</a>		</div>

		<p>@Mike: the first 64kB is invalid to catch NULL pointers, for the same reason segment 0 was never used on Win16 (I forget if 0001:0000 was valid or not).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896033">
				<div id="div-comment-896033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ATZ Man</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896033">
			February 17, 2011 at 12:40 pm</a>		</div>

		<p>@Joshua:</p>
<p>In real mode 0001:0000 would mean physical address 16 so it would not be valid.</p>
<p>In protected mode 0001:0000 is still the null selector. The selector&#39;s index in its particular table of selectors is 0001 divided by 8, i.e. zero, the null selector. The low 2 bits of the selector, the RPL, being 1 (i.e. 0001&amp;3==1) says you&#39;re trying to run at privilege level one, and the (selector &amp; 4) TI bit determines whether you&#39;re using the local descriptor table to resolve selectors, or the global one. The zero in this bit in your example would have meant the global table.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896043">
				<div id="div-comment-896043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ATZ Man</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896043">
			February 17, 2011 at 12:43 pm</a>		</div>

		<p>Actually, forget what I said about real mode. In a real true 8088 dereferencing the &quot;long&quot; address 0001:0000 would work. It would access physical address 16. In Virtual 86 mode on a &#39;386 what would happen would depend on the particulars of virtual mode under the OS that you&#39;re running under. Most likely the OS would be supporting a virtual DOS and if an important system variable lived at the location the access to that location would be mediated by the OS&#39;s DOS emulator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-895993">
				<div id="div-comment-895993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-895993">
			February 17, 2011 at 10:37 am</a>		</div>

		<p>I always thought that the first 64kB of the address space was invalid *because* of this resource ID partitioning. Making zero-value pointers an access violation really only requires the first page to be invalid, though of course VirtualAlloc only reserves in chunks of 64kB.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896073">
				<div id="div-comment-896073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896073">
			February 18, 2011 at 1:13 am</a>		</div>

		<p>Address 16 would be part of the interrupt table, so, yeah, some extra handling would probably be in order on the part of the DOS emulator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896103">
				<div id="div-comment-896103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896103">
			February 18, 2011 at 8:23 am</a>		</div>

		<p>This trick is also used in the Linux kernel syscall return value. Only that it overloads the top 4K (the first few negative numbers when treated as signed). The C library converts these to positive numbers and put them in errno.</p>
<p>The top 4K of memory is deep within kernel space (the top 1/4 or 1/2 of the address space is reserved for the kernel), so there is no risk of confusion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896133">
				<div id="div-comment-896133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Boyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896133">
			February 18, 2011 at 1:10 pm</a>		</div>

		<p>The implementation of MAKEINTRESOURCE is an implementation detail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896173">
				<div id="div-comment-896173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xml dude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896173">
			February 19, 2011 at 3:56 pm</a>		</div>

		<p>Who&#39;s using ancient file resources anymore? Please store strings in xml files.</p>
<div class="post">[<i>I think you mistook this article for an advocacy post. I was explaining how Win32 resources work. If you prefer to keep your strings somewhere else, then you are more than welcome to. I wonder whether you also go into Honda repair forums telling people to go buy a Toyota. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896183">
				<div id="div-comment-896183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896183">
			February 19, 2011 at 3:57 pm</a>		</div>

		<p>&quot;The implementation of MAKEINTRESOURCE is an implementation detail.&quot;</p>
<p>No, it&#39;s not; it&#39;s documented. &quot;The return value is the specified value in the low-order word and zero in the high-order word.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>