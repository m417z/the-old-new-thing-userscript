<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (33)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-655913">
				<div id="div-comment-655913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-655913">
			August 12, 2008 at 10:26 am</a>		</div>

		<p>Because weird things might happen with MoveNext() if it&#8217;s called more than once?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-655933">
				<div id="div-comment-655933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-655933">
			August 12, 2008 at 10:27 am</a>		</div>

		<p>(&#8230;Past the end of the enumerated collection?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-655943">
				<div id="div-comment-655943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-655943">
			August 12, 2008 at 10:30 am</a>		</div>

		<p>Because whatever state it was in might have a non-deterministic path that sometimes leads to a yield break, and other times to a yield return?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-655953">
				<div id="div-comment-655953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-655953">
			August 12, 2008 at 10:36 am</a>		</div>

		<p>Ooh. Plus, whatever code is in the last but one state might have side effects (might be what Chris was implying)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656033">
				<div id="div-comment-656033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656033">
			August 12, 2008 at 12:09 pm</a>		</div>

		<p>If you don&#8217;t change the state to n2, you can keep calling MoveNext() on it and always redo the last state.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656043">
				<div id="div-comment-656043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bahbar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656043">
			August 12, 2008 at 12:23 pm</a>		</div>

		<p>I believe Damien and Chris nailed it.</p>
<p>MoveNext is supposed to keep returning false once it started to do so.</p>
<p>From MSDN &quot;If MoveNext passes the end of the collection, the enumerator is positioned after the last element in the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls to MoveNext also return false&quot;</p>
<p>Imagine the for loop condition is &nbsp;i != limit rather than &lt;=&#8230; Then MoveNext will return false then start to return true again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656073">
				<div id="div-comment-656073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hova</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656073">
			August 12, 2008 at 12:59 pm</a>		</div>

		<p>What do you plan to do with all the excercises when you write your next book? &nbsp; Put a workbook or test section at the end of each chapter?</p>
<p>Why some teacher might even use that book to teach students with!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656103">
				<div id="div-comment-656103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656103">
			August 12, 2008 at 1:39 pm</a>		</div>

		<blockquote><p>
  The C# method &#8230; just borrows the stack of the caller
</p></blockquote>
<p>Interesting&#8230; When I first saw how iterators were implemented in C#, I saw the &quot;yield&quot; and immediately assumed coroutines. &nbsp;So, I&#8217;m surprised to learn .NET iterators are really closer to Java iterator objects than &quot;true&quot; (coroutine-based or thread-based) iterators; it&#8217;s just that the nice syntax of C# hides this from us.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ericlippert even thread-even depth-1" id="comment-656253">
				<div id="div-comment-656253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Eric+Lippert' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656253">
			August 12, 2008 at 3:06 pm</a>		</div>

		<p>Indeed. You can use iterators as poor-mans coroutines; in fact, the managed robotics framework that Microsoft ships does exactly that!</p>
<p>Thanks for doing this Raymond; this is better than our internal documentation. :-) &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656353">
				<div id="div-comment-656353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">philq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656353">
			August 12, 2008 at 5:02 pm</a>		</div>

		<p>Iterators are a really great feature. &nbsp;The only drawback is that making recursive calls in them is n^2. &nbsp;We need a &#8216;yield foreach&#8217; statement! &nbsp;Eric please implement this feature immediately.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656373">
				<div id="div-comment-656373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ajai Shankar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656373">
			August 12, 2008 at 5:19 pm</a>		</div>

		<p>Hi Raymond</p>
<p>Strange I came across only now across this series on enumerators &amp; fibers.</p>
<p>I&#8217;d written an MSDN article way back in &#8217;03 on how to get fiber based enumerators to work with .NET using an undocumented hosting API.</p>
<p>Implementing Coroutines for .NET by Wrapping the Unmanaged Fiber API (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/magazine/cc164086.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/magazine/cc164086.aspx</a>)</p>
<p>Of course now there is a dire warning at the beginning of the article saying it is not supported by Microsoft :-)</p>
<p>Ajai Shankar</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656483">
				<div id="div-comment-656483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656483">
			August 12, 2008 at 7:28 pm</a>		</div>

		<p>Not actually a .Net blog but it might occasionally dip its toes in C# it seems.</p>
<div class=post>[<i><a href="http://blogs.msdn.com/oldnewthing/archive/2007/08/13/4358659.aspx" rel="nofollow">Why is the blog&#8217;s subtitle &#8220;Not actually a .NET blog&#8221;?</a> -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656503">
				<div id="div-comment-656503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://neovolve.com/archive/2008/08/13/iterators-and-the-yield-statement.aspx' rel='external nofollow' class='url'>Iterators and the yield statement - Rory Primrose</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656503">
			August 12, 2008 at 8:00 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://neovolve.com/archive/2008/08/13/iterators-and-the-yield-statement.aspx" rel="nofollow">http://neovolve.com/archive/2008/08/13/iterators-and-the-yield-statement.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656513">
				<div id="div-comment-656513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656513">
			August 12, 2008 at 8:09 pm</a>		</div>

		<p>.net week makes the baby jesus cry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656543">
				<div id="div-comment-656543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656543">
			August 12, 2008 at 10:33 pm</a>		</div>

		<p>Gah, stuffed that last example up a bit (row =&gt; rowIndex, col =&gt; colIndex), and the formatting sucks. &nbsp;Still, you get the idea :) &nbsp;(Oh, for an edit button&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656573">
				<div id="div-comment-656573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wtroost</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656573">
			August 13, 2008 at 4:22 am</a>		</div>

		<p>Thanks for the great post, I always wondered how the yield statement worked its magic!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656593">
				<div id="div-comment-656593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SRS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656593">
			August 13, 2008 at 4:55 am</a>		</div>

		<p>I really wish Sun would put &#8216;yield&#8217; into Java. Oh, and fix generics.</p>
<p>Just saying.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656533">
				<div id="div-comment-656533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656533">
			August 12, 2008 at 10:29 pm</a>		</div>

		<p>My favourite iterator trick is the synchronised foreach:</p>
<p>public IEnumerator&lt;T&gt; GetEnumerator()</p>
<p>{</p>
<p> &nbsp;lock (SyncRoot)</p>
<p> &nbsp;{</p>
<p> &nbsp; &nbsp; foreach (T item in BaseList)</p>
<p> &nbsp; &nbsp; {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;yield return item;</p>
<p> &nbsp; &nbsp; }</p>
<p> &nbsp;}</p>
<p>}</p>
<p>(Not 100% sure that&#8217;s the right code; I did it from memory.)</p>
<p>Of course there are drawbacks to doing something like the above, but it *does* mean that your foreach loops on that collection won&#8217;t get borked by other threads modifying the collection. &nbsp;(It might kill your performance, though.)</p>
<p>My second favourite trick is the way you can now define multiple kinds of enumeration trivially:</p>
<p>// .. in some grid/matrix-like class:</p>
<p>public IEnumerable&lt;T&gt; AcrossThenDown</p>
<p>{</p>
<p> &nbsp;get</p>
<p> &nbsp;{</p>
<p> &nbsp; &nbsp;for (int rowIndex = 0; rowIndex &lt; RowCount; ++rowIndex)</p>
<p> &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp;for (int colIndex = 0; colIndex &lt; ColCount; ++colIndex)</p>
<p> &nbsp; &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;yield return this[row, col];</p>
<p> &nbsp; &nbsp; &nbsp;}</p>
<p> &nbsp; &nbsp;}</p>
<p> &nbsp;}</p>
<p>}</p>
<p>public IEnumerable&lt;T&gt; DownThenAcross</p>
<p>{</p>
<p> &nbsp;get</p>
<p> &nbsp;{</p>
<p> &nbsp; &nbsp;for (int colIndex = 0; colIndex &lt; ColCount; ++colIndex)</p>
<p> &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp;for (int rowIndex = 0; rowIndex &lt; RowCount; ++rowIndex)</p>
<p> &nbsp; &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;yield return this[row, col];</p>
<p> &nbsp; &nbsp; &nbsp;}</p>
<p> &nbsp; &nbsp;}</p>
<p> &nbsp;}</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656643">
				<div id="div-comment-656643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/stuartleeks/archive/2008/08/13/a-closer-look-at-yield-part-3.aspx' rel='external nofollow' class='url'>Stuart Leeks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656643">
			August 13, 2008 at 8:37 am</a>		</div>

		<p>This was only going to be two posts, but after my last post I’d been mulling over a post that looks at</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656683">
				<div id="div-comment-656683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-656683">
			August 13, 2008 at 10:49 am</a>		</div>

		<p>Shouldn&#8217;t public IEnumerator&lt;int&gt; CountFrom(int start) [fourth line]</p>
<p>be </p>
<p>public IEnumerable&lt;int&gt; CountFrom(int start) </p>
<p>?</p>
<div class=post>[<i>Fixed. Thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657023">
				<div id="div-comment-657023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://freyalang.blogspot.com' rel='external nofollow' class='url'>Ian Marteens</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-657023">
			August 14, 2008 at 4:12 am</a>		</div>

		<p>Actually, the translation get trickier when there are try/finally blocks, either explicit or implicit, in the iterator block. That&#8217;s because you must track iteration state in case the Dispose method of the enumerator must be called. That&#8217;s also the reason why try/catch is not allowed in iterators: translation becomes even trickier.</p>
<p>There are a couple of enhancements that Microsoft could apply to iterators:</p>
<p>1- With a good peephole optimizer, the target code generated for the compiler can be greatly simplified. Most compiled code have a lot of redundant state assignments that a peephole optimizer could erase. I have done some tests on this with Freya, my own pet language and compiler for .NET.</p>
<p>2- A very simple extension for iterators: allow &quot;yield&quot; to receive a whole iterator call. It would translate as a foreach/yield combo statement, and it would be great for composing iterators, such as in recursive iterators. For simpler composite iterators, we have LINQ, of course.</p>
<p>3- I have read a paper from Microsoft Research where they fiddle with a IEnumerable extension for handling recursive iterators in an efficient manner. It would be great to see that research applied to the .NET compilers. Of course, it&#8217;s not an easy task.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657063">
				<div id="div-comment-657063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://starik-x.livejournal.com/' rel='external nofollow' class='url'>Andrew</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-657063">
			August 14, 2008 at 6:07 am</a>		</div>

		<p>&#8220;&#8230;Instead it just borrows the stack of the caller, and anything that it needs to save across calls to MoveNext are stored in a helper object (which goes on the heap rather than the stack)&#8230;&#8221;</p>
<p>I used to think that implementation of an iterator as a value type is more efficient in terms of performance (say, generic list and dictionary have their iterators as structs).</p>
<p>And I used to think that &#8220;yield return&#8221; &nbsp;just fails to expose a struct since that should be public (to aviod boxing) and that&#8217;s not appropriate for autogenerated classes.</p>
<p>But Raymond seems to say that heap-based iterators are better, why? Because of possible nesting?</p>
<div class="POST">[<i>I believe most people expect reference semantics for iterators, not value semantics.</p>
<pre>e = o.GetEnumerator();
DoSomething1(e);
DoSomething2(e);
</pre>
<p>I suspect most people would expect <code>DoSomething2</code> to continue where <code>DoSomething1</code> left off. I don&#8217;t see how nesting is involved. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657153">
				<div id="div-comment-657153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://visualstudiohacks.com/blog/visual-studio-links-65/' rel='external nofollow' class='url'>Visual Studio Hacks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-657153">
			August 14, 2008 at 9:28 am</a>		</div>

		<p>My latest in a series of the weekly, or more often, summary of interesting links I come across related to Visual Studio. The Visual C++ Team blog has a post about IconWorkshop Lite , which is available as a free download. Greg Duncan posted a link to</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657283">
				<div id="div-comment-657283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://starik-x.livejournal.com/' rel='external nofollow' class='url'>Andrew</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-657283">
			August 14, 2008 at 11:16 am</a>		</div>

		<p>[I believe most people expect reference semantics for iterators, not value semantics.]</p>
<p>Vast majority of people writing vernacular C# use them in foreach loops. They never bother about ref/val semantics. Also, you palter a little bit: with a value type enumerator, in your example </p>
<p>e = o.GetEnumerator();</p>
<p>DoSomething1(e);</p>
<p>DoSomething2(e);</p>
<p>e gets boxed, so no difference between a class and a struct iterator. The only benefit for a value type iterator comes from the foreach loop: it uses duck typing against iterators, &nbsp;thus doesn&#8217;t cast to IEnumerator.</p>
<p>[&#8230;I don&#8217;t see how nesting is involved]</p>
<p>Um, sorry &#8211; I meant recursion. If you &nbsp;recursively interate through, all iterators (as far as I understand) should be on the stack that might, eg. cause stack overflow.</p>
<div class="post">[<i>You focused on boxing and missed the original problem. DoSomething2(e) will not resume where DoSomething1(e) left off. And stack overflow is not the issue here either. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657353">
				<div id="div-comment-657353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.dirteam.com/blogs/mjohnson/archive/2008/08/14/interesting-links-8-14-2008.aspx' rel='external nofollow' class='url'>Matt Johnson's Technical Adventures</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-657353">
			August 14, 2008 at 1:05 pm</a>		</div>

		<p>Ask the Directory Services Team : MCS Talks Infrastructure Architecture joeware &#8211; never stop exploring…</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657493">
				<div id="div-comment-657493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://rhnatiuk.wordpress.com/2008/08/14/todays-blogs/' rel='external nofollow' class='url'>Today&#8217;s Blogs &laquo; Roman&#8217;s Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-657493">
			August 14, 2008 at 4:11 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://rhnatiuk.wordpress.com/2008/08/14/todays-blogs/" rel="nofollow">http://rhnatiuk.wordpress.com/2008/08/14/todays-blogs/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657593">
				<div id="div-comment-657593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Morou</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-657593">
			August 14, 2008 at 5:33 pm</a>		</div>

		<p>As stated before, the primary reason the state machine transitions into a final state is to prevent pre-final states from being repeated, since the logic of them could alter the state of other objects within the iterator&#8217;s scope (and potentially even cause run-time errors).</p>
<p>I&#8217;m guessing the other reason yield break; transitions into a state, is state reduction, the most optimal state machine is the one with the fewest states. &nbsp;Multiple yield breaks do transition into a single state, don&#8217;t they? (I haven&#8217;t actually checked.)</p>
<p>Recursive iterators merely require a more complex approach, but are entirely possible. &nbsp;Instead of being directly recursive, you need to cast part of the logic into a sub-iterator that would effectively emit the transition series of objects used in the recursive approach, then using the flat form of the hierarchy, yield the members respectively. &nbsp;Alternatively you can flatten your recursive approach into a non-recursive solution and yield the members that way.</p>
<p>I found iterators interesting because you can essentially do whatever you want with them. &nbsp;My favorite was creating a multi-dimensional array iterator that iterated the indices of an array, yielding the same array instance each time, just with different values. &nbsp;Good for debugging where you send in a nondescript array and its internals are iterated and logged regardless of the array&#8217;s dimensional structure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657663">
				<div id="div-comment-657663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CodeMage</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-657663">
			August 14, 2008 at 9:56 pm</a>		</div>

		<p>Another interesting fact about iterators is the garbage they generate, by virtue of implementing IEnumerator&lt;T&gt; and IEnumerable&lt;T&gt;. Every time you use an iterator in a foreach loop, you&#8217;ll instantiate the implementation of these interfaces. In case of yield return, this implementation is hidden from you by the compiler, but it still creates garbage.</p>
<p>There&#8217;s a way to avoid that, though. By creating a value type that implements the iterator design contract (GetEnumerator, MoveNext, Reset and Current) without implementing the IEnumerator&lt;T&gt; and IEnumerable&lt;T&gt; interfaces, you can still use it in foreach loops but you don&#8217;t generate any garbage. The bad news is that you have to implement it by hand: there&#8217;s no syntactic sugar for this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657703">
				<div id="div-comment-657703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://starik-x.livejournal.com/' rel='external nofollow' class='url'>Andrew</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-657703">
			August 15, 2008 at 5:35 am</a>		</div>

		<p>[You focused on boxing and missed the original problem. DoSomething2(e) will not resume where DoSomething1(e) left off. And stack overflow is not the issue here either. -Raymond]</p>
<p>Wow! Raymond, yep I missed the point &#8211; ultimately had to write a small app in VS to get to it, sorry :)</p>
<p>But. Iterators for List&lt;T&gt; and Dictionary&lt;K,V&gt; are public nested structs. Does this mean that perf gain in foreach loops was more important back then, than the continuation idea (implemented in yield return) ?</p>
<p>(just in case you or someone else here has an explanation)</p>
<p>Thanks,</p>
<p>Andrew</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657713">
				<div id="div-comment-657713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://starik-x.livejournal.com/' rel='external nofollow' class='url'>Andrew</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-657713">
			August 15, 2008 at 5:41 am</a>		</div>

		<p>@CodeMage</p>
<blockquote><p>
  &#8230;By creating a value type that implements the iterator design contract&#8230;
</p></blockquote>
<p>Exactly, and that&#8217;s what bothers me: why didn&#8217;t they implement &#8216;yield return&#8217; to generate structs? Raymond answered above, but it still somehow not quite persuading</p>
<p>(btw &#8211; that nested value type iterator should be public, that&#8217;s possibly something you cannot always afford)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-664863">
				<div id="div-comment-664863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://msmvps.com/blogs/senthil/archive/2008/09/04/not-all-ienumerable-lt-t-gt-are-equal.aspx' rel='external nofollow' class='url'>the blog =&gt; anything goes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-664863">
			September 4, 2008 at 3:44 pm</a>		</div>

		<p>Implementing IEnumerable&amp;lt;T&amp;gt; can turned out to be tricky in one particular situation. Consider the</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-675773">
				<div id="div-comment-675773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.haugern.net/blog/beware-of-the-ienumerables/' rel='external nofollow' class='url'>Haugerns Development Escapades &raquo; Blog Archive &raquo; Beware of the IEnumerables</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-675773">
			October 17, 2008 at 5:00 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.haugern.net/blog/beware-of-the-ienumerables/" rel="nofollow">http://www.haugern.net/blog/beware-of-the-ienumerables/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-737413">
				<div id="div-comment-737413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://vasubalakrishnan.wordpress.com/2009/05/20/c-yield-keyword/' rel='external nofollow' class='url'>C# Yield Keyword &laquo; Vasu Balakrishnan&#8217;s Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273#comment-737413">
			May 20, 2009 at 3:36 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://vasubalakrishnan.wordpress.com/2009/05/20/c-yield-keyword/" rel="nofollow">http://vasubalakrishnan.wordpress.com/2009/05/20/c-yield-keyword/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>