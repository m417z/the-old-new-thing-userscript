<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1302735">
				<div id="div-comment-1302735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302735">
			July 20, 2017 at 8:20 am</a>		</div>

		<p>There is no point in calling ReadAsync on a GZipStream (or any arbitrary stream you don&#8217;t know what it does). The default is to fulfill it synchronously anyway. FileStream, SocketStream, and NamedPipeStream actually implement ReadAsync but almost nothing else does.</p>
<p>I&#8217;m pretty sure that if you actually call the &#8220;void SomethingAsync&#8221; without the await keyword it&#8217;s really returning a Task, but there&#8217;s no good manual on how to resolve Tasks.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-raceprouk odd alt depth-2 parent" id="comment-1302736">
				<div id="div-comment-1302736" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RaceProUK' rel='external nofollow' class='url'>RaceProUK</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302736">
			July 20, 2017 at 8:54 am</a>		</div>

		<p>Typically, you&#8217;d consume a Task by awaiting, but when you need to do so explicitly, the best I&#8217;ve found is .GetAwaiter().GetResult().</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1302845">
				<div id="div-comment-1302845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302845">
			July 20, 2017 at 5:05 pm</a>		</div>

		<p>And if you have more than one task?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1302876">
				<div id="div-comment-1302876" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Schaeffer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302876">
			July 20, 2017 at 6:34 pm</a>		</div>

		<p>If you have more than one task, you save them to a collection then pass the collection to Task.WhenAll() or Task.WhenAny(). Then you read back from the task in question.</p>
<p>Task.Result has the result and a read on it will synchronously block until a result is obtained. You have to make double sure that any continuations the task needs to complete aren&#8217;t posted back to the thread you&#8217;re blocking on or you will deadlock. Async/await has a few of these common situations which really deserve a book. GetAwaiter() and GetResult() are for the compiler to call, not you (rejoice).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-raceprouk even depth-5" id="comment-1302946">
				<div id="div-comment-1302946" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RaceProUK' rel='external nofollow' class='url'>RaceProUK</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302946">
			July 21, 2017 at 2:54 am</a>		</div>

		<p>Task.Result also has a rather annoying habit of wrapping exceptions in an AggregateException, but with GetAwaiter().GetResult(), you get the naked exception.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1302986">
				<div id="div-comment-1302986" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302986">
			July 21, 2017 at 7:06 am</a>		</div>

		<p>I wouldn&#8217;t worry too much about the continuations being posted to my thread. There&#8217;s no continuation handler above me.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1303116">
				<div id="div-comment-1303116" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Gilbert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1303116">
			July 21, 2017 at 2:19 pm</a>		</div>

		<p>&gt; I&#8217;m pretty sure that if you actually call the &#8220;void SomethingAsync&#8221; without the await keyword it&#8217;s really returning a Task, but there&#8217;s no good manual on how to resolve Tasks.</p>
<p>Not the case. The method really has `void` as a return type. The reason this feature exists is to allow an `async` method to operate as an event handler, where the event handler delegate type returns `void`. From what I&#8217;ve read, there really is no other good reason to use `async void`.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-raceprouk odd alt thread-odd thread-alt depth-1 parent" id="comment-1302745">
				<div id="div-comment-1302745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RaceProUK' rel='external nofollow' class='url'>RaceProUK</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302745">
			July 20, 2017 at 8:55 am</a>		</div>

		<p>I may be wrong, but I believe the reason for the `async void` syntax is compatibility with event handlers, which typically must return `void` (as much as you can return `void`). If it wasn&#8217;t for that, the whole nasty case would simply not exist.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1302895">
				<div id="div-comment-1302895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Schaeffer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302895">
			July 20, 2017 at 6:41 pm</a>		</div>

		<p>In practice async void is for anything that accepts a delegate, especially work items to thread pools if you&#8217;re scaling hard and tight.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-andycadley2 odd alt depth-3" id="comment-1302916">
				<div id="div-comment-1302916" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302916">
			July 20, 2017 at 9:40 pm</a>		</div>

		<p>There&#8217;s a Microsoft sample of how to write an Interleave combinatory for awaiting on large numbers of Tasks without suffering the penalties of excessive continuations being creating (if you use WhenAny and do it the na√Øve way it&#8217;s O(n^2)) and that avoids the problems of async void.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1302905">
				<div id="div-comment-1302905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>GL</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302905">
			July 20, 2017 at 8:47 pm</a>		</div>

		<p>Next time I guess you&#8217;re talking about <code>async void</code>, in which when an exception escapes the function body as it normally reads, uncaught, <strong>after the first</strong> <code>await</code>, crash manifests itself, because there&#8217;s no exception handler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1302915">
				<div id="div-comment-1302915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302915">
			July 20, 2017 at 9:31 pm</a>		</div>

		<p>Talking about async calls in C#.</p>
<p>There&#8217;s one common mistake on writing async method with anonymous method: you write a try&#8230;catch&#8230; block that wraps it and forgot to write another to wrap within the anonymous method. It has been asked in a few times in the C# board in MSDN forum why the external try&#8230;catch&#8230; block doesn&#8217;t fire.</p>
<p>Hope there is static analysis rule to check that. (I didn&#8217;t aware of such rule in VS2015)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00037ffe8545d1b7 even thread-even depth-1" id="comment-1302995">
				<div id="div-comment-1302995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/David+Totzke' rel='external nofollow' class='url'>David Totzke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302995">
			July 21, 2017 at 7:13 am</a>		</div>

		<p>Stephen Toub of Microsoft has an excellent document on the &#8220;Task-based Asynchronous Pattern&#8221;.<br />
<a href="https://www.microsoft.com/en-us/download/details.aspx?id=19957" rel="nofollow">https://www.microsoft.com/en-us/download/details.aspx?id=19957</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>