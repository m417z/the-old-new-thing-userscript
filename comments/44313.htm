<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1182953">
				<div id="div-comment-1182953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1182953">
			April 3, 2015 at 7:15 am</a>		</div>

		<p>You can get the parent process creation time from HKEY_PERFORMANCE_DATA. &nbsp;This is accessible by everybody. &nbsp;Or at least it used to be by default; I haven&#39;t checked on recent versions of Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1182963">
				<div id="div-comment-1182963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Torrin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1182963">
			April 3, 2015 at 7:59 am</a>		</div>

		<p>Yep, sometimes folks send a question and then continue to look and come up with the issue on their own. &nbsp;By the way, I think there is a closing parenthesis missing on the inner if of the do/while statement.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mndos even thread-even depth-1" id="comment-1182993">
				<div id="div-comment-1182993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MacIn173' rel='external nofollow' class='url'>MacIn173</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1182993">
			April 3, 2015 at 2:12 pm</a>		</div>

		<p>One issue with job objects is once you assign process to a job, you can&#39;t revert this assignment. And you can&#39;t reassign process to another job. Once I have had similar issue: Process A (service) was creating processes B1..Bn. For each, a job object was created to keep track of child processes for B1..Bn so once A needs to close Bn, it would be able to close it with descendants. But here&#39;s the trick: once A exits (there&#39;s need to restart service), there&#39;s no way to get those B1..Bn back. Problem is once A is closed, job objects (let&#39;s call them JobB1..JobBn) are closed as well (no longer listed in Object Manager). But processes B1..Bn still marked as processes inside of job objects JobB1..JobBn. While JobB1..JobBn does no longer exist. And now A can&#39;t create new job objects and put B1..Bn in those, since these processes are marked as being in job already.</p>
<p>It looks like once Job object is closed during process shut down, processes inside of a job doesn&#39;t get their &quot;BelongsToJobXYZ&quot; fields cleared. There&#39;s some logic obvious: while A from my example would be restarted, Bn can spawn child processes that wouldn&#39;t get into a job. But now these B1..Bn are stuck in the middle of nowhere, we can&#39;t access these JobB1..JobBn since these no longer exist anyway. You can get a handle to Bn, but no way to put it into a job again. Luckily, there&#39;s workaround for this (thnx to TechNet forums).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1183003">
				<div id="div-comment-1183003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183003">
			April 3, 2015 at 2:34 pm</a>		</div>

		<p>&gt; but the way to do this is to create a job object and put process P in it. You can then call Query­Information­Job­Object with Job­Object­Basic­Process­Id­List to get the list of child processes. </p>
<p>Except that until Windows 8, job objects cannot be nested. &nbsp;Maybe the child process you want to monitor uses jobs itself. &nbsp;Or maybe it currently doesn&#39;t, but since you want to be a responsible programmer who wants to be reasonably future-proof, you have to assume that someday a future version of that child program might use jobs. &nbsp;Or maybe the child program could be user-specified. &nbsp;Or maybe you control that child program and can guarantee that it won&#39;t use jobs, but in that case, you don&#39;t need jobs anyway since you could modify the child program to notify the parent via other mechanisms. &nbsp;For software intended to run on versions of Windows prior to Windows 8, I just don&#39;t think jobs are very useful for this purpose.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1183013">
				<div id="div-comment-1183013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">size matters</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183013">
			April 3, 2015 at 5:15 pm</a>		</div>

		<p>Concerning the dwSize fields: Would there be any downside to just initializing them in a constructor in the windows headers:</p>
<p>struct PROCESSENTRY32 {</p>
<p> &nbsp;DWORD dwSize;</p>
<p> &nbsp;[&#8230;]</p>
<p> &nbsp;PROCESSENTRY32() : dwSize(sizeof PROCESSENTRY32) {}</p>
<p>};</p>
<p>Might need some #ifdefs for C++ around. But I don&#39;t see how it would be any worse than not initializing?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1182983">
				<div id="div-comment-1182983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1182983">
			April 3, 2015 at 12:24 pm</a>		</div>

		<p>Another issue with parent process IDs: the parent process ID is merely the process ID whose attributes the new process inherits. &nbsp;It is not necessarily the process ID that *created* the new process. &nbsp;A process can create a new process with a different &quot;parent&quot; than itself, assuming sufficient authority.</p>
<p>This functionality has existed since at least NT 4.0, though I suspect actually the beginning of NT (3.1). &nbsp;However, it was only accessible through undocumented APIs until Windows Vista exposed it in its Win32 API UpdateProcThreadAttribute function (PROC_THREAD_ATTRIBUTE_PARENT_PROCESS).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1183023">
				<div id="div-comment-1183023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183023">
			April 3, 2015 at 7:35 pm</a>		</div>

		<p>The parent process ID got freed and reused, but the child still had the parent process id ?!?</p>
<p>That behavior is not only wrong but stupid wrong. When the process dies, reparent its children to its parent.</p>
<div class="post">[<em>Windows does not maintain a process tree. Indeed, the Windows kernel doesn&#39;t care about the &quot;parent&quot; at all. (Prior to Windows NT 4.0, it didn&#39;t even bother keeping track. The only reason it keeps track is so it can return it when you call Create&shy;Toolhelp32&shy;Snapshot!) The &quot;parent&quot; has no special status aside from being the source of inherited handles and other collateral. You are trying to impose the Unix process model onto Windows. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1183033">
				<div id="div-comment-1183033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Caron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183033">
			April 3, 2015 at 9:21 pm</a>		</div>

		<p>@Joshua: I suspect you have not fully thought out the implications of what you are suggesting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-ludlow even thread-even depth-1" id="comment-1183043">
				<div id="div-comment-1183043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Ludlow' rel='external nofollow' class='url'>John Ludlow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183043">
			April 4, 2015 at 1:09 am</a>		</div>

		<p>The only time I&#39;ve needed to hunt down all children of a process was to kill them. The application was a build server, and when a build needed to be aborted, the build&#39;s root process and all its children should be killed.</p>
<p>Of course, in that case PID reuse wouldn&#39;t be an issue, since the actual parent process is still alive. You just have to be careful to kill the parent last.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1183063">
				<div id="div-comment-1183063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183063">
			April 4, 2015 at 3:37 am</a>		</div>

		<p>@John Ludlow No, reuse is still an issue in your example. Even though your process isn&#39;t dead, it may have the id of a process that previously started some child processes before exiting. Therefore you are essentially killing random processes.</p>
<p>&quot;Of course, in that case PID reuse wouldn&#39;t be an issue, since the actual parent process is still alive. You just have to be careful to kill the parent last&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1183083">
				<div id="div-comment-1183083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183083">
			April 4, 2015 at 8:09 am</a>		</div>

		<p>Might as well document it as &quot;does not work&quot; then. The use caveat cannot be reliably overcome.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1183113">
				<div id="div-comment-1183113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183113">
			April 4, 2015 at 3:00 pm</a>		</div>

		<p>@AndyCadley: Windows has a POSIX subsystem. Working &quot;like Unix&quot; is more or less what the POSIX standard is for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1183123">
				<div id="div-comment-1183123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183123">
			April 4, 2015 at 3:39 pm</a>		</div>

		<p>@Cesar:</p>
<p>I thought the POSIX subsystem stopped being a supported feature a while back. &nbsp;And even if Windows does have a POSIX subsystem, wouldn&#39;t you need to be running under that subsystem in order to assume that you&#39;d get a POSIX process model?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1183093">
				<div id="div-comment-1183093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183093">
			April 4, 2015 at 10:50 am</a>		</div>

		<p>/*but the child still had the parent process id ?!?*/</p>
<p>Child doesn&#39;t have parent process id, the only thing child has is its own process id.</p>
<p>/*Might as well document it as &quot;does not work&quot; then*/</p>
<p>But sometimes it works. Furthermore there&#39;re way to check if you&#39;ve got really parent id process (just compare both processes creation times) or even proactively ensure that this will work (I will not disclose details, its a bad practice ;) )</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 even thread-even depth-1" id="comment-1183103">
				<div id="div-comment-1183103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183103">
			April 4, 2015 at 2:24 pm</a>		</div>

		<p>Joshua: Except it always works. It doesn&#39;t work *like Unix*, but Windows isn&#39;t Unix nor is it supposed to be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1183153">
				<div id="div-comment-1183153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">silent murder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183153">
			April 5, 2015 at 6:31 am</a>		</div>

		<p>@size matters. That would only be safe if you could guarantee your source file would be processed by c++ compilers. But since the langs have so much overlap there&#39;s no way the standard Windows headers could enforce it. So your source might as well use a non standard pragma to warn of the need to init the size if no __cplusplus or put the init in a conditional which is blech. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1183163">
				<div id="div-comment-1183163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183163">
			April 5, 2015 at 12:28 pm</a>		</div>

		<p>@Joshua The documentation is pretty clear that it &quot;does not work&quot;.</p>
<p><a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682489(v=vs.85).aspx">msdn.microsoft.com/&#8230;/ms682489(v=vs.85).aspx</a></p>
<p>When taking snapshots that include heaps and modules for a process other than the current process, the CreateToolhelp32Snapshot function can fail or return incorrect information for a variety of reasons</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1183203">
				<div id="div-comment-1183203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183203">
			April 6, 2015 at 5:56 am</a>		</div>

		<p>What purpose, exactly, does the parent process ID field supposedly fulfill, even internally? All of the reasons you shouldn&#39;t rely on it seem to me like they should also be reasons the kernel shouldn&#39;t rely on it.</p>
<div class="post">[<em>It is not used internally. The only reason it&#39;s there is so that it can be reported by CreateToolhelp32Snapshot, and CreateToolhelp32Snapshot reports it only for compatibility with the 16-bit TOOLHELP.TaskFirst function. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1183213">
				<div id="div-comment-1183213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183213">
			April 6, 2015 at 6:13 am</a>		</div>

		<p>Which also makes me wonder what @Mike Caron meant by &quot;the implications of what you are suggesting.&quot; &#8211; surely assigning it to the ID of some living process that has _some_ relationship to the process, can&#39;t possibly be _worse_ than having it end up being some unrelated process that happened to pick up a used process ID. If we&#39;re accepting that &quot;process whose ID is the parent process ID of this process&quot; has absolutely no meaning at all, then reassigning an arbitrary value to the parent process ID shouldn&#39;t do any harm. I can&#39;t even begin to imagine that there are _any_ &quot;implications&quot; that aren&#39;t made even worse by the current behavior.</p>
<div class="post">[<em>If you reassign it, then you can&#39;t tell whether the original parent has exited. You end up attributing things to the wrong process. Instead of &quot;Inherited from a process that no longer exists&quot;, you say &quot;Inherited from XYZ&quot; where XYZ is not the process the value was inherited from. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1183223">
				<div id="div-comment-1183223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183223">
			April 6, 2015 at 7:11 am</a>		</div>

		<p>The console/terminal does care about the process hierarchy for its Ctrl+C handling and process groups but it is probably not using the parent process id&#39;s. Maybe it has its own internal information in CSRSS?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1183253">
				<div id="div-comment-1183253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183253">
			April 6, 2015 at 8:04 am</a>		</div>

		<p>@MakIn173:</p>
<p>To keep Job Objects alive, duplicate the job handle into its first process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1183313">
				<div id="div-comment-1183313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183313">
			April 6, 2015 at 11:01 am</a>		</div>

		<p>@skSdnW: It seems to be using a stack of who opened console input for reading.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1183423">
				<div id="div-comment-1183423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183423">
			April 6, 2015 at 2:23 pm</a>		</div>

		<p>[If you reassign it, then you can&#39;t tell whether the original parent has exited. You end up attributing things to the wrong process. Instead of &quot;Inherited from a process that no longer exists&quot;, you say &quot;Inherited from XYZ&quot; where XYZ is not the process the value was inherited from. -Raymond]</p>
<p>Then either zero it out or make it possible to get the start time for all processes as any user. If you come back and say the latter is a reasonable security restriction while not addressing the former at all (getting a garbage value) then you demonstrate the lines of though that end up with stuff requiring admin on Windows where it would not on other operating systems.</p>
<div class="post">[<em>Basically, the whole Toolhelp family of functions is for 16-bit compatibility only. Don&#39;t expect anything great to come of it. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1183443">
				<div id="div-comment-1183443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183443">
			April 6, 2015 at 2:50 pm</a>		</div>

		<p>Then why is Toolhelp still supported on 64-bit windows, which cannot execute 16-bit apps?</p>
<div class="post">[<em>See the story of why we still have <a href="http://blogs.msdn.com/b/oldnewthing/archive/2003/11/03/55532.aspx">registry keys that exist for backward compatibility with four programs written in 1993</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1183483">
				<div id="div-comment-1183483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183483">
			April 7, 2015 at 2:15 am</a>		</div>

		<p>I think you got yourself some mismatched { } in your code example there&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1183513">
				<div id="div-comment-1183513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Harris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183513">
			April 7, 2015 at 6:04 am</a>		</div>

		<p>@size_matters: Concerning the dwSize fields: Would there be any downside to just initializing them in a constructor in the windows headers&#8230;</p>
<p>Just having the one constructor would get in the way of aggregate initialisation.</p>
<p> &nbsp; &nbsp;PROCESSENTRY32 entry = { sizeof PROCESSENTRY32 };</p>
<p>In this case you could add a 1-argument constructor, but in general you don&#39;t know how many members the caller wants to initialise this way. Also, you have lost the zero-initialisation that this idiom does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-1183593">
				<div id="div-comment-1183593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183593">
			April 7, 2015 at 12:23 pm</a>		</div>

		<p>[Basically, the whole Toolhelp family of functions is for 16-bit compatibility only. Don&#39;t expect anything great to come of it. -Raymond]</p>
<p>*Win9x compatibility.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis odd alt thread-odd thread-alt depth-1" id="comment-1183753">
				<div id="div-comment-1183753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150403-00/?p=44313#comment-1183753">
			April 8, 2015 at 12:19 pm</a>		</div>

		<p>ParentProcessID can be useful for diagnostics &#8211; Sysinternals Process Explorer and Process Monitor both rely on it. &nbsp;And because of that, UAC elevation actually changes the PPID of newly-elevated processes (a LocalSystem service actually launches the elevated process, but then changes the PPID to that of the original requesting process). &nbsp;Just be aware of its limitations and whether the PPID matches the current process that has that PID (e.g., compare the start times of the two processes). &nbsp;Like I said, it&#39;s *helpful* with diagnostics but it&#39;s not authoritative, and it doesn&#39;t imply that Windows has or should have a *nix-like process model. &nbsp;If you need to track or manage groups of processes, use job objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>