<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1113763">
				<div id="div-comment-1113763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1113763">
			March 20, 2014 at 7:17 am</a>		</div>

		<p>+1 for the correct use of &quot;whom&quot; in the last sentence.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1113833">
				<div id="div-comment-1113833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1113833">
			March 20, 2014 at 8:13 am</a>		</div>

		<p>Hmmm, and if the message box window is owned by CSRSS? (Yes I actually got that.)</p>
<div class="post">[<em>Then the message was being put up by Windows after all. Thanks for going for the facts. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1114063">
				<div id="div-comment-1114063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1114063">
			March 20, 2014 at 10:15 am</a>		</div>

		<p>&gt;Hmmm, and if the message box window is owned by CSRSS? (Yes I actually got that.)</p>
<p>Then do Ctrl+Shift+Esc, and see under what account TASKMGR will start.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1114123">
				<div id="div-comment-1114123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1114123">
			March 20, 2014 at 11:32 am</a>		</div>

		<p>@alegr1: My own user.</p>
<p>Apparently some people forgot that if you tag a call to MessageBox with MB_SERVICE_NOTIFICATION the resulting window is owned by CSRSS despite what process called MessageBox.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1114143">
				<div id="div-comment-1114143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1114143">
			March 20, 2014 at 12:04 pm</a>		</div>

		<p>@Joker_vD: I asked for the ability to set UTF-8 as the application local code page and got ignored.</p>
<p>It turns out there&#39;s security reasons why you don&#39;t want UTF-8 as the system code page.</p>
<p>(Buffer overflow when UNICODE -&gt; ANSI results in a string that takes up more bytes than UNICODE.)</p>
<p>Can&#39;t come up with a good reason not to allow it at application level. I&#39;ve seen many programs</p>
<p>that would immediately take advantage of full UNICODE once set.</p>
<p>I&#39;d fix your third-party supplied DLL by placing a modified C library in the application directory if it weren&#39;t for the fact that SxS&#39;s signing blocks any good way of providing that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx odd alt thread-odd thread-alt depth-1" id="comment-1114153">
				<div id="div-comment-1114153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1114153">
			March 20, 2014 at 12:05 pm</a>		</div>

		<p>@Joker_vD</p>
<p>That function would be better named to_ucs2, but it does seem to do that job. It should probably assert(s[i]&lt;128).</p>
<p>Windows WAS UCS2 until it changed at some point (Windows 2000?) to UTF-16. So that program may be an older program, or written by a programmer from the NT days, or is a piece of code copied from an older program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1114183">
				<div id="div-comment-1114183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1114183">
			March 20, 2014 at 12:27 pm</a>		</div>

		<p>AIUI, the trouble with allowing UTF-8 as a &quot;real&quot; codepage is that you need MB_LEN_MAX to be &gt;= 4 in order for users of wctomb() and friends to work. Because the users of those functions have buffers of size MB_LEN_MAX to put the resulting bytes into, as they were guaranteed that that would be enough. And you can&#39;t change MB_LEN_MAX without breaking ABI compatibility with, well, every existing binary out there that uses it. Only, when Win32 was created, there were no multibyte character sets which used more than 2 bytes per code point, so MB_LEN_MAX on Win32 is a perfectly reasonable 2, and cannot be changed. :-(</p>
<p>(I think there are some other equivalent backwards-compatibility ABI constraints which are more Win32-y than libc-y, but MB_LEN_MAX is the one that sticks in my head.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1114253">
				<div id="div-comment-1114253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1114253">
			March 20, 2014 at 1:03 pm</a>		</div>

		<p>Wow. No wonder I never found why it was so touchy. Any program calling wctomb is doing it wrong already. Just let it fail if it would require &gt; 2 bytes. If you&#39;re calling wctomb you have to be prepared to handle it failing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1114293">
				<div id="div-comment-1114293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1114293">
			March 20, 2014 at 1:16 pm</a>		</div>

		<p>@Joshua:</p>
<p>There was one time, when I looked at Task Manager and saw that it runs as SYSTEM. I wonder if that was caused by some topmost window owned by SYSTEM-owned process, handling Ctrl_Shift_Esc</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1114353">
				<div id="div-comment-1114353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1114353">
			March 20, 2014 at 2:04 pm</a>		</div>

		<p>@alegr1: I&#39;ll bet that was a security bug at some point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1114133">
				<div id="div-comment-1114133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1114133">
			March 20, 2014 at 11:44 am</a>		</div>

		<p>I am apalled at libraries that use MessageBox or whatever to report critical errors instead of&#8230; I don&#39;t know, returning an error code from their InitLibrary function?</p>
<p>Also, will we *ever* have the ability to set CP_UTF8 as the system codepage? As of right now, working with all text strings as plain std::string with UTF8-coded text and calling widen()/narrow() when you need to call a Win32 API function works amazingly well, but man, fixing third-party libraries to, say, call wfopen() instead of fopen() is time quite time consuming. Given that you even have the sources to patch.</p>
<p>And I personally will never forget a program that had this to_unicode function:</p>
<p>wchar_t* to_unicode(char* s) {</p>
<p>if (!s) return 0;</p>
<p>size_t len = strlen(s);</p>
<p>char* result = malloc((len + 1) * 2);</p>
<p>for (int i = 0; result &amp;&amp; (i &lt;= len); ++i) {</p>
<p>result[2*i] = s[i]; result[2*i+1] = 0;</p>
<p>}</p>
<p>return result;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1114563">
				<div id="div-comment-1114563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1114563">
			March 21, 2014 at 12:32 am</a>		</div>

		<p>Don&#39;t even start with the whole family of mbtowcXxx/wctombXxx functions, because they&#39;re useless. You can&#39;t convert a UTF16-coded string to a UTF8-coded string with them because they depend on LC_CTYPE to perform conversion, and you can&#39;t set your locale to &quot;.65001&quot;. And even if you could, the locale is a process-wide setting, so you shouldn&#39;t touch it at all UNLESS you create a separate thread to perform all locale-dependent string operations on.</p>
<p>So you write &quot;std::wstring widen(const std::string&amp;, UINT = 65001)&quot; and &quot;std::string narrow(const std::wstring&amp;, UINT = 65001)&quot; wrappers for WideCharToMultiByte/MultiByteToWideChar and use them when you need. At least you can write and compile them only once, then link them in.</p>
<p>@Zan Lynx&#39;</p>
<p>&quot;but it does seem to do that job. It should probably assert(s[i]&lt;128)&quot; — no, it doesn&#39;t. That program used this function to convert usernames and passwords so that it could perform NTLM authentication. Well, guess what? The default username for the administrator account on Russian Windows is Администратор, and we use non-transliterated usernames in &quot;surname-dot-initials&quot; format, like иванов.нп, so that program never worked at all. It&#39;s broken. It works only for languages using basic Latin, hell, it&#39;s broken even for Latin-1, because Windows-1252 is different from ISO-8859-1, although it will work for most of the time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1114633">
				<div id="div-comment-1114633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1114633">
			March 21, 2014 at 2:08 am</a>		</div>

		<p>If you don&#39;t know where the message box is coming from, an easy way to find out is to run Process Explorer and drag it&#39;s target toolbar button to the window &#8211; Procexp will then highlight the process that owns the window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1114953">
				<div id="div-comment-1114953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1114953">
			March 21, 2014 at 9:36 am</a>		</div>

		<p>@Mike Dimmick: I only want to change the codepage for programs that don&#39;t know what Unicode is and so definitely don&#39;t call wctomb.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1114663">
				<div id="div-comment-1114663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1114663">
			March 21, 2014 at 4:19 am</a>		</div>

		<p>@Joker_vD: The point is that you cannot set your current codepage to UTF-8 because any legacy code that *does* use wctomb to convert to &#39;the user&#39;s current codepage&#39; will break, since they didn&#39;t create a big enough buffer.</p>
<p>@Karellen: Visual Studio 2013 apparently defines MB_LEN_MAX to 5 &#8211; see <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/296az74e.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/296az74e.aspx</a> . Using the &#39;Other Versions&#39; drop-down shows that this changed from 2 to 5 in Visual Studio 2005. That of course doesn&#39;t help programs that don&#39;t use the constant, or haven&#39;t been recompiled with a newer compiler.</p>
<p>Of course it would be possible to shim broken programs, setting the code page to something else, but that wouldn&#39;t help a user of those apps because they would presumably be using a script that didn&#39;t *have* an ANSI codepage. The advice for a very long time has been &#39;use Unicode APIs&#39;, so the Windows team has very little interest in making UTF-8 work (even if the convention on *nix has been to make the byte-oriented APIs UTF-8-aware, and code would be more easily portable if Windows were to follow suit).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115063">
				<div id="div-comment-1115063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1115063">
			March 21, 2014 at 2:25 pm</a>		</div>

		<p>@ender: ProcExp only shows you the process that created the window. &nbsp;Sometimes you have to dig deeper. &nbsp;Processes, after all, don&#39;t run code; threads do, and threads could easily call out to third-party code, and who knows what that code will do. &nbsp;Process Monitor would be a better choice. &nbsp;Start ProcMon, reproduce the error, then use it&#39;s target toolbar button on the message box. &nbsp;It&#39;ll automatically filter the events to just that process, and you can also see the active thread IDs, and the stack for each event. &nbsp;Even if you don&#39;t have symbols for the Microsoft modules (which you should!), you&#39;ll be able to see the module names, and and module names that aren&#39;t MS or your code should jump out as a red flag. &nbsp;Symbols make it easier, too; if you see the third-party library in the stack right below &quot;CreateWindow&quot; then you&#39;ve got your culprit right there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115143">
				<div id="div-comment-1115143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cowardly Anon Moose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1115143">
			March 21, 2014 at 7:36 pm</a>		</div>

		<p>@Joker_vD: that to_unicode function works fine for converting ASCII to UTF-16 or UCS-2. Was it documented as only doing that?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115223">
				<div id="div-comment-1115223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1115223">
			March 22, 2014 at 8:27 am</a>		</div>

		<p>@Cowardly Anon Moose: &#8230;it&#39;s from the source code of a (cross-platform) proxy that can perform NTLM-authentication to an upstream proxy (usually it&#39;s Microsoft ISA). It doesn&#39;t say anywhere in the manual that user names and users&#39; passwords must be ASCII-only, and given that Windows usernames are rarely ASCII-only in this part of the Earth, I consider this program to be hopelessly broken.</p>
<p>Okay, I understand, Linux doesn&#39;t have MultiByteToWideChar, but why not use iconv? Or ICU? Why not make this function to call MultiByteToWideChar on Windows?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115743">
				<div id="div-comment-1115743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140320-00/?p=1453#comment-1115743">
			March 25, 2014 at 11:51 am</a>		</div>

		<p>@Joker_vD: I&#39;ve used exactly that, when converting known 7 bit ASCII to UTF-16. Anyway, given that it is open source, you could fix it easily. My guess it the program is so old that iconv didn&#39;t exist. The Linux world was very late in moving to Unicode, quite possibly because the console will never support it (VGA text mode &#8230;).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>