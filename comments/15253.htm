<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-802993">
				<div id="div-comment-802993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Kay</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100115-00/?p=15253#comment-802993">
			January 15, 2010 at 8:16 am</a>		</div>

		<p>&gt;In this case, a superficially-redundant if (CachedInfo != NULL) test needs to be inserted.</p>
<p><a href="http://blogs.msdn.com/oldnewthing/archive/2009/12/04/9932270.aspx" rel="nofollow"></a> And a comment explaining why it really isn&#8217;t redundant, so I don&#8217;t come along and &#8216;fix&#8217; it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803003">
				<div id="div-comment-803003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100115-00/?p=15253#comment-803003">
			January 15, 2010 at 9:07 am</a>		</div>

		<p>Isn&#8217;t unsafe to call anything not from KERNEL32 in DllMain anyway? In this specific case, OLEAUT32 might have had its DLL_PROCESS_DETACH sent already and cleaned up all of its global state, leading to undefined behavior in CoTaskMemFree&#8230;</p>
<div class=post>[<i>If this is a dynamic detach, then OLEAUT32 will still be around. If it&#8217;s a termination detach, then yes, OLEAUT32 may not be there any more. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-803023">
				<div id="div-comment-803023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100115-00/?p=15253#comment-803023">
			January 15, 2010 at 9:15 am</a>		</div>

		<p>Not only it is bad in DllMain, even outside DllMain it is quite inefficient to load an entire DLL just for one function that does effectively nothing in the case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803033">
				<div id="div-comment-803033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100115-00/?p=15253#comment-803033">
			January 15, 2010 at 10:53 am</a>		</div>

		<p>Of course not releasing the memory because it&#8217;s a process termination gets you a spurious memory leak warning from memory checkers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-803043">
				<div id="div-comment-803043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100115-00/?p=15253#comment-803043">
			January 15, 2010 at 11:05 am</a>		</div>

		<p>I thought CoTaskMemFree was in OLE32.DLL, not OLEAUT32.DLL.</p>
<div class=post>[<i>You&#8217;re right. Fortunately it doesn&#8217;t affect the underlying story. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803063">
				<div id="div-comment-803063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100115-00/?p=15253#comment-803063">
			January 15, 2010 at 1:34 pm</a>		</div>

		<p>But considering you can&#8217;t check whether your DLL is dynamically unloaded or unloaded on termination, why would you call a function in a DLL that might not be present anymore?</p>
<p>And if you impose that it must always be dynamically unloaded for some reason, you can also impose that users should call a function in the DLL that performs clean-up, and make it illegal to unload the DLL without calling that function (for example by raising an exception).</p>
<p>In other words, I see no excuse to call functions from outside Kernel32 from DllMain. But since you wrote about it, I must be wrong. Please enlighten me.</p>
<div class=post>[<i>The lpReserved parameter tells you whether you&#8217;re being unloaded dynamically or as part of process termination. The clean-up function is a good pattern, but it has its subtleties (race conditions) and sometimes you have to work within an existing model that doesn&#8217;t provide for it (e.g. COM inproc servers).-Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-803073">
				<div id="div-comment-803073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100115-00/?p=15253#comment-803073">
			January 15, 2010 at 4:19 pm</a>		</div>

		<p>If you are writing a DLL in plain old C (or C++), and you use the ANSI C Standard atexit(f) function to indicate that function f() should run during the process&#8217;s exit-time cleanup, then in some circumstances the C run-time library may call f() during DLL_PROCESS_DETACH for your DLL.</p>
<p>This is &quot;how you might be writing code that goes into DllMain() without even knowing it.&quot; &nbsp;So apply the same restrictive guidelines to atexit() functions that apply to DllMain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803013">
				<div id="div-comment-803013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dgt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100115-00/?p=15253#comment-803013">
			January 15, 2010 at 9:14 am</a>		</div>

		<p>shouldn&#8217;t the code just check that this is a process detach and *don&#8217;t* release the memory? it is going to be gone anyway.</p>
<div class=post>[<i>s/process detach/process termination detach/ and I agree with you. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-803083">
				<div id="div-comment-803083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100115-00/?p=15253#comment-803083">
			January 15, 2010 at 5:47 pm</a>		</div>

		<p>Does the same restriction (&#8220;you can&#8217;t do anything interesting in DllMain&#8221;) apply for plug-ins or shell extensions? By the time the DLL loads the host must be fully operational and things like user32.dll should be already initialized, right?</p>
<div class=post>[<i>Initialization order is only one of many issues. <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/28/63880.aspx" rel="nofollow">Here&#8217;s another</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803093">
				<div id="div-comment-803093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100115-00/?p=15253#comment-803093">
			January 16, 2010 at 1:27 am</a>		</div>

		<p>Ah! Thanks Raymond, I was fooled by the name lpReserved.</p>
<p>So, is it a bug to link statically to or call LoadLibrary on an inproc server, because they expect to be unloaded dynamically and may perform necessary clean-up that it cannot do on process termination, or should well-written inproc servers clean-up when the total object count drops to zero?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-803513">
				<div id="div-comment-803513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100115-00/?p=15253#comment-803513">
			January 18, 2010 at 10:00 pm</a>		</div>

		<p>So what happens if you&#8217;re shutting down Windows and the DLL the app is unloading requires loading another dll?</p>
<p>At least, I assume since the error is &quot;DLL Initialization Failed because this window station is shutting down&quot; means the DLL can&#8217;t be loaded&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803683">
				<div id="div-comment-803683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Sawyer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100115-00/?p=15253#comment-803683">
			January 19, 2010 at 1:26 pm</a>		</div>

		<p>Seen this myself several times. &nbsp;Here&#8217;s a real groaner version. &nbsp;They really tried to avoid calling their shutdown if they hadn&#8217;t been initialized&#8230;</p>
<p>if (XYZDLL_Initialized())</p>
<p>&nbsp;XYZDLL_Terminate();</p>
<p>When it was delay loaded, XYZ.DLL gets loaded to call XYZDll_Initialized(). &nbsp;That returns false, but the damage is done.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>