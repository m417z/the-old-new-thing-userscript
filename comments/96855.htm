<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1306905">
				<div id="div-comment-1306905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170821-00/?p=96855#comment-1306905">
			August 21, 2017 at 8:35 am</a>		</div>

		<p>The behavior for software faults and hardware faults makes sense to me, but the behavior for arithmetic faults is a bit mind-boggling.  Surely there&#8217;s an implicit risk of a side-effect here, whereby the program sends an invalid result to disk/network/whatever?</p>
<p>Then again, I never needed to go further than Z80 or i8086 in assembler, so I&#8217;m hardly up to date with modern architectures. (And of course neither of those had arithmetic traps &#8212; they just had an overflow bit in the flags field.)</p>
<p>Did anybody question this behavior at the time, or was it taken for granted that overflow checking was either for wusses or was a compiler &#8220;optimisation?&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1306915">
				<div id="div-comment-1306915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170821-00/?p=96855#comment-1306915">
			August 21, 2017 at 9:56 am</a>		</div>

		<p>This thing is quite common for floating-point, less so for integer arithmetic. For example, on x86, SSE has &#8220;sticky&#8221; FP exception flag bits in the bottom of the MXCSR register that get set by the CPU based on floating-point exceptions but need to be cleared manually. The ARMv8 floating-point status register FPSR is similar, and other architectures have a similar facility.</p>
<p>The common unspoken assumption is that applications actually caring about such exceptions is quite rare. Reading x86 MXCSR or ARM FPSR &#8211; both architectures require special instructions for this &#8211; effectively acts as the equivalent of an Alpha TRAPB, serializing execution of all earlier FP arithmetic instructions.</p>
<p>All such facilities are biased to be really lightweight as long as faults don&#8217;t occur (because faults are assumed to be very rare). The idea is that the compiler is supposed to generate fast code for the &#8220;happy path&#8221;, and then check for faults (TRAPB, looking at status registers) only at interface boundaries or before side effects. Thus, you only pay the error-checking overhead once. Then, depending on your goals, you might either handle the fault and have a separate slow path that avoids the issue (or at least tries to identify where exactly the overflow happened, say for error reporting), or just abort.</p>
<p>A different approach that explicitly tries to propagate error conditions down dataflow edges so they can be checked late is Itanium&#8217;s Not-a-Thing bit (somewhat analogous to floating-point NaNs, but on integer registers, and used to flag results that depend on faulting computations; in essence, they&#8217;re hardware-supported &#8220;poison&#8221; values). Raymond has written about that before. :)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>