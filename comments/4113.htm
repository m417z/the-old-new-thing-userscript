<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-chuckop even thread-even depth-1" id="comment-1060733">
				<div id="div-comment-1060733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ChuckOp' rel='external nofollow' class='url'>ChuckOp</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060733">
			June 11, 2013 at 7:10 am</a>		</div>

		<p>This showed up on my Favorites bar as &quot;An introduction to COM connection points (new)&quot; and I thought, &quot;this is anything but new! &nbsp;Maybe a dormant form of the Y2K issue, where everything from the 1990&#39;s is new.&quot; &nbsp;I&#39;m teasing of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1060743">
				<div id="div-comment-1060743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060743">
			June 11, 2013 at 7:23 am</a>		</div>

		<p>The generality of IConnection­Point­Container also means that it is possible to write a generic helper function, and the shell already has one; shlwapi!ConnectToConnectionPoint (And some undocumented? IDispacth? IConnectionPoint helpers)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060753">
				<div id="div-comment-1060753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060753">
			June 11, 2013 at 8:03 am</a>		</div>

		<p>There&#39;s also ATLAdvise / AtlUnadvise which presumably does that internally.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060773">
				<div id="div-comment-1060773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060773">
			June 11, 2013 at 9:51 am</a>		</div>

		<p>Ah, good old Connection Points. &nbsp;I made extensive use of these (and Monikers) back in the Windows 95/NT4 days on a desktop video product that was all built out of COM components (although we refused to deal with IDispatch interfaces &#8211; anyone wanting to play in our pool had to use a real language to write their components). &nbsp;I recall writing something like ConnectToConnectionPoint way back then as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060783">
				<div id="div-comment-1060783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ipoverscsi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060783">
			June 11, 2013 at 10:16 am</a>		</div>

		<p>@CarlD: I&#39;ve read the Component Object Model Specification v0.9 from cover to cover, and besides the actual low-level marshaling stuff, the only other part I never got was Monikers. &nbsp;Oh, I know that they&#39;re supposed to be names to COM objects, but I never really groked what you were supposed to do with them. &nbsp;Since you&#39;re the first person I&#39;ve heard of who actually implemented them, care to share what you did with them?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060793">
				<div id="div-comment-1060793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060793">
			June 11, 2013 at 11:37 am</a>		</div>

		<p>Oh, Monikers are cool! &nbsp;In the video product, for example, I supported Monikers for just about everything, from a clip on the hard drives, to the master controller for the whole system. &nbsp;The great thing about monikers (which is also a bad thing, depending on your POV) is that you can hide an arbitrarily object binding operation behind a moniker &#8211; the client just call CoGetObject and is blissfully unaware of what needs to go on behind the scenes to instantiate that object. &nbsp;They were fun stuff, for sure!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060803">
				<div id="div-comment-1060803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060803">
			June 11, 2013 at 12:26 pm</a>		</div>

		<p>arrg! &nbsp;s/arbitrarily object binding/arbitrarily complex object binding/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060813">
				<div id="div-comment-1060813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060813">
			June 11, 2013 at 3:16 pm</a>		</div>

		<p>Oh, and as far as what you&#39;re supposed to DO with Monikers: Their reason for being is OLE linking (not embedding). &nbsp;It gives you a way to store a string (the Moniker) that refers to (a part of) another thing, like a range of cells in an Excel spreadsheet, or a clip on a hard drive (in a particular slot of a particular chassis of a particular FX machine connected to a particular network interface,&#8230;) and then use that string to retrieve a reference to the original object at a later time, without your program needing to know how to navigate through layers of containers to find the object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060823">
				<div id="div-comment-1060823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060823">
			June 11, 2013 at 10:22 pm</a>		</div>

		<p>Question:</p>
<p>In the code CComPtr&lt;IConnectionPoint&gt; spcp;</p>
<p>IUnknown_FindConnectionPoint(m_pWidget,ID_IWidgetClient, &amp;spcp);</p>
<p>How does one avoid/filter out debug assert on operator &amp; of CComPtr?</p>
<p>(I am doing same thing in my code, but with RSS Platform andI&#39;d like to avoid hundreds of debug asserts, when it iterates over items in feeds.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060843">
				<div id="div-comment-1060843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060843">
			June 12, 2013 at 4:57 am</a>		</div>

		<p>Klimax:</p>
<p>Sounds like you&#39;re re-using spcp. &nbsp;Don&#39;t do that! &nbsp;That&#39;s a memory leak! &nbsp;That&#39;s why CComPtr complains about the &amp; operator when spcp is non-NULL. &nbsp;In Raymond&#39;s code it should not assert (CComPtr has a constructor which auto-nulls itself).</p>
<p>If you must do that, call spcp.Release() beforehand. &nbsp;But that starts to defeat the point of smart pointers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1060863">
				<div id="div-comment-1060863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060863">
			June 12, 2013 at 5:55 am</a>		</div>

		<p>@Klimax: You just posted the code of operator*, not operator&amp;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060853">
				<div id="div-comment-1060853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060853">
			June 12, 2013 at 5:37 am</a>		</div>

		<p>@Ens:</p>
<p>There is no reuse. Debug_Assert(resp. ATLEnsure) complains on *null* pointer. (It&#39;s freshly constructed object)</p>
<p>That code is identical to the one in article. (Checked that again)</p>
<p>Code of ATL member function:</p>
<p>T&amp; operator*() const</p>
<p>{</p>
<p> &nbsp;ATLENSURE(p!=NULL);</p>
<p> &nbsp;return *p;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060943">
				<div id="div-comment-1060943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060943">
			June 12, 2013 at 10:05 am</a>		</div>

		<p>How can one tell I am in a hurry&#8230;</p>
<p>T** operator&amp;() throw()</p>
<p> &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;ATLASSERT(p==NULL);</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;return &#038;p;</p>
<p> &nbsp; &nbsp;}</p>
<p>This should be right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1061073">
				<div id="div-comment-1061073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1061073">
			June 13, 2013 at 3:43 pm</a>		</div>

		<p>@Ian &#8211; I completely agree. &nbsp;One of the best technical introductions ever, and an indispensable book if you&#39;re diving deep into COM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1061043">
				<div id="div-comment-1061043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Boyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1061043">
			June 13, 2013 at 10:27 am</a>		</div>

		<p>Speaking of COM connection points, it&#39;s time to plug Don Box&#39;s book Essential COM. It is probably the best technical introduction to any topic ever.</p>
<p>In the 35 pages of the first chapter, Don Box explains the fundamental problem of trying to re-use classes. And through a series of simple steps of solving the problems: he invents COM before your very eyes. Once you realize the *why* of COM, the remaining 300 pages are obvious, and just detail Microsoft&#39;s implementation. That includes `IUnknown`, `IDispatch`, ProgIDs, ClassIDs, and yes even Connection Points.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1061253">
				<div id="div-comment-1061253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alexander</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1061253">
			June 16, 2013 at 10:54 am</a>		</div>

		<p>and my first thought was we travelled back to the 90s for serial communicatiob ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>