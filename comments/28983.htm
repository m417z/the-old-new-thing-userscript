<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-443133">
				<div id="div-comment-443133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ac</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061116-00/?p=28983#comment-443133">
			November 16, 2006 at 12:03 pm</a>		</div>

		<blockquote><p>
  &nbsp; rgw555[(r &lt;&lt; 6) | (g &lt;&lt; 3) | b]
</p></blockquote>
<p>Somehow this doesn&#8217;t fit? when r takes 5 bits, and is shifted 6 bits, we cover up to 11 bits, and we&#8217;re to cover up to 15?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-443153">
				<div id="div-comment-443153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Trevor D</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061116-00/?p=28983#comment-443153">
			November 16, 2006 at 12:28 pm</a>		</div>

		<p>That was like reading a John Carmack post on 3D graphics. &nbsp;It all sounded very interesting but i have no idea what the heck you are talking about.</p>
<p>:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-443203">
				<div id="div-comment-443203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">squidbot</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061116-00/?p=28983#comment-443203">
			November 16, 2006 at 4:38 pm</a>		</div>

		<p>Very clever. Is that BitBlt typically going to be hardware accelerated?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-443213">
				<div id="div-comment-443213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.blogspot.com/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061116-00/?p=28983#comment-443213">
			November 16, 2006 at 5:28 pm</a>		</div>

		<p>Great post Raymond. Too bad most people will take it literally as a 1:1 (problem:solution) guide instead of adopting the principle of &quot;thinking about it in just the right way&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-443263">
				<div id="div-comment-443263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061116-00/?p=28983#comment-443263">
			November 17, 2006 at 2:44 am</a>		</div>

		<p>According to the SetDIBits documentation, hbmTable should be a handle to a compatible bitmap (DDB). Is it clear that SetDIBits works with a DIB section as well? It would probably be possible to select hbmTable into a memory DC and then call SetDIBitsToDevice instead of SetDIBits but then it isn&#8217;t clear either whether GDI would perform the desired color mapping or whether it would do some intermediate mapping to the color format of the DC.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-443283">
				<div id="div-comment-443283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061116-00/?p=28983#comment-443283">
			November 17, 2006 at 8:37 am</a>		</div>

		<p>I vaguely remember reverse-engineering the Windows 16-colour dithering algorithm. Sadly I optimised the code into unreadability, but basically it looked at the four nearest palette entries. Not only can these can be computed directly without doing computations on the whole palette but they can always be mixed to produce the original colour, although the conversion to a 4&#215;4 dither reduced the accuracy somewhat. Example: the colour (16, 40, 72) = ((0, 0, 0) * 7 + (0, 0, 128) * 4 + (0, 128, 128) * 3 + (128, 128, 128) * 2) / 16 so that a 4&#215;4 block of that colour would have 7 black pixels etc. (The pixels were also chosen in a predictable order).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>