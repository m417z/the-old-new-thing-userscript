<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (35)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-754483">
				<div id="div-comment-754483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754483">
			July 13, 2009 at 10:47 am</a>		</div>

		<p>Buffer overflow/Stack corruption bugs are, are, ah, I don&#8217;t know what.</p>
<p>So much of it starts from the base C standard string libraries from the 70s, that had no fear.</p>
<p>The amusing/sad thing is that these types of bugs have moved from annoyances (crashes on bad input) to security issues. &nbsp;What used to be a low probability input, not worth fixing has become a priority one fix now.</p>
<p>Oh, and the Microsoft bashers? &nbsp;Pls go away. &nbsp;You are like the little kid in the corner, going &quot;nah nah, make me&quot;. &nbsp;Grow up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754493">
				<div id="div-comment-754493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754493">
			July 13, 2009 at 10:49 am</a>		</div>

		<p>I suppose this is one of those micro-optimisations &nbsp;which we here about. If the overhead of allocation is so important wouldn&#8217;t _alloca be beter then allocating a fixed size buffer on the stack?</p>
<p>Though, I suppose the author would still need to remember to leave space for the null byte either way.</p>
<div class=post>[<i>They&#8217;re so cute when they&#8217;re young. _alloca just swaps one bluescreen for another. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754503">
				<div id="div-comment-754503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Boris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754503">
			July 13, 2009 at 11:07 am</a>		</div>

		<p>That (not the buffer overflow, but the original question) reminds me of a bug in SQL code I worked on once. The code failed with a division by zero error only when a date was passed within a specific month (August I think). Turns out we had a function meant to return how many days the month of a passed date had. The code went something like this:</p>
<p>Declare @ret INT</p>
<p>Set @ret = 0</p>
<p>IF @month = 1 or @month = 3 or @month = 5 or @month = 7 or @month = 10 or @month = 12</p>
<p>@ret = 31</p>
<p>IF @month = 4 or @month = 6 or @month = 9 or @month = 11</p>
<p>@ret = 30</p>
<p>IF @Month = 2</p>
<p>. . .</p>
<p>Oops! August has zero days! Took awhile to find it too.</p>
<p>Side note: this (or similar) code previously had a bug where it would always return 29 for February. Hey, it was tested and worked fine in 2004, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754523">
				<div id="div-comment-754523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754523">
			July 13, 2009 at 12:00 pm</a>		</div>

		<p>this crashes for any string size &gt;13. &nbsp;I thought the scenario was &quot;crash at strlen = 13, strlen &lt;13 is ok and so is strlen &gt; 13&quot;&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754543">
				<div id="div-comment-754543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754543">
			July 13, 2009 at 1:03 pm</a>		</div>

		<p>@Joe:</p>
<p>I made the same mistake at first that you did. &nbsp;At least I&#8217;m not alone.</p>
<p>if (strlen(hostname) &gt; sizeof(tmpbuffer))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754553">
				<div id="div-comment-754553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DriverDude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754553">
			July 13, 2009 at 1:15 pm</a>		</div>

		<p>&quot;What used to be a low probability input, not worth fixing has become a priority one fix now.&quot;</p>
<p>Buffer overflows should have been priority-1 bugs since the Morris Worm in 1988. It took Sun and others years to wake up to that, and followed slowly by Microsoft in 2001.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-754563">
				<div id="div-comment-754563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754563">
			July 13, 2009 at 1:42 pm</a>		</div>

		<blockquote><p>
  an old Windows 95 bug in the networking layer that crashed if a string was exactly 13 characters long
</p></blockquote>
<p>That&#8217;s not weird. &nbsp;Weird would be if the bug also only happened on Fridays.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754573">
				<div id="div-comment-754573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John_F</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754573">
			July 13, 2009 at 1:43 pm</a>		</div>

		<p>I think they are thinking of IP&#8217;s not hostnames &#8211; which still would&#8217;nt really work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754593">
				<div id="div-comment-754593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754593">
			July 13, 2009 at 2:10 pm</a>		</div>

		<p>13 characters ought to be enough for anybody :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754613">
				<div id="div-comment-754613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754613">
			July 13, 2009 at 2:30 pm</a>		</div>

		<p>@Joe</p>
<p>This will only crash if the hostname is exactly 13 characters. &nbsp;If there are more than 13 characters, strdup allocates enough memory to hold a copy of the string (including the trailing NULL). &nbsp;If there are less than 13 characters, there&#8217;s already enough room in tmpbuffer to hold the whole string and a NULL terminator. &nbsp;If there are exactly 13, the test fails and tmpbuffer is used, but when strcpy copies the string over and adds in a trailing NULL it overruns the buffer by writing 14 characters to a 13 character buffer. &nbsp;This is due to the fact that strlen does not include the NULL terminator in its result.</p>
<p>The easy &quot;fix&quot; would be to change the test to (strlen(hostname) &gt;= sizeof(tmpbuffer))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754633">
				<div id="div-comment-754633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754633">
			July 13, 2009 at 3:57 pm</a>		</div>

		<p>[They&#8217;re so cute when they&#8217;re young. _alloca just swaps one bluescreen for another. -Raymond]</p>
<p>Yes, come to think of it I suppose if you _alloca for any arbitrary size string, you could overflow the stack.</p>
<p>Forget I mentioned it &#8211; in my defence I would just declare a std::string and be done with it. Though, I think std::string performs a similar optimisation internally. </p>
<div class=post>[<i>std::string swaps one bluescreen for another. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754653">
				<div id="div-comment-754653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754653">
			July 13, 2009 at 4:14 pm</a>		</div>

		<p>Sunil: If you were writing a Win95 network driver, you wouldn&#8217;t have use std::string. In fact, you still probably can&#8217;t use std::string in network drivers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754663">
				<div id="div-comment-754663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Ochs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754663">
			July 13, 2009 at 5:00 pm</a>		</div>

		<p>None of this explains the strange choice of 13. Anyone can come up with code for a buffer overflow or an edge case not covered &#8211; that&#8217;s trivial. What the original person probably couldn&#8217;t fathom (as I can&#8217;t either) is why on earth it would be 13. 255 give or take one I could see for obvious reasons. Perhaps other base-2 boundaries. But 13 is so incredibly arbitrary that it defies all logic.</p>
<p>Of course, as we&#8217;ve seen on this blog, much in Windows&#8217; development defies logic.</p>
<p>And meanwhile, this would be a good example of how unit tests could have caught this &#8211; you always check any edge case plus or minus one for exactly things like this. Does the code behave on small values, large values, and all of the edge cases (integer overflows, signed integers, hardcoded values &#8211; like 13).</p>
<div class=post>[<i>I put the explanation of the number 13 in the comment: &#8220;most host names are less than this size&#8221;. Instrumentation is often used to guide decisions like this. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754673">
				<div id="div-comment-754673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754673">
			July 13, 2009 at 5:13 pm</a>		</div>

		<p>I think he meant to use std::string regardless of the length of the input string (i.e. removing the bad code); at least that was my interpretation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754473">
				<div id="div-comment-754473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754473">
			July 13, 2009 at 10:38 am</a>		</div>

		<p>SomeFunction(char *hostname)</p>
<p>{</p>
<p> &nbsp; char tmpbuffer[strlen(&quot;microsoft.com&quot;)];</p>
<p> &nbsp; char *buffer;</p>
<p> &nbsp; &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754683">
				<div id="div-comment-754683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754683">
			July 13, 2009 at 6:02 pm</a>		</div>

		<p>re Joshua Ochs.</p>
<p>My interpretation is not that it&#8217;s intended to handle a length of 13, it&#8217;s intended to handle a length of 12 (but since it&#8217;s buggy, who can be sure?).</p>
<p>12 is short, and I have no explanation for why it was chosen, but it&#8217;s not as odd as 13.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754703">
				<div id="div-comment-754703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754703">
			July 13, 2009 at 6:33 pm</a>		</div>

		<p>Too me 13 looks like a good fit for a DOS file name (8 + 3 + separator + null).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754713">
				<div id="div-comment-754713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.warll.com' rel='external nofollow' class='url'>Warll</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754713">
			July 13, 2009 at 7:00 pm</a>		</div>

		<p>&quot;[std::string swaps one bluescreen for another. -Raymond]&quot;</p>
<p>How many bluescreens are there anyway?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-754723">
				<div id="div-comment-754723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754723">
			July 13, 2009 at 7:17 pm</a>		</div>

		<blockquote><p>
  How many bluescreens are there anyway?
</p></blockquote>
<p>Just one, with varying implementations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754733">
				<div id="div-comment-754733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754733">
			July 13, 2009 at 7:33 pm</a>		</div>

		<p>And here&#8217;s the fix:</p>
<p>char tmpbuffer[PATH_MAX]; // all imaginable strings are less than this size</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754743">
				<div id="div-comment-754743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754743">
			July 13, 2009 at 7:49 pm</a>		</div>

		<p>According to <a rel="nofollow" target="_new" href="http://support.microsoft.com/kb/q184242" rel="nofollow">http://support.microsoft.com/kb/q184242</a> it&#8217;s actually when NBT attempts to resolve a 15-character name with more than one period in. &nbsp;DNS usually had higher precedence than NetBIOS, so only an invalid domain name would trigger the fault.</p>
<p>15 is of course the maximum length of a NetBIOS name (see Google for why). &nbsp;I vaguely remember Win95 truncating anything longer, suggesting a fixed-length buffer. &nbsp;I wonder if it&#8217;s to do with replacing periods with nulls?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754753">
				<div id="div-comment-754753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754753">
			July 13, 2009 at 7:57 pm</a>		</div>

		<p>As for the mysterious 13 characters, see <a rel="nofollow" target="_new" href="http://google.com/search?q=cache:attrition.org/security/denial/w/winsk20.dos.html+%22" rel="nofollow">http://google.com/search?q=cache:attrition.org/security/denial/w/winsk20.dos.html+%22</a>(not+including+periods)%22</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754763">
				<div id="div-comment-754763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754763">
			July 13, 2009 at 7:59 pm</a>		</div>

		<p>Fix for garbled URL:</p>
<p><a rel="nofollow" target="_new" href="http://google.com/search?q=cache:attrition.org/security/denial/w/winsk20.dos.html+%22%28not+including+periods%29%22" rel="nofollow">http://google.com/search?q=cache:attrition.org/security/denial/w/winsk20.dos.html+%22%28not+including+periods%29%22</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754623">
				<div id="div-comment-754623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754623">
			July 13, 2009 at 3:35 pm</a>		</div>

		<p>Aw, what&#8217;s one byte* between friends?</p>
<p>*may or may not be one byte</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754773">
				<div id="div-comment-754773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754773">
			July 13, 2009 at 10:52 pm</a>		</div>

		<p>If only they had come up with memcpy_s etc all these problems would have gone away.</p>
<p>So I assume any programmer worth their salt now merely adds #define memcpy(a,b,c) &nbsp;memcpy_s(a,c,b,c)&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754783">
				<div id="div-comment-754783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754783">
			July 14, 2009 at 1:16 am</a>		</div>

		<p>@Gabe:</p>
<p>&quot;Sunil: If you were writing a Win95 network driver, you wouldn&#8217;t have use std::string. In fact, you still probably can&#8217;t use std::string in network drivers.&quot;</p>
<p>Sure you can. May not work on all Windows, hell, may only work on one flavor of Windows&#8230;</p>
<p>Just like I used the NDIS library functions to help manage linked lists and buffers and stuff. Include NDIS.LIB, and let people wonder why your code needs ndis.dll.</p>
<p>Of course, in Windows CE, you can use C++ just fine, and std::string should work in the miniport&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754793">
				<div id="div-comment-754793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">HagenP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754793">
			July 14, 2009 at 3:31 am</a>		</div>

		<p>Boris wrote:</p>
<blockquote><p>
  The code failed with a division by zero error</p>
<p>  only when a date was passed within a</p>
<p>  specific month (August I think).
</p></blockquote>
<p>You are not alone. From the mail archive (2006-12-xx):</p>
<p>[&#8230;] the WDK tool Signability.exe (from WDK RTM) reports the error</p>
<p>&nbsp;&quot;Signability Test failed to run, TestDrivers function call failed.&quot;</p>
<p>when in the driver INF file DriverVer is set to December, 2006.</p>
<p>Examples:</p>
<p>&nbsp;DriverVer=11/30/2006,6.0.6000.16386 &nbsp;; Fine</p>
<p>&nbsp;DriverVer=12/01/2006,6.0.6000.16386 &nbsp;; Provokes error</p>
<p>&nbsp;DriverVer=01/24/2007,6.0.6000.16386 &nbsp;; Fine</p>
<p>=&gt; signability.exe has since been replaced by inf2cat.exe</p>
<p>(Yes, I actually did try if I could use &quot;0&quot; for the year number. No, it did not work.) :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754803">
				<div id="div-comment-754803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">HagenP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754803">
			July 14, 2009 at 3:32 am</a>		</div>

		<p>(Yes, I actually did try if I could use &quot;0&quot; for the month. No, it did not work.) :-)</p>
<p>&#8230;errors happen. Frequently!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754823">
				<div id="div-comment-754823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754823">
			July 14, 2009 at 8:37 am</a>		</div>

		<p><a rel="nofollow" target="_new" href="http://attrition.org/security/denial/w/winsk20.dos.html" rel="nofollow">http://attrition.org/security/denial/w/winsk20.dos.html</a></p>
<p>Notice how it&#8217;s actually &quot;exactly 13 characters long (not including periods)&quot;, and that each FQDN contains exactly 2 periods. That brings us up to 15, which is suspiciously close to NETBIOS names. And indeed this page&#8217;s final comment confirms it&#8217;s some problem with NETBIOS name resolution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754903">
				<div id="div-comment-754903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754903">
			July 14, 2009 at 1:26 pm</a>		</div>

		<p>@Mike Dimmick,</p>
<p>IRQL_NOT_LESS_OR_EQUAL happens when a page fault occurs under IRQL&gt;=DISPATCH_LEVEL. It doesn&#8217;t mean the code or data was paged out. It means any page fault occurs, including an access to page zero, or to any not mapped address.</p>
<p>Paged code is another can of worms, and there is no reason to use it in the kernel anymore. I don&#8217;t understand why MS won&#8217;t just ignore this attribute for code sections. It even bites MS programmers themselves, which I found one time (ACPI paged code may get called under DISPATCH_LEVEL).</p>
<p>The issues with C++ in the kernel are solvable, and C++ was used for KMDF runtime.</p>
<p>You can&#8217;t really have C++ exceptions; this is why C++ standard library won&#8217;t fly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-754863">
				<div id="div-comment-754863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-754863">
			July 14, 2009 at 11:34 am</a>		</div>

		<p>On the subject of &#8216;what is a blue screen&#8217;:</p>
<p>Blue screens are generated (in Windows NT family) by KeBugCheckEx. This routine can be called explicitly when you know you have a fatal problem, or by the system in response to an exception it couldn&#8217;t handle, or that you didn&#8217;t handle.</p>
<p>The most common problem is that a coding error causes an access violation, which generally leads to stop code 1E, KMODE_EXCEPTION_NOT_HANDLED. That code is also caused by many other situations, like using a breakpoint instruction with no debugger attached.</p>
<p>The next most common problem, but quite erratic in how it reproduces, is that you&#8217;ve marked a piece of code or static data as pageable (or rather, not marked it as non-pageable) but referenced it when paging is not allowed. This produces stop code 0xA, IRQL_NOT_LESS_OR_EQUAL. The problem only reproduces when the referenced page is not currently in RAM, which on many systems means most of the time it doesn&#8217;t occur, only when under memory pressure. IRQL is the Interrupt Request Level, and it has to be at or below DISPATCH_LEVEL to allow paging (because the system needs to suspend this thread and *dispatch* another, so it can do something else while this thread waits for the page to be read from disk). Interrupts and deferred procedure calls are handled at levels above DISPATCH_LEVEL.</p>
<p>Taking Raymond&#8217;s cases: in the original problem, stack corruption will cause a return to a random address, or an incorrect frame pointer will be restored, or some other register value will be set incorrectly. That will either directly cause a reference to an invalid page (jumping to a non-code page, writing to a read-only page) or will corrupt something else, ultimately ending up either in a critical structure not self-checking, which would cause some specific stop code, or a 0x1E or 0xA as above.</p>
<p>Switching to _alloca is very likely to cause a stack overflow, because kernel stacks are very small (I see references to 32KB). I think you get a KMODE_EXCEPTION_NOT_HANDLED here with the STATUS_STACK_OVERFLOW code (0x800000FD).</p>
<p>The reason C++ is banned from kernel mode is to do with paging and how you declare code as paged. The Portable Executable file format is divided into Sections, and each Section has attributes (flags) which indicate whether the section is code or data, pageable or non-pageable, etc. One of the flags is the &#8216;Not Paged&#8217; flag. In the source code, you can use #pragmas to define what the section attributes are and to say which section code or data should go into. The C++ standard library doesn&#8217;t specify such things and as such ends up in your default code section (&#8220;.text&#8221;) or whatever was active when you #included the file. As a result, the code for std::string could be marked pageable, but you could have referenced it from code that must be non-pageable.</p>
<p>Worse still is that the compiler generates code for you, for example default constructors, destructors, and exception and delete helpers, and there is no way at all to control where that code ends up.</p>
<p>The result is that std::string is quite likely to cause IRQL_NOT_LESS_OR_EQUAL, but will be maddeningly unreproducible.</p>
<div class=post>[<i>The original issue was Win95, which has a completely different kernel mode model from the NT family. -Raymond]</i></div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-755143">
				<div id="div-comment-755143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-755143">
			July 15, 2009 at 4:03 am</a>		</div>

		<p>You could have C++ exceptions. The problem is really MSVC++, which implements them on top of SEH. That&#8217;s definitely not a good idea in kernel code. However, it&#8217;s conceivable that a future compiler would add a /kernelexception option.</p>
<p>Pageable/nonpageable is indeed trivially fixed. Mark .text nonpageable (safe default) and use .page as for the functions you explicitly allow to be paged.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-755263">
				<div id="div-comment-755263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-755263">
			July 15, 2009 at 10:15 am</a>		</div>

		<p>Michiel,</p>
<p>The problem with using .page (and INIT) with C++ code that you don&#8217;t know where some implicitly instantiated items end up, such as vtable and ctor/dtor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-755603">
				<div id="div-comment-755603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GordonSchumacher</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-755603">
			July 16, 2009 at 11:42 am</a>		</div>

		<p>@Michiel and Alexandre Grigoriev: Here&#8217;s Microsoft&#8217;s official summary:</p>
<p><a rel="nofollow" target="_new" href="http://www.microsoft.com/whdc/driver/kernel/KMcode.mspx" rel="nofollow">http://www.microsoft.com/whdc/driver/kernel/KMcode.mspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-755713">
				<div id="div-comment-755713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://douglas.mcclean@gmail.com' rel='external nofollow' class='url'>Douglas McClean</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090713-00/?p=17523#comment-755713">
			July 17, 2009 at 4:43 am</a>		</div>

		<p>Porter, see the FQA for some of the myriad ways in which that macro can make things worse. Non-hygienic textual substitution macros ftl.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>