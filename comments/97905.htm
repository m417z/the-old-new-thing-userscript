<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20180126-00/?p=97905#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="https://blogs.msdn.microsoft.com/oldnewthing/wp-comments-post.php" method="post" id="commentform" class="comment-form">
				<p class="comment-form-comment"><textarea id="comment" name="comment" cols="45" rows="4" aria-required="true"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" aria-required='true' required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" aria-required='true' required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit btn btn-default" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='97905' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="331e3ea49f" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="11"/></p>			</form>
			</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1322825">
				<div id="div-comment-1322825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905#comment-1322825">
			January 27, 2018 at 7:01 pm</a>		</div>

		<p>I&#8217;ve long wondered something about mapping the same memory at two different addresses.  If you program in assembly, then it makes perfect sense.  If you program in some high-level language, then maybe it also makes sense, depending on the language spec.  But what if you program in C?  Consider:</p>
<p>void f(int* x, int* y) {<br />
if(x==y) return;<br />
*x = 4;<br />
*y = 8;<br />
assert(*x == 4); // can this check be optimized out??<br />
}</p>
<p>The pointers are not const, so we are allowed to write to them.<br />
There are no threading games going on.<br />
They are not volatile, so presumably anything we wrote we can read back unchanged.<br />
But if x and y are two mappings of the same memory, this fails.<br />
Does this mean that to be fully standards compliant, we should declare them volatile, or is there some subtlety at work here?</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905&#038;replytocom=1322825#respond' onclick='return addComment.moveForm( "div-comment-1322825", "1322825", "respond", "97905" )' aria-label='Reply to Marvy'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-2 parent" id="comment-1322855">
				<div id="div-comment-1322855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905#comment-1322855">
			January 28, 2018 at 8:37 pm</a>		</div>

		<p>The use of mapped address is like the use of &#8220;pointer to pointer&#8221; in C.</p>
<p>In this case, it&#8217;s &#8220;You have two pointers. One points to the memory address directly, the other points to some memory location that contains address to the memory address referenced by the first pointer&#8221;.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905&#038;replytocom=1322855#respond' onclick='return addComment.moveForm( "div-comment-1322855", "1322855", "respond", "97905" )' aria-label='Reply to cheong00'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1323145">
				<div id="div-comment-1323145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Trapp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905#comment-1323145">
			January 30, 2018 at 9:09 am</a>		</div>

		<p>Yes but the question here was what the compiler&#8217;s view on this would be, right?<br />
I guess it won&#8217;t optimize this away because as soon as you dereference a pointer, the compiler can never know what&#8217;s the value you get, even if you accessed the same pointer one line above. Even when you application is single-threaded, *another process* may have changed the memory in the meantime (in case of shared memory), or maybe you accessed some hardware I/O which is done through memory access (there are even cases in which a &#8220;write&#8221; is actually a call to kind of a &#8220;function implemented by hardware&#8221; and the &#8220;read&#8221; will give you something entirely different). So I would assume that this check can in never be optimized out.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905&#038;replytocom=1323145#respond' onclick='return addComment.moveForm( "div-comment-1323145", "1323145", "respond", "97905" )' aria-label='Reply to David Trapp'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1323725">
				<div id="div-comment-1323725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905#comment-1323725">
			February 2, 2018 at 12:36 pm</a>		</div>

		<p>C and C++ have something called the Strict Aliasing Rule. It states that no two parameters to the same function that are pointers to different fundamental types may alias. Implied by this wording is that if they *are* of the same fundamental type, then they *might* alias, which rules out certain optimizations. In some variants, such as C99 with its &#8220;restrict&#8221; keyword, you can actually tell the compiler, &#8220;Even though there are other pointer parameters of the same type, I promise they won&#8217;t alias, go ahead and optimize!&#8221;</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905&#038;replytocom=1323725#respond' onclick='return addComment.moveForm( "div-comment-1323725", "1323725", "respond", "97905" )' aria-label='Reply to JDG'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1323795">
				<div id="div-comment-1323795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905#comment-1323795">
			February 3, 2018 at 11:06 am</a>		</div>

		<p>But here, we explicitly check that x and y are not equal, so the compiler &#8220;knows&#8221; they don&#8217;t alias.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1322846">
				<div id="div-comment-1322846" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://blog.excastle.com/' rel='external nofollow' class='url'>Joe White</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905#comment-1322846">
			January 28, 2018 at 5:37 pm</a>		</div>

		<p>Huh. It wouldn&#8217;t have occurred to me that you could change the VirtualProtect settings on a block of memory that came from MapViewOfFile. I would&#8217;ve expected that MapViewOfFile &#8220;owns&#8221; that memory. Changing its protection feels like visiting someone&#8217;s house and replacing their curtains.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905&#038;replytocom=1322846#respond' onclick='return addComment.moveForm( "div-comment-1322846", "1322846", "respond", "97905" )' aria-label='Reply to Joe White'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1323385">
				<div id="div-comment-1323385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905#comment-1323385">
			February 1, 2018 at 7:17 am</a>		</div>

		<p>The missing version of VirtualAlloc would be quite useful for expanding sparse matrices, without having to copy them to the new location. Ran out of column indices? VirtualAlloc a new larger block of memory, and reuse the existing memory block for the known data.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905&#038;replytocom=1323385#respond' onclick='return addComment.moveForm( "div-comment-1323385", "1323385", "respond", "97905" )' aria-label='Reply to SI'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>