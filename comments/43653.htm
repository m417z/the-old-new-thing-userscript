<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1161243">
				<div id="div-comment-1161243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161243">
			November 10, 2014 at 7:08 am</a>		</div>

		<p>The direction is not wrong. I&#39;ve seen too many cases of general form in 3rd party library be flawed. Even Object.ToString is wrong. Should have been Object.ToString(IFormatInfo).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161263">
				<div id="div-comment-1161263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lol</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161263">
			November 10, 2014 at 7:16 am</a>		</div>

		<p>It&#39;s a common misconception that cats have no value. But one has to ask where YouTube would be without them? <a rel="nofollow" target="_new" href="http://www.youtube.com/watch?v=kl1RwhATTzA">http://www.youtube.com/watch</a> </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1161273">
				<div id="div-comment-1161273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161273">
			November 10, 2014 at 7:16 am</a>		</div>

		<p>This is starting to look like DebuggerDisplayAttribute.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161293">
				<div id="div-comment-1161293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161293">
			November 10, 2014 at 7:20 am</a>		</div>

		<p>&quot;we&#39;re determined to see how far we can go, even if it&#39;s in the wrong direction.&quot;</p>
<p>Today, on The Old New Thing, Raymond channels all the people who&#39;ve written the horrible code he&#39;s written about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161303">
				<div id="div-comment-1161303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stuart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161303">
			November 10, 2014 at 7:41 am</a>		</div>

		<p>I&#39;d probably just code this to take a Func&lt;T, string&gt; and use lambdas &#8211; because if the classes have common properties but no common interface, that suggests to me you&#39;re dealing with objects you can&#39;t access the code of.</p>
<p>void FormatAndMunge&lt;T&gt;(IEnumerable&lt;T&gt; thingCollection, Func&lt;T, string&gt; format) {</p>
<p> &nbsp;var stuff = new List&lt;string&gt;();</p>
<p> &nbsp;foreach (var thing in thingCollection) {</p>
<p> &nbsp; &nbsp;stuff.Add(format(thing));</p>
<p> &nbsp;}</p>
<p> &nbsp;stuff.Sort();</p>
<p> &nbsp;Munge(stuff);</p>
<p>}</p>
<p>FormatAndMunge(toads, toad =&gt; string.Format(&quot;{0} = {1}&quot;, toad.Name, toad.Value));</p>
<p>etc</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161313">
				<div id="div-comment-1161313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harald van Dijk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161313">
			November 10, 2014 at 7:44 am</a>		</div>

		<p>To be really pedantic, no, pedants wouldn&#39;t (or at least: shouldn&#39;t) use that: I think you got it right with the non-pedantic version, not only because the C# rules for identifiers don&#39;t apply to .NET (so properties may be defined that are not valid C# identifiers), but more importantly because you shouldn&#39;t want invalid identifiers to be silently ignored, even if they would just end up causing exceptions later. It&#39;s good that you throw an exception for them that clearly points to the problem in the calling code.</p>
<p>That aside, if the classes can be extended, then my first thought after the generic FormatNameValue version using dynamic, would be to define an interface that provides Name and Value property getters. Having that, depending on the project, I might stop there: there is something to be said for each object implementing a useful ToString, but there is also something to be said for avoiding the code duplication of ToString in all of those classes. It&#39;s a matter of weighing the odds: is it more likely that one class will need slightly different formatting, or is it more likely that one caller will need slightly different formatting?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161323">
				<div id="div-comment-1161323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161323">
			November 10, 2014 at 8:18 am</a>		</div>

		<p>wait, a regex ? Now you&#39;ve got 2 problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161333">
				<div id="div-comment-1161333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott Brickey</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161333">
			November 10, 2014 at 8:57 am</a>		</div>

		<p>unless there&#39;s a constraint that the code needs to work on existing (unmodifiable) objects, I think I&#39;d just have interfaces interfaces:</p>
<p>iHasName and iHasNameAndValue</p>
<p>then just have extension methods:</p>
<p>MyToString&lt;T&gt;(this T) where T:iHasName</p>
<p>MyToString&lt;T&gt;(this T) where T:iHasNameAndValue</p>
<p>could be repeated as necessary for different interfaces depending on the data structure and desired output.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161353">
				<div id="div-comment-1161353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161353">
			November 10, 2014 at 11:12 am</a>		</div>

		<p>@Scott Brickey&#39;s solution is something I&#39;ve used in the past, and to expand upon it when we ran into an existing (unmodifiable) object we leveraged the Adapter pattern.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161363">
				<div id="div-comment-1161363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161363">
			November 10, 2014 at 11:17 am</a>		</div>

		<p>&#8230;when suddenly, and without warning, Raymond invented (a flavor of) string interpolations &#8211; a feature that&#39;s been in Perl (and others) for years, and is proposed for inclusion in the next official version of the C# language (See: <a rel="nofollow" target="_new" href="https://roslyn.codeplex.com/discussions/570292">roslyn.codeplex.com/&#8230;/570292</a>). &nbsp; It is a cool feature &#8211; one that will be widely used (and abused) if implanted in C#.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161383">
				<div id="div-comment-1161383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161383">
			November 10, 2014 at 12:15 pm</a>		</div>

		<p>The lambda approach Stuart shows is the first thing that came to mind for me.</p>
<p>Format strings are already a common source of problems as code evolves, and string interpolation can take that problem to a whole new level of horrible. &nbsp;Personally I think the only way string interpolation has any business in a language like C# is if it&#39;s implemented as a compiler service/translation so that validity and types can be verified at compile-time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161393">
				<div id="div-comment-1161393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161393">
			November 10, 2014 at 1:25 pm</a>		</div>

		<p>@Nico &#8211; the proposed C# 6 feature is exactly that &#8211; a compile time translation that&#39;s checked for types, etc. &nbsp;The sketch that Raymond produced here is more like Perl interpolations in that it&#39;s anything goes and we&#39;ll sort it out at runtime.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161403">
				<div id="div-comment-1161403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nyctef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161403">
			November 10, 2014 at 1:46 pm</a>		</div>

		<p>I disagree with the IFormattable implementation for a couple of reasons &#8211; firstly, you&#39;ve already introduced a constraint that the classes don&#39;t have a common base type, so this feels like cheating. Secondly, repeated application of this principle (oh, just stick it all on the objects themselves) tends to end up with massive SRP violations and unmaintainable code since all the classes are ten thousand lines long. </p>
<p>If you&#39;re going to do this &quot;properly,&quot; the technically correct answer would be to implement a visitor pattern on objects you want to be able to format (or report, or whatever). The interpolation extension method is a lot more fun, though :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161423">
				<div id="div-comment-1161423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161423">
			November 11, 2014 at 2:05 am</a>		</div>

		<p>+1 for Stuart&#39;s solution, it&#39;s very similar to what I coded up myself when I read your puzzle. I pulled the string.Format into the FormatAndMunge function and left the formatstring and property accessors as parameters, but comparing the code there&#39;s no big gain in that, and in fact it loses a bit of generality and is slightly more complicated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161413">
				<div id="div-comment-1161413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BWR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161413">
			November 10, 2014 at 8:41 pm</a>		</div>

		<p>Seems like this would have problems with escaped braces. If I had to use a regex, I would probably use something like the following and translate/append each match into a StringBuilder (checking that the last match includes the last character of the format string).</p>
<p>G(({(?&lt;identifier&gt;[_p{Lu}p{Ll}p{Lt}p{Lm}p{Lo}p{Nl}][_p{Lu}p{Ll}p{Lt}p{Lm}p{Lo}p{Nl}dp{Pc}p{Mn}p{Mc}]*)(:(?&lt;argument&gt;[^}]))?})|{{|}}|[^{}]*)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161513">
				<div id="div-comment-1161513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161513">
			November 11, 2014 at 4:12 pm</a>		</div>

		<p>Reflection is like CreateRemoteThread. If you&#39;re using it for something other than a debugger or actual &quot;meta&quot; program, you&#39;re Doing It Wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161533">
				<div id="div-comment-1161533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arthur van Leeuwen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141110-00/?p=43653#comment-1161533">
			November 12, 2014 at 6:04 am</a>		</div>

		<p>Somehow this reminds me of Algol 68&#39;s FORMAT type (with corresponding denotations). Ofcourse, Algol 68&#39;s FORMAT denotations were somewhat like lambda&#39;s in and of themselves&#8230; allowing you to specify which methods to call when extrapolating the format&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>