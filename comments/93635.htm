<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-raykoopa even thread-even depth-1" id="comment-1252005">
				<div id="div-comment-1252005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Ray+Koopa' rel='external nofollow' class='url'>Ray Koopa</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160609-00/?p=93635#comment-1252005">
			June 9, 2016 at 7:38 am</a>		</div>

		<p>It&#8217;s quite nice to see professionals writing C code out of assembly. I&#8217;m too lazy for that, nor good enough&#8230; To me, Raymond is a living and better IDA decompiler!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1252035">
				<div id="div-comment-1252035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160609-00/?p=93635#comment-1252035">
			June 9, 2016 at 9:01 am</a>		</div>

		<p>I&#8217;m confused by the assembly for CalcBitPosition.  Half way though there&#8217;s a &#8220;xor edx,edx&#8221; instruction which I believe clears edx. Then edx doesn&#8217;t come up against until the end where there&#8217;s a &#8220;mov dword ptr [eax],edx&#8221; so wouldn&#8217;t that set *arg2 = 0?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1252045">
				<div id="div-comment-1252045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160609-00/?p=93635#comment-1252045">
			June 9, 2016 at 9:26 am</a>		</div>

		<p>The division opcode takes a wide dividend in edx:eax and a normal-width divisor in whichever register is mentioned as the operand (ecx in this case). It then calculates the quotient and the remainder and puts them in eax and edx respectively.</p>
<p>An optimizing compiler will notice that you are using both a / b and a % b and will generate a single division instruction for both. Here, though, the code calculates n &gt;&gt; 5 separately, discards the quotient from the division opcode, and uses n % 32 from edx.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1252055">
				<div id="div-comment-1252055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160609-00/?p=93635#comment-1252055">
			June 9, 2016 at 9:43 am</a>		</div>

		<p>My decompilation techniques are very similar. In the more hairy cases, it also helps to track which registers currently the result of which expression.</p>
<p>I also annotate control structures. E.g. if I see a fragment compute some condition, then jump over a section of code if zero, I write “if (condition) {” at the jump site, and “}” at the jump target. (If the section that is jumped over ends in an unconditional jump, it becomes an “} else {” with a “}” at the target of that jump.)</p>
<p>Knowing the ABI (and having *an* ABI) helps. Sometimes one gets to decompile code written for an architecture that does not have a Base Pointer register, or has unstated assumptions on which registers are preserved across a subroutine call, or passes arguments via whichever registers are available, or via global variables. In those cases, there’s much more to track and cross-reference.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>