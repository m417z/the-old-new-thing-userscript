<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1333185">
				<div id="div-comment-1333185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen Oberholtzer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180416-00/?p=98515#comment-1333185">
			April 16, 2018 at 9:08 am</a>		</div>

		<p>What happens if the delay slot is on the next page, and that page is non-resident?  Does that actually stall the execution of the branch itself?</p>
<p>This carries with it a very interesting implication: It would be critical to ensure that the OS&#8217;s resident-page eviction code *never* has a situation where it consistently evicts the most recently-loaded page. That could cause an infinite loop (kernel swaps out branch instruction to swap in delay slot; has CPU resume execution at branch instruction which swaps out delay slot and swaps in branch instruction&#8230;)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1333195">
				<div id="div-comment-1333195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180416-00/?p=98515#comment-1333195">
			April 16, 2018 at 9:38 am</a>		</div>

		<p>The page fault on the fetch of the instruction in the delay slot triggers the exception, and it will be marked as an exception in a branch delay slot, so the kernel will back up four bytes on resume. You therefore must be able to keep at least three pages present (instruction, delay slot, and memory accessed by delay slot).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1333205">
				<div id="div-comment-1333205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180416-00/?p=98515#comment-1333205">
			April 16, 2018 at 2:21 pm</a>		</div>

		<p>&gt; The instruction in the branch delay slot executes twice. It executes once because it&#8217;s in the branch delay slot. It executes again because it&#8217;s the destination of the branch.</p>
<p>This feels like the sort of ridiculous but useful property that a sufficiently clever compiler might use to e.g. partially unroll a very tight loop.  I imagine it&#8217;s hard enough to get right and niche enough that the Microsoft compiler did not bother, though.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1333215">
				<div id="div-comment-1333215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180416-00/?p=98515#comment-1333215">
			April 16, 2018 at 2:48 pm</a>		</div>

		<p>It has the downside of putting an instruction in two basic blocks, which reduces the effectiveness of PGO since the two blocks cannot be separated. (Well, you could, but you&#8217;d have to teach PGO about these weird things called branch delay slots.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1333225">
				<div id="div-comment-1333225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180416-00/?p=98515#comment-1333225">
			April 16, 2018 at 5:22 pm</a>		</div>

		<p>I&#8217;m in luck then. I use mass optimize for size as code not loaded (including cache miss) benchmarks as the biggest slowdown the compiler can actually do something about.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1333235">
				<div id="div-comment-1333235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180416-00/?p=98515#comment-1333235">
			April 17, 2018 at 7:25 am</a>		</div>

		<p>Why is it called a branch DELAY slot?  What gets delayed?</p>
<p>It could have been called an always-execute slot.  That might have been clearer.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1333245">
				<div id="div-comment-1333245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180416-00/?p=98515#comment-1333245">
			April 17, 2018 at 7:52 am</a>		</div>

		<p>The effect of the branch is delayed for one instruction. &#8220;Always-execute&#8221; is confusing. After all, regular instructions are always executed! Does that mean that all instructions are in always-execute slots?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle odd alt depth-3 parent" id="comment-1333285">
				<div id="div-comment-1333285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180416-00/?p=98515#comment-1333285">
			April 17, 2018 at 1:20 pm</a>		</div>

		<p>Not to mention that instructions in a branch delay slot are not guaranteed to always execute!  See the LIKELY family of branches as an example.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1333315">
				<div id="div-comment-1333315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180416-00/?p=98515#comment-1333315">
			April 17, 2018 at 2:11 pm</a>		</div>

		<p>Ooh, that gives me an idea!</p>
<p>What if you have a likely branch to the branch delay slot?  Then&#8230; wait&#8230; [goes and reads part 8 again]&#8230; you can branch on whether to execute an instruction zero times (not taken) or twice (taken).</p>
<p>I&#8217;m sure the compiler could use this to devastating optimization effect in TWO whole programs that actual people have written.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1333735">
				<div id="div-comment-1333735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Julien Oster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180416-00/?p=98515#comment-1333735">
			April 19, 2018 at 3:13 pm</a>		</div>

		<p>Delay slots in general are just one of the most confusing things readers of assembly code on unfamiliar architectures can encounter. While I don&#8217;t see any way to alleviate that in the machine code, I wish there had at least been the some mandatory assembly syntax around them. For example something like</p>
<p>B label | OR v0, zero, zero</p>
<p>To illustrate that something truly special is going on here, and that both instructions are in an unusual relation to each other. <i>Without</i> any helpfully minded shortcut such as implicitly putting a NOP into the delay slot if you omit the &#8220;| &#8230;&#8221; part, to really enforce instead that a branch is followed by a slot.</p>
<p>But then, as the series already points out, history has shown that coupling the ISA so strongly to the implementation is the problem here.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1333885">
				<div id="div-comment-1333885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180416-00/?p=98515#comment-1333885">
			April 23, 2018 at 3:45 am</a>		</div>

		<p>I&#8217;m not convinced that branch delay slots are even the most confusing thing about MIPS, certainly not when considering what non-x86 architectures have done.</p>
<p>Coupling the implementation to the ISA was a huge benefit at the time, it just proves that all decisions are wrong when you re-evaluate them in the future. The PlayStation used an ASIC that was based on a MIPS R3000 compatible soft core, there was no way that it could have supported an ISA that was decoupled from the implementation or compromising the implementation because some junior programmers might not cope.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>