<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20180502-00/?p=98655#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="https://blogs.msdn.microsoft.com/oldnewthing/wp-comments-post.php" method="post" id="commentform" class="comment-form">
				<p class="comment-form-comment"><textarea id="comment" name="comment" cols="45" rows="4" aria-required="true"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" aria-required='true' required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" aria-required='true' required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit btn btn-default" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='98655' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="c7b2efb846" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="119"/></p>			</form>
			</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1335415">
				<div id="div-comment-1335415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Giedrius</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335415">
			May 2, 2018 at 7:48 am</a>		</div>

		<p>Wouldn&#8217;t using three states like Nothing/Running/Wont run and atomically swapping them work?</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335415#respond' onclick='return addComment.moveForm( "div-comment-1335415", "1335415", "respond", "98655" )' aria-label='Reply to Giedrius'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1335485">
				<div id="div-comment-1335485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clockwork-Muse</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335485">
			May 2, 2018 at 9:27 am</a>		</div>

		<p>Okay, where did you store that state?  When is it safe to reuse that piece of memory?</p>
<p>It also doesn&#8217;t solve the problem of starvation:<br />
 1. Created as Nothing<br />
 2. Timer procs and sets as Running.<br />
 3. Main thread wants to close, but sees Running.  Setting the variable to Won&#8217;t Run doesn&#8217;t help, because it doesn&#8217;t tell you when the callback <b>finishes</b> (and is safe for free).  Loops for retry to set Won&#8217;t Run.<br />
 4. Timer finishes and sets Nothing.<br />
 5. Go back to 2</p>
<p>Attempting to add a fourth value &#8211; LastRun &#8211; doesn&#8217;t solve the problem (there&#8217;s a race condition when the main thread does the recovery between the two atomic sets).  Using two variables (one for &#8220;can start&#8221; and one for &#8220;running&#8221;) solves the issue, but doesn&#8217;t solve the &#8220;freeing the shared data&#8221; problem.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335485#respond' onclick='return addComment.moveForm( "div-comment-1335485", "1335485", "respond", "98655" )' aria-label='Reply to Clockwork-Muse'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1335575">
				<div id="div-comment-1335575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Giedrius</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335575">
			May 2, 2018 at 9:24 pm</a>		</div>

		<p>What&#8217;s “freeing the shared data” problem? Free the shared data when timers are finished and cancelled.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335575#respond' onclick='return addComment.moveForm( "div-comment-1335575", "1335575", "respond", "98655" )' aria-label='Reply to Giedrius'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1335585">
				<div id="div-comment-1335585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335585">
			May 2, 2018 at 11:54 pm</a>		</div>

		<p>And how do you know when the timers are finished and cancelled? They finish asynchronously, and there is no notification when they complete.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335585#respond' onclick='return addComment.moveForm( "div-comment-1335585", "1335585", "respond", "98655" )' aria-label='Reply to Raymond Chen - MSFT'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1335675">
				<div id="div-comment-1335675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clockwork-Muse</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335675">
			May 3, 2018 at 8:46 am</a>		</div>

		<p>Ah.  You&#8217;re thinking of something like this:<br />
 1. Created as Nothing<br />
 2. Timer procs and sets as Running<br />
 3. Main thread wants to close, so blanket sets Won&#8217;t Run<br />
 4. Timer finishes and sees Won&#8217;t Run, so the timer thread frees the shared data.</p>
<p>The problem is that this <b>requires</b> the timer to run, and (perhaps more importantly) that there be only one timer accessing the shared memory: this is a problem if your process takes longer to run than the timer proc interval, or was delayed, or a couple of other possibilities.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335675#respond' onclick='return addComment.moveForm( "div-comment-1335675", "1335675", "respond", "98655" )' aria-label='Reply to Clockwork-Muse'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1335425">
				<div id="div-comment-1335425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335425">
			May 2, 2018 at 8:07 am</a>		</div>

		<p>My solution: never use timers in threadpools. The most expediant way to create timers is to use WaitForMultipleObjects (or MsgWaitForMultipleObjects) in the master thread with the appropriate timeout.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335425#respond' onclick='return addComment.moveForm( "div-comment-1335425", "1335425", "respond", "98655" )' aria-label='Reply to Joshua'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1335445">
				<div id="div-comment-1335445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335445">
			May 2, 2018 at 8:36 am</a>		</div>

		<p>&#8220;If the callback is not running, then this frees the timer immediately. Otherwise, it waits for the callback to complete before freeing the timer.&#8221;</p>
<p>I read this and thought: isn&#8217;t this exactly what you want?</p>
<p>I had to reread it four times before I realised the problem: CloseThreadpoolTimer doesn&#8217;t wait for the callback to complete.  It returns immediately while something else waits for the callback to complete.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335445#respond' onclick='return addComment.moveForm( "div-comment-1335445", "1335445", "respond", "98655" )' aria-label='Reply to laonianren'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1335685">
				<div id="div-comment-1335685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335685">
			May 3, 2018 at 1:30 pm</a>		</div>

		<p>Agree. &#8220;It waits&#8221; reads like &#8220;CloseThreadpoolTimer waits&#8221;. Raymond, are you able to rephrase this to make it more clear?</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335685#respond' onclick='return addComment.moveForm( "div-comment-1335685", "1335685", "respond", "98655" )' aria-label='Reply to Jon'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1335455">
				<div id="div-comment-1335455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VinDuv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335455">
			May 2, 2018 at 8:53 am</a>		</div>

		<p>I was confused at first because I though “waits for the callback to complete before freeing the timer” meant that Close­Threadpool­Timer only return after callback completion. It isn’t; the documentation makes it clear that it frees the timer asynchronously, which is why the context data can not be immediately freed after its return.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335455#respond' onclick='return addComment.moveForm( "div-comment-1335455", "1335455", "respond", "98655" )' aria-label='Reply to VinDuv'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1335535">
				<div id="div-comment-1335535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JAS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335535">
			May 2, 2018 at 7:57 pm</a>		</div>

		<p>You have to support cancellation, meaning that every timer call should have a context/lock saying whether you acquired the timer or were cancelled. Whichever it was, gets to free any resources immediately and blocks off the opposite path. If a timer is cancelled this way, the timer callback might still fire late, but the cleanup code was already run on the canceller&#8217;s thread so nothing will run inside the callback. In C# this is absolutely trivial with try-catch/async-await and CancellationToken.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335535#respond' onclick='return addComment.moveForm( "div-comment-1335535", "1335535", "respond", "98655" )' aria-label='Reply to JAS'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1335625">
				<div id="div-comment-1335625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335625">
			May 3, 2018 at 2:01 am</a>		</div>

		<p>In C# this is only trivial because someone else already solved the problem for you. (The GC takes care of freeing the memory and the implementors of the C# wrapper around threadpool timers had to take care of any pinning problems and race conditions).</p>
<p>So yeah, easy if someone else solved the problem for you, but it doesn&#8217;t teach you how to solve it when you have to face it.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335625#respond' onclick='return addComment.moveForm( "div-comment-1335625", "1335625", "respond", "98655" )' aria-label='Reply to Zarat'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1335655">
				<div id="div-comment-1335655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">djingis1</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335655">
			May 3, 2018 at 6:58 am</a>		</div>

		<p>For certain definitions of &#8220;absolutely trivial&#8221;.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335655#respond' onclick='return addComment.moveForm( "div-comment-1335655", "1335655", "respond", "98655" )' aria-label='Reply to djingis1'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1335635">
				<div id="div-comment-1335635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335635">
			May 3, 2018 at 3:28 am</a>		</div>

		<p>What you want is a notification that the timer was freed. The question arises, how does CloseThreadpoolTimer get notified that it should free the timer? Maybe it just dispatches a task to the thread pool to wait for the callbacks to complete&#8230; in which case, you probably want to do that too instead of waiting on the calling thread.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335635#respond' onclick='return addComment.moveForm( "div-comment-1335635", "1335635", "respond", "98655" )' aria-label='Reply to Neil'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>