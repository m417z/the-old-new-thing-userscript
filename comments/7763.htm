<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-980693">
				<div id="div-comment-980693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980693">
			April 27, 2012 at 9:50 am</a>		</div>

		<p>This makes me wonder why someone was calling ExitProcess.</p>
<div class="post">[<i>Perhaps because they wanted to exit the process? The alternative is, what, Sleep(INFINITE)? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980703">
				<div id="div-comment-980703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980703">
			April 27, 2012 at 9:57 am</a>		</div>

		<p>&quot;The alternative is, what, Sleep(INFINITE)?&quot;</p>
<p>The alternative is to return from main(). Which, AFAIK, will also call ExitProcess for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-980733">
				<div id="div-comment-980733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980733">
			April 27, 2012 at 10:31 am</a>		</div>

		<p>[Perhaps because they wanted to exit the process? The alternative is, what, Sleep(INFINITE)? -Raymond]</p>
<p>TerminateProcess().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980743">
				<div id="div-comment-980743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980743">
			April 27, 2012 at 10:48 am</a>		</div>

		<p>@Cesar: &nbsp;The code tearing down the thread pool is in a DLL, as indicated by __DllMainCRTStartup present on the call stack.</p>
<p>@Joshua: &nbsp;TerminateProcess is not an acceptable API for normal process shutdown. &nbsp;And it&#39;s certainly not an acceptable API for a DLL to use to terminate its host process under normal circumstances. &nbsp;If you believe either of those statements are false then I feel for your users.</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2009/11/13/9921676.aspx" rel="nofollow">blogs.msdn.com/&#8230;/9921676.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-980753">
				<div id="div-comment-980753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesNT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980753">
			April 27, 2012 at 10:54 am</a>		</div>

		<p>Order of operations.</p>
<p>Who would have thought those high school algebra classes were laying such an important foundation?</p>
<p>JamesNT</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980763">
				<div id="div-comment-980763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980763">
			April 27, 2012 at 11:26 am</a>		</div>

		<p>Hang or crash only? How about just returning back to the caller with an error code.</p>
<div class="post">[<i><a href="http://blogs.msdn.com/b/oldnewthing/archive/2008/01/07/7011066.aspx" rel="nofollow">How do you clean up from a failed clean-up</a>? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-980783">
				<div id="div-comment-980783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980783">
			April 27, 2012 at 12:53 pm</a>		</div>

		<p>[But this helper DLL had a pending threadpool work item that the app didn&#39;t know about. -Raymond]</p>
<p>Creating a threadpool in a DLL sounds like a problem waiting to happen.</p>
<p>[How do you clean up from a failed clean-up? -Raymond]</p>
<p>You don&#39;t, but you try to keep going so the next cleanup handler can run. Maybe it has a buffer that needs flushing.</p>
<div class="post">[<i>But what if the next cleanup handler assumed that the previous one successfully cleaned up? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980793">
				<div id="div-comment-980793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980793">
			April 27, 2012 at 1:23 pm</a>		</div>

		<p>[But what if the next cleanup handler assumed that the previous one successfully cleaned up? -Raymond]</p>
<p>This is why I design my software to be TerminateProcess() safe by having well-defined COMMIT points and ROLLBACK on startup.</p>
<div class="post">[<i>And when ROLLBACK fails? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-980803">
				<div id="div-comment-980803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980803">
			April 27, 2012 at 1:30 pm</a>		</div>

		<p>BTW where was that (your) SEH filter that usually catches all exceptions raised inside DllMain? I think its a only one place where its suitable actually&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980823">
				<div id="div-comment-980823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980823">
			April 27, 2012 at 2:10 pm</a>		</div>

		<p>One of the comments over in the &quot;Clean-up functions can&#39;t fail because&#8230;&quot; post says to tell the user when something bad happens, since maybe he can do something. &nbsp;Such as, &quot;Out of memory? &nbsp;Close some other application.&quot;</p>
<p>Um, that won&#39;t help. &nbsp;Virtual memory, anyone?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-980833">
				<div id="div-comment-980833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980833">
			April 27, 2012 at 3:16 pm</a>		</div>

		<p>@ChrisR: It isn&#39;t the DLL exiting the process (if it were, it could do this cleanup BEFORE calling ExitProcess).</p>
<p>Note in the stack trace, you have two modules which are not part of Windows: the main application &quot;contoso&quot; and the library &quot;litware&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980843">
				<div id="div-comment-980843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980843">
			April 27, 2012 at 3:21 pm</a>		</div>

		<p>[And when ROLLBACK fails? -Raymond]</p>
<p>Same basic story as when ROLLBACK fails on SQL Server and about as unlikely.</p>
<div class="post">[<i>Well, this library was trying to do a rollback (canceling the stuff it had started) and it failed. Maybe this library should have been written in SQL. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-980853">
				<div id="div-comment-980853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980853">
			April 27, 2012 at 4:20 pm</a>		</div>

		<p>I suppose I&#39;ve opened a bit of a can of worms, but I&#39;m interested in whether there&#39;s more to the story. &nbsp;For example, how did litware.dll got loaded? &nbsp;If contoso.exe called CoCreateInstance(ILitWareInterface) and then leaked a reference (perhaps not even calling CoUninitialize()) then the appropriate thing to do is fix the bug in contoso.exe.</p>
<p>Contrariwise, if litware.dll is being loaded by another process calling CreateRemoteThreadEx I am not sure how it&#39;s supposed to work, and I am willing to believe that your recommendation of &quot;skip all cleanup if you&#39;re in process termination&quot; is all that needs to be fixed.</p>
<div class="post">[<i>Contoso called LitWare_DoSomethingAwesome, and as part of its work, LitWare_DoSomethingAwesome queued up some background tasks. Then Contoso decided that it was done and exited. It had no idea that LitWare_DoSomethingAwesome was going to schedule additional work onto the thread pool. (For example, maybe the LitWare folks decided that to improve performance, the DoSomethingAwesome function would return immediately and finish doing the awesome stuff in the background.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980863">
				<div id="div-comment-980863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980863">
			April 27, 2012 at 4:21 pm</a>		</div>

		<p>I guess my point was lost. I avoid the problem of trying a rollback from a weird state largely by doing the rollback at startup rather than shutdown.</p>
<div class="post">[<i>I guess I don&#39;t understand your point, then. If you roll back at startup, then your service is unavailable for the entire lifetime of the process! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-980873">
				<div id="div-comment-980873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980873">
			April 27, 2012 at 4:49 pm</a>		</div>

		<p>[I guess I don&#39;t understand your point, then. If you roll back at startup, then your service is unavailable for the entire lifetime of the process! -Raymond]</p>
<p>Easy. One creates checkpoints (committed transaction points) periodically, and if the proces crashes, it&#39;s restored to the saved checkpoint by rolling back all uncommitted transactions.</p>
<div class="post">[<i>I think we&#39;re talking about different things. You&#39;re talking about recovering from an app that crashes because it can&#39;t clean up properly. I&#39;m talking about why the app is crashing at cleanup in the first place. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980883">
				<div id="div-comment-980883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980883">
			April 27, 2012 at 4:49 pm</a>		</div>

		<p>@Ben Voight: &nbsp;Indeed I saw that. &nbsp;I was illustrating to Joshua and Cesar that their suggestions would not work, since the DLL does not (and should not) control process shutdown.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-980893">
				<div id="div-comment-980893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980893">
			April 27, 2012 at 5:13 pm</a>		</div>

		<p>I see. &nbsp;So Litware assumed that their work items would complete before the process exited, and did not provide any way for Contoso to wait on the awesome thing being completed, or to abort doing the awesome thing because it&#39;s time to shut down now.</p>
<div class="post">[<i>Sure, that&#39;s one scenario. I&#39;m sure you can be creative and come up with others. Just look at all the people who want to create a worker thread in their DLL_PROCESS_ATTACH. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980713">
				<div id="div-comment-980713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980713">
			April 27, 2012 at 10:21 am</a>		</div>

		<p>Moral of the story: it would really really help if the error messages explained what went wrong. Just allocate that error condition one unique code, that you never, not *ever* reuse anywhere else. Then document what causes it. Much better than STATUS_INVALID_PARAMETER, isn&#39;t it?</p>
<p>You&#39;ll probably counter this by saying that back then the value was only 16 bits and you wouldn&#39;t have enough values for all the distinct error conditions. Let alone consistently generate non-colliding values. That&#39;s fair enough, I suppose.</p>
<p>The idea still holds though. If this were an exception-based API, I&#39;d love to get an exception saying &quot;Cannot wait for callbacks to finish because thread pool is already destroyed, and the callbacks will never return&quot; instead of &quot;An argument is invalid&quot;. The customer (who seems to be one of the smarter ones) would not have to ask for support then.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-980773">
				<div id="div-comment-980773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980773">
			April 27, 2012 at 11:44 am</a>		</div>

		<p>The alternative is a clean shutdown path.</p>
<p>I&#39;m basically wondering why clean shutdown failed.</p>
<div class="post">[<i>This *is* the clean shutdown path. The app is exiting normally. But this helper DLL had a pending threadpool work item that the app didn&#39;t know about. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980903">
				<div id="div-comment-980903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">djhayman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980903">
			April 27, 2012 at 11:24 pm</a>		</div>

		<p>Hi Raymond,</p>
<p>I&#39;m ordinarily a .NET programmer who doesn&#39;t normally have to deal with DllMain or any of that sort of thing, so please correct me if I&#39;m wrong, but it seems that the best way of doing this sort of thing is as follows:</p>
<ol>
<li>The external library should have some sort of &quot;Init&quot; function (i.e. &quot;InitLitware&quot;) that the host process should call from its own &quot;main&quot;/&quot;WinMain&quot; function (or anywhere really), rather than the library doing any sort of heavy initialisation in its &quot;DllMain&quot; function.</li>
<li>
<p>The host process should then be able to call some of the library&#39;s functions (i.e. &quot;DoSomethingAwesome&quot;).</p>
</li>
<li>
<p>Lastly, the external library should also have some sort of &quot;Cleanup&quot; function (i.e. &quot;CleanupLitware&quot;) that the host process should call when it is ready (i.e. before exiting from &quot;main&quot;/&quot;WinMain&quot;, or calling &quot;ExitProcess&quot; or &quot;TerminateProcess&quot;), rather than the library doing any sort of cleanup in its &quot;DllMain&quot; function. This function should block the host process until it is complete (which includes waiting for any pending operations), so that the problem above can&#39;t occur.</p>
</li>
</ol>
<p>Is that about right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-980913">
				<div id="div-comment-980913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980913">
			April 28, 2012 at 3:40 am</a>		</div>

		<p>The MSDN article doesn&#39;t seem to suggest what happens if you try to close the threadpool twice, does this also crash?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980933">
				<div id="div-comment-980933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980933">
			April 28, 2012 at 2:19 pm</a>		</div>

		<p>@djhayman:</p>
<p>Unfortunately &quot;best&quot; is open to many different interpretations, and some programmers think that it is best for the people who use their library not to worry about initialisation and cleanup, and this is done in DllMain. In some ways you can understand this because if a library has some form of persistant state and the developer forgets to signal to that library that it is shutting down, then that persistant state may become corrupt.</p>
<p>Well anyway, I agree with you, the executable knows better about the state of the program. It is also documented in the DllMain documentation that when the process is terminating, all threads besides the one you are currently in has been terminated. It is also documented that you shouldn&#39;t do anything too complex in DllMain, like communicate with other threads. But people don&#39;t read, people don&#39;t listen, they just do what they want and then get confused when the program crashes.</p>
<p>@Neil:</p>
<p>What motivated you to ask that question? Since what you get back from CreateThreadpool is a pointer to a user mode structure, can you give any guarantee that, after you close the thread pool, it doesn&#39;t clean up the memory right away? Accessing anything after you said you don&#39;t want to use it any more is a bug.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-980963">
				<div id="div-comment-980963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980963">
			April 29, 2012 at 6:45 pm</a>		</div>

		<p>Say, I have such a litware, of which the vendor is long gone, that dare to do something with inappropiate timing on DllMain, but I still have to use the library. What advise can be provided to minimize to damage?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980973">
				<div id="div-comment-980973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@cheong00</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-980973">
			April 29, 2012 at 8:12 pm</a>		</div>

		<p>For the kind of thing that Raymond described, it might be good enough to load the DLL with LoadLibrary and unload it with FreeLibrary before you exit the process. That way the threads are still alive when the library tries to destroy the thread pool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-981303">
				<div id="div-comment-981303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120427-00/?p=7763#comment-981303">
			April 30, 2012 at 11:38 am</a>		</div>

		<p>cheong00:</p>
<p>If a DLL creates threads, it&#39;s IMPOSSIBLE to stop them safely from DllMain. It HAS to be a dedicated DLL function to shut it down properly.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>