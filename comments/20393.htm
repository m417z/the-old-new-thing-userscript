<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (36)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-678513">
				<div id="div-comment-678513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678513">
			October 30, 2008 at 12:42 pm</a>		</div>

		<p>I&#8217;ve been there.</p>
<p>It&#8217;d be great to be able to diff the parsed code rather than the code itself. Of course, that assumes it can still be parsed (which can be difficult if external dependencies are gone/changed).</p>
<p>Most diffing tools can ignore whitespace and the good ones can apply some regexps or similar in-memory conversions before diffing the two files but those still don&#8217;t help with big layout changes.</p>
<p>This problem creates a knock-on problem with lined-up &quot;tables&quot; of data or function calls in code: If you add/change a line so that the indentation of the others no longer matches (e.g. a much longer name in one column) then you&#8217;re left with the choice of ugly code or noisy diffs, or doing two check-ins for one change.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678563">
				<div id="div-comment-678563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678563">
			October 30, 2008 at 2:31 pm</a>		</div>

		<p>A similar issue is that one checkin should be for exactly one bug. &nbsp;It drives me nuts when people make a single checkin that fixes five different bugs. &nbsp;Especially when one of the bugs is a security issue that must be backported to older versions of the system. &nbsp;If it had been in a checkin all by itself it would have been trivial to port, but now is has to be filtered out of all this &quot;extra stuff&quot; and the probability of inserting a new bug goes up dramatically.</p>
<p>The source control system doesn&#8217;t care if you make a bunch of itty bitty checkins. &nbsp;It&#8217;s not going to get tired or upset at you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-678573">
				<div id="div-comment-678573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://openquality.ru/' rel='external nofollow' class='url'>Alaska Capt</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678573">
			October 30, 2008 at 2:31 pm</a>		</div>

		<p>Yet another example when a simple rule of thumb could change a lot of time. It really makes sense to divide the sheep from the goats :) Thanks for this insight.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678593">
				<div id="div-comment-678593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bdodson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678593">
			October 30, 2008 at 3:00 pm</a>		</div>

		<p>What this really indicates to me is that somebody should write a diff tool that knows enough about the language to detect changes in the code itself and exclude meaningless formatting changes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-678603">
				<div id="div-comment-678603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">manicmarc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678603">
			October 30, 2008 at 3:21 pm</a>		</div>

		<p>Would a diff tool that had a flag to ignore changes in spaces, tabs and new lines work? What&#8217;s the downside?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678613">
				<div id="div-comment-678613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678613">
			October 30, 2008 at 3:32 pm</a>		</div>

		<p>&quot;Would a diff tool that had a flag to ignore changes in spaces, tabs and new lines work? What&#8217;s the downside?&quot;</p>
<p>That your file now effectively has one line.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-678623">
				<div id="div-comment-678623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roastbeef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678623">
			October 30, 2008 at 3:35 pm</a>		</div>

		<p>I&#8217;ll second the mention of &quot;Beyond Compare 2&quot;. It is a great utility for merging source code trees and the great part is that it is crazy cheap&#8230; I think it&#8217;s like $15 for a single-user copy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678633">
				<div id="div-comment-678633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dmw.me.uk/' rel='external nofollow' class='url'>David W</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678633">
			October 30, 2008 at 3:36 pm</a>		</div>

		<p>Hey Raymond,</p>
<p>ISO C has had &#8220;//&#8221; for comments since C99, which is almost 10 years ago now. :)</p>
<div class=post>[<i>That&#8217;s why I said &#8220;classic C&#8221;. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-678643">
				<div id="div-comment-678643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jsbangs.wordpress.com' rel='external nofollow' class='url'>JS Bangs</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678643">
			October 30, 2008 at 3:49 pm</a>		</div>

		<p>&lt;i&gt;The source control system doesn&#8217;t care if you make a bunch of itty bitty checkins. &nbsp;It&#8217;s not going to get tired or upset at you.&lt;/i&gt;</p>
<p>Yes, but many teams have checkin gates that take a non-trivial amount of time to run. It can be prohibitively time-consuming for the developer to make 10 itty-bitty checkins when he could just make one checkin that rolls them all together.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678663">
				<div id="div-comment-678663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jbazuzi.blogspot.com' rel='external nofollow' class='url'>Jay Bazuzi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678663">
			October 30, 2008 at 5:28 pm</a>		</div>

		<p>Raymond is absolutely correct. &nbsp;</p>
<p>In fact, I usually go a bit further: any Refactoring that hits a lot of lines (like a rename) gets checked in by itself, too.</p>
<p>The goal is to make sure of two things:</p>
<ol>
<li>
<p>Reading diffs works. &nbsp;</p>
</li>
<li>
<p>My change descriptions can be detailed without being long.</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-678673">
				<div id="div-comment-678673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Puckdropper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678673">
			October 30, 2008 at 5:36 pm</a>		</div>

		<p>Some diff tools have the option to ignore whitespace and whitespace changes. &nbsp;No guarantee they&#8217;ll always work, but sometimes they&#8217;ll take 314 changes down to just 3 or 4.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678693">
				<div id="div-comment-678693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678693">
			October 30, 2008 at 6:13 pm</a>		</div>

		<p>It&#8217;s perfectly OK for the file to &quot;have one line&quot; when seen by the diff tool, if it can then point to the blocks of code that have changed by giving start line/column and end line/column pairs in the two files. A language-aware diff tool can even easily separate out fixing comment typos from changes to functionality.</p>
<p>Honestly, meaningful whitespace in source code is like an accountant using Notepad instead of Excel &#8211; it&#8217;s completely insane.</p>
<p>(Even if you love Python, the concept is &quot;blocks&quot; and the implementation for printing human-readable code doesn&#8217;t have to be the same as the data structure used in the editor and the compiler.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-678703">
				<div id="div-comment-678703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678703">
			October 30, 2008 at 7:26 pm</a>		</div>

		<p>This is a VCS limitation.</p>
<p>A good VCS would automatically detect and separate reformatting, comment changes, or semantic changes.</p>
<p>This would be doubly advantageous as you could completely hide all revisions that didn&#8217;t perform meaningful changes.</p>
<p>Separating commits is a reasonable measure but it still breaks some tools (such as blame &#8211; seeing who changed one particular line of code and when: you usually won&#8217;t care about whitespace changes or indentation which can happen when Leo points out above).</p>
<p>Unfortunately I don&#8217;t know of any VCM that does this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678543">
				<div id="div-comment-678543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe Dietz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678543">
			October 30, 2008 at 1:12 pm</a>		</div>

		<p>I sometimes actually do precisely what you mentioned to make it hard &#8216;i.e. &quot;too risky&quot; to the PHBs&#8217; to perform a backport on something that just shouldn&#8217;t be backported, because while the actual change might *look* simple, it is actually risky (typically this is driven by some number of customers/sales types demanding a backport rather than waiting for the next release). &nbsp;Sustaining often is not QA&#8217;d to the same level as a release and almost never has a beta release cycle.</p>
<p>As an aside: beyond-compare as a diff tool is pretty good at visually separating what is a formatting change from what is a substantive change.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-678713">
				<div id="div-comment-678713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678713">
			October 30, 2008 at 8:39 pm</a>		</div>

		<p>[It&#8217;s perfectly OK for the file to &quot;have one line&quot; when seen by the diff tool, if it can then point to the blocks of code that have changed by giving start line/column and end line/column pairs in the two files.]</p>
<p>It&#8217;s not OK in practice, because as you increase the granularity that the diff tool looks at, you create more opportunities for it to guess wrong. You&#8217;ve probably seen a diff that starts out fine, and then at some point it matches the wrong pair of lines and produces garbage for the rest of the file.</p>
<p>[I usually just ignored the policies and did things my own way.]</p>
<p>I would hope that if anyone does this on the Windows team, the management will clean his clock.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678723">
				<div id="div-comment-678723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jake Montgomery</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678723">
			October 30, 2008 at 8:44 pm</a>		</div>

		<p>I agree &#8211; don&#8217;t do it. &nbsp;But if you are the poor person stuck trying to diff code that has been reformatted, here is a tip.</p>
<p>Get both the old and new files from source code control, then run a good &quot;beautifier&quot;/auto-formatter on both of them. This way they are will both be in the same &quot;format&quot; and a diff should be more productive. It is not ideal, but it is a workaround.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-678763">
				<div id="div-comment-678763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678763">
			October 30, 2008 at 9:03 pm</a>		</div>

		<p>For active code with high longevity, one might consider forbidding mass syntactic reformatting altogether. &nbsp;Reason being, diff&#8217;s between non-sequential versions will neccessarily include any mass syntactic reformatting in intermediate revisions (whether or not the mass reformatting was originally commited in isolation), and diffs between non-sequential revisions become increasingly useful and neccessary as the code and the team maintaining it change over long periods of time. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678773">
				<div id="div-comment-678773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.algorithm.co.il/blogs' rel='external nofollow' class='url'>lorg</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678773">
			October 30, 2008 at 9:17 pm</a>		</div>

		<p>I&#8217;m doing a seminar for my degree about automatically finding bugs in concurrent programs. One of the references is this paper:</p>
<p><a rel="nofollow" target="_new" href="http://www.infosun.fim.uni-passau.de/st/papers/tr-99-01/esec99.pdf" rel="nofollow">http://www.infosun.fim.uni-passau.de/st/papers/tr-99-01/esec99.pdf</a></p>
<p>with the title of &quot;Yesterday, my program worked. Today, it does not. Why?&quot;. It details an algorithm to automatically find the bug causing culprits in a big check-ins, or multiple check-ins.</p>
<p>It seems this algorithm actually works, and while it might be overkill for the style changing issue, it might be useful for more complicated cases.</p>
<p>At the least, it&#8217;s a very interesting (and educating) read.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-678793">
				<div id="div-comment-678793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kaenneth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678793">
			October 30, 2008 at 9:26 pm</a>		</div>

		<p>How about diffing at a different level, instead of using re-formatted source, couldn&#8217;t there be a mode of a compiler that just parses/tokenizes 2 versions of a project, and reports the diff at that level, but in terms of origional source lines?</p>
<p>Such that</p>
<p>int n;{int x=1; int y=1; n = x+y;}</p>
<p>would be exactly that same as</p>
<p>int n;{int a=0x01; int b = 0x01; n = (a)+(b);}</p>
<p>since both would produce the same instructions (I think):</p>
<p>Assign the value &#8216;1&#8217; to each of two integer variables, then add them giving (COBOL flashback!) the result in a third. The names and number formats, and extra parens are meaningless&#8230; (I wouldn&#8217;t be surprised if a modern compiler just emitted n = 2;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678803">
				<div id="div-comment-678803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yes, but...</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678803">
			October 30, 2008 at 10:05 pm</a>		</div>

		<p>At a company where I used to work, an employee decided with no authorization to change all the formatting (thousands of files).</p>
<p>The company&#8217;s (inferior) peer review system complelety broken down, unable to verify that all the changes were only formatting.</p>
<p>The employee was officially warned about making the un-authorized changes. And all changes were rolled backed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-678653">
				<div id="div-comment-678653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Craighead</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678653">
			October 30, 2008 at 3:57 pm</a>		</div>

		<p>I&#8217;m with Mike: the less a single change does, the better.</p>
<p>&quot;many teams have checkin gates that take a non-trivial amount of time to run&quot;: This is often either a management problem (overly draconian policies that leave no room for individual judgment; if you don&#8217;t trust someone&#8217;s judgment, why did you hire them?) or a tools problem (better tools, such as [insert shameless plug about my company&#8217;s product], can make this sort of stuff far less painful).</p>
<p>In the past, when faced with overly draconian checkin policies, I usually just ignored the policies and did things my own way. &nbsp;It never seemed to matter. &nbsp;As long as I was careful and ran the tests that actually *did* matter, I didn&#8217;t break things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678823">
				<div id="div-comment-678823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678823">
			October 31, 2008 at 1:52 am</a>		</div>

		<p>One issue with this is that most revision control systems won&#8217;t allow a user to check a file out multiple times.</p>
<p>E.g., say you&#8217;re working on your feature, and end up editing foo.c, bar.c, and baz.h. Now someone else comes along and says for you to fix a security flaw, which exists in bar.c.</p>
<p>Ideally, you&#8217;d be able to check the file out again, make the fix, then check it in (and have your other checkout auto-merge.</p>
<p>You want to save your changes so you can fix this priority bug, but a checkin will break because your feature hasn&#8217;t been tested at all &#8211; it may not even compile. You also have to revert your other files since they can interfere with the fix (and make a noisy checkin).</p>
<p>You could move the files elsewhere and grab fresh copies out (which may involve reverting), then fix, checkin, then checkout the old files again, merge those other changes in so you don&#8217;t accidentally un-fix it&#8230;</p>
<p>Revision systems need the ability to suspend in-progress changelists (save current changes and revert on-disk files) so other higher-priority fixes can be done, and automerge those changes when you resume the previous task, while restoring all the in-progress changes&#8230;</p>
<p>Otherwise the little checkins can get tedious to manage if you keep having to backup, revert, fix, checkin, checkout, restore, resume. And if you forgot a file and it got reverted&#8230;</p>
<div class="post">[<i>Oh, you mean <a href="http://msdn.microsoft.com/en-us/library/ms181283%28VS.80%29.aspx" rel="nofollow">shelving</a>? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-678833">
				<div id="div-comment-678833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678833">
			October 31, 2008 at 2:49 am</a>		</div>

		<p>Yeah, Microsoft devs need to take a break from telling everyone else how to use souce control and get to work on some kind of &quot;change packing&quot; program.</p>
<p>(heh)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678843">
				<div id="div-comment-678843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://web.vee.net/' rel='external nofollow' class='url'>Mike</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678843">
			October 31, 2008 at 3:41 am</a>		</div>

		<p>I totally agree with you, but for those cases where people have mixed both types of changes &quot;diff -w&quot; is your friend &#8212; no more random whitespace deltas.</p>
<p>/Mike</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-678733">
				<div id="div-comment-678733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob Posert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678733">
			October 30, 2008 at 8:53 pm</a>		</div>

		<p>This brings back memories! &nbsp;I once worked at a place where two unnamed developers didn&#8217;t agree with each other&#8217;s formatting, and they would work on the same module, so pretty much *every checkin* would have huge amounts of reformatting.</p>
<p>When I had to see what the real changes were between two different versions, I copied them both locally, reformatted both using some code-reformatting tool (forget which now), and then did a diff on the results.</p>
<p>Like:</p>
<p>get -version 1.6 foo.c</p>
<p>prettyprint-c &lt;foo.c &gt; foo.1.6.c</p>
<p>get -version 1.7 foo.c</p>
<p>prettyprint-c &lt; foo.c &gt; foo.1.7.c</p>
<p>diff foo.1.6.c foo.1.7.c</p>
<p>That was fun.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678853">
				<div id="div-comment-678853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.cwa.me.uk/2008/10/31/the-morning-brew-213/' rel='external nofollow' class='url'>Reflective Perspective - Chris Alcock &raquo; The Morning Brew #213</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678853">
			October 31, 2008 at 4:33 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blog.cwa.me.uk/2008/10/31/the-morning-brew-213/" rel="nofollow">http://blog.cwa.me.uk/2008/10/31/the-morning-brew-213/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-678863">
				<div id="div-comment-678863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678863">
			October 31, 2008 at 6:03 am</a>		</div>

		<p>@Kaenneth (and others): I think the danger of that approach is that the logical extension is to diff the binary output of the compiler rather than the source code.</p>
<p>Where do you stop? Lexical analysis of the source? Fully generated parse-tree? IL? Optimisation?</p>
<p>For my money I think I&#8217;d prefer false positives than false negatives in diff output. In the former case the worst that happens is I have to spend a couple of extra seconds convincing myself that a changed line is just superficial, in the latter a change goes completely unnoticed.</p>
<p>I am with Raymond on the original point though; one check-in should equate to an atomic change &#8211; fixes exactly one thing in exactly one way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-678943">
				<div id="div-comment-678943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voice of Reason</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-678943">
			October 31, 2008 at 10:48 am</a>		</div>

		<p>So you use indent on both before doing the diff?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-679123">
				<div id="div-comment-679123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-679123">
			October 31, 2008 at 4:41 pm</a>		</div>

		<p>The worst is if you&#8217;re programming in Java on different operating systems. &nbsp;Some IDE&#8217;s are better than others about preserving the original CR vs CRLF vs LF.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-679203">
				<div id="div-comment-679203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-679203">
			November 1, 2008 at 1:31 am</a>		</div>

		<p>Yeah, too bad out source control system doesn&#8217;t support shelving.</p>
<p>Really annoying.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-679213">
				<div id="div-comment-679213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-679213">
			November 1, 2008 at 3:03 am</a>		</div>

		<p>Oh well, I guess nothing can be done about that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-679313">
				<div id="div-comment-679313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Infernoz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-679313">
			November 2, 2008 at 5:46 am</a>		</div>

		<p>Haven&#8217;t you heard of WinMerge, for comparisons, it is free, and allows you to add regex expressions for to ignore stuff like white space and comments. &nbsp;I use it loads.</p>
<p>Another method is to enforce a standard code formatting, on check-in, or before conparison.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-679343">
				<div id="div-comment-679343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://shamsmi.blogspot.com/' rel='external nofollow' class='url'>Shams Mahmood</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-679343">
			November 2, 2008 at 9:28 am</a>		</div>

		<p>Why not have a universal formatter for the entire team. I know we used to face this problem in our java application and set up the same formatter for all the developers. </p>
<p>Since everyone will be using the same formatter you won&#8217;t have to be going through this painful process ;)</p>
<div class="post">[<i>And then someone changes the universal formatter. That&#8217;s the scenario I&#8217;m talking about here: The team&#8217;s code formatting rules changed. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-679403">
				<div id="div-comment-679403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-679403">
			November 3, 2008 at 12:19 am</a>		</div>

		<p>What you guys need is this:</p>
<p>1. Store the code in some universal format defined by corporate standard in the VCS</p>
<p>2. On check out, apply developer&#8217;s own coding style to each checked out file</p>
<p>3. On check in, strip out developer&#8217;s own coding style from each checked in file</p>
<p>That way diff wouldn&#8217;t be a problem anymore.</p>
<p>Btw, I have patented the idea just in case that some of you thought of actually using it ;-)</p>
<div class="post">[<i>And then when the corporate standard changes? That&#8217;s the scenario here. (Apparently nobody reads past the first paragraph.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-679443">
				<div id="div-comment-679443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.openquality.ru/software-quality-news-1008/' rel='external nofollow' class='url'>OpenQuality.ru &#124; ?????????????????????? ??????????: ???????????? ???? ??????????</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-679443">
			November 3, 2008 at 8:37 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blog.openquality.ru/software-quality-news-1008/" rel="nofollow">http://blog.openquality.ru/software-quality-news-1008/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-679773">
				<div id="div-comment-679773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081030-00/?p=20393#comment-679773">
			November 4, 2008 at 3:36 am</a>		</div>

		<p>&gt;&gt;And then when the corporate standard changes?&lt;&lt;</p>
<p>You just freeze the project (check out gets disabled, everyone finishes up and checks in) and reformat the code <em>in the VCS</em> to match new corporate standard.</p>
<p>After that everyone can continue to use their own coding style again.</p>
<p>For example I use the following style:</p>
<p>void test(void)</p>
<p>{</p>
<p>int a = 1;</p>
<p>if (a == 3) {</p>
<p>// do something</p>
<p>} else {</p>
<p>// do not</p>
<p>}</p>
<p>}</p>
<p>You can store that piece of code in the VCS any way you like it &#8212; even on a single line if that is the easiest way to diff it.</p>
<p>You just need to derive a transform from my style and apply it when I check out or strip it out when I check in.</p>
<div class=post>[<i>&#8220;check out gets disabled, everyone finishes up and checks in&#8221; &#8211; easier said than done. &#8220;Everyone finishes up&#8221; can take months if they&#8217;re working on a big feature. Do you lock the tree for a month? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>