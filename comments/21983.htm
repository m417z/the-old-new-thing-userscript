<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (32)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-637793">
				<div id="div-comment-637793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637793">
			June 11, 2008 at 10:32 am</a>		</div>

		<p>First, it&#8217;s interesting to know that you&#8217;re actually trolling newsgroups.</p>
<p>Second, I am continually amazed at how many people simply can&#8217;t read the owner&#8217;s manual.</p>
<p>From ms-help://MS.PSDKSVR2003R2.1033/shellcc/platform/commctls/treeview/structures/tvitem.htm</p>
<p>&quot;mask &#8211; Array of flags that indicate which of the other structure members contain valid data. When this structure is used with the TVM_GETITEM message, the mask member indicates the item attributes to retrieve.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-637803">
				<div id="div-comment-637803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637803">
			June 11, 2008 at 10:33 am</a>		</div>

		<p>Edit: I meant to say &quot;trawling&quot; instead of &quot;trolling&quot;. &nbsp;Sorry about the implication.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-637843">
				<div id="div-comment-637843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dog</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637843">
			June 11, 2008 at 12:08 pm</a>		</div>

		<p>Seriously, this is just bad design.</p>
<p>Either have a function that fills in a struct, or have a function to return each item seperately. Or both. Having this bizarre &quot;please initialise these parts of this struct&quot; function is just silly.</p>
<p>It&#8217;s not even as if you can pass the struct back to the same/another function to fill in the rest (since that function is perfectly at liberty to overwrite the data you got earlier with garbage).</p>
<p>Bad. Bad. Bad. Please, if anybody is thinking about writing a function like &quot;GetFooInfo&quot; please stop and think about how to do it properly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-637853">
				<div id="div-comment-637853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637853">
			June 11, 2008 at 1:09 pm</a>		</div>

		<p>Quoting MSDN, &quot;On output, the state member contains the values of the specified state bits.&quot;</p>
<p>This sounds to me like it will only contain the bits specified, and not any garbage bits.</p>
<p>I don&#8217;t see the merit of offering a subset of bits but not limiting the callee to that subset; in that case the callee might as well return all the bits all the time, which makes the offer meaningless.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-637863">
				<div id="div-comment-637863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">njkayaker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637863">
			June 11, 2008 at 1:30 pm</a>		</div>

		<p>It&#8217;s sad that there is a need for you to explain what should be basic to any competent programmer.</p>
<p>&quot;Seriously, this is just bad design.&quot;</p>
<p>Are you sure there no advantage to doing it &quot;wrong&quot; way?</p>
<p>Anyway, the &quot;bad design&quot; (arguable) isn&#8217;t relevent. The documentation is fairly clear as to how it works. If someone has a problem with the way it works, they have many other programming problems you just don&#8217;t know about!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works odd alt thread-odd thread-alt depth-1" id="comment-637873">
				<div id="div-comment-637873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637873">
			June 11, 2008 at 1:53 pm</a>		</div>

		<p>No trawling the news groups, that post was from 2005 (!!). Ancient. History.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-637883">
				<div id="div-comment-637883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wang-Lo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637883">
			June 11, 2008 at 2:23 pm</a>		</div>

		<p>When passing a structure around, each handling process must contract to do one of THREE possible things to each member: (1) fill it with a meaningful result, (2) fill it with garbage, or (3) leave it unchanged.</p>
<p>The programmer&#8217;s confusion arises from interpreting (2) as (3), probably because the documentation author never thought of (3) as a sane possibility, and so didn&#8217;t clarify. &nbsp;Meanwhile, the programmer unconsciously assumes that (2) is just a crazy dumb thing to do in a shared structure.</p>
<p>-Wang-Lo.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-637893">
				<div id="div-comment-637893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://marksowul.com' rel='external nofollow' class='url'>Mark Sowul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637893">
			June 11, 2008 at 2:27 pm</a>		</div>

		<p>&quot;Seriously, this is just bad design&#8230;</p>
<p>Bad. Bad. Bad. Please, if anybody is thinking about writing a function like &quot;GetFooInfo&quot; please stop and think about how to do it properly.&quot;</p>
<p>Here we go again. &nbsp;Are you sure you&#8217;re not Aaargh! in disguise?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-637903">
				<div id="div-comment-637903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://technage.blogspot.com' rel='external nofollow' class='url'>Carter</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637903">
			June 11, 2008 at 2:54 pm</a>		</div>

		<p>I wonder if that guy is still badly blocked. &nbsp;Hes been waiting three years Raymond! &nbsp;I no longer think you have super powers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-637913">
				<div id="div-comment-637913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637913">
			June 11, 2008 at 2:59 pm</a>		</div>

		<p>As Neil indicates, another way of interpreting the documentation might be:</p>
<p>&quot;If you say that you&#8217;re interested only in particular items, the API should not change other bits of information&quot;</p>
<p>It seems to be that either interpretation is reasonable. &nbsp;This is where experience comes into play &#8211; clearing up the ambiguous areas which exist in pretty much any API &#8211; more so in the complex ones.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-637933">
				<div id="div-comment-637933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam V</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637933">
			June 11, 2008 at 3:20 pm</a>		</div>

		<p>@Nathan_works:</p>
<p>&gt; that post was from 2005 (!!). Ancient. History.</p>
<p>Raymond has mentioned <a href="http://blogs.msdn.com/oldnewthing/articles/407234.aspx%20" rel="nofollow"></a><a href="http://blogs.msdn.com/oldnewthing/articles/407234.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/articles/407234.aspx</a>  multiple times <a href="http://blogs.msdn.com/oldnewthing/archive/2008/05/07/8464281.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2008/05/07/8464281.aspx</a> in the past that he has a large backlog of posts queued up. So why are people surprised that this story is regarding a post made in 2005?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-637953">
				<div id="div-comment-637953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637953">
			June 11, 2008 at 4:40 pm</a>		</div>

		<p>@Adam V:</p>
<p>People are saying &quot;that post was from 2005&quot; because the Usenet post in question &#8212; the one Raymond linked near the end with the line &quot;You now know enough to answer this person&#8217;s question.&quot; has a 2005 date on it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-637963">
				<div id="div-comment-637963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://orcmid.com/blog' rel='external nofollow' class='url'>orcmid</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637963">
			June 11, 2008 at 5:23 pm</a>		</div>

		<p>I also could see how the description of the function can be taken as a promise to only return what is being asked for. &nbsp;(In particular, if I&#8217;d written something like that, that is what it would mean unless I was very explicity to emphasize the contrary.)</p>
<p>On the other hand, the mask field is also used to describe what in the structure is valid and could potentially be updated as part of performance of the request. &nbsp;Likewise, the stateMask has this dual role of specifying the state bits wanted and masking the valid bits. (There doesn&#8217;t seem to be any prospect for it being altered though.)</p>
<p>This leaves me with the impression that the descriptions of this request and the data structure are pretty crufty. &nbsp;I think that existence of that old newsgroup post demonstrates that the feature needs to be more tightly specified. &nbsp;It is interesting that the remainder of the thread apparently never did identify the confusion and went off in different directions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-637993">
				<div id="div-comment-637993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637993">
			June 11, 2008 at 7:47 pm</a>		</div>

		<p>@Leo Davidson: I think Adam V understood that. Obviously, in 2005 (or so), Raymond saw that newsgroup post and added it to the end of his queue of posts to be posted. Given that he says he currently has enough posts to last until 2010 or so, it doesn&#8217;t seem unreasonable that it&#8217;s only showing up now.</p>
<p>An alternate explanation is: &quot;who cares?&quot; the topic is not magically made irrelevant by the simple passage of time.</p>
<p>@Dog: This design is common in the Win32 API. Once you get used to it (seriously, it&#8217;s not that complicated) it&#8217;s quite simple to understand.</p>
<p>Do you think saying &quot;SELECT a, b, c FROM foo&quot; is bad SQL, when you could just say &quot;SELECT * FROM foo&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-638003">
				<div id="div-comment-638003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parobu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638003">
			June 11, 2008 at 8:22 pm</a>		</div>

		<p>or maybe we should issue seperate queries for each field:</p>
<p>select a from foo</p>
<p>select b from foo</p>
<p>select c from foo</p>
<p>Good. Good. Good.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-637943">
				<div id="div-comment-637943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-637943">
			June 11, 2008 at 4:39 pm</a>		</div>

		<p>I feel there&#8217;s a difference between:</p>
<p>1) A function filling in fields in a structure which you didn&#8217;t ask for (which is fine unless you assumed it wouldn&#8217;t overwrite something)</p>
<p>And:</p>
<p>2) A function filling in bits in a single field when you only asked it for other bits.</p>
<p>In the 2nd case you might say I only want to know if BIT_N is set or not, then compare the results with BIT_N for equality. Instead there may be other bits set and you have to mask off the returned field in some way.</p>
<p>I realise that bits in a field are, conceptually, no different to fields in a structure, but people are much more likely to compare a field with a constant for equality than to compare an entire structure for equality.</p>
<p>I don&#8217;t think what the API does is wrong but I think it would be worth the trivial performance hit for the API to mask of the field to only the requested bits, because people *are* going to misunderstand what the function does or misinterpret (or not even read) the documentation, and it&#8217;s a needless problem.</p>
<p>On the other hand, if someone says they don&#8217;t care about an entire field and then read from it or compare it, then they only really have themselves to blame, *provided* the documentation is clear that you can&#8217;t rely on previously set data to be left in fields you have said you&#8217;re not interested in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-638043">
				<div id="div-comment-638043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638043">
			June 11, 2008 at 11:39 pm</a>		</div>

		<p>What would be the point of calling the function a second time to &quot;fill in the rest of the struct&quot;? Why wouldn&#8217;t you just call it with all the flags you&#8217;re going to need already set up front?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-638063">
				<div id="div-comment-638063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard Wells</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638063">
			June 12, 2008 at 1:10 am</a>		</div>

		<p>Or call it a second time just for the remaining elements needed.</p>
<p>I remember that some function calls took so long to return everything that the calls had to be split apart to maintain the illusion of a responsive system. No one cares about how the programmer shaves off a few lines of code if the program stalls for 10 minutes getting results.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-638023">
				<div id="div-comment-638023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638023">
			June 11, 2008 at 9:52 pm</a>		</div>

		<p>Mark Sowul: I absolutely **loved** the way you copied Dog&#8217;s post, carefully removed the explanation for the bad design claim, and then go on to dismiss it as meaningless. Really classy.</p>
<p>And I agree with Dog as well; this is bad design because the miniscule performance benefit of the callee not checking the set bits will be far outweighed by the caller having to copy the data multiple times if it wants a struct filled in from different calls, as well as making the callers code unneccesarily more complicated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-638073">
				<div id="div-comment-638073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638073">
			June 12, 2008 at 6:51 am</a>		</div>

		<p>That&#8217;s quite an unsafe idiom:</p>
<p>struct LOWLEVELFOO_TAG {</p>
<p> &nbsp;double a;</p>
<p> &nbsp;double b;</p>
<p> &nbsp;int n;</p>
<p>} LOWLEVELFOO;</p>
<p>struct FOO_TAG {</p>
<p> &nbsp;double r;</p>
<p> &nbsp;int n;</p>
<p>} FOO;</p>
<p>void FillInThisFoo(FOO *pFoo, DWORD bitsThatIWant)</p>
<p>{</p>
<p> &nbsp;LOWLEVELFOO llf;</p>
<p> &nbsp;DWORD llfBits = 0;</p>
<p> &nbsp;if (bitsThatIWant &amp; WANT_R) llfBits |= LLF_WANT_A | LLF_WANT_B;</p>
<p> &nbsp;if (bitsThatIWant &amp; WANT_N) llfBits |= LLF_WANT_N;</p>
<p> &nbsp;FillInThisLowLevelFoo(&amp;llf, llfBits);</p>
<p> &nbsp;pFoo-&gt;n = llf.n;</p>
<p> &nbsp;pFoo-&gt;r = llf.a &#8211; llf.b; // OOPS! Here we crash if stack garbage happens to look like a SNaN!</p>
<p>}</p>
<div class="post">[<i>I didn&#8217;t write an idiom, just a function. Obviously if you have floating point, things get interesting. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-638113">
				<div id="div-comment-638113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638113">
			June 12, 2008 at 10:03 am</a>		</div>

		<p>Re: &quot;bad design&quot; argument from Dog (and I apologize if I&#8217;m going off-topic here)&#8230;</p>
<p>Let&#8217;s say I want to be able to contact you privately. &nbsp;Say you&#8217;re in the office down the hall, or we met at a party, whatever. &nbsp;Tell me which of these three options makes the most sense:</p>
<p>1) I ask for your contact info. &nbsp;You take a slip of paper and write down your work e-mail, home e-mail, work phone, cell phone, home phone, work fax, home fax, Facebook profile, Myspace profile, work address, home address, weekend cottage address, MSN messenger contact, ICQ number, AOL nickname, Google Talk contact, Twitter feed, blog address, driver&#8217;s license number, and the name and address of the bar you usually hang out at after work. &nbsp;Also you give most of this information for your brother who is your emergency contact.</p>
<p>2) I walk over to you and ask for your home phone. &nbsp;You write it down for me, then I go back and file it away. &nbsp;I come over to you two minutes later and ask for your e-mail address. &nbsp;I leave and file it away. &nbsp;I repeat this exact same process to get your home address, cell phone, and MSN contact.</p>
<p>3) I walk over to you and ask for your home address, phone, cell, e-mail, and MSN contact. &nbsp;You write it down, I leave, and we&#8217;re finished.</p>
<p>Anyone want to explain to me why option #1 or #2 is somehow better?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-638143">
				<div id="div-comment-638143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dog</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638143">
			June 12, 2008 at 10:24 am</a>		</div>

		<p>Aaron:</p>
<p>Of course 3 is better. However, if you gave me a form that had spaces for business email, personal email, home phone, work phone, work cellphone and personal cellphone, along with another piece of paper that said &quot;only fill in business email and work phone&quot;, then I went ahead, filled in those fields and then filled the rest in with made-up details, would that be reasonable? (Then of course I would destroy the piece of paper that told me what to fill in.)</p>
<p>How about if you then handed the form to your secretary and said &quot;give this guy a call&quot;? Would it be a surprise if he/she tried one of the made-up phone numbers? (Or even if you just left the form on your desk for a couple of days and forgot which items were real).</p>
<p>That&#8217;s why this is bad.</p>
<p>Note that in the world of programming (in most languages at least) not filling in == filling in with garbage.</p>
<p>If there are one or two items being requested, it&#8217;s no big deal to have to do a function call for each of them.</p>
<p>If there is a commonly-used subset of the data, then provide a struct that has just that subset (maybe with an optional (null if not used) pointer to the rest of the data).</p>
<p>Don&#8217;t make up a one-size-fits-all struct and then only fill in parts of it (although if you make sure to zero/null/indicate somehow the parts you haven&#8217;t filled in then it&#8217;s probably ok).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-638163">
				<div id="div-comment-638163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">noone in particular</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638163">
			June 12, 2008 at 11:26 am</a>		</div>

		<p>Dog:</p>
<blockquote><p>
  Note that in the world of programming (in most languages &gt;at least) not filling in == filling in with garbage.
</p></blockquote>
<p>Actually, this is C thinking. In the context of a mostly C-style API like Windows this is ok.</p>
<p>But generally, I would prefer the function would not touch elements of the callers struct it was not explicitly asked to touch.</p>
<p>Instead of e.g. wiping the whole struct with zeroes or filling them with garbage (it actually has to compute first!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-638183">
				<div id="div-comment-638183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638183">
			June 12, 2008 at 11:31 am</a>		</div>

		<p>@Dog:</p>
<p>Your comparison is flawed quite a bit. &nbsp;It&#8217;s more similar to if you said &quot;Get Information about &lt;X&gt;&quot; and she said &quot;What&#8217;s the number for &lt;X&gt;?&quot; and you gave her a contact page with a lot of different numbers and e-mail addresses, would you expect that she use the unlabeled e-mail address on there? &nbsp;No &#8211; you&#8217;d expect she just use &lt;X&gt;&#8217;s number since that&#8217;s all she wanted. &nbsp;(Assuming &lt;X&gt;&#8217;s number was labeled and accurate where other items on the card were random, unlabeled, or unverified)</p>
<p>You know what information you want. &nbsp;Use that information.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-638193">
				<div id="div-comment-638193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://marksowul.com' rel='external nofollow' class='url'>Mark Sowul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638193">
			June 12, 2008 at 1:19 pm</a>		</div>

		<p>@Triangle &#8211; when I said &quot;here we go again&quot; and referenced Aargh, I was referring to the imminent war mirroring the one we had a few days ago on the merits of kernel handles ignoring the lower two bits, i.e. someone saying &quot;this design is stupid&quot; while ignoring its historical context, namely slow processors and tight RAM, which implies that the person complaining has never read (or understood) this blog. &nbsp;I didn&#8217;t feel the need to write that all out, as we had just done this to death earlier in the week.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-638213">
				<div id="div-comment-638213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sitten Spynne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638213">
			June 12, 2008 at 2:27 pm</a>		</div>

		<p>It seems that most of the people arguing that this design is wrong are missing a crucial point Raymond made, and the people firing the analogy guns are missing them as well.</p>
<p>Let&#8217;s say I have a silly form I have people fill out when I need contact information. &nbsp;there are spaces for &quot;Name&quot;, &quot;Phone number&quot; &quot;Age&quot;, and &quot;Name and address of every teacher of every subject, starting with grade school and ending with highest level of education&quot;. &nbsp;In general, I only need the name, age, and phone number, but when I want to do a creepy background check I want the teachers.</p>
<p>Name, age, and phone number take no time for the person to generate. &nbsp;The final field will require plenty of time to transcribe, not to mention possible digging for old yearbooks and phone calls to friends to get the name of this or that teacher. &nbsp;If I&#8217;m in a hurry and I tell you, &quot;Please fill out the &#8216;name&#8217; and &#8216;phone number&#8217; fields&quot;, I&#8217;m going to be quite annoyed if you take the time to fill out the extensive last field. &nbsp;Even if you do fill it out, I didn&#8217;t want that information so I won&#8217;t pay any &nbsp;attention to it. &nbsp;You&#8217;ve wasted my time without helping me.</p>
<p>Raymond pointed out that sometimes this is done for performance reasons, and this is why those functions don&#8217;t put meaningful values in the parts of structures you don&#8217;t ask for.</p>
<p>I do agree it&#8217;s not nice if the function changes the values you said you don&#8217;t care about, but since some functions do, is it so hard to remember that if the data in struct A is important, you should pass some other struct B to the function then copy the members you need to A?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-638273">
				<div id="div-comment-638273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638273">
			June 12, 2008 at 3:09 pm</a>		</div>

		<p>I wish people would stop trying to use analogies to explain their points of view. It only confuses the issue more. There&#8217;s basically just a disagreement to whether or not setting X bits and clearing Y bits means &quot;All I care about is X, Y is unimportant to me&quot; or &quot;Bits X are set and bits Y are cleared, so do X and don&#8217;t touch Y&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-638303">
				<div id="div-comment-638303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.org/' rel='external nofollow' class='url'>Alec Soroudi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638303">
			June 12, 2008 at 3:34 pm</a>		</div>

		<p>&lt;em&gt;If you say that you don&#8217;t care about something, you shouldn&#8217;t be upset that it contains garbage&lt;/em&gt;</p>
<p>Isn’t that the same argument they use to get people to vote? Isn’t there already too much politics in software dev already? :p</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-638093">
				<div id="div-comment-638093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638093">
			June 12, 2008 at 8:58 am</a>		</div>

		<p>A lot of you don&#8217;t understand what things cost.</p>
<p>TreeView_GetItem is a macro. It wraps a call to SendMessage sending the message TVM_GETITEM. SendMessage first has to validate that the window handle is valid, and this ultimately ends up in a call into kernel mode. After this it&#8217;s a relatively simple operation if sending a message to a window on the same thread &#8211; Windows looks up the thread ID for the window and if it&#8217;s the same, looks up the window procedure and calls it. However, if it&#8217;s not on the same thread, it has to queue a message on that thread&#8217;s message queue (taking locks in the process), signal the other thread that a message was queued, then wait for a response. Most of these actions require a trip into the kernel which costs many cycles.</p>
<p>Crossing to another process also means copying the structure to some shared memory location before queueing the message. That needs more kernel round-trips. I&#8217;m not sure if this works for TVM_GETITEM, although it is in the [0, WM_USER) range so it should have marshalling support according to the documentation.</p>
<p>Because there&#8217;s a finite latency cost involved in getting the message to its destination, and getting the reply it can often be beneficial in terms of overall program runtime to batch up requests that have to cross some boundary. In DCOM this was referred to as making your interface &#8216;chunky&#8217; instead of &#8216;chatty&#8217;. This is a &#8216;chunky&#8217; interface, designed that way on the assumption that most of the time, you&#8217;ll be interested in more than one property.</p>
<p>In addition there&#8217;s some extra complication involved in whether the TreeView is running an ANSI or Unicode window procedure, and whether the calling application supplied an ANSI or Unicode structure, so some translation between formats might be necessary. Again, doing this once is generally better than multiple round-trips to collect different pieces of information (of course not all of those will be strings).</p>
<p>In the case of standard functions, each additional function adds extra space to the export address table of the DLL, the import address and import name tables of the application or library which imports it, and of course the extra size of the function itself (which will have at least *some* prologue and epilogue information) and on platforms that use exception tables, extra unwind information in those tables. Extending functions with variable-size parameter structures is often a better idea than adding new entry points.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-638103">
				<div id="div-comment-638103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dog</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638103">
			June 12, 2008 at 9:50 am</a>		</div>

		<p>Since some people here probably wouldn&#8217;t be able to spot a badly designed function even if it were clearly stated in a logically organized and easily searchable documentation database, here are two reasons why this is bad (in no particular order):</p>
<p>* The compiler can no longer tell if you are using uninitialized data.</p>
<p>* It violates the design principle that the data that a function returns should always be conceptually the same.</p>
<p>If you do this, why not just have &quot;HRESULT DoStuff(LPVOID lpvWhatToDo, LPVOID lpvWhereToPutResult)&quot;?</p>
<p>I can however (sort of) see why this was done. Maybe the struct was already decided, but it was realized that one or more of it&#8217;s values were computationally expensive and due to management processes, etc, the struct could not be changed, nor could individual getters be implemented.</p>
<p>And this is not similar to the SQL example given. It would only be similar if &quot;SELECT a FROM bla&quot; also returned columns b and c filled with random garbage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-638173">
				<div id="div-comment-638173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638173">
			June 12, 2008 at 11:26 am</a>		</div>

		<p>Dog:</p>
<p>If I gave you the form and asked you to fill in *only* the business email and work phone then it is probably because I *only* want those bits of information. If you choose to draw pictures or enter blatant lies on all the other fields why should I care &#8211; I am *only* interested in the information I requested.</p>
<p>Should I ask you to fill in all the fields (causing you more work) to obtain the two values I need just in case you would doodle in the fields I don&#8217;t care about?</p>
<p>If you fill in the bits I request correctly I really do not care about the remaining bits.</p>
<p>Seems simple enough to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-638363">
				<div id="div-comment-638363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">yme</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080611-00/?p=21983#comment-638363">
			June 12, 2008 at 6:31 pm</a>		</div>

		<p>It appears to me, after reading the whole newsgroup thread, that the guy wasn&#8217;t primarily complaining about getting stuff he didn&#8217;t ask for, but rather about not getting stuff he did ask for.</p>
<p>Then it turned out that the stuff he asked for didn&#8217;t exist, so he shouldn&#8217;t have expected to get it even if he asked for it. &nbsp;(Or something like that.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>