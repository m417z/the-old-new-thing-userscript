<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (35)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-431033">
				<div id="div-comment-431033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rui Craveiro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431033">
			October 17, 2006 at 11:48 am</a>		</div>

		<p>Ain&#8217;t it nice that in .Net types have names instead of acronyms? ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-431063">
				<div id="div-comment-431063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://http:/et.cairene.net' rel='external nofollow' class='url'>Robert W. Anderson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431063">
			October 17, 2006 at 12:13 pm</a>		</div>

		<p>I always thought the &quot;T&quot; stood for &quot;typed char&quot; because just CHAR would have been confusing; though &quot;text&quot; makes more sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-431073">
				<div id="div-comment-431073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431073">
			October 17, 2006 at 12:23 pm</a>		</div>

		<p>Hum. &nbsp;It&#8217;ll still always be &quot;Long Pointer To a STRing&quot; for me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-431083">
				<div id="div-comment-431083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431083">
			October 17, 2006 at 12:28 pm</a>		</div>

		<p>Why are the Win32 calls named</p>
<p> &#8216;W&#8217; for &#8216;Wide&#8217; and</p>
<p> &#8216;A&#8217; for &#8216;ANSI&#8217;</p>
<p>?</p>
<p>Why not &#8216;W&#8217; and &#8216;N&#8217; (for &#8216;Narrow&#8217;)</p>
<p>or &#8216;U&#8217; (for &#8216;Unicode&#8217;) and &#8216;A&#8217; (for &#8216;ANSI&#8217;)?</p>
<p>(It&#8217;s especially galling, since it&#8217;s the &#8216;A&#8217; functions that support MBCS &#8230;)</p>
<div class="post">[<i>Wow, I think that&#8217;s a new record. A two-sentence<br />
post, and somebody doesn&#8217;t read the second sentence. As for the A, that<br />
was discussed <a href="http://blogs.msdn.com/oldnewthing/archive/2004/05/31/144893.aspx" rel="nofollow">two years ago</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-431093">
				<div id="div-comment-431093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Zuber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431093">
			October 17, 2006 at 12:36 pm</a>		</div>

		<p>I think it&#8217;s T for Typed Char as stated above since T can change type based on the compiler settings (with _UNICODE defined, it&#8217;s a WCHAR and with _UNICODE not defined, it&#8217;s a CHAR, ansi). &nbsp;Similar to the _T(&quot;&quot;) macro that will do the same thing with a constant string as opposed to L&quot;&quot; which always makes a wide char.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-431123">
				<div id="div-comment-431123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431123">
			October 17, 2006 at 12:52 pm</a>		</div>

		<p>&gt;Wow, I think that&#8217;s a new record. A two-sentence post, and somebody doesn&#8217;t read the second sentence.</p>
<p>I think you misunderstood my point. I&#8217;m obviously aware that the<br />
programming langauge contains &#8216;wide chars&#8217;, and it doesn&#8217;t take much to<br />
figure out that &#8216;W&#8217; comes from &#8216;wide char&#8217;.</p>
<p>My point is that, if you&#8217;ve got two things to distinguish by a<br />
naming convention, you could name them systematically based on size<br />
(&#8216;wide&#8217; or &#8216;narrow&#8217;) or on content (&#8216;unicode&#8217; versus &#8216;ansi&#8217;).<br />
&nbsp;Mixing the two (&#8216;wide&#8217; versus &#8216;ansi&#8217;) seems a little, well,<br />
arbitrary.</p>
<p>&gt;As for the A, that was discussed two years ago.</p>
<p>That&#8217;s as maybe, but I wasn&#8217;t here two years ago, and it didn&#8217;t occur me to see whether this was a subject already covered.</p>
<div class="post">[<i>Given that the type for Unicode characters is<br />
<code>WCHAR</code>, decorating functions as <code>GetWindowTextU</code> would lead to people saying &#8220;That&#8217;s completely moronic. It should be decorated with a <code>W</code>. <u>W</u>CHAR, GetWindowText<u>W</u>.<br />
Duh.&#8221; What I&#8217;ve learned from writing this blog is that no matter what<br />
you do, half of the people will tell you that you made the obviously<br />
wrong decision and that even a moron would have recognized that the<br />
other way was clearly superior. (As for old topics: Perhaps<br />
I should just put the blog on infinite repeat. Every day, I just repost<br />
something from two years ago. Would save me a lot of work.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-431143">
				<div id="div-comment-431143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foxyshadis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431143">
			October 17, 2006 at 1:38 pm</a>		</div>

		<blockquote><p>
  That&#8217;s as maybe, but I wasn&#8217;t here two years ago, and it didn&#8217;t occur me to see whether this was a subject already covered.
</p></blockquote>
<p>Why comment, if you&#8217;re unwilling to do any research? To you honestly expect your complaints to be taken seriously when you respect someone that little?</p>
<p>Now if it was Q or G, maybe you&#8217;d have a point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-431193">
				<div id="div-comment-431193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431193">
			October 17, 2006 at 2:24 pm</a>		</div>

		<p>Let us all be nice.</p>
<p>First, Raymond types at a high level. &nbsp;I am mid-level, in the usual WIN32/C realm he discusses, and out of date. &nbsp;Slack is due. We are here at his sufferance. &nbsp;Did you get what you paid for?!?</p>
<p>On the other hand, the above poster reads the blog to learn, so, let us not try to discourace him.</p>
<p>Nivenesque third hand, keep up the posts, without dupes.</p>
<p>Thx</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-431223">
				<div id="div-comment-431223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wilfried</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431223">
			October 17, 2006 at 4:18 pm</a>		</div>

		<p>As far as I remember, &#8216;T&#8217; means &#8216;transparent&#8217; &#8211; by using TCHAR as character type you handle character size transparently.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-431253">
				<div id="div-comment-431253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431253">
			October 17, 2006 at 5:08 pm</a>		</div>

		<p>&lt;&lt;half of the people will tell you that you made the obviously wrong decision&gt;&gt;</p>
<p>Here you are wrong. At least 70% will say you made the wrong decision :-) And if you change lines, the one you just left will go faster. Murphy is always right :-)</p>
<p>&lt;&lt;&quot;W&quot; in WCHAR probably comes from the C language standard&gt;&gt;</p>
<p>I think WCHAR was used in Windows before the C standard decided to adopt the half-baked wchar_t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-431273">
				<div id="div-comment-431273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431273">
			October 17, 2006 at 5:56 pm</a>		</div>

		<p>Wow, things can certainly get heated when one asks what appears (to me) to be a straightforward question.</p>
<p>I take it the answer is &quot;it&#8217;s W versus A (rather than W versus N, or W versus C) for no particular reason&quot;.</p>
<p>Lest you think I am somehow telling you that you made the wrong decision, I&#8217;ll point out that the only note of complaint was me using &quot;galling&quot; about using MBCS with functions tagegd &quot;A&quot;. &nbsp;Which isn&#8217;t really that irritating to me personanlly, since I tend to use Unicode.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-431313">
				<div id="div-comment-431313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431313">
			October 17, 2006 at 7:38 pm</a>		</div>

		<p>The T in TCHAR definitely means &quot;TEXT&quot;, as Raymond thought. &nbsp;And I have proof :)</p>
<p>In tchar.h there is a macro _T defined that is intended to be used around your TCHAR-based string constants [eg. _T(&quot;foo&quot;)], so that they will change to Unicode as appropriate as well.</p>
<p>There is an alias for the same macro, which actually predates it (it was shortened because it was a hassle to type the whole thing in everywhere). &nbsp;And guess what it&#8217;s called? &nbsp;That&#8217;s right, _TEXT.</p>
<p>So an LPCTSTR is a Long Pointer to a Constant Text STRing (or _TEXT String).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-431333">
				<div id="div-comment-431333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Bryant</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431333">
			October 17, 2006 at 10:07 pm</a>		</div>

		<p>The T may come from _T and _TEXT historically, but it is a bit unhelpful because the difference between LPTSTR and LPSTR is not that one is &#8216;T&#8217;ext and the other is not, it is that one is &#8216;T&#8217;yped i.e. that it will switch between W and A. But oh well; that&#8217;s how these things come about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-431203">
				<div id="div-comment-431203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://aundh.blogspot.com' rel='external nofollow' class='url'>JamesW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431203">
			October 17, 2006 at 3:10 pm</a>		</div>

		<p>@Raymond</p>
<p>&#8216;What I&#8217;ve learned from writing this blog is that no matter what you do, half of the people will tell you that you made the obviously wrong decision and that even a moron would have recognized that the other way was clearly superior.&#8217;</p>
<p>It took years of blogging to work this out?! Did the religious wars regarding the best placement of { in code not give you an insight into typical programmer mentality. Obviously K&amp;R bracing is best and emacs is the only text editor &#8211; only a moron would disagree. Oh, and pointers should be decalred thus: &#8216;int* ptr&#8217;. All alternatives such as &#8216;int *ptr&#8217;, and &#8216;int * ptr&#8217; are unholy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-431343">
				<div id="div-comment-431343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://aundh.blogspot.com' rel='external nofollow' class='url'>JamesW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431343">
			October 17, 2006 at 10:50 pm</a>		</div>

		<p>@Mihai</p>
<p>Ah, but multiple declarations on a single line are wrong too ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-431243">
				<div id="div-comment-431243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431243">
			October 17, 2006 at 5:03 pm</a>		</div>

		<p>&lt;&lt;pointers should be decalred thus: &#8216;int* ptr&#8217;&gt;&gt;</p>
<p>Nope, &#8216;int *ptr&#8217; is the right thing :-)</p>
<p>Only half kidding. This is my motive:</p>
<p> &nbsp; int* a, b, c; // a, b, c are int* ???</p>
<p>versus</p>
<p> &nbsp; int *a, b, c; // only a is pointer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-431353">
				<div id="div-comment-431353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/archive/2006/10/17/837884.aspx' rel='external nofollow' class='url'>Sorting It All Out</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431353">
			October 18, 2006 at 1:50 am</a>		</div>

		<p>Amazing the arguments people can have in the comments of blog posts, isn&#8217;t it? I was reminded of this</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-431383">
				<div id="div-comment-431383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Xavi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431383">
			October 18, 2006 at 4:50 am</a>		</div>

		<p>&gt;half of the people will tell you that you made the obviously wrong decision&lt;</p>
<p>Is that a problem or is this an answer to Daves point?</p>
<p>I read such blogs to see why and where different minds come to<br />
different conclusions. Sometimes they match my thinking, sometimes not,<br />
sometimes they change my mind.</p>
<p>I&#8217;ve read Dave&#8217;s first post and agreed with him. Then I&#8217;ve read<br />
Raymonds note on it, and got confused where (like Dave) I missed<br />
something. </p>
<p>After re-reading the blog-statement and Daves post several times, I<br />
do not see a reason to award Dave with a Guinnes-Book entry about<br />
&#8220;fewest sence understood&#8221;.</p>
<p>Daves reasoning is comprehensible and it obviously applies also to WCHAR, which could also be named UCHAR. </p>
<p>Thus, to argue with &#8220;Given that the type for Unicode characters is<br />
WCHAR&#8221; is just not applicable as it does not take Daves point into mind.</p>
<p>After reading the first two sentences from Daves post, this was clear to me, how about you?</p>
<p>Regards Xavi</p>
<p>(unrelated to any of the posters here)</p>
<div class="post">[<i>And I gave the answer in the second sentence: It&#8217;s called <code>WCHAR</code> because that&#8217;s what the C language calls it (<code>wchar_t</code>). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-431393">
				<div id="div-comment-431393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431393">
			October 18, 2006 at 4:51 am</a>		</div>

		<p>&quot;I think WCHAR was used in Windows before the C standard decided to adopt the half-baked wchar_t.&quot;</p>
<p>Well, wchar_t was in the first (1990) ISO C standard, and AFAIK most of the things in the standard had been tried out in /at least/ one implementation for some time to make sure it was workable, so it&#8217;d almost certainly have been available in a couple of compilers since 1989.</p>
<p>If anyone knows when WCHAR was first introduced into Windows, that&#8217;d be interesting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-431413">
				<div id="div-comment-431413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">l33t c0d3r d00d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431413">
			October 18, 2006 at 6:34 am</a>		</div>

		<p>Xavi wrote:</p>
<blockquote><p>
  &gt; Daves reasoning is comprehensible and it obviously</p>
<p>  &gt; applies also to WCHAR, which could also be named UCHAR.
</p></blockquote>
<p>Not really. &nbsp;UCHAR is already defined to mean &quot;Unsigned char&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-431423">
				<div id="div-comment-431423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431423">
			October 18, 2006 at 7:30 am</a>		</div>

		<p>To clear up a common misunderstanding&#8230; the UNICODE define affects Win32, the _UNICODE define affects the Microsoft C runtime library. The difference is subtle. UNICODE controls the following definitions:</p>
<p>TCHAR</p>
<p>LPTSTR</p>
<p>TEXT()</p>
<p>Win32 A/W APIs and structures</p>
<p>_UNICODE, on the other hand:</p>
<p>_TCHAR</p>
<p>_TINT</p>
<p>_T()</p>
<p>CRT string APIs and related structures</p>
<p>Yes, you can define UNICODE and _UNICODE differently. I think ATL has specific support for that. IIRC it also supports the obscure corner case in which OLECHAR is defined as CHAR rather than WCHAR (16-bit Windows &amp; MacOS)</p>
<p>Closing note about LPSTR/LPWSTR/LPTSTR: they are not just typedefs for CHAR/WCHAR/TCHAR *, they mean &quot;NUL-terminated string of CHAR/WCHAR/TCHAR&quot;. This is actually enforced in PREfast (&quot;lint&quot; mode of the latest Microsoft compiler)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-431623">
				<div id="div-comment-431623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431623">
			October 18, 2006 at 12:17 pm</a>		</div>

		<p>&lt;&lt;If anyone knows when WCHAR was first introduced into Windows, that&#8217;d be interesting.&gt;&gt;</p>
<p>The need was definitely out there, but who was really-really first, is tought to say.</p>
<p>Windows NT 3.1 was Unicode, and was started in 1988 (<a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Windows_NT_3.1" rel="nofollow">http://en.wikipedia.org/wiki/Windows_NT_3.1</a>)</p>
<p>And no, I don&#8217;t have a Windows NT 3.1 SDK around to check if it used WCHAR :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-431863">
				<div id="div-comment-431863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431863">
			October 18, 2006 at 7:14 pm</a>		</div>

		<p>This is pointless, but I actually did check the other day about when &#8216;wchar&#8217; became part of the C Standard &#8211; figuring that it must have been much later than NT. &nbsp;easynews revealed discussion about gcc&#8217;s wchar early in the 90s. &nbsp;So maybe not the actual standard yet, but it existed on unix.</p>
<p>p.s. : yes, UCHAR is a common typedef for &#8216;unsigned char&#8217;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-431913">
				<div id="div-comment-431913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431913">
			October 18, 2006 at 10:16 pm</a>		</div>

		<p>wchar_t in Unix was not originally Unicode, though it can be (I&#8217;m not sure if anyone does it though).</p>
<p>A few things I&#8217;ve read lend the impression that wchar_t in NT was not originally Unicode, though it is now.</p>
<p>For comparison, char was not originally EBCDIC, but it can be. &nbsp;For comparison, char was not originally either (depending on its value) 100% or 50% of a Shift-JIS character, but it can be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-431933">
				<div id="div-comment-431933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431933">
			October 18, 2006 at 11:46 pm</a>		</div>

		<p>True norman, wchar_t does not mean unicode or anything in particuliar except &#8216;wide&#8217;.</p>
<p>On unix, wchar_t is in fact 32-bit but the spec says nothing about how it should be implemented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-431943">
				<div id="div-comment-431943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431943">
			October 19, 2006 at 1:33 am</a>		</div>

		<p>Wednesday, October 18, 2006 11:46 PM by Ulric</p>
<blockquote><p>
  On unix, wchar_t is in fact 32-bit
</p></blockquote>
<p>I&#8217;m pretty sure it was 16-bit when I was reading related code. &nbsp;Even though most processors had 32-bit words, 16-bit unsigned shorts existed.</p>
<p>Of course that was for EUC Japanese only, so other locales could vary. &nbsp;Locales existed by the time I was reading that code, but they might not have existed yet when that code was written.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-431953">
				<div id="div-comment-431953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-431953">
			October 19, 2006 at 1:47 am</a>		</div>

		<p>Ouch, I lied, sorry.</p>
<blockquote><p>
  Even though most processors had 32-bit words,</p>
<p>  16-bit unsigned shorts existed.
</p></blockquote>
<p>Should be:</p>
<p>Even though most general-purpose processors (that could run compilers, database systems, etc.) had 32-bit words, 16-bit unsigned shorts existed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-432213">
				<div id="div-comment-432213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">C Gomez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-432213">
			October 19, 2006 at 3:46 pm</a>		</div>

		<p>I believe Raymond should take heart that there is likely a silent majority who reads what Raymond has to say&#8230; nods&#8230; and either agrees with Raymond or appreciates the insight regardless of personal opinion.</p>
<p>They do not bother reading the comments.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-432223">
				<div id="div-comment-432223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-432223">
			October 19, 2006 at 3:58 pm</a>		</div>

		<p>Well, you need 32 bits to store a UCS-4 character. &nbsp;(Or is that UTF-32? &nbsp;I can never remember which is which. &nbsp;In this case I think they&#8217;re exactly the same bit pattern for every code point, but in the case of UTF-16/UCS-2, some non-BMP stuff is different. &nbsp;One of UTF-16/UCS-2 can&#8217;t represent non-BMP characters, and I can never remember which.)</p>
<p>But anyway, if you want your strings to be arrays of characters, without any special escaping required at all, you&#8217;ll need a 32-bit wchar_t. &nbsp;And you&#8217;ll waste incredible amounts of memory on a long wchar_t string that contains only 7-bit-ASCII characters, but there&#8217;s not much you can do about that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-432623">
				<div id="div-comment-432623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://gabest@gabest.org' rel='external nofollow' class='url'>Gabest</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-432623">
			October 20, 2006 at 12:39 pm</a>		</div>

		<p>@Mihai</p>
<p>typedef int* intptr;</p>
<p>intptr a, b, c;</p>
<p>&#8216;int*&#8217; IS the type, I think it&#8217;s just the c syntax that makes it look stupid without the typedef.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-432933">
				<div id="div-comment-432933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.blogspot.com/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-432933">
			October 22, 2006 at 8:52 pm</a>		</div>

		<p>&gt;Given that the type for Unicode</p>
<p>&gt;characters is WCHAR</p>
<p>No, it is actually unsigned short so only GetWindowsTextUS would be proper. :)</p>
<p>&gt; &nbsp;int* a, b, c; // a, b, c are int* ???</p>
<p>&gt;versus</p>
<p>&gt; &nbsp;int *a, b, c; // only a is pointer.</p>
<p>Tsk, tsk, tsk, only a is pointer in both cases.</p>
<p>Last time I checked you were supposed to write:</p>
<p> &nbsp;int *a, *b, *c;</p>
<p>if you wanted them all to be the pointers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-432953">
				<div id="div-comment-432953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-432953">
			October 22, 2006 at 10:09 pm</a>		</div>

		<p>Igor, that&#8217;s exactly the point. &nbsp; The first form makes it *look* like &quot;a&quot;, &quot;b&quot;, and &quot;c&quot; are of type &quot;int*&quot;, instead of &quot;a&quot; being &quot;int*&quot; and &quot;b&quot; and &quot;c&quot; being &quot;int&quot;, because the * is next to the &quot;int&quot; instead of the &quot;a&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-433163">
				<div id="div-comment-433163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-433163">
			October 23, 2006 at 4:56 pm</a>		</div>

		<p>An int in ansi c should be the largest native integer type of the hardware. Why isn&#8217;t int 64-bit on visual c++ in win64?</p>
<div class=post>[<i>Please <a href="http://blogs.msdn.com/oldnewthing/archive/2005/01/31/363790.aspx" rel="nofollow">search the archives</a> before asking questions. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-433263">
				<div id="div-comment-433263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.blogspot.com/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-433263">
			October 23, 2006 at 9:32 pm</a>		</div>

		<p>&gt;Igor, that&#8217;s exactly the point.</p>
<p>&gt;The first form makes it *look* like&#8230;</p>
<p>I personally always use the second form but everyone familiar with C syntax knows that compiler doesn&#8217;t give a damn where the whitespace in the above-mentioned code is.</p>
<p>&gt;Why isn&#8217;t int 64-bit on visual c++ in win64?</p>
<p>Apart from Raymond&#8217;s explanation there is one potential reason I perceive &#8212; code size.</p>
<p>Due to x64 concept being just an expansion of GPRs (exactly like it happened when we had 16-&gt;32 bit transition) where underlying CPU architecture wasn&#8217;t completely widened (ALUs, multipliers, data paths, etc) both Intel and AMD suggested that 64-bit code still use 32-bit integers wherever possible because:</p>
<p>a) it is more efficient in terms of performance</p>
<p>b) instructions that use 32-bit operands are shorter leading to the more compact code which fits better in L1 instruction cache thus again improving performance.</p>
<p>As the matter of fact, I believe that is the only justifiable reason.</p>
<p>Raymond mentioned that changes in SDK would break the code. I think there are alternatives to what they did based on one simple fact:</p>
<p>Fact is that you release new Platform SDK to enable developers to use features present in future operating systems.</p>
<p>Based on that fact we may assume that whoever installs latest Platform SDK they are doing it because they intend to support those future operating systems.</p>
<p>From that it easy to conclude that they will bite the bullet and fix their code.</p>
<p>Those who don&#8217;t want to fix it can continue using old Platform SDK.</p>
<p>That is at least what I would do because this will have to be fixed sooner or later.</p>
<p>Sorry for the O/T.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459183">
				<div id="div-comment-459183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/01/05/1416853.aspx' rel='external nofollow' class='url'>The Old New Thing : What('s) a character!</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061017-03/?p=29363#comment-459183">
			January 5, 2007 at 10:00 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/01/05/1416853.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/01/05/1416853.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>