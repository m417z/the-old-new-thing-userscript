<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-548163">
				<div id="div-comment-548163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">joel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548163">
			September 10, 2007 at 5:21 pm</a>		</div>

		<p>While I&#8217;d have to do some reading up on this (so take it with a grain of salt), my understanding is that the toolkits do provide ways to send messages beyond the basic events and requests that you get with the core X protocol. &nbsp;Some are very high level, like KDE&#8217;s DCOP, through which applications publish an interface which can be invoked either through an API or through a command line program (or even a GUI one, which is kinda fun ;). &nbsp;On the lower level, which is where I get more shady, I&#8217;m sure there is a way, because when you, e.g., change themes, somehow the toolkit is able to notify all of its applications about the theme change. &nbsp;And then there&#8217;s the ICCCM (Inter-Client Communication Conventions Manual), which specifies how clients are to behave in an X environment and also how they communicate with each other, often using ATOMs set on Windows. &nbsp;That&#8217;s how the Window Manager knows what the title of a window is and whether it should stay on top, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-548143">
				<div id="div-comment-548143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548143">
			September 10, 2007 at 2:06 pm</a>		</div>

		<p>This makes me wonder&#8230; are there Window Managers on other platforms that makes marshalling of user messages possible, for instance the EM_SETCUEBANNER *in the receiving process* would be marked as &quot;LPARAM is a buffer that should be copied&quot; so that these bugs are more easily avoided?</p>
<p>I don&#8217;t know if the need would justify the cost since it is not a security problem (hatchways and all)</p>
<p>Are all Window Managers from the same mold with the same gotchas?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-548153">
				<div id="div-comment-548153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548153">
			September 10, 2007 at 2:33 pm</a>		</div>

		<p>Not sure about all other platforms, but X in particular doesn&#8217;t have a separate notion of a &quot;tooltip&quot;. &nbsp;All X cares about is a &quot;window&quot;; a tooltip is a construction of the X toolkit you&#8217;re using (e.g. gtk or qt). &nbsp;It&#8217;s implemented with a separate X window, of course, but all the details are taken care of by the toolkit.</p>
<p>As for marshalling user messages: X does that for *everything* already, not just messages that copy data. &nbsp;(X is network-transparent, so it has to marshal everything.) &nbsp;The low-level X library obviously shares data directly with the user program, but when talking to the X server (and via the X server to other programs, e.g. for a paste), it uses a network message. &nbsp;So it&#8217;s already copying all the required data over the socket to the server. &nbsp;(Or it&#8217;s using the MIT-SHM shared-memory extension. &nbsp;Either way, it has to copy the data into some buffer where it gets either copied to or shared with the X server.)</p>
<p>So no, not all window managers are from the same mold. &nbsp;Some had explicit marshalling requirements built in from the beginning. &nbsp;(I&#8217;d guess that&#8217;s because X was designed on an OS that always required a separation between processes. &nbsp;There was never a way for processes to accidentally share memory (barring a bug in the OS), so this type of message-send operation where the target could copy directly into the source&#8217;s buffer was never used.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-548193">
				<div id="div-comment-548193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548193">
			September 11, 2007 at 1:12 am</a>		</div>

		<p>@Miral:</p>
<p>&quot;Unfortunately Windows doesn&#8217;t always know the size of the message so it can&#8217;t do automatic marshalling the way X does. &nbsp;Design flaw? &nbsp;Yes, but without the handy time machine not much can be done at this point (except coming up with something new)&quot;</p>
<p>You know I wonder if this sort of thing is inevitable in popular standards.</p>
<p>E.g. Windows 3.x was popular because it could run well on underpowered systems. E.g. 8086 and 80286 systems with not much memory, dire graphics capabilities and so on.</p>
<p>And it does that because it exploits lots of features that underpowered systems lack. It would have been possible to do a better windowing system (and X isn&#8217;t it) that would have been more scalable, but that windowing system would have crawled on the underpowered systems where it would have competed with Windows.</p>
<p>And the hackish roots of Windows doesn&#8217;t seem to have limited it the long run, as this example of adding marshalling for control specific messages for Win32 shows. So you&#8217;re better off getting a hack out of the door and gaining market share than worrying too much about long term scalability. Because market share means money and the ability to hire smart people to clean things up later.</p>
<p>Actually, the IBM PC standard was originally a short term ugly hack even if now x64, PCI express, SMP and so on have made it a killer workstation platform these days. To the point where companies that used to make much more elegant machines back in the PC-AT days have adopted it instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-548183">
				<div id="div-comment-548183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548183">
			September 10, 2007 at 8:46 pm</a>		</div>

		<p>@BryanK: Unfortunately Windows doesn&#8217;t always know the size of the message so it can&#8217;t do automatic marshalling the way X does. &nbsp;Design flaw? &nbsp;Yes, but without the handy time machine not much can be done at this point (except coming up with something new).</p>
<p>@Raymond: Maybe I just haven&#8217;t poked into enough corners of the Win32 API yet, but what *is* the recommended way of passing cross-process messages like this? &nbsp;I&#8217;d imagine you&#8217;d have to get your process to allocate some memory that&#8217;s visible to both processes (perhaps with different pointers, although ideally with the same ones), and I&#8217;m not sure how you could do that without the cooperation of the other process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-548213">
				<div id="div-comment-548213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kopi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548213">
			September 11, 2007 at 6:05 am</a>		</div>

		<p>Miral, I believe WM_COPYDATA should be used to send messages (including additional user defined data) between processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-548223">
				<div id="div-comment-548223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jasonhaley.com/blog/archive/2007/09/11/140377.aspx' rel='external nofollow' class='url'>Jason Haley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548223">
			September 11, 2007 at 9:59 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-548353">
				<div id="div-comment-548353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/09/11/4857870.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548353">
			September 11, 2007 at 11:07 am</a>		</div>

		<p>Beats me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-548563">
				<div id="div-comment-548563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548563">
			September 12, 2007 at 2:30 am</a>		</div>

		<p>@Miral: If you really need to send a message specifying a buffer to a window owned by another process you can allocate a buffer inside the process using VirtulaAllocEx (and specify the default value with WriteProcessMemory), then read the result using ReadProcessMemory and clean up the buffer in the remote process with VirtualFreeEx.</p>
<p>For win9x, just create and map a memory mapped file. &nbsp;It&#8217;ll be placed in the section of address space that is shared by all processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>