<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-945903">
				<div id="div-comment-945903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-945903">
			November 10, 2011 at 7:22 am</a>		</div>

		<p>Now I wonder if there&#39;s something special about regsvr32 that&#39;s different from using, e.g. rundll to call the same functions, or using LoadLibraryEx to load the Dll and then call those functions. I realize there isn&#39;t going to be anything special about the operations themselves, but is there any kind of contextual privilege or environmental artifact offered by regsvr32?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-945913">
				<div id="div-comment-945913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-945913">
			November 10, 2011 at 7:32 am</a>		</div>

		<p>In other words, regsvr32 is like rundll32. Except that it uses two entry points with specific names. And a different calling convention. And it has a help function with usage information. And it reports the result back to the user. On second thought, it&#39;s not like rundll32 at all except that these both call functions from DLLs. And their names are vaguely similar.</p>
<p>That&#39;s my shallow thought for today, we now return to more substantial contributions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-945933">
				<div id="div-comment-945933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul M. Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-945933">
			November 10, 2011 at 8:07 am</a>		</div>

		<p>@Mike: You do realize that DllRegisterServer and DllUnregisterServer should not be called by rundll32, right?</p>
<p>One advantage of using regsvr32 that comes to mind is abstraction. If the documented way for an installer or end user to register a DLL is by using the regsvr32 utility, then Microsoft has the option of modifying that utility at some point to call other DLL exports. DLL vendors may then implement those exports to take advantage of whatever new functionality is provided by that form of registration, and installers and end users are blissfully unaware of the change. On the other hand, if installers and end users call those exports directly, then they are hard-coded into a specific registration implementation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-945943">
				<div id="div-comment-945943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-945943">
			November 10, 2011 at 8:26 am</a>		</div>

		<p>@Mike</p>
<p>I remember the recent posts from Raymond about the abuse of rundll. DLLRegisterServer is not a function supposed to be called from rundll32. It is defined as HRESULT __stdcall DllRegisterServer(void); but rundll32 accepts functions defined as void CALLBACK</p>
<p>&nbsp; EntryPointW(HWND hwnd, HINSTANCE hinst, LPWSTR lpszCmdLine,</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int nCmdShow);</p>
<p>Pretty big difference!</p>
<p>Correct me if I am wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-945953">
				<div id="div-comment-945953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-945953">
			November 10, 2011 at 8:49 am</a>		</div>

		<p>regsvr32 also handles both 32 and 64 bits DLLs&#8230; Ons second thought, I won&#39;t be surprised if rundll32 can handle both DLLs as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-945963">
				<div id="div-comment-945963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-945963">
			November 10, 2011 at 9:02 am</a>		</div>

		<p>The DLLRegisterServer system is woefully under-engineered. There&#39;s no ref-counting (hence the unanswerable &quot;other programs may be using this file, do you want to delete it?&quot;), no way to know what it actually does, etc.</p>
<p>I do wish is was declarative. Actually, MFC COM servers are declarative, with a .RGS file as the manifest &#8211; but the code that parses it is statically-linked in the COM server. No big improvement here.</p>
<p>But, I guess it was acceptable for when it was designed (Win3.1? Win95?).</p>
<div class="post">[<i>Um, <a href="http://msdn.microsoft.com/en-us/library/ms954376.aspx" rel="nofollow">it <span style="text-decoration:underline;">is</span> refcounted</a>. The unanswerable question appears when the refcount goes to zero. Another case of saying &quot;Windows is stupid for not doing X&quot; when in fact <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/06/23/10028820.aspx" rel="nofollow">it did X all along</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-945983">
				<div id="div-comment-945983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phil W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-945983">
			November 10, 2011 at 10:26 am</a>		</div>

		<p>The Windows Installer rule is that you always install your Dll to the same location with the same MSI Component Guid. That&#39;s what ref counts it &#8211; when the count for that guid goes to zero Windows removes it, to expand on Raymond&#39;s point. This is one of those &quot;it just works&quot; things as long as you follow that rule. Incidentally it&#39;s not recommended that you call DllRegister/Unregister at install time (see the docs for the SelfReg table). Most &quot;real&quot; install tools will extract COM registration at build time and write it to the system when the Dll is installed, all ref counted. &nbsp;In the bad old days the ref count was a bit more primitive (Shared Dll ref count).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-945993">
				<div id="div-comment-945993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-945993">
			November 10, 2011 at 3:02 pm</a>		</div>

		<p>@George</p>
<p>Not wrong, but needs a little bit of clarification. <a rel="nofollow" target="_new" href="http://support.microsoft.com/kb/164787" rel="nofollow">support.microsoft.com/&#8230;/164787</a> this should explain everything.</p>
<p>(The clarification is that rundll32 also accepts the form void CALLBACK Entrypoint(HWND, HINSTANCE, LPSTR, int); on NT versions)</p>
<p>@waleri</p>
<p>Both regsvr32 and rundll32 handles 64 bit dlls on x64 versions of Windows. (Not sure about the IA64 versions, but I don&#39;t see why it wouldn&#39;t). The way it works is that it detects the DLL type first, and if it is found to be of the alternate architectures (so x86 for x64 native regsvr32 or rundll32, and x64 for the wow64 native version) then it will just launch the other version of the command with the same parameters.</p>
<p>Just in case that was unclear, suppose you run c:windowssystem32regsvr32 myx86component.dll. It will read the DLL type, find that it is a 32 bit component and then launch c:windowssyswow64regsvr32 myx86component.dll. The same goes with x64 versions of DLLs with the x86 version of regsvr32 (and the same with rundll32).</p>
<p>(Of course the actual mechanism is unknown, all I know is that no matter what version of regsvr32 I use, I can register both types of DLL.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-946013">
				<div id="div-comment-946013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-946013">
			November 10, 2011 at 4:04 pm</a>		</div>

		<p>Actually, thanks to Raymond&#39;s work rundll32 can be used to successfully call Dll[Unr|R]egisterServer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-946023">
				<div id="div-comment-946023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-946023">
			November 10, 2011 at 5:20 pm</a>		</div>

		<p>Here&#39;s my favourite implementation of DllRegisterServer():</p>
<p>STDAPI DllRegisterServer( void ) {</p>
<p>&nbsp;MessageBox( NULL, &quot;Why are you trying to register this DLL? It&#39;s an ordinary Windows DLL, there&#39;s nothing to be registered&quot;, &quot;1d10t Error&quot;, MB_ICONQUESTION | MB_OK );</p>
<p>&nbsp;return( E_NOINTERFACE );</p>
<p>&nbsp;}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-946043">
				<div id="div-comment-946043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-946043">
			November 10, 2011 at 5:47 pm</a>		</div>

		<p>@Dave: If your DLL is not mean to be registered, it shouldn&#39;t contain DllRegisterServer() at all, especially if you&#39;re developing 3rd party components.</p>
<p>I remember some installer will always defaults to autoregister the DLL if it see&#39;s there is DllRegisterServer() in it. I think will be quite annoying if the customer found the installation always fail because the installer calls registration and see your E_NOINTERFACE return code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-946063">
				<div id="div-comment-946063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-946063">
			November 10, 2011 at 7:21 pm</a>		</div>

		<p>From the referenced link that I would have answered then had I been around then:</p>
<p>[Office definitely shouldn&#39;t be calling undocumented APIs; if they are let me know and I will go beat up somebody. I think SQL Server lives on the application side of the fence as well. Not sure about Hyper-V. -Raymond]</p>
<p>As of about Office 2000 the calls to undocumented APIs had been removed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-946073">
				<div id="div-comment-946073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xpclient</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-946073">
			November 10, 2011 at 8:52 pm</a>		</div>

		<p>If all regsvr32 operations require elevation on Vista and up, why doesn&#39;t it show a UAC prompt when launched from a non-elevated cmd prompt or Run dialog?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-946083">
				<div id="div-comment-946083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-946083">
			November 11, 2011 at 6:57 am</a>		</div>

		<p>@xpclient</p>
<p>They don&#39;t, you can have per user COM component installations. I have around 11 user only components installed on my system (Windows 7 Ultimate x64) and they are truely per user (no per machine keys at all) and I can instantiate instances of those components with no problems at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-946143">
				<div id="div-comment-946143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MIke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-946143">
			November 11, 2011 at 8:07 am</a>		</div>

		<p>Thanks, all, for answering my wonderings. :)</p>
<p>And, Paul, the point on abstraction is very well taken.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-946683">
				<div id="div-comment-946683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-946683">
			November 11, 2011 at 2:45 pm</a>		</div>

		<blockquote><p>
  How can I tell whether a DLL has been registered?
</p></blockquote>
<p>You try to use it (CoCreateInstance the object you want to use and try to use it.)</p>
<p>If it works, the .dll was probably registered, or maybe it never needed to be registered, or maybe it just looks like it works and it will bite you later on.</p>
<p>If it doesn&#39;t work, maybe the .dll wasn&#39;t registered. &nbsp;Or maybe something else is wrong. &nbsp;You could try registering the .dll. &nbsp;Usually the operation of registering a .dll is idempotent. &nbsp;But not always. &nbsp;In which case maybe it was working except for temporary problem and now you just broke it. &nbsp;So maybe before registering it you should unregister it first, usually unregistering a not-registered .dll does no harm. &nbsp;But not always&#8230; (etc. etc. ad infinitum ad astra)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-946843">
				<div id="div-comment-946843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-946843">
			November 11, 2011 at 7:18 pm</a>		</div>

		<p>@cheong00:</p>
<blockquote><p>
  If your DLL is not mean to be registered, it shouldn&#39;t contain DllRegisterServer()</p>
<p>  at all, especially if you&#39;re developing 3rd party components.
</p></blockquote>
<p>And then we get support emails from people asking why they get an error when they try and register the DLL. &nbsp;We put that in there specifically because people were trying to register a DLL that should never be registered in the first place, and then calling us to complain when it failed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-946873">
				<div id="div-comment-946873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-946873">
			November 11, 2011 at 9:40 pm</a>		</div>

		<p>@Dave: but why make it display a message? Why not just do nothing and return success?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-947063">
				<div id="div-comment-947063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-947063">
			November 12, 2011 at 6:19 pm</a>		</div>

		<p>@TC:</p>
<blockquote><p>
  but why make it display a message? Why not just do nothing and return success?
</p></blockquote>
<p>Think about this for a second. &nbsp;People are using the DLL incorrectly, and your suggestion would lead them to believe that their incorrect usage was OK. &nbsp;What happens at the next step, when they try a CoCreateInstance()?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-947073">
				<div id="div-comment-947073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-947073">
			November 12, 2011 at 7:52 pm</a>		</div>

		<p>And again, a program could EASILY make a copy of the current system, start a VM with the copy, run DllRegisterServer, and check if there&#39;s any new guids in VM&#39;s registry.</p>
<p>If there is, return true, else false.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-947103">
				<div id="div-comment-947103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-947103">
			November 13, 2011 at 2:55 am</a>		</div>

		<p>@640k: From the article you just read: &quot;How can you tell whether a function with no side effects has been called?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-947173">
				<div id="div-comment-947173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-947173">
			November 13, 2011 at 6:02 pm</a>		</div>

		<p>In a theory, DllRegisterServer could of course ask the user for a 128-bit number, which is written into registry, and which com hosts use to instantiate the object. Then there&#39;s no way to figure out what will be used.</p>
<p>In this case though, I can bet the customer has a com dll compiled by a common compiler like VS or VB. A compiler which MS has the source for. The autogenerated DllRegisterServer is mostly declarative, or at least MS should be able to figure it out because it&#39;s likely their own tools are 100% responsible for generating the guid.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-947183">
				<div id="div-comment-947183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-947183">
			November 13, 2011 at 6:06 pm</a>		</div>

		<p>Or you could scan the registry for the dll file name :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis odd alt thread-odd thread-alt depth-1" id="comment-947193">
				<div id="div-comment-947193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-947193">
			November 13, 2011 at 11:59 pm</a>		</div>

		<p>Given that the Dll[Un]RegisterServer functions can perform a number of operations, the answer to &quot;is this registered&quot; is not really binary. &nbsp;I register a DLL, which (in the simple case) writes a bunch of settings to HKCR. &nbsp;Something then modifies or deletes ONE of those settings. &nbsp;The DLL is still mostly registered, but not entirely, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-947513">
				<div id="div-comment-947513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-947513">
			November 15, 2011 at 7:18 am</a>		</div>

		<p>You first has to define what &quot;registered&quot; and &quot;com dll&quot; are. If DllRegisterServer has conditional logic, I wouldn&#39;t call that dll 100% com compatible. If it waits 1000 years to write the guid, I would call it buggy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-947593">
				<div id="div-comment-947593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phil W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-947593">
			November 15, 2011 at 10:59 am</a>		</div>

		<p>@Aaron M: &quot;Something then modifies or deletes ONE of those settings. &nbsp;The DLL is still mostly registered, but not entirely, right&quot; Well you&#39;re supposed to put the registry entries in the MSI file, NOT call DllRegisterServer at install time. Then if you get missing entries Winows Installer will repair them for you. If people choose an unfortunate way to install COM registration then they get unfortunate results sometimes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis even thread-even depth-1" id="comment-948043">
				<div id="div-comment-948043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111110-00/?p=9143#comment-948043">
			November 16, 2011 at 10:07 pm</a>		</div>

		<p>@Phil W &#8212; what you say sounds like a good idea, but I don&#39;t recall ever seeing that guidance before for COM components. &nbsp;COM components are generally supposed to be self-registering. &nbsp;Suppose I bundle components from a third party library &#8212; am I supposed to figure out all the registry values it writes (on 32- and 64-bit versions of Windows) and add those to my MSI? &nbsp;Or do I just install the components and then register them?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>