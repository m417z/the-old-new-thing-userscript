<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-275833">
				<div id="div-comment-275833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Davy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-275833">
			May 13, 2005 at 9:32 am</a>		</div>

		<p>Exercise:Why don&#8217;t we have to worry about possibly reading past the end of the file when we check *pchBuf != &#8216;#&#8217;? </p>
<p>because that check is done at:</p>
<p>while (pchBuf &lt; pchEnd)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-275843">
				<div id="div-comment-275843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stefang</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-275843">
			May 13, 2005 at 10:29 am</a>		</div>

		<p>Hmm</p>
<p>Something is strange here.</p>
<p>When I run your version 2 and 3 I get the following times (constructor only) :</p>
<p>version 2: 570 ms<br />
<br />version 3: 430 ms</p>
<p>So, on my system version 3 is only 25% faster.</p>
<p>This is far from over twice as fast.</p>
<p>Are you sure that you did not change anything else between the two version ?</p>
<p>Perhaps you changed to a single-threaded library, or you changed some optimization setting ?</p>
<p>What compiler are you using?<br />
<br />What does your compiler command line look like ?</p>
<p>My profiling of your version 2 indicates that the biggest problem is still in the character conversion.</p>
<p>40% is spent in do_in, only 12% in getline</p>
<p>I am using VS 2003 with a single-threaded library with /O2 optimization</p>
<p>If I dig a little deeper in the profiling of do_in I find that it is still calling MultiByteToWideString once for each character in the file.</p>
<p>A much better solution is to call MultiByteToWideString manually for each line instead of using  codecvt</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ricom even thread-even depth-1" id="comment-275853">
				<div id="div-comment-275853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ricom' rel='external nofollow' class='url'>ricom</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-275853">
			May 13, 2005 at 12:00 pm</a>		</div>

		<p>Raymond&#8217;s on vacation but maybe I can offer a consolation reply.  As I recall he did the time testing on an older machine of his at home.  It&#8217;s entirely possible that different microarchitectures have different costs.</p>
<p>I have a copy of exactly what Raymond built and I&#8217;ll be posting another analysis on my own blog later today and we&#8217;ll see if my measurements (on modern hardware) are more in line with what you see.</p>
<p>I suspect he built it with /O2 and that&#8217;s all but I&#8217;m not sure it would matter much because virtually all the cost (to-date) has been in the libraries.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-275883">
				<div id="div-comment-275883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">srs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-275883">
			May 13, 2005 at 4:23 pm</a>		</div>

		<p>What are you guys using to profile the code?  Is there some tool in vs.net that I&#8217;m not aware of?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-275873">
				<div id="div-comment-275873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-275873">
			May 13, 2005 at 4:29 pm</a>		</div>

		<p>What tool do you use to profile your code?<br />
<br />Are there any good free (or open source) profilers out there and what&#8217;s the best commercial one?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-275893">
				<div id="div-comment-275893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spaces.msn.com/member/andyandyx' rel='external nofollow' class='url'>Andreas Haeber</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-275893">
			May 13, 2005 at 4:44 pm</a>		</div>

		<p>Raymond answered which profiler he uses here <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2005/05/11/416430.aspx#416480" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2005/05/11/416430.aspx#416480</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-275903">
				<div id="div-comment-275903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ricom/archive/2005/05/13/417355.aspx' rel='external nofollow' class='url'>Rico Mariani's Performance Tidbits</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-275903">
			May 13, 2005 at 5:19 pm</a>		</div>

		<p>The fun continues as today we look at Raymond&#8217;s third improvement.<br />
<br />Raymond starts using some pretty&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-275933">
				<div id="div-comment-275933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-275933">
			May 13, 2005 at 7:04 pm</a>		</div>

		<p>This program hits a lot of different elements of the computer, disk drives, memory, and CPU.  Each different hardward configuration will have bottlenecks and performance issues manifest in different areas.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-275943">
				<div id="div-comment-275943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-275943">
			May 13, 2005 at 7:38 pm</a>		</div>

		<p>Perhaps the codecvt class in VS.NET 2005 does the whole string at once, while the one in VS.NET 2003 does it one character at a time?  I think Raymond&#8217;s using 2005 (from his last post anyway).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-275953">
				<div id="div-comment-275953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Barry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-275953">
			May 13, 2005 at 8:07 pm</a>		</div>

		<p>I have a question. Is it possible for a control character such as &#8216;n&#8217; to appear in the trail byte of a DBCS character? If the answer is yes, will std::find safely ignore these bytes?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-275963">
				<div id="div-comment-275963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Berlin Brown</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-275963">
			May 13, 2005 at 9:17 pm</a>		</div>

		<p>I have a side question though.  Why aren&#8217;t there newline or any extra features in notepad.exe.  I know a lot of us use notepad for the most basic of files.  I was wondering why there isn&#8217;t support of different encodings and such?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-275973">
				<div id="div-comment-275973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lucas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-275973">
			May 13, 2005 at 9:26 pm</a>		</div>

		<p>Berlin Brown:</p>
<p>Because (as answered in another post) notepad is a simple wrapper around the TextEdit standard windows control (and wordpad a wrapper around the RichText control).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman even thread-even depth-1" id="comment-275983">
				<div id="div-comment-275983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-275983">
			May 13, 2005 at 11:18 pm</a>		</div>

		<p>I&#8217;m wondering how long it will take before the entire C++ runtime library is gone from this example :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-banerjeeindranil odd alt thread-odd thread-alt depth-1" id="comment-276013">
				<div id="div-comment-276013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IndranilBanerjee' rel='external nofollow' class='url'>IndranilBanerjee</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-276013">
			May 14, 2005 at 6:04 am</a>		</div>

		<p>while (pchBuf &lt; pchEnd) {<br />
<br />const CHAR* pchEOL = std::find(pchBuf, pchEnd, &#8216;n&#8217;);<br />
<br />pchBuf = pchEOL + 1;<br />
<br />}</p>
<p>The last last line had better end with &#8216;n&#8217;. Otherwise you&#8217;ll get extremely poor performance</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276043">
				<div id="div-comment-276043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-276043">
			May 14, 2005 at 9:16 am</a>		</div>

		<p>I don&#8217;t like the way the MappedTextFile constructor silently fails. I think you should be using exceptions to report errors. Much of the standard library can throw exceptions anyway, so you have no hope of avoiding them.</p>
<p>indranilbanerjee wrote: &quot;The last last line had better end with &#8216;n&#8217;. Otherwise you&#8217;ll get extremely poor performance&quot;</p>
<p>If std::find() doesn&#8217;t find the target value, it returns the &quot;last&quot; iterator (pchEnd). This does mean that &quot;pchBuf = pchEOL + 1;&quot; could potentially put pchBuf beyond the end of the buffer, which in general has undefined behaviour, but by using memory-mapped files Raymond has already stepped outside portable C++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman odd alt thread-odd thread-alt depth-1" id="comment-276083">
				<div id="div-comment-276083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-276083">
			May 15, 2005 at 2:53 pm</a>		</div>

		<p>Nikos,<br />
<br />  File mapping IS the disk cache on NT.  The disk cache on NT works by mapping the file into memory and then reading from the mapped section.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276073">
				<div id="div-comment-276073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://parveenkaler.com' rel='external nofollow' class='url'>Parveen Kaler</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-276073">
			May 15, 2005 at 2:55 pm</a>		</div>

		<p>In your constructor&#8217;s intializer list, the order of initialization should match the order of declaration for your members.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-276093">
				<div id="div-comment-276093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-276093">
			May 15, 2005 at 6:25 pm</a>		</div>

		<blockquote><p>
  File mapping IS the disk cache on NT. The disk cache on NT works by mapping the file into memory and then reading from the mapped section.</p>
<p>But I don&#8217;t see, then, how a memory-mapped file can be much faster than just doing sequential reads?  Unless every call to ReadFile results in a switch to kernel-mode and back again&#8230;
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276063">
				<div id="div-comment-276063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.zabkat.com' rel='external nofollow' class='url'>nikos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-276063">
			May 15, 2005 at 11:32 am</a>		</div>

		<p>my personal experience from mapped files is at best a mixed bag</p>
<p>i&#8217;m using a read-only filemap like raymond&#8217;s to search for text in files (ok a bit more complex since i&#8217;m not mapping all the file at once caring for huge files, win9x etc, but basically the same)</p>
<p>many times i feel that straight CreateFile/ReadFile is faster. My suspicions are:</p>
<p>[*] the overhead associated with file mapping is significant &#8212; especially so for small files</p>
<p>[*] somehow file mapping misses the disk cache. So whereas repeated searches the simple way (ReadFile) are practically instantaneous from the 2nd time on (the file is read from the cache rather than HD), searches based on file mapping take more or less the same time, be it the first or 10th scan</p>
<p>any feedback on performance? It isn&#8217;t unconceivable i&#8217;m doing something wrong, but the read loop is so simple so&#8230;</p>
<p>thanks</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276103">
				<div id="div-comment-276103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cjm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-276103">
			May 15, 2005 at 7:44 pm</a>		</div>

		<p>Dean,</p>
<p>Every call to ReadFile goes to kernel mode.  File mappings only need to go to kernel mode (through a page fault) if a page that has been touched does not have the data it should have on it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-276113">
				<div id="div-comment-276113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-276113">
			May 15, 2005 at 8:55 pm</a>		</div>

		<p>Ah, makes sense then.  Thanks!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276123">
				<div id="div-comment-276123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">indranil banerjee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-276123">
			May 16, 2005 at 4:18 am</a>		</div>

		<p>I assume Raymond has a good reason for using the multithreaded C runtime library.</p>
<p>Looking at the analysis that ricom has done over at <a rel="nofollow" target="_new" href="http://blogs.msdn.com/ricom/" rel="nofollow">http://blogs.msdn.com/ricom/</a>, Locking plays a major part in the poor performance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276153">
				<div id="div-comment-276153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stefang</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-276153">
			May 16, 2005 at 9:35 am</a>		</div>

		<p>Nikos:</p>
<p>You must be doing something wrong. I have never seen reading from mapped files be slower than traditional ReadFile.</p>
<p>Can you produce an example program that demonstrates what you are saying ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276173">
				<div id="div-comment-276173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">srs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-276173">
			May 16, 2005 at 11:53 am</a>		</div>

		<p>Would reading a file from start to finish (just once, then closing it) be faster with a mapped file, or would it be the same as using ReadFile?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276143">
				<div id="div-comment-276143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.zabkat.com' rel='external nofollow' class='url'>nikos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-276143">
			May 16, 2005 at 9:03 am</a>		</div>

		<p>Larry</p>
<p>I&#8217;m not trying to dispute you or anything. But I&#8217;m definite that repeated reads of a file while mapped don&#8217;t get any faster, whereas normal reads get *much* faster from the 2nd time onwards. This is from experience.</p>
<p>It&#8217;s also different in 2000/XP: the former gets slightly faster even in mapping reads, whereas XP is a total dog in this respect :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276363">
				<div id="div-comment-276363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.zabkat.com' rel='external nofollow' class='url'>nikos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-276363">
			May 17, 2005 at 7:09 am</a>		</div>

		<blockquote><p>
  have never seen reading from mapped files<br />
  <br />&gt; be slower than traditional ReadFile</p>
<p>i didn&#8217;t say that; i said that subsequent reads get faster with readfile but not with mapped files</p>
<p>&gt; Can you produce an example program<br />
  <br />&gt; that demonstrates what you are saying </p>
<p>you asked for it :)<br />
  <br />the ReadFile method is found in my old file manager, 2xExplorer:<br />
  <br /><a rel="nofollow" target="_new" href="http://netez.com/2xExplorer" rel="nofollow">http://netez.com/2xExplorer</a></p>
<p>the new and supposedly improved memory mapped file version is within xplorer2:<br />
  <br /><a rel="nofollow" target="_new" href="http://zabkat.com" rel="nofollow">http://zabkat.com</a></p>
<p>both programs have a Mark menu with a command to &quot;search for text in files&quot; &lt;ctrl+G&gt;</p>
<p>try it in a large folder with lots of files (like the platform SDK headers dir) looking for some text that doesn&#8217;t exist (so all files are read completely)</p>
<p>you&#8217;ll find that in repeated searches for the same text, the old 2xExplorer is faster. Could be that mapped files are $#!+e or that i&#8217;ve foobar&#8217;d something somewhere :)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-277603">
				<div id="div-comment-277603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stefang</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-277603">
			May 25, 2005 at 2:46 am</a>		</div>

		<p>Well, I have tried both your programs, and I see no noticeable difference between the two.</p>
<p>Both programs behave just as you might expect:</p>
<p>The first time you run a search it is very slow because it is actually reading from the disk.</p>
<p>The second time, it is very fast and the disk is not accessed at all.</p>
<p>This is exactly as it is supposed to work.</p>
<p>I am running on Windows XP SP2 with a 1.2 GHZ Pentium 4 and 700 MB memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-464453">
				<div id="div-comment-464453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ricom/archive/2005/05/13/performance-quiz-6-looking-at-the-third-cut.aspx' rel='external nofollow' class='url'>Rico Mariani's Performance Tidbits</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050513-26/?p=35643#comment-464453">
			January 23, 2007 at 9:30 pm</a>		</div>

		<p>The fun continues as today we look at Raymond&#8217;s third improvement . Raymond starts using some pretty</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>