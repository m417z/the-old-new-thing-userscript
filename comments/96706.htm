<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1304115">
				<div id="div-comment-1304115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304115">
			July 28, 2017 at 7:08 am</a>		</div>

		<p>I always wonder at the thought process behind this sort of thing. If option X has a performance penalty and you believe that option Y can achieve exactly the same as option X but at a fraction of the cost, shouldn&#8217;t you be wondering <i>why option X isn&#8217;t implemented as option Y already</i>?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1304116">
				<div id="div-comment-1304116" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304116">
			July 28, 2017 at 7:19 am</a>		</div>

		<p>It seems to me they don&#8217;t care too much about process memory corruption and just want to run catch blocks and dtors during unwind.</p>
<p>If not for their example being what it was I would think they don&#8217;t care about access exceptions from their own code but only ones from Windows.</p>
<p>Expected useless followup: can I call longjump() in a n unhandled exception filter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1304125">
				<div id="div-comment-1304125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304125">
			July 28, 2017 at 8:03 am</a>		</div>

		<p>[Mediocre] people tend to underestimate other people&#8217;s work. You have already hear it: &#8220;this application worked in Windows XP, but Microsoft purposely broke the API in Windows 7&#8221;. Or another one, more than 20 years old by now: &#8220;Microsoft has some dark agreement with memory makers; I know that because Windows 95 requires more memory than Windows 3.1&#8221;. It&#8217;s like Microsoft engineers have a magic wand that allows to make new versions of Windows which add features without breaking compatibility or using more resources; but they choose not to use it. (I talk about Microsoft because of this blog&#8217;s policy of not talking about other companies&#8217; products, but Microsoft isn&#8217;t alone here, of course).</p>
<p>Similarly, many programmers seem to think that compiler optimizations are black magic, not unlike the mentioned magic wand, and that all you have to do is to wave it, say &#8220;bibidi babidi boo&#8221;, and&#8230; voilà! Instant magic! And look, without any side effects at all! If it doesn&#8217;t work, it surely is that engineers are fool or perverse (or both!).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-3 parent" id="comment-1304136">
				<div id="div-comment-1304136" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304136">
			July 28, 2017 at 9:12 am</a>		</div>

		<p>I also find that many programmers don&#8217;t understand optimisations and what they do.<br />
There is still a lot of people who think that the optimiser just gives out a more optimised version of what you put in, but it does exactly the same thing. They don&#8217;t seem to understand that what you get out behaves exactly the same, but is not required to actually do exactly the same thing.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1304166">
				<div id="div-comment-1304166" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304166">
			July 28, 2017 at 11:30 am</a>		</div>

		<p>&gt; There is still a lot of people who think that the optimiser just gives out a more optimised version of what you put in, but it does exactly the same thing.</p>
<p>Because it was once true. Among the first useful optimizations was &#8220;suppress redundant reloads&#8221;; but when it was new there was a switch to turn it off in case somebody was abusing undefined behavior as this was also the first one that radically changed what undefined behavior did.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1304196">
				<div id="div-comment-1304196" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304196">
			July 28, 2017 at 3:39 pm</a>		</div>

		<p>Wikipedia has a surprisingly thorough set of articles about individual compiler optimizations (strength reduction, loop unswitching, etc.).  They&#8217;re very useful for disabusing people of this notion.</p>
<p>Or at least, I imagine that they are.  I haven&#8217;t actually tried using them for that purpose.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1304275">
				<div id="div-comment-1304275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304275">
			July 31, 2017 at 1:16 am</a>		</div>

		<p>Or people who think that anti-virus editors make viruses in order to sell anti-virus solutions.</p>
<p>Or people that did not at all study or code Windows, but are convinced that Windows 95 is only a GUI for DOS, and that Windows 7 still has DOS as a kernel.</p>
<p>&#8220;Those people&#8221;. Ugh ! They are so ridiculous !</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1304235">
				<div id="div-comment-1304235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aged .Net Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304235">
			July 29, 2017 at 11:51 am</a>		</div>

		<p>The other mistaken thought process I&#8217;ve encountered many times over the years is &#8230;</p>
<p>Goofy programmer: &#8220;The compiler inserts all that bloat because it needs that to protect against extreme corner cases and such. My plain vanilla code doesn&#8217;t use [insert level of API or coding tech I don&#8217;t understand] so I won&#8217;t be triggering whatever that bloat might be needed for.&#8221;</p>
<p>Doesn&#8217;t matter if the goof thinks the bloat is there to protect when using COM, or multithreading, or lambdas, or ATL or whatever.  It&#8217;ll always be something that A) the goof doesn&#8217;t understand, and B) the goof isn&#8217;t directly using in the small part of the complete executable he&#8217;s actually thinking about.  All bets are off as to the rest of the complete execution environment; it may be chock full of that stuff but it&#8217;s invisible to him (very, very occasionally her).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1304127">
				<div id="div-comment-1304127" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304127">
			July 28, 2017 at 8:27 am</a>		</div>

		<p>The problem is the mindset that C++ language exceptions are &#8220;synchronous&#8221;, which unfortunately Raymond is repeating.</p>
<p>C++ exceptions are synchronous when the `throw` statement is reached from the thread entry point, and asynchronous when the `throw` statement is called in asynchronous context.  Structured exception handlers are a Win32 example of asynchronous context (but not the only one, you can also have code that does SuspendThread and then messes with the instruction pointer &#8212; I believe that .NET Thread.Abort() is an example).  Signal handlers are a POSIX example.</p>
<p>Now that we see that &#8220;C++ language exceptions only&#8221; is not sufficient to exempt us from asynchronous exceptions, we also know it&#8217;s not sufficient for turning off /EHa.</p>
<p>Ultimately though, this still fails to identify all cases where /EHa is needed, because /EHa is *also* critical if throwing exceptions across module boundaries.  Probably there ought to be a separate flag for forcing the use of OS exceptions.  And if both /EHa and the hypothetical /EHos trigger the same compiler behavior, so be it.  In the future they might not (In particular, when using /EHs /EHos it might be possible for the compiler to eliminate handlers when a try block contains only in-module noexcept calls, while still using OS infrastructure and handlers when calling foreign functions).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-2" id="comment-1304137">
				<div id="div-comment-1304137" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304137">
			July 28, 2017 at 9:45 am</a>		</div>

		<p>Nitpickers Corner: This actually gets a LOT more complicated when you bring in the concept of coroutines, which are extremely asynchronous and the exception may not even be &#8220;caught&#8221; on the same thread it was thrown.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1304265">
				<div id="div-comment-1304265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304265">
			July 30, 2017 at 3:05 pm</a>		</div>

		<p>On the face of it, it doesn&#8217;t seem reasonable for the programmer to expect C++ exceptions to work in an asynchronous context.  Is there some reason I&#8217;m not aware of, e.g., is it mentioned in the C++ standard, or the POSIX standard, perhaps?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude odd alt thread-even depth-1 parent" id="comment-1304135">
				<div id="div-comment-1304135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304135">
			July 28, 2017 at 8:30 am</a>		</div>

		<p>Honestly Clang and GCC treat any function from the Cstdlib as <code>noexcept</code> which the standard allows, I&#8217;m honestly surprised that the Visual C++ libraries team didn&#8217;t just use a macro to support C++ and C on that matter. Or just let the compiler figure it out.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1304247">
				<div id="div-comment-1304247" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304247">
			July 29, 2017 at 7:08 pm</a>		</div>

		<p>Why, what a clever idea. I wonder why the MSVC compiler guys never thought of that. They must be very silly indeed.</p>
<p>Oh, wait, what is this /EHc compiler switch? I wonder what it does.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-martin-baschnegger odd alt depth-3" id="comment-1304855">
				<div id="div-comment-1304855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Martin+Ba.+_' rel='external nofollow' class='url'>Martin Ba. _</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304855">
			August 2, 2017 at 3:14 am</a>		</div>

		<p>@Doug: Yeah, except that /EHsc marks *all* extern &#8220;C&#8221; Functions as noexcept, not just the standard library. Quite the difference, if you ask me. Being able to use /EHs (w/o &#8216;c&#8217;) and still benefiting from the static knowledge that the myriad of cstdlib functions won&#8217;t ever throw a C++ exception could be a good thing &#8212; because you&#8217;r C-Interface libraries or other third party C-Api wrappers very well might.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1304176">
				<div id="div-comment-1304176" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304176">
			July 28, 2017 at 1:10 pm</a>		</div>

		<p>I seem to remember reading somewhere (the official docs, Raymond&#8217;s blog, not sure) that using /EHa is a bad idea. I&#8217;m not quite sure why, maybe because you can wrongly handle things like guard pages or because you catch things you should never catch at all, like access violations.</p>
<p>Do I remember this wrong or does anybody have details? Of course you could argue &#8220;if that were the case, surely this feature wouldn&#8217;t even exist&#8221;, but the answer to that is probably &#8220;compatibility&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1304215">
				<div id="div-comment-1304215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M Hotchin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304215">
			July 29, 2017 at 12:48 am</a>		</div>

		<p>People using /EHa are tempted to use &#8216;catch (&#8230;)&#8217;.  This eats exceptions that are used by the OS for things like growing your stack.<br />
<a href="https://blogs.msdn.microsoft.com/oldnewthing/20060927-07/?p=29563" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20060927-07/?p=29563</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1304205">
				<div id="div-comment-1304205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304205">
			July 28, 2017 at 11:07 pm</a>		</div>

		<p>Hopefully  fancy logging api can capture and log those fancy exceptions shmexceptions for posterity.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1304225">
				<div id="div-comment-1304225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304225">
			July 29, 2017 at 4:37 am</a>		</div>

		<p>The linked page says, &#8220;you can’t mix the SEH syntax with try, throw, and catch in the same function&#8221;. So can you not even &#8220;protect&#8221; against a structured exception from e.g. a call to a specific third-party library?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1304245">
				<div id="div-comment-1304245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304245">
			July 29, 2017 at 6:30 pm</a>		</div>

		<p>You can, but since most SEH exceptions that you would catch with the try/except or try/finally syntax are going to be things like STATUS_ACCESS_VIOLATION or STATUS_GUARD_PAGE_VIOLATION. So the question is why would you want to handle those?<br />
If for some reason the third party library is using SEH to raise exceptions that you would want to catch, notice that it says in the same function? You can catch both types if you go through to different functions.<br />
But here is one thing to remember about C++ exceptions, besides bad libraries, they are used mostly in exceptional situations. So the majority of my exception handling is a try/catch block out not that far away from my main function. All it does is catch the error, log details and then exits the process. It is best to do this since you will be getting the exception closest to the error, and lets face it, if you are getting exceptions thrown about memory allocation failure, or bounds errors or other things like that, something has messed up with your application and you don&#8217;t want it to continue.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1304257">
				<div id="div-comment-1304257" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170728-00/?p=96706#comment-1304257">
			July 30, 2017 at 7:05 am</a>		</div>

		<p>BTW, there is special C function that intentially created to translate SEH to C++ exceptions: _set_se_translator<br />
I believe its better to be used for such purpose than plain SEH filter.<br />
However its documentation clearly requires using of /EHa that also should hint potential revolutionaries that SetUnhandledExceptionFilter may be not so good as they expect..</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>