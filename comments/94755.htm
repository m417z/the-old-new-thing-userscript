<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1274555">
				<div id="div-comment-1274555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161121-00/?p=94755#comment-1274555">
			November 22, 2016 at 2:24 am</a>		</div>

		<p>OK, I&#8217;ll bite; I can&#8217;t see the point of the double test. In fact, I wouldn&#8217;t even test the flag at wake up, since only a new refresh could cause a wake. The flag then remains set until the refresh completes, and only then would I reset it. (There&#8217;s also probably a good reason why I&#8217;d still have to reset it atomically, but I&#8217;d have to go back and reread your previous posts to remind myself why.)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1274565">
				<div id="div-comment-1274565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161121-00/?p=94755#comment-1274565">
			November 22, 2016 at 2:30 am</a>		</div>

		<p>Not sure where there is a double test. Each function has only one test. And in the consumer, if you test at the end of the loop instead of the beginning, you end up performing two refreshes in response to a single refresh request.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1274705">
				<div id="div-comment-1274705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161121-00/?p=94755#comment-1274705">
			November 23, 2016 at 2:26 am</a>		</div>

		<p>&#8220;If set, then it performs a refresh, and then it goes back and performs another test-and-reset of the flag to see whether a refresh request arrived while the previous one was in progress&#8221; is what I meant by double test. And in my mind, the consumer needs no tests at all, since the wake counts as the test. But the real answer to my question turns out to be that this is the base case of the pattern since otherwise the derived cases wouldn&#8217;t make sense. (Where&#8217;s that time machine when you need it?)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4 parent" id="comment-1274725">
				<div id="div-comment-1274725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161121-00/?p=94755#comment-1274725">
			November 23, 2016 at 6:51 am</a>		</div>

		<p>Ah, I see. Yes, the next Wake will kick the consumer. The idea here is that since the Refresh code is now in cache, you may as well opportunistically do more updates while the going is still cheap. And, as you noted, it&#8217;s a base case for future exploration where looping back may be non-optional. (The extra test is there in case there are spurious wakes. A number of synchronization primitives allow spurious wakes, so we may as well protect against them.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1274865">
				<div id="div-comment-1274865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161121-00/?p=94755#comment-1274865">
			November 24, 2016 at 2:32 am</a>		</div>

		<p>Ah, spurious wakes and opportunistic refreshes, that makes much more sense now, thanks!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jan-ringos odd alt thread-odd thread-alt depth-1" id="comment-1274755">
				<div id="div-comment-1274755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jan+Ringo%C5%A1' rel='external nofollow' class='url'>Jan Ringo≈°</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161121-00/?p=94755#comment-1274755">
			November 23, 2016 at 8:19 am</a>		</div>

		<p>In this case I&#8217;d probably just use SetEvent, although it&#8217;s likely not as efficient.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1275055">
				<div id="div-comment-1275055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://firstclassthoughts.co.uk' rel='external nofollow' class='url'>Kasper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161121-00/?p=94755#comment-1275055">
			November 27, 2016 at 2:11 pm</a>		</div>

		<p>I once measured the speed of the lock construct. It&#8217;s surprisingly fast and less confusing to the eye. See the measurements here  <a href="http://firstclassthoughts.co.uk/Articles/Programming/DotNetLocksAreReallyFast.html" rel="nofollow">http://firstclassthoughts.co.uk/Articles/Programming/DotNetLocksAreReallyFast.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>