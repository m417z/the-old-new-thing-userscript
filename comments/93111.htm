<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-iboyd even thread-even depth-1 parent" id="comment-1228961">
				<div id="div-comment-1228961" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160303-00/?p=93111#comment-1228961">
			March 3, 2016 at 7:15 am</a>		</div>

		<p>I assume he meant in the sense that COM objects are thread hostile. If you construct a COM object in one thread (e.g. a STA), you are forbidden from accessing it from another thread (e.g. another STA). Even though i may guarantee no overlapping operations (e.g. that only one thread at a time will ever attempt to access the COM object), that is strictly forbidden by the rules of COM. </p>
<p>A STA COM object, constructed in a STA apartment, is only ever allowed to be used from that apartment. No amount of synchronization or coordination will change that rule. It&#8217;s not a thread safety issue, it&#8217;s just the way it is.</p>
<p>Hopefully he had two threads, both CoInitialized into STA, and both constructing their own instances of the various shell COM objects. Hopefully he&#8217;s not sharing IShellItem interface pointer between two threads.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-2 parent" id="comment-1228981">
				<div id="div-comment-1228981" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160303-00/?p=93111#comment-1228981">
			March 3, 2016 at 8:34 am</a>		</div>

		<p>Just to be a bit nit-picky here, but you mean that STA COM objects can&#8217;t be directly called from another thread without marshalling right?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-iboyd even depth-3 parent" id="comment-1229021">
				<div id="div-comment-1229021" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160303-00/?p=93111#comment-1229021">
			March 3, 2016 at 10:37 am</a>		</div>

		<p>CoMarshallInterface creates the proxy that brings any interaction with the COM object back to the thread that created it. So it&#8217;s still only being accessed from the one thread &#8211; ever.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-4" id="comment-1229031">
				<div id="div-comment-1229031" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160303-00/?p=93111#comment-1229031">
			March 3, 2016 at 12:31 pm</a>		</div>

		<p>But the problem is that access is too general a word to be used for this since access has the general definition of &#8220;the opportunity or right to use something&#8221;.<br />
So calling a member function on an STA COM object via the proxy is using that object, hence you have access. But using an object through the proxy is indirect access where using the object directly is obviously direct access.<br />
While I understand what you mean, the term access is too weak to mean what you mean here, which is why I did try to drop the hint with the use of direct in my last reply.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ted-2 even thread-odd thread-alt depth-1" id="comment-1228982">
				<div id="div-comment-1228982" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Glassware' rel='external nofollow' class='url'>Glassware</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160303-00/?p=93111#comment-1228982">
			March 3, 2016 at 9:02 am</a>		</div>

		<p>I believe the real question being asked is &#8220;Will there be an unexpected crash due to two threads conflicting in ways I don&#8217;t understand?&#8221;</p>
<p>Charitably, in the standard Petzold Windows co-operative multitasking model, everything can only happen once and nobody can set up crazy conflicts.  So people get used to the fact that functions are always safe.</p>
<p>But, when you go to the new world model of threads and processes always running, it&#8217;s easy to forget that some APIs are simple and some APIs are complex.  If you use a COM component that has some poorly implemented shared heap, two threads trying to allocate memory at the same time will definitely cause unexpected crashes, even if they&#8217;re only doing something as simple as SetProp/RemoveProp.</p>
<p>I think we&#8217;ve all been trained by bad libraries and bad components to always expect problems in multithreading.  I recently heard of a colleague using an address validation component that, in 2015, required single threading in order to match addresses to geospatial coordinates &#8211; an operation we all assumed was thread-safe.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>