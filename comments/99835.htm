<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1363615">
				<div id="div-comment-1363615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1363615">
			September 27, 2018 at 7:28 am</a>		</div>

		<p>There is another trick that works well if you frequently perform operations on all nodes of your tree:</p>
<p>Also store a list of pointers to your tree nodes. When you need to perform an operation on all nodes, you can just iterate the node list rather than waking the tree. (This also assumes the order of node visits doesn&#8217;t matter and you can cope with double bookkeeping cost)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1363635">
				<div id="div-comment-1363635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1363635">
			September 27, 2018 at 9:09 am</a>		</div>

		<p>Well I suppose you could do it old school like the old school.</p>
<p>One function. Explicit stack operations. Only the stack in question is the runtime stack. alloca() is your friend. If you&#8217;re coding in assembly you can do it even better yet. It&#8217;s one of the last places left where the compiler can&#8217;t optimize anywhere near as good as a human. In order to make exception unwind work you will need a frame pointer, and therefore sacrifice a register to it. Totally worth it if you&#8217;re not a leaf function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher even depth-2" id="comment-1363755">
				<div id="div-comment-1363755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1363755">
			September 27, 2018 at 4:46 pm</a>		</div>

		<p>If you&#8217;re talking performance &#8211; separate the index out into an array.  Your in order traversal becomes a for loop, your binary search isn&#8217;t swapping in entire class instances in order to access a single variable, and the binary search does not need a stack at all and needs only three index variables.<br />
As a rule, an object &#8220;belongs to&#8221; an index, or the index &#8220;contains&#8221; an object &#8211; however you want to think about it, and so having the object &#8220;have&#8221; an index only makes conceptual test if the object is a container and the index is children.  Separating off the index creates a reusable brick you can pull in to containers that need it, that brick can be easily unit tested and depending on how clever you are with the design, ends up paging in only the data that you need for the search, for the search case, and only the list of objects for the in order traversal case.<br />
Usually there&#8217;s less storage requirements, higher performance by separating off the indexes.  Which is, of course, why we&#8217;re teaching kids to keep 20 separate indexes inline in classes &#8211; same reason we can&#8217;t spend ten minutes on teaching useful debugging in school</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1363625">
				<div id="div-comment-1363625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1363625">
			September 27, 2018 at 7:51 am</a>		</div>

		<p>The &#8220;Bonus chatter&#8221; gives us the key. Unless you are optimizing a time-critical section of an inner loop or dealing with a task that takes more than a few seconds in current hardware, gaining a 10% of performance doesn&#8217;t justify making the code more complicated. It not only makes it harder to read and understand. It also makes it easier to slip bugs and harder to debug them. It doesn&#8217;t matter if a program is fast when it&#8217;s buggy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1363655">
				<div id="div-comment-1363655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1363655">
			September 27, 2018 at 10:43 am</a>		</div>

		<p>This reminds me of a change I made to an opensource project which used treewalking to generate an SQL query.<br />
The problem was that it included a long list of binary operators (1000&#8217;s of arguments) and was unbalanced (basically only the right tree was filled), resulting in a stack overflow.</p>
<p>Rewriting the AST constructor to generate a balanced tree solved the issue (log_2(n) depth vs n-depth))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1363675">
				<div id="div-comment-1363675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://timothybyrd.com' rel='external nofollow' class='url'>Timothy Byrd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1363675">
			September 27, 2018 at 10:59 am</a>		</div>

		<p>Nitpick, but isn&#8217;t your recursive example pre-order, not in-order?<br />
I thought in-order would look like this:<br />
<code><br />
void add_to_each_node_recursive(Node* root, int extra)<br />
{<br />
 if (!root) return;<br />
 add_to_each_node_recursive(root-&gt;left, extra);<br />
 root-&gt;value += extra;<br />
 add_to_each_node_recursive(root-&gt;right, extra);<br />
}<br />
</code></p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1363715">
				<div id="div-comment-1363715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xtal256</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1363715">
			September 27, 2018 at 2:44 pm</a>		</div>

		<p>No, that&#8217;s doing the left node first.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1363765">
				<div id="div-comment-1363765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://timothybyrd.com' rel='external nofollow' class='url'>Timothy Byrd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1363765">
			September 27, 2018 at 4:47 pm</a>		</div>

		<p>Isn&#8217;t that what an in-order traversal is? Processing the left sub tree, the current node and then the right sub tree?</p>
<p>For example: <a href="https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/" rel="nofollow">https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1363745">
				<div id="div-comment-1363745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://david-codes.hatanian.com/' rel='external nofollow' class='url'>David</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1363745">
			September 27, 2018 at 4:23 pm</a>		</div>

		<p>Personally, I find recursive code is usually harder to reason about, beyond simple examples such as tree traversal. Especially the condition under which the recursion stops.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1363795">
				<div id="div-comment-1363795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Scharff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1363795">
			September 27, 2018 at 7:11 pm</a>		</div>

		<p>Then of course there&#8217;s the hybrid version which recurses on one child and iterates on the other. I&#8217;m guessing that this is only explicitly implementing a tail-call recursion optimization, so it would likely compile to byte code very similar to add_to_each_node_recursive.</p>
<p><code><br />
void add_to_each_node_hybrid(Node* root, int extra)<br />
{<br />
 while (root) {<br />
  root-&gt;value += extra;<br />
  add_to_each_node_hybrid(root-&gt;right, extra);<br />
  root = root-&gt;left;<br />
 }<br />
}<br />
</code></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-martin-baschnegger even thread-even depth-1" id="comment-1363845">
				<div id="div-comment-1363845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Martin+Ba.+_' rel='external nofollow' class='url'>Martin Ba. _</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1363845">
			September 28, 2018 at 12:37 am</a>		</div>

		<p>There&#8217;s another angle to engineering cost: The recursive version is easier to write and understand (and yes, to debug) but there is the problem that there lurks a potential UB stack overflow depending on the runtime data set. So there is another tradeoff to consider that has nothing to do with performance: Easy to write and understand with potential UB or waterproof (at least wrt. UB) but harder to write and maintain.</p>
<p>Personally, I&#8217;d go with option #1 for low risk code, and if I want waterproof, I&#8217;d factor the &#8216;iterative&#8217; tree walking itself out into a generic function that I can test in isolation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1364035">
				<div id="div-comment-1364035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1364035">
			September 28, 2018 at 2:49 pm</a>		</div>

		<p>Recently I wrote a C++ template to implement AVL trees with node insertion and deletion support, and with iterator access semantics. To support iterating through the nodes, I just added a back pointer to the parent node. Thus, no concerns about recursion depth.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1364265">
				<div id="div-comment-1364265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">osxpert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1364265">
			September 30, 2018 at 11:06 am</a>		</div>

		<p>&#8220;recursive version is usually easier to write, understand, and debug&#8221;<br />
I disagree on the last. Recursive call with deep stack is almost impossible to debug.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1365015">
				<div id="div-comment-1365015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1365015">
			October 2, 2018 at 7:33 pm</a>		</div>

		<p>-&#8220;Recursive call with deep stack is almost impossible to debug&#8221;<br />
Sure, if you wait until the stack is blown!  If the reason the stack is that deep is because of a bug, the bug probably triggered long, long before the stack was blown.  I think I would enable the Guard Page event in windbg, and it would break when the stack needs to grow, a handy &#8220;auto-break&#8221; feature for when recursion headed to infinity.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1364295">
				<div id="div-comment-1364295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudonym</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1364295">
			September 30, 2018 at 9:40 pm</a>		</div>

		<p>The recursive version is usually easier to write and understand, but the explicit stack version can be much easier to debug. I&#8217;ve wasted hours digging through stack traces that are 200 levels deep.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-squelart odd alt thread-even depth-1 parent" id="comment-1366365">
				<div id="div-comment-1366365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/squelart' rel='external nofollow' class='url'>squelart</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1366365">
			October 7, 2018 at 11:30 pm</a>		</div>

		<p>I&#8217;m late to the party, but another solution is for each node to store a pointer to its parent, an iterative algorithm only needs two pointers to walk that tree. Harder to write correctly of course, but with a bit of templating it only needs to be written&amp;tested once. And it&#8217;s much more code with a lot of branching, so it could still end up being slower; always measure!</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1366515">
				<div id="div-comment-1366515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1366515">
			October 8, 2018 at 9:14 am</a>		</div>

		<p>Tree walking was just an example. Let&#8217;s assume that the recursion is inherent in the problem. The issue is comparing the pure recursive version with the recursion-converted-to-iteration version.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-squelart odd alt depth-3" id="comment-1366605">
				<div id="div-comment-1366605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/squelart' rel='external nofollow' class='url'>squelart</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180927-00/?p=99835#comment-1366605">
			October 9, 2018 at 4:00 am</a>		</div>

		<p>I guess I couldn&#8217;t see the forest for the &#8230; tree! *badum tish*<br />
In the end, there may be more than one way to convert to non-iterative, with different pros&amp;cons; All to be evaluated along different axes (which your article shows is not that obvious) to decide which one is preferred. Much fun!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>