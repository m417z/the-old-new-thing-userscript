<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-787933">
				<div id="div-comment-787933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-787933">
			November 20, 2009 at 7:10 am</a>		</div>

		<p>The answer to this is right there in the docs (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/5b5cad6s%28VS.80%29.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/5b5cad6s%28VS.80%29.aspx</a>):</p>
<p>CComVariant&amp; operator =(LPCOLESTR lpszSrc);</p>
<p>lpszSrc [in] The character string to be assigned to the CComVariant object. You can pass a zero-terminated wide (Unicode) character string to the LPCOLESTR version of the operator or an ANSI string to the LPCSTR version. In either case, the string is converted to a Unicode BSTR allocated using SysAllocString. The type of the CComVariant object will be VT_BSTR.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787943">
				<div id="div-comment-787943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.samholloway.co.uk/' rel='external nofollow' class='url'>Sam Holloway</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-787943">
			November 20, 2009 at 7:21 am</a>		</div>

		<p>This is one of the reasons why we prefer to use Microsoft&#8217;s _com_ptr_t instead &#8211; the semantics of the operator= are more &#8216;natural&#8217; and it&#8217;s more difficult for the novice to get it wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787953">
				<div id="div-comment-787953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-787953">
			November 20, 2009 at 7:56 am</a>		</div>

		<p>Exact same problem the hint to yesterday&#8217;s puzzle (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2008/06/23/8640472.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2008/06/23/8640472.aspx</a>): the BSTR decays into an LPCOLESTR, so CComVariant::operator= makes a copy of the BSTR and the original BSTR is leaked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787963">
				<div id="div-comment-787963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-787963">
			November 20, 2009 at 10:59 am</a>		</div>

		<p>One of my favorite uses for the new move semantics in C++0x is getting to write:</p>
<p>spFoo1(std::move(spFoo2));</p>
<p>instead of</p>
<p>spFoo1.Attach(spFoo2.Detach());</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787983">
				<div id="div-comment-787983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-787983">
			November 20, 2009 at 1:52 pm</a>		</div>

		<blockquote><p>
  One of my favorite uses for the new move semantics in C++0x is getting to write:
</p></blockquote>
<p>this looks interesting &#8211; got a link?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-787993">
				<div id="div-comment-787993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-787993">
			November 20, 2009 at 2:05 pm</a>		</div>

		<blockquote><p>
  &gt; One of my favorite uses for the new move semantics in C++0x is getting to write:</p>
<p>  this looks interesting &#8211; got a link?
</p></blockquote>
<p>See <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/C%2B%2B0x#Rvalue_reference_and_move_semantics" rel="nofollow">http://en.wikipedia.org/wiki/C%2B%2B0x#Rvalue_reference_and_move_semantics</a> for details&#8230;it&#8217;s kind of a mind twister, tho.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-788003">
				<div id="div-comment-788003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-788003">
			November 20, 2009 at 2:07 pm</a>		</div>

		<p>@Cooney: For more info, and details on the VS2010 implementation:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/vcblog/archive/2009/02/03/rvalue-references-c-0x-features-in-vc10-part-2.aspx" rel="nofollow">http://blogs.msdn.com/vcblog/archive/2009/02/03/rvalue-references-c-0x-features-in-vc10-part-2.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-788013">
				<div id="div-comment-788013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bekenn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-788013">
			November 20, 2009 at 2:15 pm</a>		</div>

		<p>@Cooney: From Stroustrup himself: <a rel="nofollow" target="_new" href="http://www2.research.att.com/~bs/C++0xFAQ.html#rval" rel="nofollow">http://www2.research.att.com/~bs/C++0xFAQ.html#rval</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-788023">
				<div id="div-comment-788023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-788023">
			November 20, 2009 at 3:46 pm</a>		</div>

		<p>How do you look for memory leaks using Application Verifier? I have a simple program that leaks:</p>
<p>CoInitialize(NULL);</p>
<p>void *ptr=CoTaskMemAlloc(100);</p>
<p>CoUninitialize();</p>
<p>but the Verfier doesn&#8217;t say anything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-788043">
				<div id="div-comment-788043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-788043">
			November 20, 2009 at 10:23 pm</a>		</div>

		<p>”Even nastier is the secret QI&#8217;ing assignment operator.“</p>
<p>Yea, it is like late-binding in Visual Basic, only that VB makes errors more obvious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-788073">
				<div id="div-comment-788073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-788073">
			November 21, 2009 at 2:32 am</a>		</div>

		<p>Your are wrong about Boost. It allows conversion from the raw pointer. You still can convert but just have to type the pointer class name again. Take a look at</p>
<p><a rel="nofollow" target="_new" href="http://www.boost.org/doc/libs/1_40_0/libs/smart_ptr/intrusive_ptr.html" rel="nofollow">http://www.boost.org/doc/libs/1_40_0/libs/smart_ptr/intrusive_ptr.html</a></p>
<p>This is Boost&#8217;s smart pointer that would work with COM. It doesn&#8217;t address the real issue that there is no single way to &quot;convert&quot; to begin with. For a COM smart pointer there should not be any direct conversion from the raw one.</p>
<p>If you were talking about shared_ptr then this is a different beast that has very different semantics from the COM case. The whole issue of whether to attach or copy never arises there since count is external to the object. In other words the pointer always has the reference and &quot;Attach&quot; is impossible to begin with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-788083">
				<div id="div-comment-788083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-788083">
			November 21, 2009 at 8:58 am</a>		</div>

		<p>AtlComPtrAssign could crash if releasing the old value causes the destruction of the CComPtr object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-788223">
				<div id="div-comment-788223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm100</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-788223">
			November 23, 2009 at 10:38 am</a>		</div>

		<p>thank heavens for CLR / c# / .net</p>
<p>I dont have to worry about this stuff anymore, or at least almost :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-788293">
				<div id="div-comment-788293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JohnQPublic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-788293">
			November 23, 2009 at 4:21 pm</a>		</div>

		<p>&lt;i&gt;</p>
<p>thank heavens for CLR / c# / .net</p>
<p>I dont have to worry about this stuff anymore, or at least almost :-)</p>
<p>&lt;/i&gt;</p>
<p>Now it&#8217;s buried deeply enough that when something goes wrong, you&#8217;ve not got the tools to find it :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-788493">
				<div id="div-comment-788493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dmnewbie.blogspot.com' rel='external nofollow' class='url'>B.Y.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091120-00/?p=15953#comment-788493">
			November 24, 2009 at 10:10 am</a>		</div>

		<p>This is the problem with features like smart pointers. You have to spent so much time to figure out tips and tricks and who knows what, you&#8217;re much better off if you just keep things simple and be diligent and use regular pointers. Well, I guess if people did that memory leaks wouldn&#8217;t be a big problem to begin with.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>