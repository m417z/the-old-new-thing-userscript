<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-885053">
				<div id="div-comment-885053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885053">
			December 30, 2010 at 7:12 am</a>		</div>

		<p>I wanted to make a screenshot tool that would overlay the screen with a screenshot of the screen, then draw outlines as you moved over each desktop window then crop the screenshot to that window when you clicked.</p>
<p>It worked great, except that WindowFromPoint (or Child*, or whatever I was using) ended up always, correctly, returning the overlay window covering the desktop. &nbsp;D&#39;oh!</p>
<p>Ended up having to EnumDesktopWindows, creating an array of window bounds, and walking through this array on every mouse move to figure out which rectangle to draw based on mouse location. &nbsp;It works, but I&#39;m wondering now if there was an easier solution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-885063">
				<div id="div-comment-885063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885063">
			December 30, 2010 at 7:14 am</a>		</div>

		<p>Now that I think about it, I might have used WindowFromPoint, and then used GetAncestor or a related API call when I realized it didn&#39;t just work on top level windows. &nbsp;I didn&#39;t know about ChildWindowFromPoint&#8230; anyways very useful compare and contrast of all the functions, thanks!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-885083">
				<div id="div-comment-885083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Guest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885083">
			December 30, 2010 at 7:35 am</a>		</div>

		<p>Wouldn&#39;t it be easier to have one function that parameterizes the type of search to conduct, and whether to include hidden, disabled, and transparent windows?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-885093">
				<div id="div-comment-885093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ArousedBoat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885093">
			December 30, 2010 at 7:50 am</a>		</div>

		<p>@Guest: Great idea. If only there was a table summarizing all the information so I could write one&#8230; Oh well&#8230; better get back to work on that time machine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-885133">
				<div id="div-comment-885133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885133">
			December 30, 2010 at 9:26 am</a>		</div>

		<p>The &quot;It&#39;s Complicated&quot; link is funny because the Facebook status is the first thing I thought about when I saw the heading in the table. The linked-to article is from May of 2009, yet is already out of date because it doesn&#39;t mention Widowed, Separated, or Divorced as options. I guess those would fall under either Single or It&#39;s Complicated back then.</p>
<p>Honestly, I didn&#39;t even realize those new options existed until I saw an old classmate&#39;s status set to Widowed one day. When I noticed that his profile picture had just changed to a newborn baby, it was probably the saddest thing I&#39;ve ever seen on Facebook.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-885143">
				<div id="div-comment-885143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Ganes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885143">
			December 30, 2010 at 9:28 am</a>		</div>

		<p>I&#39;ve never specifically used these functions, but I was surprised to read your explanation and find that my initial assumptions about the ChildWindowFromPoint function were exactly the opposite of what you describe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-885163">
				<div id="div-comment-885163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roastbeef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885163">
			December 30, 2010 at 9:54 am</a>		</div>

		<p>Now if this could only be included in MSDN&#8230;</p>
<div class="post">[<i>The information is already in MSDN. All I did was organize it into a table, because it seems there are some people who understand things better when they are placed in a table. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-885183">
				<div id="div-comment-885183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885183">
			December 30, 2010 at 11:48 am</a>		</div>

		<p>&quot;The WindowFromPoint function looks for the most heavily nested window that contains the point, which is window C. On the other hand ChildWindowFromPoint function looks for the least nested window that contains the point, which is window P&quot;</p>
<p>Huh? &nbsp;So, the function with the name &quot;Child&quot; in it retrieves the parent window P, and the function without the name &quot;Child&quot; in it retrieves the child window C?</p>
<p>Surely that&#39;s not correct.</p>
<div class="post">[<em>You conveniently deleted the part of the sentence that clears up your confusion.-Raymond]</em></div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-885193">
				<div id="div-comment-885193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Muller</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885193">
			December 30, 2010 at 12:44 pm</a>		</div>

		<p>The child function (if I recall correctly) has a parameter for specifying the parent window, while the basic version does not. Looking at the full signatures makes it more obvious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-885203">
				<div id="div-comment-885203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885203">
			December 30, 2010 at 1:54 pm</a>		</div>

		<p>&quot;The information is already in MSDN. All I did was organize it into a table,..&quot;</p>
<p>Well, here&#39;s what the MSDN library has to say about WindowFromPoint:</p>
<p>~~~</p>
<p>The return value is a handle to the window that contains the point. If no window exists at the given point, the return value is NULL. If the point is over a static text control, the return value is a handle to the window under the static text control.</p>
<p>The WindowFromPoint function does not retrieve a handle to a hidden or disabled window, even if the point is within the window. An application should use the ChildWindowFromPoint function for a nonrestrictive search. </p>
<p>~~~</p>
<p>While it coincides with what you said about disabled and hidden windows, it has nothing about HTTRANSPARENT or different processes.</p>
<div class="post">[<i>Okay, the HTTRANSPARENT part isn&#39;t there. But I didn&#39;t think that&#39;s what the person was complaining about. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-885253">
				<div id="div-comment-885253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Timothy Byrd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885253">
			December 30, 2010 at 3:13 pm</a>		</div>

		<p>I, too, glossed over the &quot;assuming you passed GetDesktopWindow as the starting point&quot; &#8211; and it made my brain hurt.</p>
<p>Thanks for writing this up, Raymond &#8211; and happy new year to you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-885273">
				<div id="div-comment-885273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roastbeef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885273">
			December 30, 2010 at 3:44 pm</a>		</div>

		<p>I wasn&#39;t complaining so much as wishing that, in general, MSDN would apply that little extra bit of effort (like the table) that makes these things much easier to understand.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-885283">
				<div id="div-comment-885283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885283">
			December 30, 2010 at 3:57 pm</a>		</div>

		<p>@Roastbeef</p>
<p>The problem is, the MSDN is just a documentation source for each individual function. So usually the MSDN would just describe each function and not make a comparison to another one unless there was a good reason.</p>
<p>I suppose they could add a new page to the about windowing or using windowing section which lists the differences, but the individual functions explain precisely how each function works so the information is already there to start with. So this added section would not provide anything which isn&#39;t already in the documentation.</p>
<p>One of the tough parts about the MSDN is getting the information you want/need out of the mountain of information it gives you. That can be tough at times.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-885293">
				<div id="div-comment-885293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">.dan.g.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885293">
			December 30, 2010 at 4:13 pm</a>		</div>

		<p>@pete.d</p>
<p>I too was instantly confused reading the explanation and I&#39;m not entirely sure that the &#39;missing&#39; part of the sentence actually clarifies things.</p>
<div class="post">[<i>Rename the windows. Desktop = P, top-level window = C1, child window = C2. Does it make more sense now? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-885123">
				<div id="div-comment-885123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885123">
			December 30, 2010 at 9:23 am</a>		</div>

		<p>@Guest: Sure, but since Microsoft can&#39;t erase the old functions for compatibility reasons, you&#39;d just be adding *yet another* point of confusion to the process of picking a function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-885313">
				<div id="div-comment-885313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885313">
			December 30, 2010 at 11:16 pm</a>		</div>

		<p>&quot;Rename the windows. Desktop = P, top-level window = C1, child window = C2. Does it make more sense now?&quot;</p>
<p>I suppose. If I now understand correctly, the &quot;Child&hellip;&quot; function returns the _immediate_ qualifying child. The non-&quot;Child&hellip;&quot; function also return a child window, but searches for the qualifying child farthest from the root of the window-ownership tree.</p>
<p>In other words, both functions actually could have been named &quot;&lt;Something&gt;ChildWindowFromPoint&quot;. Like, &quot;ImmediateChildWindowFromPoint&quot; and &quot;FurthestRemovedChildWindowFromPoint&quot;. &nbsp;Granted, those names are a bit wordy. &nbsp;:) &nbsp;But they would have had better mnemonic value.</p>
<div class="post">[<i>Right. Deep vs. shallow. At some point you have to give up trying to encode all semantic information in the function name and assume people will actually read the documentation. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-885323">
				<div id="div-comment-885323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885323">
			December 31, 2010 at 1:06 am</a>		</div>

		<p>Hrm.</p>
<p>If we make a simplifying assumption that child windows are smaller (or equal in size to) the parent window, WindowFromPoint returns the smallest window that contains the point. ChildWindowFromPoint takes in a parent window, and returns the largest child window OF THAT PARENT that encloses the point. In WFP, if the point ends up on the desktop window, it returns NULL. In CWFP, if the point is outside of the passed parent window OR the parent window, it returns NULL.</p>
<p>Basically, WFP gives you the window handle of what&#39;s there under the mouse. CWFP returns the immediate child of the passed in window that contains the point in question &#8211; here, &quot;child&quot; refers to the fact that it returns an immediate child of the parent window ONLY, and not grand children or great-grand-children or deeper.</p>
<p>So if we created windows like:</p>
<p>Desktop (always there)</p>
<p>WindowMyApp (main app window)</p>
<p>DialogMyApp (a dialog your app created)</p>
<p>ButtonMyApp (a button in the dialog of your app)</p>
<p>and click within ButtonMyApp, WFP will return ButtonMyApp. CWFP will return any, depending on the window handle passed in. If you passed in GetDesktopWindow(), you will get WindowMyApp. If you passed in WindowMyApp, you get DialogMyApp. If you passed in DialogMyApp, you get back ButtonMyApp.</p>
<p>Whew. I think that will clarify what &quot;child&quot; means.</p>
<div class="post">[<i>Well, mostly correct. Child windows can be larger than parents (they will be clipped); your simplification fails to handle the case where the point is outside any children but is inside the parent; and in your sample window hierarchy, the dialog box is not a child window; it&#39;s an owned window. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-885333">
				<div id="div-comment-885333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885333">
			December 31, 2010 at 2:35 am</a>		</div>

		<p>I remember having the same problem as Dan, but comments will probably close before I manage to find my source code to see how I ended up doing it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-885443">
				<div id="div-comment-885443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-885443">
			December 31, 2010 at 9:44 am</a>		</div>

		<p>2 Raymond</p>
<p>[quote]On the other hand, WindowFromPoint defines transparent as returns HTTRANSPARENT in response to WM_NCHITTEST. Actually, that&#39;s still not true. If the window belongs to a process different from the one calling WindowFromPoint, then WindowFromPoint will not send the message and will simply treat the window as opaque (i.e., not transparent).[/quote]</p>
<p>Raymond, it is not necessarily &#8211; &quot;PROCESS different from the one calling WindowFromPoint&quot;. </p>
<p>Just &#8211; different THREAD.</p>
<p>Here is my old little demo just on the topic &quot;&#8230;WindowFromPoint&#8230;&quot;: </p>
<p><a target="_new" href="http://www.wasm.ru/forum/attachment.php?item=3361" rel="nofollow">http://www.wasm.ru/&#8230;/attachment.php</a> (wndfrompt.rar).</p>
<div class="post">[<i>I stand corrected. Thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-886313">
				<div id="div-comment-886313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-886313">
			January 5, 2011 at 7:38 am</a>		</div>

		<p>So, it turns out I ended up rolling my own loop that recursed through the visible children finding the most deeply nested child that contained the point, but, unless nothing else was available, excluding child windows without the clip siblings style, presumably to ignore group boxes, since they preceded their groups in the window order.</p>
<p>And yes, the code is as unreadable as the above sentence.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-886323">
				<div id="div-comment-886323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101230-00/?p=11873#comment-886323">
			January 5, 2011 at 7:43 am</a>		</div>

		<p>Oh, and the reason I didn&#39;t have to worry about my overlay window because this was Windows 3.0 and you could do silly stuff such as setting the capture to an invisible window and drawing on the desktop&#39;s window DC (as opposed to the desktop window&#39;s DC, of course).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>