<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-402883">
				<div id="div-comment-402883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Dodd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-402883">
			July 22, 2006 at 4:48 pm</a>		</div>

		<p>Well, no one else has commented so I&#8217;ll start. Thanks for this article. And for all the others so far in the DLL series. I thought I knew a lot about DLLs but found that I didn&#8217;t know as much as I thought. I was especially interested in this article because I&#8217;ve been attempting to extend our compiler that we use for our embedded language in our line of battery-powered data loggers. Up to this point, we&#8217;ve limited ourselves to allowing customers just one source file and we&#8217;ve embedded the &quot;library&quot; of functions they can call in the device itself. I was thinking that we should only load the functions the customer needs for the program and also allow customers to create their own libraries of functions in mutilple files. While there are lots of books and classes on compilers, I&#8217;m having trouble finding good sources for writing a linker. Ours would be very primitive and you&#8217;ve helped me see a direction to take. Keep up the great blogging, Raymond. And, as I write this, it looks like Floyd Landis has wrapped up the Tour &#8211; almost.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402903">
				<div id="div-comment-402903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-402903">
			July 23, 2006 at 12:42 am</a>		</div>

		<p>I don&#8217;t understand. Does that mean that direct JMP or CALL instruction DOES NOT cause queue reload? Where is the next instruction loaded from then?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402913">
				<div id="div-comment-402913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pagetable.com/' rel='external nofollow' class='url'>Myria</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-402913">
			July 23, 2006 at 12:59 am</a>		</div>

		<p>Yes. &nbsp;The processor knows the target of the jump long before it gets there, so it automatically preloads the instructions at the target of the jump.</p>
<p>It&#8217;s the same way branch prediction works, except that it knows for sure that the branch will occur.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402893">
				<div id="div-comment-402893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pagetable.com/' rel='external nofollow' class='url'>Myria</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-402893">
			July 22, 2006 at 8:00 pm</a>		</div>

		<p>When PE was designed, this way was the best way to implement it. &nbsp;__declspec(dllimport) makes the compiler do the indirection where possible, and the thunks handle where it isn&#8217;t possible.</p>
<p>The problem is that times have changed. &nbsp;An indirect call is extremely slow on modern processors, because it causes a full instruction queue reload. &nbsp;(Keep that in mind next time you are deciding whether you need virtual functions.)</p>
<p>The way that things should have been done is to use the existing trampoline stubs, except make ntdll&#8217;s Ldr* stuff modify the jmp&#8217;s themselves instead of simply an import table. &nbsp;Then the code becomes &quot;call near thunk_SendMessageW&quot;. &nbsp;At thunk_SendMessageW is &quot;jmp near SendMessageW&quot;. &nbsp;The PE loader would modify the bytes after the E9 to point to the correct address. &nbsp;For security, Ldr* would mark this region as PAGE_EXECUTE_READ after it&#8217;s done modifying.</p>
<p>This is highly specific to x86-32, because x86-64 and PowerPC can&#8217;t do a direct jump to anywhere in the address space. &nbsp;I don&#8217;t know IA64 so I have no idea with that one.</p>
<p>It&#8217;s too late to have this at the ntdll level, but such a system could be implemented with a combination of compiler, linker, and crt0 code. &nbsp;Or ntdll&#8217;s Ldr* could have a new option for that kind of import table, and crt0 could do it itself if ntdll didn&#8217;t support it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402923">
				<div id="div-comment-402923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yosi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-402923">
			July 23, 2006 at 3:01 am</a>		</div>

		<p>Indirect jump doesn&#8217;t flush instruction pipe. Where did you hear that nonsense? It will initiate write-back fifo access (or cache access) to bring target address, but this have nothing to do with instruction queue.<br />
<br />Actuall, the queue will get stalled in case of cache miss, since main memory access time is very slow compared to core clock speed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402933">
				<div id="div-comment-402933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eggman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-402933">
			July 23, 2006 at 8:25 am</a>		</div>

		<p>Yosi is right, on all x86es since at least the pentium 1 indirect branches like the ones discussed here are predicted to go to the same address as last time. Pentium M and newer CPUs (Core) have a more sophisticated mechanism for indirect calls (in order to handle virtual calls that go to different addresses different time), but that would go unused here.</p>
<p>And as a side note, since there seems to be some confusion here too, jmp bcc call etc are all branch predicted, so even a jmp is a &quot;prediction&quot; even though it always jumps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-402963">
				<div id="div-comment-402963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-402963">
			July 24, 2006 at 12:10 am</a>		</div>

		<p>It would be pretty silly of processor-designers to NOT optimize their CPUs for some of the most common cases &#8211; virtual functions and DLL-calls.</p>
<p>Optimization (at this level, at least) is a two-way street &#8212; software designers optmize their code for the CPU and hardware designers optimize the CPU for whatever code executes on them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402983">
				<div id="div-comment-402983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shyguy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-402983">
			July 24, 2006 at 6:23 am</a>		</div>

		<blockquote><p>
  &gt; (Keep that in mind next time you are deciding whether you need virtual functions.)</p>
<p>Wrong way.<br />
  <br />Keep that in mind next time you&#8217;re profiling an already working application which is performing too slow.<br />
  <br />Breaking good design because &quot;in some future it might be slow&quot; is the wrong way around; you will end avoiding virtuals at all, when less than 1% of virtual calls will impact performance in some serious way.</p>
<p>
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402993">
				<div id="div-comment-402993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-402993">
			July 24, 2006 at 8:34 am</a>		</div>

		<p>Dean: But &quot;virtual functions&quot; and &quot;DLL calls&quot; are *not* something the processor designers can optimize for. &nbsp;Those are several levels of abstraction above the processor. &nbsp;The code to actually do them is generated by the C++ compiler and library loader, respectively; the choices that Microsoft&#8217;s C++ compiler and library loader made are not the only possible choices.</p>
<p>(Nitpicky? &nbsp;Well, yes; why do you ask? &nbsp;:-P)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403103">
				<div id="div-comment-403103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-403103">
			July 25, 2006 at 3:34 am</a>		</div>

		<p>BryanK: &#8220;But &#8220;virtual functions&#8221; and &#8220;DLL calls&#8221; are *not* something the processor designers can optimize for.&#8221;</p>
<p>er, Why not? In software, we optimise first, by profiling, to get an idea of where the software might benefit from optimization.</p>
<p>I&#8217;m not too sure that hardware engineers aren&#8217;t under similar economic constraints to spend their time efficiently.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403323">
				<div id="div-comment-403323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-403323">
			July 25, 2006 at 12:59 pm</a>		</div>

		<p>I am probably stupid or something, but considering instructions like</p>
<p>jmp/call $addr<br />
<br />jmp/call $[addr]</p>
<p>Do you think CPU even bother to *predict* such jump?<br />
<br />Is call [$addr] *significantly* slower than call $addr, when *both* addr var itself and destination it points to are outside cached memory?</p>
<p>Yes, it will be slower due to extra read will take place, but I doubt it is like 10 times slower or something</p>
<p>I think it is all about what &quot;significantly&quot; means in this case&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403983">
				<div id="div-comment-403983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">difference</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-403983">
			July 27, 2006 at 1:19 pm</a>		</div>

		<p>Is dll-calls always slower than ordinary calls inside a binary?</p>
<div class=post>[<i>That question is too vague to be answerable. I can invent some really inefficient intra-binary calling conventions. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-404033">
				<div id="div-comment-404033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">difference</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-404033">
			July 27, 2006 at 2:11 pm</a>		</div>

		<blockquote><p>
  &gt; Is dll-calls always slower than ordinary calls inside a binary? </p>
<p>&gt; [That question is too vague to be answerable. I can invent some really inefficient intra-binary calling conventions. -Raymond]</p>
<p>I&#8217;m assumed using VS and other common Windows &#8220;standards&#8221;. Without constructing your own calling convention. </p>
<p>Another question: How possible would it be for the linker to embed a dll (it&#8217;s code &amp; data) into and exe (and calling it as an lib) to gain performance?</p>
<div CLASS=post>[<i>It still depends on what compiler and linker flags you used. If you have a suggestion for a future topic, use the suggestion box. -Raymond</i>]</div>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-502503">
				<div id="div-comment-502503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.csdn.net/wishfly/archive/2007/05/10/1602571.aspx' rel='external nofollow' class='url'>wishfly</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433#comment-502503">
			May 9, 2007 at 8:40 pm</a>		</div>

		<p>透过汇编另眼看世界之DLL导出函数调用</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>