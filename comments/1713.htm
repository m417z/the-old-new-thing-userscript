<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1107893">
				<div id="div-comment-1107893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1107893">
			February 19, 2014 at 7:10 am</a>		</div>

		<p>Is there a fixed version of this control that doesn&#39;t require the calling code to free the secret copy somewhere?</p>
<div class="post">[<em>How do you fix this without introducing a double-free bug in code written to the old model? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1107913">
				<div id="div-comment-1107913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">OneDeveloper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1107913">
			February 19, 2014 at 7:35 am</a>		</div>

		<p>Keep the apology, send fixed binaries.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1107933">
				<div id="div-comment-1107933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sally</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1107933">
			February 19, 2014 at 8:01 am</a>		</div>

		<p>Raymond, does any of this apply to STM_SETICON? (You only mention STM_SETIMAGE.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1107943">
				<div id="div-comment-1107943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1107943">
			February 19, 2014 at 8:14 am</a>		</div>

		<p>[How do you fix this without introducing a double-free bug in code written to the old model? -Raymond]</p>
<p>Class STATIC2?</p>
<div class="post">[<em>We tried that before. <a href="http://blogs.msdn.com/b/oldnewthing/archive/2008/01/30/7294949.aspx">It didn&#39;t work</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1107973">
				<div id="div-comment-1107973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1107973">
			February 19, 2014 at 8:45 am</a>		</div>

		<p>That really sucks. Like those dynamic libraries that insist on you personally deallocating TLS before a thread exits.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1107983">
				<div id="div-comment-1107983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1107983">
			February 19, 2014 at 9:01 am</a>		</div>

		<p>Thanks Raymond, it&#39;s great to have a confirmation that this is indeed how it works because even though we figured this out ourselves (or at least I think I think we did&#8230; I&#39;ll need to review the code <a href="https://github.com/wxWidgets/wxWidgets/blob/master/src/msw/statbmp.cpp#L297" rel="nofollow" target="_new">github.com/&#8230;/statbmp.cpp</a> in light of this post), I just couldn&#39;t believe this behaviour could have been intentional. I hope it&#39;s at least not going to change in the future versions if it is.</p>
<div class="post">[<em>I added a recommendation at the end of the article to detect whether &quot;secret copying&quot; occurred. Hopefully that will be a bit more future-proof in case the behavior changes. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1107993">
				<div id="div-comment-1107993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1107993">
			February 19, 2014 at 9:25 am</a>		</div>

		<p>[We tried that before. It didn&#39;t work. -Raymond]</p>
<p>This should work for exactly the same reason it didn&#39;t work in the other article. True, the shell won&#39;t be able to use it, but just about everybody else can. There&#39;s little point for accessibility software looking for image controls anyway.</p>
<div class="post">[<em>It&#39;s not accessibility software. It&#39;s random apps that snoop around trying to mess with other windows. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1108003">
				<div id="div-comment-1108003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108003">
			February 19, 2014 at 9:41 am</a>		</div>

		<p>[It&#39;s random apps that snoop around trying to mess with other windows. -Raymond]</p>
<p>We may not know what windows they mess with, but we know which ones they don&#39;t: any application or dialog box not yet written.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1108013">
				<div id="div-comment-1108013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108013">
			February 19, 2014 at 9:45 am</a>		</div>

		<p>Hmm, &nbsp;I think that MSDN documentation needs updating. &nbsp;It states that in version 6 of the common controls a copy is never made (i.e. calling STM_SETIMAGE always returns the handle from the previous call).</p>
<p>Of course, in the next paragraph it talks about XP might make copy.</p>
<p>In the end it seems like the easiest behavior (for consumers of the control) would be to treat the copy as an implementation detail. &nbsp;STM_GETIMAGE and STM_SETIMAGE would return the original bitmap handle. &nbsp;The copy would always get freed on the next STM_SETIMAGE call or when the window was destroyed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm odd alt thread-odd thread-alt depth-1" id="comment-1108043">
				<div id="div-comment-1108043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108043">
			February 19, 2014 at 10:48 am</a>		</div>

		<p>&quot;In the end it seems like the easiest behavior (for consumers of the control) would be to treat the copy as an implementation detail. &nbsp;STM_GETIMAGE and STM_SETIMAGE would return the original bitmap handle. &nbsp;The copy would always get freed on the next STM_SETIMAGE call or when the window was destroyed.&quot;</p>
<p>That would result in a memory leak if you passed in one of those bitmaps that results in a secret copy. &nbsp;You need to do a GETIMAGE immediately after SETIMAGE, and if the handle is different, it made a copy, so delete the one you sent in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1108073">
				<div id="div-comment-1108073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JonPotter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108073">
			February 19, 2014 at 11:26 am</a>		</div>

		<p>So if you pass in an image with an alpha channel, the control pre-multiplies the alpha? (presuming that&#39;s the &quot;munging&quot; you refer to)?</p>
<p>What if you had jumped to the logical conclusion that the bitmap you pass in should already be pre-multiplied? All of the Win32 Alpha functions expect pre-multiplied bitmaps, why is the static control the only thing that doesn&#39;t?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1108083">
				<div id="div-comment-1108083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108083">
			February 19, 2014 at 11:33 am</a>		</div>

		<p>I agree with SimonRev &#8212; The handle to the secret image should never be returned from the control. &nbsp;Internally it should hold 2 handles, the one the application specified, and the &quot;secret copy&quot; that it&#39;s actually using to render with. &nbsp;The application is responsible for freeing it&#39;s image, and the control is responsible for freeing the secret copy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1108113">
				<div id="div-comment-1108113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wqw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108113">
			February 19, 2014 at 2:05 pm</a>		</div>

		<p>Is anything like this happening with BM_SETIMAGE for buttons?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1108143">
				<div id="div-comment-1108143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108143">
			February 19, 2014 at 4:23 pm</a>		</div>

		<p>As expected the MFC afxwin2.inl CStatic::SetBitmap method is just a simple wrapper around SendMessage, at least for VS2010. But I was kinda hoping there might be a SetBitmapS3krit that did the secret work inside. Oh well. <a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/8489301/possible-memory-leak-using-gethbitmap-and-mfc-cstaticsetbitmap">stackoverflow.com/&#8230;/possible-memory-leak-using-gethbitmap-and-mfc-cstaticsetbitmap</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1108153">
				<div id="div-comment-1108153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108153">
			February 19, 2014 at 6:55 pm</a>		</div>

		<p>@Joshua: you&#39;re saying that if app B was written after app A, then app A can&#39;t mess with app B&#39;s windows? &nbsp;I don&#39;t see what would stop it. &nbsp;You don&#39;t have to know any of the class names or whatnot ahead of time, you can just recusively enumerate the windows looking for interesting stuff.</p>
<p>(For example, I have a simple-minded automation app that searches for a window containing a given piece of text, assumes it&#39;s a pushbutton, and sends BM_CLICK. &nbsp;OK, that particular case is Mostly Harmless, but in principle I could have been trying to do something more dangerous.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1108163">
				<div id="div-comment-1108163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108163">
			February 19, 2014 at 7:01 pm</a>		</div>

		<p>There&#39;s no mention of the history of this, so I&#39;m going to assume that the developer of the alpha handling code didn&#39;t realize that the original bitmap handle had to be returned. So he just went and did the easy thing of discarding the original bitmap and using the copy, with nobody noticing the leak until it was too late (i.e. the code had already reached ISVs).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1108093">
				<div id="div-comment-1108093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leo Davidson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108093">
			February 19, 2014 at 11:38 am</a>		</div>

		<p>[How do you fix this without introducing a double-free bug in code written to the old model? -Raymond]</p>
<p>If we can assume code which is even aware of the secret copy would always compare it to the passed-in bitmap to see if it was different and needed freeing as well, then it&#39;s trivial to fix the control.</p>
<p>If it needs to make a secret copy, it can store that internally (and knows it always has to free it; it never has to return it to anything else so nothing else could ever see or free it). If something asks for the image, the control can return the original handle, which it also keeps a copy of.</p>
<p>To the outside world, the rules about when the secret copy made become &quot;never&quot;, and the problem goes away. From what a previous commenter said about MSDN, it sounds like this is what already happened with version 6 of the common controls, unless MSDN or the comment are incorrect.</p>
<p>Of course, there could be code out there which assumes the secret copy will *always* be made (maybe because they always pass an image meeting the magic criteria) so they always free the passed-in bitmap and the one the control returns, without checking they&#39;re the same. That code seems bad, since the criteria are arcane and could change (and from what a previous poster says, the criteria *have* changed according to MSDN) but maybe it is out there, I don&#39;t know.</p>
<div class="post">[<em>You presume a level of forward-thinking that I think is not supported by evidence. (See: application compatibility.) I suspect a lot of applications, when they discover this problem, just blindly call DeleteObject to delete the bitmap that was previously leaking. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1108133">
				<div id="div-comment-1108133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">immibis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108133">
			February 19, 2014 at 2:44 pm</a>		</div>

		<p>[We tried that before. It didn&#39;t work. -Raymond]</p>
<p>That article only seems to apply to existing programs that need to remain compatible with everything. Is there a reason for *new* programs to not use STATIC2? Everything in Windows stays compatible. Maybe some accessibility software doesn&#39;t understand STATIC2, but that shouldn&#39;t be Microsoft&#39;s problem. (And if enough programs start using STATIC2, anyone who needs that accessibility software will have to migrate to a version that actually works)</p>
<div class="post">[<em>Even new code needs to worry about this. Suppose you use a UI framework that uses global superclassing, or which uses hooks to trap all window creations so it can customize them. If you change the class name, the framework will not realize that STATIC2 should be treated the same as STATIC. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1108183">
				<div id="div-comment-1108183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108183">
			February 20, 2014 at 5:27 am</a>		</div>

		<p>So, there are two parts to this post.</p>
<p>The first one can be simplified if you think of that control as two separate components: the control itself and a &quot;initial image owner&quot; which set the initial static image (and owns it). This simplifies the problem to &quot;whoever set the image owns it&quot; and &quot;the initial image was set by magic Microsoft code, which owns it&quot; (and will delete it when appropriate).</p>
<p>The second one is much more confusing, but I think it can be simplified to &quot;whenever you set the image, do a get to it; you own the returned handle too, just be careful because it might be the same you set&quot; (inverting the thinking here: behave as if returning the same handle is the special case).</p>
<p>Am I right with these simplifications?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1108373">
				<div id="div-comment-1108373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">immibis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108373">
			February 20, 2014 at 8:25 pm</a>		</div>

		<p>[Even new code needs to worry about this. Suppose you use a UI framework that uses global superclassing, or which uses hooks to trap all window creations so it can customize them. If you change the class name, the framework will not realize that STATIC2 should be treated the same as STATIC. -Raymond]</p>
<p>What kind of problems could this cause? Has it been tried? It&#39;s clear that the new STATIC2 windows would not have some of the added functionality (that the framework adds to STATIC windows) but this will happen right from the start, and the programmer has a choice between STATIC and STATIC2, with clear tradeoffs. (STATIC2 = easier programming; STATIC = works better with the UI framework they are using)</p>
<div class="post">[<em>&quot;Stupid Microsoft. Why did they have to change the class name? Now I have to completely redesign my program because I can&#39;t use my framework any more.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1108383">
				<div id="div-comment-1108383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jonwil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108383">
			February 20, 2014 at 9:53 pm</a>		</div>

		<p>If the code had been written as suggested in the first place (treat the &quot;secret copy&quot; as an implementation detail, return the original handle from STM_GETIMAGE, delete the copy if there is a STM_SETIMAGE and also delete the copy when the control is destroyed, there would have been no issues with leaks and no need for this special behavior.</p>
<p>Obviously the behavior cant change now because of backwards compatibility for that&#39;s how it should have been done.</p>
<div class="post">[<em>Not sure what you&#39;re getting at. &quot;If the code had been written without this problem, then it wouldn&#39;t have this problem.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1108513">
				<div id="div-comment-1108513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108513">
			February 21, 2014 at 7:46 am</a>		</div>

		<p>Raymond, if a &quot;secret copy&quot; is made, does the control still depend on the source image, or can it be deleted right away?</p>
<p>As in, &quot;Set the image, get the image, if they&#39;re different (and you don&#39;t need the base one for something else) delete the base one and keep the copy.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1108643">
				<div id="div-comment-1108643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108643">
			February 21, 2014 at 10:06 am</a>		</div>

		<p>[&quot;Stupid Microsoft. Why did they have to change the class name? Now I have to completely redesign my program because I can&#39;t use my framework any more.&quot; -Raymond]</p>
<p>[No matter what you do, somebody will call you an idiot. &#8211; Raymond] (blog post title)</p>
<p>Chunk merge fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1108763">
				<div id="div-comment-1108763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">immibis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108763">
			February 21, 2014 at 7:05 pm</a>		</div>

		<p>&gt; [&quot;Stupid Microsoft. Why did they have to change the class name? Now I have to completely redesign my program because I can&#39;t use my framework any more.&quot; -Raymond]</p>
<p>You can continue using your framework exactly as you did before, or you can switch. Nothing is worse than before. Some things are better.</p>
<div class="post">[<em>Tell that to everybody complaining that they can&#39;t use WinRT from desktop applications. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1108963">
				<div id="div-comment-1108963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140219-00/?p=1713#comment-1108963">
			February 24, 2014 at 5:33 am</a>		</div>

		<p>Raymond,</p>
<p>It looks like your posting software is messed up. &nbsp;This April 1st post got into the February queue. &nbsp;Good one, though. &nbsp;You almost got me&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>