<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1331085">
				<div id="div-comment-1331085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331085">
			March 28, 2018 at 7:38 am</a>		</div>

		<p>I&#8217;m no expert in C++, and most of its runtime library is uncharted territory to me. But when I read the code, it was evident it was a type mismatch: they were taking an struct and copying it into an object. Of course, that object contains a copy of the struct as a member. If you are lucky (or not?), it will be the first member, and all will go well. But you are relying in an implementation detail that can change in the future.</p>
<p>It seems that the atomic contains just an integer-sized lock and the target struct, so you could obtain a pointer to the struct with some pointer arithmetic. But it definitely would be a terrible idea. Not only can the implementation details change in future versions of the runtime. Also, accessing directly to an atomic&#8217;s contents does defeat it sole purpose: warrantying atomic operations.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-kapilkapre odd alt depth-2 parent" id="comment-1331155">
				<div id="div-comment-1331155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/%27k' rel='external nofollow' class='url'>'k</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331155">
			March 28, 2018 at 11:09 am</a>		</div>

		<p>I suppose the hope was that atomic is simply C++ language markup for the compiler to do some special joo joo by using atomic instructions while keeping the memory layout the same.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1331255">
				<div id="div-comment-1331255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331255">
			March 28, 2018 at 9:08 pm</a>		</div>

		<p>It&#8217;s presumably a case of starting off with a plain Point3D, getting everything working, and then discovering weird multithreaded behaviour. Then when they decided they need to use std::atomic, they didn&#8217;t realise that the way they used it would have to change in some places &#8211; as you said, probably because they thought of std::atomic as &#8220;tell the compiler to make all access to this variable atomic&#8221; and didn&#8217;t think about the technicalities. And while I&#8217;m no C++ expert, one thing I have picked up is that the technicalities will always come back to bite you.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1331275">
				<div id="div-comment-1331275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331275">
			March 29, 2018 at 3:21 am</a>		</div>

		<p>Well, they were reading into an object but not using its size, so that should have been a red flag already.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1331095">
				<div id="div-comment-1331095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331095">
			March 28, 2018 at 8:09 am</a>		</div>

		<p>I don&#8217;t understand how anyone who would need an atomic type could think something like that would work.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1331135">
				<div id="div-comment-1331135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331135">
			March 28, 2018 at 10:12 am</a>		</div>

		<p>This is the &#8220;wave a magic wand over the problem&#8221; school of thought.  Whoever wrote that code didn&#8217;t think about what std::atomic actually means or how it might be implemented.  Instead, they simply think of it as a black box that &#8220;magically fixes all of my threading bugs.&#8221;</p>
<p>(This is, of course, complete hogwash: you can easily have threading bugs even if everything is atomic, because threading bugs arise from faulty assumptions about the sequencing of operations.  std::atomic makes things easier to reason about, but it does not eliminate the need to think.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1331145">
				<div id="div-comment-1331145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331145">
			March 28, 2018 at 10:41 am</a>		</div>

		<p>Yeah.  That had me scratching my head too.  Even if you could get the correct target address, the read operation would not be atomic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1331165">
				<div id="div-comment-1331165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331165">
			March 28, 2018 at 11:53 am</a>		</div>

		<p>Because it <u>does</u> work (for certain values of &#8220;work&#8221;) sometimes. If this were a Point2D instead of a Point3D, there&#8217;s a good chance it would have &#8220;worked&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1331195">
				<div id="div-comment-1331195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331195">
			March 28, 2018 at 2:31 pm</a>		</div>

		<p>It isn&#8217;t really a std::atomic problem as such.  It&#8217;s an even lower level failure to understand the rules of the C++ memory model.<br />
The target variable in ReadFile() is an LPVOID, which should be easy enough for any MS C++ programmer to understand.  All you can expect to get out of this is a pointer/reference to a contiguous chunk of memory that (hopefully, error result permitting) has the same size in bytes that you requested.  It&#8217;s up to you to figure out what those (in this case) twelve bytes mean, because ReadFile() has no possible way of even giving you a hint.  The fact that the requested size is &#8220;sizeof(Point3D)&#8221; rather than &#8220;sizeof(placeholder for std::atomic)&#8221; should advert the caller to an obvious container mismatch.<br />
You could actually pick any other STL container and attempt to apply this &#8220;trick,&#8221; and the result would be equally as useless.  Effectively you are implicitly casting between two separate types via a void pointer, and any C++ programmer who thinks this is a good idea &#8230; should not be programming in C++.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1331245">
				<div id="div-comment-1331245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331245">
			March 28, 2018 at 9:08 pm</a>		</div>

		<p>I think <a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331155">&#8216;k was right </a>: They probably thought that <code>atomc&lt;T&gt;</code> is physically the same as <code>T</code>; the atomicity was believed to be entirely encapsulated in the algorithm (e.g., &#8220;interlocked operations everywhere!&#8221;), with no additional data needed.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1331225">
				<div id="div-comment-1331225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331225">
			March 28, 2018 at 7:26 pm</a>		</div>

		<p>I think we are going to guarantee that it does work as long as atomic::is_always_lock_free in a future release but we don&#8217;t do that right now. (We want atomic to be in the &#8220;ABI stabilized&#8221; domain as quickly as we can)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1331215">
				<div id="div-comment-1331215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331215">
			March 28, 2018 at 7:25 pm</a>		</div>

		<p>Note that sizeof(atomic&lt;T&gt;) can be surprising in relation to sizeof(T). For example, in our implementation, if you put a 3 byte struct into an atomic we don&#8217;t round up, we go &#8220;that&#8217;s not one of the sizes we recognize&#8221; and add our lock, making sizeof(atomic&lt;bytes&gt;) == 8.</p>
<p>We fixed that bug in the next ABI-breaking release of the Visual C++ libraries but the date we get to ship that seems to only always get further away :/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1331265">
				<div id="div-comment-1331265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ismo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331265">
			March 28, 2018 at 9:24 pm</a>		</div>

		<p>The ReadFile can never operate on something which is more complex than pod (plain old data). I&#8217;ve seen memset(*this,0) stl code and it really crashes wierd ways. C++ is powerfull tool, it lets you to shoot your feet if not handled properly.<br />
I doubt that nobody reading Raymond&#8217;s blog would make that mistake.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1331305">
				<div id="div-comment-1331305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331305">
			March 29, 2018 at 8:03 am</a>		</div>

		<p>Hehe, that developer needs to eat some more humble pie. *If* there was a bug in ReadFile as easily exposed as this, that means millions of programs on &gt;1 billion devices are affected. So the outcry should be enormous. If you only hear *crickets* that *probably* means your own code is at fault. When in doubt blame yourself!</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1331405">
				<div id="div-comment-1331405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331405">
			March 29, 2018 at 5:59 pm</a>		</div>

		<p>On the other hand I found a real bug in System.Data.SqlClient that was otherwise unknown for two years. If you express a preference for isolation levels on some open connections, ones that you didn&#8217;t do so end up with a random isolation level due to a dirty pool.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1331975">
				<div id="div-comment-1331975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phont Madders</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331975">
			April 3, 2018 at 5:08 pm</a>		</div>

		<p>&#8220;Code in italics is wrong.&#8221;<br />
That&#8217;s why I only code in boldface.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>