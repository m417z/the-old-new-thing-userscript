<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1106623">
				<div id="div-comment-1106623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1106623">
			February 14, 2014 at 7:04 am</a>		</div>

		<p>And here I was going to blame the code for asking for five bajillion gigabytes of memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1106653">
				<div id="div-comment-1106653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Chaldecott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1106653">
			February 14, 2014 at 7:34 am</a>		</div>

		<p>Yeah, we had that problem, once. </p>
<p>We were using the .Net Parallel.For() method to process a large (&gt; 4M) set of items, where the processing for each item was reasonably time consuming, such that the entire job took at least an hour. The processing was CPU bound. &nbsp;</p>
<p>Under those conditions the .Net thread pool kept adding more threads, until we had several hundred and ran out of address space and started getting OOM exceptions (actually, we usually got failures when trying to map views onto memory mapped files).</p>
<p>We used VMMap to diagnose the OOM problem, too. I was quite surprised to see &gt; 400MB under the &quot;Stack&quot; heading!</p>
<p>The simple fix was to restrict the maximum level of parallelism in the Parallel.For() call. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1106663">
				<div id="div-comment-1106663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1106663">
			February 14, 2014 at 7:42 am</a>		</div>

		<p>I would assume you&#39;d get back that 1MB reservation once the thread terminates and all handles to it are closed. Is there any time that assumption would be wrong?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1106673">
				<div id="div-comment-1106673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1106673">
			February 14, 2014 at 7:45 am</a>		</div>

		<p>@James: I think they fixed that basic problem with the thread pooling updates in Windows 8.1, but limiting the parallelism was probably a good idea too (perhaps to System.Environment.ProcessorCount or some derivative thereof).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1106683">
				<div id="div-comment-1106683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1106683">
			February 14, 2014 at 8:16 am</a>		</div>

		<p>@James: Bad thread pool. Under no circumstances when running a CPU bound job should there be more than 2x the number of threads than schedulable cores.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jader3rd odd alt thread-odd thread-alt depth-1" id="comment-1106693">
				<div id="div-comment-1106693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jader3rd' rel='external nofollow' class='url'>jader3rd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1106693">
			February 14, 2014 at 8:26 am</a>		</div>

		<p>@Joshua,</p>
<p>That&#39;s not a bad thread pool, that&#39;s bad use of the thread pool. The thread pool doesn&#39;t know if you&#39;ll be running a CPU bound job, or if you&#39;re requesting for a thread that&#39;ll sit around most of the time, just consuming memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1106763">
				<div id="div-comment-1106763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1106763">
			February 14, 2014 at 10:02 am</a>		</div>

		<p>So, next question would be: &quot;When a thread gets leaked?&quot;</p>
<p>1. When thread does not return</p>
<p>2. Thread returns, but its handle never closed.</p>
<p>etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-ludlow odd alt thread-odd thread-alt depth-1" id="comment-1106773">
				<div id="div-comment-1106773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Ludlow' rel='external nofollow' class='url'>John Ludlow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1106773">
			February 14, 2014 at 10:08 am</a>		</div>

		<p>One of the things I do at work is maintain our internal VS Addins. One developer ran over and reported an out of memory error in an addin that looks at files in your TFS pending changes list. I wondered if they had an unusually large list of files checked out, but that wasn&#39;t the case. In fact, they had plenty of free memory, and the devenv.exe process didn&#39;t seem to be using that much memory (determined using Process Explorer).</p>
<p>I asked them to use VMMap and sure enough, the process&#39; memory was totally fragmented. I asked them to restart Visual Studio, and that fixed the issue. Once again, the magical reboot comes to the rescue!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1106783">
				<div id="div-comment-1106783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1106783">
			February 14, 2014 at 10:12 am</a>		</div>

		<p>OK, I&#39;m missing something here. Can someone point me to a resource which explains how the leaked thread stack space can take up virtual address space without counting towards the virutal memory size of the process?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1106803">
				<div id="div-comment-1106803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1106803">
			February 14, 2014 at 10:35 am</a>		</div>

		<p>Karellen: Task Manager doesn&#39;t have a stat that reports the address space consumed by a process, just the working set, private working set, and commit size (which I think used to be called VM size in XP, and probably also what Raymond is referring to in the fourth bullet), all of which will be tiny for most threads, as Raymond notes. PerfMon / Process Explorer / VMMap / other tools are needed to see the address space consumed.</p>
<p>Gabe/AsmGuru: The thread just needs to actually exit for the address space to be freed (at least, the stack, other resources associated with the thread will linger). At least, that&#39;s the observable behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1106813">
				<div id="div-comment-1106813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1106813">
			February 14, 2014 at 10:50 am</a>		</div>

		<p>A thread&#39;s stack has to be a contiguous chunk of virtual address space, so the thread reserves a section of virtual address space. &nbsp;It doesn&#39;t commit memory (either physical or space in the page file) until it needs it.</p>
<p>According to another poster, the reservation is for 1 MB even though most threads use much less than that, and so committed memory is much smaller.</p>
<p> &nbsp;KC</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1107033">
				<div id="div-comment-1107033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Little Joke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1107033">
			February 15, 2014 at 8:28 pm</a>		</div>

		<p>&quot;but was looking for some pointers&quot;</p>
<p>I&#39;m surprised nobody commented on this (potential) little joke.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1107063">
				<div id="div-comment-1107063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1107063">
			February 16, 2014 at 5:36 pm</a>		</div>

		<p>@Little Joke: Why? I think it&#39;s polite way of asking question with expectation of reply just pointing to some reference materials, and no spoonfeeding is needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1107073">
				<div id="div-comment-1107073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140214-00/?p=1763#comment-1107073">
			February 16, 2014 at 10:23 pm</a>		</div>

		<p>@cheong00: Memory, Pointers, C(++), get it? Asking for &#39;pointers&#39; on a memory problem is potentially funny.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>