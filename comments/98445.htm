<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1 parent" id="comment-1332225">
				<div id="div-comment-1332225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332225">
			April 5, 2018 at 7:50 am</a>		</div>

		<p>At least this looks easier than on Alpha AXP.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-2 parent" id="comment-1332255">
				<div id="div-comment-1332255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332255">
			April 5, 2018 at 12:29 pm</a>		</div>

		<p>Given just how often constants are used in code you&#8217;d assume RISC ISAs would make loading them easier. I suppose you could have a constants page for each process/module that you just always keep loaded in a register. But that has cache issues, not to mention requiring an extra save/restore on any external function for a module.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1332265">
				<div id="div-comment-1332265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Justin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332265">
			April 5, 2018 at 1:31 pm</a>		</div>

		<p>How would you propose they do it?  With fixed length instructions it&#8217;s impossible to load a full word (or quad, for 64-bit archs) in a single instruction.  On PowerPC there are similar instructions to MIPS &#8212; addi/addis ori/oris which are used to load constants, and if there are a bunch of constants needed, the compiler will often generate a PC-relative load, using the construct:</p>
<p>  bl . + 4<br />
  mflr rN</p>
<p>  &#8230; load all constants via lwz or ld, relative to rN</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1332275">
				<div id="div-comment-1332275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332275">
			April 5, 2018 at 5:55 pm</a>		</div>

		<p>Most constants actually used in code are 16-bit or less, so they can be loaded in a single instruction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1332285">
				<div id="div-comment-1332285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332285">
			April 5, 2018 at 11:04 pm</a>		</div>

		<p>As Antonio says most constants fit into 16 bit (and the by far most used constant 0 is as easy to use as possible) and if you really need a larger constant in a function you can just put it before the code which means it will be almost guaranteed to be in the l2 cache (that&#8217;s how some compilers handle this for AArch64 in any case).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1332315">
				<div id="div-comment-1332315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332315">
			April 6, 2018 at 9:41 am</a>		</div>

		<p>&gt; I suppose you could have a constants page for each process/module that you just always keep loaded in a register.</p>
<p>The usual way of doing this on ARM at least (or the usual way before movt and movw instructions became available; movt (&#8220;mov top&#8221;) loads the upper 16 bits of a register from an imm16, and movw loads the lower 16 bits from an imm16) is to have constant pools after each function, or for huge functions, in the middle of one. You can load from a location within some distance of the current program counter. It&#8217;s sorta like your idea, except that you don&#8217;t need to burn a register to remember that page &#8212; you just use the program counter for that register.</p>
<p>(It does mean that you have non-executable data mixed in with your executable data, which could in theory have security implications. I suspect that&#8217;s not much of a concern in practice, but I can&#8217;t say that for sure.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1332385">
				<div id="div-comment-1332385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332385">
			April 6, 2018 at 7:53 pm</a>		</div>

		<p>&gt; It does mean that you have non-executable data mixed in with your executable data, which could in theory have security implications. I suspect that’s not much of a concern in practice, but I can’t say that for sure.</p>
<p>It would interfere with DEP, except that to the best of my knowledge, this architecture never had DEP in the first place.  If you really had to do this on a DEP-aware system and architecture, you could probably leave the page marked executable, and presumably unmarked as writable (These are constants, right? Did you trick FORTRAN 77 into changing the value of 3 or something?).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1332445">
				<div id="div-comment-1332445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332445">
			April 8, 2018 at 11:20 am</a>		</div>

		<p>While the API offers a difference between PAGE_EXECUTE and PAGE_EXECUTE_READ in practice no architecture I know supports such a thing.<br />
You&#8217;d need a strict Harvard process for the distinction to make sense. </p>
<p>Having a constant pool doesn&#8217;t harm DEP in any way. What it might do is allow being used in spectre and meltdown attacks, but that&#8217;s way too complicated for me to comment on.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1332655">
				<div id="div-comment-1332655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332655">
			April 11, 2018 at 8:42 am</a>		</div>

		<p>&gt; Having a constant pool doesn’t harm DEP in any way. What it might do is allow being used in spectre and meltdown attacks, but that’s way too complicated for me to comment on.</p>
<p>What I was actually thinking of with my statement was that it would increase the pool of available options for ROP gadgets. My guess is it wouldn&#8217;t meaningfully affect things, but I could be wrong.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1332945">
				<div id="div-comment-1332945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332945">
			April 12, 2018 at 3:49 pm</a>		</div>

		<p>It seems like an attacker would need two things:</p>
<p>1) to discover constant data that turned out to consist of one or more useful instructions<br />
2) figure out a way to return (or jump) to those instructions in a useful way</p>
<p>But since the code pages are already full of actual instructions, it&#8217;s not clear to me how having constant data in among those instructions increases the chance of an exploit in any significant way.</p>
<p>Then again, I&#8217;m no expert on exploits &#8211; I&#8217;m the kind of guy that would a submit a bug that turned out to involve &#8220;being on the other side of this airtight hatchway thing&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1333275">
				<div id="div-comment-1333275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1333275">
			April 17, 2018 at 12:19 pm</a>		</div>

		<p>&gt; But since the code pages are already full of actual instructions, it’s not clear to me how having constant data in among those instructions increases the chance of an exploit in any significant way.</p>
<p>I strongly suspect it&#8217;s not significant as well, but there could in theory be some bit pattern that is a useful instruction for a ROP program that does not otherwise appear. I <i>did</i> say that this is probably more of a theoretical weakness than a practical one. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>