<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-chuckop even thread-even depth-1" id="comment-1046113">
				<div id="div-comment-1046113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ChuckOp' rel='external nofollow' class='url'>ChuckOp</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046113">
			March 20, 2013 at 7:40 am</a>		</div>

		<p>I&#39;m not smart enough to know the pros and cons of each; but it would seem that by virtue of greater and more recent implementations, the table-based method is better. &nbsp;Would you agree?</p>
<div class="post">[<em>Table-based dispatch reduces the cost of SEH to zero when no exceptions are raised, since you don&#39;t have do anything to erect a frame or tear it down. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1046123">
				<div id="div-comment-1046123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046123">
			March 20, 2013 at 7:45 am</a>		</div>

		<p>I feel like you left us hanging &#8212; WHY does x86 use stack based exceptions instead of table based ones? &nbsp;I briefly looked over the links in the article, but nothing obvious stood out.</p>
<div class="post">[<em>I don&#39;t know either. Would have been less confusing if it used tables, too. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1046133">
				<div id="div-comment-1046133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046133">
			March 20, 2013 at 7:46 am</a>		</div>

		<p>Sorry to be pedantic, but I started with mainframe operating systems. &nbsp;</p>
<p>Your linked article from 2004 mentions &quot;modern architectures&quot;, says that x86 is weird in using variable-length instructions, and says &quot;the others use fixed-size instructions&quot;. &nbsp;That&#39;s looking at the world through microprocessor-colored glasses! &nbsp;:-)</p>
<p>IBM&#39;s mainframe operating system, the classic being System/360, morphed into 32-bit System/370 and System/390. &nbsp;I claim that the current version, called Z/Architecture, is a 64-bit &quot;modern architecture&quot;. &nbsp;These machine languages have always had 2, 4, and 6-byte instructions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1046143">
				<div id="div-comment-1046143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046143">
			March 20, 2013 at 8:18 am</a>		</div>

		<p>The x86 may be the weirdo here, but it&#39;s the only one that got it right. The table based approach cannot encode all cases, including &quot;you cannot unwind past this function&quot;.</p>
<div class="post">[<em>You encode that by saying &quot;This frame has a handler&quot; and have the handler return &quot;stop&quot;. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1046183">
				<div id="div-comment-1046183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046183">
			March 20, 2013 at 10:05 am</a>		</div>

		<p>@David Walker:</p>
<p>The instruction set is broadly compatible with S/360, is it not? &nbsp;Therefore I don&#39;t think it counts as a &quot;modern architecture&quot;.</p>
<p>Me, I&#39;m quite font of the VAX (the CISCiest, with instruction length from 1 to over a dozen bytes), but I wouldn&#39;t be calling it &quot;modern&quot; any more.</p>
<p>Fixed-length instructions do seem to be the way to build fast ISAs nowadays.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1046193">
				<div id="div-comment-1046193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">szmodz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046193">
			March 20, 2013 at 10:39 am</a>		</div>

		<p>@SimonRev</p>
<p>&quot;The prologue and epilogue of each function must follow a particular format so that the actions performed therein can be unwound during exception handling.&quot;</p>
<p>That&#39;s probably your reason. Windows/DOS didn&#39;t have SEH right from the start, and the table-based approach isn&#39;t compatible with SEH-unaware binaries (there is no way to unwind the frame of a SEH-unaware function). This becomes a problem when linking with libraries. Stack-based chaining, on the other hand, doesn&#39;t require all functions in the call stack to be aware of exception handling for unwinding to work.</p>
<p>For other platforms, there were no existing binaries, so tables could be used.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1046213">
				<div id="div-comment-1046213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046213">
			March 20, 2013 at 11:56 am</a>		</div>

		<p>To supplement @szmodz: I think this dates back to the historical origin of the x86 platform, where the OS basically left you alone unless you explicitly asked it to do anything. The PC platform was also characterized by a remarkable hands-off approach to software from IBM&#39;s side &#8212; in particular there wasn&#39;t a default compiler suite provided by the hardware vendor that everyone would use, even as an ABI reference. So the platform had an unprecedented diversity of different compilers on the market. Back then it wasn&#39;t widely appreciated that things such as procedure prolog/epilog and stack frame layout really ought to be standardized between compilers; this only came after the experience with the free-for-all compiler market for the IBM PC showed that there was a real problem to solve.</p>
<p>Add to that the fact that the 8086 is a register-poor architecture (either in absolute terms, or compared to its contemporaries such as the 68000), which makes it particularly desirable for compiler writers to squeeze out extra performance by tweaking the calling conventions &#8212; and we end in a situation where the x86 platform is historically obliged to support a wide variety of disparate calling conventions, whereas a self-respecting ISA designer these days will make sure to lay down the law about such matters even before his architecture exists in silicon.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1046223">
				<div id="div-comment-1046223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046223">
			March 20, 2013 at 12:32 pm</a>		</div>

		<p>The only reason that this is true is because x86-32 was the first architecture with the feature, made by Borland, and the failings of the original design prompted the redo for other architectures. &nbsp;However, this might also be because the existence of too many calling conventions made a consistent table-based format difficult.</p>
<p>That said, I really wish more programmers would understand the table model. &nbsp;There have been many times where I&#39;ve had to fix someone&#39;s x86-64 assembly code because they don&#39;t realize that you have to follow a very strict calling convention and function layout, and that you have to create these function tables. &nbsp;Otherwise, when that code crashes, and it will, your process will disappear rather than give a crash log.</p>
<p>I&#39;ve also had to deal with graphics drivers from a company starting with an N that do runtime x86-64 code generation in processes they don&#39;t own without calling RtlAddFunctionTable, RtlInstallFunctionTableCallback, or AddVectoredExceptionHandler, the three legal ways to support runtime code generation on table-based architectures. &nbsp;It was fun figuring out why we couldn&#39;t get crash logs when the user-mode graphics driver component crashed our program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1046243">
				<div id="div-comment-1046243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046243">
			March 20, 2013 at 12:36 pm</a>		</div>

		<p>[Table-based dispatch reduces the cost of SEH to zero when no exceptions are raised, since you don&#39;t have do anything to erect a frame or tear it down. -Raymond]</p>
<p>This is not completely true. &nbsp;Clearly, it has a memory and disk space cost. &nbsp;However, there are subtle runtime costs to it, but they are far less than the x86-32 model. &nbsp;For example, the strict calling convention can impede certain types of optimization. &nbsp;Also, runtime code generation is more complex and slower because of the need to lay out structures and functions correctly. &nbsp;RtlInstallFunctionTableCallback can alleviate this somewhat by delaying function table generation until exception time, but not it&#39;s not reduced completely.</p>
<p>Overall, I agree that the table-based model is superior, since memory, particularly on a 64-bit architecture, is cheap while CPUs aren&#39;t getting much faster per thread.</p>
<div class="post">[<em>True, there are secondary costs (like lost optimizations). The memory cost is paid only when an exception is raised (because otherwise the tables are never paged in). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1046253">
				<div id="div-comment-1046253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046253">
			March 20, 2013 at 1:39 pm</a>		</div>

		<blockquote><p>
  For example, the strict calling convention can impede certain types of optimization
</p></blockquote>
<p>I&#39;ve had more trouble reading the documentation than I previously thought, but I can&#39;t imagine what the tables look like for guaranteed tail call (there is no epilog).</p>
<p>Custom calling convention is right out, no matter how much it would benefit as the table can&#39;t encode it. (Custom calling conventions that beat the stock one are always selective register calling conventions).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1046263">
				<div id="div-comment-1046263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046263">
			March 20, 2013 at 1:58 pm</a>		</div>

		<p>@Raymond: &quot;The memory cost is paid only when an exception is raised (because otherwise the tables are never paged in)&quot;</p>
<p>But you still take a virtual memory reserve hit, even if you&#39;re not taking a commit hit, because you need to have reserved somewhere in the address space that you can page the tables into. Granted this isn&#39;t an issue for IA64 or x64, but it is an issue on ARM for instance, where 2GB isn&#39;t actually all that much space.</p>
<div class="post">[<em>True, but it&#39;s the same restriction that existed on all the non-x86 32-bit platforms. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1046283">
				<div id="div-comment-1046283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046283">
			March 20, 2013 at 3:04 pm</a>		</div>

		<p>Thanks for the elaboration.</p>
<p>x86-64 could have used table based exceptions. There&#39;s nothing in the x86 hardware that&#39;s requiring stack based SEC at all. The &quot;weirdo&quot; is the software, not the hardware/ISA.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1046293">
				<div id="div-comment-1046293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046293">
			March 20, 2013 at 3:27 pm</a>		</div>

		<p>@David Walker: No idea about S/360 (too young ;)), but up to 6 bytes for 1 instruction doesn&#39;t sound too bad compared to x86. I remember implementing a x86 C compiler and the Intel manuals were umn.. &quot;fun&quot;. The longest possible instruction in x86 is 15 bytes long, which I&#39;m pretty sure has to win some horrible, horrible price. That said I also fondly remember writing an assembler for MIPS and god how much nicer that architecture is in general (you can actually implement a simple pipelined MIPS CPU for a FPGA without going completely crazy as a student!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1046303">
				<div id="div-comment-1046303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JustSomeGuy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046303">
			March 20, 2013 at 8:16 pm</a>		</div>

		<p>@David Walker: the hardware is zArchitecture, the (primary) OS is z/OS. It&#39;s not the only OS that runs on zArch, there&#39;s also zVM and native Linux. @dave, I&#39;m not surprised the VAX used a lot of bytes. When you introduce an instruction to do polynomial expansion at the low level, that&#39;s probably going too far :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1046323">
				<div id="div-comment-1046323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046323">
			March 21, 2013 at 4:40 am</a>		</div>

		<p>I actually found a web page claiming that 15 bytes was the longest 8086 instruction, which is clearly nonsense. The best I could come up with was 2 (prefixes) + 1 (opcode) + 1 (mode) + 2 (displacement) + 2 (data) = 8 bytes (e.g. lock add es:[di+1234], 5678).</p>
<p>As for 80386 instructions, you need to be running 32-bit code in a 16-bit code segment so that you can throw in address and operand size prefixes, plus segment prefix and a lock prefix for good luck. Total: 4 (prefixes) + 1 (opcode) + 1 (mode) + 1 (scale) + 4 (displacement) + 4 (data). So yes, technically 15 bytes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1046333">
				<div id="div-comment-1046333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">saveddijon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046333">
			March 21, 2013 at 5:28 am</a>		</div>

		<p>Neil,</p>
<p>15 bytes is indeed the limit. Although you can come up with sequences that are longer, the hardware vendors impose the 15-byte limit to constrain their gate-level/RTL implementations.</p>
<p>BTW, you can double-up prefixes. Intel docs show how you can make NOP instructions encoded in anywhere from 1-15 bytes by prefixing NOP or other do-nothing instructions with as many prefixes as you want (keeping within 15 bytes).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1046493">
				<div id="div-comment-1046493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046493">
			March 21, 2013 at 12:10 pm</a>		</div>

		<p>@Dave: I was reading &quot;modern architecture&quot; to mean one that is currently in widespread use. &nbsp;Z/Architecture certainly has a lot of new instructions that 360 and 370 assembler code could not use. &nbsp;But I get your point!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1046513">
				<div id="div-comment-1046513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046513">
			March 21, 2013 at 2:55 pm</a>		</div>

		<p>/*Table-based dispatch reduces the cost of SEH to zero when no exceptions are raised, since you don&#39;t have do anything to erect a frame or tear it down. -Raymond*/</p>
<p>But it increases cost of raising exception, cause instead of walking linked list its neccesarry now to lookup tables, disasssemble and simulate code &#8211; not trivial and fast things.. Well, MS addressed this by skipping kernel-mode transition when exception raised in x64 process that is not debugged.. Interesting why x86 followed old always-call-NtRaiseException way.. To keep performance &#39;balanced&#39; or some (theoretical) compatibility problems?</p>
<div class="post">[<em>Could you tone down the bile a bit? Yes, the cost of raising an exception increases, but if your program spends all its time raising exceptions, I would argue that the design flaw is not with the exception dispatcher performance. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1046553">
				<div id="div-comment-1046553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046553">
			March 22, 2013 at 12:27 am</a>		</div>

		<p>@When no other OS requires it: On Linux you get to choose between sjlj (setjump-longjump, which saves all registers for every frame) and Dwarf2 (which uses tables).</p>
<p>Now, I know that Dwarf2 is more efficient when you have to deal with exceptions, but most code (that I&#39;ve written) neither throws nor consumes exceptions and the Dwarf2 tables can get really, really big (if exceptions must be allowed to pass through).</p>
<p>Of course, most of my Linux work was on libraries and libraries should neither throw exceptions nor call code that may. There are too many differences between how different languages deal with them; if your API contains exceptions, you&#39;re doing it wrong unless your lib is monolingual.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1046793">
				<div id="div-comment-1046793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046793">
			March 23, 2013 at 7:16 am</a>		</div>

		<p>re: 15 byte instructions&#8230;</p>
<p>The thing to keep in mind is that its OK to have long instructions if its due to their length adding value. One of the reasons for the long instructions is the powerful x86 addressing modes. The alternative is using more than one instruction to accomplish the same thing, and if the CISC vs RISC wars have taught us anything its that simpler instructions have both pro&#39;s and con&#39;s.</p>
<p>The current performance winner of these wars is clearly x86-64, indicating that CISC needing more complex decode logic to achieve performance is better than RISC needing more decode bandwidth feeding the decode logic to achieve performance. When performance isn&#39;t a consideration, but instead something like operations per watt is, then ARM&#39;s latest RISC offerings are clearly winning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1046803">
				<div id="div-comment-1046803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046803">
			March 23, 2013 at 7:46 am</a>		</div>

		<p>@Joseph Koss: At least Linux coding makes it easy to avoid ever throwing exceptions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1046873">
				<div id="div-comment-1046873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130320-00/?p=4893#comment-1046873">
			March 25, 2013 at 11:32 am</a>		</div>

		<p>@JustSomeGuy: Remember the VAX instruction set was designed in collaboration with the VMS engineers. The idea was to make the OS more efficient by having frequently used OS instruction sequences implemented as single &quot;machine&quot; instructions. For example, OSes spend a lot of time inserting and removing things from queues. The VAX instruction set included insert queue and remove queue instructions, thus making them atomic and non-interruptable, and eliminating the need for the VMS engineers to write the code to do so. Now why, polynomial expansion, was included in the VAX instruction set, I&#39;m clueless.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>