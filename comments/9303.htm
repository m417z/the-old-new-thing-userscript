<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-942213">
				<div id="div-comment-942213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mathieu Garstecki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942213">
			October 24, 2011 at 7:29 am</a>		</div>

		<p>The CLR can export base classes as it wants because C# classes are implemented differently. I think the IL code doesn&#39;t contain method addresses but symbol references (or something close enough), and the JIT computes the actual adresses. The base class implementation can change, because the JIT will always generate the right method calls at execute time, based on the actual metadata of the base class.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942223">
				<div id="div-comment-942223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942223">
			October 24, 2011 at 7:47 am</a>		</div>

		<p>The latest version of Objective-C solves the fragile base class problem by adding an extra level of indirection: all instance variable accesses in a derived class are performed by taking the base object pointer, adding the base class size, adding the derived member offset, and performing the load or store. &nbsp;This lets the base class size be determined at runtime, but it introduces a potential small performance penalty (one extra add instruction). &nbsp;So, base class layouts can change without breaking binary compatibility.</p>
<p>Method calls in Objective-C have always been resilient to fragile base classes, since method names are always looked up dynamically at runtime (with some heavy optimization by the dynamic linker) instead of using vtable offsets that are burned in at compile time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-942243">
				<div id="div-comment-942243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942243">
			October 24, 2011 at 8:08 am</a>		</div>

		<p>For what it&#39;s worth, the whole KMDF (Kernel Mode Driver Framework) is written internally in C++, even though it only exposes C API.</p>
<p>Also, in Win8, MS added official (though limited) C++ support to DDK.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942253">
				<div id="div-comment-942253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942253">
			October 24, 2011 at 8:51 am</a>		</div>

		<p>Short version: Because C++ does not have a stable ABI.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942273">
				<div id="div-comment-942273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942273">
			October 24, 2011 at 9:54 am</a>		</div>

		<p>The answer isn&#39;t some object-oriented buzzword mumbo-jumbo, it&#39;s to design the interface to support this feature in the first place! It seems like the current options are &quot;silently fail&quot; (by passing NULL for hwndOwner in the call to EnumObjects) and &quot;show dialog&quot;. They could have created a means to return an error from enumeration as a third option. For example, one of the flags might mean &quot;return a special error item in the event of an error while enumerating&quot; or &quot;verify media and return an error from EnumObjects if there is none&quot;. Or there could be a function you call at the end of enumeration to return a list of errors.</p>
<p>Obviously hindsight is 20/20, but this problem shouldn&#39;t have been hard to foresee back in 1994 when every Windows computer had a floppy or CD-ROM drive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942283">
				<div id="div-comment-942283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942283">
			October 24, 2011 at 9:58 am</a>		</div>

		<p>&quot;The latest version of Objective-C solves the fragile base class problemâ€¦&quot;</p>
<p>Now if Objective-C would solve the fragile constructor problem. &nbsp;I&#39;m sick and tired of having to worry that I&#39;m actually initializing the base class correctly, just because the language doesn&#39;t enforce initializing through the immediate base class rather than some other ancestor class.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942303">
				<div id="div-comment-942303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942303">
			October 24, 2011 at 11:17 am</a>		</div>

		<p>My first thought after just reading the headline:</p>
<p>&quot;Because C++ has no standard ABI and Windows is not tied to any specific C++ compiler. &nbsp;Everything has to be C compatible. &nbsp;End of discussion.&quot;</p>
<p>(And who says the consumer of the shell API is written in C++? &nbsp;What about Delphi? &nbsp;VB? &nbsp;Java? &nbsp;.NET languages?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942313">
				<div id="div-comment-942313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Former BE Programer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942313">
			October 24, 2011 at 12:32 pm</a>		</div>

		<p>BE did this, all the APIs were written and exposed as C++ classes&#8230; it turned out to be a disaster to maintain and program for. lat out one of the worst API I ever had to work with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942333">
				<div id="div-comment-942333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942333">
			October 24, 2011 at 1:34 pm</a>		</div>

		<p>&quot;Okay, first of all, I&#39;m not sure how Inversion of Control is something that requires C++, so I&#39;m going to leave that aside.&quot; &nbsp;</p>
<p>No its not necessarily required but C++ has better idiomatic support for OOP design techniques over C.</p>
<p>Anyway my whole post boils down to the fact that I hate error codes and would rather deal with exceptions instead. Lack of stability in the ABI of C++ not withstanding it would have been nice if C++ didn&#39;t have that design flaw and nice descriptive exception objects could be used instead of opaque error codes. At least speaking from a modern operating system API design point of view.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942343">
				<div id="div-comment-942343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942343">
			October 24, 2011 at 1:53 pm</a>		</div>

		<p>Well, there&#39;s another problem, ton. I hate exceptions and would rather deal with error codes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942353">
				<div id="div-comment-942353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaron.E</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942353">
			October 24, 2011 at 2:29 pm</a>		</div>

		<p>I hate exceptions and error codes and would rather nothing ever went wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942363">
				<div id="div-comment-942363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942363">
			October 24, 2011 at 3:01 pm</a>		</div>

		<p>@Aaron.E: I hate nothing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942373">
				<div id="div-comment-942373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942373">
			October 24, 2011 at 6:17 pm</a>		</div>

		<blockquote><p>
  &gt; Exercise: If exporting base classes is so horrible, why does the CLR do it all over the place?
</p></blockquote>
<p>All hail MSIL?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942393">
				<div id="div-comment-942393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942393">
			October 24, 2011 at 6:31 pm</a>		</div>

		<p>From the article:</p>
<p>&quot;method inheritance was implemented by direct replacement in the vtable, method overrides were implemented by function chaining&#8230;&quot;</p>
<p>Probably, &quot;method overrides were implemented by direct replacement in the vtable&quot; ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942413">
				<div id="div-comment-942413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942413">
			October 24, 2011 at 8:16 pm</a>		</div>

		<p>@steveg:</p>
<p>Most people don&#39;t like Nothing very much.</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/The_Neverending_Story" rel="nofollow">en.wikipedia.org/&#8230;/The_Neverending_Story</a></p>
<p>:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942443">
				<div id="div-comment-942443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942443">
			October 24, 2011 at 11:53 pm</a>		</div>

		<p>Related: I&#39;m really sad WinRT is being restricted to Metro apps (along with Windows Store and ARM support, what the heck?) &#8211; A native object oriented ABI on par with MSIL would be intensely useful, especially if it were publicly specced and (not just C++!) compiler writers were encouraged to adapt it. Heck, I&#39;m thinking of adapting it if I ever get round to finishing my compiler. (presumably that&#39;s legal?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942463">
				<div id="div-comment-942463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ooh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942463">
			October 25, 2011 at 1:46 am</a>		</div>

		<p>@Simon Buchan: WinRT isn&#39;t restricted to Metro apps, it just doesn&#39;t make sense to force non-Metro apps to a new ABI due to compatibility issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942653">
				<div id="div-comment-942653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ILoveCPP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942653">
			October 25, 2011 at 9:08 am</a>		</div>

		<p>I wonder if these new Windows 8 WinRT-based IInspecatble metadata-rich API&#39;s are more inefficient than pre-WinRT classical lean-and-mean COM API&#39;s.</p>
<p>&#8230;If so, is this a price payed to make it easier for the .NET managed guys to call into Windows?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942473">
				<div id="div-comment-942473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942473">
			October 25, 2011 at 3:31 am</a>		</div>

		<p>@Ooh: Well, MSDN only has Reference for the APIs *for* WinRT so far, which doesn&#39;t list any execution environment restrictions: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/br224646.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/br224646.aspx</a>, so unless they just haven&#39;t documented it yet, it looks like you *might* be able to RoActivateInstance() a &#8211; for example &#8211; Windows.Media.Transcoding.MediaTranscoder outside of a Metro package, which is nice &#8211; however, it definitely seems like that is something Microsoft would consider unintended usage.</p>
<p>I&#39;m not asking that there&#39;s a full WinRT alternative for every method in the Platform SDK, but at least the idea that you could write a &quot;WinRT desktop app&quot; in the same way you write a &quot;.NET app&quot; would be nice. With a .NET comparible ABI and API, the &quot;lego block&quot; development approach .NET is approaching now could be replicated for native code, and that&#39;s something I&#39;d love to see. Presumably, Microsoft would too?</p>
<p>Don&#39;t get me wrong, though: the progress showen on Win8 so far is already impressive to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942733">
				<div id="div-comment-942733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WndSks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942733">
			October 25, 2011 at 12:09 pm</a>		</div>

		<p>@ILoveCPP: Yes there is a little bit of overhead, both with how MSVC calls the methods and the implementation of the &quot;COM&quot; objects, see <a rel="nofollow" target="_new" href="http://www.interact-sw.co.uk/iangblog/2011/09/" rel="nofollow">http://www.interact-sw.co.uk/&#8230;/09</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942883">
				<div id="div-comment-942883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942883">
			October 25, 2011 at 10:10 pm</a>		</div>

		<p>short answer: windows isn&#39;t c++ compatible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-943123">
				<div id="div-comment-943123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-943123">
			October 26, 2011 at 1:46 pm</a>		</div>

		<p>@640k: So wrong, it&#39;s not even funny (If that was joke, you are missing whole smiley as it is similar as your past postings, so can&#39;t tell if serious or not)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>