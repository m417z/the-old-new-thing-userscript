<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-878353">
				<div id="div-comment-878353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878353">
			December 2, 2010 at 7:15 am</a>		</div>

		<p>IMHO it&#39;s a good idea to specify the alignment explicitly if you rely on it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-878363">
				<div id="div-comment-878363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878363">
			December 2, 2010 at 7:20 am</a>		</div>

		<p>Frankly, I&#39;m more worried about the comment claiming that aligning the address makes the write atomic. Maybe they meant it is a necessary, but not sufficient, requirement for the writes to be atomic. At least they didn&#39;t declare it volatile, so they /might/ have known what they were doing and actually written access functions in hand-coded assembly.</p>
<div class="post">p[<i>Access to the variable was done via InterlockedXxx. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-878373">
				<div id="div-comment-878373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878373">
			December 2, 2010 at 7:21 am</a>		</div>

		<p>Still, there are different compilers and nobody can guarantee that Microsoft doesn&#39;t change their default alignment one day&#8230; or that someone for whatever reason doesn&#39;t set it for the whole project. Better safe than sorry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-878383">
				<div id="div-comment-878383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878383">
			December 2, 2010 at 7:26 am</a>		</div>

		<p>@W And similarly, when you don&#39;t rely on it, it&#39;s best to rely on the compiler to optimize instead of potentially creating a deoptimization yourself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-878463">
				<div id="div-comment-878463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878463">
			December 2, 2010 at 11:22 am</a>		</div>

		<p>On the other hand, I used align(64) to align a whole part of my structure to a cache line, to improve per-processor cache locality. In this case, the whole structure also has to be declared with at least align(64).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-878473">
				<div id="div-comment-878473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Krishty</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878473">
			December 2, 2010 at 11:42 am</a>		</div>

		<p>It&#39;s a pity __declspec(align(#)) accepts literals only.</p>
<p>__declspec(align(sizeof(DWORD))) would have been helpful here, and it would also simplify alignment in template code. But now we&#39;ll have to wait for C++0x&#39;s alignas().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-878493">
				<div id="div-comment-878493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Agile</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878493">
			December 2, 2010 at 11:51 am</a>		</div>

		<p>And that&#39;s why you shouldn&#39;t write comments in code. At all. Hopefully they are atleast valid when the code are written, but later on when code are changed, comments are usually not updated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-878503">
				<div id="div-comment-878503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ms blog 0.001 gamma</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878503">
			December 2, 2010 at 12:22 pm</a>		</div>

		<p>The blog software used here is SLOW and BUGGY.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-878513">
				<div id="div-comment-878513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878513">
			December 2, 2010 at 1:16 pm</a>		</div>

		<p>I prefer macros that allow you to write platform-neutral code for alignment, e.g.:</p>
<p>#if defined(_MSC_VER)</p>
<p>#define ALIGNED(n) __dclspec(align(n))</p>
<p>#elif defined(<strong>GNUC</strong>)</p>
<p>#define ALIGNED(n) <strong>attribute</strong>((aligned(n)))</p>
<p>#elif defined(<strong>SOME_OTHER_COMPILER</strong>)</p>
<p>// etc.</p>
<p>#endif</p>
<p>LONG ALIGNED(32) m_lSomething;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-878443">
				<div id="div-comment-878443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878443">
			December 2, 2010 at 10:14 am</a>		</div>

		<p>@asdbsd: no compiler vendor would do that. x86 is the weirdo: other processor families will not even load a value from a misaligned address, you get an alignment fault. On x86 (and x64) it will *work*, but it will take much longer as the processor tries it, faults internally, and does the fixup. It may turn out to be implemented in microcode ROM rather than in native micro-ops, which is a lot slower.</p>
<p>On IA-64, Windows can automatically handle your alignment faults if you opt in, but handling the exception is really slow.</p>
<p>If you really want it to misalign data, you can use #pragma pack (or /Zp) to pack in the data tighter. If you&#39;re that obsessed with the sizes, though, you&#39;ll reorganize your structures to put the bytes next to each other, the shorts, and the longs (and the floating-point values), so they can all nicely align without the compiler adding extra padding bytes anyway. Compilers for processors that don&#39;t handle misalignment will generate code that loads each part into a separate register and does the shifting and ORing to load it properly, and likewise for stores, but of course this cannot be atomic. It usually wastes some registers too, and bloats the code.</p>
<p>Porting code from the desktop, or from old DOS handhelds, to Windows CE can often be fun if the structures were misaligned. Choose between compatible structures, if you need to load something from a common file format, and pay the penalty of the bloated code, or remove the packing, but make sure each use of each structure is under the same packing value, or you get very weird results when different bits of code think the member you&#39;re trying to access is at different offsets.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-878453">
				<div id="div-comment-878453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878453">
			December 2, 2010 at 10:14 am</a>		</div>

		<p>@asdbsd: no compiler vendor would do that. x86 is the weirdo: other processor families will not even load a value from a misaligned address, you get an alignment fault. On x86 (and x64) it will *work*, but it will take much longer as the processor tries it, faults internally, and does the fixup. It may turn out to be implemented in microcode ROM rather than in native micro-ops, which is a lot slower.</p>
<p>On IA-64, Windows can automatically handle your alignment faults if you opt in, but handling the exception is really slow.</p>
<p>If you really want it to misalign data, you can use #pragma pack (or /Zp) to pack in the data tighter. If you&#39;re that obsessed with the sizes, though, you&#39;ll reorganize your structures to put the bytes next to each other, the shorts, and the longs (and the floating-point values), so they can all nicely align without the compiler adding extra padding bytes anyway. Compilers for processors that don&#39;t handle misalignment will generate code that loads each part into a separate register and does the shifting and ORing to load it properly, and likewise for stores, but of course this cannot be atomic. It usually wastes some registers too, and bloats the code.</p>
<p>Porting code from the desktop, or from old DOS handhelds, to Windows CE can often be fun if the structures were misaligned. Choose between compatible structures, if you need to load something from a common file format, and pay the penalty of the bloated code, or remove the packing, but make sure each use of each structure is under the same packing value, or you get very weird results when different bits of code think the member you&#39;re trying to access is at different offsets.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-878563">
				<div id="div-comment-878563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878563">
			December 2, 2010 at 7:31 pm</a>		</div>

		<p>@Agile: Because &quot;Huh? WTF?&quot; is better than &quot;Oh, there&#39;s a difference between code and comment, let me check&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-878583">
				<div id="div-comment-878583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878583">
			December 2, 2010 at 8:23 pm</a>		</div>

		<p>@Mike Dimmick: Misalignment is cheap on x86, in fact it may even be free if the access doesn&#39;t cross a cache line boundary. Some of the RISC architectures made misalignment very expensive originally but generally changed that later.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-878593">
				<div id="div-comment-878593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878593">
			December 2, 2010 at 10:32 pm</a>		</div>

		<p>Trying to align class members is pointless anyway, if new isn&#39;t overriden and returns a base address with lower granularity. Thinking of __m128 members, for example.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-878603">
				<div id="div-comment-878603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878603">
			December 2, 2010 at 11:25 pm</a>		</div>

		<p>x86 is one of the few architectures where misalignment is allowed. Most others do one of two things &#8211; they access aligned (e.g., a 32-bit access zeros the least significant 2 bits), or cause an interrupt. Either way, one gets you odd results, the other a crash.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-878613">
				<div id="div-comment-878613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878613">
			December 3, 2010 at 12:48 am</a>		</div>

		<p>There are some alignment issues between some windows compilers. &nbsp;If you build a DLL with GCC/G++/MingW (and turn on extremely aggressive optimisation and SSE-vectorisation) and dynamically load it from a VB application, you can sometimes get misaligned stack errors &#8212; i.e. the optimisation on the DLL assumes that the stack is 16-byte aligned, suitable for SSE instructions. &nbsp;Under Windows, this won&#39;t always be the case. &nbsp;There is a compiler flag to drop this assumption..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-878633">
				<div id="div-comment-878633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878633">
			December 3, 2010 at 3:00 am</a>		</div>

		<p>ARM presumably saved on transistors by making its int and byte reads follow almost the same code i.e. read aligned int, rotate, transfer int/byte to register, but it also meant that a short-aligned short read could be emulated with a (possibly unaligned) int read and a mask. (I understand that current processors now include short reads and writes.)</p>
<p>VC++7.1 doesn&#39;t check stack alignment either so for instance libpixman will crash on an unaligned SSE access if you compile using standard debug settings.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-878643">
				<div id="div-comment-878643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101202-00/?p=12133#comment-878643">
			December 3, 2010 at 6:57 am</a>		</div>

		<p>I can confirm (I do a lot of x86 assembly language programming) that on 32-bit x86 that misaligned dword reads are normally as efficient as aligned dword reads.</p>
<p>As someone else mentioned, one of the cases where this isnt true is when the read straddles a cache line, but not mentioned is that this penalty may still be better than the alternative (increasing your structure size reduces the density of useful data in the cache.) This is also something that compilers just dont get &quot;right&quot; unless &quot;right&quot; happens to be align-everything (because thats what most x86 compilers do by default.)</p>
<p>Normally the align-everything rule is optimal. I personally use explicit alignment quite a bit (and align everything!), but thats normally because I drop down to assembler often enough that I find myself frequently having the structure defined twice.. once in the HLL and once again as a masm struct. Any time you are doing mixed language stuff you should be explicit.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>