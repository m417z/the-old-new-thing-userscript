<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (40)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-154733">
				<div id="div-comment-154733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154733">
			March 17, 2004 at 7:11 am</a>		</div>

		<p>Aaarrrggghh!</p>
<p>Way too many customers use cluster server as a &quot;band aid&quot; to avoid fixing the real problem.  I saw this time and time and time again when I was working in cluster server support.</p>
<p>Folks, cluster server is not a substitute for good code!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-154753">
				<div id="div-comment-154753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Serge Wautier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154753">
			March 17, 2004 at 7:23 am</a>		</div>

		<p>I don&#8217;t understand why paging is responsible for death in this case. It&#8217;s the opposite: Paging allowed the server to keep running a little longer.<br />
<br />The memory leak is the one and only responsible for death here IMO.<br />
<br />And why did it die after exactly 10 hours ? Was there a constant rate of requests ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-154763">
				<div id="div-comment-154763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/fbouma' rel='external nofollow' class='url'>Frans Bouma</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154763">
			March 17, 2004 at 7:52 am</a>		</div>

		<p>Exactly, Serge :)</p>
<p>Windows pages all the time, some OS-es actually swap out every mempage first before using it. Windows doesn&#8217;t page a lot, but it does page, no matter what amount of ram you have. You can see this when you have your pagefile on another harddisk (solely for the pagefile). It&#8217;s accessed sometimes, especially during boot. (and not just to identify the disk ;))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-154773">
				<div id="div-comment-154773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154773">
			March 17, 2004 at 8:04 am</a>		</div>

		<p>Without paging, the server was able to keep up with the rate of incoming requests. A hard page fault costs a few dozen milliseconds, which is an eternity to a computer. Since the incoming rate for this particlar server was relatively constant, the machine just started falling behind and never caught up. </p>
<p>Yes you could say that the memory leak was the cause of the problem, but it manifested itself through paging. If there was some other bug that caused every request to page (e.g. a data structure with a bad access pattern), then the result would be the same: paging =&gt; death.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-154783">
				<div id="div-comment-154783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Hill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154783">
			March 17, 2004 at 8:08 am</a>		</div>

		<p>But of course, if the requests were _not_ constant, and the overcommittal wasn&#8217;t a memory leak but something a bit more temporary (like a wacking great temp table or something), then paging would be, well, not a good thing, but some way short of death.</p>
<p>Paging in this case _prolonged_ the server&#8217;s life by a couplea hours.  With memory leaks, you&#8217;re knackered anyway.</p>
<p>One more reason to go .NET, I think :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-154793">
				<div id="div-comment-154793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154793">
			March 17, 2004 at 8:17 am</a>		</div>

		<p>Seems you’ve got a loose &quot; in the link. Here’s a link to the Jargon File quoted at WordSpy:<br />
<br /><a target="_new" href="http://www.catb.org/~esr/jargon/html/S/sucking-mud.html" rel="nofollow">http://www.catb.org/~esr/jargon/html/S/sucking-mud.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-154803">
				<div id="div-comment-154803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154803">
			March 17, 2004 at 8:20 am</a>		</div>

		<p>True &#8211; if the request rate ever slowed down enough that the paging could catch up, then paging would have saved the day.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-154823">
				<div id="div-comment-154823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://iseran.com/Steve/blog' rel='external nofollow' class='url'>Steve Loughran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154823">
			March 17, 2004 at 9:34 am</a>		</div>

		<p>The underlying problem is that if you code in languages where leakage (and buffer overflows) ar e inherent unless coded-out, you are going to end up with code that leaks and somewhere has a buffer overflow. Leakage may manifest itself as paging, and hence an low peak load, or it may manifest itself in some other manner. The problem with subtle leakage is that it is (a) a dog to find, (b) takes lots of time and realistic load tests and (c) something that you cannot usually do just before a ship deadline. so instead you ship a leaky server and try and fix while configuring the cluster to reboot overnight, hopefully with enough of an interval between system reboots that if server 1 doesn&#8217;t come back up, you can cancel the restart of server2.</p>
<p>Code in Java, C# or even Perl and you have to try really hard to leak -it is not the default outcome- so tends to be rarer. The gulf between  &#8216;working&#8217; and &#8216;deployable&#8217; is narrower and everyone is happy.</p>
<p>Incidentally, it is easy to turn paging off on a server. Just turn the swapfile off. Then you will see a more entertaining failure mode when the time comes. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-154843">
				<div id="div-comment-154843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.popcornfilms.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154843">
			March 17, 2004 at 10:28 am</a>		</div>

		<p>Frans: Are you sure that it&#8217;s swapping and not just clearing unused sections of the page file in advance so that future page requests can be fulfilled faster?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-154853">
				<div id="div-comment-154853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.bigbeardy.co.uk' rel='external nofollow' class='url'>Mat Hall</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154853">
			March 17, 2004 at 10:41 am</a>		</div>

		<p>What puzzles me is why Windows insists on having a huge pagefile, even when there&#8217;s plenty of free RAM.  (For example, right now I have 238Mb free physical RAM, and a PF usage of 236Mb &#8212; is there some highly technical reason that XP doesn&#8217;t keep at least some of that 236Mb in RAM?  I could understand if it always left a small amount of physical RAM to avoid possibly choking when it tried to page something in, but I very rarely have anything less than 200Mb free&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-154873">
				<div id="div-comment-154873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154873">
			March 17, 2004 at 11:08 am</a>		</div>

		<p>Windows 95 worked hard to keep your pagefile as small as possible, but that also meant that if there was a surge in demand, it was slow to react.</p>
<p>My guess is that Windows NT tries to keep a backing page ready ahead of time so it can pre-clean pages. Then when there&#8217;s a surge in demand, it doesn&#8217;t have to write the pages out; they&#8217;re already clean.</p>
<p>But I&#8217;m just guessing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-154883">
				<div id="div-comment-154883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154883">
			March 17, 2004 at 11:15 am</a>		</div>

		<p>I really wish MS would take out &#8212; or at least offer some way of globally disabling &#8212; the &quot;feature&quot; that swaps a process&#8217;s entire working set to disk when its top-level window is minimized (see <a target="_new" href="http://support.microsoft.com/default.aspx?scid=kb;en-us;293215" rel="nofollow">http://support.microsoft.com/default.aspx?scid=kb;en-us;293215</a>). It causes needless disk thrashing whenever a memory-intensive app is minimized and subsequently restored. This is easily the #1 performance bottleneck I encounter on a day-to-day basis.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-154893">
				<div id="div-comment-154893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jakub W&#243;jciak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154893">
			March 17, 2004 at 11:31 am</a>		</div>

		<p>One of the most irritating things in Windows NT memory management is high priority of the disk buffers.<br />
<br />Downloading a big (larger than the size of RAM) file from IIS FTP server or over NetBios causes the server system to page process and dll memory to disk to allow bigger disk cache. Performance drops dramatically &#8211; simply restoring minimized windows takes quite a few seconds of intensive paging.<br />
<br />There should be a option to either limit disk cache size, or make it less prioritized than process working sets.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-154903">
				<div id="div-comment-154903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carmen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154903">
			March 17, 2004 at 11:37 am</a>		</div>

		<p>Mat: Where are you getting your paging file usage numbers from?  Not all tools are equal when telling you the state of memory in Windows.  Perfmon is generally the best place to go for acurate information.  </p>
<p>Jordan: Don&#8217;t mistake working set trimming with paging.  They&#8217;re not the same thing.</p>
<p>If you want to know more about how the Windows memory manager works, make sure to spend a lot of time reading and understanding the chapter discussing that topic in &quot;Inside Windows 2000&quot;.</p>
<p>Some of the information has changed between Windows 2000 and XP/2003, but the big picture is still the same, with only some of the details being changed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-154913">
				<div id="div-comment-154913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">keithmo [exmsft]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154913">
			March 17, 2004 at 11:39 am</a>		</div>

		<p>Here&#8217;s one (of many, I assume) story about the phrase &quot;sucking mud&quot;.</p>
<p>Many years ago, Tandy Corporation (parent of Radio Shack) produced several &quot;high end&quot; (at the time) business computers. One of these was the Model 16 &#8212; imagine a giant TRS-80 Model I with it&#8217;s own desk, integrated monitor, and 8&quot; floppy drive. The system had two processors &#8211; a Z-80 and a Motorola 68000. The Z-80 was used for legacy Model 2 mode. More interestingly, the Z-80 was also used as the I/O processor for the 68000 when running Tandy&#8217;s custom port of Xenix (Microsoft&#8217;s Unix-like-OS from the mid 1980&#8217;s).</p>
<p>A program called Z80CTL was run on the Z-80. It received I/O requests from the 68000, performed its hardware magic, then notified the 68000 when the request was complete. Pretty standard stuff.</p>
<p>When an I/O request was made to the Z-80, Z80CTL would squirrel away a copy of the stack pointer somewhere. When the I/O request completed, Z80CTL would compare the current stack pointer with the saved value. If they didn&#8217;t match, well, that was Bad. The system would come to a grinding halt with the following message displayed:</p>
<p>Halt: Shut her down, Scotty, she&#8217;s sucking mud!</p>
<p>I don&#8217;t remember the *exact* wording, but this is close enough. At least the screen didn&#8217;t turn blue when this happened&#8230;</p>
<p>I now return you to the 21st century, where you&#8217;ll hopefully find something more relevant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-154943">
				<div id="div-comment-154943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154943">
			March 17, 2004 at 12:08 pm</a>		</div>

		<p>Jakub: Ah how operating system design fashions change. I remember when a unified caching architecture (where all memory was treated equally) was the hot thing and any OS that didn&#8217;t have a unified cache was declared woefully inadequate and not worthy of consideration.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-154953">
				<div id="div-comment-154953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154953">
			March 17, 2004 at 12:12 pm</a>		</div>

		<p>&gt; Jordan: Don&#8217;t mistake working set trimming with paging.</p>
<p>Right, but as pointed out in the article, the working set trimming leads results in paging.</p>
<p>The effect is very obvious if you minimize a memory hog like VMware &#8212; immediate disk thrashing ensues. To avoid the thrashing, I&#8217;ve gotten into the habit of minimizing windows using Windows+M instead of clicking minimize buttons. It really sucks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-154963">
				<div id="div-comment-154963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154963">
			March 17, 2004 at 12:14 pm</a>		</div>

		<p>Jakub: You can disable that behavior. Google for LargeSystemCache.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-154973">
				<div id="div-comment-154973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jakub W&#243;jciak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154973">
			March 17, 2004 at 12:53 pm</a>		</div>

		<p>Jordan: Setting LargeSystemCache doesn&#8217;t solve the problem. By adjusting LargeSystemCache and Size registry keys you define the size and priority of the disk cache.<br />
<br />Those two keys determine the possibility of paging / trimming process working set. The situation looks like this:<br />
<br />1. You minimize all your apps (memory intensive apps, such as Visual Studio, MSDN, etc.), lock your workstation and go get yourself a coffee.<br />
<br />2. Applications were minimized = their working sets have been trimmed.<br />
<br />3. Someone downloads a big file from you (possibly a beta CD image of the application you are working on).<br />
<br />4. The disk cache grows, eating all your memory and causes the system to page out your apps.<br />
<br />5. You come back, unlock the workstation and wait and wait and wait &#8211; and it pages and pages and pages&#8230;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-154983">
				<div id="div-comment-154983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154983">
			March 17, 2004 at 12:59 pm</a>		</div>

		<p>Well you weren&#8217;t using those programs any more, so they end up least-recently-used and are therefore prime candidates for discard.</p>
<p>Consider the opposite argument: Why is my computer so slow at file transfer? Sure I have a bunch of programs running, but I minimized them all and haven&#8217;t touched them in hours. Clearly I am not using them. Yet the computer refuses to use that memory for more important things like speeding up that file transfer I&#8217;m doing from the office down the hall.</p>
<p>This is one of those cases where no matter who wins, the other guy claims to have been cheated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-154993">
				<div id="div-comment-154993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-154993">
			March 17, 2004 at 1:18 pm</a>		</div>

		<p>I don&#8217;t really agree with the notion that minimizing means &quot;this application isn&#8217;t being used anymore&quot;. If I&#8217;m not using an application, I&#8217;ll *close* it, not minimize it. Often times I&#8217;ll minimize applications that are being actively used just to temporarily free up some screen real estate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-155003">
				<div id="div-comment-155003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jakub W&#243;jciak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-155003">
			March 17, 2004 at 1:22 pm</a>		</div>

		<p>Raymond, you&#8217;re wrong on this one. The current behaviour of memory manager always favourizes disk cache and file-server-like machines.<br />
<br />I can see two solutions:<br />
<br />1. The system administrator has the ability to choose between workstation-like behaviour or file-server-like behaviour of memory manager.<br />
<br />2. The file-serving (both NetBios and FTP)services have an option like &#8216;don&#8217;t trash disk cache&#8217;, which implies opening files with FILE_FLAG_NO_BUFFERING.</p>
<p>The usage scenario I have previously mentioned is particularly irritating if you have 512MB of RAM, the apps and the system take about 300MB, so you have basically 200MB of free physical RAM. However downloading a file about 600MB in size, uses up _all_ the memory in the system causing much paging. Couldn&#8217;t the memory manager take only those free 200MB?</p>
<p>At least give me an option to set the upper limit for disk cache size&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-155013">
				<div id="div-comment-155013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-155013">
			March 17, 2004 at 1:32 pm</a>		</div>

		<p>Jakub: You&#8217;ll have to take this up with the memory manager folks then. I&#8217;m just guessing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-155023">
				<div id="div-comment-155023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Catatonic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-155023">
			March 17, 2004 at 1:49 pm</a>		</div>

		<p>Memory leaks do happen in C#, and they can be real head scratchers especially if you have C++ in your blood. But that&#8217;s a topic for another blog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-155033">
				<div id="div-comment-155033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-155033">
			March 17, 2004 at 1:53 pm</a>		</div>

		<p>&gt; The current behaviour of memory manager always favourizes disk cache and file-server-like machines.</p>
<p>&#8230;*if* you set LargeSystemCache to a non-zero value. (See <a target="_new" href="http://support.microsoft.com/default.aspx?scid=kb;en-us;102985" rel="nofollow">http://support.microsoft.com/default.aspx?scid=kb;en-us;102985</a>)</p>
<p>It sounds to me like the root of your troubles is the &quot;trim working set on minimize&quot; feature of USER. Provided you have LargeSystemCache set to zero and you don&#8217;t minimize your apps, the process working sets shouldn&#8217;t get trimmed in favor of cache. At least that&#8217;s how things work on my Win2k system&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-155083">
				<div id="div-comment-155083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karan Mehra</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-155083">
			March 17, 2004 at 7:27 pm</a>		</div>

		<p>&gt; The current behaviour of memory manager always favourizes disk cache and file-server-like machines. </p>
<p>Until recently, the memory manager left it up to the lazy writer to flush pages dirtied by the cache manager. However, the lazy writer keeps only 2 writes outstanding.</p>
<p>So if a large file came in through a very fast connection, its contents would very soon fill up all available memory and Mm would trim more and more working sets to satisfy new requests. Only when there is no more memory available would Mm start flushing the pages that it had excluded earlier</p>
<p>I believe this has been fixed in Windows Server 2003. Mm no longer gives those pages any reprieve. This is more or less equivalent to having set FILE_FLAG_NO_BUFFERING (on large files)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-155103">
				<div id="div-comment-155103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jorge Coelho</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-155103">
			March 17, 2004 at 8:30 pm</a>		</div>

		<p>Jordan, working set trimming when minimizing the top level-window is actually a kind of &#8216;life savior&#8217; for Visual Basic applications, which have basically no control on memory allocation/de-allocation.</p>
<p>One of the problems I had was the apparent memory footprint of some of my VB applications. I mean, I destroyed every single object, made sure every form was properly unloaded and terminated and still the memory footprint kept growing and growing. It was just ridiculous!</p>
<p>Looking up the problem in Dejanews only revealed more cases of programmers frustrated with this&#8230; seems like VB caches unused objects and code in memory in case they will be needed again &#8211; to the casual user this will make the application look like it&#8217;s nothing more than a bloated memory pig. </p>
<p>That&#8217;s when I run into the working set trimming solution. I now call SetProcessWorkingSetSize(GetCurrentProcess(), -1, -1) &#8211; the equivalent of minimizing the application&#8217;s top-level window &#8211; at specific times to force the OS to release all that unused memory. Works like a charm.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-155113">
				<div id="div-comment-155113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-155113">
			March 17, 2004 at 9:19 pm</a>		</div>

		<p>&gt; I now call SetProcessWorkingSetSize(GetCurrentProcess(), -1, -1) [&#8230;] at specific times to force the OS to release all that unused memory. Works like a charm.</p>
<p>Except that it doesn&#8217;t actually release any memory, and inceases the probabilty of being paged out to disk, as others explained.</p>
<p>Sure, you app now looks better in Task Manager, but if you were to actually measure how it affects performance you&#8217;d probably find that there is either no difference, or a noticeable perf hit, depending on situation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-155153">
				<div id="div-comment-155153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew Lock</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-155153">
			March 17, 2004 at 10:57 pm</a>		</div>

		<p>FYI nice advert for the Tandy Model 16: <a target="_new" href="http://m.m.nu/nostalgi/c-today_may83_p65.jpg" rel="nofollow">http://m.m.nu/nostalgi/c-today_may83_p65.jpg</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-155343">
				<div id="div-comment-155343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jorge Coelho</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-155343">
			March 18, 2004 at 7:52 am</a>		</div>

		<p>&gt; Except that it doesn&#8217;t actually release any memory, and inceases the probabilty of being paged out to disk, as others explained. </p>
<p>Sorry, for all pratical purposes, it does release memory. Even if the unused bits were just paged out to disk, the fact is that they are no longer using valuable RAM space (and since they are unused bits anyway, there is no performance hit associated with it).</p>
<p>Look at it this way:</p>
<p>Imagine your program is using 5,000 Kb of RAM. You display a rarely used form with lots of controls, etc&#8230; memory usage jumps to 7,000 Kb. You unload the form and destroy all references to it. You would expect memory to drop back to the initial value&#8230; except it doesn&#8217;t. It only goes back down to 6,800 kb or something. </p>
<p>Now you display another form and the same thing happens. So your memory usage keeps climbing and climbing even though you are destroying every object after use. Soon your application will look like a memory hog even though it isn&#8217;t.</p>
<p>Enter SetProcessWorkingSetSize. Your working set size is reduced to bare bones when you know there won&#8217;t be a performance hit by doing this. Everything that should have been discarded a long time ago (and wasn&#8217;t because VB or the OS overrided your decision to remove from memory unused objects) is now paged out or removed or whatever happens to it when you trim the working set.</p>
<p>&gt; Sure, you app now looks better in Task Manager, but if you were to actually measure how it affects performance you&#8217;d probably find that there is either no difference, or a noticeable perf hit, depending on situation.</p>
<p>Say what you will, try explaining to Joe User that what he is seeing with his own eyes in task manager isn&#8217;t actually true and that VB will release the memory back to the OS when needed&#8230; Do you really expect him to believe you?</p>
<p>Besides, I&#8217;ve tested it here lots of times (and remember I&#8217;m the one who decides *when* to call SetProcessWorkingSetSize, so I hand pick the occasions). If there is a performance hit, it is entirelly negligible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-155523">
				<div id="div-comment-155523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman/archive/2004/03/18/92010.aspx' rel='external nofollow' class='url'>Larry Osterman's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-155523">
			March 18, 2004 at 12:20 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-155563">
				<div id="div-comment-155563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman/archive/0001/01/01/92010.aspx' rel='external nofollow' class='url'>Larry Osterman's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-155563">
			March 18, 2004 at 12:33 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-155843">
				<div id="div-comment-155843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-155843">
			March 18, 2004 at 1:01 pm</a>		</div>

		<p>Jorge Coelho wrote:<br />
<br />&gt; Sorry, for all pratical purposes, it does release memory. Even if the unused bits were just paged out to disk, the fact is that they are no longer using valuable RAM space</p>
<p>Valuable RAM space isn&#8217;t wasted because the OS will trim your process&#8217;s working set *automatically* when the system runs low on memory. By forcing your working set to be trimmed, you&#8217;re basically asking for a performance hit in all cases, as opposed to a performance hit only in low-memory situations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-156213">
				<div id="div-comment-156213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jorge Coelho</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-156213">
			March 19, 2004 at 8:43 am</a>		</div>

		<p>Jordan, I&#8217;m not saying that the OS will not trim the working set when memory is low. I&#8217;m just saying: try telling Joe User that is what is going to happen and see if he believes you &#8211; all he cares is what he sees in Task Manager.</p>
<p>With the type of applications I make we are talking about thousands of Joe and Jane Users, not technological geeks who would understand how memory management works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-156223">
				<div id="div-comment-156223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-156223">
			March 19, 2004 at 8:48 am</a>		</div>

		<p>This is a general UI problem with Task Manager: If you show the total-geek info, people will misinterpret it since you need to be a total-geek to understand it properly. What&#8217;s the solution? Short of removing the info from Task Manager altogether.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-156253">
				<div id="div-comment-156253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-156253">
			March 19, 2004 at 9:53 am</a>		</div>

		<p>Renaming the &quot;Mem Usage&quot; column to &quot;Working Set Size&quot; might be a start. More cryptic yes, but less prone to misinterpretation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-156903">
				<div id="div-comment-156903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marco Russo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-156903">
			March 23, 2004 at 5:32 am</a>		</div>

		<p>Guys, I know *a lot* of IT professional who really don&#8217;t understand that the really important column to show in Task Manager is not Mem Usage but VM Size.<br />
<br />Only VM Size tell you:<br />
<br />&#8211; if a program has memory leak<br />
<br />&#8211; if a program has required much more memory than available physical RAM</p>
<p>Raymond, I know that Windows is used mostly by non-geek people, but the Task Manager naming convention (and default column used in process tab) are some of the worst decisione you could have made considering the consequences in wrong analysis and actions made by people who read these informations, even by IT pro.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-177873">
				<div id="div-comment-177873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lazar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-177873">
			May 27, 2004 at 6:47 am</a>		</div>

		<p>I&#8217;ve been playing with this &#8216;feature&#8217; of win2K/XP for a while now (after losing the ability to reattange the taskbar with buttonboogie I had to find something to tweak!)</p>
<p>I run XP/2K on boxes with at least 512M RAM and have been trying to force the apps to reside completely in resident memory but even with the swap set to 0% on all disks it looks like the &#8216;VM Size&#8217; column always contains a value. I see many skillful replies here so I ask you folks; is there a way to get the apps completely resident in memory without switching to linux-&gt;VMware?</p>
<p>One thing I have done is set DisablePagingExecutive in HKLMsystemCurrentControlSessionManagerMemoryManagement<br />
<br />and it helps a little but does not provide a fix.</p>
<p>?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-191353">
				<div id="div-comment-191353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman/archive/2004/07/06/174516.aspx' rel='external nofollow' class='url'>Larry Osterman's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-191353">
			July 6, 2004 at 8:20 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-739343">
				<div id="div-comment-739343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.eurekalog.com/?p=198' rel='external nofollow' class='url'>Catching memory leaks post | EurekaLog Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040317-00/?p=40223#comment-739343">
			May 26, 2009 at 4:38 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blog.eurekalog.com/?p=198" rel="nofollow">http://blog.eurekalog.com/?p=198</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>