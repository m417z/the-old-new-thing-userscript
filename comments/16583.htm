<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (35)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-771053">
				<div id="div-comment-771053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771053">
			September 25, 2009 at 10:17 am</a>		</div>

		<p>If I knew how to enforce correct behavior in third party code, I would probably be rich&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771083">
				<div id="div-comment-771083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">someone else</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771083">
			September 25, 2009 at 10:47 am</a>		</div>

		<p>The correct tool to enforce correct behavior in third party code is a solid 2&#215;4. To the head. Repeatedly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771123">
				<div id="div-comment-771123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771123">
			September 25, 2009 at 11:50 am</a>		</div>

		<p>You could require the IID follow the v-ptr in the class layout (before the instance data) and then declare the interfaces like this:</p>
<p>struct IUnkown</p>
<p>{</p>
<p>QueryInterface etc.</p>
<p>REFIID iid;</p>
<p>};</p>
<p>After calling QueryInterface (or more often if it is paranoid), the code could check that iid is correct.</p>
<p>I guess the layout of objects would then look like this</p>
<p>v-ptr1</p>
<p>iid1</p>
<p>v-ptr2</p>
<p>iid2</p>
<p>etc.</p>
<p>This would reduce the chance of people making this particular mistake (and several related ones.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771163">
				<div id="div-comment-771163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bahbar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771163">
			September 25, 2009 at 12:12 pm</a>		</div>

		<p>@Sunil: Right, plus it makes implementing an IID that inherits from another a whole lot easier now. Let&#8217;s see, IUNKNOWN gets one vtable, IBASEOBJ another one, ISHAPE another one, IRECTANGLE&#8230;</p>
<p>Brilliant!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771173">
				<div id="div-comment-771173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771173">
			September 25, 2009 at 12:14 pm</a>		</div>

		<p>The simple solution to this whould have been to not let people code it themselves.</p>
<p>Aka: The QISearch helper function should have been there since the very beginning, and people strongly encouraged by the docs to never, ever code QueryInterface themselves, just delegate the work to this API.</p>
<p>Even better, but slightly more complicated, would have been to get rid of QueryInterface completly and use a &quot;pointer to interface table&quot; embedded directly in the object, encoding IID&#8217;s and vptr offsets&#8230; Although this would not work for proxy and remote objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771183">
				<div id="div-comment-771183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771183">
			September 25, 2009 at 12:23 pm</a>		</div>

		<p>@dgt:</p>
<p>If the object implements more than one interface (which all do i.e IUnknown + something else)</p>
<p>this-&gt;iid = riid;</p>
<p>is ambiguous. They only way they could get it right (in C++) would be to match riid to the correct interface and perform the correct cast (if they then go ahead and return the wrong pointer &#8211; there&#8217;s only so much you can do to save people.)</p>
<p>Besides, writing this-&gt;iid = riid; suggests they know they&#8217;re doing it wrong.</p>
<p>My understanding of the problem presented above is that the coder has assumed (incorrectly) they would only get Queried for the interface they have actually implemented. It would never occur to such a period that they would need to write this-&gt;iid = riid;</p>
<p>@bahbar</p>
<p>Sure, that&#8217;s the trade-off.</p>
<p>@Koro</p>
<p>I actually like your idea of &quot;pointer to interface table&quot; better.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771243">
				<div id="div-comment-771243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">HJB417</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771243">
			September 25, 2009 at 1:37 pm</a>		</div>

		<p>Maybe MS can release a test harness so we can verify our COM objects against these gotchas.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771293">
				<div id="div-comment-771293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771293">
			September 25, 2009 at 3:03 pm</a>		</div>

		<p>Folks,</p>
<p>No matter how smart is verification, there is always a dumb coder who will screw it up.</p>
<p>This is where old good code review should help. Don&#8217;t let your undercoders check in code! Do a review first!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771333">
				<div id="div-comment-771333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gotcha</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771333">
			September 25, 2009 at 4:35 pm</a>		</div>

		<p>Don&#8217;t you have to get the <em>same</em> (IUnknown*) if you query for IID_IUnknown, regardless which subinterface you start from?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771353">
				<div id="div-comment-771353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771353">
			September 25, 2009 at 4:45 pm</a>		</div>

		<blockquote><p>
  &gt; Don&#8217;t you have to get the <em>same</em> (IUnknown*) if you query for IID_IUnknown, regardless which subinterface you start from?
</p></blockquote>
<p>You most certainly do, and in theory the same is true of IDispatch, which can make implementing multiple dual interfaces interesting.</p>
<p>While on the QI implementation, throw in IMultiQI and also being an &quot;inner&quot; object of some &quot;outer&quot; object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771363">
				<div id="div-comment-771363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771363">
			September 25, 2009 at 6:26 pm</a>		</div>

		<p>&quot;Don&#8217;t you have to get the <em>same</em> (IUnknown*) if you query for IID_IUnknown, regardless which subinterface you start from?&quot;</p>
<p>Oops. Seems like I learned something today.</p>
<p>Time to go check my code for violations of this rule.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771373">
				<div id="div-comment-771373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771373">
			September 25, 2009 at 6:51 pm</a>		</div>

		<p>HJB417: Or, maybe you could write your own unit tests. &nbsp;But lets face it, there are enough inventive idiots out there that are going to screw up in ways unimagined in third party code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771143">
				<div id="div-comment-771143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dgt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771143">
			September 25, 2009 at 11:59 am</a>		</div>

		<p>modification of QI specifically for Sunil Joshi:</p>
<p>HRESULT CSomething::QueryInterface(REFIID riid, void **ppvObj)</p>
<p>{</p>
<p> &nbsp;*ppvObj = this;</p>
<p> &nbsp;this-&gt;AddRef();</p>
<p> &nbsp;this-&gt;iid = riid;</p>
<p> &nbsp;return S_OK;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771193">
				<div id="div-comment-771193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771193">
			September 25, 2009 at 12:36 pm</a>		</div>

		<p>I just realized that by my &#8220;interface table&#8221; idea I just totally described the QITAB structure.</p>
<p>Here&#8217;s an improvement on this idea though, and on Sunil&#8217;s &#8220;IID after vtbl&#8221; idea: why not make it so&#8230;</p>
<p>struct IUnknown</p>
<p>{</p>
<p>&nbsp;struct IUnknownVtbl</p>
<p>&nbsp;{</p>
<p>&nbsp; &nbsp; void* fpAddRef;</p>
<p>&nbsp; &nbsp; void* fpRelease;</p>
<p>&nbsp; &nbsp; QITAB* pInterfaces;</p>
<p>&nbsp;} lpVtbl;</p>
<p>}</p>
<p>(I can&#8217;t be bothered to look up the proper types, so &#8220;void*&#8221;&#8216;s the function pointer type for those declarations)</p>
<p>Now the advantage of it, is that:</p>
<p>&#8211; Vtables can inherit again.</p>
<p>&#8211; The QITAB array can be compiler-generated (maybe with a custom __declspec(cominterface) on the class to tell the compiler to put it there).</p>
<p>&#8211; In cases of objects with &#8220;dynamic&#8221; interface tables, the object can still, if it wishes, dynamically generate this table, allowing proxying and remoting (just copy the source object&#8217;s table and modify to your will).</p>
<p>&#8211; No hassle of ever having to code QueryInterface.</p>
<p>&#8211; A separate API, CoQueryInterface, could be provided to do the hard work.</p>
<div class=post>[<i>You&#8217;d just have different blog entries about applications which fill in their QITAB incorrectly. Oh, and your QITAB needs to have an additional entry to specify the offset from the IUnknown instance to the base of the object. And I bet most people will just put 0 there, and the code will work fine until they add multiple inheritance to their class. (Assuming the compiler folks will supoprt this natively is already contradicted by evidence: It&#8217;s been over a decade and we still don&#8217;t have __declspec(cominterface) that would auto-implement QI. What makes you think that in this alternate universe, the compiler folks would have a __declspec(cominterface) that auto-implements QI?) Note also that CoQueryInterface means that you can&#8217;t have COM without ole32.dll. In its purest form, COM can be implemented without any helper libraries, and in fact <a href="http://blogs.msdn.com/oldnewthing/archive/2004/07/05/173226.aspx" rel="nofollow">many people did exactly that when memory was scarce</a>. Oh, and C++ vtables can&#8217;t have data pointers so you already lost the C++ people. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771383">
				<div id="div-comment-771383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771383">
			September 25, 2009 at 7:42 pm</a>		</div>

		<p>The only way to really prevent people from doing things like this in all scenarios is by using a virtual machine, and that just moves the problem around a bit. It crashes/throws and exception a bit earlier, which may be nice, but not nice enough to want to force everyone to write solely in Java or Dotnet. At the end of the day, you simply can&#8217;t force people to stop writing buggy code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771393">
				<div id="div-comment-771393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771393">
			September 25, 2009 at 8:13 pm</a>		</div>

		<p>&lt;blockquote&gt;Remember that your design must be language-independent&lt;/blockquote&gt;</p>
<p>How so? You&#8217;re assuming a C++ vtable-like model, and your answers imply that you expect a few minor tweaks to existing (circa 1993) C++ compilers to ensure the COM-style layout. Anything not C++ needs to adapt in some way. You can code COM in C with some pain, but you can code anything in C with varying degrees of pain. What does language-independent mean in this context?</p>
<p>If you truly mean language independence, one answer would be Objective-C, the contemporary version of which you could&#8217;ve coded in raw C with far less fuss than the equivalent COM incantations. A few more cycles for dynamic lookup, but a <em>lot</em> less programmer time wasted over the years.</p>
<div class=post>[<i>By &#8220;language-independent&#8221; I mean something that was amenable to being used by multiple languages without too much difficulty. You&#8217;d be surprised how much COM code was written in straight C back in the days before C++ hit the big time. It wasn&#8217;t really all that bad. p-&gt;Method(x) became p-&gt;lpVtbl-&gt;Method(p, x), that&#8217;s about it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771413">
				<div id="div-comment-771413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771413">
			September 25, 2009 at 8:23 pm</a>		</div>

		<blockquote><p>
  &gt; What does language-independent mean in this context?
</p></blockquote>
<p>The ABI of course. An object implemented in one language can be used by another, no matter how painful it was to write in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771223">
				<div id="div-comment-771223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771223">
			September 25, 2009 at 1:23 pm</a>		</div>

		<p>&#8220;You&#8217;d just have different blog entries about applications which fill in their QITAB incorrectly.&#8221;</p>
<p>It&#8217;s harder to do this and have it all wrong, especially with proper macros.</p>
<p>&#8220;What makes you think that in this alternate universe, the compiler folks would have a __declspec(cominterface) that auto-implements QI?&#8221;</p>
<p>Don&#8217;t they already &#8220;support COM&#8221; by making sure the vtable layout is always as described in the declarations? Don&#8217;t they already support SEH, which is another Windows-only construct? Generating data tables from (already known) data during compilation is an easier task than generating proper QI code.</p>
<p>&#8220;your QITAB needs to have an additional entry to specify the offset from the IUnknown&#8221;</p>
<p>Nope, all you need to know, is how to &#8220;go to&#8221; one interface to another&#8230; imagine this scenario:</p>
<p>public class Blah : IInterface1, IInterface2</p>
<p>Class layout will be</p>
<p>struct Blah</p>
<p>{</p>
<p>&nbsp;IInterface1Vtbl*;</p>
<p>&nbsp;IInterface2Vtbl*;</p>
<p>&nbsp;&lt;object fields&gt;</p>
<p>};</p>
<p>IInterface1Vtbl-&gt;pQITab will be</p>
<p>{</p>
<p>&nbsp;IID_IUnknown, 0</p>
<p>&nbsp;IID_IInterface1, 0</p>
<p>&nbsp;IID_IInterface2, 4 </p>
<p>}</p>
<p>IInterface2Vtbl-&gt;pQITab will be</p>
<p>{</p>
<p>&nbsp; IID_IUnknown, 0</p>
<p>&nbsp; IID_IInterface1, -4</p>
<p>&nbsp; IID_IInterface2, 0</p>
<p>}</p>
<p>So a QueryInterface just gets the pQITab from this-&gt;vtbl, finds the proper IID, and adds the offset to the original this, and returns it. No need to ever store an offset to the base of the real object, that&#8217;s what adjustor thunks are for anyway.</p>
<p>&#8220;Oh, and C++ vtables can&#8217;t have data pointers so you already lost the C++ people.&#8221;</p>
<p>That&#8217;s the point of having compiler support here. So that it can generate this &#8220;special vtable&#8221;.</p>
<p>Althout it could be replaced by a &#8220;GetInterfaceTable&#8221; function, but then it would be hard to find out which QITAB to return (because then, the &#8220;original&#8221; thisptr has been adjusted to the real one already)</p>
<div class=post>[<i>Okay, I see, baking the offsets into the table. Though this means that an object that derives from n interfaces requires O(n^2) space for QI. Let&#8217;s hope n stays small. The nice thing about the existing model is that it matches C++ very closely &#8211; as long as you can convince the compiler to put functions in the vtable in declaration order, you&#8217;re all set &#8211; something most compilers did already anyway. &#8220;Hey, here&#8217;s a new interop framework, but you have to wait for compiler support before you can use it.&#8221; and you still need some sort of way of overriding this for tear-offs and remote object. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771423">
				<div id="div-comment-771423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771423">
			September 25, 2009 at 8:38 pm</a>		</div>

		<p>I pity the &quot;foo&quot; who accepts Raymond&#8217;s challenge.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771443">
				<div id="div-comment-771443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771443">
			September 25, 2009 at 10:52 pm</a>		</div>

		<p>Just have Windows require all such objects to report a valid email you can send complains to about how poorly it was designed. Sending complaint letters won&#8217;t fix anything, but you will feel a bit better.</p>
<p>I&#8217;m afraid this is the sort of thing no amount of documentation or tooling can fix. I&#8217;m ever amazed by the number of c++ classes out there that have memory leaks or exceptions if you do self assignment because people failed to consider the possibility. People need to experience the problem before they learn the correct practices.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771453">
				<div id="div-comment-771453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Windows 8 Team</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771453">
			September 25, 2009 at 11:20 pm</a>		</div>

		<p>I&#8217;d just like to thank all the commenters for giving us insightful information about how to resolve these issues.</p>
<p>And thank, you, Raymond, for making these people un-invisible.</p>
<p>Monty thanks you</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771463">
				<div id="div-comment-771463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frymaster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771463">
			September 25, 2009 at 11:55 pm</a>		</div>

		<p>&quot;The simple solution to this whould have been to not let people code it themselves.</p>
<p>Aka: The QISearch helper function should have been there since the very beginning, and people strongly encouraged by the docs to never, ever code QueryInterface themselves, just delegate the work to this API.&quot;</p>
<p>agreed, but assuming you leave them the option to use the lower level techniques, someone is going to use them and use them poorly. &nbsp;And if you don&#8217;t let people use the lower level techniques,</p>
<p>a) someone will complain they can&#8217;t do something interesting and possibly even useful</p>
<p>b) people will complain about undocumented APIs that MS can use but they can&#8217;t. &nbsp;possibly even the same people who don&#8217;t read the documentation properly in the first place</p>
<p>the solution, as far as I can see, is to let someone else write your OS, and just code in java or c# or python or whatever unless you&#8217;re doing something like a real-time application or a driver, in which case you cry ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771523">
				<div id="div-comment-771523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dgt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771523">
			September 26, 2009 at 12:42 pm</a>		</div>

		<p>Peter: say hello to CComObject</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771543">
				<div id="div-comment-771543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771543">
			September 26, 2009 at 3:59 pm</a>		</div>

		<p>CoreFoundation/CFPlugInCOM.h</p>
<p>See how Apple stuffed up IUnknown::QueryInterface they defined REFIID as a CFUUID, not a pointer, not a reference, so all QIs get the full 16bytes on the stack. All the samples of plugins I&#8217;ve seen have the QueryInterface allocating and releasing CFUUIDRef in order to do the IID matching using CFEqual.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771513">
				<div id="div-comment-771513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771513">
			September 26, 2009 at 11:23 am</a>		</div>

		<p>Hello. &nbsp;My name is Peter, and I wrote a non-conforming COM object just yesterday.</p>
<p>Why? &nbsp;Because I did&#8217;t know if the API I was targeting would even remotely work in a useful way &nbsp;and it turns out that I&#8217;m not a very experienced COM programmer. &nbsp;So instead of wasting tens of minutes finding correct code for addref and release, I just set them to return &#8216;1&#8217;.</p>
<p>I needed a real QueryInterface, though. &nbsp;Turns out I was asked for several different interfaces that I didn&#8217;t support. </p>
<p>Here&#8217;s what Microsoft could do to make the problem easier: make a &#8216;CUnknown&#8217; that implements the bare bones of a correct interface. Then Microsoft just has to update all of the examples to use the new helper class. That way people always have a reasonable solution right away.</p>
<p>Peter</p>
<p>(PS: I&#8217;m a novice COM programmer. &nbsp;I&#8217;m really rather a good non-COM programmer)</p>
<div class=post>[<i>The bare bones of a correct IUnknown object is just one two-line function and two one-line fuctions. </p>
<pre>class CUnknown : public IUnknown {
public:
 CUnknown() : m_cRef(1) { }
 HRESULT QueryInterface(REFIID riid, void **ppv) {
  if (iid != IID_IUnknown) { *ppv = NULL; return E_NOINTERFACE; }
  *ppv = static_cast&lt;IUnknown*&gt;(this); AddRef(); return S_OK;
 }
 ULONG AddRef() { return ++m_cRef; }
 ULONG Release() { ULONG cRef = &#8211;m_cRef; if(!cRef) delete this; return cRef; }
private:
 ULONG m_cRef;
};
</pre>
<p>Since it&#8217;s so simple, all the samples just inline these three methods. The problem is that nobody wants a bare-bones interface because it does nothing. It is in the process of making it do something interesting (i.e., deriving from it, responding to interfaces other than IUnknown) that the bugs are introduced. There&#8217;s also ATL, which does most of the heavy lifting for you, but using ATL in samples creates frustration for people who don&#8217;t want to use ATL. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771553">
				<div id="div-comment-771553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771553">
			September 26, 2009 at 11:11 pm</a>		</div>

		<p>I managed to trim down deriving from CUnknown to:</p>
<p>&lt;code&gt;</p>
<p>class CFoo : public CUnknown, public IFoo {</p>
<p>void* GetInterface(REFIID riid) {</p>
<p>&nbsp;if (IID_IFoo == riid) return static_cast&lt;IFoo*&gt;(this);</p>
<p>&nbsp;return CUnknown::GetInterface(riid); } // or CFooBase&#8230;</p>
<p>&#8230;</p>
<p>};</p>
<p>&lt;/code&gt;</p>
<p>I did run into some problems with the double deriving from IUnknown so I was also using a macro that forwards the IUnknown methods to CUnknown, and I wanted to be able to allocate globals and on the stack, so I had Release call OnNoReference instead of &#8216;delete this&#8217; directly, but overall it makes creating COM classes a breeze. Creating COM *objects*, now&#8230;</p>
<div class=post>[<i>On the stack? What if the reference count isn&#8217;t zero when the stack object goes out of scope? I&#8217;ve had to chase down real bugs caused by people destroying objects before the reference count goes to zero. Please don&#8217;t be another one. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771583">
				<div id="div-comment-771583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771583">
			September 27, 2009 at 7:17 am</a>		</div>

		<p>@porter: Care to explain?</p>
<p>Do you see any advantage of a pass-by-value of the IID, or do you comlain that most use it incorrectly?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771603">
				<div id="div-comment-771603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771603">
			September 27, 2009 at 11:32 am</a>		</div>

		<p>[I&#8217;m the &#8216;Peter&#8217; who said there should be an CUknown class and that all the samples should use it.]</p>
<p>Several people helpfully pointed out that a correct implementation of IUnknown is easy and that the sample code simply implements the three methods inline. &nbsp;Other people pointed to CComObject.</p>
<p>So I did quick test: &quot;IUnknown site:msdn.microsoft.com&quot;. &nbsp;Of the top 10 results (via Bing, of course), not a single one shows actual sample code. &nbsp;There was one sample implementation written in pseudocode. &nbsp;There also was a CUnknown object (yay!) but it&#8217;s not part of mainstream windows, and confusingly doesn&#8217;t actually derive from IUnknown. &nbsp;The CComObject mechanism didn&#8217;t show up in the results.</p>
<p>So: there are convenience functions, but they aren&#8217;t actually findable. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771613">
				<div id="div-comment-771613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771613">
			September 27, 2009 at 11:44 am</a>		</div>

		<blockquote><p>
  &gt; Do you see any advantage of a pass-by-value of the IID, or do you comlain that most use it incorrectly?
</p></blockquote>
<p>I think it&#8217;s a mistake on Apple&#8217;s part. The COM ABI standard has REFIID as pointer to the IID. It saves memory on the stack and is fewer bytes to push. I saw an Apple document on CFPlugInCOM dated 1999 in which the text claimed that REFIID mapped to &quot;&amp; IID&quot; but the header file didn&#8217;t tally. That mistake has proliferated. So the question is, does this tally with Microsoft Office on Mac? If not you have two incompatible specifications of IUnknown on the same platform. Also their spec of CFUUIDBytes is shot to bits (and hence GUID/IID/CLSID), it was possibly passable with 68k and PPC, but it is broken with i386, especially with how CFUUIDRef converts to and from string.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771573">
				<div id="div-comment-771573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771573">
			September 27, 2009 at 7:16 am</a>		</div>

		<p>IMO trying to make an interface unbreakable is a highway to disaster. </p>
<p>An interface should be easy to use correctly, and hard to use incorrectly. Beyond that, other factors &#8211; simplicity, well-factoredness etc. &#8211; need totake over.</p>
<p>Not only is an unbreakable interface about ten or 100 or infinity times as hard as one that&#8217;s robust enough. Worse, there&#8217;s a responsibility shift: If I succeed to break it, it&#8217;s suddenly not my fault anymore. That&#8217;s about the worst start you could have given me.</p>
<p>I have some years of COM under my belt (It&#8217;s showing :)) and it&#8217;s hard to understand the calls for &quot;more code to fix the existing code&quot;. We do have great documentation and the rules are rather simple. </p>
<p>The worst thing MS did (and does) is using raw QueryInterface implementations even in unrelated examples. Unfortunately that&#8217;s what they have to to keep it framework-independent, But that also signals this is the way to go for many programmers. (No I don&#8217;t have an idea how to make it better. As long as fixing the *programmers* is still out of question) </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-771633">
				<div id="div-comment-771633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771633">
			September 27, 2009 at 2:31 pm</a>		</div>

		<blockquote><p>
  Here&#8217;s what Microsoft could do to</p>
<p>  make the problem easier: make a &#8216;CUnknown&#8217;</p>
<p>  that implements the bare bones of a correct interface.
</p></blockquote>
<p>it&#8217;s all in ATL, that&#8217;s what it&#8217;s for.</p>
<p>also, in the code in SDK samples that implement COM interfaces.</p>
<blockquote><p>
  So I did quick test: &quot;IUnknown &nbsp;site:msdn.microsoft.com&quot;.
</p></blockquote>
<p>imho It rarely makes no sense to want to implement IUnknown by itself. Usually you implement it for a reason. &nbsp;</p>
<p>but anyway, why don&#8217;t you be a search wiz and chnage your search to:</p>
<p>&quot;IUnknown implementation site:msdn.microsoft.com&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-771643">
				<div id="div-comment-771643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.farnz.org.uk/' rel='external nofollow' class='url'>Simon Farnsworth</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-771643">
			September 27, 2009 at 3:14 pm</a>		</div>

		<p>This whole discussion about how to make the API &quot;unbreakable&quot; reminds me strongly of two blog posts by Rusty Russell.</p>
<p>The first, at <a rel="nofollow" target="_new" href="http://ozlabs.org/~rusty/index.cgi/tech/2008-03-30.html" rel="nofollow">http://ozlabs.org/~rusty/index.cgi/tech/2008-03-30.html</a>, discusses good API design; it lists 10 possible classifications of a good API, from best (the do_what_i_mean() function), to worst (read the right forum posting, blog post, or e-mail archive, and you&#8217;ll get it right).</p>
<p>The second, at <a rel="nofollow" target="_new" href="http://ozlabs.org/~rusty/index.cgi/tech/2008-04-01.html" rel="nofollow">http://ozlabs.org/~rusty/index.cgi/tech/2008-04-01.html</a>, is far more fun to read &#8211; it&#8217;s all about ways you can misdesign an interface, from &quot;read the right e-mail archive, and you&#8217;ll get it wrong&quot; down to &quot;whatever you do, you&#8217;ll get it wrong&quot;.</p>
<p>They make for sobering reading, not least because it quickly becomes apparent that designing an interface well is hard. On Rusty&#8217;s scale of 10 to -10, I&#8217;d rate the COM interface at around a 4 (follow common convention, and you&#8217;ll get it right).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-772373">
				<div id="div-comment-772373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DysgraphicProgrammer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-772373">
			September 29, 2009 at 10:14 am</a>		</div>

		<p>Have something in the background ask object if it supports some guaranteed non existent interface. If it says &#8216;yes&#8217;, automatically email Microsoft&#8217;s goon squads to go and stab the programmer in the eye.</p>
<p>Granted, it won&#8217;t fix every bug, but it should improve the general pool of programming talent.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-772593">
				<div id="div-comment-772593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">goonie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-772593">
			September 29, 2009 at 3:51 pm</a>		</div>

		<p>@DysgraphicProgrammer:</p>
<p>You can be sure you wouldn&#8217;t be reading this blog&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-773403">
				<div id="div-comment-773403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090925-00/?p=16583#comment-773403">
			October 2, 2009 at 3:45 am</a>		</div>

		<p>COM is not an interface. It&#8217;s an interface interface.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>