<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1144643">
				<div id="div-comment-1144643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144643">
			August 15, 2014 at 7:08 am</a>		</div>

		<p>Mini-Exercise &#8211; that would be a constant expression evaluated at compile time, not runtime.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144653">
				<div id="div-comment-1144653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">OldFart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144653">
			August 15, 2014 at 7:44 am</a>		</div>

		<p>I wish one week a month could be CLR Week.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144663">
				<div id="div-comment-1144663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144663">
			August 15, 2014 at 7:57 am</a>		</div>

		<p>I would like to leave the unmanaged scope.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144673">
				<div id="div-comment-1144673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144673">
			August 15, 2014 at 8:04 am</a>		</div>

		<p>If you think about this from the JIT compiler&#39;s point of view, it&#39;s pretty obvious. &nbsp;If an arithmetic expression is unchecked, compile it directly to an add/mul/whatever opcode. &nbsp;If the expression is checked, compile it to an add/mul and put in a &quot;jo ThrowOverthrowException&quot; instruction afterwards (jump-if-overflow-flag-is-set, or whatever your ISA&#39;s equivalent of that is for non-x86).</p>
<p>x86 doesn&#39;t have any kind of global processor state that says &quot;raise an interrupt if an arithmetic overflow occurs while this flag is set,&quot; which could be used if checked/unchecked were dynamic in scope. &nbsp;And implementing that functionality in software would be prohibitively expensive—every arithmetic operation would have to check that checked/unchecked state. &nbsp;So now your simple add instruction is now an add, a load (probably from TLS or a dedicated register which can no longer be used by the application), a cmp, and a jCC.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144683">
				<div id="div-comment-1144683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144683">
			August 15, 2014 at 8:04 am</a>		</div>

		<p>@ OldFart,</p>
<p>I will second that motion.</p>
<p>Question for Raymond: I understand you aren&#39;t the biggest fan of the managed code environment. &nbsp;Can you shed some light on your thoughts in that regard?</p>
<div class="post">[<em>You understand incorrectly. I don&#39;t write about it because&nbsp;managed code is&nbsp;not my area of expertise, and because focusing on Win32 gives me a more exclusive niche; not because I don&#39;t like managed code. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144743">
				<div id="div-comment-1144743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144743">
			August 15, 2014 at 12:26 pm</a>		</div>

		<p>Does C# define int.MinValue / -1 as throwing an exception on all architectures? &nbsp;I don&#39;t know C# well enough to know the rules at this level. &nbsp;(I did write a PE loader in C# using P/Invoke without unsafe types, though, which was pretty crazy.)</p>
<p>Does C# promote everything smaller than &quot;int&quot; to &quot;int&quot;? &nbsp;And if so, does it behave like C/C++, where unsigned integers smaller than &quot;int&quot; promote first to &quot;signed int&quot; rather than &quot;unsigned int&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144753">
				<div id="div-comment-1144753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144753">
			August 15, 2014 at 12:34 pm</a>		</div>

		<p>@ Raymond, thanks for the clarification!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144763">
				<div id="div-comment-1144763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesNT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144763">
			August 15, 2014 at 1:46 pm</a>		</div>

		<p>While I certainly do enjoy Mr. Chen&#39;s articles on unmanaged code, I do assert that I also thoroughly enjoy his articles on Windows&#39; history and I do enjoy CLR week. &nbsp;It would not bother me at all if Mr. Chen &quot;evened things out&quot; a bit more (e.g. there were suddenly three CLR weeks a year and more articles on history).</p>
<p>JamesNT</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144813">
				<div id="div-comment-1144813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144813">
			August 15, 2014 at 9:58 pm</a>		</div>

		<p>@JamesNT: I almost never work with .NET, but don&#39;t mind Raymond&#39;s occasional forays into Manageland. &nbsp;I always learn interesting things in them! =^-^=</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144823">
				<div id="div-comment-1144823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144823">
			August 16, 2014 at 5:29 am</a>		</div>

		<p>How about a CLR Month?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144833">
				<div id="div-comment-1144833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smeargle235</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144833">
			August 16, 2014 at 6:10 am</a>		</div>

		<p>@Myria</p>
<p>C# does not define any operators for any type smaller than int (32-bit signed integer). Therefore, any 16- or 8-bit integer, signed or unsigned, will be automatically promoted to int before any arithmetic is done.</p>
<p>uint (unsigned 32-bit int), long (signed 64-bit int), and ulong (unsigned 64-bit int) have their own operators defined, and will return the appropriate type. I can&#39;t tell you off the top of my head what type an operation between a uint and a signed int will return, but the spec makes sure to say that an operation between a signed and unsigned long will cause an error.</p>
<p>Source: ECMA-334 §14.7.4</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144843">
				<div id="div-comment-1144843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144843">
			August 16, 2014 at 8:49 am</a>		</div>

		<p>&gt;Which makes sense if you think about it, because in order to define an overloaded operator or an operator on a custom class, you need to write the implementation as a separate function, in which case you have already left the scope of the checked and unchecked keywords. </p>
<p>That does not make sense if you continue thinking.</p>
<p>Theoretically it could allow you to write two different methods for every overloaded operator, one used in the unchecked mode and the other in the checked mode</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144853">
				<div id="div-comment-1144853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144853">
			August 16, 2014 at 5:04 pm</a>		</div>

		<p>@Smeargle235 c# actually has sane rules for dealing with types of different signedness.</p>
<p>uint + int = long &nbsp; while</p>
<p>ulong + long = compiler error</p>
<p>Knuth be thanked for that, c&#39;s rule for integer promotion are horribly arcane &#8211; the right thing is to force the user to be explicit if you can&#39;t guarantor that the result is intuitively correct.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144863">
				<div id="div-comment-1144863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">user</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144863">
			August 17, 2014 at 8:41 am</a>		</div>

		<p>Off topic</p>
<p>Raymond you always write about bad practices some people take when coding and most of them are funny, I want to thank you for that, but I also like to ask you to tell us about great works you witnessed people outside Microsoft have done.</p>
<p>Thanks.</p>
<div class="post">[<em>Few people contact Microsoft to say, &quot;Here&#39;s something awesome we did. Please review it in order to confirm its awesomeness.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144873">
				<div id="div-comment-1144873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144873">
			August 18, 2014 at 2:39 am</a>		</div>

		<p>I&#39;d be really nervous if someone could change a global setting like &quot;checked integer operations&quot; before calling my code that was written assuming a different value of the setting</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144883">
				<div id="div-comment-1144883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The_Assimilator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144883">
			August 18, 2014 at 4:00 am</a>		</div>

		<p>Raymond, for someone who claims &quot;managed code is not my area of expertise&quot;, you sure do a good job of making the exact opposite appear true. Thanks for CLR Week 2014, and as other posters have noted, a more frequent version would be something greatly appreciated.</p>
<div class="post">[<em>You&#39;re seeing selection bias. I have an entire year to find five things to look smart about. If CLR Week were more frequent, the quality would be lower. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1144893">
				<div id="div-comment-1144893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144893">
			August 18, 2014 at 6:38 am</a>		</div>

		<p>@Myria, Smeargle235: It becomes nonsensical when you try to add (or worse, apply a bitwise operator to) (u)short or byte numbers. &quot;ushort a=3, b=5, c; c = a &amp; b&quot; will cause a compilation error.</p>
<p>But &quot;ushort a=3, b=5, c; c = a; c &amp;= b&quot; will not: the assignment+operation operators automatically include a cast (meaning the operands will be promoted, the operation evaluated, and then truncated).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1145113">
				<div id="div-comment-1145113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1145113">
			August 18, 2014 at 1:38 pm</a>		</div>

		<p>@medinoc that has nothing to do with signedness &#8211; both java and c# widen input to at least int sizes, which I think mostly has to do with implementation simplicity (also saves byte codes do denser code). </p>
<p>Also tbh I have no idea what c does there, I seriously can&#39;t remember when I had smaller than int sized operands for bit ops. </p>
<p>I agree that the behavior for the compound operands is horrible though! </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1145153">
				<div id="div-comment-1145153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1145153">
			August 18, 2014 at 2:16 pm</a>		</div>

		<p>I don&#39;t really understand how static/dynamic scope applies to the checked statement &#8211; But when you read the documentation it does make sense &#8211; The overflow has already occured in multiply() and a function call is not listed as something checked works on anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1145173">
				<div id="div-comment-1145173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1145173">
			August 18, 2014 at 3:37 pm</a>		</div>

		<p>[Few people contact Microsoft to say, &quot;Here&#39;s something awesome we did. Please review it in order to confirm its awesomeness.&quot; -Raymond]</p>
<p>I could if you wanted. Although in this case it is peverse awesomeness.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1145303">
				<div id="div-comment-1145303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1145303">
			August 19, 2014 at 7:43 am</a>		</div>

		<p>@voo: C has mostly the same behavior—for integer types smaller int, it widens the operands to int (or unsigned int in rare cases) as part of the *usual arithmetic conversions* (it also then converts both operands to a common type, in case they differ in signedness or if either operand is wider than int). &nbsp;From C99 §6.3.1.8/1:</p>
<p>&quot;First, [some cases about long double, double, and float]. &nbsp;Otherwise, the integer promotions are performed on both operands. Then the following rules are applied to the promoted operands: [&#8230;]&quot;</p>
<p>§6.3.1.1/2, on integer promotions:</p>
<p>&quot;If an int can represent all values of the original type, the value is converted to an int; otherwise, it is converted to an unsigned int. These are called the integer promotions.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>