<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1349155">
				<div id="div-comment-1349155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180627-00/?p=99105#comment-1349155">
			June 27, 2018 at 7:58 am</a>		</div>

		<p>Having algorithms that are easy to read and comprehend is an important point, one that is often overlooked when you are in the heat of code-designing and code-writing.  I have gone back into my old code, on occasion, and found a hard-to-follow algorithm.  when algorithms are hard to understand, then fixes or enhancements are probably more likely to be incorrect.</p>
<p>And woe to those who try to tell me that comments in code are not important, or that &#8220;the code IS the comments&#8221;.  Bah to that!  Well-crafted comments explain WHY the code is doing what it&#8217;s doing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fjeldse odd alt thread-odd thread-alt depth-1 parent" id="comment-1349165">
				<div id="div-comment-1349165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180627-00/?p=99105#comment-1349165">
			June 27, 2018 at 12:01 pm</a>		</div>

		<p>Isn&#8217;t a busy flag just a lock with another name?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1349185">
				<div id="div-comment-1349185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180627-00/?p=99105#comment-1349185">
			June 27, 2018 at 1:35 pm</a>		</div>

		<p>No, because this busy flag doesn&#8217;t cause anybody to block. This busy flag is to optimize our spurious wakes. How about if I had called it <code>alreadyWorking</code>?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1349515">
				<div id="div-comment-1349515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180627-00/?p=99105#comment-1349515">
			June 29, 2018 at 8:42 am</a>		</div>

		<p>Every time I see &#8220;order is, or is not, important&#8221;, I think about something a programmer friend told me &#8212; that painting a house blue and then painting it red is not the same as painting it red and then painting it blue.  On the other hand, adding flour and then sugar to a bowl, and mixing, has (usually) the same result as adding sugar and then flour, and mixing.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1349585">
				<div id="div-comment-1349585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aged .Net Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180627-00/?p=99105#comment-1349585">
			June 30, 2018 at 12:55 pm</a>		</div>

		<p>Then again, in many producer consumer interactions there&#8217;s a significant difference between &#8220;order not strictly required&#8221;, and &#8220;LIFO is <i>always</i> acceptable&#8221;.  e.g. Most of us can tolerate the reality at the grocery store that with several independent lines and cashiers, we probably won&#8217;t finish our transaction in strict FIFO versus our arrival time at the checkstand cluster.  But it&#8217;ll be close to that for squishy values of &#8220;close&#8221;.  But imagine applying LIFO to a time when the crowd is growing and the cashiers can&#8217;t keep up.  That would be Not Good.</p>
<p>I suppose my punch line is that a LIFO consumer solution meets the letter of the law for &#8220;order not important&#8221;, but oft times not the spirit.  IOW for many practical producer / consumer patterns, there&#8217;s an implicit notion that the ordering won&#8217;t get too far out of whack vs FIFO. With a design using LIFO consumption, there&#8217;s no upper limit to the wait time of the pathological case despite total system throughput goals still being met.  I bet that&#8217;d usually get logged as a bug during perf testing.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1350325">
				<div id="div-comment-1350325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dennis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180627-00/?p=99105#comment-1350325">
			July 5, 2018 at 7:23 am</a>		</div>

		<p>As far as I can tell, the proposed code does not remove the window; it only shortens it to after the InterlockedExchange(&amp;busy, 0);</p>
<p>(I suppose that the &#8220;this&#8221; in &#8220;you could fix this&#8221; refers to &#8220;race window is open for most of the loop&#8221;, not spurious wakes in general.)</p>
<p>It should be possible to completely eliminate spurious wakes by turning busy into a counter, but perhaps it would be simpler to use the InterlockedFlushSList from the FIFO version. (You can skip reversing the list since order doesn&#8217;t matter.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>