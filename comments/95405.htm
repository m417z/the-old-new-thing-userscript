<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1284045">
				<div id="div-comment-1284045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284045">
			February 10, 2017 at 7:47 am</a>		</div>

		<p>Is this how System::Threading::Interlocked::Exchange(T%, T) (from .Net 3.5 onwards) works?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fredericmagnyf odd alt depth-2 parent" id="comment-1284055">
				<div id="div-comment-1284055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284055">
			February 10, 2017 at 7:49 am</a>		</div>

		<p>Whoops, I misread the first paragraph, my bad.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1284115">
				<div id="div-comment-1284115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284115">
			February 10, 2017 at 9:22 am</a>		</div>

		<p>But to answer your question, no, this approach is insufficient for .NET tracking handles.  In particular, the second parameter to InterlockedExchangePointer is passing a pointer *by-value*, and the garbage collector isn&#8217;t aware of this copy, because it&#8217;s a native type, exposing a race condition.  Should the garbage collector run between argument setup and the actual interlocked instruction, and moves the object, it won&#8217;t update the by-value copy of the pointer, and the result is a dangling tracking handle.<br />
I&#8217;m not sure how System::Threading solves this, it could either be by forcing inclusion of the intermediate copies in the metadata used by the garbage collector, by suspending garbage collection for the length of the function call, or pinning the objects which are targets of the tracking handles being exchanged.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fredericmagnyf odd alt depth-4" id="comment-1284225">
				<div id="div-comment-1284225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284225">
			February 11, 2017 at 4:16 am</a>		</div>

		<p>Thanks for this info.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1284065">
				<div id="div-comment-1284065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284065">
			February 10, 2017 at 7:59 am</a>		</div>

		<p>My main concern with the code is that it&#8217;s a template and it could be inlined. Once inlined, and given that the pointers are being reinterpret_cast, I&#8217;d be afraid of what conmpiler optimization could go wrong, given that the change of bits is hidden from teh compiler.</p>
<p>Imagine the following code:</p>
<p>XYZ^ ptr = &#8230;;</p>
<p>if (ptr) { &#8230; } // now compiler can assume to already know if ptr is null or not.</p>
<p>InterlockedExchange(&#8230;); // inlined, so compiler &#8220;knows&#8221; the implementation but some of it uses reinterpret_cast</p>
<p>if (ptr) { &#8230; } // Maybe compiler optimize this second null check?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1284195">
				<div id="div-comment-1284195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284195">
			February 10, 2017 at 3:50 pm</a>		</div>

		<p>In theory, but not in any scope you care about. The call chain eventually calls InterlockedExchange, which can&#8217;t be inlined and for which the compiler must assume can do anything to stuff at global scope. So all you have to do is make sure it isn&#8217;t a stack reference (or what&#8217;s the point of InterlockedExchange). Static doesn&#8217;t put you back to disaster because the compiler can&#8217;t know InterlockedExchange isn&#8217;t mutually recursive with you.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev even depth-3" id="comment-1284485">
				<div id="div-comment-1284485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284485">
			February 13, 2017 at 9:42 am</a>		</div>

		<p>InterlockedExchange is an intrinsic function, but the compiler knows not to optimize it any further.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1284175">
				<div id="div-comment-1284175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284175">
			February 10, 2017 at 1:39 pm</a>		</div>

		<p>Man those /CX posts have some fun comments.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1284285">
				<div id="div-comment-1284285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Haim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284285">
			February 12, 2017 at 3:11 am</a>		</div>

		<p>Microsoft, about year 2010:<br />
Manager: &#8220;OK guys, focus! what do we know about C++ developers?&#8221;<br />
Worker A:&#8221;They&#8217;re religious about their practices and they hate anything that even remotely resemble manged code&#8221;<br />
Manager: &#8220;OK great, what else? time is wasting guys!&#8221;<br />
Worker B: &#8220;They hate COM so bad they prefer roll their own implementation instead&#8221;<br />
Manager: &#8220;OK then, here&#8217;s an idea: will take good old COM, and extend C++ with ugly symbols to support COM, and it will look like F****** C#!&#8221;<br />
Workers: clamp heavily.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-3" id="comment-1284495">
				<div id="div-comment-1284495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284495">
			February 13, 2017 at 9:43 am</a>		</div>

		<p>Don&#8217;t you mean year 2001?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1284275">
				<div id="div-comment-1284275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284275">
			February 12, 2017 at 2:42 am</a>		</div>

		<p>Disabling template deduction for value would be another possibility. Or you could use std::enable_if and std::is_convertible if you&#8217;re worried about overload resolution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-even depth-1" id="comment-1284315">
				<div id="div-comment-1284315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284315">
			February 12, 2017 at 7:54 am</a>		</div>

		<p>I&#8217;ll admit that when I see the hat(^) thing, I originally thought that was an addition to managed C++ code.</p>
<p>You see, most of the variable declarations there are in form of &#8220;Message^ h_Message  = gcnew Message;&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>