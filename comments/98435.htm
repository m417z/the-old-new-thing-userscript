<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1332055">
				<div id="div-comment-1332055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AberAber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180404-00/?p=98435#comment-1332055">
			April 4, 2018 at 7:34 am</a>		</div>

		<p>In MIPS 4400 compilers, after MULT or MULTU operations, compilers would place a NOOP always, I guess because it was so slow and maybe needed two cycles.  Not sure if this was required on MIPS 4000 here.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1332425">
				<div id="div-comment-1332425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180404-00/?p=98435#comment-1332425">
			April 8, 2018 at 8:02 am</a>		</div>

		<p>MIPS originally meant &#8220;Microprocessor without interlocked pipeline stages&#8221; though it stopped meaning that at some point when later MIPS chips had interlocks. </p>
<p>In the original MIPS there were no interlocks. If you had an instruction that depended on the results of a previous arithmetic instruction then forwarding made it work. For loads that couldn&#8217;t work so the assembler inserted a NOP. It sounds like it was the same on multiplies.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1332075">
				<div id="div-comment-1332075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Clarkstone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180404-00/?p=98435#comment-1332075">
			April 4, 2018 at 8:13 am</a>		</div>

		<p>I was surprised by the separate signed and unsigned multiplication instructions because they are the same operation in 2&#8217;s complement arithmetic. I later realised that that only applies when the output of your multiplication is the same size as both of its inputs.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1332115">
				<div id="div-comment-1332115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180404-00/?p=98435#comment-1332115">
			April 4, 2018 at 12:51 pm</a>		</div>

		<p>This shows up in other architectures too. For example, x86 effectively has three forms of register-times-register multiplication (which, somewhat confusingly, are mapped onto only two different mnemonics, even though they use different opcodes): MUL (no operand) and IMUL (no operand) are unsigned/signed long multiplication respectively (result twice the size of either operand), while &#8220;IMUL dst, src&#8221; is &#8220;dst *= src&#8221; with the result the same size as the operands. There is no &#8220;MUL dst, src&#8221;, and there doesn&#8217;t need to be, because the low half of the full (double-width) product is identical for signed and unsigned two&#8217;s complement multiplies.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1332125">
				<div id="div-comment-1332125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180404-00/?p=98435#comment-1332125">
			April 4, 2018 at 1:22 pm</a>		</div>

		<p>&#8220;If you try to read a value from HI or LO, you must wait two instructions before performing any operation that writes to HI or LO. Otherwise, the reads will produce garbage.&#8221;</p>
<p>That&#8217;s the craziest thing I have ever heard.  I suppose it isn&#8217;t obscure to people who wrote code for this architecture, though.  Glad the &#8220;return garbage&#8221; thing was removed for the R8000.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1332135">
				<div id="div-comment-1332135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180404-00/?p=98435#comment-1332135">
			April 4, 2018 at 2:08 pm</a>		</div>

		<p>&#8220;Thatâ€™s the craziest thing I have ever heard.&#8221;</p>
<p>MIPS was originally designed to make the pipelines completely visible to the programmer and make it their problem. By the R4000 they had relaxed that a little bit, but not entirely.</p>
<p>coprocessors and the multiply/divide aren&#8217;t coupled to the cpu pipeline &amp; when an exception occurs it can roll back the cpu but any upcoming coprocessor or multiply/divide will still be executed and isn&#8217;t rolled back. This becomes a real pain if the instructions aren&#8217;t re-runnable (multiply and divide are, but the PS1 GTE is not as many instructions use the same source and destination registers).</p>
<p>The LR33300 used as a basis for the PS1 CPU is slightly different to the R3000, it&#8217;s both crazy and beautiful.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1332145">
				<div id="div-comment-1332145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180404-00/?p=98435#comment-1332145">
			April 4, 2018 at 2:37 pm</a>		</div>

		<p>Yeah, my thoughts exactly. WHY?! Just&#8230; WHY???</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1332175">
				<div id="div-comment-1332175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180404-00/?p=98435#comment-1332175">
			April 4, 2018 at 4:57 pm</a>		</div>

		<p>These kinds of internal constraints exist in almost all chips &#8211; in this case, likely because the HI/LO registers live off the main integer datapath and don&#8217;t have full bypassing, unlike regular integer registers. The other option would be for the hardware to stall there, but this doesn&#8217;t happen automatically! You need to add logic to determine whether you should stall, you need to tell upstream parts of the pipeline not to deliver new instructions for the next 2 cycles (a long wire which is often a timing bottleneck!), you need to delay any instructions that might have already been delivered for those 2 cycles (&#8220;skid buffers&#8221;, etc.) The R4000 went for the much simpler (from the HW point of view) solution of requiring the compiler (and any assembly-language programmers) to work around it in SW. This keeps the HW straightforward, but long-term, detritus from random implementation details in several chip generations starts accruing in your ISA, and all future HW you build (even if it works quite differently) is stuck with it. MIPS had a few such artifacts, such as the load delay slot (eliminated in the MIPS II architecture revision) and branch delay slots (still present in the R4000, and probably going to be mentioned in one of the forthcoming posts in this series.)</p>
<p>Newer processors tends to avoid exposing such implementation details (outside of more specialized HW like DSPs, where everything goes). HW vendors by now have plenty of experience with the pains that shortcuts in the initial implementations cause. :)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1332245">
				<div id="div-comment-1332245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180404-00/?p=98435#comment-1332245">
			April 5, 2018 at 9:55 am</a>		</div>

		<p>It&#8217;s interesting what choices can be made.  Keep the hardware very simple and fast (which was pretty much the RISC philosophy), vs. make the hardware do a lot of stuff so the programmer doesn&#8217;t have to think about it.</p>
<p>I believe the RISC philosophy was that if you could make the hardware simple enough, it would be so much faster that the same end goals would be accomplished in less time.  Since those years, with advances in all areas of chip design and also in software and compiler design, the same tradeoffs might not be considered good tradeoffs these days.  </p>
<p>If and when programmers keep making the same mistakes due to obscure things in the hardware, where do you put the fix, in hardware or software?  Could go either way&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1332155">
				<div id="div-comment-1332155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://os161.eecs.harvard.edu' rel='external nofollow' class='url'>David Holland</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180404-00/?p=98435#comment-1332155">
			April 4, 2018 at 3:13 pm</a>		</div>

		<p>The issues with HI and LO are pipeline hazards, so the behavior depends on the microarchitecture of the specific model you&#8217;re using, and also on what else is going on. So most of the &#8220;will return garbage&#8221; should be read as &#8220;may return garbage&#8221;&#8230; in other words, will work perfectly well most of the time and occasionally result in nonrepeatable weird behavior.</p>
<p>In the case of the two-cycle delay, the issue arises because the multiply/divide unit state isn&#8217;t reset on exception; so if you MFLO and then start another multiply and then also get an interrupt, the new multiply isn&#8217;t aborted and restarting the MFLO after the exception is handled will get the result from the new multiply. (Likely the exception handler will save and restore HI and LO rather than leaving them untouched, but that produces the same net result.)</p>
<p>Also, on DIV/DIVU: the raw hardware instruction does not check for zero, but the user-visible DIV and DIVU are assembler-level synthetic instructions that insert a zero check (and for DIV, an overflow check) which uses the BREAK instruction to trap. You can issue the raw instruction from the assembler, but you have to specifically write &#8220;div $0, rs, rt&#8221; to get it; otherwise you get the checks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1332395">
				<div id="div-comment-1332395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180404-00/?p=98435#comment-1332395">
			April 7, 2018 at 9:13 am</a>		</div>

		<p>&#8220;you might check if you need to raise a runtime exception because you just asked the processor to divide by zero&#8221;</p>
<p>soo&#8230; first divide, then check for zero? that&#8217;s different..</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1332415">
				<div id="div-comment-1332415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180404-00/?p=98435#comment-1332415">
			April 8, 2018 at 2:39 am</a>		</div>

		<p>Well, if the alternative is stalling while waiting for the division to complete, you might as well use (some of) that time productively.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1332935">
				<div id="div-comment-1332935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180404-00/?p=98435#comment-1332935">
			April 12, 2018 at 3:32 pm</a>		</div>

		<p>If you think about it, that&#8217;s the same behavior as when you&#8217;re relying on the CPU to raise a divide by zero exception.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>