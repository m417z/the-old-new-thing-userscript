<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-201673">
				<div id="div-comment-201673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201673">
			August 6, 2004 at 8:09 am</a>		</div>

		<p>What I&#8217;ve always wondered if it was possible that each process could get all 4 gigs of addressable memory and the kernel gets its own 4 gigs too instead of doing this lower 2 gigs are unique per process and the upper 2 gigs are always the same and belong to the kernel (ignoring PAE and /3GB here)? If so, how come the current design was chosen over that one?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201683">
				<div id="div-comment-201683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">winden</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201683">
			August 6, 2004 at 8:13 am</a>		</div>

		<p>asdf: For speed reasons. Giving 4 gigs to each process would involve changing cr3 register (the main pagetable pointer) on each kernel call, which can also involve a TLB flush on some systems&#8230; some another operating system calls this the &quot;4g/4g split mode&quot;, just in case you want to google it up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201693">
				<div id="div-comment-201693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201693">
			August 6, 2004 at 8:23 am</a>		</div>

		<p>Yeah, if you really need that much memory, you should probably look at the AMD64, or maybe a G5. </p>
<p>As a semi-related aside, I wonder if MS would benefit from porting its server-side apps to Linux. I view the porting of Office as one of the signs of the apocalypse, but MSSQL on Linux might work &#8211; after all, sybase did it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201703">
				<div id="div-comment-201703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Swaim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201703">
			August 6, 2004 at 8:52 am</a>		</div>

		<blockquote><p>
  As a semi-related aside, I wonder if MS would<br />
  <br />&gt;benefit from porting its server-side apps to<br />
  <br />&gt;Linux. I view the porting of Office as one of<br />
  <br />&gt;the signs of the apocalypse, but MSSQL on<br />
  <br />&gt;Linux might work &#8211; after all, sybase did it. </p>
<p>  But Sybase SQL Server was already running on Unix variants back when SQL Server ran on OS/2, so it was a relatively easy port. I suspect that SQL Server 2000 and Yukon are pretty deeply tied to how Windows does things, and a port would be pretty difficult.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201713">
				<div id="div-comment-201713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mikedimmick.blogspot.com' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201713">
			August 6, 2004 at 9:12 am</a>		</div>

		<p>I note that the KB article you linked to refers to Windows XP. Does XP still only give 2GB VA to user processes, regardless of the setting of /3GB and the large-address-aware switch? Russinovich and Solomon, in &#8216;Inside Windows 2000&#8217;, state that Windows 2000 Professional and Windows 2000 Server (as opposed to Advanced Server or Datacenter Server) did this.</p>
<p>The switch does still seem to restrict kernel VA space to 1GB &#8211; you just end up with a 1GB hole between user and kernel space.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201743">
				<div id="div-comment-201743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/carmencr' rel='external nofollow' class='url'>Carmen Crincoli</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201743">
			August 6, 2004 at 11:23 am</a>		</div>

		<p>Mike: No, they changed XP so that you can get the full 3GB of VA space.  This was for engineering applications like CAD software, that wants as much RAM for modeling as it can et.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201773">
				<div id="div-comment-201773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201773">
			August 6, 2004 at 1:41 pm</a>		</div>

		<p>Mike:<br />
<br />&gt;  But Sybase SQL Server was already running on Unix variants back when SQL Server ran on OS/2, so it was a relatively easy port.</p>
<p>I mentioned Sybase specifically because it was the base for SQL Server, IIRC. This means that MS has the potential to get a relatively rapid port for the core bits, provided that it has the interest and Sybase wants to play ball.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201813">
				<div id="div-comment-201813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.andre.bz' rel='external nofollow' class='url'>Michel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201813">
			August 6, 2004 at 4:33 pm</a>		</div>

		<p>Cooney:<br />
<br />&gt;I mentioned Sybase specifically because it<br />
<br />&gt;was the base for SQL Server, IIRC. This means<br />
<br />&gt;that MS has the potential to get a relatively<br />
<br />&gt;rapid port for the core bits, provided that<br />
<br />&gt;it has the interest and Sybase wants to play<br />
<br />&gt;ball. </p>
<p>If you read Inside SQL server 2000 you can see from the background and history overview that pretty much of the sybase code has been removed and that the current SQL server uses the operating system services supplied with Windows to a great deal and it even doesn&#8217;t seem from the comments that they are insulated from the core of the code. The author even mention the portability layers and least common divisor and reimplementing of things you have to do for different platforms as not good for the kind of performance SQL Server strives to acheive on it&#8217;s native platform. So my guess its not a walk in the park backporting SQL Server to Linux/Unix, and why in the world from a business standpoint would MS wan&#8217;t to do it anyways.</p>
<p>Anyways this maybe isn&#8217;t a relevant topic when discussing a log on the functionality of the 3Gb switch.</p>
<p>/M</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201873">
				<div id="div-comment-201873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.positivenetworks.com' rel='external nofollow' class='url'>Steve Dispensa</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201873">
			August 8, 2004 at 12:31 am</a>		</div>

		<p>Another problem with /3GB is the lack of virtual address space for mapping views into the cache manager.  As disk sizes grow, this becomes a real issue.  Remember that the cache manager doesn&#8217;t actually keep all of its mapped views resident, so a 1GB virtual block cache isn&#8217;t that outrageous today.</p>
<p>OSR had a good article on AMD64 recently that lays out the new virtual address space layout.  Suffice it to say- we should be good for a few more years.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201893">
				<div id="div-comment-201893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/evand/archive/2004/08/08/210926.aspx' rel='external nofollow' class='url'>Evan's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201893">
			August 8, 2004 at 3:28 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201903">
				<div id="div-comment-201903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201903">
			August 9, 2004 at 2:49 am</a>		</div>

		<p>System PTEs, Paged Pool, and NonPaged Pool share the address space at 0xe1000000-0xffbe0000 (491.875MB), along with the following positioning:</p>
<p>&#8212;&#8212;&#8212;&#8212; 0xe1000000<br />
<br />Paged Pool<br />
<br />System PTES (7000-50000 pages)<br />
<br />NonPaged Pool (max 128MB)<br />
<br />&#8212;&#8212;&#8212;&#8212; 0xffbe0000</p>
<p>In a 2gb kernel space, there is an additional address space at 0xa4000000-0xbfffffff (448MB) for additional system PTEs (or large system cache if decided) and an additional 128MB space for NonPaged Pool at around 0x8???????. </p>
<p>With /3gb, all stuff are locked inside the 491.875MB space. However, you may still be able to tune individual&#8217;s size inside the 491.875MB by playing with the &quot;Session ManagerMemory Management&quot; registries.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201913">
				<div id="div-comment-201913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Petr Kadlec</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201913">
			August 9, 2004 at 4:55 am</a>		</div>

		<p>&quot;It&#8217;s like &#8230; inside a small closet&quot;<br />
<br />Well&#8230;a few years ago&#8230;who would guess that 1GB of RAM address space would look like a &quot;small closet&quot;? :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201923">
				<div id="div-comment-201923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave stokes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201923">
			August 9, 2004 at 5:03 am</a>		</div>

		<p>Well, you have basically a rather primitive operating system running on primitive hardware (and no, this is no troll;-). With IBM&#8217;s z/OS pretty well every system function runs in its own address space. But z/OS (and the zSeries Hardware) allow what&#8217;s called synchronous cross-memory processing and extended addressability. A work unit (thread, task, whatever) can synchronously start executing code in another address space, there&#8217;s no real context switch. Data addressability can be in one of three address spaces, primary (wherever the code is), secondary (typically where the data is in cross memory mode) and home (the work unit&#8217;s originating address space), so there&#8217;s no (necessary) copying of data between address spaces. And there are additionally so-called Access Registers which are registers which address address spaces, and qualify the normal address registers. With this mechanism code can directly address any data in any address  space (subject to certain authorisation checks, of course). Access registers also allow so-called Data Spaces, which are address spaces containing only data, probably great for things like giant video buffers. AFAIK this sort of stuff&#8217;s not available with any Intel chip, or at least if it&#8217;s possible Windows doesn&#8217;t seem to make much use of it.</p>
<p>OTOH it&#8217;s much more fun writing Windows code with VS than for z/OS with any IBM tool I&#8217;ve encountered&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201973">
				<div id="div-comment-201973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">winden</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-201973">
			August 9, 2004 at 1:28 pm</a>		</div>

		<p>dave, it sounds very nice, could you point to some IBM docs about these things?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-202013">
				<div id="div-comment-202013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-202013">
			August 9, 2004 at 4:23 pm</a>		</div>

		<p>Sorry, Chris, but all the selectors point into the same underlying address space. More on this on August 16.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-202003">
				<div id="div-comment-202003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-202003">
			August 9, 2004 at 4:13 pm</a>		</div>

		<p>Very nice? That sounds horribly like what Win16 did with the 386&#8217;s segment registers.</p>
<p>I still have nightmares about near pointers, and far pointers (and damnit HUGE pointers!).</p>
<p>Anyway, as I understand it (and the last time I even thought I *understood* it was when the 386 was state of the art) the x86 processors still have all the segment registers that can each be pointed to its own 4Gb address space. This means that, OS willing, a single x86 instructction could choose to access memory in one of the CS, DS, ES, FS, GS or SS. 4X 4Gb of data and 4Gb each for code and stack? Interesting but ultimately less hassle to just switch to Win64 and use only near pointers there :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-202073">
				<div id="div-comment-202073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave stokes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-202073">
			August 10, 2004 at 1:32 am</a>		</div>

		<p>Hi Chris, no, it really has nothing to do with some old 386 architecture. The 370/ESA/Z architecture has always used a pure linear adressing scheme for virtual memory, just like Intel (nowadays).</p>
<p>And winden, hardware is described in SA22-7832 Principles of Operation, and z/OS extended addressability in SA22-7614 Programming Extended Addressability, both available at <a target="_new" href="http://www-1.ibm.com/servers/eserver/zseries/zos/bkserv/r5pdf/mvs.html" rel="nofollow">http://www-1.ibm.com/servers/eserver/zseries/zos/bkserv/r5pdf/mvs.html</a><br />
<br />but it&#8217;ll be hard going without some previous familiarity with IBM mainframes&#8230;</p>
<p>Of course, these features are hardly all that distinguishes the zSeries hardware and software&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-202083">
				<div id="div-comment-202083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave stokes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-202083">
			August 10, 2004 at 3:04 am</a>		</div>

		<p>Kind of a PS to Chris Becke&#8217;s final comment&#8230;</p>
<p>&gt;&gt;Interesting but ultimately less hassle to just switch to Win64 and use only near pointers there :P&lt;&lt;</p>
<p>Well, it&#8217;s probably a good point. From the pure addressability point of view I&#8217;d say 64 Bit (z/OS is a 64 Bit OS BTW) could make things a lot simpler. Of course IBM can&#8217;t just remove extended addressability since there&#8217;s vast quantities of code which use it (it&#8217;s been around since the late eighties). </p>
<p>However there&#8217;s maybe another aspect, which is that running system services in their own address spaces can make things like storage protection, error recovery and restart of failing system services much cleaner architecturally. There may well be aspects of the Windows kernel architecture which compensate for the lack of such facilities, I know rather more about z/OS than Windows at this level, and I&#8217;d be interested in comments from the experts. </p>
<p>However, Windows recovery certainly still sucks, as anyone who&#8217;s cancelled a process probably knows (well, most people just notice they can&#8217;t access files and stuff without rebooting, I guess, without knowing really why). z/OS OTOH&#8230;well anyway, I was really more interested in the technical aspects, not praising z/OS to the skies.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-203243">
				<div id="div-comment-203243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bill H. Gates IV</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-203243">
			August 15, 2004 at 10:54 pm</a>		</div>

		<p>&quot;640GB of memory should be enough for just about anyone.&quot;</p>
<p>(This had to be posted early because comments will be closed before the target date, 1 April 2007.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-206493">
				<div id="div-comment-206493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.savagenomads.net/archives/000203.html' rel='external nofollow' class='url'>Savage Nomads</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-206493">
			August 27, 2004 at 11:50 pm</a>		</div>

		<p>&amp;nbsp; As Evan&amp;nbsp;already mentioned on his blog, Raymond Chen has a great series on /3GB switch on his blog. What is really cool is that Raymond takes on some myths about the /3GB switch and&amp;nbsp; the fact that he&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-247053">
				<div id="div-comment-247053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/exchange/archive/0001/01/01/217772.aspx' rel='external nofollow' class='url'>You Had Me At EHLO...</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-247053">
			January 19, 2005 at 7:23 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-464043">
				<div id="div-comment-464043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.sharepointblogs.com/pprussak/archive/2007/01/23/18164.aspx' rel='external nofollow' class='url'>Piotr's blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040806-00/?p=38223#comment-464043">
			January 23, 2007 at 9:02 am</a>		</div>

		<p>Some time ago, we decided to optimize server settings, as recommended by MVPs and other industry gurus&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>