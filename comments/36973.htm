<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-234973">
				<div id="div-comment-234973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/12/16/317157.aspx#317412' rel='external nofollow' class='url'>Eric Duran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-234973">
			December 16, 2004 at 7:51 am</a>		</div>

		<p>Second moral of the story: Leave optimization to Raymond Chen and his team of rocket scientists so we, developers, can focus on higher abstraction layers. Thumbs up for .NET and J2EE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235073">
				<div id="div-comment-235073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235073">
			December 16, 2004 at 9:18 am</a>		</div>

		<p>Silly Intel processors. That should be just:</p>
<p>      lea (next,pc),a0<br />
<br />next:</p>
<p>Quite why you&#8217;d need to do this, though, I don&#8217;t know.  Normally you can just use absolute addresses and let the linker and loader adjust them as necessary.  It might be useful for debug tracing, but then you&#8217;d normally want to get the caller&#8217;s address, not your own, and it&#8217;s probably not performance-critical anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-235083">
				<div id="div-comment-235083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/12/16/317157.aspx#318264' rel='external nofollow' class='url'>T</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235083">
			December 16, 2004 at 10:03 am</a>		</div>

		<p>Ben,</p>
<p><a target="_new" href="http://www.insecure.org/stf/smashstack.txt" rel="nofollow">http://www.insecure.org/stf/smashstack.txt</a></p>
<p>Classic article, BTW. There&#8217;s a bit where they want to get the address of some data. Since the jmp and call are both pc-relative, the code is position independant, which it needs to be.</p>
<p>    jmp    call_insn<br />
<br />popl_insn:<br />
<br />    popl   %esi</p>
<p>    ; esi points to the data<br />
<br />call_insn:<br />
<br />    call   popl_insn</p>
<p>data:<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235123">
				<div id="div-comment-235123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://perlmonks.org/?node=theorbtwo' rel='external nofollow' class='url'>James Mastros (theorbtwo)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235123">
			December 16, 2004 at 11:21 am</a>		</div>

		<p>My first thought on reading this was &quot;why not just mov currentip, eip&quot;.  The answer is &quot;you can&#8217;t do that on the x86; eip is hidden&quot;.  Then I ask myself, &quot;self, then what about mv currentip, $?&quot;  Then I realize that $ is just a cheap trick of syntax, to explicitly make it use rel form, and probably only works on the LHS of a mov, or inside of brackets.</p>
<p>So, this post boils down to &quot;x86 silly!&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-235143">
				<div id="div-comment-235143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/ericlippert' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235143">
			December 16, 2004 at 11:45 am</a>		</div>

		<p>This lesson applies even more to &quot;virtual machine&quot; worlds, because there are way more assumptions that clever machine implementors can make about likely code paths.</p>
<p>For example, &quot;everyone knows&quot; that you should never do this</p>
<p>for i = 1 to array.length<br />
<br />&#8230;<br />
<br />next</p>
<p>Because of course that recalculates collection.length every time, even if it&#8217;s unlikely to change.  Instead, you should do</p>
<p>mylength = array.length<br />
<br />for i = 1 to mylength<br />
<br />&#8230;<br />
<br />next</p>
<p>But in the .NET world, the compiler that generates the IL and the jitter that jits the IL can be very smart when analyzing the original program, recognizing this common pattern, and emitting code that more optimally enumerates an array.</p>
<p>By trying to prematurely optimize the loop, there are situations in which you can actually make it worse.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235163">
				<div id="div-comment-235163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/12/16/317157.aspx#319456' rel='external nofollow' class='url'>Ben Hutchings</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235163">
			December 16, 2004 at 1:26 pm</a>		</div>

		<p>T: I was confining my thinking to legitimate uses &#8211; and ones that are performance-critical!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-235213">
				<div id="div-comment-235213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/12/16/317157.aspx#323149' rel='external nofollow' class='url'>michaels</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235213">
			December 16, 2004 at 6:28 pm</a>		</div>

		<p>Another issue for this particular optimisation to be slow is that you&#8217;ve done it in c (or c++) with embedded assembly &#8230; afair the compiler won&#8217;t give the optimal code <em>around</em> your smart segment there, hence causing the slowdown.</p>
<p>&#8212;</p>
<p>and why does your inline asm use &quot;call&quot; ?</p>
<p>Couldn&#8217;t you just do:<br />
<br />__asm {<br />
<br />iwanteip:<br />
<br /> lea eax, iwanteip<br />
<br /> ret<br />
<br />}</p>
<p>&#8212;</p>
<p>Eric is right about optimisation in JIT&#8217;d languages though &#8230; especially ones like java&#8217;s &quot;HotSpot&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235233">
				<div id="div-comment-235233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/' rel='external nofollow' class='url'>Michael Kaplan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235233">
			December 16, 2004 at 10:45 pm</a>		</div>

		<p>I found an interesting issue when I was working on MSLU, where I wanted to make sure that if somebody called the wrapper APIs and they were on NT that it would call right through to the operating system. My initial attempt was:</p>
<p>int __stdcall<br />
<br />AddFontResourceW(LPCWSTR lpszFilename)<br />
<br />{<br />
<br />    if(IS_ON_NT())<br />
<br />    {<br />
<br />        __asm jmp AddFontResourceW</p>
<p>but it turned out that 500+ APIs like this were not only slower but also much fatter in the final DLL size than</p>
<p>int __stdcall<br />
<br />AddFontResourceW(LPCWSTR lpszFilename)<br />
<br />{<br />
<br />    if(IS_ON_NT())<br />
<br />    {<br />
<br />        return AddFontResourceW(lpszFilename);</p>
<p>It made me almost retire from trying to be clever with assembly language, wondering how a jmp could be slower. Until I looked at the disassembly and noticed that it was being optimized to the jmp anyway, but the ASM caused other optimizations to not happen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-235243">
				<div id="div-comment-235243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235243">
			December 16, 2004 at 10:56 pm</a>		</div>

		<p>&quot;Couldn&#8217;t you just do &#8216;lea eax, iwanteip&#8217;&quot; &#8211; Sure you can do that, but the presence of &quot;ret&quot; suggests that you&#8217;re writing the implementation of GetReturnAddress(), which returns not the return address but rather &amp;GetReturnAddress itself, which isn&#8217;t very useful.</p>
<p>If you meant it to be inlined into the caller function, then you run into the problem of inline assembly disabling a large class of optimizations&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235293">
				<div id="div-comment-235293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/12/17/317157.aspx#323283' rel='external nofollow' class='url'>Zahical</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235293">
			December 17, 2004 at 2:06 am</a>		</div>

		<p>&quot;Hidden Variables&quot;. Very nice :-)</p>
<p>Are you now into Quantum mechanics, Raymond?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-235303">
				<div id="div-comment-235303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/12/17/317157.aspx#323506' rel='external nofollow' class='url'>T</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235303">
			December 17, 2004 at 4:40 am</a>		</div>

		<p>On x86-64, I think you can do </p>
<p>   lea rax, [rip]</p>
<p>Also, RIP relative is the default addressing mode &#8211; it&#8217;s shorter than encoding 64 bit absolute addresses in the instruction, so presumably the loader won&#8217;t have to do many relocations compared to x86.</p>
<p>That&#8217;s actually quite an advantage, because it means that pages containing code can be shared between two processes, even if they are loaded at different addresses.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235323">
				<div id="div-comment-235323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.saderfamily.org/roller/page/ksader' rel='external nofollow' class='url'>Keith Sader</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235323">
			December 17, 2004 at 6:15 am</a>		</div>

		<p>Wow, reading this reminds me of Micheal Abrash who once said &#8211; &#8216;Measure first, then optimize&#8217; &#8211; <em>The Zen of Code Optimization</em></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-235413">
				<div id="div-comment-235413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://pluralsight.com/blogs/mike/archive/2004/12/17/3955.aspx' rel='external nofollow' class='url'>Some Assembly Required</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235413">
			December 17, 2004 at 12:08 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235573">
				<div id="div-comment-235573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/12/17/317157.aspx#323868' rel='external nofollow' class='url'>Marcel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235573">
			December 17, 2004 at 5:04 pm</a>		</div>

		<p>Thanks a lot Raymond. I&#8217;ve written a 68k emulator which was originally targeted at the 486 and therefore was written in pure assembler with every trick in the books to save a few cycles. Many of those optimizations have been removed in due time, but the main loop still looked something like this:</p>
<p>Loop: PUSH ReturnAddress<br />
<br />      Decode command<br />
<br />      JMP Command</p>
<p>Commands return with RTS. Most of the time ReturnAddress pointed to the loop, but if e.g. an interrupt had to be simulated it pointed to the IRQ handling code. With your entry you got me thinking and lo and behold, the new version</p>
<p>Loop: Decode command<br />
<br />      CALL   command<br />
<br />      JMP    ReturnAddress</p>
<p>increases the overall speed on a P4 by 30%! Pretty amazing for a less than 10 bytes change&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-235563">
				<div id="div-comment-235563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.gerd-riesselmann.net/archives/2004/12/optimization-templates-and-the-rest/' rel='external nofollow' class='url'>Anonymous</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235563">
			December 17, 2004 at 7:49 pm</a>		</div>

		<p>Gerd Riesselmann &amp;raquo; Optimization, Templates And The Rest</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235663">
				<div id="div-comment-235663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235663">
			December 18, 2004 at 8:31 pm</a>		</div>

		<p>Re: Eric Lippert:</p>
<p>The problem is that the optimization isn&#8217;t just an optimization, it&#8217;s a clarification in semantics.  If the compiler can&#8217;t prove that array.length won&#8217;t change in the body of the loop, it has to assume it may and cannot make the optimization you&#8217;re suggesting.</p>
<p>What&#8217;s more interesting is that actually, based on GrantRi&#8217;s blog, it&#8217;s safer to always do the length capture since the newer optimizers realize when it would be better to re-read it as long as the value can&#8217;t be seen to be changed on the current thread.</p>
<p>Really, this is why a &quot;for each&quot; type of construct is really best which makes the question unambiguous.</p>
<p>(What&#8217;s interesting is when the optimizer starts to be free to /not/ capture values when asked to, implementing the necessary logic for capturing client supplied data when cross security boundaries gets hard.)</p>
<p>My first exposure to Raymond&#8217;s general principle was back at Digital working on the VAX.  Too much time was being spent in the heap allocator so I was trying to optimize the search of the free list when the allocation was too large to be on one of the lookaside lists.  I used assembly language to make the function shorter, use fewer registers (and therefore preserve fewer registers on calls) etc. etc. and my implementation ended up being like twice as slow as what the VAX C compiler generated.</p>
<p>I gave up trying to outguess the Digital optimizers then.  The MSFT optimizers are almost to that point now and between LTCG and a new generation of optimizers coming up, it&#8217;s even more important to specify the semantics you want and trust the optimizer.</p>
<p>(IMO, the next generation of problem is going to be code size optimizations due to proliferation of templates/generics&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-235733">
				<div id="div-comment-235733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">michaels</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235733">
			December 19, 2004 at 7:01 pm</a>		</div>

		<blockquote><p>
  Really, this is why a &quot;for each&quot; type of<br />
  <br />&gt; construct is really best which makes the<br />
  <br />&gt; question unambiguous. </p>
<p>Which question ? Whether the runtime needs to re-read the &quot;length&quot; variable each time ?</p>
<p>Of course it&#8217;s still possible to modify the structure while in a &quot;for each&quot; loop. Or have I misunderstood you ?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235753">
				<div id="div-comment-235753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235753">
			December 19, 2004 at 8:51 pm</a>		</div>

		<p>12/18/2004 8:31 PM Michael Grier [MSFT]</p>
<p>&gt; I used assembly language to make the<br />
<br />&gt; function shorter, use fewer registers (and<br />
<br />&gt; therefore preserve fewer registers on calls)<br />
<br />&gt; etc. etc. and my implementation ended up<br />
<br />&gt; being like twice as slow as what the VAX C<br />
<br />&gt; compiler generated.</p>
<p>Did you find out why?  I&#8217;ve read that some of the emulated instructions were slower to execute using the built-in hardware emulator than using a hand-coded sequence of simpler and faster instructions.  If you were coding before that discovery (if that&#8217;s possible), and if the VAX C compiler generated simpler code that just happened to be faster because of that reason, then you don&#8217;t need to worry about outguessing.  Otherwise I&#8217;d be studying the generated code to see what I had done wrong.</p>
<p>The most second-most-recent time I had to code assembly language was log2 and exp2 functions for a device driver for x86 Linux.  gcc can be told to avoid using floating point instructions but Linux kernel experts said that would be a bizarre approach.  It turns out that actual floating point operations can be used in the x86 Linux kernel if preceded by some special macro (in C/gcc/Linux kernel) and followed by some other special macro (same situation).  So then I could either call C&#8217;s built-in functions for log and exp and do the appropriate scaling, or write my own assembly language.  But even though I had not told gcc to avoid using floating point instructions or to use an emulator or anything like that, it generated function calls.  The x86 assembly language for log2 is a single instruction, though exp2 requires a ton of scaling before and after its central instruction.  So I coded asm&#8217;s.  I sure hope I wasn&#8217;t slower than gcc&#8217;s function calls.</p>
<p>But then we had to port it to MIPS.  Floating point in the MIPS Linux kernel is never allowed.  Fortunately we could precompute the results for a known set of values and dispense with run-time floating point entirely.</p>
<p>I was afraid I was going to have to repeat that with trig functions, but they turned out to be unnecessary.</p>
<p>(As for why that had to be done in the device driver, one famous foreign government prohibits exposing certain functionality to control by end users.)</p>
<p>The third-most-recent time I had to code assembly language was also for x86.  That time I grabbed a couple of crutches, unnecessary but very convenient:  I looked at the assembly language generated by the compiler, figured out how to cut out about three quarters of the instructions, and the result really was four times as fast.  That was about 20 years ago though.</p>
<p>(The absolute most recent time I had to code assembly language was for a Hitachi chip.  Hitachi&#8217;s C and C++ compilers don&#8217;t provide all of the necessary choices regarding which registers to push and pop in interrupt handlers, so I didn&#8217;t have any competition for speed on that one ^_^)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-235853">
				<div id="div-comment-235853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/12/20/327369.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235853">
			December 20, 2004 at 10:00 am</a>		</div>

		<p>Sometimes it&#8217;s all about paging.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235913">
				<div id="div-comment-235913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Swaim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-235913">
			December 20, 2004 at 1:10 pm</a>		</div>

		<p>for i = 1 to array.length<br />
<br />&#8230;<br />
<br />next </p>
<p>is only faster for arrays. If you use an ArrayList, then it&#8217;s faster to cache the length in a stack variable. (And a for&#8230; statement&#8217;s better than foreach, because foreach creates a hidden iterator.)</p>
<p>  Way back in the &#8217;80s Creative Computing had a column by one of the names in game design. One of his rules was to precompute everything (especially bitmaps that&#8217;d have to be shifted) because memory was fast, and processors were slow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-236623">
				<div id="div-comment-236623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codeinsight.com' rel='external nofollow' class='url'>MIke Fitzpatrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-236623">
			December 22, 2004 at 11:31 am</a>		</div>

		<p>Optimizing C code is a bit like designing a web page &#8211; you never know what kind of browser a web page is viewed with- You may compile your C code on a different platform. Same is true for assembly code. Much of the old 8086 code ran slower on the x286 because of &quot;optimizations&quot; done to the x86 that used the clock cycle info when the code was created.</p>
<p>The classic optimization problem in C can be demonstrated by comparing recursive code to iterative code. For example, write the factorial function using recursion, compare that to the factorial function using iteration. The recursion function only has 3 or 4 lines of code. You&#8217;d think that it was WAY faster than iterative code which is several lines longer, and also has a loop variable. What a suprise for the CS freshman!<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-241563">
				<div id="div-comment-241563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom Canham</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-241563">
			January 10, 2005 at 4:07 pm</a>		</div>

		<p>&quot;Optimize late&quot;</p>
<p>Why is that so hard?  I think sometimes that we coders are more eager to show off our &quot;l33t&quot; CS101 skills and hand-code some ASM than to trust that Someone Else (eg, compiler writers) Might Actually Know What They&#8217;re Doing.</p>
<p>Of course, once you&#8217;ve written your naive version, profiled it, and determined exactly where the bottlenecks are &#8212; that&#8217;s a completely situation.  Go to town, with the blessings of all on this thread :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-245213">
				<div id="div-comment-245213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jamesatuncw.com/blog/archive/2005/01/16/290.aspx' rel='external nofollow' class='url'>James Summerlin's Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-245213">
			January 16, 2005 at 12:41 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-275333">
				<div id="div-comment-275333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/05/11/416430.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-275333">
			May 11, 2005 at 8:56 am</a>		</div>

		<p>Converting the file as we read it is taking a lot of time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-279923">
				<div id="div-comment-279923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://msmvps.com/kernelmustard/archive/2005/06/04/50466.aspx' rel='external nofollow' class='url'>Kernel Mustard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973#comment-279923">
			June 4, 2005 at 5:18 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>