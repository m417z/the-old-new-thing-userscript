<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-582453">
				<div id="div-comment-582453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.vacant-nebula.com/' rel='external nofollow' class='url'>Kip</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582453">
			December 28, 2007 at 11:16 am</a>		</div>

		<p>&#8220;But it turns out that solving the problem required no special expertise. In fact, you probably know enough to solve it, too.</p>
<p>&#8230;</p>
<p>At this point, I think you see the deadlock.&#8221;</p>
<p>You have a lot more confidence in me than I do. &nbsp;I didn&#8217;t really follow any of that. &nbsp;But then again I don&#8217;t do any Windows programming&#8230;</p>
<div class="post">[<i>One more comment like that and I&#8217;m bringing back the nitpicker&#8217;s corner. You should know the prerequisites for this blog by now. If you don&#8217;t meet the prerequisites, then don&#8217;t complain that the subject matter is too hard. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-582463">
				<div id="div-comment-582463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nitpicker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582463">
			December 28, 2007 at 11:18 am</a>		</div>

		<p>The first rule of nitpicking: do not talk about nitpicking. &nbsp;The second rule of nitpicking: DO NOT TALK ABOUT NITPICKING.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-582483">
				<div id="div-comment-582483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.vacant-nebula.com/' rel='external nofollow' class='url'>Kip</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582483">
			December 28, 2007 at 11:31 am</a>		</div>

		<p>Jeez I didn&#8217;t realize that counted as nitpicking.. it was meant as a joke (and a compliment, in a way).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-582503">
				<div id="div-comment-582503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582503">
			December 28, 2007 at 11:47 am</a>		</div>

		<p>Other than holding resources during a message send and that sending a message to a window could block the current thread while another is &#8220;awoken&#8221;; is the fact that the &#8220;window clearly belongs to another thread&#8221; significant?</p>
<div class="post">[<i>It&#8217;s not just significant &#8211; it&#8217;s the root cause! Maybe you need to read the article again, make sure you understand that. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-582543">
				<div id="div-comment-582543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582543">
			December 28, 2007 at 12:54 pm</a>		</div>

		<p>&quot;is the fact that the &quot;window clearly belongs to another thread&quot; significant?&quot;</p>
<p>I guess the code must behave differently when you call SetScrollInfo() for a window owned by the same thread. &nbsp;The function clearly couldn&#8217;t wait for its own thread to process the style change message in that case, because it&#8217;d never happen until at least SetScrollInfo() returned.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-582553">
				<div id="div-comment-582553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew Cook</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582553">
			December 28, 2007 at 12:58 pm</a>		</div>

		<p>I think I can see what the original app was doing that caused the wedge.</p>
<p>Thread 0 is the UI thread for FooApp, an app that as part of normal operation displays a logging pane to the user.</p>
<p>Thread 1 is a background listener thread in FooApp that normally waits for external requests, logging messages as it goes.</p>
<p>LogMsg&#8217;s job is, in addition to &#8212; or instead of &#8212; writing an entry to a log file, to display a logged message in the logging pane and scroll to it for the user. Many programs I&#8217;ve seen follow this pattern.</p>
<p>In the course of doing its job, the background thread finds a need to log a message (&quot;New FTP connection to /warez/&quot;) and calls into LogMsg to report this to the user.</p>
<p>Meanwhile, the user clicks the close button in the UI, prompting a message to be written to the log (&quot;Shutting down the application&#8230;&quot;).</p>
<p>Hence the deadlock.</p>
<p>Hm&#8230; actually, I think I even know which app we&#8217;re talking about here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-582573">
				<div id="div-comment-582573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew Cook</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582573">
			December 28, 2007 at 1:01 pm</a>		</div>

		<p>Oh, forgot to mention: The reason a critical section was probably used is to ensure in-order delivery of log messages, and that log messages would not overprint each other. As well as to make sure that scrolling to the bottom actually scrolls to the bottom. And that LogMsg was written either for a single-threaded environment or for one where SendMessage == PostMessage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-582583">
				<div id="div-comment-582583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582583">
			December 28, 2007 at 1:03 pm</a>		</div>

		<p>Okay, maybe I should be more clear. &nbsp;The root cause is a thread that owns a critical section is blocked waiting for another thread, that other thread is trying to also own that lock&#8211;a deadlock. &nbsp;You can have that happen without a window being owned by another thread and without the critical section (or any other locking mechanism) there wouldn&#8217;t be this deadlock. &nbsp;Maybe the fact that communicating to a window owned by another thread is a cross-thread call is overly apparent to me&#8230; &nbsp;My question is, over and above the fact that communicating to a window owned by another thread is a cross-thread call, whether a window clearly belongs to another thread is otherwise significant.</p>
<div class="post">[<i>You already gave the answer in your question: &#8220;Communicating to a window owned by another thread is a cross-thread call.&#8221; I must be misunderstanding the question. Maybe somebody else can answer it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-582593">
				<div id="div-comment-582593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582593">
			December 28, 2007 at 1:24 pm</a>		</div>

		<p>Your question doesn&#8217;t really make sense. &nbsp;It&#8217;s like asking &quot;Aside from the fact that x is significant, is x significant?&quot; &nbsp;I guess that technically the answer is &quot;no&quot;, but it&#8217;s not really a useful question to ask.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-582603">
				<div id="div-comment-582603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582603">
			December 28, 2007 at 1:24 pm</a>		</div>

		<p>I&#8217;ll take that to mean there is no other significance to the fact that the window is owned by another thread&#8230; &nbsp;i.e. communicating with a window owned by another thread (in the same process) will not introduce other problems when synchronization is not used.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-582643">
				<div id="div-comment-582643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582643">
			December 28, 2007 at 1:45 pm</a>		</div>

		<p>The question was meant not to be &#8220;Aside from the fact that x is significant, is x significant&#8221; but to be more like &#8220;aside from resulting in a cross-thread call and the resulting side-effects of two threads vying for the same lock, is the fact that &#8216;the window clearly belongs to another thread&#8217; significant&#8221;</p>
<p>The fact that calling SetScrollInfo from a second thread results in a cross-thread call (to the owning thread) was already very obvious to me, &#8220;the window clearly belongs to a another thread&#8221; seemed extraneous and seemed (to me) to imply something more&#8230;</p>
<div class="post">[<i>It&#8217;s obvious. That&#8217;s why I said &#8220;clearly&#8221; and then just for good measure, elaborated as to why the statement is obvious. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-582663">
				<div id="div-comment-582663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erik Funkenbusch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582663">
			December 28, 2007 at 2:12 pm</a>		</div>

		<p>Psychic Debugging&#8230; LOL</p>
<p>I&#8217;ve never quite known what to call my method of debugging. &nbsp;I&#8217;m good at it, but it defies all logic. &nbsp;I just seem to infer and make illogical jumps and successfully find the problem.</p>
<p>Now I know what to call it ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-steveshe even thread-even depth-1" id="comment-582673">
				<div id="div-comment-582673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Steve+Sheppard+-+Microsoft' rel='external nofollow' class='url'>Steve Sheppard - Microsoft</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582673">
			December 28, 2007 at 2:21 pm</a>		</div>

		<p>Funkenbush: No, Raymond&#8217;s Psychic Debugging is based on purely logial leaps based on knowledge and experience. Fixing things using illogical leaps has another name: Guessing.</p>
<p>If you&#8217;re good at fixing things that way it just means the problems are really straightforward or your are very lucky&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-582683">
				<div id="div-comment-582683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582683">
			December 28, 2007 at 2:47 pm</a>		</div>

		<p>This has been a very helpful post for me. I am going to name my rock band &quot;Unfrozen Child&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-582723">
				<div id="div-comment-582723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cmov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582723">
			December 28, 2007 at 3:08 pm</a>		</div>

		<p>Nice post, good WTF. Thank you.</p>
<p>I can think of one way in which the WTF would be even worse; If thread 0 uses MWMO_ALERTABLE to alertably wait on the critical section and thread 1 performs APC on thread 0 before it returns the section. I&#8217;ve never tried any such thing before and probably never will ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-582733">
				<div id="div-comment-582733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard Taylor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582733">
			December 28, 2007 at 3:24 pm</a>		</div>

		<p>I&#8217;ve always followed the practice of never touching anything UI related from a thread other than the thread that created the UI element. So if I had been writing this app I would have had my LogMsg function post a message to the window that owns the UI element so it could do any UI updating.</p>
<p>In .NET 2.0 a &quot;cross thread call&quot; exception will be thrown if you try to do anything to a UI element from a thead that didn&#8217;t create the element. You have to use an Invoke to run the UI code on the correct thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-582823">
				<div id="div-comment-582823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582823">
			December 28, 2007 at 8:01 pm</a>		</div>

		<blockquote><p>
  It&#8217;s unclear why they asked our team
</p></blockquote>
<p>Because your team has Raymond Chen on it, and he&#8217;s got a big &#8216;ol economy-size can of debugging whoop-ass!</p>
<p>Back on topic, this isn&#8217;t a Windows-only thing. Lots of people can&#8217;t get their heads around the fact &quot;thou shalt not make $GUI_TOOLKIT calls in another thread&quot; in GTK, Tk/TCL, or whatever.</p>
<p>I even see people saying &quot;but the thread belongs to the same program, why can&#8217;t it do that?&quot; and they just don&#8217;t understand events, messages, and/or GUI &quot;main&quot; loops at all.</p>
<p>I even had one person ask why two threads couldn&#8217;t be in a critical section at the same time &gt;:-{</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-582833">
				<div id="div-comment-582833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xiaoguo ge</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582833">
			December 28, 2007 at 8:29 pm</a>		</div>

		<p>I wonder what application the other team was developing. If they needed outside help on a problem like this, I am really worried about the quality of their product.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-582533">
				<div id="div-comment-582533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dataland.wordpress.com/' rel='external nofollow' class='url'>Dataland</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582533">
			December 28, 2007 at 12:38 pm</a>		</div>

		<p>When working within synchronized code, you should only do what needs to be synchronized. From msdn: </p>
<p> &nbsp;&quot;The SetScrollInfo function sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). The function also redraws the scroll bar, if requested.&quot;</p>
<p>I think that the ISV application should *not* have been fiddling with scroll info/position inside of LogMsg. &nbsp;Instead, UI interaction logic should have been performed either before or after the code that is sync&#8217;d by critical section.</p>
<p>IMHO the bigger problem here is poorly designed code. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-582903">
				<div id="div-comment-582903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rune Moberg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-582903">
			December 29, 2007 at 4:02 pm</a>		</div>

		<p>&quot;If they needed outside help on a problem like this,&quot;</p>
<p>Well&#8230; Sometimes the obvious solution could be staring you straight in the face, but you won&#8217;t grasp the solution until you get outside help. Even just talking with someone (without any verbal input from the other party) can sometimes dislodge the solution&#8230;</p>
<p>Truth be told, many programmers are not comfortable around debuggers. Here, AFAICT, the schools focus on writing code, not debugging. It is assumed that if something compiles without warnings, then everything is honky-dorey. (And java is their main language/platform from the start)</p>
<p>Actually, the majority of applications are total crap. So you should worry a lot. :)</p>
<p>Personally I started out with the debugger before I wrote much code. I fixed a range check issue with an application someone else wrote, with only the executable to go by (I didn&#8217;t even know, back then, that it had been compiled with TP). At that point (ca 1989) my programming experience was very limited. I doubt many of today&#8217;s kids interact much with debuggers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-583073">
				<div id="div-comment-583073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Krunch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-583073">
			December 30, 2007 at 6:50 pm</a>		</div>

		<blockquote><p>
  Back on topic, this isn&#8217;t a Windows-only thing.</p>
<p>  Lots of people can&#8217;t get their heads around the fact</p>
<p>  &quot;thou shalt not make $GUI_TOOLKIT calls in another</p>
<p>  thread&quot; in GTK, Tk/TCL, or whatever.
</p></blockquote>
<p>This isn&#8217;t even a GUI-only thing. While writing threaded networking code I learnt the hard way that</p>
<p>there is no good way to take more than one lock in arbitrary order. That&#8217;s basic CS knowledge (does the dining philosophers problem ring any bell ?) but nobody seems to remember these stuff.</p>
<p>Quoted from a linked article:</p>
<blockquote><p>
  Hangs and deadlocks are tricky to debug because</p>
<p>  there is no unhandled exception that says, &quot;Look</p>
<p>  at me, I&#8217;m a bug!&quot; Instead, the program just grinds</p>
<p>  to a halt and you have to go spelunking to figure</p>
<p>  out why.
</p></blockquote>
<p>I was just thinking the opposite this afternoon: deadlocks are easier to debug because you can examine the bug live for as long as you want. You don&#8217;t need a test case to reproduce it. When your program crashes, you only have a dump (if you are not too unlucky) which doesn&#8217;t necessarily contains the information you need.</p>
<p>Of course this only applies if the bug happens on the developer&#8217;s computer. If the deadlock happens on a production system on which you are not supposed to install debugging tools I whish you good luck but it shouldn&#8217;t have happened anyway :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-583983">
				<div id="div-comment-583983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://uiguidelines.wordpress.com/' rel='external nofollow' class='url'>Ian Boyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-583983">
			January 1, 2008 at 9:30 am</a>		</div>

		<p>It all made sense once you got to the punch line, &#8220;&#8230;thread 1 is waiting for thread 0 to process the style change message.&#8221; &nbsp;But then looking again at the stack trace: shouldn&#8217;t one of the last functions in the stack of thread 1 been a SendMessage?</p>
<p>Looking at the help for SetWindowLong </p>
<p><a href="http://msdn2.microsoft.com/en-us/library/ms633591.aspx" target="_new" rel="nofollow">http://msdn2.microsoft.com/en-us/library/ms633591.aspx</a> &nbsp;i see no mention that it uses SendMessage, or that it requires the window to be pumping messages. </p>
<p>Otherwise this turns into one of those things that we have to watch out for because it said so on that blog, rather than in the docs.</p>
<p>The only exception might be if you&#8217;re using SetWindowLong(GWL_WNDPROC) to subclass a window, but even then it would only affect the next message, not the handling of any current one.</p>
<p>Without the tidbit from The Old New Thing blog that SetWindowLong requires the owner to be pumping messages i would never have found the cause of the deadlock. i&#8217;d be sitting at SetScrollInfo() in a debugger and asking, &#8220;How can SetScrollInfo possibly cause a deadlock?&#8221;</p>
<div class="post">[<i>If the thread isn&#8217;t pumping messages, how can it receive the style change message? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-583993">
				<div id="div-comment-583993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://enfranchisedmind.com/blog/2008/01/01/why-the-mainstream-concurrency-model-is-broken/' rel='external nofollow' class='url'>Enfranchised Mind &raquo; Why the mainstream concurrency model is broken</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-583993">
			January 1, 2008 at 9:40 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://enfranchisedmind.com/blog/2008/01/01/why-the-mainstream-concurrency-model-is-broken/" rel="nofollow">http://enfranchisedmind.com/blog/2008/01/01/why-the-mainstream-concurrency-model-is-broken/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-584593">
				<div id="div-comment-584593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Boyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-584593">
			January 2, 2008 at 10:53 am</a>		</div>

		<p>[If the thread isn&#8217;t pumping messages, how can it receive the style change message? -Raymond]</p>
<p>Ahh, the WM_STYLECHANGED message. &quot;The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window&#8217;s styles.&quot;</p>
<p>Having a mention of such a message in SetWindowLong documentation would have been very helpful to the original guys &#8211; and me if i were faced with the same deadlock.</p>
<p>Added mention to the community content section of SetWindowLong()</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-585083">
				<div id="div-comment-585083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-585083">
			January 3, 2008 at 9:15 am</a>		</div>

		<p>Is it better to avoid using SendMessage from a worker thread to a window in general (and use PostMessage instead), or is this only true when a resource is being held by the worker thread?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-585223">
				<div id="div-comment-585223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071228-00/?p=24003#comment-585223">
			January 3, 2008 at 11:32 am</a>		</div>

		<p>Jonathan: I&#8217;m not sure about &quot;in general&quot;, but the very fact that the worker thread hasn&#8217;t exited is sometimes a resource. &nbsp;I.e., say the window&#8217;s thread is trying to shut down, and has set an event that all the worker threads are supposed to wait on, and exit if it gets set. &nbsp;The window&#8217;s thread wants to ensure all the worker threads are actually gone (so that the process doesn&#8217;t stay running), so it joins each of them after setting the event.</p>
<p>Now if one of those worker threads got some other notification just before the event was set, and is trying to SendMessage to the window&#8217;s thread, but the window&#8217;s thread is trying to join the worker thread, that&#8217;s the same type of deadlock. &nbsp;PostMessage, OTOH, would work fine (although the notification would be lost).</p>
<p>(I&#8217;ve run into this several times using .net&#8217;s Invoke() from worker threads. &nbsp;The solution was to use BeginInvoke() (mostly equivalent to PostMessage) and ensure that the worker thread didn&#8217;t need to know what the window&#8217;s thread did with the notification (so it didn&#8217;t need to wait for its processing to finish). &nbsp;If you did need to wait, you could use the WaitHandle exposed by .net&#8217;s IAsyncResult (wait on both it and the shutdown event), but IMO it&#8217;s better to make the notification really be a notification, if possible.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>