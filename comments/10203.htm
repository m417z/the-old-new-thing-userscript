<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-923533">
				<div id="div-comment-923533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110708-00/?p=10203#comment-923533">
			July 8, 2011 at 8:09 am</a>		</div>

		<p>Why are they duplicating the handles? &nbsp;The docs for CreatePipe say that the handle (it should say handles, but I assume that&#39;s a typo) which it returns cannot be inherited when NULL is passed for the security attributes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923553">
				<div id="div-comment-923553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110708-00/?p=10203#comment-923553">
			July 8, 2011 at 11:06 am</a>		</div>

		<p>They are duplicating the handles so as to set the security attributes on the duplicated copy so it can be inherited.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes even thread-even depth-1" id="comment-923593">
				<div id="div-comment-923593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110708-00/?p=10203#comment-923593">
			July 8, 2011 at 12:23 pm</a>		</div>

		<p>Ahh&#8230; process spawning and duplicate pipe handles. Those will throw a monkey wrench in your gears. Actually, the analogy is pretty close. The whole thing locks up if you&#39;re not careful about the way you do it. The worst case of this is when you have a rare error case that triggers the lock. The application can run for days before a sudden, seemingly unexplained error grinds it to a halt.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923603">
				<div id="div-comment-923603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110708-00/?p=10203#comment-923603">
			July 8, 2011 at 2:45 pm</a>		</div>

		<p>Unless I&#39;m misreading something, they&#39;re missing the point even worse than what Adam and Joshua noticed. It looks like the duplicated handles in hWritePipe is never used for anything. It is probably not even closed, meaning that we also get a handle leak going in the other direction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923563">
				<div id="div-comment-923563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110708-00/?p=10203#comment-923563">
			July 8, 2011 at 11:31 am</a>		</div>

		<p>@Joshua: Huh? &nbsp;The comment before the calls to DuplicateHandle explicitly says that it wants to *prevent* the handles from being inherited, which is pointless if the handles are already non-inheritable. &nbsp;Likewise, the subsequent call to SetHandleInformation to disable inheritance on the stdin pipe is also pointless.</p>
<p>Why not just call CreatePipe twice (once for the stdin pipe, once for the stdout/stderr pipe), CreateProcess, and then CloseHandle on the read end of the stdin pipe and on the write end of the stdout/stderr pipe?</p>
<div class="post">[<i>You&#39;re asking how come code that misses the point misses the point worse? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>