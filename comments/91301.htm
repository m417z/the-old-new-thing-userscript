<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1197291">
				<div id="div-comment-1197291" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stuart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151022-00/?p=91301#comment-1197291">
			October 22, 2015 at 7:47 am</a>		</div>

		<p>Re: the footnote &#8211; could that also be used in combination with the parenthetical in bullet 3 &quot;(Alternatively, you could be clever and use the same stream, but use a mutex or other synchronization object to make sure only one thread uses the stream at a time)&quot;? As in:</p>
<p>The originating thread creates the stream, and passes the original stream, not a copy, to the other threads.</p>
<p>Guarded by a mutex, each of them rewinds the stream and unmarshals the object *without* the ReleaseStream helper.</p>
<p>When it&#39;s done sharing, the original thread is responsible for releasing the stream as well as letting COM know it&#39;s done.</p>
<p>Another thing I&#39;m curious about: Does the use of a stream imply that multiple objects can be marshaled into the same stream, or combined in it with other data? Could you create a single stream and marshal several objects consecutively into it, and then have some other thread consecutively unmarshal them all out? Could you do a poor-man&#39;s string-to-COM-object dictionary in a stream by consecutively writing string-object-string-object? (as long as your strings were written with a known delimiter or tagged with their length, of course)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197281">
				<div id="div-comment-1197281" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151022-00/?p=91301#comment-1197281">
			October 22, 2015 at 8:01 am</a>		</div>

		<p>@Stuart: To answer your question: It is possible, somewhere I have written code for drag+drop of COM enabled objects that does that via ::CreateStreamOnHGlobal + looping over all selected items and using ::CoMarshalInterface on each one. To unmarshal you rewind the stream once and then call ::CoUnmarshalInterface until it fails. (Or of course you could be fancy and prepend the count into the stream)</p>
<div class="post">[<em>Indeed, packing multiple chunks of marshaling info into one stream is how COM marshals a function call that takes multiple parameters. It doesn&#39;t create one stream for each parameter. Instead, it creates one massive stream and puts all the parameters inside it. That way, you have to transfer only one chunk of data rather than a bunch of little chunks. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher even thread-even depth-1" id="comment-1197241">
				<div id="div-comment-1197241" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151022-00/?p=91301#comment-1197241">
			October 22, 2015 at 3:37 pm</a>		</div>

		<p>@Raymond:</p>
<p>&quot;&sup1; If the thread wants to unmarshal from the stream than once, it could call Co&shy;Unmarshal&shy;Interface and not release the stream immediately. Then each time it wants to unmarshal from the stream, it calls Co&shy;Unmarshal&shy;Interface again, releasing the stream only when it has decided that it will not do any more unmarshaling. This seems silly because once you unmarshal the first time, you can just Add&shy;Ref the pointer if you want to make another copy. I guess this is for the case where the thread wants to pass the stream off to yet another thread? Definitely a fringe case. &quot;</p>
<p>If I am IIS, this optimization probably doesn&#39;t look so silly.</p>
<p>If I have a series of Tasks accessing a COM object, running on a Thread Pool &#8212; theoretically this optimization becomes inner loop in an application measured by how many requests it can process a second.</p>
<div class="post">[<em>Your scenario is different. In your case, a potentially different thread unmarshals each time. My scenario was the same thread unmarshaling multiple times, which is silly; the thread should just AddRef the object it unmarshaled the first time. Much faster. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-msn odd alt thread-odd thread-alt depth-1" id="comment-1197111">
				<div id="div-comment-1197111" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151022-00/?p=91301#comment-1197111">
			October 24, 2015 at 3:13 am</a>		</div>

		<p>I was thinking that you might be even more clever and build an IStream on top of a queue/fifo and run CoMarshalInterface and CoUnmarshalInterface on each end simultanously. But then it wouldn&#39;t really be an IStream if it fails on Seek. The question is of course whether Co[Un]MarshalInterface really needs a seekable stream or if it&#39;s just a matter of ISequentialStream coming late to the game[0]</p>
<p>[0]: End of 97 as part of OLE DB it would seem. Dunno when it became the base interface of IStream. Or well it isn&#39;t really the base interface of IStream since QueryInterface need not respond to IID_ISequentialStream[1].</p>
<p>[1]: Obviously because it would break backwards compatibility. Microsoft Research really need to get working on that time machine[2].</p>
<p>[2]: Actually it doesn&#39;t matter how long it takes them.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>