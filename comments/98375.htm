<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1331295">
				<div id="div-comment-1331295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1331295">
			March 29, 2018 at 7:32 am</a>		</div>

		<p>My guess for the use of the weak version is building locks with TryAcquireXXX type calls. Slim locks at a guess.</p>
<p>The performance should be pretty fast.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1331345">
				<div id="div-comment-1331345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1331345">
			March 29, 2018 at 9:17 am</a>		</div>

		<p>That&#8217;s it, more-or-less.  Basically, you use the weak versions (in a loop) whenever you <i>must</i> update the shared state and the strong version when the update is optional.  The most common case I&#8217;ve come across is &#8220;if I win the race, do X; otherwise, bail.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com0007bffd8056eca8 even thread-odd thread-alt depth-1 parent" id="comment-1331315">
				<div id="div-comment-1331315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Grant+R' rel='external nofollow' class='url'>Grant R</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1331315">
			March 29, 2018 at 8:20 am</a>		</div>

		<p>Please be careful using compare_exchange for lock-free linked lists. It suffers from the A-B-A problem, and cane lead to some horribly corrupted lists. the &#8216;push&#8217; algorithm you show here is safe, but there is no corresponding safe &#8216;pop&#8217; without changing the &#8216;push&#8217;.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1331365">
				<div id="div-comment-1331365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1331365">
			March 29, 2018 at 11:34 am</a>		</div>

		<p>Interestingly, the RISC load locked/store conditional pattern successfully detects A-B-A issues because the conditional store will fail because the memory was indeed written to (twice).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-aadsso-1live-com0007bffd8056eca8 even depth-3 parent" id="comment-1331415">
				<div id="div-comment-1331415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Grant+R' rel='external nofollow' class='url'>Grant R</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1331415">
			March 29, 2018 at 9:41 pm</a>		</div>

		<p>While that is true for many RISC processors, it is not true for x86, and thus the C++ code snippet is not very portable.  It will work fine on ARM, but fail in strange and bizarre ways, but only under stress on x86.  Hence my warning to be careful.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1331505">
				<div id="div-comment-1331505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1331505">
			March 30, 2018 at 10:09 am</a>		</div>

		<p>Right. I was talking about the machine language, not C++. If you use the LL/SC pattern on a RISC processor, it will detect A-B-A. But x86 doesn&#8217;t have LL/SC, so no help there.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1331325">
				<div id="div-comment-1331325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1331325">
			March 29, 2018 at 8:47 am</a>		</div>

		<p>I have often wondered why a simple increment seems to require a compare and retry by the calling assembler code.  Isn&#8217;t it possible to create a hardware &#8220;increment&#8221; instruction, at the chip level, which doesn&#8217;t require retries by the calling assembler code?  The same for decrement.</p>
<p>Maybe there are such hardware instructions and I&#8217;m just ignorant of them.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1331375">
				<div id="div-comment-1331375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1331375">
			March 29, 2018 at 11:37 am</a>		</div>

		<p>You could do it at the chip level, but it requires two memory accesses in a single instruction, which is very non-RISCy. (No other RISC instruction performs two memory accesses in a single instruction, so you&#8217;re increasing chip space, power consumption, and instruction time, all just for one instruction.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1331395">
				<div id="div-comment-1331395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1331395">
			March 29, 2018 at 1:46 pm</a>		</div>

		<p>One could imagine putting such logic <i>in the RAM chips</i>, where the CPU could issue an &#8220;increment&#8221; instruction to the RAM much like it currently issues &#8220;read&#8221; and &#8220;write&#8221; commands. I assume it only hasn&#8217;t been done because the benefits wouldn&#8217;t be worth the costs. Probably it&#8217;d increase the cost and decrease the speed of the RAM (as the RAM would have to make sure to do the increment all within one &#8220;cycle&#8221;), and make caching a lot harder, but it&#8217;s surely <i>possible</i> if one really wanted to build hardware that did it.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1331425">
				<div id="div-comment-1331425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1331425">
			March 30, 2018 at 6:48 am</a>		</div>

		<p>Well, it SEEMS like it&#8217;s a frequent enough thing that it would be worth building into RAM or at the CPU chip level, since there are well-known patterns for interlocked increment, and spin locks, and so on.   However, I&#8217;m not sure if anyone knows how often an increment actually has to retry, or not.  If I were designing a chip, I would build an increment and a decrement at the hardware level&#8230;.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1331445">
				<div id="div-comment-1331445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1331445">
			March 30, 2018 at 7:42 am</a>		</div>

		<p>&#8220;Sorry, you bought the wrong kind of RAM. You got big-endian 32-bit RAM, but you need little-endian 64-bit RAM with support for 32-bit aligned operations.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt depth-5" id="comment-1332505">
				<div id="div-comment-1332505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1332505">
			April 9, 2018 at 4:30 pm</a>		</div>

		<p>AFAIK modern DDR memory does read/write in bursts and assume that you have a cache anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1331335">
				<div id="div-comment-1331335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1331335">
			March 29, 2018 at 8:48 am</a>		</div>

		<p>When the loop body is big.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1331385">
				<div id="div-comment-1331385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1331385">
			March 29, 2018 at 12:55 pm</a>		</div>

		<p>Reminds me of Redis&#8217; WATCH command and how it works with transactions for optimistic locking: <a href="https://redis.io/topics/transactions#optimistic-locking-using-check-and-set" rel="nofollow">https://redis.io/topics/transactions#optimistic-locking-using-check-and-set</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-odd thread-alt depth-1" id="comment-1332495">
				<div id="div-comment-1332495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375#comment-1332495">
			April 9, 2018 at 4:17 pm</a>		</div>

		<p>I wonder if the ARM64 version use LL/SC or the new CAS instructions introduced in ARMv8.1.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>