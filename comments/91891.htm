<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1210591">
				<div id="div-comment-1210591" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210591">
			October 29, 2015 at 7:07 am</a>		</div>

		<p>What we are doing wrong: calling OpenEvent on an event in the same process. If for some reason you need another handle, call DuplicateHandle; but you should design your way out of needing it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1210581">
				<div id="div-comment-1210581" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210581">
			October 29, 2015 at 7:22 am</a>		</div>

		<p>SYNCHRONIZE is for waiting; setting an event requires EVENT_MODIFY_STATE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00037ffe8545d1b7 even thread-even depth-1" id="comment-1210571">
				<div id="div-comment-1210571" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/David+Totzke' rel='external nofollow' class='url'>David Totzke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210571">
			October 29, 2015 at 7:23 am</a>		</div>

		<p>You asked for SYNCHRONIZE when what you really wanted was SYNCHRONIZE | EVENT_MODIFY_STATE. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00037ffe8545d1b7 odd alt thread-odd thread-alt depth-1" id="comment-1210551">
				<div id="div-comment-1210551" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/David+Totzke' rel='external nofollow' class='url'>David Totzke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210551">
			October 29, 2015 at 7:35 am</a>		</div>

		<p>@Joshua Given that CreateEvent returns with EVENT_ALL_ACCESS wouldn&#39;t DuplicateHandle give your copy the same access rights? &nbsp;This would seem to violate the &quot;When requesting access to an object, it&#39;s best to ask for the minimum access required to get the job done&quot; rule. &nbsp;Curious and too lazy to look it up. &nbsp;:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1210541">
				<div id="div-comment-1210541" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210541">
			October 29, 2015 at 7:42 am</a>		</div>

		<p>And if you are lazy you can use MAXIMUM_ALLOWED. This is especially useful when supporting XP/2003 (PROCESS_QUERY_INFORMATION) and Vista+ (PROCESS_QUERY_LIMITED_INFORMATION), otherwise you would have to OpenProcess twice in some cases on NT6.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1210491">
				<div id="div-comment-1210491" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210491">
			October 29, 2015 at 8:57 am</a>		</div>

		<p>One reason many people ask for too much at create time is because the second failure &#8211; to use &#8211; is often problematic. </p>
<p>It can happen only rarely on some unusual code path and not caught in normal testing</p>
<p>It requires modifying code possibly far away from the use point under development. </p>
<p>The whole thing seems to be insufficiently well designed. Why cannot rights be, if allowed, increased at use time?</p>
<p>That is if access X is denied at use time try to add the permission to the handle and only fail if that fails. </p>
<p>I know I could probably code such a wrapper myself but it seems like something that ought to be baked in. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1210481">
				<div id="div-comment-1210481" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210481">
			October 29, 2015 at 9:14 am</a>		</div>

		<p>@David Totzke: &quot;When you have an object, almost never request it.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1210471">
				<div id="div-comment-1210471" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210471">
			October 29, 2015 at 9:15 am</a>		</div>

		<p>&gt;&gt;That is if access X is denied at use time try to add the permission to the handle and only fail if that fails.&lt;&lt;</p>
<p>You want to be able to open all files without specifying any restriction, and if you call FileRead() or FileWrite(), it should just happen (if the user of your application has this permission in theory)?</p>
<p>Beside other issues, this would delay permission checks to some random points in the code instead being performed at CreateFile.</p>
<p>If you want to be able to write to something, what is in the way for you to just open the handle with write permission?</p>
<div class="post">[<em>Other problems: File locking. (If you could upgrade a handle, then that would invalidate prior file locking decisions.) Also, giving an intentionally low-access handle to another component. (E.g., a handle to an event you can wait on, but which you cannot signal.) The basic principle is that permissions are checked at the time the handle is created. This saves having to do permission checks at every operation. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1210461">
				<div id="div-comment-1210461" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210461">
			October 29, 2015 at 11:32 am</a>		</div>

		<p>Someone wrote: &quot;If you want to be able to write to something, what is in the way for you to just open the handle with write permission?&quot;</p>
<p>Please re-read my comment where I gave some examples why. The basic issue is that the code doing the use is often written at a different time from the code that creates and not even by the same person.</p>
<p>Raymond: I get the basic principle, the perf benefit it provides and that there are scenarios where having non-upgradable handle is deliberate. My point is that the most common scenario is made cumbersome by this. Whenever you write UseObjectX you need to find where the handle was created and validate that you have the permission (or deduce it in some other way). If you *remove* the UseObjectX line you ideally need to go and validate that the permissions you ask for are not an overkill now (nobody really does that of course).</p>
<p>It *would* be better design IMO where you had to explicitly do something for special scenarios you mention (e.g. mark the handle as non-upgradable at create time if you really want it to) while the most common way &quot;just works&quot;.</p>
<p>This isn&#39;t a super big issue by any means but enough people get bitten by it as your blog post and my own experience suggest.</p>
<div class="post">[<em>The perf benefit is definitely non-negligible. Suppose you access a file or registry key that is remote. You get &quot;access denied&quot;. Now instead of propagating the result back to the caller, you try to upgrade the handle, which is another network round trip. Everything now takes twice as long. (Also, upgrading the handle will invalidate earlier security decisions made based on the previous handle access level.) And finally, making handles auto-upgrade means that the actual error condition is <span style="text-decoration:underline;">harder</span> to find. &quot;Most of the time, the upgrade succeeds, but occasionally, there is a sharing violation and the upgrade fails.&quot; Instead of catching the problem up front, it is detected only if the code path is exercised. Going back to the original problem: You should set up the &quot;give me a handle&quot; function so you tell it the access you want from that handle, instead of having that function guess what access you want and hoping for the best. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1210451">
				<div id="div-comment-1210451" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rosalinda Ramirez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210451">
			October 29, 2015 at 11:58 am</a>		</div>

		<p>What happens when your access gets revoked while you have the handle open?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1210421">
				<div id="div-comment-1210421" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210421">
			October 29, 2015 at 12:56 pm</a>		</div>

		<p>@Rozalinda Ramirez:</p>
<p>The security descriptor (ACL) is only checked when you open the object handle. If the ACL changes after that, it doesn&#39;t affect access through existing handles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1210401">
				<div id="div-comment-1210401" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210401">
			October 29, 2015 at 2:31 pm</a>		</div>

		<p>[&quot;Most of the time, the upgrade succeeds, but occasionally, there is a sharing violation and the upgrade fails.&quot; -Raymond]</p>
<p>Ah good you saw the same thing I did. Upgrading from read to write automatically is not so smart.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1210381">
				<div id="div-comment-1210381" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jgh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210381">
			October 30, 2015 at 5:14 am</a>		</div>

		<p>Decades ago I had to debug loads of brain-dead code that did &quot;open for update&quot; when all it wanted to subsequently do was read from the file, and the original authors couldn&#39;t understand the concept of not having the authority to write to a file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1210371">
				<div id="div-comment-1210371" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210371">
			October 30, 2015 at 5:57 am</a>		</div>

		<p>&quot;The basic issue is that the code doing the use is often written at a different time from the code that creates and not even by the same person.&quot;</p>
<p>No, this is a non-issue. You have an object with some methods, all designed around the usual &quot;open&quot;, work and &quot;close&quot; principal (for example, logging to a file or reading some text file). The file access is only done by the very few methods of this object. it is not visible to anyone else, and there is absolutely no desire to read from a logfile or to write to your input file.</p>
<p>There is no &quot;often&quot; here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1210251">
				<div id="div-comment-1210251" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151029-00/?p=91891#comment-1210251">
			October 30, 2015 at 12:55 pm</a>		</div>

		<p>&gt;That is if access X is denied at use time try to add the permission to the handle and only fail if that fails. </p>
<p>Why stop there? &nbsp;We could get rid of opening files entirely. &nbsp;Just write to the file, and if necessary, all of the &#39;open&#39; nonsense happens for you.</p>
<p>In reality, one major reason for the existence of &#39;open&#39; is that so we can get the expensive stuff over and done with once. Where expensive stuff includes ACL checking.</p>
<p>&#8212;</p>
<p>On a more philosophical level, if I open for read access and then my program does a write, why should the system conclude that I *want* to write? &nbsp; Perhaps it&#39;s a bug, and if it is, I want to fail, not possibly corrupt data. &nbsp; </p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>