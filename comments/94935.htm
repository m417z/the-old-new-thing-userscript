<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1276895">
				<div id="div-comment-1276895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1276895">
			December 14, 2016 at 7:19 am</a>		</div>

		<p>This reminds me of the sort of things you get a lot from <a>Security Theater Auditors</a> that don&#8217;t know what they are doing and are just hired to shift liability.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-2 parent" id="comment-1276905">
				<div id="div-comment-1276905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1276905">
			December 14, 2016 at 7:20 am</a>		</div>

		<p>darn it removed the link: <a href="http://serverfault.com/q/293217" rel="nofollow">http://serverfault.com/q/293217</a></p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1276945">
				<div id="div-comment-1276945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1276945">
			December 14, 2016 at 9:43 am</a>		</div>

		<p>Just.  Wow.  Thanks for that link!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1276975">
				<div id="div-comment-1276975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wayne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1276975">
			December 14, 2016 at 10:27 am</a>		</div>

		<p>That is the scariest thing I Read in a long time.  I wish I could unread it.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-4" id="comment-1277015">
				<div id="div-comment-1277015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1277015">
			December 14, 2016 at 5:43 pm</a>		</div>

		<p>Agreed. I wonder how that auditor could stay in the industry that long (assuming he didn&#8217;t lie about this), and not be fired when the mail is CC-ed to the CTO.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1276915">
				<div id="div-comment-1276915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1276915">
			December 14, 2016 at 8:43 am</a>		</div>

		<p>Why are these passwords being encrypted and decrypted in the first place, rather than hashed?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1276925">
				<div id="div-comment-1276925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1276925">
			December 14, 2016 at 9:15 am</a>		</div>

		<p>Because the network resource doesn&#8217;t let you sign in with a userid and a hash.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-scott-brickey odd alt thread-even depth-1 parent" id="comment-1276935">
				<div id="div-comment-1276935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Scott+Brickey' rel='external nofollow' class='url'>Scott Brickey</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1276935">
			December 14, 2016 at 9:18 am</a>		</div>

		<p>bigger question&#8230; with the performance abilities to brute force password attack (hashcat), which can probably be given a specific salt / entropy&#8230; does the encryption use effort based algorithms or linear time algorithms? I suspect the latter (I generally tend to assume the worst when it comes to security), which then becomes the actual weakness</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1276986">
				<div id="div-comment-1276986" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1276986">
			December 14, 2016 at 10:36 am</a>		</div>

		<p>Pretty sure you have mixed up encryption and hashing in your question. (only hashing has difficulty algorithms) Second, I don&#8217;t think it is applicable. Without getting sufficiently high level access there is no access to encrypted password (and once there, you don&#8217;t really need it anymore) or you get code running in correct process under correct account and then see this article.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1276936">
				<div id="div-comment-1276936" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Colin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1276936">
			December 14, 2016 at 9:25 am</a>		</div>

		<p>&#8220;And if you give each password a different salt, then the reverse-lookup attack completely _dissolves_&#8221;</p>
<p>Pun intended? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1276955">
				<div id="div-comment-1276955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen Touset</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1276955">
			December 14, 2016 at 10:03 am</a>		</div>

		<p>Raymond, you are confusing a salt with an initialization vector or nonce. Salts apply to password hashing, and are not relevant to symmetric encryption; CryptProtectData is a symmetric encryption function and not a password hash. The purpose of an IV in this scenario is vastly different, and has nothing to do with rainbow tables.</p>
<p>It&#8217;s hard to tell exactly what that API actually does under the hood because its cryptographic guarantees don&#8217;t seem to be documented (which is an extraordinarily poor idea for an encryption function), but if it&#8217;s using *only* the optional entropy parameter as the value of its IV, it&#8217;s entirely plausible then it&#8217;s highly plausible there *is* a security vulnerability here, if not the one originally reported. On the other hand, if the optional entropy is just AAD passed to an AEAD cipher, then using the name of the network resource here is completely acceptable.</p>
<p>Either way, the lack of documentation about what security guarantees that function actually provides makes it a cryptographic landmine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1276965">
				<div id="div-comment-1276965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alexi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1276965">
			December 14, 2016 at 10:21 am</a>		</div>

		<p>I apoliogise if I am trumpeting my ignorance to all and sundry, but doesn&#8217;t this type of &#8220;vulnerability&#8221; stem from a confusion between &#8220;salting&#8221; (protection against precomputed dictionaries) versus &#8220;key stretching&#8221; (protection against brute force attacks)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1276985">
				<div id="div-comment-1276985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1276985">
			December 14, 2016 at 10:30 am</a>		</div>

		<p>I love these dubious vulnerability posts :D</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1276995">
				<div id="div-comment-1276995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1276995">
			December 14, 2016 at 10:50 am</a>		</div>

		<p>The problem has a difficult solution if you need to provide the clear password to the remote server. You could (and, in fact, you *should*) generate a different, pseudo-random salt for every password (I use the hash of the concatenation of the current timestamp with a short pseudo-random string). But you have to store it along with the encrypted password, and if you use a two-way function, attackers would have enough information to decrypt the password. Encrypting a password with a two-way function only dissuade occasional lookers, and is never a serious security measure. No hash, no security: even the weakest hash is (marginally) more secure than the most complex reversible algorithm.</p>
<p>Alternatively, you could ask the user for a &#8220;master password&#8221; and use it as the salt (without storing it on disk, of course). But you would need to ask the user for the master password at least once for every session a network connection is made, and that would defeat the purpose of storing the password. It would only make a difference if the software made several connections to different servers (the user would have to enter the password only once instead of several times), but that is an unlikely scenario.</p>
<p>See that I&#8217;m considering that the process&#8217; private memory is safe, and thus I&#8217;m free to store plain text passwords there (but not on disk). If you need to make sure you don&#8217;t store plain passwords even in private memory, the rules change completely, and one-way hashes are mandatory.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fredericmagnyf even depth-2" id="comment-1277045">
				<div id="div-comment-1277045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1277045">
			December 15, 2016 at 2:19 am</a>		</div>

		<p>If you have a master password, why use it as salt rather than as base input for deriving the key to decrypting the password? (of course it still needs to be accompanied by salt; personnally I&#8217;d store this salt in plaintext alongside the encrypted password)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1277025">
				<div id="div-comment-1277025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1277025">
			December 14, 2016 at 6:05 pm</a>		</div>

		<p>I may be mistaken, but I think that CryptProtectData already uses a master password.  (Specifically, the user&#8217;s logon password.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1277035">
				<div id="div-comment-1277035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Koopa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1277035">
			December 14, 2016 at 11:55 pm</a>		</div>

		<p>&#8220;Bonus bonus chatter&#8221;? It really is christmas :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1277195">
				<div id="div-comment-1277195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Petr Kadlec</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1277195">
			December 16, 2016 at 8:00 am</a>		</div>

		<p>OK, I am confused about the “classic Unix” remark. OK, there was a time when Unix systems stored password _hashes and salts_ in world-readable /etc/passwd. Nowadays, publicizing _hashes_ is considered a bad idea (especially when used with an outdated hashing algorithm, among others limiting the password to eight characters), so Unix systems moved _hashes and salts_ to non-readable /etc/shadow. Was there a time when hashes were private, while salts public? Or, why say “the salt is readable by anyone”?? It feels like the whole two paragraphs are just a red herring. Also, I’d say the terminology here is a bit mixed. “Salt” is generally used for (password) _hashing_, not password _encryption_. For encryption, we typically have initialization vectors, nonces, and tweaks.</p>
<p>(Even though when discussing “dubious security vulnerabilities”, it is difficult to distinguish “this is wrong because the original idea is wrong” from “this explanation of the original idea is wrong”, it may be just a matter of taste/opinion.)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1277217">
				<div id="div-comment-1277217" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1277217">
			December 16, 2016 at 11:34 am</a>		</div>

		<p>Yes, I meant super-classic Unix, where the /etc/passwd file was world-readable. (Because that&#8217;s the Unix I had when I grew up.)</p>
<p>And yes, I&#8217;m confusing salts with nonces. Encryption is not my field of expertise.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1277226">
				<div id="div-comment-1277226" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1277226">
			December 17, 2016 at 3:31 am</a>		</div>

		<p>These days /etc/passwd is still world-readable, and has to be such that numeric user-IDs can be converted to usernames, and vice-versa.</p>
<p>But (salted) hashes are now stored in a non-readable file.  I think the parent was asking whether there was ever a time when the hashes were private but the salts were public, and I suspect there never was such a time.  But it doesn&#8217;t spoil your illustration :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3 parent" id="comment-1277255">
				<div id="div-comment-1277255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1277255">
			December 18, 2016 at 2:16 pm</a>		</div>

		<p>Very old Unix (including Version 7 and the like) did encrypt passwords rather than hash them, as far as I&#8217;m aware.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1277425">
				<div id="div-comment-1277425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161214-00/?p=94935#comment-1277425">
			December 19, 2016 at 8:28 pm</a>		</div>

		<p>If I remember rightly, they used an encryption algorithm to generate a hash.  The password wasn&#8217;t encrypted, it was used as the encryption key.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>