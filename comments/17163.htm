<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-761133">
				<div id="div-comment-761133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">santosh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761133">
			August 10, 2009 at 11:16 am</a>		</div>

		<p>Can we supply any number of extra params to that function? Say 50 or 5k ?</p>
<p>Theoretical use less question :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-761143">
				<div id="div-comment-761143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761143">
			August 10, 2009 at 12:15 pm</a>		</div>

		<p>&quot;Can we supply any number of extra params to that function? Say 50 or 5k ?&quot;</p>
<p>That would made for a WTF-laden code, but I bet some &quot;enterprisey&quot; code somewhere does it, for something like, making a huge string from an array of strings (without using StringBuilder):</p>
<ol>
<li>Create format string: &quot;{0}{1}{2}&#8230;{n}&quot;</li>
<li>
<p>Pass format string created in #1 and array to string.Format.</p>
</li>
</ol>
<p>Disgusting indeed, but I had to think of it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-761153">
				<div id="div-comment-761153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.arunmahendrakar.com' rel='external nofollow' class='url'>Arun Mahendrakar</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761153">
			August 10, 2009 at 12:24 pm</a>		</div>

		<p>@@Santosh, seems like there is a limit:</p>
<p><a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/561020/string-format-parameters" rel="nofollow">http://stackoverflow.com/questions/561020/string-format-parameters</a></p>
<p>I&#8217;m still testing this.</p>
<p>Arun</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-761213">
				<div id="div-comment-761213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761213">
			August 10, 2009 at 1:24 pm</a>		</div>

		<p>It definitely shouldn&#8217;t throw an exception, but since I&#8217;d guess that more than 90% of the time such a mismatch is an oversight by the programmer it might be nice if the C# compiler issued a warning if it happened to notice (maybe it already does &#8211; I should check).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-761223">
				<div id="div-comment-761223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761223">
			August 10, 2009 at 1:41 pm</a>		</div>

		<p>Another place this might show up: localization</p>
<p>You might have localizable format string which might not use all of the parameters in a certain language for whatever reason. &nbsp;So you might do something like:</p>
<p>String.format(getLocalizedFormat(), arg1, arg2, arg3);</p>
<p>Actually, the same reasoning applies to any format string generated at runtime.</p>
<p>I would argue, though, that for any hard-coded format string, it should always be a compiler warning not to supply the exact number of arguments specified. &nbsp;Actually, it should be an error, but that adds some non-orthogonality to the language spec.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-761263">
				<div id="div-comment-761263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761263">
			August 10, 2009 at 3:16 pm</a>		</div>

		<blockquote><p>
  Actually, it should be an error, but that adds some non-orthogonality to the language spec.
</p></blockquote>
<p>gcc does that for printf &amp; co, at least by default.</p>
<p>The notion offends me that the compiler thinks it knows what some random function does with its arguments (though reading the fine print in the language spec probably gives it the right to do so, and in any case it&#8217;s not hard-wired). &nbsp;However, on the pragmatic side, it has saved me from silly mistakes now and then.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-761163">
				<div id="div-comment-761163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zbyszek Swirski</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761163">
			August 10, 2009 at 12:27 pm</a>		</div>

		<p>That&#8217;s why I love Resharper :) It will mark such unused parameters.</p>
<p>As for question about *any* number of parameters &#8211; I am pretty sure there is a limit. If you specify more than certain number of parameters they will not fit on the stack and format string will not fit in the memory ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-761303">
				<div id="div-comment-761303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761303">
			August 10, 2009 at 7:37 pm</a>		</div>

		<p>&quot;they will not fit on the stack&quot;</p>
<p>string.Format&#8217;s arguments are passed as a single array, not as individual parameters on the stack. It&#8217;s just that C# has some syntatic sugar to make it LOOK LIKE they&#8217;re &quot;normal&quot; arguments. If you look at the definition of string.Format, it&#8217;s actually:</p>
<p>void Format(string format, params object[] args) { &#8230; }</p>
<p>(well, there&#8217;s other overloads, but that&#8217;s the important one).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-761323">
				<div id="div-comment-761323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761323">
			August 10, 2009 at 9:36 pm</a>		</div>

		<p>Did someone actually ask this question? The answer should be self evident. It throws an exception if there are too few parameters (or more accurately, too few elements in the array) because it doesn&#8217;t know what to do if there&#8217;s no value for a particular element. If there are too many elements in the array, well, it knows what to do: Nothing. It doesn&#8217;t even check&#8211;why should it?</p>
<p>santosh: The limit should be a hardware limit rather than a software limit. However, it appears (IMPLEMENTATION DETAIL) that in order to prevent runaways the code stops at anything at or over 10,000,000. It&#8217;s actually using a StringBuilder internally, calling StringBuilder.AppendFormat(null, FormatString, ParamsArray).</p>
<p>When it hits an opening curly brace (&quot;{&quot;) it checks to see if the next one is an opening curly brace and if so continues looking, but if not it stops and begins processing the number. It has a temporary number that starts at zero. First it multiplies the temporary by ten, then subtracts the character &#8216;0&#8217; from the current character (if it is between &#8216;0&#8217; and &#8216;9&#8217;, inclusive) and adds it to the temporary variable. It then moves on to the next char and checks to see if it is a number and the current number is less than 1,000,000. If it is, it repeats the previous pair of sentences. Otherwise it declares the number done and uses whatever it came up with.</p>
<p>In the case of a number that goes beyond 10,000,000, when it&#8217;s processing the formatting it realizes that there&#8217;s still a number where it was expecting a comma, colon, or closing bracket and throws an exception. (END IMPLEMENTATION DETAILS).</p>
<p>Keep in mind that you don&#8217;t have to actually pass params to String.Format (or StringBuilder.AppendFormat), you can instead pass an object (or any) array. You also don&#8217;t have to reference every single element. Just try:</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;object[] Temp = new object[100000000];</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Temp[9999999] = 5;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Console.WriteLine(string.Format(&quot;{99999999}&quot;, Temp));</p>
<p>Worked lovely for me, but try adding 1 more&#8230;</p>
<p>The array is huge, by the way, so it takes a while to allocate, but it is possible to allocate it and therefore it is possible to pass parameters to string.Format beyond what it is programmed to handle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-761333">
				<div id="div-comment-761333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761333">
			August 10, 2009 at 9:52 pm</a>		</div>

		<p>I&#8217;ve used this (as well as skipping using some of the placeholders) intentionally quite a few times. &nbsp;It&#8217;s particularly handy when you want to look up a status/error message in a translation table using a common method, or if you have a bunch of alternate &quot;slots&quot; that info can be displayed.</p>
<p>Lets you just provide all the data that they might want to display and then whoever&#8217;s doing the UI/translation can pick and choose which bits they want where. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-761353">
				<div id="div-comment-761353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761353">
			August 10, 2009 at 11:38 pm</a>		</div>

		<p>Just to add to the useless theoretical discussion, interpreting the ECMA 334 document for the C# specification&#8230; you could pass a maximum of approx. 2.84E+19 (2^64 &#8211; 1 to be exact) arguments.</p>
<p>In practice, the compiler would probably choke on it if you passed that many individual arguments to a parameter-array (as opposed to passing an array object.)</p>
<p>In theoretical physics there&#8217;s a rule of thumb saying (paraphrased) that if the answer to a question is infinity, then the question is probably invalid.</p>
<p>Applying this to C# programming, if you are passing over 18 sextillion† individual arguments to a function, you are probably doing something wrong. It may be legal in theory, but that doesn&#8217;t mean it&#8217;s right.</p>
<p>† US or short scale. Would be trillion on the long scale, or to most Europeans.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-761283">
				<div id="div-comment-761283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Colascione</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761283">
			August 10, 2009 at 4:41 pm</a>		</div>

		<p>Dave,</p>
<p>You can always turn the thing off. You can actually configure gcc to check for printf-style arguments on *any* function by using the __attributes__((format(&#8230;))) construct.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-761373">
				<div id="div-comment-761373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Nahr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761373">
			August 11, 2009 at 1:48 am</a>		</div>

		<p>&quot;Did someone actually ask this question?&quot;</p>
<p>That&#8217;s what I was wondering as well. &nbsp;&quot;Why doesn&#8217;t my application crash on this perfectly valid call? &nbsp;Please make my application crash!&quot;</p>
<p>Though perhaps someone had a formatting bug related to supplying a wrong set of arguments, and throwing on too many arguments would have caught the bug.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-761403">
				<div id="div-comment-761403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fred M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761403">
			August 11, 2009 at 5:56 am</a>		</div>

		<p>&quot;But if you ask for DATE, then you have an error.&quot;</p>
<p>&#8230;sigh&#8230;so true in my life, happens to me constantly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-761803">
				<div id="div-comment-761803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761803">
			August 12, 2009 at 12:29 am</a>		</div>

		<p>I don&#8217;t believe that passing too many arguments to printf should result in a compiler error. A warning is fine, even welcome, I would say, but it can still compile the function call, so it should just go ahead and do it. (I know, even if there are too few arguments with respect to the format string, it can still be compiled.)</p>
<p>Similarly, while trying to use an undeclared variable is an error, since the compiler has no storage or data type for it, declaring a variable but not using it may be an oversight on the programmer&#8217;s part, but there&#8217;s nothing to stop the compiler from generating code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-761843">
				<div id="div-comment-761843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761843">
			August 12, 2009 at 3:45 am</a>		</div>

		<p>Problem is, how could it be a compile warning? The compiler doesn&#8217;t know what the formatting string does. The formatting string is handled by the function&#8217;s code. For all the compiler knows, the formatting string could look like &quot;{1} {2}&quot;, or it could look like &quot;%f %d&quot;, or it could look like &quot;$1 $2&quot;, or it could look like &quot;&lt;variable pos=&quot;0&quot;/&gt; &lt;variable pos=&quot;1&quot;/&gt;&quot;. The compiler doesn&#8217;t know, or really care. All it knows is that it&#8217;s received 3 parameters: a string, a float, and an integer. That fits the function signature of a string and an object array with a params attribute, so it uses that.</p>
<p>How&#8217;s the compiler going to emit a warning when you don&#8217;t happen to use all the parameters? It has no way of knowing if you did or not.</p>
<p>Only the runtime would know how the string is handled. How&#8217;s the runtime going to communicate a warning?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-761883">
				<div id="div-comment-761883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761883">
			August 12, 2009 at 6:37 am</a>		</div>

		<p>Erzengel &#8211; dave mentioned above that gcc does this for printf and similar functions, and I&#8217;ve seen it happen myself. It kind of surprised me when I first saw it.</p>
<p>I suppose the rules have been specified somewhere. And at compile time, they can only be applied with static strings. One way or another, it has been done.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-761913">
				<div id="div-comment-761913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ooh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-761913">
			August 12, 2009 at 8:39 am</a>		</div>

		<p>Falcon, yes it HAS been done. But that doesn&#8217;t mean that it SHOULD be done.</p>
<p>The compiler&#8217;s job is to translate source code into some other format which in case of the .NET compilers is IL. What a compiler of a statically typed language like C# needs to do is to enforce strong typing.</p>
<p>The right tool for a job like this is static analysis via FxCop or CAT.NET.</p>
<p>BTW: FxCop has been integrated into the compiler in VS2008 and is extendible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762143">
				<div id="div-comment-762143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090810-00/?p=17163#comment-762143">
			August 12, 2009 at 11:22 pm</a>		</div>

		<p>Don&#8217;t get me wrong &#8211; I agree that compilers shouldn&#8217;t delve too deeply into the semantics. For instance, detecting references to freed memory in C code is not the compiler&#8217;s job. There&#8217;s a risk of both false positives and negatives, and all the effort put into implementing these features could go to waste.</p>
<p>On the other hand, when you run a static analysis tool on the code, you are specifically asking for these kinds of checks to be done.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>