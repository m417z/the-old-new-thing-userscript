<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1234946">
				<div id="div-comment-1234946" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234946">
			July 28, 2015 at 7:34 am</a>		</div>

		<p>&gt;â€¢You are allowed to write to a register after a previous instruction reads it. (With rare exceptions.)</p>
<p>I read that and found it curious that you would explicitly state that, it seems obvious to me. But then thinking about a pure software person, he/she might wonder how that is possible if the instructions are executed in parallel. (I.e. how does it read and write at the same time?)</p>
<p>It has to do with the setup/hold times on the flip-flops that make up the register bits. If the hold time is sufficiently shorter than the propagation delay through the flip-flop, then you can read the previous value of the bit at the same clock edge as you are writing a new value to the bit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1222211">
				<div id="div-comment-1222211" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1222211">
			July 28, 2015 at 7:36 am</a>		</div>

		<p>Just to clarify&#8230; &quot;If the hold time *of the destination register* is sufficiently shorter than the propagation delay through the *source register* flip-flop&#8230;.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234936">
				<div id="div-comment-1234936" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234936">
			July 28, 2015 at 7:38 am</a>		</div>

		<p>Ah, this sounds more like the Intel I know: lots of seemingly arbitrary restrictions on things to minimize orthogonality. :-)</p>
<p>(I&#39;m being deliberately mean, of course. I don&#39;t design hardware.)</p>
<div class="post">[<em>News flash: Hardware is not orthogonal. You can&#39;t do floating point arithmetic in a MMU, or integer multiplication in a branch predictor. Remember, the idea here is to make scheduling decisions at compile time, not run time. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1222201">
				<div id="div-comment-1222201" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1222201">
			July 28, 2015 at 7:58 am</a>		</div>

		<p>So now, 11 years later, we *finally* learn how a processor could possibly have 41 bit instructions.</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2004/09/14/229387.aspx">blogs.msdn.com/&#8230;/229387.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234926">
				<div id="div-comment-1234926" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234926">
			July 28, 2015 at 8:24 am</a>		</div>

		<p>That 41-bit instructions mean it&#39;s nearly impossible for a human to read machine code directly (either in hex code or ASCII mojibake). In x86 and x86-64 many instructions are easily recognizable (with training).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234916">
				<div id="div-comment-1234916" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234916">
			July 28, 2015 at 8:41 am</a>		</div>

		<p>I&#39;m sure if anybody had actually bothered to come up with all these rules and think about how to implement an efficient compiler for it before spending billions of dollars in implementing it, we could&#39;ve avoided this train wreck and the whole industry would be better off for it..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1222191">
				<div id="div-comment-1222191" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1222191">
			July 28, 2015 at 9:40 am</a>		</div>

		<p>@Voo &#8211; The compilers *are* efficient, given an appropriate workload. &nbsp;The problem with Itanium is that (outside of scientific computing) there aren&#39;t enough instructions per basic block to effectively fill the bundles. &nbsp; &nbsp;Besides, the history of computing is littered with failures. &nbsp; Lisp Machines, 5th Generation computers, Connection Machines, Gallium Arsenide &#8211; all took billions of dollars of investment and produced little or nothing in return.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234906">
				<div id="div-comment-1234906" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234906">
			July 28, 2015 at 10:13 am</a>		</div>

		<p>&gt; It does highlight that writing ia64 assembly by hand is exceedingly difficult because you have to make sure every triplet of instructions you write matches a valid template in terms of slots and stops, and you have to ensure that the instruction groups do not break the rules. </p>
<p>How did the Windows team handle this for stuff that is usually written in assembly like the bootloader and JIT compilers?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234896">
				<div id="div-comment-1234896" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234896">
			July 28, 2015 at 10:32 am</a>		</div>

		<p>@Raymond: an orthogonal design would be bundles of five instructions, one per unit (actually, as I understand it the Itanium has four units, but let&#39;s say a virtual fifth one is necessary for the ALU/non-ALU distinction), each with their own instruction set, and dependency rules as a separate layer. Instead there are 32 templates that specify some combination of units and dependencies.</p>
<p>Alright, so &quot;orthogonal&quot; isn&#39;t the right word for that. And please don&#39;t explain how the templates make sense and how a design with 5 slots would be even less efficient and produce even more nops and stops than the current design, not to mention the effort the chip would have to expend to check validity &#8212; I get that. The templates effectively act as a form of compression to cut down on the enormous amount of impossible/unproductive combinations you could otherwise encode, like, I don&#39;t know, an instruction set is supposed to do.</p>
<p>Jeez, it&#39;s like you can&#39;t even make ignorant, baseless accusations in blog comments anymore! What&#39;s the world coming to. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234886">
				<div id="div-comment-1234886" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234886">
			July 28, 2015 at 10:37 am</a>		</div>

		<p>Ah, this is one of those rare occasions where we can see when Raymond actually wrote this blog post. The last revision of that linked Wikipedia article having the anchor target &quot;Sizes&quot; is from 2013: <a rel="nofollow" target="_new" href="https://en.wikipedia.org/w/index.php?title=Mobile_home&amp;oldid=582070516">en.wikipedia.org/&#8230;/index.php</a> :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234856">
				<div id="div-comment-1234856" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234856">
			July 28, 2015 at 11:00 am</a>		</div>

		<p>Out of curiosity, what would happen if you omitted the stop in the example, like this:</p>
<p> &nbsp; &nbsp;mov r3 = r2</p>
<p> &nbsp; &nbsp;add r1 = r2, r4</p>
<p> &nbsp; &nbsp;add r2 = r1, r3</p>
<p>That&#39;s the sort of thing I&#39;d test out for myself, if I had an IA64 box to play with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234846">
				<div id="div-comment-1234846" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234846">
			July 28, 2015 at 11:22 am</a>		</div>

		<p>@Eric Last time I checked (admittedly that was when Itanium was still relevant, so about a decade ago), compilers produced code that was a far, far cry from optimal due to all the complexity of the ISA. Sure with the given workloads and highly optimized code Itanium could be tremendously efficient, problem is those two conditions were hardly ever true (and don&#39;t get me started on power efficiency).</p>
<p>And while LISP machines might not have been much of a mainstream success (sad, but not unexpected), they gave the industry lots of new, innovative ideas to play around with &#8211; I just don&#39;t see what cool features of Itanium we&#39;ll be looking back in 20 years and be missing.</p>
<p>@Sebastiaan Dammann: Speaking from experience, nobody would ever write a JIT compiler &#8211; which is in the end nothing but an optimizing compiler with some additional information and tighter time limits for compilation &#8211; in assembly. Yes you might have to write some small parts in assembly or at least use assembly fragments, but that&#39;s only a tiny amount of code. </p>
<p>No idea about operating systems (I only ever wrote toy ones), but I wager you can get quite far with using C and inline asm instructions when needing to access special registers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234836">
				<div id="div-comment-1234836" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234836">
			July 28, 2015 at 12:01 pm</a>		</div>

		<p>@mokomull: I&#39;m lead to believe that your code now behaves differently depending on when interrupts fire.</p>
<p>@Sebastiaan Damman: I don&#39;t know what the Windows team did but my solution would be make the assembler validate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234826">
				<div id="div-comment-1234826" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234826">
			July 28, 2015 at 12:02 pm</a>		</div>

		<p>I guess this would be great, if one could trust the compiler to never make a mistake! &nbsp;And with something this complicated, it would be a long time before that trust was earned, and a long time after that before the generated code was optimal enough to beat good ole x86!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234816">
				<div id="div-comment-1234816" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234816">
			July 28, 2015 at 12:06 pm</a>		</div>

		<p>To me, it&#39;s plausible that read-before-write is allowed within an instruction group simply because I know that processors are pipelined: Computing the result of an operation takes several clock cycles, so even with parallel or slightly delayed execution, the read operations will easily occur before the write operations.</p>
<p>The other possibility, write-before-read, is the one that causes problems (stalls or expensive feedback path logic) with pipelined designs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234806">
				<div id="div-comment-1234806" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234806">
			July 28, 2015 at 12:13 pm</a>		</div>

		<p>Just pencilling it out, there are five instruction types and three slots, and in principle each slot _could_ need a stop after it, so there are exactly 1000 possible combinations; if the instruction encoding actually permitted all of them it would&#39;ve required ten bits, not five, to encode that. &nbsp;Conveniently, 24 encodings would be left over for those double-wide bundles. &nbsp;And one extra bit, because 118 is not a multiple of 3, but 117 is. &nbsp;And now the instructions themselves are only 39 bits wide. &nbsp;I have no recollection of how much leftover encoding space there was in the instructions themselves.</p>
<p>(Wasn&#39;t one of the double-wide instructions a 64-bit load immediate? That&#39;s not all that special purpose.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234796">
				<div id="div-comment-1234796" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234796">
			July 28, 2015 at 12:27 pm</a>		</div>

		<p>Discussions have been going on since at least the late 50&#39;s/early 60&#39;s regarding how much work should developers depend on compilers to do on their behalf. &nbsp;I remember when business programs migrated away from ASM to a high level language. &nbsp;The old ASM guys would look at the code and laugh. &nbsp;In today&#39;s world, there are optimizing compilers that emit fantastic code.</p>
<p>If one looks back in time, we had $5,000 per year programmers working on machines that cost millions of dollars. &nbsp;It made sense to optimize the machine and use as much highly skilled labor that was needed. &nbsp;In today&#39;s world, those economics are turned completely upside down. &nbsp;Often, the fully loaded cost of a developer for just 2 hours worth of work, exceeds the device the developer is targeting.</p>
<p>From a pure cost/benefit analysis, today&#39;s economics argues strongly for putting as much &quot;intelligence&quot; into a compiler as is possible.</p>
<p>The &quot;gotcha&quot; re: the Itanium processor is that it was caught in the middle of the economic shift from cheap developer/expensive machine to expensive developer/cheap machine. &nbsp;In some ways, it was ahead of its time in terms of where we have landed today &#8212; not so much from an architectural standpoint &#8212; rather from an economic standpoint.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234786">
				<div id="div-comment-1234786" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234786">
			July 28, 2015 at 1:36 pm</a>		</div>

		<p>Yesterday&#39;s post made me think ia64 would be fun to write assembly in, this post has convinced me otherwise.</p>
<p>It is sort of sad, so many registers, so many fun features, locked behind a system that requires too many degrees of thinking to allow for ease of use.</p>
<p>Even ISAs have a UX.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1234776">
				<div id="div-comment-1234776" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Macrosofter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234776">
			July 28, 2015 at 1:49 pm</a>		</div>

		<p>&gt;Next time, we&#39;ll look at the calling convention. </p>
<p>While we wait for the next time, we can read previous Raymond&#39;s post about it:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2004/01/13/58199.aspx">blogs.msdn.com/&#8230;/58199.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234766">
				<div id="div-comment-1234766" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234766">
			July 28, 2015 at 3:19 pm</a>		</div>

		<p>@12BitSlab huh? Itanium hardly was living in a world of cheap programmers. And for actual application developers it doesn&#39;t matter whether the compiler does extra work or the hardware. Heck since both compiler writers and hardware engineers earn rather similar wages the argument doesn&#39;t hold much water. Sure you want to get the machine that requires the least amount of application developer involvement to get the best performance out of it, but with all those high level languages there really aren&#39;t many (any? Can&#39;t think of one) specific things that apply to only one architecture either.</p>
<p>The problem is that itanium was &#8211; is &#8211; so complicated that no compiler products anything close to optimal code while die space has exploded with hardware engineers ring to find good uses for it anyhow apart from putting more and more caches into the chip. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234756">
				<div id="div-comment-1234756" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234756">
			July 28, 2015 at 6:32 pm</a>		</div>

		<p>Not on topic, but I&#39;ve always wondered what Intel&#39;s own compiler writers thought of the chip. The company has a reputation for writing good optimising compilers for numerical applications on their own chips. I came across an article written in 2001 saying Intel was going to fund research into compilers to improve the performance of software running on the Itanium, and that the research would take a couple of years or so to yield results. This was around the same time as the chip was supposed to be on the market. <a rel="nofollow" target="_new" href="https://web.archive.org/web/20010710211733/http://news.zdnet.co.uk/story/0,,s2085832,00.html">web.archive.org/&#8230;/0,,s2085832,00.html</a>. In the meantime the AMD64 specification had already been released (according to Wikipedia), though actual chips had not yet been delivered.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234746">
				<div id="div-comment-1234746" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234746">
			July 28, 2015 at 8:07 pm</a>		</div>

		<p>When you have a series of posts, please maintain links between them, eg jump from this page back to part 1.</p>
<div class="post">[<em>I usually do it after the fact, because all of these items are autoposted, and the URL of part 1 isn&#39;t known at the time I write part 2. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234736">
				<div id="div-comment-1234736" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234736">
			July 28, 2015 at 8:11 pm</a>		</div>

		<p>Zack: Raymond made a slight mistake &#8212; M, I, A, F, and B are really instruction types. Slot types are actually based on execution units. Since A-type (Integer ALU) instructions can be executed both M-units and I-units, there is no A-slot.</p>
<p>With only 4 different types of execution units, there are 512 possible combinations of units and stops. Once you remove the duplicates (MII is the same as IMI and IIM) you get 328 different templates. Adding in the double-wide instructions gives 344 different templates you could possibly define.</p>
<p>Of those 344 possible templates, they chose 24 to implement, leaving 8 reserved for future use.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234716">
				<div id="div-comment-1234716" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234716">
			July 29, 2015 at 1:30 am</a>		</div>

		<p>This is so tightly integrated with the hardware design.</p>
<p>I wonder what they can do to maintain binary compatibility across generations of processors. </p>
<p>x86 use microcode to translate instructions. </p>
<p>But microcode will essentially nullify all benefit of IA64.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234696">
				<div id="div-comment-1234696" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234696">
			July 29, 2015 at 6:27 am</a>		</div>

		<p>why were there three slots, and not two or ten? Was it tested experimentally (e.g. that MIII is far less common than MII, as is MI) or was this an early design decision (&quot;128bit are a nice round number, let&#39;s use this size&quot;) that had to be &quot;coded around&quot;?</p>
<div class="post">[<em>You don&#39;t want too many slots, because that results in slot waste. You can&#39;t jump into the middle of a bundle, so all jump targets must be in slot zero, and all call instructions must be in the last slot. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234676">
				<div id="div-comment-1234676" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234676">
			July 29, 2015 at 7:46 am</a>		</div>

		<p>@ Voo, &quot;cheap programmers&quot; is a relative term. &nbsp;The relation is cost_of_machine / cost_of_programmer. &nbsp;At the time the Itanium was in the initial planning stages, that ratio was still rather high for systems that could do real work. &nbsp;By the time the Itanium was an after thought, that ratio had dropped dramatically.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234506">
				<div id="div-comment-1234506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150728-00/?p=90811#comment-1234506">
			July 29, 2015 at 4:06 pm</a>		</div>

		<p>@DanielCheng: It is my understanding that this is one of the several reasons why Nvidia refuses to publish an architecture manual for their GPUs &#8212; when the next generation comes around they only want to have to rev the shader compiler.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>