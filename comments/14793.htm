<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-815333">
				<div id="div-comment-815333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815333">
			February 26, 2010 at 7:01 am</a>		</div>

		<p>And presumably all this is why UMS will replace fibers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815363">
				<div id="div-comment-815363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815363">
			February 26, 2010 at 7:20 am</a>		</div>

		<p>Maybe it&#8217;s just me, but I&#8217;ve never understood what a fiber is actually useful for. &nbsp;From the MSDN page it seems like it is just a mechanism to allow your application to keep track of and schedule its own quasi-threads of execution instead of using the built-in operating system threads. &nbsp;I&#8217;m not sure why I would ever want to do this. &nbsp;I heed all the dire warnings and just stay away from fibers entirely.</p>
<div class=post>[<i><a href="http://blogs.msdn.com/larryosterman/archive/2005/01/05/347314.aspx" rel="nofollow">As Larry Osterman explained in 2005</a>, fibers were created for customers like SQL Server (which calls it &#8220;<a href="http://support.microsoft.com/kb/319942" rel="nofollow">lightweight pooling</a>&#8220;.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815383">
				<div id="div-comment-815383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815383">
			February 26, 2010 at 7:37 am</a>		</div>

		<p>Should I honorably commit suicide for the good of humanity if I am a professional programmer for four years and I never heard of fibers?</p>
<div class=post>[<i>It&#8217;s okay. Fibers are a solution for a niche problem, and changes in techology in the meantime have weakened the advantage they provide. See Larry&#8217;s article I linked to in an earlier comment. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815393">
				<div id="div-comment-815393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815393">
			February 26, 2010 at 7:42 am</a>		</div>

		<p>I&#8217;m sorry to point out that the &#8220;fibers are promiscuous with threads&#8221; link in the article is displaying Apple-affinity and has changed its protocol to iHTTP.</p>
<div class=post>[<i>Fixed. iThanks. (In my mind, iX is an Intel thing. They were doing it long before Apple did. They even tried to trademark the letter &#8220;i&#8221;.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815463">
				<div id="div-comment-815463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815463">
			February 26, 2010 at 9:54 am</a>		</div>

		<blockquote><p>
  &nbsp;For example, C runtime functions like strcmp have thread affinity
</p></blockquote>
<p>Isn&#8217;t it &quot;like stricmp&quot;? strcmp is &quot;simpler&quot;:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/e0z9k731" rel="nofollow">http://msdn.microsoft.com/en-us/library/e0z9k731</a>(VS.80).aspx</p>
<p>&quot;The strcmp functions differ from the strcoll functions in that strcmp comparisons are not affected by locale, whereas the manner of strcoll comparisons is determined by the LC_COLLATE category of the current locale&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815493">
				<div id="div-comment-815493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815493">
			February 26, 2010 at 10:23 am</a>		</div>

		<p>John: Fibers are threads you schedule yourself. If you have lots of calculations that are best implemented with their own stack but don&#8217;t want the overhead of kernel threads, you would use fibers.</p>
<p>For example, let&#8217;s say that you&#8217;ve got some function that wants to enumerate so many elements of some complicated data structure. You could implement this with a function that recursively walks the data structure, yielding a new element at every step. Since it&#8217;s recursive, it needs its own stack, meaning it can&#8217;t be called as a function without running to completion. If you need to be able to consume its output before it finishes, you have to run it on a separate thread. Unfortunately that&#8217;s going to be slow because every time your consumer needs a new item, it will signal an event indicating that it&#8217;s ready for a new item and wait on an event that will indicate when the new item is available. That wait causes the kernel to schedule a new thread on that CPU, which is not necessarily the thread that is producing new items. It&#8217;s much simpler to just tell the CPU to switch stacks (and registers) to the producer function for the brief time required to produce the next item. You could probably do this hundreds of times in the amount of time you would otherwise spend waiting for your thread to be scheduled.</p>
<p>As Raymond said, it&#8217;s not common to be in this scenario. Personally, I prefer to get my fibers from popcorn (see <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2010/02/26/9969665.aspx#comments" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2010/02/26/9969665.aspx#comments</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815543">
				<div id="div-comment-815543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815543">
			February 26, 2010 at 11:55 am</a>		</div>

		<p>Aren&#8217;t fibers actually much simpler than threads? With multiple threads you have to be prepared that anything can happen at any time, but with fibers you can explicitely control when to pass access to shared objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815583">
				<div id="div-comment-815583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815583">
			February 26, 2010 at 6:42 pm</a>		</div>

		<p>re: &#8220;Actually, you were already in bad shape once you unscheduled the fiber while it owned a resource: An unscheduled fiber cannot release the resource. &#8220;</p>
<p>The concept of ownership is not well defined here.</p>
<p>My understanding is that fibers themselves do not own a resource. As you point out, those resources which have some thread affinity must be released on the same thread that acquired them, regardless of which fiber was used. For those resources that do not have affinity, presumably one can release them on an arbitrary thread or fiber.</p>
<p>Fiber resource ownership would have to be implemented by the fiber code itself, not the operating system or other external code. But even then, a sufficiently clever algorithm could set things up so that any fiber could release it even if the one that acquired it was unscheduled or terminated (hey, sounds like a garbage collector fiber).</p>
<div class=post>[<i>True, the &#8220;ownership&#8221; is unclear, but I was talking more informally, where you think of a resource being &#8220;owned&#8221; by the code that acquired it (and therefore needs to be released by some other part of that same code). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815593">
				<div id="div-comment-815593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Colascione</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815593">
			February 26, 2010 at 6:55 pm</a>		</div>

		<p>Of course, if you ensure that all fibers run to completion, and that a given fiber runs on exactly one thread, you&#8217;re in much safer territory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815643">
				<div id="div-comment-815643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815643">
			March 1, 2010 at 2:49 am</a>		</div>

		<p>@Daniel:</p>
<p>Doesn&#8217;t ensuring that a given fibre runs on exactly one thread give up all the advantages of useing fibres?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815663">
				<div id="div-comment-815663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815663">
			March 1, 2010 at 3:33 am</a>		</div>

		<p>@Joe:</p>
<p>Not at all, if you&#8217;re using them as an abstraction mechanism.</p>
<p>Fibres can still be useful on a single thread just as threads can still be useful on a single CPU.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815673">
				<div id="div-comment-815673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815673">
			March 1, 2010 at 7:36 am</a>		</div>

		<p>Few years back while debugging a out process COM server I have seen that my critical sections behaving strangely, that two thread in execution were able to acquire the same critical section, without one of them calling a LeaveCriticalSection, now I seem to think most probably the com server was using fibers to schedule those unit of execution &nbsp;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815693">
				<div id="div-comment-815693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815693">
			March 1, 2010 at 9:04 am</a>		</div>

		<p>@Leo: Do you mean running all fibres on a single thread and using them to take advantage of the seperate stacks, rather than taking advantage of the opportunities for concurrency?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>