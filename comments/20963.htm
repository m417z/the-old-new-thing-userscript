<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-665603">
				<div id="div-comment-665603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eff Five</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665603">
			September 8, 2008 at 5:28 pm</a>		</div>

		<p>The following is from Code Complete Chapter 25: Code-Tuning Strategies in a section “Measurements Need to Be Precise”</p>
<p>&quot;&#8230;make sure that you&#8217;re measuring only the execution time of the code you’re tuning. Use the number of CPU clock ticks allocated to your program rather than the time of day. Otherwise when the system switches from your program to another program one of your routines will be penalized for the time spent executing another program&quot;</p>
<p>I’ve always wondered want was meant by this and how to accomplish it. I guess I don’t have to ponder it anymore.</p>
<p>Thanks</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-665623">
				<div id="div-comment-665623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665623">
			September 8, 2008 at 6:50 pm</a>		</div>

		<p>@Eff Five: but the system is doing many things (chiefly paging or other disk I/O) that may not be credited as CPU time to your process, but they can dominate your actual execution time.</p>
<p>It&#8217;s not as if your users are able to run your program without running the other background tasks, anyway.</p>
<p>You should turn off any CPU hogs &#8211; no Folding@Home, for example &#8211; but that&#8217;s really about it.</p>
<p>As for finding a buggy HAL, I reckon it was the standard multiprocessor ACPI HAL. That used to use the RDTSC instruction until it was found that AMD had tied that to the actual processor clock speed, which could vary due to power management.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-665643">
				<div id="div-comment-665643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665643">
			September 8, 2008 at 7:34 pm</a>		</div>

		<p>From <a rel="nofollow" target="_new" href="http://www.virtualdub.org/blog/pivot/entry.php?id=106" rel="nofollow">http://www.virtualdub.org/blog/pivot/entry.php?id=106</a>:</p>
<p>&quot;&quot;So, realistically, using QPC() actually exposes you to all of the existing problems of the time stamp counter AND some other bugs.&quot;</p>
<p>Not all at the same time. It is like claiming Netscape 8 is insecure because it expose you to the bugs of both IE and Firefox.&quot;</p>
<p>The problem is, how do you determine the counter used from user mode?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-665663">
				<div id="div-comment-665663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jess Askin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665663">
			September 8, 2008 at 10:34 pm</a>		</div>

		<p>Would running in Safe Mode help get raw numbers for an app? &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-665703">
				<div id="div-comment-665703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665703">
			September 9, 2008 at 12:44 am</a>		</div>

		<p>&quot;There is still more than one process running in safe mode, so not really, no.&quot;</p>
<p>Indeed, you can&#8217;t turn processes off for the same reason you can&#8217;t turn security off in any modern OS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-665713">
				<div id="div-comment-665713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://carsten.orthbandt.de' rel='external nofollow' class='url'>Carsten Orthbandt</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665713">
			September 9, 2008 at 1:03 am</a>		</div>

		<p>Most times QPC is mentioned there&#8217;s one very very important thing missing.</p>
<p>The fact that QPC is grossly unreliable. Depending on the actual hardware and CPU load, QPC will randomly jump back and/or forth several seconds (in my experience it was usually ~4 seconds).</p>
<p>You <em>can</em> work around that by tracking wall-clock time too and trying to detect those leaps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-665613">
				<div id="div-comment-665613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Narr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665613">
			September 8, 2008 at 6:18 pm</a>		</div>

		<p>&gt;I’ve always wondered want was meant by this and how to accomplish it.</p>
<p>&gt;I guess I don’t have to ponder it anymore.</p>
<p>But you still don&#8217;t know what is meant nor how to accomplish it. What it means is to use something like the Windows performance counter that tracks your particular processes&#8217; CPU time[1]*.</p>
<p>[1] <a rel="nofollow" target="_new" href="http://www.codeproject.com/kb/system/cpuusageByDudiAvramov.aspx" rel="nofollow">http://www.codeproject.com/kb/system/cpuusageByDudiAvramov.aspx</a></p>
<p>* I think the linked article has the right counter, but I might be wrong, or there might be a better one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-665723">
				<div id="div-comment-665723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665723">
			September 9, 2008 at 1:56 am</a>		</div>

		<p>I think the right function to get the CPU time spent by your process is GetProcessTimes, available since Windows 2000. The only problem is, it is flawed &#8211; it charges the whole CPU quantum to your process even if it&#8217;s interrupted in the middle of it. It still reported more CPU time for the exact same code when Winamp was running in the background, so I just gave up trying and went back to wall-clock time (with as few processes running as possible).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-665733">
				<div id="div-comment-665733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665733">
			September 9, 2008 at 2:00 am</a>		</div>

		<p>As an implementer of QPC and QPF (on Windows CE), it&#8217;s always quite interesting. Firstly, the frequency I end up using for QPF is usually based on the crystal frequency &#8211; I&#8217;ve seen 32.768kHz (RTC timekeeping), 3.58MHz (used because NTSC crystals are cheap), and 3.25MHz (used because it&#8217;s multiplied by 4 to get a standard 13MHz clock).</p>
<p>Some hardware is nice, and provide a nice upcounting register for that, others not so nice and provide a limited register. Either way, the fun part has always been that QPF has to return a 64-bit value, while if we&#8217;re lucky, the counter is a 32bit register, which can overflow anywhere from under 20 minutes to several hours, and there&#8217;s not usually an interrupt you can use to capture the high bit, either, so QPC ends up wrapping quickly.</p>
<p>On a PC, from what I&#8217;ve seen, QPF/QPC is based on one of several sources of high-performance timing. At the low end, you&#8217;ve got the lame old PC programmable interval timer, at approximately 100kHz. On modern PCs, though, QPF/QPC get their values from the ACPI programmable timer. This can mean the source of the timing information comes from a chipset crystal that ticks away at an internal counter, or some other source of timing information. Unfortunately, it seems on an AMD system, the ACPI BIOS is broken in that the &quot;high performance counter&quot; used is the time-stamp counter (which isn&#8217;t synchronized across multiple processors necessarily), and as people have found out, the TSC beats in time with the clock frequency, which violates the requirement of the timer in that it&#8217;s user controllable and predictable. Which is why QPF doesn&#8217;t work if you&#8217;re using a TSC based timer &#8211; QPF gets its value on startup, but if you&#8217;re using TSC, it comes out randomly.</p>
<p>Nothing the HAL can do if the ACPI BIOS returns the wrong timer to use&#8230; Probably happens in Linux too, which has support for the ACPI programmable timers.</p>
<p>Trivia: The purpose of the ACPI timers is to provide a nice source of timing interrupts for the scheduler, so you don&#8217;t have to rely on the old programmable timer. The latter has issues in that the scheduler goes nuts if you reprogram it accidentally. The ACPI timer is controlled only by the OS itself, and is much easier to protect against upset than the PIT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-665743">
				<div id="div-comment-665743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.virtualdub.org/' rel='external nofollow' class='url'>Phaeron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665743">
			September 9, 2008 at 2:37 am</a>		</div>

		<p>QPC/QPF is, in my opinion, a perfectly fine API that is just marred by implementation bugs. The interface is simple, and it has enough precision and range for most purposes. It&#8217;s just too bad that it doesn&#8217;t work on enough systems to be problematic. 500ns jitter, I can deal with. I can&#8217;t work around 30% variances in counting rate, or even worse, &gt;100ms jumps forward and backward due to badly synchronized TSCs between cores.</p>
<p>This is one of those cases where I think it would help to reveal something about the implementation. On more than one occasion I&#8217;ve seen people test QPF(), see the CPU frequency, test it on another system, see the CPU frequency again, and then write code that depends on it&#8230; only to have to fix it when I run it and it runs three orders of magnitude too slowly. If the documentation noted some of the sources that QPF() commonly uses and the huge range in counting rates (1MHz-3GHz), then I think fewer people would fall into this trap. The knowledge base articles about QPC problems, like 274323, also contain information that should really be noted in the docs. It&#8217;s not part of the API and it&#8217;s not intended behavior, but for better or worse, it&#8217;s what people have to deal with in the wild. IMO, QPC() should be treated like PulseEvent().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-665753">
				<div id="div-comment-665753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://qbziz.wordpress.com' rel='external nofollow' class='url'>KristofU</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665753">
			September 9, 2008 at 4:58 am</a>		</div>

		<p>I find it funny that a thing a computer should be great at : counting up at a fixed rate, creates so many problems.</p>
<p>Timers on pc&#8217;s have always been a bit of a mess, and QPC/QPF worked great until the buggy hardware appeared, from which time on we couldn&#8217;t use it anymore and had to rework our time keeping classes using GetSystemTimeAsFileTime.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-665683">
				<div id="div-comment-665683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codeka.com/blogs' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665683">
			September 8, 2008 at 11:42 pm</a>		</div>

		<p>Jess Askin: There is still more than one process running in safe mode, so not really, no.</p>
<p>As long as you do your performance test over a long enough period of time, the effects of other processes should be statistically reduced to the point where they&#8217;re insignificant anyway. As long as you&#8217;re being sensible about it&#8230;</p>
<p>Plus, there are plenty of applications where you *want* the wall-clock time anyway. For example, when doing frame-rate independent animation in games, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-665793">
				<div id="div-comment-665793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665793">
			September 9, 2008 at 11:21 am</a>		</div>

		<p>There is another issue with AMD CPUs (at least up to the Athlon XP, that I know of.) The TSC isn&#8217;t always up to date. It&#8217;s possible to get the same number more than once if it&#8217;s read in quick succession. As far as I can tell, it has something to do with the state of the CPU&#8217;s pipelines. Usually, it helps to keep the (three for Athlon XP) pipelines filled so that reading the TSC is done in parallel with instructions in the other pipelines. For example:</p>
<p>xor ecx,ecx</p>
<p>xor esi,esi</p>
<p>rdtsc</p>
<p>Avoid using the eax and edx registers, otherwise the pipelines would stall, because the rdtsc instruction writes the TSC into those.</p>
<p>Intel CPUs don&#8217;t seem to have this problem.</p>
<p>If an application needs precision timing that is consistent across hardware platforms, it&#8217;s usually best to give up on a little accuracy, and use a timing algorithm with hysteresis. Kinda like the software version a phase locked loop (see <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/PLL" rel="nofollow">http://en.wikipedia.org/wiki/PLL</a> ), but this is difficult get right.</p>
<p>Whatever you do, PUHLEASE don&#8217;t use timeBeginTime(). It changes thread scheduling, causes a significant increase in interrupts, and increases latency system-wide. Abuse and mis-use of timeBeginTime() has annoyed me to the point that I finally broke down and wrote a DLL that&#8217;s loaded via the evil AppInit_DLLs, intercepts all timeBeginTime() calls, and simple returns success without doing anything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-665823">
				<div id="div-comment-665823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eff Five</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665823">
			September 9, 2008 at 12:43 pm</a>		</div>

		<p>@Narr: &gt;you still don&#8217;t know what is meant nor how to accomplish it</p>
<p>That’s actually my point. Did McConnell mean “turn off anything you don’t need when you are perf testing”? I thought that it seemed so obvious that no one would actually bother to write that down. Clearly I was wrong on that score.</p>
<p>Perhaps he meant “avoid the problems of context switching by counting how many cycles/ticks/clocks that your code uses.” I take it that Mr. Chen believes that I might as well as count how many happy or sad or beautiful cycles it takes because that’s just as well defined. This is what I was thinking when I wrote that I don’t have to ponder it anymore.</p>
<p>Lastly when doing perf analysis I try to follow the advice in this blog entry <a rel="nofollow" target="_new" href="http://blogs.msdn.com/ricom/archive/2005/05/23/421205.aspx" rel="nofollow">http://blogs.msdn.com/ricom/archive/2005/05/23/421205.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-665933">
				<div id="div-comment-665933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665933">
			September 9, 2008 at 3:10 pm</a>		</div>

		<p>&quot;Unfortunately, it seems on an AMD system, the ACPI BIOS is broken in that the &quot;high performance counter&quot; used is the time-stamp counter (which isn&#8217;t synchronized across multiple processors necessarily), and as people have found out, the TSC beats in time with the clock frequency, which violates the requirement of the timer in that it&#8217;s user controllable and predictable. &quot;</p>
<p>Well, in this case, the OS is using rdtsc, otherwise /usepmtimer won&#8217;t fix it.</p>
<p><a rel="nofollow" target="_new" href="http://support.microsoft.com/kb/938448/" rel="nofollow">http://support.microsoft.com/kb/938448/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-665943">
				<div id="div-comment-665943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-665943">
			September 9, 2008 at 3:17 pm</a>		</div>

		<p>Phaeron: Your post is great, except for the last sentence, which I&#8217;d delete.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666033">
				<div id="div-comment-666033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-666033">
			September 9, 2008 at 8:05 pm</a>		</div>

		<p>For those who are having problems with QPC() now, right now the only way to determine the exact timer used is to attach a kernel debugger and step through the hal!KeQueryPerformanceCounter function. I hope this can be changed, but right now&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666133">
				<div id="div-comment-666133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-666133">
			September 10, 2008 at 10:26 am</a>		</div>

		<p>On my old K6-2 550Mhz computer, QPF returns 1193181. I guess it uses the 8253-compatible PIT counter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666213">
				<div id="div-comment-666213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-666213">
			September 10, 2008 at 11:58 am</a>		</div>

		<p>&quot;Whatever you do, PUHLEASE don&#8217;t use timeBeginTime(). It changes thread scheduling, causes a significant increase in interrupts, and increases latency system-wide.&quot;</p>
<p>Oh no, no more stupid &quot;evil timeBeginTime&quot; bitching, please.</p>
<p>Do you honestly believe a modern CPU has a problem with 1000 interrupts per second? It can easily handle 100,000 ips. And no, changing timer resolution doesn&#8217;t change dispatching time slice. These are different things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666243">
				<div id="div-comment-666243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-666243">
			September 10, 2008 at 12:43 pm</a>		</div>

		<p>&quot;Do you honestly believe a modern CPU has a problem with 1000 interrupts per second? It can easily handle 100,000 ips.&quot;</p>
<p>Except that 1000 interrupts per second affects power management by allowing the CPU to sleep less.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666253">
				<div id="div-comment-666253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-666253">
			September 10, 2008 at 1:10 pm</a>		</div>

		<p>Raymond I must say this</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2005/09/02/459952.aspx#460003" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2005/09/02/459952.aspx#460003</a></p>
<p>is the clearest example I&#8217;ve ever read explaining the difference between accuracy and precision. It&#8217;s scared into my brain now it was definetley confusing for me in the past. Keep up the good work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666473">
				<div id="div-comment-666473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-666473">
			September 11, 2008 at 6:37 am</a>		</div>

		<blockquote><p>
  Whatever you do, PUHLEASE don&#8217;t use timeBeginTime().
</p></blockquote>
<p>Some applications do need accurate timing. The standard Windows XP time slice is too long for video games.</p>
<p>Consequence: They either have to use timeBeginTime() or use a CPU-intensive waiting loop. I would prefer the former. In my experience, video games use the latter.</p>
<p>Is it better?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666583">
				<div id="div-comment-666583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-666583">
			September 11, 2008 at 1:17 pm</a>		</div>

		<p>@Alexander Grigoriev: It must be nice to have a PC with latest and greatest multi-core, hyper-threaded, etc. CPU, where you don&#8217;t notice the difference. Unfortunately, I&#8217;m still limping along on my old Athlon XP 2500+, and I do notice the difference. Mutlitasking suffers a lot.</p>
<p>For example, I use Indexing Service a lot; if some application used timeBeginTime() and then uses a fair bit of CPU time while Indexing Service is in the middle of a master merge, the PC seems to so down to a crawl. Even a simple alt-tab can take a few seconds to respond. I/O is not an issue here</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666593">
				<div id="div-comment-666593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-666593">
			September 11, 2008 at 1:17 pm</a>		</div>

		<p>@Alexander Grigoriev: It must be nice to have a PC with latest and greatest multi-core, hyper-threaded, etc. CPU, where you don&#8217;t notice the difference. Unfortunately, I&#8217;m still limping along on my old Athlon XP 2500+, and I do notice the difference. Mutlitasking suffers a lot.</p>
<p>For example, I use Indexing Service a lot; if some application used timeBeginTime() and then uses a fair bit of CPU time while Indexing Service is in the middle of a master merge, the PC seems to so down to a crawl. Even a simple alt-tab can take a few seconds to respond. I/O is not an issue here</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666613">
				<div id="div-comment-666613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-666613">
			September 11, 2008 at 1:27 pm</a>		</div>

		<p>[My bad. I fat-fingered some keyboard shortcuts.]</p>
<p>@SuperKoko: It&#8217;s been my experience that games run just fine, unless some other application has a higher base priority, and does a lot of polling. It&#8217;s very obvious when I accidentally leave Process Explorer running during a game.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666773">
				<div id="div-comment-666773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-666773">
			September 11, 2008 at 5:48 pm</a>		</div>

		<p>Oops meant &#8216;scarred&#8217; not &#8216;scared&#8217;&#8230; :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-667263">
				<div id="div-comment-667263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-667263">
			September 12, 2008 at 5:24 pm</a>		</div>

		<p>@Alexander Grigoriev: &quot;And no, changing timer resolution doesn&#8217;t change dispatching time slice. These are different things.&quot;</p>
<p>I beg to differ, BTW. Just write a little app that&#8217;s nothing more than an infinite empty loop. Run two instances of it, and add the Context Switches/sec performance counters for their threads in PerfMon. Watch those numbers for a while. Now run a program that does timeBeginPeriod(1). I just did this, and the sum of the Context Switches/sec of both apps just about doubled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-667293">
				<div id="div-comment-667293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alegr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-667293">
			September 12, 2008 at 7:06 pm</a>		</div>

		<p>&quot;Now run a program that does timeBeginPeriod(1). I just did this, and the sum of the Context Switches/sec of both apps just about doubled.&quot;</p>
<p>If time slice was equal to the timer resolution, number of context switches would increase ten times.</p>
<p>I suppose you have a single processor or you&#8217;ve limited the test apps&#8217; affinity to the same processor?</p>
<p>&quot; Unfortunately, I&#8217;m still limping along on my old Athlon XP 2500+, and I do notice the difference. Mutlitasking suffers a lot.</p>
<p>For example, I use Indexing Service a lot; if some application used timeBeginTime() and then uses a fair bit of CPU time while Indexing Service is in the middle of a master merge&quot;</p>
<p>Indexing service is a WTF by itself. It looks like it was only tested with at least dual processor and 4 GB of memory. Those poor souls with a single processor and 1 GB, just have to disable that spawn of evil.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-667313">
				<div id="div-comment-667313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.conifersystems.com/' rel='external nofollow' class='url'>Matt Craighead</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080908-00/?p=20963#comment-667313">
			September 12, 2008 at 7:58 pm</a>		</div>

		<p>My timekeeping rant&#8230;</p>
<p>1. Time should never go backwards. &nbsp;It just shouldn&#8217;t. &nbsp;You can slow down time if you want to fix a clock that&#8217;s going too fast, but you shouldn&#8217;t have it skip backwards. &nbsp;This breaks subtraction of times, comparisons of times, etc. &nbsp;Suppose you have an event log of some sort and want to do a binary search to find the line in the log corresponding to a particular time&#8230; good luck if times can skip backwards whenever they feel like it. &nbsp;Or, it&#8217;s always fun to get negative benchmark results when you divide by a negative &quot;end-start&quot;.</p>
<p>2. Handling of leap seconds. &nbsp;See (1). &nbsp;Apparently whoever designed &quot;Unix time&quot; and its interaction with leap seconds decided that time should skip 1 second backwards at each leap second, so that a year is always 365*86400 or 366*86400 seconds long, even though really sometimes it&#8217;s 365*86400+1 or 366*86400+1 seconds long?</p>
<p>3. Time APIs with millisecond or worse precision. &nbsp;Come on, at least design the API so it&#8217;s *possible* to give me microseconds or better, even if currently you only implement seconds or milliseconds.</p>
<p>4. Time APIs that return 32-bit values. &nbsp;You&#8217;re just asking for overflow problems. &nbsp;Come on, we can afford 64 bits to store times these days.</p>
<p>5. Why should my CPU have to take interrupts regularly just to keep the system time up to date? &nbsp;Even 100 interrupts per second is wasteful, especially for power consumption. &nbsp;It&#8217;s pretty easy to build a 64-bit counter in hardware that increments the time automatically (with arbitrarily high precision), and then if the CPU wants to read the current time, it can read the register. &nbsp;If the CPU needs an interrupt to wake up at some point (a thread is doing a wait with a timeout), that&#8217;s fine, but that doesn&#8217;t require regular interrupts &#8212; it only requires an interrupt when the timeout expires.</p>
<p>6. All the problems with SMP and variable clock frequencies. &nbsp;Come on, is it so hard to build your main hardware timekeeping facility so that (1) it isn&#8217;t tied to a particular CPU and (2) it is in a clock domain whose frequency doesn&#8217;t change?</p>
<p>7. Interactions with standby/hibernate. &nbsp;This one always scares me&#8230; if the system is in standby or hibernate for a week, will my clock tick forward by a week, or will it look like no time at all has elapsed? &nbsp;Hopefully it will at least not reset to zero? &nbsp;Could you please at least document the behavior? :) &nbsp;(And let&#8217;s not even ask what happens if, during a hibernate session, you remove your CPU and plug in a new one with a different clock speed.)</p>
<p>8. Network protocols that force me to parse YYYYMMDDHHMMSS data and run it through a calendar algorithm (plus some time zone chicanery) just to extract what time they&#8217;re talking about. &nbsp;Would it be so bad to send the time across the wire as a Unix time or something instead of going through all that calendar stuff? &nbsp;The only place you should have to do time-&gt;date conversions should be at the &quot;final user output&quot; step, and date-&gt;time conversions only at the &quot;user input&quot; step.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>