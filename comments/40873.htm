<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-139423">
				<div id="div-comment-139423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139423">
			January 27, 2004 at 7:11 am</a>		</div>

		<p>I notice the errors themselves weren&#8217;t checked for expository purposes :)</p>
<p>// error checking deleted for expository purposes<br />
<br />hinst = LoadLibrary(you);<br />
<br />hicon = LoadIcon(you, MAKEINTRESOURCE(5));<br />
<br />FreeLibrary(hinst);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-139553">
				<div id="div-comment-139553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shane King</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139553">
			January 27, 2004 at 4:56 pm</a>		</div>

		<p>Sometimes doing these kind of &quot;immoral&quot; things is the only way though. Several times I&#8217;ve had to do ill advised things in DllMain because I absolutely need to ensure the dll doesn&#8217;t load if some condition isn&#8217;t met. It seems rather unfortunate that the only mechanism provided to do this shouldn&#8217;t (in theory) be used to do it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-139563">
				<div id="div-comment-139563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Maas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139563">
			January 27, 2004 at 5:30 pm</a>		</div>

		<p>Is this &quot;loader deadlock&quot; responsible for the phenomenon where Windows gets into a state where you can&#8217;t start any applications? (double-click and they just do nothing)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-139573">
				<div id="div-comment-139573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139573">
			January 27, 2004 at 6:29 pm</a>		</div>

		<p>Shane: Can you provide examples?  I&#8217;d be interested in knowing any loader problems that can&#8217;t be worked around.</p>
<p>Dan: On Windows NT, the loader deadlock issue is local to the process.  Each process has its own loader lock.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-139583">
				<div id="div-comment-139583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/ptorr/' rel='external nofollow' class='url'>Peter Torr</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139583">
			January 27, 2004 at 8:38 pm</a>		</div>

		<p>Dan, you have probably run out of desktop heap. Happens with 30-ish IE windows open (or a similar number of other apps):</p>
<p><a target="_new" href="http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support/kb/articles/Q126/9/62.ASP&amp;NoWebContent=1" rel="nofollow">http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support/kb/articles/Q126/9/62.ASP&#038;NoWebContent=1</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-139593">
				<div id="div-comment-139593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Larry Osterman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139593">
			January 27, 2004 at 9:14 pm</a>		</div>

		<p>Dan: Yes, the loader lock IS responsible for some of those situations.  Especially on Win9x.</p>
<p>And even more to the point, it turns out that many of these situations are undebuggable &#8211; the problem is that the debuggers can&#8217;t break into the app because to break into the app, they need to create a thread, which means that the loader lock needs to be taken (to call the DllMain in each DLL to tell them that the thread was created), but that hangs because someone has the loader lock held and hasn&#8217;t released it.</p>
<p>The most heinous example of this is DllMain functions that do:</p>
<p>DllMain(&lt;whatever)&gt;)<br />
<br />{<br />
<br />  if (ulReason == DLL_PROCESS_ATTACH)<br />
<br />  {<br />
<br />    CreateThread(ThreadToInitializeStuff);<br />
<br />    WaitForSingleObject(EventThatsSetWhenThreadRuns);<br />
<br />   }<br />
<br />    :<br />
<br />    :<br />
<br />}</p>
<p>This is a recipe for deadlocks, unfortunately there&#8217;s way too much code that does this.</p>
<p>One nasty problem is that this SOMETIMES works &#8211; not always, and not on all versions of Windows.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-139603">
				<div id="div-comment-139603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shane King</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139603">
			January 27, 2004 at 9:59 pm</a>		</div>

		<p>One scenario is where I&#8217;m loading the dll as a CLR profiler, which allows me to modify .NET code on the fly for tracing and debugging purposes.</p>
<p>The profiler needs to have the chance to load on the startup of every .NET program, because you can&#8217;t control the environment variables that cause the CLR to choose to laod it for a dllhost based process. Therefore, you must modify the global environment variables to cause it to always load.</p>
<p>The problem is, for most processes, I don&#8217;t want it to be loaded. So I have to deliberately cause a failure result from DllMain to cause it to not be loaded and held in memory by the CLR. This is being determined via the registry, which is apparently a no-no in DllMain.</p>
<p>I&#8217;d love for there to be another way (particuarly since returning failure from DllMain causes nasty event log messages about not being able to load the profiler), but if you return failure from the initialization function of the profiler, it holds it in memory anyway (which is unnaceptable, as it makes replacing the dll with a new version needlessly difficult, as you&#8217;ll need to shut down every process in which the CLR is active. This is particuarly a pain when developing the component, as Visual Studio .NET contains managed code).</p>
<p>Probably not the most common case in the world, but it&#8217;s one where the DllMain approach seems to work well. Since it&#8217;s basically used for debugging problems on production type machines where installing a real debugger is unacceptable, I don&#8217;t particuarly care if a future version of windows breaks it. It&#8217;s not like it&#8217;s going to hurt anyone.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-139613">
				<div id="div-comment-139613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Iain</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139613">
			January 27, 2004 at 10:45 pm</a>		</div>

		<p><a target="_new" href="http://blogs.msdn.com/cbrumme/archive/2003/08/20/51504.aspx" rel="nofollow">http://blogs.msdn.com/cbrumme/archive/2003/08/20/51504.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-139623">
				<div id="div-comment-139623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139623">
			January 27, 2004 at 11:35 pm</a>		</div>

		<blockquote><p>
  it turns out that many of these situations are undebuggable &#8211; the problem is that the debuggers can&#8217;t break into the app because to break into the app, they need to create a thread&#8230;</p>
<p>This was definitely a problem with VC6 (I don&#8217;t know if it was fixed in later versions). Fortunately, windbg/cdb can handle this just fine &#8211; they eventually time out and attach &quot;non-invasively&quot; (or you could use -pv option to force non-invasive attach to begin with).
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-139663">
				<div id="div-comment-139663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139663">
			January 28, 2004 at 11:18 am</a>		</div>

		<p>OCXs create this problem.   VB is quite willing to unload an OCX while it is still running.  So, the DLL&#8217;s get unloaded, but the process is not in termination.<br />
<br />It is a great way for a thread to wake up and land in code space that is no longer loaded.</p>
<p>You can make a self reference to the dll so that it won&#8217;t unload, but that can create other problems.</p>
<p>Personally, I think the bug is unloading of a DLL/OCX during runtime, but the VB development environment is quite willing to do it.  If Microsoft does it, it must be correct&#8230;.  grin.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-139713">
				<div id="div-comment-139713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://alias:ndiamond@msdn.discussions.microsoft.com' rel='external nofollow' class='url'>Norman Diamond</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139713">
			January 28, 2004 at 4:47 pm</a>		</div>

		<p>Mr. Chen, speaking of the MSDN page which Mr. Chen linked to, <a target="_new" href="http://msdn.microsoft.com/library/en-us/dllproc/base/dllmain.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/dllproc/base/dllmain.asp</a></p>
<p>Here&#8217;s another example where MSDN has recursion instead of useful information:  &quot;DllMain is a placeholder for the library-defined function name. You must specify the actual name you use when you build your DLL. For more information, see the documentation included with your development tools.&quot;</p>
<p>I don&#8217;t understand &quot;DllMain is a placeholder for the library-defined function name&quot; because whenever I&#8217;ve seen DllMain the name has always been DllMain.  Therefore I tried to obey &quot;For more information, see the documentation included with your development tools.&quot;</p>
<p>Of course I first saw those instructions in documentation that came on CD instead of seeing them on Microsoft&#8217;s web site.  Guess what documentation is included with my development tools.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-139753">
				<div id="div-comment-139753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139753">
			January 28, 2004 at 10:59 pm</a>		</div>

		<blockquote><p>
  I don&#8217;t understand &quot;DllMain is a placeholder for the library-defined function name&quot; because whenever I&#8217;ve seen DllMain the name has always been DllMain.</p>
<p>Typically, the real entry point is provided by CRT and is called something like DllMainCRTStartup. This function is the &quot;real&quot; &quot;DllMain&quot; as far as the loader is concerned. It performs CRT-specific initialization then calls your DllMain.</p>
<p>This is by the way the reason why global C++ constructors have the same limitations as DllMain.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-139883">
				<div id="div-comment-139883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://alias:ndiamond@msdn.discussions.microsoft.com' rel='external nofollow' class='url'>Norman Diamond</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139883">
			January 29, 2004 at 6:39 pm</a>		</div>

		<p>Mr. Lebedinsky, thank you for your explanation of DllMainCRTStartup but I&#8217;m still confused by MSDN.  I think the MSDN page on DllMain is intended to instruct a DLL programmer on how to write a DllMain in VC++.  I don&#8217;t think that MSDN page is intended to instruct a CRT programmer on how to make a CRT support the writing of DLLs in VC++.</p>
<p>For comparison, if MSDN has a page on coding a main() (I&#8217;m neglecting to check if it does), I don&#8217;t think it instructs CRT programmers on how to initialize the CRT and call the C program&#8217;s main().</p>
<p>(Meanwhile the recursion in that MSDN page is still there and it&#8217;s about to overflow my stack.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-139983">
				<div id="div-comment-139983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimmick.demon.co.uk' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-139983">
			January 30, 2004 at 7:09 am</a>		</div>

		<p>When the DLL is initialised, the loader jumps to the address in the AddressOfEntryPoint member of the IMAGE_OPTIONAL_HEADER for the file. With MS tools, you can specify this with the linker&#8217;s /ENTRY option.</p>
<p>If you don&#8217;t specify /ENTRY, the MS linker defaults to _DllMainCRTStartup if you&#8217;ve also specified /DLL. This function (as Raymond alludes to on the other thread) has an explicit reference to the function name DllMain. It&#8217;s always statically linked to your binary, even if you&#8217;re using the DLL version of the CRT (it would be a chicken/egg situation otherwise). The CRT has a special weak-reference to an internal do-nothing DllMain so that your DLL still links even if you don&#8217;t provide a DllMain of your own.</p>
<p>MSDN does have a page on WinMain, although it doesn&#8217;t cover wWinMain. wWinMain is a fake provided by the CRT which uses GetCommandLine to retrieve the Unicode command line and pass it as the lpCmdLine parameter. main and wmain are also wrapped up by corresponding CRTStartup functions in the CRT, to present a WinMain-compatible entry point for the loader.</p>
<p>Indeed, all of the [w][Win]{M|m}ainCRTStartup functions share the same code, implemented in crt0.c (which you can read if you&#8217;ve installed the CRT source code).</p>
<p>If you have to specify your own entry point but still need the CRT (maybe you need to initialise something before the CRT starts up), call _cinit to initialise the CRT.</p>
<p>A peculiarity of Windows CE is that it has no wWinMain; instead, WinMain&#8217;s lpCmdLine parameter is a LPWSTR. CE has no need for ANSI backward compatibility, of course. For CE, the CRT is part of the core system DLL, coredll.dll, which also includes all of the (supported) system entry points from the desktop&#8217;s kernel32.dll, advapi32.dll, user32.dll, gdi32.dll and some others. The xxxCRTStartup functions are implemented in corelibc.lib.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-140383">
				<div id="div-comment-140383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://alias:ndiamond@msdn.discussions.microsoft.com' rel='external nofollow' class='url'>Norman Diamond</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-140383">
			February 1, 2004 at 4:08 pm</a>		</div>

		<p>1/30/2004 7:09 AM Mike Dimmick:</p>
<p>Thank you for the detailed explanation of DllMain and [w]WinMain.  When I have a free hour or two I might indeed look at the source of crt0.c.  But actually the part of your posting I found most important was this:</p>
<p>&gt; This function [&#8230;] has an explicit<br />
<br />&gt; reference to the function name DllMain.</p>
<p>So my function still really has to be named DllMain(), and the MSDN page about DllMain might benefit by deleting threee sentences.</p>
<p>Now for one tangent.</p>
<p>&gt; CE has no need for ANSI backward<br />
<br />&gt; compatibility, of course.</p>
<p>For one application I accomplished that happy result by writing &quot; xFE xFF&quot; at the beginning of every text file.  Then Pocket Word was able to display the Unicode contents of the text files.  Otherwise I would have had to convert all strings from Unicode to Shift-JIS (ANSI code page 932) before writing them to text files.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-140433">
				<div id="div-comment-140433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-140433">
			February 1, 2004 at 5:07 pm</a>		</div>

		<p>The point is that from the Platform SDK&#8217;s point of view, the function name can be anything, and it&#8217;s up to the language runtime provider to decide what to call it.</p>
<p>It so happens that the VC people decided that the name of the function is&#8230; DllMain!  This is something that should be called out in the VC docs; the Platform SDK is compiler-agnostic. For example, if you write a DLL in assembly language (which I have done), then your DLL entry point can indeed be called anything you want, as long as you tell the linker.</p>
<p>Arguably the VC people should have called the entry point function something like CRTDllMain. But then again, most people don&#8217;t understand the difference between the platform and the runtime. (That&#8217;s part of the problem we&#8217;re having here. The Platform SDK says the name can be anything, but the runtime says the name must be DllMain.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-140483">
				<div id="div-comment-140483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://alias:ndiamond@msdn.discussions.microsoft.com' rel='external nofollow' class='url'>Norman Diamond</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-140483">
			February 2, 2004 at 12:30 am</a>		</div>

		<p>2/1/2004 5:07 PM Raymond Chen:</p>
<p>&gt; Arguably the VC people should have called<br />
<br />&gt; the entry point function something like<br />
<br />&gt; CRTDllMain.</p>
<p>_DllMainCRTStartup is something like CRTDllMain, no problem for me on this point.</p>
<p>&gt; most people don&#8217;t understand the difference<br />
<br />&gt; between the platform and the runtime.</p>
<p>Bingo.  If Microsoft&#8217;s development group in its internal operations finds it convenient to architect these separately, no problem.  But why should customers have to distinguish them?  From the point of view of ordinary programmers, a function call results in calling a function in some library which usually result in system calls somewhere down the line.  There are reasons for ordinary programmers to discover that MFC is separate from the API, but why should we have to know or care which parts of the API are which?</p>
<p>If Visual Studio could still be used for programming for other than Microsoft OSes then I could see your point.  (Yeah I see comments in some header files about targeting Macs, but the Visual Studio IDE doesn&#8217;t provide that target.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-140553">
				<div id="div-comment-140553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-140553">
			February 2, 2004 at 7:23 am</a>		</div>

		<p>The distinction between the Platform and the runtime is critical for people programming in languages other than C/C++ or for people using a compiler different from Visual Studio. If the Platform SDK blurred the distinction, then people using, say, the Borland compiler, would complain furiously that &quot;Microsoft is playing unfair, writing Platform documentation that works only with its own compiler&quot;, and they would have a valid point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-140653">
				<div id="div-comment-140653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://alias:ndiamond@msdn.discussions.microsoft.com' rel='external nofollow' class='url'>Norman Diamond</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-140653">
			February 2, 2004 at 4:50 pm</a>		</div>

		<p>2/2/2004 7:23 AM Raymond Chen:</p>
<p>&gt; The distinction between the Platform and the<br />
<br />&gt; runtime is critical for people programming<br />
<br />&gt; in languages other than C/C++ </p>
<p>Since there&#8217;s no Platform SDK for VB, I can see that VB programmers have to be aware that they only have the Runtime.  But the VB Runtime is already different from the VC++ Runtime.  So I still don&#8217;t understand why the distinction is critical.</p>
<p>&gt; or for people using a compiler different<br />
<br />&gt; from Visual Studio.</p>
<p>Do you mean that Borland includes its own C++ Runtime?  OK, if the difference between Platform and Runtime is critical for people who use a Runtime different from Visual Studio, then I understand.  To achieve this understanding, it is critical to observe the distinction between the Compiler and the Runtime  :-)</p>
<p>(From the point of view of the standard, it isn&#8217;t critical to observe such distinctions.  An implementation includes a preprocessor and compiler and library and everything.  There is no guarantee that you can mix a compiler and half of a library from one implementation with the other half of a library from another implementation and come up with anything usable.  But the standard isn&#8217;t the most relevant thing here.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-140743">
				<div id="div-comment-140743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-140743">
			February 2, 2004 at 9:34 pm</a>		</div>

		<p>People programming in VB or C# often will use a p/invoke-style mechanism to call OS functions, so they need to know whether a particular function is OS (provided with Windows) or whether it&#8217;s runtime (doesn&#8217;t come with Windows; comes with the corresponding language).</p>
<p>For example, you can&#8217;t p/invoke std::wstring.</p>
<p>And yes, different compiler vendors have different runtime libraries.  From a Standards point of view, the world &quot;beneath&quot; the program is monolithic. This is a valid view for the Standard to take (since it&#8217;s not in the business of dictating how OSs interface with languages), but it&#8217;s not how the world actually works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-152333">
				<div id="div-comment-152333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/03/09/86661.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-152333">
			March 9, 2004 at 1:11 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-159833">
				<div id="div-comment-159833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/ericlippert/archive/2004/03/31/105329.aspx' rel='external nofollow' class='url'>Fabulous Adventures In Coding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-159833">
			April 1, 2004 at 2:02 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223393">
				<div id="div-comment-223393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://hueser.name/blog/archive/0001/01/01/212.aspx' rel='external nofollow' class='url'>Martin's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-223393">
			November 6, 2004 at 5:24 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-507793">
				<div id="div-comment-507793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/archive/2007/05/24/2840970.aspx' rel='external nofollow' class='url'>Sorting It All Out : Honey, you are the [_tWin]Main source of joy in my life!</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040127-00/?p=40873#comment-507793">
			May 24, 2007 at 8:41 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/michkap/archive/2007/05/24/2840970.aspx" rel="nofollow">http://blogs.msdn.com/michkap/archive/2007/05/24/2840970.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>