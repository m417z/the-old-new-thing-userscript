<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (43)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-563073">
				<div id="div-comment-563073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xix</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563073">
			October 29, 2007 at 10:30 am</a>		</div>

		<p>Given the fury and gnashing of teeth I endure when getting the properties of a folder to obtain this bit of information, I can&#8217;t imagine how utterly unresponsive my PC would be if it did this for all folders, all the time (or even some of it).</p>
<p>One might think the recursive size could go into folder metadata and updated only when contents changed (recursively). &nbsp;That would probably involve a lot of gnashing as well, and several time machines, alas. &nbsp;</p>
<p>Though I rarely seem to need this information anyway, thankfully.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563083">
				<div id="div-comment-563083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ac</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563083">
			October 29, 2007 at 10:56 am</a>		</div>

		<p>One of the shell exstensions I always install is Folder Size (Property page tab, not column)</p>
<p><a rel="nofollow" target="_new" href="http://www.pcworld.com/downloads/file/fid,15304-order,1-page,1-c,alldownloads/description.html" rel="nofollow">http://www.pcworld.com/downloads/file/fid,15304-order,1-page,1-c,alldownloads/description.html</a></p>
<p><a rel="nofollow" target="_new" href="http://www.softcom.net/users/mikey719/foldersize_screenshot.html" rel="nofollow">http://www.softcom.net/users/mikey719/foldersize_screenshot.html</a></p>
<p>(Author homepage seems to be gone)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563093">
				<div id="div-comment-563093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Name required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563093">
			October 29, 2007 at 11:16 am</a>		</div>

		<p>Control Panel (or at least, things accessible from there) can tell which disks are local HDs and which are not, as can Explorer (how else could it offer to allow you to search &quot;Local Hard Drives (C:; D:). But it is too difficult to do that to have this feature for local HDs only?</p>
<p>I&#8217;m not saying the feature is a good idea &#8211; it is something one generally only needs to know pretty rarely &#8211; but saying it is because clients would take the network down as a result of it being present is a little strange.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563103">
				<div id="div-comment-563103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563103">
			October 29, 2007 at 11:24 am</a>		</div>

		<p>It always seemed to me that the file system could store this as metadata and keep it up to date as files changed. That way, it wouldn&#8217;t have to enumerate all the files to get the size.</p>
<p>Scott</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563123">
				<div id="div-comment-563123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563123">
			October 29, 2007 at 12:02 pm</a>		</div>

		<p>The feature probably wouldn&#8217;t interact well with symbolic links and the various types of NTFS reparse points. I would have liked this feature as well, though. &nbsp;</p>
<p>It would be nice if this information could go into one of the attributes of a directory MFT record, but it would be tough to know what to do if it ever gets out of sync&#8230; how do you know if the value you see there is accurate and when do you just have to recalculate it from scratch?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563143">
				<div id="div-comment-563143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sean</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563143">
			October 29, 2007 at 12:12 pm</a>		</div>

		<p>If you only need to know recursive size rarely, just use explorer. &nbsp;Right-click on the directory, select properties. &nbsp;See size, size on disk along with sub-directory and file counts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563153">
				<div id="div-comment-563153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563153">
			October 29, 2007 at 12:23 pm</a>		</div>

		<p>The tooltip shown in explorer do exactly this.</p>
<p>1. The tooltip destroys corporate networks/bandwith limited environments</p>
<p>2. The tooltip shows a ambiguous size</p>
<p>Why?</p>
<div class=post>[<i>Your second statement answers the first. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563163">
				<div id="div-comment-563163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563163">
			October 29, 2007 at 12:23 pm</a>		</div>

		<p>Coming from a Mac Classic background, I always install the Folder Size column first thing. (Well, I haven&#8217;t in Vista yet, waiting until I know for sure it&#8217;s compatible and stable). I guess Apple just doesn&#8217;t care about killing corporate networks, hah.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563173">
				<div id="div-comment-563173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563173">
			October 29, 2007 at 12:24 pm</a>		</div>

		<p>There is a good way to do this though, and it&#8217;s what the file manager I use does. (I&#8217;ll avoid dropping the name but see my homepage for some stuff I&#8217;ve written about the program if you are interested.)</p>
<p>The user can click a &quot;Get Sizes&quot; button on the toolbar which populates the normal size column for folders. If folders are selected when the button is pushed then only their sizes are calcualted; else all of them are calculated.</p>
<p>When the user wants the information it&#8217;s a single button click away, and doesn&#8217;t even take up the space of an extra column. When they aren&#8217;t interested it isn&#8217;t needlessly calculated.</p>
<p>This is much better than using the Properties dialog because it lets you see, sort and compare multiple folders at once. You can see the combined size of arbitrary combinations of folders by selecting them and checking the status bar.</p>
<p>Having become used to this I wouldn&#8217;t want to be without it now.</p>
<p>(The same program also lets you turn on automatic calculation in specific directories if you want to. I&#8217;ve never used that but I guess it would be useful in places where you know the directories are shallow, not on a network, and often need to see their sizes.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563193">
				<div id="div-comment-563193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563193">
			October 29, 2007 at 12:45 pm</a>		</div>

		<p>James Schend: It was actually much worse. When you had a Finder window open to a network folder, it would poll for changes &#8212; constantly. This was especially bad on LocalTalk, which ran at only 230kbps. If somebody noticed that the network (or just a computer) was running slow, there was a good chance that closing all the Finder windows would fix it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563203">
				<div id="div-comment-563203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563203">
			October 29, 2007 at 12:47 pm</a>		</div>

		<p>Also, I&#8217;m partial to the program WinDirStat for this. (<a rel="nofollow" target="_new" href="http://windirstat.info/" rel="nofollow">http://windirstat.info/</a>)</p>
<p>Shows you nice things like a graphical indication of directory sizes, so you can spot at a glance the big wasters.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563213">
				<div id="div-comment-563213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ma</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563213">
			October 29, 2007 at 12:55 pm</a>		</div>

		<p>Compressed / uncompressed sizes?</p>
<p>Permissions?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563223">
				<div id="div-comment-563223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://patf.net/blogs/index.php?blog=2' rel='external nofollow' class='url'>Patrick Farrell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563223">
			October 29, 2007 at 1:09 pm</a>		</div>

		<p>Local (and possibly network) directory sizes could be shown all the time if it were trivial to query that data. &nbsp;In my mind, recursive discovery of this information is an &quot;old school&quot; way of thinking. &nbsp;</p>
<p>Apple and ReiserFS have blazed the way into new capabilities that could allow this to be a O(1) complexity situation. &nbsp;Well, maybe O(n). &nbsp;By updating a database at the kernel instruction level, you could have make this data as easy to discover as a database query. &nbsp;</p>
<p>It was my understanding that WinFS would help push us towards this type of functionality, but as we&#8217;ve seen with WinFS and ResierFS, this type of functionality is really difficult to acheive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563233">
				<div id="div-comment-563233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563233">
			October 29, 2007 at 1:26 pm</a>		</div>

		<p>&quot;Apple and ReiserFS have blazed the way into new capabilities that could allow this to be a O(1) complexity situation. &nbsp;Well, maybe O(n).&quot;</p>
<p>O(n) what? Doing a full traversal to find the size of a directory is O(n) in probably the number of files, which is is the most natural thing for n to be. [The problem then is that n is exponential in the depth of the directory tree.]</p>
<p>And how do they do this without storing the size of each directory in the directory node itself, and updating it on each save? If that&#8217;s how they do it, unless they use that data otherwise I don&#8217;t think it&#8217;s worth it. (I&#8217;m interested in FS design a bit, so I&#8217;m genuinely interested in the answer.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563243">
				<div id="div-comment-563243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563243">
			October 29, 2007 at 1:49 pm</a>		</div>

		<p>&quot;It always seemed to me that the file system could store this as metadata and keep it up to date as files changed.&quot;</p>
<p>That might seem to work, but the extra overhead to every write operation would add up (I would imagine a program like a database would do lots of writes in a single folder in a short time frame). &nbsp;Also, there are probably quite a few different ways to modify files on disk; some of which are not conducive to being &quot;tracked.&quot; &nbsp;I could write a program that did not use a single Windows API that tracked what I was doing to a folder&#8217;s contents.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563253">
				<div id="div-comment-563253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katla</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563253">
			October 29, 2007 at 2:50 pm</a>		</div>

		<p>We use a program called FolderSizes for this type of thing (<a rel="nofollow" target="_new" href="http://www.foldersizes.com" rel="nofollow">http://www.foldersizes.com</a>). It does lots of other stuff, too, but I can right-click in Explorer and launch it for a quick view.</p>
<p>I absolutely prefer having this type of capability as a separate application, rather than integrated into the shell. It&#8217;s excruciating enough waiting for Windows to surmise the size of installed apps within Add/Remove Programs. &nbsp;:-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563273">
				<div id="div-comment-563273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reinder Verlinde</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563273">
			October 29, 2007 at 3:27 pm</a>		</div>

		<p>&#8220;Showing folder sizes &#8220;all the time&#8221; means that when you open, say, the root of a large server, Explorer would start running around recursively enumerating every single directory on the server in order to compute the folder sizes.</p>
<p>One person doing this to a server is bad enough. Imagine if hundreds of people did it simultaneously: The server would be hammered continously.&#8221;</p>
<p>That argument reminds me of an argument in the command-line versus GUI discussions of the 80s: &#8220;why would you go and fetch an entire directory listing? Just let the user type the name of the file he wants; showing tens of files wastes precious cycles.&#8221;</p>
<p>Just like then, I think the answer should be &#8220;because a) we can, and b) it makes things easier for the user&#8221;.</p>
<p>I think one can implement this reasonably efficiently, as follows:</p>
<p>1. To decrease network traffic, the server should do the entire enumeration.</p>
<p>2. The server should have something like FSEvents in Mac OS X (basically an efficient way to ask &#8220;which directories changed on this disk since the last time I asked?&#8221;. That would allow it to bring its (directory ID =&gt; total Size) cache up to date whenever a &#8220;how large is this directory?&#8221; request comes in. If the cache is up-to-date, a lookup would be cheap on disk I/O.</p>
<p>3. Callers of the &#8220;how large is this directory?&#8221; API should anticipate the case where the answer comes late or not at all. This allows the server to postpone answering or even ignore these questions if it thinks it has better things to do (on the Mac, the Finder has never blocked waiting for answers here; it just shows &#8220;&#8211;&#8221; as size until it knows a better number)</p>
<p>4. For hard links, compression, etc, the implementers will have to make some potentially tough choices (my guess would be to keep three sizes: sum of uncompressed file sizes, sum of bytes stored, #bytes on disk)</p>
<div class=post>[<i>Ooh, changing a network protocol. <a href="http://blogs.msdn.com/oldnewthing/archive/2006/03/30/564809.aspx" rel="nofollow">That comes with its own massive problems</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563283">
				<div id="div-comment-563283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dan drake</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563283">
			October 29, 2007 at 3:46 pm</a>		</div>

		<p>I believe it does recurse directories. &nbsp;You just have to ask it to.</p>
<p>1.) Go to a network share. \servernamesharename</p>
<p>2.) pull up the context menu by holding down the right &lt;most of the time&gt; mouse button on a folder</p>
<p>3.) select properties</p>
<p>if you don&#8217;t believe it, run wireshark to get a network trace.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563293">
				<div id="div-comment-563293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kuwanger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563293">
			October 29, 2007 at 3:50 pm</a>		</div>

		<p>I really don&#8217;t understand the argument. &nbsp;Isn&#8217;t one of the main ideas behind corporate networks is that you can lock down settings? &nbsp;So, why couldn&#8217;t you just disable the &quot;shown recursive directory size as an optional column&quot;? &nbsp;(Feel free to point out how naive this comment is.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563303">
				<div id="div-comment-563303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DriverDude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563303">
			October 29, 2007 at 5:11 pm</a>		</div>

		<p>&quot;(on the Mac, the Finder has never blocked waiting for answers here; it just shows &quot;&#8211;&quot; as size until it knows a better number)&quot;</p>
<p>Neither does Explorer&#8217;s Property pages. But the confusing part is it doesn&#8217;t indicate when it is done recursing directories. It counts up and you just have to look at it until it stops counting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563313">
				<div id="div-comment-563313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://foldersize.sourceforge.net' rel='external nofollow' class='url'>Brio</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563313">
			October 29, 2007 at 5:19 pm</a>		</div>

		<p>Hey, I&#8217;m the developer of the Folder Size program that Raymond linked to. As a long time fan of The Old New Thing, I&#8217;m honoured! :)</p>
<p>Here are some of the issues I dealt with making this utility.</p>
<p>First of all, I completely agree with Reinder&#8217;s post, that this stuff really should be possible with today&#8217;s computers. Getting it to perform well is an engineering challenge, not a reason to avoid the issue.</p>
<p>xix, you assume that this functionality would make your PC unresponsive while it was adding up all the sizes. Early versions of Folder Size did slow disk access quite a bit, so the current version monitors the length of the disk request queue, and halts its background scans while other programs are using the disk. Since I implemented this, I haven&#8217;t noticed any significant performance degradation. You also command that you rarely seem to need the information, but I would argue that when the information is always available, you tend to rely on it more!</p>
<p>rksingh, you are right, NTFS reparse points are tricky, so Folder Size just ignores those for now. Following the links blindly is asking for trouble (infinite cycles!) Ideally it could follow the links intelligently and recognize where the links are going, but that just hasn&#8217;t been implemented.</p>
<p>Ma, you are right &#8211; permissions are an issue. Folder Size scans local drives as the SYSTEM user, which typically has access to all files. This is a security problem, because users can see folder size totals about folders they don&#8217;t have access to (which could, for example, reveal your hidden porn collection!). For network drives, they are scanned as the calling user, so there is no security issue there.</p>
<p>Folder Size currently reports files the way Explorer does (which makes Folder Size a suitable replacement for Explorer&#8217;s Size). So, uncompressed sizes are reported, and alternate NTFS streams are ignored. I think the correct solution would involve 2 columns, logical size (what it currently does) and physical size (which would also count unused cluster space). I haven&#8217;t found the difference to be all that important.</p>
<p>The other big issue is Vista. Folder Size does not work at all in Vista now, because Vista completely removes the IColumnProvider shell extension API! It is replaced with a new Property system. But the property system doesn&#8217;t seem quite right for this functionality.</p>
<p>I&#8217;m currently working on an update that will allow disabling the scanning for different drive types, so that may make the program more useful for larger networks. Right now it&#8217;s all or nothing!</p>
<p>So yeah, there are some rough edges, but for me, this program is the best solution available for this problem.</p>
<p>And the source code is right there on the web, so if anyone wants to fix any of these issues or add Vista support, please submit a patch!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563323">
				<div id="div-comment-563323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://foldersize.sourceforge.net' rel='external nofollow' class='url'>Brio</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563323">
			October 29, 2007 at 5:26 pm</a>		</div>

		<p>DriverDude: You hit on areas where Folder Size is better than the Mac&#8217;s implementation. On the Mac, it just scans your folders one at a time, displaying &#8212; until it&#8217;s done, and completing each folder before going to the next. Folder Size scans them simultaneously (round robin) so you never get stuck on a big folder if you actually want to see the size of a small folder further down the list. Also, Folder Size shows a + symbol while scanning, so you know when it is done.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563333">
				<div id="div-comment-563333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thorsten</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563333">
			October 29, 2007 at 5:47 pm</a>		</div>

		<p>Brio: I haven&#8217;t looked at the source, but I assume that when accessing network folders the &quot;local&quot; folder size service is doing the counting and caching of folder sizes. A solution to the &quot;it would destroy corporate networks&quot; issue might be that the &nbsp;folder size service for network drives first tries to contact the folder size service that might be running on that remote computer &nbsp;and if there is a folder size service running just forwards the requests. In that case the folder size service on the server would do the caching and the traffic over the network is limited to the requests between the 2 services.</p>
<p>Btw, since I discovered Folder Size a couple of &nbsp;years ago it&#8217;s always pretty much the first thing I install after the OS. Thanks!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563343">
				<div id="div-comment-563343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">yonilevy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563343">
			October 29, 2007 at 6:07 pm</a>		</div>

		<p>The real question is whether the &quot;folder size&quot; will be displayed in explorer once WinFS is available. Since it does indexing, this information could be obtained with no cost at all (unless I&#8217;m missing something).</p>
<p>I too am a big fan of the foldersize shell extension, especially when I&#8217;m trying to free disk space.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563353">
				<div id="div-comment-563353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kuwanger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563353">
			October 29, 2007 at 6:13 pm</a>		</div>

		<p>@Brio: &nbsp;&quot;permissions are an issue. Folder Size scans local drives as the SYSTEM user, which typically has access to all files. This is a security problem, because users can see folder size totals about folders they don&#8217;t have access to (which could, for example, reveal your hidden porn collection!).&quot;</p>
<p>A stupid question, but why doesn&#8217;t Folder Size just scan local drives under the user&#8217;s account? &nbsp;The only place I can see where it&#8217;d make any sense to elevate to SYSTEM user would be if the user can trivially become a SYSTEM user; but, even then, it&#8217;d seem appropriate for a setting on whether to elevate to SYSTEM user.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-563363">
				<div id="div-comment-563363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563363">
			October 29, 2007 at 6:32 pm</a>		</div>

		<p>+1 on the idea of baking folder size into the file system as update-on-write metadata. &nbsp;Yes, you lose a level of normalization. &nbsp;No, that&#8217;s not a problem. &nbsp;No, compressed/link/mount aren&#8217;t a problem either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563373">
				<div id="div-comment-563373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563373">
			October 29, 2007 at 6:55 pm</a>		</div>

		<p>&quot;+1 on the idea of baking folder size into the file system as update-on-write metadata. &nbsp;Yes, you lose a level of normalization. &nbsp;No, that&#8217;s not a problem. &nbsp;No, compressed/link/mount aren&#8217;t a problem either.&quot;</p>
<p>Yes, you&#8217;ll have to do several more writes per update to propagate those changes up. (Modulo caching and such.) Maybe, that might affect performance in a way that matters. Probably, you&#8217;d want it configurable because of that, much like the noatime option. Yes, that adds more complexity.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563383">
				<div id="div-comment-563383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://foldersize.sourceforge.net' rel='external nofollow' class='url'>Brio</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563383">
			October 29, 2007 at 7:38 pm</a>		</div>

		<p>Kuwanger: No you&#8217;re not missing anything, the only reason that wasn&#8217;t done is speed. If the scanner used the user&#8217;s account, it would need to store separate data structures for each users, which would increase memory usage dramatically, and require an extra change notify handle for each user. Or, the internal data structure could store user permissions for every folder, and for every file access look up its user permission info&#8230; which just got too complex for my brain. :)</p>
<p>Seemed to be a lot of work and/or performance penalty for something few people would notice.</p>
<p>Thorsten: Yes, that is a good idea for networked machines. Of course, it still has the permissions problem I just discussed, which is likely a more serious security problem for networked drives.</p>
<p>With the current implementation, permissions are respected for network shares, but violated for local drives.</p>
<p>In most cases, I implemented the features that I personally wanted, and then had little motivation to go further. I have a day job. :)</p>
<p>I&#8217;m glad the people who find it useful do, and I&#8217;m open to someone who wants to fix some of these known limitations!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563183">
				<div id="div-comment-563183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563183">
			October 29, 2007 at 12:44 pm</a>		</div>

		<p>Here&#8217;s a question on the proper semantics:</p>
<p>If a user has a partition mounted at c: and another at c:foobar, should the folder size for c:foo include the bar subdirectory?</p>
<p>Any tool that does this has to make a decision on this aspect, and I&#8217;m not convinced there is a single right answer. On one hand, if you&#8217;re using it to clear up space, the answer should be no: freeing up c:foobar won&#8217;t increase the space available in c:. On the other hand, *not* including it seems wrong &#8212; bar is, after all, inside foo.</p>
<p>Similar issues &#8212; perhaps thornier &#8212; also arise with junction points and such.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563393">
				<div id="div-comment-563393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Merus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563393">
			October 29, 2007 at 8:12 pm</a>		</div>

		<p>I have a program that scans my computer, computing the sizes of every directory and then showing the relative sizes of each file in a chart.</p>
<p>This process takes several minutes. The average modern computer contains somewhere in the order of 100,000 files.</p>
<p>I can understand why it&#8217;s not the default Windows behaviour.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563403">
				<div id="div-comment-563403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://foldersize.sourceforge.net' rel='external nofollow' class='url'>Brio</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563403">
			October 29, 2007 at 8:23 pm</a>		</div>

		<p>Merus: That&#8217;s exactly why it DOESN&#8217;T make sense to do this scan in a separate program!</p>
<p>When you want to see the information, you have to wait there for several minutes! Why not scan during your hard drive&#8217;s &quot;idle cycles&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563413">
				<div id="div-comment-563413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563413">
			October 29, 2007 at 8:59 pm</a>		</div>

		<p>Whenever I want to know the sizes of things, it&#8217;s usually for one of two reasons:</p>
<ol>
<li>I want to copy something onto a CD/DVD/USB or other limited storage device</li>
<li>
<p>I&#8217;m running out of disk space</p>
</li>
</ol>
<p>For #1, Explorer&#8217;s properties window is sufficient since I can see the collective size of everything I&#8217;m wanting to put somewhere else.</p>
<p>For #2, I use a program called SequoiaView, since that graphically represents everything (so the biggest files/folders take up the largest blocks on the screen), which is a great help. &nbsp;(Although for some reason the &quot;XP&quot; version doesn&#8217;t actually work on XP. &nbsp;You need to use the regular version on all versions of Windows.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563423">
				<div id="div-comment-563423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://wendyhome.com' rel='external nofollow' class='url'>::Wendy::</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563423">
			October 29, 2007 at 10:31 pm</a>		</div>

		<p>that sounds like a good name for an anarchist pop all-girl band. &nbsp;Who needs the spice girls when you&#8217;ve got:</p>
<p>&quot;Why doesn&#8217;t Explorer show recursive directory size as an optional column?&quot;</p>
<p>or</p>
<p>WDESRDSAAOC for short</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563443">
				<div id="div-comment-563443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563443">
			October 29, 2007 at 11:23 pm</a>		</div>

		<p>It does seems to be nice to have it show the folder size (including all files and subdirectories) if it can drain data out &nbsp;of the indexing service. (I have no idea whether indexing service also saves size data, though.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563453">
				<div id="div-comment-563453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563453">
			October 29, 2007 at 11:38 pm</a>		</div>

		<p>I disagree that storing the folder size as metadata would add to the overhead.</p>
<p>You are already updating directory node when its size is changing.</p>
<p>If you just finished writing a new file, you will have to write last access time for it to a directory node so why not write the new size at the same time?</p>
<p>If you just deleted a file you are removing it from directory node and it is easy to subtract its size.</p>
<p>Even propagating this information upwards should not present too much of a problem or performance hit. If the size is constantly changing (like when you are downloading a file) without using file manager), it could be cached because it is not vital information and written out only after file updating is finished.</p>
<p>In my opinion, current filesystems lack an option to pass the final file size on file creation so the fs driver can allocate continuous storage and avoid fragmentation &#8212; it would also help in this case because once created, file size wouldn&#8217;t change. Some filemanagers and p2p applications already implement this to avoid fragmentation, too bad they don&#8217;t have system support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563473">
				<div id="div-comment-563473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563473">
			October 30, 2007 at 1:48 am</a>		</div>

		<p>It&#8217;s more fun if you do embedded development &#8211; the Microsoft adaptation kits for Windows CE, and Windows Mobile can easily have 80k+ files (each) in it. Takes a good 10 minutes for the property page to finish.</p>
<p>Also a great way to stress test NTFS &#8211; defragging&#8217;s good until you do a clean build that turns the sea of blue into red (the build can touch a good portion of those files).</p>
<p>Now imagine having Folder Size listed with a build churning the disk in 10 explorer windows&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563483">
				<div id="div-comment-563483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563483">
			October 30, 2007 at 3:11 am</a>		</div>

		<p>Igor: Windows most definitely passes the initial allocation size to filesystems. It is passed to NtCreateFile as the AllocationSize parameter, which one can presume is passed to the filesystem in the Irp-&gt;Overlay.AllocationSize field of the IRP_MJ_CREATE request.</p>
<p>If you were going to implement this feature in the filesystem metadata, you would probably want to store the allocation size. That eliminates the problems associated with having to traverse links (cycles, network shares, etc.), but still brings the question of how to add hard links. It also means that it would only require a directory&#8217;s metadata to be updated when a cluster is allocated or deallocated, which is likely much less often than when a file&#8217;s nominal size changes. Since space (de)allocation requires writing all over the place anyway, it might not be much overhead to update the directory&#8217;s metadata at the same time.</p>
<p>The problem is that this would still require changes to be made all the way up to the root. In other words, maintaining this data would be O(M*N) where M is the number of allocation changes and N is the average height of the directory tree. Caching is not an option because metadata is logged, so you couldn&#8217;t just save up directory size changes until there was a convenient time to write them to disk.</p>
<p>As an added bonus, though, keeping this data would make it trivial to enforce directory size quotas.</p>
<p>A different option to store the data persistently is to have the indexing engine maintain it. It wouldn&#8217;t be real-time and you would only get it for parts of the drive that are indexed, but it&#8217;s certainly less overhead than recursively recomputing it all the time.</p>
<p>As a point of reference, my 80GB laptop hard drive has 350,000 objects, 10% of which are directories, and it takes SequoiaView over 8 minutes to traverse its tree. The tree is 16 deep, with the average file being 7 directories deep.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563493">
				<div id="div-comment-563493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.morganalley.com' rel='external nofollow' class='url'>Dewi Morgan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563493">
			October 30, 2007 at 3:13 am</a>		</div>

		<p>While storing the size of the &quot;contained stuff&quot; seems reasonable in a folder, it could only store the size of the &quot;immediately contained stuff &#8211; storing metadata about subfolders is complex without polling.</p>
<p>A possible proposal (at least within a single filesystem) is for folders to store everything, initially: the size of their immediate contents, and the and the size of everything they contain (initially both are 0, which is nice).</p>
<p>If they contain something from outside the filesystem, a reference to that thing is passed to each element between there and the tree root.</p>
<p>If a file is modified, a reference to that thing is passed to each element between there and the tree root, and its previous size is subtracted from their sizes.</p>
<p>Anytime a modified file gets its size queried, it stores the size again and the reference is removed.</p>
<p>Worst possible additional storage for this, where files average a directory depth of n, is equal to n copies of the FAT.</p>
<p>Querying any item that didn&#8217;t know its size would involve looking up the stored size number and then checking the size of any &quot;modified or external&quot; references, returning the value, then updating their sizes in all their parents. Speed then scales with the number of recently-modified things, rather than the number of things.</p>
<p>Modifying an item is slowed by writing to all parent folders &#8211; even put as an &quot;uber-low-priority&quot; write, this could still be a problem.</p>
<p>I don&#8217;t think something like that is worth doing: treesize queries seem too uncommon to optimise for. Not worth the tradeoffs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563513">
				<div id="div-comment-563513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://patf.net/blogs/index.php?blog=2' rel='external nofollow' class='url'>Patrick Farrell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563513">
			October 30, 2007 at 9:57 am</a>		</div>

		<p>@Evan: &quot;O(n) what?&quot;</p>
<p>Thanks for calling me out on that. &nbsp;What I was indicating with O(1) was there would be a database call for the directory to retrieve the metadata for each of the child nodes. &nbsp;What I meant by O(n) was there would be a call for each node to determine metadata (which might be more efficient depending on how the caller pages the data). &nbsp;</p>
<p>I will not try to act like I&#8217;m an expert on the details, but I do know that Spotlight, from Apple, updates an internal metadata store as files are altered at the processor level. &nbsp;Watching it work from my Windows vantage was nothing short of miraculous. &nbsp;</p>
<p>I am thinking along the lines of how Indexing service can provide highly efficient searches because it avoids the computational (and network overhead) associated with discovery of the data (because it&#8217;s already cached). &nbsp;Apple does this without the overhead (and batch oriented nature) of the Indexing service. &nbsp;It accomplishes this by updating the internal metadatabase as crud operations are performed on files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563553">
				<div id="div-comment-563553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563553">
			October 30, 2007 at 10:48 am</a>		</div>

		<p>Gabe said : &quot;Windows most definitely passes the initial allocation size to filesystems.&quot;</p>
<p>Perhaps NtCreateFile, but not CreateFile(), nor fopen(), lopen(), creat() or any other API programmers usually use.</p>
<p>@Dewi Morgan:</p>
<p>How about each folder storing the size of its own files not counting subfolders and junctions?</p>
<p>That way you don&#8217;t need to propagate info upwards through the filesystem (because changing subfolder size would not affect parent folder) and the part of the OS which implements size display then just adds them up on as needed basis. This could be cached and lazy-updated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-563743">
				<div id="div-comment-563743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563743">
			October 30, 2007 at 4:51 pm</a>		</div>

		<blockquote><p>
  Yes, you&#8217;ll have to do several more writes per update to propagate those changes up.
</p></blockquote>
<p>Indeed. &nbsp;But this isn&#8217;t a problem either. &nbsp;Writes, in typical usage scenarios, are much less frequent than reads.</p>
<p>Now, if you were running on a server, and you needed to write frequently to log files that were nested 300 folders deep, this might affect performance. &nbsp;So, like all new features, there should be a way to turn this off.</p>
<p>But it&#8217;s (usually) a heck of a lot faster than calculating folder size the hard way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563843">
				<div id="div-comment-563843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-563843">
			October 30, 2007 at 8:59 pm</a>		</div>

		<p>No need to propagate at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-713523">
				<div id="div-comment-713523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2009/02/17/9426787.aspx' rel='external nofollow' class='url'>The Old New Thing : Why doesn't the file system have a function that tells you the number of files in a directory?</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071029-00/?p=24663#comment-713523">
			March 4, 2009 at 10:27 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2009/02/17/9426787.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2009/02/17/9426787.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>