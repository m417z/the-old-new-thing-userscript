<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1166573">
				<div id="div-comment-1166573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EduardoS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141215-00/?p=43403#comment-1166573">
			December 15, 2014 at 7:51 am</a>		</div>

		<p>This is starting to look like Agner Fog blog, maybe, good things at wrong places?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166593">
				<div id="div-comment-1166593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darius</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141215-00/?p=43403#comment-1166593">
			December 15, 2014 at 8:37 am</a>		</div>

		<p>The reason Intel goes with 3 instructions instead of shift by immediate is probably the following: CPUs have just 1 execution port for vector shift. &nbsp;That moves vector shift instruction into critical path and ties down that port. Vector sub has no such limitation and can choose from several execution ports on latest hardware.</p>
<div class="post">[<em>That makes sense. They should have <a href="http://blogs.msdn.com/b/oldnewthing/archive/2009/11/04/9917052.aspx">included the rationale</a> in their recommendation. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1166603">
				<div id="div-comment-1166603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141215-00/?p=43403#comment-1166603">
			December 15, 2014 at 10:04 am</a>		</div>

		<p>I&#39;m surprised that 4 or 5 instructions in setup phase is cheaper than a fetch from memory. (My trick was to place the memory constant immediately above the entry point for high probability of cache hit).</p>
<div class="post">[<em>I ran across this problem in a situation where absolute memory access was not convenient (it&#39;s hard to write PIC for x86), so I had to survive entirely in registers. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166623">
				<div id="div-comment-1166623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141215-00/?p=43403#comment-1166623">
			December 15, 2014 at 12:00 pm</a>		</div>

		<p>Unfortunately, Visual C++ considers uninitialized variables to always have to come from memory, so the following does not work to do what we want:</p>
<p>__m128i _mm_setmone_si128() { __m128i meow; return _mm_cmpeq_epi32(meow, meow); }</p>
<p>Visual C++ will compile that as allocating 16 bytes of stack memory and reading from it without initializing it, then doing pcmpeqd. &nbsp;Initializing &quot;meow&quot; with _mm_setzero_epi128 fixes it, at the cost of an extra pxor instruction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1166633">
				<div id="div-comment-1166633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141215-00/?p=43403#comment-1166633">
			December 15, 2014 at 2:33 pm</a>		</div>

		<p>Ewww. I dislike inline assembly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166643">
				<div id="div-comment-1166643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Owen Shepherd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141215-00/?p=43403#comment-1166643">
			December 15, 2014 at 4:25 pm</a>		</div>

		<p>Joshua: That&#39;s very likely to hit in L2, but not in L1 (because L2 is generally separated between I-Cache and D-Cache).</p>
<p>That said, it&#39;s probably as good a place as any.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1166663">
				<div id="div-comment-1166663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EduardoS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141215-00/?p=43403#comment-1166663">
			December 15, 2014 at 6:36 pm</a>		</div>

		<p>Joshua, that&#39;s not a good idea outside microbenchmarks because the line will be replicated in L1D and L1I, a constant pool will likely be cached without the risk of being replicated.</p>
<p>But mixing code and data is much more fun, pushing a string parameter is much more sexy this way:</p>
<p>call @F</p>
<p>db &quot;a string parameter!&quot;, 0</p>
<p>@@:</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166683">
				<div id="div-comment-1166683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141215-00/?p=43403#comment-1166683">
			December 15, 2014 at 11:42 pm</a>		</div>

		<p>Regarding this:</p>
<p>&gt; And if the value you want has all its set bits in the middle, you can combine two shifts (and stick something in between the two shifts to ameliorate the stall):</p>
<p>Wouldn&#39;t the fact that most modern processors are out-of-order, superscalar and pipelined ameliorate the stall, obviating the need for the programmer to do that manually?</p>
<div class="post">[<em>It definitely helps, but I prefer to give the CPU the extra scheduling help, in case it needs it. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1166693">
				<div id="div-comment-1166693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141215-00/?p=43403#comment-1166693">
			December 16, 2014 at 1:20 am</a>		</div>

		<p>After seeking some article, I believe PSUBD is recommended also for the following reason:</p>
<p>Source: <a rel="nofollow" target="_new" href="https://software.intel.com/en-us/android/articles/finer-points-of-using-sse-instructions-for-android-media-apps-on-the-intel-atom-platform">software.intel.com/&#8230;/finer-points-of-using-sse-instructions-for-android-media-apps-on-the-intel-atom-platform</a></p>
<p>Section: Partial register dependencies</p>
<p>The execution pipeline interprets these as dependency-chain breaking idioms; so no stalls will occur on subsequent partial accesses to the register. In other words, even if the register has a read-after-write (RAW) dependency from some earlier instruction, the machine doesnâ€™t need to check for that because all of the bits are going to be set to zero irregardless of what values resided there previously.</p>
<p>Btw, the following article also suggest using pcmpeqd trick for setting all bits to 1:</p>
<p><a rel="nofollow" target="_new" href="https://software.intel.com/en-us/articles/assembly-language-tips-tricks-for-the-intel-pentiumr-4-processor">software.intel.com/&#8230;/assembly-language-tips-tricks-for-the-intel-pentiumr-4-processor</a></p>
<p>So I guess the recommendation changes with time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166833">
				<div id="div-comment-1166833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141215-00/?p=43403#comment-1166833">
			December 16, 2014 at 1:04 pm</a>		</div>

		<p>@Nathan</p>
<p>The deep pipelining is what makes the stall so bad, and unless the front-end of the CPU can specifically recognize this as an operation that needs to be interleaved and can find suitable code to interleave it with, out-of-orderness won&#39;t fix it. There&#39;s only so much logic you can jam into the front-end while keeping up throughput, not to mention minimizing power use.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1166993">
				<div id="div-comment-1166993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141215-00/?p=43403#comment-1166993">
			December 17, 2014 at 6:45 am</a>		</div>

		<p>@cheong00 Am I the only one that&#39;s a bit disturbed that Intel uses &quot;irregardless&quot; in that documentation? If nobody bothered to proofread that document one can just hope that the technical advise is more sound</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1167223">
				<div id="div-comment-1167223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141215-00/?p=43403#comment-1167223">
			December 17, 2014 at 5:48 pm</a>		</div>

		<p>@voo: To be fair, even books you paid for has spelling mistakes. I&#39;m less concern about this unless the misspelt word can have different meaning in that paragraph.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>