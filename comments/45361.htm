<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1241436">
				<div id="div-comment-1241436" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241436">
			June 17, 2015 at 7:13 am</a>		</div>

		<p>Ah yes the I/O test harness. Great for reliably causing all kinds of errors. Great for confounding newbies.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1241426">
				<div id="div-comment-1241426" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241426">
			June 17, 2015 at 7:16 am</a>		</div>

		<p>Of course in this case, the user thought the problem was in FindFirstFileEx, and they were indeed calling that function. They didn&#39;t realize that the problem was in FindClose, which was not being called.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-ludlow even thread-even depth-1" id="comment-1241406">
				<div id="div-comment-1241406" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Ludlow' rel='external nofollow' class='url'>John Ludlow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241406">
			June 17, 2015 at 7:56 am</a>		</div>

		<p>I have frequently seen things like this while looking at installations and quickly installing an application, then uninstalling it and installing it again. This wasn&#39;t AV software because the machine in question does not have AV software installed. It wasn&#39;t a test harness which mocks things either. But the outward symptoms were very similar</p>
<p>Raymond will probably correct me, but my theory in those cases was that there was a lag between a directory or file being deleted and its permissions being updated. I think that if you&#39;re quick enough, you can get in that gap and recreate the directory before the filesystem removes its permissions.</p>
<p>When that happens, if you open the file or folder properties in Explorer, you will see there&#39;s no owner and no permissions for anyone. A reboot (or maybe it was me running chkdsk since in these situations I normally run a chkdsk /f and then reboot) seems to fix this. I imagine there&#39;s some check either in the boot or in chkdsk which detects these things and resets the owner and permissions to be the same as the parent directory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-iboyd odd alt thread-odd thread-alt depth-1" id="comment-1241396">
				<div id="div-comment-1241396" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241396">
			June 17, 2015 at 9:56 am</a>		</div>

		<p>I&#39;ve seen the code for the technique of using opportunistic locks to release my locks on a file if someone else wants to use it. What is the technique for the other feature mentioned; &quot;abandon a file scan when a delete request is made&quot;? How do I detect that a delete is request is made?</p>
<p>Finally, is it possible to open a file for reading without taking any locks? For example:</p>
<p>&nbsp; &nbsp;CreateFile(filename, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE, &#8230;);</p>
<p>Will that not allow any other readers, writers, or deleters to read, write, or delete, the file I have open?</p>
<p>And if not, why not?</p>
<div class="post">[<em>Run <a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/04/15/10410965.aspx">the linked program</a> and then from another command prompt, delete the file. Oh look, the program closes the handle. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even thread-even depth-1" id="comment-1241386">
				<div id="div-comment-1241386" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241386">
			June 17, 2015 at 10:30 am</a>		</div>

		<p>@IanBoyd: Regarding your CreateFile question, the only thing I can think of is that even if a user &quot;deletes&quot; a file that you&#39;ve marked as FILE_SHARE_DELETE, Windows won&#39;t actually delete it until all of the open handles on it are closed, so you run into issues if a user attempts to create a new file with the same name as the one they deleted. &nbsp;It would be nice if Windows interpreted the FILE_SHARE_DELETE flag as saying &quot;I don&#39;t care if this file goes away, you can ignore my handle in terms of deleting the file&quot;, but I&#39;m guessing that support for that logic is somewhat non-trivial. &nbsp;Maybe they&#39;ll add it in an iteration of Windows 10 or something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1241376">
				<div id="div-comment-1241376" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241376">
			June 17, 2015 at 10:38 am</a>		</div>

		<p>@MNGoldenEagle: That would break back-compat. &nbsp;I&#39;m sure there are at least a few applications which open a file as FILE_SHARE_DELETE, cache the handle somewhere, then try to reuse it when asked for a file by the same name. &nbsp;If it were possible to recreate the file while the handle was still open, those applications would be buggy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even thread-even depth-1" id="comment-1241366">
				<div id="div-comment-1241366" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241366">
			June 17, 2015 at 11:10 am</a>		</div>

		<p>@Kevin: Ah, didn&#39;t even think of that. &nbsp;Maybe some kind of soft/safe handle or something&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1241356">
				<div id="div-comment-1241356" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241356">
			June 17, 2015 at 12:41 pm</a>		</div>

		<p>@Kevin: Yeah I use that all the time. However I know it really doesn&#39;t offer any protection. Rename the file and then delete it. (I recommend .nfs$$$$$$$$ where $$$$$$$$ is nFileIndex because such a name is likely to be understood by other developers as reserved for such a purpose.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1241346">
				<div id="div-comment-1241346" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241346">
			June 17, 2015 at 2:00 pm</a>		</div>

		<p>IanBoyd: You can certainly open a file in such a way that others can read, write, and delete it. However, you would have no way of knowing that it happened without the oplocks. In other words, your indexer or thumbnail generator probably does not want to operate on a file that is being written to or deleted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1241336">
				<div id="div-comment-1241336" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241336">
			June 17, 2015 at 4:20 pm</a>		</div>

		<p>@John Ludlow: That is exactly a symptom of an outstanding handle on a deleted directory. You could use a tool such as Process Explorer to see which process still has a handle open to that directory. As soon as the last handle is closed, the directory is deleted. I don&#39;t think this has anything to do with permissions; there are no permissions and no owner simply because the directory is logically deleted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-ludlow even thread-even depth-1" id="comment-1241326">
				<div id="div-comment-1241326" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Ludlow' rel='external nofollow' class='url'>John Ludlow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241326">
			June 17, 2015 at 5:09 pm</a>		</div>

		<p>@Francis Gagne:</p>
<p>Logically deleted&#8230;. and then re-created. And it&#39;s after the re-creation that I observed the symptoms described. </p>
<p>My theory was that the sequence of operations looked like this:</p>
<p>Delete file / folder</p>
<p>Recreate file / folder</p>
<p>Permissions are removed from the deleted item</p>
<p>I suppose it&#39;s possible that there was a lingering handle which forced things into this order, since the permissions weren&#39;t updated until after the last handle died, which was after the folder was re-created. However, Process Explorer won&#39;t help there because the perpetrator has already left the scene of the crime.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1241316">
				<div id="div-comment-1241316" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241316">
			June 17, 2015 at 6:00 pm</a>		</div>

		<p>@John Ludlow: perhaps you&#39;re seeing some sort of file system tunneling? That is, the sequence of operations is like this:</p>
<p>Permissions are removed from the deleted item</p>
<p>Delete file / folder</p>
<p>Recreate file / folder</p>
<p>And since this last step was less than a X time after deletion the file system tunneling copies the permissions from the recently deleted file/folder to the newly created file/folder, as some sort of attempt to preserve file permissions in the presence of old programs written before file permissions and which use a &quot;delete and recreate&quot; procedure to save a file.</p>
<p>Raymond has written about file system tunneling before.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-ludlow even thread-even depth-1" id="comment-1241306">
				<div id="div-comment-1241306" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Ludlow' rel='external nofollow' class='url'>John Ludlow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241306">
			June 18, 2015 at 2:35 am</a>		</div>

		<p>@Cesar: Maybe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1241296">
				<div id="div-comment-1241296" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241296">
			June 18, 2015 at 4:43 am</a>		</div>

		<p>Is there any simple way to trace the lifetimes of file and directory handles? I have a program which uses a deeply-nested working directory structure which it frequently deletes and recreates. Rarely, deletion of one the emptied sub-directories fails. I would like to see who are the involved parties at that very transient moment when this happens. Manually deleting this directory always succeeds so this is a bit hard to figure out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-metac_kozelcu even thread-even depth-1" id="comment-1241286">
				<div id="div-comment-1241286" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Pyjong' rel='external nofollow' class='url'>Pyjong</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241286">
			June 18, 2015 at 5:15 am</a>		</div>

		<p>See? How pleasantly Raymond helped a newbie? Prime example he is not acerbic :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1241196">
				<div id="div-comment-1241196" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241196">
			June 18, 2015 at 8:48 am</a>		</div>

		<p>@Timo Kinnunen</p>
<p>I use procmon (<a rel="nofollow" target="_new" href="https://technet.microsoft.com/en-us/library/bb896645.aspx">technet.microsoft.com/&#8230;/bb896645.aspx</a>) to debug situations like that. &nbsp;You can capture file operations, registry operations, socket operations, etc made by any or all processes. &nbsp;The output is understandably verbose, and procmon provides a variety of ways to filter the data so you can see only what you are interested in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1241116">
				<div id="div-comment-1241116" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1241116">
			June 18, 2015 at 12:19 pm</a>		</div>

		<p>I don&#39;t think it&#39;s ok that antivirus programs are not (or no longer) treated as part of the I/O backend below the filesystem driver. I.e., whatever the antivirus does while scanning files should be treated as a delay in the disk I/O operations instead of causing filesystem access violations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1221723">
				<div id="div-comment-1221723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150617-00/?p=45361#comment-1221723">
			June 19, 2015 at 2:21 am</a>		</div>

		<p>@Gabe: I&#39;m completely with you. Virus scanners *must* perform their operations as a filter driver. This way, they would not create additional references to a file or directory, would never interfere with locks or permissions or timing. The only effect would be a slight slowdown of I/O at certain points. And most important, this is the only way to detect a virus *during the write*, before any program (or the OS) can load/execute the file, and also, to *prevent* any reading or execution of infected files.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>