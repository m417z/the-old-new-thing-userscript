<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-272013">
				<div id="div-comment-272013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mschaef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050421-28/?p=35833#comment-272013">
			April 21, 2005 at 9:22 am</a>		</div>

		<p>Heh&#8230; I&#8217;m &#8216;honored&#8217;, I guess&#8230; :-)</p>
<p>FWIW, The SIOD interpreter&#8217;s stack walk dates back a long time, and even George Carrette (the original author) spoke to portability problems in his documentation:</p>
<p>&quot;The stack and register marking code used in the mark-and-sweep GC is unlikely to work on machines that do not keep the procedure call stack in main memory at all times. It is assumed that setjmp saves all registers into the jmp_buff data structure. If your target machine architecture is radically different, such as using linked procedure call frames of some kind, not organized as a stack, then it would be best if you could find vendor-supported routines for walking these frames, such as would be utilized by a debugger. The mark_locations procedure can then be invoked multiple times with the proper start and end addresses. </p>
<p>If the stack is not always aligned (in LISP-PTR sense) then the gc_mark_and_sweep procedure will not work properly unless steps are taken to work around the problem. &quot;</p>
<p>I don&#8217;t think any of this is necessarily a bad thing, but it is one of the costs a developer has to pay if they&#8217;re interested in writing or maintaining a garbage collector. You&#8217;d be hard pressed to make such a thing insensitive to platform changes, and still retain decent performance.</p>
<p>Ideally it&#8217;d be possible to use the GC in the CLR, but you have to give up portability by going that route, not to mention worrying about CLR runtime versions, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-272103">
				<div id="div-comment-272103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reuben Harris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050421-28/?p=35833#comment-272103">
			April 21, 2005 at 11:37 am</a>		</div>

		<p>&quot;Squirrel-space&quot;&#8230; heh! Cutest tech term I&#8217;ve heard for a while&#8230; it sounds like something Scott Adams would coin.</p>
<p>And how does one &#8216;grovel&#8217; a stack? :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-272113">
				<div id="div-comment-272113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.noveltheory.com' rel='external nofollow' class='url'>James Curran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050421-28/?p=35833#comment-272113">
			April 21, 2005 at 11:41 am</a>		</div>

		<p>Years ago, I programmed (in Assembler) on the Z-8000 Chip.  Like the 8088 which would power the original IBM PC, the Z-8000 was an evolutary growth from the 8080, but Zilog took it in a very different direction than Intel.</p>
<p>It didn&#8217;t have an SP register at all, partly because registers were numbered, but mostly because you could PUSH/POP off of any register. CALL automatically PUSHed the return address onto R15, but if you wanted to save a register to the stack, you had to specify which register you wanted to use as the SP: </p>
<p>PUSH @R15, R1</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-272193">
				<div id="div-comment-272193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marco</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050421-28/?p=35833#comment-272193">
			April 21, 2005 at 5:14 pm</a>		</div>

		<p>That&#8217;s pretty cool! The register stack thingy reminds me of the imaginary MMIX architecture that Donald Knuth invented for educational purposes. Any Knuth fans here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-272243">
				<div id="div-comment-272243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050421-28/?p=35833#comment-272243">
			April 22, 2005 at 9:00 am</a>		</div>

		<p>Just about every architecture is more regular and sensible than what Intel has wrought. After hearing some of these features of the Itanium, it&#8217;s no wonder that Microsoft pushed Intel to develop an x86-64 architecture chip. Or at least that&#8217;s my interpretation of things&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-293453">
				<div id="div-comment-293453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/07/29/444912.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050421-28/?p=35833#comment-293453">
			July 29, 2005 at 10:00 am</a>		</div>

		<p>You&#8217;ve run out of address space.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>