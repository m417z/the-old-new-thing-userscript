<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1222251">
				<div id="div-comment-1222251" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160108-00/?p=92821#comment-1222251">
			January 8, 2016 at 7:16 am</a>		</div>

		<p>The problem appears to be the extra level of indirection between the handle and the file, which most people probably don&#8217;t include in their mental model. Even for those that know about the existence of file objects, the objects may not (normally) be present when they try to reason about their code. </p>
<p>&#8220;It looks like they really want the file to remain valid (including allowing further CreateÂ­File calls to succeed) for as long as any open handle continues to refer to the file.&#8221;</p>
<p>It looks like you&#8217;ve skipped a level of indirection there, helping to perpetuate the incorrect model that handles refer to files. Shouldn&#8217;t that be &#8220;It looks like they really want the file to remain valid for as long as any open handle continues to refer to a file object that refers to the file.&#8221;?</p>
<p>Maybe we should try solving the problem with another level of indirection? :-)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1222421">
				<div id="div-comment-1222421" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160108-00/?p=92821#comment-1222421">
			January 9, 2016 at 3:07 am</a>		</div>

		<p>&gt; Maybe we should try solving the problem with another level of indirection? :-)</p>
<p>Either that or a FILE_FLAG_DELETE_ON_LAST_CLOSE_MEANWHILE_ALLOWING_ADDITIONAL_OPENS flag.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even thread-odd thread-alt depth-1 parent" id="comment-1222291">
				<div id="div-comment-1222291" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160108-00/?p=92821#comment-1222291">
			January 8, 2016 at 8:22 am</a>		</div>

		<p>it appears your cross post link is dead</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1222741">
				<div id="div-comment-1222741" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EMB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160108-00/?p=92821#comment-1222741">
			January 13, 2016 at 4:56 am</a>		</div>

		<p>As is the link &#8220;Archives&#8221; on the right below the book image and the &#8220;Basics&#8221; inscription. So use the links Archives below looking for the date and the number of the post in the link. In this case &#8220;2014/07/11/10541475.aspx&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1222292">
				<div id="div-comment-1222292" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160108-00/?p=92821#comment-1222292">
			January 8, 2016 at 8:43 am</a>		</div>

		<p>Let&#8217;s see if I understood this correctly: as soon as the first object with FILE_FLAG_DELETE_ON_CLOSE is closed, the file is *still* visible in the directory (that is, FindFirstFile/FindNextFile can still see it), but opening it fails with a mysterious error? No wonder the programmer got confused; their mental model was probably &#8220;as long as it&#8217;s still in the directory, it can be opened (if the ACLs allow, of course)&#8221;.</p>
<p>Contrast with the equivalent trick on Unix (open the file followed by unlinking it from the directory, that is, an open()/unlink() pair), in which the file immediately disappears from the directory. That leads to a better mental model (&#8220;as soon as it&#8217;s gone from the directory, I can&#8217;t open it anymore; before that, I can still open it&#8221;), which in turn leads the programmer to the correct solution (duplicate the handle you have, since you can&#8217;t get a new one from open()).</p>
<p>My guess would be that Win32&#8217;s behavior is yet another leftover from the FAT filesystem, which doesn&#8217;t have the directory entry/inode distinction or equivalent (the Unix way removes the directory entry immediately on unlink() but keeps the inode until the last open handle to the file is closed).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1222311">
				<div id="div-comment-1222311" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160108-00/?p=92821#comment-1222311">
			January 8, 2016 at 9:04 am</a>		</div>

		<p>This bit me once long ago, and took a rather herculean effort to overcome. We were using FILE_FLAG_DELETE_ON_CLOSE to ensure temp files go away, and one of them needed to be passed to another program. Guess what happened if that program passed the file name to yet another program?</p>
<p>One of these days it&#8217;s going to be in a place hard to fix. Maybe the model itself needs to be changed. As Cesar says, it&#8217;s completely non-intuitive; and in this case it&#8217;s pretty obviously wrong. FILE_SHARE_DELETE really should allow opening these files until they&#8217;re actually gone.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-scott-brickey even thread-even depth-1 parent" id="comment-1222321">
				<div id="div-comment-1222321" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Scott+Brickey' rel='external nofollow' class='url'>Scott Brickey</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160108-00/?p=92821#comment-1222321">
			January 8, 2016 at 9:13 am</a>		</div>

		<p>&gt; When there are no more file objects, then the directory entry is removed</p>
<p>so if the file object were removed, but not the directory entry&#8230; how would that be handled by Explorer? same as a corrupt file, automatically deleted silently, or something else?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-2 parent" id="comment-1222351">
				<div id="div-comment-1222351" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160108-00/?p=92821#comment-1222351">
			January 8, 2016 at 10:18 am</a>		</div>

		<p>If the final file object was deleted and the directory entry wasn&#8217;t removed, then I would say you have much more to worry about.<br />
The way the delete on close flag works is that as soon as you use CloseHandle to close the file, it will try to delete the file. If there are other open handles to the file then instead of actually deleting the file, it will mark it as delete pending in the file system.<br />
So when you close the last handle, which in turn deletes the last file object, the file system driver should then check the file to see if it has been set to be deleted, and then finally delete the file from the file system.<br />
The only way for this not to function properly is if you are having driver or hardware issues.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-3 parent" id="comment-1222371">
				<div id="div-comment-1222371" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160108-00/?p=92821#comment-1222371">
			January 8, 2016 at 10:54 am</a>		</div>

		<p>There is one more thing to keep in mind. The NT API has a delete pending flag you can turn on and off on a handle and this flag is not stored in the same place as the win32 delete on close flag&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1222442">
				<div id="div-comment-1222442" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160108-00/?p=92821#comment-1222442">
			January 9, 2016 at 10:09 am</a>		</div>

		<p>&#8220;delete on close&#8221; is not a win32 flag, it is a nt kernel feature.<br />
But I&#8217;ve not heard about the &#8220;delete pending&#8221; flag (with on/off feature) you describe. Can you elaborate?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-5" id="comment-1222811">
				<div id="div-comment-1222811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160108-00/?p=92821#comment-1222811">
			January 13, 2016 at 1:58 pm</a>		</div>

		<p>FILE_FLAG_DELETE_ON_CLOSE is a documented parameter for a documented function that is part of the Win32 API so I&#8217;ll consider it to be a Win32 thing even though it does not work on Win9x. Where the flag is actually stored in memory is an implementation detail.</p>
<p>The other flag was only accessible by one of the undocumented Nt* functions in the old days but now we have SetFileInformationByHandle, a documented thin layer on top of some of the NT stuff.</p>
<p>There is an old thread somewhere on the OSR mailing list that talks about how to undo both of these flags in a kernel driver&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>