<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1019573">
				<div id="div-comment-1019573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Trevel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019573">
			November 7, 2012 at 7:53 am</a>		</div>

		<p>I have to admit that there are occasions where I&#39;ve done something like that &#8212; but only because the algorithm that I was told to run on the data was so poorly optimized (O(n^3) or so) that breaking it into related chunks was much faster than trying to do it all in one go. (Thank goodness I&#39;m no longer working there.)</p>
<p>I suspect the person in the first problem was attempting Copy and Paste Coding while not having a clue what the code actually did. I&#39;m sure it&#39;s the first time you&#39;ve ever seen anyone try that before.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019593">
				<div id="div-comment-1019593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019593">
			November 7, 2012 at 8:16 am</a>		</div>

		<p>Not to be pedantic, but the two solutions aren&#39;t the same &#8212; the second one will mark products available in which &quot;Store&quot; is null, the first won&#39;t.</p>
<p>Just sayin&#39;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019603">
				<div id="div-comment-1019603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019603">
			November 7, 2012 at 8:17 am</a>		</div>

		<p>Okay, to be pedantic on myself, I meant &quot;mark products unavailable&quot;. Whoops :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019613">
				<div id="div-comment-1019613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019613">
			November 7, 2012 at 9:27 am</a>		</div>

		<p>The number one legitimate reason to do this is, as Trevel indicated, to have a natural splitting function for operations that take too much continuous time if performed in one go. You wouldn&#39;t expect to see this if no I/O is involved unless the algorithm is poor, but if I/O is involved (and especially if transaction logging a la SQL is involved) working in batches can be a better approach than doing everything at once.</p>
<p>Even then this is obviously a poor man&#39;s batching since you don&#39;t know how big the batches will be (what if there are 100,000 LitWare products and only 10 Contoso products?) but it can be simpler than implementing a generic mechanism that splits things in constant-sized batches.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019623">
				<div id="div-comment-1019623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Samir Talwar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019623">
			November 7, 2012 at 9:33 am</a>		</div>

		<p>This seems like a hand-rolled implementation of the &quot;n + 1&quot; problem. Which is impressive. Usually those just show up when using an ORM or similar.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019633">
				<div id="div-comment-1019633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Gardner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019633">
			November 7, 2012 at 10:11 am</a>		</div>

		<p>There&#39;s a similar version of this I&#39;ve seen many times, where given a Map / Dictionary, the person iterates over every entry, checking for equality to find a value given a key, instead of just using dictionary[key] or TryGetValue(key), or .get(x) or whatever that language has.</p>
<p>something like:</p>
<p>object value = null;</p>
<p>foreach( var entry in dictionary.Entries )</p>
<p>{</p>
<p>&nbsp; &nbsp;if (entry.Key == thing)</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; value = entry.value;</p>
<p>&nbsp; &nbsp; &nbsp; break;</p>
<p>&nbsp; &nbsp;}</p>
<p>}</p>
<div class="post">[<em>Ah, the <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/12/27/10251210.aspx" rel="nofollow">for/if anti-pattern</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019643">
				<div id="div-comment-1019643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019643">
			November 7, 2012 at 3:16 pm</a>		</div>

		<p>It&#39;s like the For/Case anti-pattern where all the cases do the same thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019653">
				<div id="div-comment-1019653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019653">
			November 7, 2012 at 4:25 pm</a>		</div>

		<p>[Ah, the for/if anti-pattern. -Raymond]</p>
<p>Way too easy to do in Linq. The obvious way of writing an if (.TryGetValue()) in Linq compiles to something like this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019663">
				<div id="div-comment-1019663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Luke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019663">
			November 7, 2012 at 9:35 pm</a>		</div>

		<p>As someone else said, this is the &quot;n + 1&quot; problem. Can be caused by people ignorant of how ORM&#39;s work, frequently caused by the repository pattern as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019673">
				<div id="div-comment-1019673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019673">
			November 8, 2012 at 2:25 am</a>		</div>

		<p>Not totally unrelated, but I once had a SQL statement that ran very slowly when the filter used a GROUP BY.</p>
<p>So I ended up querying the filter to give me a static list of containers to use in the original query.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019683">
				<div id="div-comment-1019683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019683">
			November 8, 2012 at 5:17 am</a>		</div>

		<p>To play the Devil&#39;s advocate I&#39;ll say that usually a query on itself is pretty damn useless, most of the times is followed by a report. And if the report wants also the store as one of the columns you&#39;ll have to do it that way (or &quot;group by&quot; the store).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019693">
				<div id="div-comment-1019693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019693">
			November 8, 2012 at 6:31 am</a>		</div>

		<p>Long division by 1: 57216 รท 1: 5 divided by 1 is 5, 5 &#8211; 5 leaves zero, bring down the 7, 7 divided by 1 is 7, remainder zero, bring down the 2&#8230; (much later) &#8230; 6 &#8211; 6 = 0, 57216 remainder zero!</p>
<p>&nbsp;57216 r0</p>
<p>&nbsp;_____</p>
<p>1)57216</p>
<p>-5</p>
<p>&#8212;</p>
<p>&nbsp; 7</p>
<p>&nbsp;-7</p>
<p>&nbsp;&#8212;</p>
<p>&nbsp; &nbsp;2</p>
<p>&nbsp; -2</p>
<p>&nbsp; &#8212;</p>
<p>&nbsp; &nbsp; 1</p>
<p>&nbsp; &nbsp;-1</p>
<p>&nbsp; &nbsp;&#8212;</p>
<p>&nbsp; &nbsp; &nbsp;6</p>
<p>&nbsp; &nbsp; -6</p>
<p>&nbsp; &nbsp; ==</p>
<p>Actually caught my daughter doing just that to divide a polynomial by x.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>