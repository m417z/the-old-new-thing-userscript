<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (1)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1275065">
				<div id="div-comment-1275065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161124-00/?p=94775#comment-1275065">
			November 27, 2016 at 8:36 pm</a>		</div>

		<p>What about this sequence?:</p>
<p>1. Producer pushes item. Queue was empty, so WakeConsumer is called.</p>
<p>2. Consumer starts running and makes queue empty again.</p>
<p>3. While consumer is still running, another work item is produced. Queue is empty, so WakeConsumer is called again &#8212; but the first consumer is still in the middle of its loop.</p>
<p>Is this spurious wake just a necessary evil to keep the algorithm simple?</p>
<p>It looks harmless; the way the consumer function is written looks threadsafe to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>