<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1144943">
				<div id="div-comment-1144943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1144943">
			August 18, 2014 at 7:46 am</a>		</div>

		<p>.concat creates a copy of the array, adding the new element onto the copy.</p>
<p>You&#39;re doing a bit of extra work you&#39;re just discarding, whereas .push modifies the original array.</p>
<p>However if you DO want a copy (ie if there are other references to a elsewhere that you want to not gain the &quot;1&quot;) .concat is probably the way to go here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1144963">
				<div id="div-comment-1144963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1144963">
			August 18, 2014 at 8:06 am</a>		</div>

		<p>My first reaction would have been to go through the indices array and remove duplicate entries first and then work through deleting in last to first order. That would work for an implementation in any language.</p>
<p>Raymond&#39;s approach appears to work well given JS language definition. (I Am Not A Javascript Programmer: IANAJP). However I prefer to see innovative solutions that don&#39;t depend on such language features but are instead portable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1145013">
				<div id="div-comment-1145013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1145013">
			August 18, 2014 at 9:48 am</a>		</div>

		<p>I similarly was expecting the article to be about needing to remove the duplicate indexes and then just go in reverse order. I&#39;d have never expected ahead of time that JavaScript deals with deleting the some array element twice in a reasonable manner, and it seems an odd (though apparently effective) way to deal with the duplicates.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1145033">
				<div id="div-comment-1145033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">avakar86</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1145033">
			August 18, 2014 at 10:01 am</a>		</div>

		<p>@Brian EE: the technique here is basically to replace the deleted elements with a sentinel value and then filter them away. It will work in other languages too, it&#39;s just that JavaScript provides a special &quot;deleted&quot; sentinel value. In Python, you could define</p>
<p>class Deleted:</p>
<p> &nbsp; &nbsp;pass</p>
<p>then replace the deleted values with Deleted(), then filter based on the result of isinstanceof(x, Deleted).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1145043">
				<div id="div-comment-1145043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1145043">
			August 18, 2014 at 10:37 am</a>		</div>

		<p>@avakar86: And if your array is just an indexed list of unsigned ints, what do you propose for a sentinel value? 0? Well that could be a valid value.</p>
<p>Point is not everyone is using objects or abstract array types. The world my work is in, 16 kilobytes of SRAM is a luxury, so data is stored as efficiently as possible without all the fancy overhead. The solution presented is only portable in languages that have those abstract types and classing etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1145053">
				<div id="div-comment-1145053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">avakar86</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1145053">
			August 18, 2014 at 10:55 am</a>		</div>

		<p>@Brian EE: I didn&#39;t say it works in all languages in general. I was pointing out that it&#39;s not JS-specific. It works everywhere you have an available sentinel value. You&#39;re guaranteed to have one in (most) dynamically-typed languages; you may have one in others under some circumstances.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1145083">
				<div id="div-comment-1145083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reinard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1145083">
			August 18, 2014 at 11:34 am</a>		</div>

		<p>@Brian EE: -1 if positive int, otherwise null/nil, if not available a separate array maybe. Also JavaScript doesn&#39;t exist in the world you describe so that&#39;s kind of moot.</p>
<p>I do agree with your point though that relying so heavily on specific language implementations, even if they are technically defined in the spec is a horrible idea from a maintenance perspective on anything larger than a one-man project. If you do this and don&#39;t document it extensively I&#39;d be unhappy with your code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1145093">
				<div id="div-comment-1145093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1145093">
			August 18, 2014 at 11:35 am</a>		</div>

		<p>@Brian EE The sentinel value for ints is more likely to be the maximum value. Which works as long as you can prove that all possible values of whatever you are dealing with will fall into a range less than that. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1145163">
				<div id="div-comment-1145163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1145163">
			August 18, 2014 at 2:40 pm</a>		</div>

		<p>I&#39;m guessing that most JavaScript implementations are heavily optimised for the common case that the indices in use are contiguous, and maybe also that they start at 0. If that&#39;s true, removing elements like this might at some point (maybe immediately) cause the whole thing to get copied from a vector-like structure to a tree-like structure. Although it&#39;s still an interesting solution, of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1145023">
				<div id="div-comment-1145023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1145023">
			August 18, 2014 at 9:52 am</a>		</div>

		<p>I guess what you might be trying to get at from the exercise is that if you use</p>
<p>a = a.concat(1);</p>
<p>then a will lose all the non-whole number properties assigned to it. e.g.</p>
<p>a = [1, 2, 3];</p>
<p>a.x = 4</p>
<p>a = a.concat(1); /* a.x is now undefined */</p>
<p>while a.push(1) will retain such properties.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1145183">
				<div id="div-comment-1145183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rep_movsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1145183">
			August 18, 2014 at 4:53 pm</a>		</div>

		<p>I&#39;m feeling all smug because I worked out Raymond&#39;s nifty solution before I read it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1145193">
				<div id="div-comment-1145193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1145193">
			August 18, 2014 at 6:41 pm</a>		</div>

		<p>I code for web everyday but haven&#39;t thought of that before (I always go for &quot;delete in reverse order&quot; route, and jQuery does have .unique() for removing duplicates anyway)</p>
<p>I&#39;ve bookmarked this and will try it when have chance (there&#39;s more need to add things than removing things on web, and for most time when removing things they&#39;re bonded to UI elements such as checkboxes so no need to worry about double removal)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1145103">
				<div id="div-comment-1145103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John1337</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1145103">
			August 18, 2014 at 12:15 pm</a>		</div>

		<p>I guess .filter() and .forEach() are a little bit slower than manual loop here?</p>
<p>var a = [&quot;alice&quot;, &quot;bob&quot;, &quot;charles&quot;, &quot;david&quot;, &quot;eve&quot;],</p>
<p>indices = [2, 4, 2, 0];</p>
<p>/*</p>
<p>var indicesReverse = indices.sort().reverse();</p>
<p>for (var i = 0; i &lt; indicesReverse.length; ++i)</p>
<p>{</p>
<p>if (indicesReverse[i] == indicesReverse[i-1])</p>
<p>{</p>
<p>continue;</p>
<p>}</p>
<p>delete a[indicesReverse[i]];</p>
<p>}</p>
<p>a; // a.length == 5 and got undefined items</p>
<p>*/</p>
<p>indices.sort();</p>
<p>var out = [],</p>
<p>last = 0;</p>
<p>for (var i = 0; i &lt; indices.length; ++i)</p>
<p>{</p>
<p>// Skip indices duplicates</p>
<p>var current = indices[i];</p>
<p>if (current == indices[i-1])</p>
<p>{</p>
<p>continue;</p>
<p>}</p>
<p>for (var j = last; j &lt; current; ++j)</p>
<p>{</p>
<p>out.push(a[j]);</p>
<p>}</p>
<p>last = current + 1;</p>
<p>}</p>
<p>out; // ok</p>
<p>Regarding the question a.push(1); VS a = a.concat(1);</p>
<p>I guess it&#39;s about memory, because .concat() create a whole new array. So even if you make use of a.concat() for only 1 element, you will have 2 arrays in memory, temporarily, before a= affecation.</p>
<p>And doing that each time you want to add an item is bad because the copied array will be bigger and bigger&#8230;</p>
<p>And this will also create a nice workload for the garbage collector.</p>
<div class="post">[<em>I guess I didn&#39;t make it clear. I wasn&#39;t going for the best solution. I was going for the most clever solution. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1145223">
				<div id="div-comment-1145223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lake</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140818-00/?p=223#comment-1145223">
			August 18, 2014 at 11:22 pm</a>		</div>

		<p>if a already contains missing elements, like a = [&quot;alice&quot;, &quot;bob&quot;, , &quot;charles&quot;, &quot;david&quot;, , &quot;eve&quot;] which must be preserved, that method would not work</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>