<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (30)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-s-m-joshi-02 even thread-even depth-1 parent" id="comment-1266745">
				<div id="div-comment-1266745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266745">
			September 30, 2016 at 7:09 am</a>		</div>

		<p>Returning from main / WinMain also calls exit and then shuts the CRT down. This is probably the easiest way to get there if you can coordinate between all your threads etc.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1266805">
				<div id="div-comment-1266805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266805">
			September 30, 2016 at 8:29 am</a>		</div>

		<p>Also, this follows the pattern of having a single exit point in each function (i.e., not using intermediate returns), which makes code more readable and understandable, and easier to debug.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1266835">
				<div id="div-comment-1266835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266835">
			September 30, 2016 at 11:15 am</a>		</div>

		<p>If you don&#8217;t have exceptions (i.e. you&#8217;re using plain C) then having to return back to main() on any non-trivial program is a pain.</p>
<p>However what you probably should do is call an application specific function that logs and exits, so you can break point it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm odd alt depth-3" id="comment-1267165">
				<div id="div-comment-1267165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1267165">
			October 3, 2016 at 6:33 pm</a>		</div>

		<p>&#8220;Also, this follows the pattern of having a single exit point in each function (i.e., not using intermediate returns), which makes code more readable and understandable, and easier to debug.&#8221;</p>
<p>Except that in a language like C++, this is often considered an anti-pattern, and often does the exact opposite.  It makes the code harder to read, understand and debug.  Proper use of RAII eliminates the need for cleanup code at the end of the function, and deeply nested conditionals that it spawns.  In any case, that&#8217;s probably getting too far off-topic for this post.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1266755">
				<div id="div-comment-1266755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266755">
			September 30, 2016 at 7:16 am</a>		</div>

		<p>Doesn&#8217;t this highlight a deficiency in the C runtime spec? </p>
<p>Ostensibly, the C runtime shouldn’t really be aware of the concept of a process. That’s an OS thing, so it seems correct that to exit a Windows process, you should call a Windows API.</p>
<p>Shouldn’t the C Runtime have a ‘call_global_dtors()’ function?</p>
<p>Then the ExitProcess goes from:</p>
<p>ExitWindows() -&gt; UnloadLibs() -&gt; DestructGlobals() -&gt; Kaboom() (optional) -&gt; Shutdown C Runtime()</p>
<p>To:</p>
<p>ExitWindows() -&gt;DestructGlobals() -&gt;UnloadLibraries() -&gt;Shutdown C Runtime()</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1266765">
				<div id="div-comment-1266765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266765">
			September 30, 2016 at 7:47 am</a>		</div>

		<p>That&#8217;s a layering violation. The OS should not know about the C runtime.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3" id="comment-1266815">
				<div id="div-comment-1266815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266815">
			September 30, 2016 at 9:01 am</a>		</div>

		<p>It also assumes that everybody in the process uses the same runtime, and that no runtime depends on another runtime.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1266936">
				<div id="div-comment-1266936" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266936">
			October 2, 2016 at 5:30 am</a>		</div>

		<p>The kernel certainly shouldn&#8217;t know about the C runtime, but I&#8217;d argue that it would be reasonable for the low level userspace wrappers to the kernel, which has a high probability of being mostly written in C with a tiny bit of ASM for register twiddling and the actual int 80h/syscall instruction, for them to be aware of the C runtime. So having the userspace wrapper for ExitProcess() do C runtime bookkeeping before passing control to the kernel&#8217;s ExitProcess() is not necessarily a (large) laying violation.</p>
<p>Alternatively, providing hooks for a process to set arbitrary pre-ExitProcess() callbacks, similar to C&#8217;s atexit(3), would allow the C runtime to set a hook at initialisation to do cleanup before it receives the DLL_PROCESS_DETACH, with no layering violation.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-4" id="comment-1266945">
				<div id="div-comment-1266945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266945">
			October 2, 2016 at 8:52 am</a>		</div>

		<p>Of course, there is always the easy way, make the process clean-up occur before the call to ExitProcess. This then stops the need to change the behaviour of functions that have been in windows forever. This is what happens normally if you just return from main, or call exit. In fact, you have to go out of your way and call outside of the CRT/VCRuntime layer to actually get things to go wrong. (I mention the VCRuntime here because it took over the process initialisation/uninitialisation in VC2015.)<br />
It is also easy to forget that this whole thing is a major special case used to highlight how process exit can go bad. Normal processes on Windows should be calling exit or returning from the entrypoint in order to exit the process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4 parent" id="comment-1267045">
				<div id="div-comment-1267045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1267045">
			October 3, 2016 at 9:12 am</a>		</div>

		<p>There is just no good reason for such a violation of good design principles. </p>
<p>As is usually the case this just highlights a bad design: If instead of calling the lore level win32 API you called the c runtime function you wouldn&#8217;t have the problem in the first case. That&#8217;s not only a simple but also clean fix.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1267115">
				<div id="div-comment-1267115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1267115">
			October 3, 2016 at 12:20 pm</a>		</div>

		<p>You&#8217;re assuming my application is written in C, which it might not be. Why would my F# program, which in this particular run has used a COM component that happens to have been written in C and therefore loaded a C runtime behind my back, call a C runtime function to exit? It&#8217;s not a C program, it&#8217;s a Windows program, and the ExitProcess() is the relevant language-agnostic Windows API call that the program *should* use to exit.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt depth-4 parent" id="comment-1267146">
				<div id="div-comment-1267146" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1267146">
			October 3, 2016 at 3:05 pm</a>		</div>

		<p>Re: the reply to voo:<br />
If you are calling a Win32 API function instead of using the facilities supplied by the language to exit, then your design is even more questionable.<br />
ExitProcess just shouldn&#8217;t be used as a general purpose way of exiting your program, instead you should use the ways provided by the runtime of the language that you are using to exit. In fact, I would say that if you are tempted to use ExitProcess, even if it means pInvoking or some other native call method of calling it, then you are unfamiliar with the language and are struggling to adapt to what you don&#8217;t know.<br />
But anyway, ExitProcess as a function was only designed to do one thing, take the process as it is and then just exit it. From the documented behaviour, ExitProcess makes the assumption that the process has already been cleaned up by the current program. After all, the first thing it does is terminates, with extreme prejudice, all running threads except the thread that called ExitProcess. Immediately you should realise that if you have a program that is even slightly multithreaded, then that means abandoned synchronisation objects, deadlocks and fun, oh my.<br />
So no, ExitProcess is the Win32 function used to exit the process, it isn&#8217;t meant to cleanly exit, or clean-up the runtime or anything like that. As such, the runtime itself should be what calls ExitProcess, a developer should only call ExitProcess if you are in an unhosted process, so you came in via the raw entry point, and you do that only after you completely cleaned up after yourself.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1267215">
				<div id="div-comment-1267215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1267215">
			October 4, 2016 at 7:33 am</a>		</div>

		<p>I&#8217;m coming around to your way of thinking, but&#8230;</p>
<p>I&#8217;ve generally viewed the Microsoft&#8217;s APIs as being &#8220;on top of&#8221;, and recommended over, whatever API is usually provided by a language. So, you should generally use OpenFile()/ReadFile()/CloseFile() over fopen()/fread()/fclose(). Or CString over std::string. Or *Alloc() over malloc(). I&#8217;m sure there are plenty of other examples out there.</p>
<p>Generally, if the Windows API provides an alternative way of performing a task than the &#8220;native&#8221; way for your particular language, then code using those APIs will integrate better with the rest of the Windows APIs that your other code is using, and be less painful in the long run.</p>
<p>Maybe this is an exception to the rule, but I don&#8217;t like those. I&#8217;ve found that a lot of the practice of &#8220;good programming&#8221; is figuring out good habits and sticking to them as much as possible. Exceptions, like this one appears to be, are additional cognitive load that I could do without. :-/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm odd alt depth-5" id="comment-1267236">
				<div id="div-comment-1267236" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1267236">
			October 4, 2016 at 8:39 am</a>		</div>

		<p>&#8220;I’m coming around to your way of thinking, but… I’ve generally viewed the Microsoft’s APIs as being “on top of”, and recommended over, whatever API is usually provided by a language. So, you should generally use OpenFile()/ReadFile()/CloseFile() over fopen()/fread()/fclose(). Or CString over std::string. Or *Alloc() over malloc(). I’m sure there are plenty of other examples out there.&#8221;</p>
<p>It depends on whether you&#8217;re willing to be tied to the platform, or if you&#8217;re looking to be portable.</p>
<p>&#8220;Generally, if the Windows API provides an alternative way of performing a task than the “native” way for your particular language, then code using those APIs will integrate better with the rest of the Windows APIs that your other code is using, and be less painful in the long run.&#8221;</p>
<p>As long as &#8220;the long run&#8221; is only on Windows, and as long as &#8220;your other code&#8221; is also stuff that only runs on Windows.  If you&#8217;re using portable third-party libraries, then you likely want to stick with portable stuff.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1267255">
				<div id="div-comment-1267255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1267255">
			October 4, 2016 at 2:52 pm</a>		</div>

		<p>If you&#8217;re looking to write portable code, you won&#8217;t be calling any Win32 functions at all, including ExitProcess(), so that point is kind of moot in this thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm odd alt depth-5" id="comment-1267575">
				<div id="div-comment-1267575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1267575">
			October 6, 2016 at 5:54 pm</a>		</div>

		<p>&#8220;If you’re looking to write portable code, you won’t be calling any Win32 functions at all, including ExitProcess(), so that point is kind of moot in this thread.&#8221;</p>
<p>Your post sounded like a general philosophy, not &#8220;I&#8217;ve already decided that I&#8217;m writing non-portable Win32 code, so in that case, which is better?&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1267645">
				<div id="div-comment-1267645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1267645">
			October 7, 2016 at 7:33 am</a>		</div>

		<p>Yeah, sorry, reading it back now, I see what I wrote down was not quite as clear as the thoughts were in my head!</p>
<p>My bad.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1266785">
				<div id="div-comment-1266785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266785">
			September 30, 2016 at 8:18 am</a>		</div>

		<p>It is an implementation detail and certainly how VC++ implements it. I am not sure if gcc follows the same pattern.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-2 parent" id="comment-1266795">
				<div id="div-comment-1266795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266795">
			September 30, 2016 at 8:22 am</a>		</div>

		<p>The CRT has to be aware of the concept of a process, it has exit and abort, C++ has unexpected and terminate for exception handling. So to an extent it has to be aware of the concept of processes.<br />
The problem here is that the global object creation and destruction happens behind the scenes, it happens in the CRT/VCRuntime code that executes before and after the main function is called. By calling ExitProcess, you are reaching out beyond this and basically going straight to destroying the process without cleaning up the contents first. The current documentation for ExitProcess tells you exactly what it does, and it basically terminates all threads, unloads all DLLs and then terminates the calling thread and process. So basically, it allows the DLLs to clean up, but not the container process which should go first.<br />
But you are right in that it is an OS thing, and there is a call to ExitProcess involved normally. If you just return from the main function, then the library calls exit, which calls the clean-up code and then ExitProcess. If you call exit yourself, then it calls the clean-up code and then ExitProcess. If you return and for some reason the library doesn&#8217;t call exit, it returns to the Windows process creation code, which is guaranteed to call ExitProcess.<br />
For &#8220;Shouldn’t the C Runtime have a ‘call_global_dtors()’ function?&#8221;, well, it does. The problem is, calling ExitProcess caused it to come at the wrong time. After you call ExitProcess, it basically goes onto the DLL clean-up, and the clean-up order is implementation defined. This means that the order that DLLs are unloaded can&#8217;t be known in advance, and it so happened that GDI was unloaded before MSVCRT. Of course, there could be some call in ExitProcess that could do the global clean-up in the process, but what is the point when ExitProcess should be the very last call that a process makes anyway.<br />
My thought is that this problem is a holdover from the very early days of Windows when the rules for using the CRT was very different.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1266845">
				<div id="div-comment-1266845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266845">
			September 30, 2016 at 11:19 am</a>		</div>

		<p>Some systems have hooks that you can use to be told when your application exited, so you can do all your cleanup.</p>
<p>But as windows closes files, sockets and releases memory anyway, there isn&#8217;t much of an argument for it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1266855">
				<div id="div-comment-1266855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266855">
			September 30, 2016 at 11:24 am</a>		</div>

		<p>What exactly is happening in these destructors that matters if the process is about to exit?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1266875">
				<div id="div-comment-1266875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266875">
			September 30, 2016 at 1:33 pm</a>		</div>

		<p>For example, releasing a resource which is physically located on a different machine and accessed and locked over the network.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-2 parent" id="comment-1266885">
				<div id="div-comment-1266885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266885">
			September 30, 2016 at 2:09 pm</a>		</div>

		<p>The post yesterday, it crashed while cleaning up CBitmap. So what it was trying to recover was GDI handles.<br />
The thing to remember is that unlike kernel handles, GDI handles aren&#8217;t automatically recovered when a process exits or dies. The GDI memory does get recovered, but it can take a while, so any memory not cleaned up properly is leaked for a while. So in this case, it is used to clean up a resource which wasn&#8217;t automatically deleted and would stay allocated outside of the process bounds.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1266965">
				<div id="div-comment-1266965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266965">
			October 2, 2016 at 5:43 pm</a>		</div>

		<p>Hmmm, I see, ty</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-samuel-bronson even depth-3" id="comment-1267615">
				<div id="div-comment-1267615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Samuel+Bronson' rel='external nofollow' class='url'>Samuel Bronson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1267615">
			October 6, 2016 at 8:17 pm</a>		</div>

		<p>That would explain why TerminateProcess didn&#8217;t get mentioned yet!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1266865">
				<div id="div-comment-1266865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266865">
			September 30, 2016 at 11:57 am</a>		</div>

		<p>I have a great deal of fun working on a project where the original programmer decided that every class with a single instance should be declared in it&#8217;s implementation file and extern&#8217;d in it&#8217;s header file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1266915">
				<div id="div-comment-1266915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrina</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266915">
			September 30, 2016 at 8:36 pm</a>		</div>

		<p>The msdn documentation has historically lacked a lot of information about the interaction between MS OS and MS implementation of C/C++. This interaction is very important to be able to understand, to be able to understand how any developed application work. Sometimes the standards cannot be exactly implemented, and sometimes they can be implemented in different ambiguous ways and a developer can then only guess how it actually is implemented and what side effects exists.</p>
<p>Application specific cleanup logic should of course not rely on any particular OS or CRT hooks. Since WEP it has always been &#8220;best effort&#8221;, which in practical situations are totally useless to implement because there&#8217;s no guarantees for any cleanup code ever executing anyway. Both protocols and persistence logic in general of course needs to take abrupt shutdowns into consideration. If the power cord is yanked files should not been kept locked on remote servers forever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1266925">
				<div id="div-comment-1266925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266925">
			October 1, 2016 at 3:40 am</a>		</div>

		<p>I assume this table is for the dynamic CRT. Has the static CRT ever been aware of calls to ExitProcess?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1266935">
				<div id="div-comment-1266935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1266935">
			October 1, 2016 at 10:44 am</a>		</div>

		<p>Well, the only reason why the DLL version of the CRT detected this was the call to the DLL entrypoint with the DLL_PROCESS_DETACH.<br />
The static CRT itself would only become aware of it if the executable itself did the clean-up. A direct call to ExitProcess in an executable that was statically linked to the runtime would most likely leak any global handles from things like the GDI, or leak reference counts from out of process COM servers.<br />
In the case of a statically linked executable, the call to ExitProcess would call into the loader and just terminate the process, only executing code from the DLL entry points. The global destructors would never get called because they are part of the executable clean-up code that would never get called. So while the dynamic version had a chance and crashed doing it, the static version would just do nothing and let everything leak.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1267065">
				<div id="div-comment-1267065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160930-00/?p=94425#comment-1267065">
			October 3, 2016 at 9:29 am</a>		</div>

		<p>I&#8217;ve ran analysis on use of a lackey to run destructors, etc. While the lacky does work for direct code execution, trying to use it with a further layer of indirection is doomed to failure because this can set up cross-dependencies, that is the lackey cleanup routine calls into code that has already had its dependencies removed, and because it was statically linked, assumes that is not possible. Oops.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>