<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1031643">
				<div id="div-comment-1031643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031643">
			January 8, 2013 at 8:18 am</a>		</div>

		<p>FYI: you can&#39;t split by deciding when one symbol starts the previous ends. Symbols can share code. Most famously, malloc and realloc in certain old libraries were about 10 bytes apart.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031653">
				<div id="div-comment-1031653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031653">
			January 8, 2013 at 8:37 am</a>		</div>

		<p>@Joshua</p>
<p>While it is certainly true that one procedure can &quot;validly&quot; spill into another, it could be easily argued that this was bad practice even when memory was tight. We are talking about an extra 5 bytes for the routine that spills to instead call the function that it spills into.</p>
<p>Of course, back then programming was quite a bit more clever than it is today so the definition of &quot;bad practice&quot; was also different. It wasnt uncommon to calculate a code offset at runtime based on the size of the instruction(s) that repeatedly perform some operation in an unrolled loop manner (ex: the assembly precursor to Duffs Device)</p>
<div class="post">[<em>The linker is language-agnostic. By the time the OBJ reaches the linker, it&#39;s just a bunch of bytes with symbolic labels attached. Some languages support multiple entry points for a single function. (<a href="http://c-faq.com/misc/entry.html" rel="nofollow">Even C considered such support</a> but eventually decided against it.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031673">
				<div id="div-comment-1031673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031673">
			January 8, 2013 at 10:23 am</a>		</div>

		<p>Thanks, Raymond, for the g_InitMagicNumber example. I&#39;ve wondered before, and again prompted by yesterday&#39;s post, about how useful it would be if the compiler did something like automatically split out each symbol into its own object file to reduce dependencies, but that would be a good reason why that wouldn&#39;t work. I&#39;ve used stuff like your example on a few occasions (I even have &quot;ConstructionRunner&quot; and &quot;DestructionRunner&quot; classes that I pull around to various projects &#8212; you write &#39;void foo() { &#8230; }; ConstructionRunner dummy(foo);&#39;), so I find it very sympathetic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1031683">
				<div id="div-comment-1031683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031683">
			January 8, 2013 at 11:27 am</a>		</div>

		<p>@joshua:</p>
<p>This is why gods gave the man the great power of COMDAT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031703">
				<div id="div-comment-1031703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031703">
			January 8, 2013 at 2:35 pm</a>		</div>

		<p>[The magic is how the constructor manages to run when there is no explicit caller. -Raymond]</p>
<p>Maybe I should show Raymond how to make code run without an implicit caller either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031713">
				<div id="div-comment-1031713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031713">
			January 8, 2013 at 7:39 pm</a>		</div>

		<p>@alegr1:</p>
<p>It&#39;s sad that MASM doesn&#39;t have a way to declare COMDATs. &nbsp;If you use /Gy /Fa on cl.exe&#39;s command line to generate function COMDATs and output assembly source, the COMDAT flag is only a comment. &nbsp;If you were to assemble the output file, it wouldn&#39;t have COMDATs.</p>
<p>@Brian_EE:</p>
<p>Global constructors work in Visual C++ by the compiler putting a pointer to the constructor into a specifically-named .obj section. &nbsp;Part of the msvcrt startup code goes through the list of pointers in this section and calls each function; in Visual Studio 2010, that&#39;s the function _initterm in crt0dat.c. &nbsp;See also crt0init.c.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1031693">
				<div id="div-comment-1031693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031693">
			January 8, 2013 at 12:12 pm</a>		</div>

		<p>&quot;I&#39;m not going to go into the magic of &#8230;.&quot;</p>
<p>Wait. You created a global object of type InitMagicNumber, so the object must get constructed. How is that magic? Perhaps you mis-spelled *logic* ?</p>
<div class="post">[<em>The magic is how the constructor manages to run when there is no explicit caller. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031723">
				<div id="div-comment-1031723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031723">
			January 9, 2013 at 3:19 am</a>		</div>

		<p>Thus the note in *printf pointing out that you couldn&#39;t use any of the floating-point formats unless you actually did some floating-point operation that caused the floating-point library to get linked in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031733">
				<div id="div-comment-1031733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031733">
			January 9, 2013 at 3:23 am</a>		</div>

		<p>Another version of the trick is when you have a dllexport symbol in a library; a fake reference to the symbol in an unused function in an explicit object file will cause the exported symbol to get resolved. Firefox used to do this but now they just skip the intermediate library step and simply link all their bazillion object files together.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1031743">
				<div id="div-comment-1031743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031743">
			January 9, 2013 at 6:48 am</a>		</div>

		<p>@Myria:</p>
<p>I understand how that works. I was questioning why Raymond considered it to be &quot;magic&quot;.</p>
<p>And in DSP-land the section is called .init_array and is called in c_int00.</p>
<div class="post">[<em>It&#39;s even more magical than the __fltused magic, since it employs a trick beyond merely resolving symbols. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031933">
				<div id="div-comment-1031933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031933">
			January 9, 2013 at 8:37 am</a>		</div>

		<p>I suspect the use of &quot;magic&quot; to describe the operating of constructors and destructors is because by my understanding if you went back to, I dunno, 1980 runtimes, they wouldn&#39;t get run. The g_InitMagicNumber symbol would be present, but wouldn&#39;t do anything. (1980 is arbitrary. Maybe it&#39;d have to be 1975 or something.)</p>
<p>As Raymond&#39;s latest response (to Brian_EE) suggests, even something like __fltused fits into the classical model of linking, and you&#39;d be able to pull that trick with 1980 linkers.</p>
<div class="post">[<em>They get run even under the classical model, but by a technique not described in this series of articles (but described by Larry). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032073">
				<div id="div-comment-1032073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1032073">
			January 9, 2013 at 12:09 pm</a>		</div>

		<p>I don&#39;t get why you need __fltused. &nbsp;I thought that something like 1.2 + 3.4 gets compiled into something like __fltadd(1.2, 3.4). &nbsp;Then you can resolve __fltadd instead of a bogus symbol like __fltused.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032153">
				<div id="div-comment-1032153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gregory</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1032153">
			January 9, 2013 at 3:23 pm</a>		</div>

		<p>Why do we want magicNumber initialization to happen through g_InitMagicNumber exactly?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1032293">
				<div id="div-comment-1032293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1032293">
			January 10, 2013 at 5:59 am</a>		</div>

		<p>@Gregory: Um, simply because it is a contrived example used to describe the issue in general terms maybe?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032383">
				<div id="div-comment-1032383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gregory</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1032383">
			January 10, 2013 at 2:51 pm</a>		</div>

		<p>Can someone come up with a more concrete scenario then?</p>
<div class="post">[<em>See the entire printf discussion. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>