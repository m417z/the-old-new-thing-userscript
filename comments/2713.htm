<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1087953">
				<div id="div-comment-1087953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1087953">
			November 7, 2013 at 7:23 am</a>		</div>

		<p>Better solution: don&#39;t get the problem in the first place. In my experience, thread pools are obsolete.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1087963">
				<div id="div-comment-1087963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1087963">
			November 7, 2013 at 7:55 am</a>		</div>

		<p>What if you need to have a thread (or other thread-related constructs) in a DLL which is managed only by LoadLibrary/FreeLibrary, and doesn&#39;t have a dedicated export to shut it down outside of a loader lock? For example, you need to add a thread into a DLL used by applications, and you cannot change the calling appication?</p>
<p>The solution is to have the first (legacy interface) DLL load a secondary DLL which would actually contain the code executed by threads. On the first DLL&#39;s DETACH_PROCESS (unload), it should call a function in a secondary DLL to signal the shutdown of threads (only signal, not wait!). The threads in the second DLL would also wait for all thread pool callbacks, and other asynchronous rundown. Then the threads would exit by FreeLibraryAndExitThread. Bingo! Both DLLs are now unloaded.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1087973">
				<div id="div-comment-1087973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RaceProUK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1087973">
			November 7, 2013 at 8:07 am</a>		</div>

		<p>@Joshua &#8211; Except in web servers, RDBMSs, in fact anything that needs to handle an arbitrary number of parallel requests.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1087983">
				<div id="div-comment-1087983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1087983">
			November 7, 2013 at 8:14 am</a>		</div>

		<p>@RaceProUK: My benchmarks show one thread per connection is the right way to do it, and the thread startup cost is negligible, and memory is now cheap enough that the memory for the thread stacks costs less than the complexity of using thread pools.</p>
<div class="post">[<em>Good luck scaling to more than a few thousand connections. (See also: The C10K problem.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1087993">
				<div id="div-comment-1087993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1087993">
			November 7, 2013 at 8:21 am</a>		</div>

		<p>The code for ProxyFreeLibraryAndExitThread actually contains a serious race condition:</p>
<p>If the two last threads call it at the same time, its possible that:</p>
<p>1. thread A first calls InterlockedExchange (receives 1), so goes to the ExitThread branch.</p>
<p>2. before it goes any further thread B gets active goes to InterlockedExchange, receives 0 and calls</p>
<p>FreeLibraryAndExitThread</p>
<p>3. Thread A now would like to continue, but it&#39;s code has been dropped in the meantime&#8230;</p>
<div class="post">[<em>You&#39;re right. Rats. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1088003">
				<div id="div-comment-1088003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088003">
			November 7, 2013 at 8:26 am</a>		</div>

		<p>I don&#39;t have too much experience with thread pools, but when I had a task I needed to run 2500 times, in parallel, but obviously only a handful at once, just assigning a thread pool to handle them all was like delicious MAGIC. &nbsp;It worked very nicely.</p>
<p>(Specifically, the task was sending a network packet to a game server to query the game information and waiting for the response, then parsing it, then invoking the UI thread to update with the game information in a server list.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1088013">
				<div id="div-comment-1088013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088013">
			November 7, 2013 at 8:27 am</a>		</div>

		<p>Addendum: I tried launching 2500 threads at once on my first attempt. &nbsp;It did not end well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1088023">
				<div id="div-comment-1088023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Lyon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088023">
			November 7, 2013 at 8:39 am</a>		</div>

		<p>There is a far, far simpler solution that works for many use cases (many, but not all):</p>
<p>During initialization, increase the reference count on your DLL. Never decrease it. You are guaranteed to never get unloaded until the process terminates. If this is OK for your situation, then all other bookkeeping is moot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1088033">
				<div id="div-comment-1088033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088033">
			November 7, 2013 at 9:53 am</a>		</div>

		<p>@MAZZTer:</p>
<p>If every workitem was also waiting for the response, you&#39;ve been doing it wrong. You should have used completion ports to receive responses.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1088043">
				<div id="div-comment-1088043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088043">
			November 7, 2013 at 10:14 am</a>		</div>

		<p>[Good luck scaling to more than a few thousand connections. (See also: The C10K problem.) -Raymond]</p>
<p>I&#39;d hit database overloaded and killed first.</p>
<p>If actually facing the C10K problem on the frontend, I&#39;d move the whole thing to the UNIX world so each thread could do 500 connections by using select(). (Select caps out at 64 in the Windows world.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1088053">
				<div id="div-comment-1088053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088053">
			November 7, 2013 at 10:19 am</a>		</div>

		<p>Re the C10K problem: &nbsp;I used to work for an airline. &nbsp;In the 1970s, 1980s, and 1990s, airline reservations systems had 80,000 terminals connected at once, and could handle 5,000 transactions per second. &nbsp;Now, all of those travel agents are likely using PCs instead of directly-connected terminals. &nbsp;I don&#39;t work for an airline anymore, so I don&#39;t know.</p>
<p>Today&#39;s PCs are likely more powerful than mainframes of that era, and they certainly have more memory. &nbsp;I do know that the TPF operating system is a fascinating thing. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1088063">
				<div id="div-comment-1088063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088063">
			November 7, 2013 at 11:42 am</a>		</div>

		<p>@Joshua: the correct solution for Windows is not select, it is something more complicated. Take a look at libevent2, it does the right thing on whatever operating system you are using.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1088083">
				<div id="div-comment-1088083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088083">
			November 7, 2013 at 12:11 pm</a>		</div>

		<p>@JimLyon</p>
<p>If you want to pin the library so it never exits, then pin it instead of just messing with the reference count:</p>
<p>void PinThisDll()</p>
<p>{</p>
<p> &nbsp;HMODULE _ignore;</p>
<p> &nbsp;if(!GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS | GET_MODULE_HANDLE_EX_FLAG_PIN , (LPCTSTR)&amp;PinThisDll, &amp;_ignore))</p>
<p> &nbsp; &nbsp;HandleError();</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1088093">
				<div id="div-comment-1088093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088093">
			November 7, 2013 at 12:46 pm</a>		</div>

		<p>Joshua: In my experience, select() is obsolete. In fact, the C10k problem exists partially due to the poor scalability of select() &#8212; the same list of 500 sockets has to be traversed by the kernel for every single call. If you are stuck using a select-based framework, use WSAAsyncSelect which has no limit on sockets (it&#39;s more like Linux&#39;s epoll than select). However, the proper way to do it is to use a completion port (and implicitly a thread pool).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1088103">
				<div id="div-comment-1088103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088103">
			November 7, 2013 at 1:39 pm</a>		</div>

		<p>Haven&#39;t we progressed a bit since the old age of &quot;use one thread per connection&quot; by now? I&#39;d at least hope so, all those asynchronous event-driven architectures exist for a reason after all. You still want threadpools obviously but only in the number of cores available to the machine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1088123">
				<div id="div-comment-1088123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088123">
			November 7, 2013 at 3:02 pm</a>		</div>

		<p>About &quot;use one thread per connection is obsolete&quot;: Better &quot;use the right tool for the job&quot;.</p>
<p>If any client interaction is dominated by waiting, not by frantic processing, and you really have to serve many connections, one thread/process per connection is too heavyweight.</p>
<p>If there are only ever a handful connections or you must do heavy processing for each client, the resource overhead is negligible while the conceptual overhead for keeping things asynchronous might be telling.</p>
<p>One size does not fit all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1088133">
				<div id="div-comment-1088133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088133">
			November 7, 2013 at 11:23 pm</a>		</div>

		<p>All this reference counting stuff is a bit ominous, wouldn&#39;t you agree? The reference counting has to be done by both the thing being referenced AND things that refernce it, and may God help you if someone, just someONE slips a +1 or -1.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1088143">
				<div id="div-comment-1088143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088143">
			November 8, 2013 at 2:42 am</a>		</div>

		<p>So what does the threadpool do when someone Exits the thread? Most likely it just shrugs and moves on, while taking the old thread down from whatever internal lists it keeps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1088153">
				<div id="div-comment-1088153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088153">
			November 8, 2013 at 6:42 am</a>		</div>

		<p>@Joker_vD:</p>
<p>I would disagree with the reference counting needs to be done with the thing referencing it too.</p>
<p>For the COM reference counting, I normally go along the lines of one reference = one variable. This is along similar lines, one reference = one thread.</p>
<p>While it is still possible to do slips, like a double Release on a single pointer, or missing a Release resulting in an outstanding reference. I have noticed that the most problems I have had from reference counting is from the server side, and even that is rare and easy to fix.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1088173">
				<div id="div-comment-1088173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088173">
			November 8, 2013 at 8:17 am</a>		</div>

		<p>@Joshua: select() caps out at 64 sockets by default, but according to the docs, you can actually #define FD_SETSIZE to whatever value you want before #include&#39;ing &lt;Winsock2.h&gt; (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms739169%28v=vs.85%29.aspx">msdn.microsoft.com/&#8230;/ms739169%28v=vs.85%29.aspx</a>).</p>
<p>That said, as others have said, select() doesn&#39;t scale well to large numbers of sockets due to the need to iterate through the entire FD_SET. &nbsp;A callback-oriented API like WSAAsyncSelect() or epoll() scales much better. &nbsp;Particularly on Linux, where select() is O(largest FD) but epoll() is O(number of FDs).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1088183">
				<div id="div-comment-1088183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088183">
			November 8, 2013 at 8:30 am</a>		</div>

		<p>@Crescens2k: One reference = one variable? That reminds of a story about how stack could have been implemented: <a rel="nofollow" target="_new" href="http://www.bartosz.com/win32/olerant.html">http://www.bartosz.com/&#8230;/olerant.html</a> — scroll to the end, to the box starting with &quot;Long, long time ago&#8230;&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1088253">
				<div id="div-comment-1088253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088253">
			November 11, 2013 at 1:21 am</a>		</div>

		<p>Joker_vD: I don&#39;t think someone who doesn&#39;t understand why thinking in terms of interfaces or what problem reference counting solves is in any position to criticise OLE/COM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1088283">
				<div id="div-comment-1088283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131107-00/?p=2713#comment-1088283">
			November 11, 2013 at 7:30 am</a>		</div>

		<p>@Joker_vD:</p>
<p>The writer of &quot;OLE rant&quot; doesn&#39;t get OLE at all. Here is a hint: object ownership/lifetime tracking is VERY difficult problem. He thinks that instead of reference counting you should just delete the object when you&#39;re done with it: &quot; there is very little need for refcounting as long as you agree not to destroy the object while you are using its interfaces&quot;. But knowing when you&#39;re done with using its interfaces is the hardest part. And that&#39;s what the reference counting makes extremely easy.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>