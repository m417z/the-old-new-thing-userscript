<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1021003">
				<div id="div-comment-1021003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/msteppat_4000_arcor.de/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>msteppat@arcor.de</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021003">
			November 15, 2012 at 7:30 am</a>		</div>

		<p>God, I love managed code. (And I recognize C to also be a valid language choice).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1021043">
				<div id="div-comment-1021043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021043">
			November 15, 2012 at 8:09 am</a>		</div>

		<p>I fail to understand how misaligned changes the &quot;guaranteed to be zero&quot; so it is not.</p>
<p>I do, however, see the problem when certain 64 bit instructions are no longer atomic when misaligned (I forget which ones offhand).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1021053">
				<div id="div-comment-1021053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Z.T.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021053">
			November 15, 2012 at 8:11 am</a>		</div>

		<p>Can that SLIST code have the equivalent of &quot;assert((this &amp; 15) == 0&quot; ? Asserts are better than documentation.</p>
<div class="post">[<em>I just checked. The assertion is there. Of course, assertions are enabled only in chk builds&#8230; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1021063">
				<div id="div-comment-1021063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Z.T.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021063">
			November 15, 2012 at 8:16 am</a>		</div>

		<p>@Joshua: the pointer itself has zeroes in its 4 least significant bits, because it points to a 16 byte aligned address. Now you can stuff things (like count/length/size) into the pointer itself, and dereference through &quot;*(((uintptr_t)p)&amp;~((uintptr_t)15))&quot;. See <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Tagged_pointer" rel="nofollow">en.wikipedia.org/&#8230;/Tagged_pointer</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1021093">
				<div id="div-comment-1021093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rodrigo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021093">
			November 15, 2012 at 9:10 am</a>		</div>

		<p>I&#39;d really like to see the correct implementation of this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1021103">
				<div id="div-comment-1021103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nobody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021103">
			November 15, 2012 at 9:20 am</a>		</div>

		<p>This is one reason I would prefer to work on a CPU where all misaligned access faulted. &nbsp;Less room for ambiguity if your thing faults all the time.</p>
<p>(Although, I&#39;d argue that altering the low bits of a pointer as metadata is kind of asking for this type of bug. &nbsp;The only place where I would not frown on this in a code review is where hardware interfaces require it. &nbsp;x86 page tables come to mind.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1021113">
				<div id="div-comment-1021113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021113">
			November 15, 2012 at 9:25 am</a>		</div>

		<p>The correct one would be that one (hopefully):</p>
<p>struct EXTRASTUFF</p>
<p>{</p>
<p>&nbsp; &nbsp;DWORD_PTR Awesome1;</p>
<p>&nbsp; &nbsp;DWORD_PTR Awesome2;</p>
<p>};</p>
<div class="post">[<em>You&#39;re trying too hard. Just use <code><a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/08/19/10197553.aspx" rel="nofollow">DECLSPEC_ALIGN(MEMORY_ALLOCATION_ALIGNMENT)</a></code>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1021143">
				<div id="div-comment-1021143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021143">
			November 15, 2012 at 9:56 am</a>		</div>

		<p>[You&#39;re trying too hard. Just use DECLSPEC_ALIGN(MEMORY_ALLOCATION_ALIGNMENT). -Raymond]</p>
<p>The K&amp;R C handbook essentially says to do it this way. (It actually said to union with a type that was the same size as the alignment.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1021153">
				<div id="div-comment-1021153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021153">
			November 15, 2012 at 11:23 am</a>		</div>

		<p>I&#39;m confused again.</p>
<p>Aren&#39;t you supposed to use _aligned_malloc for lists ?</p>
<p>So using new was on its own a bug when allocating &#39;SLIST_ENTRY&#39;, isn&#39;t that correct ?</p>
<p>// Initialize the list header to a MEMORY_ALLOCATION_ALIGNMENT boundary.</p>
<p>pListHead = (PSLIST_HEADER)_aligned_malloc(sizeof(SLIST_HEADER), MEMORY_ALLOCATION_ALIGNMENT);</p>
<p>From: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms686962(v=vs.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms686962(v=vs.85).aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1021163">
				<div id="div-comment-1021163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021163">
			November 15, 2012 at 11:54 am</a>		</div>

		<p>@James:</p>
<p>(1) From Raymond&#39;s description, the list was a member of another structure so that wouldn&#39;t have worked anyway</p>
<p>(2) There&#39;s no requirement I can find at the page you linked or a couple I followed from there. All it says is that the SLIST_HEADER must be aligned at MEMORY_ALLOCATION_ALIGNMENT. _aligned_mallloc() is one way to achieve that (which is why they refer you to it) but it&#39;s by no means the only.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1021173">
				<div id="div-comment-1021173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021173">
			November 15, 2012 at 12:26 pm</a>		</div>

		<p>@Evan:</p>
<p>I have never understood the alignment thing.</p>
<p>Never understood the rules behind when it is needed and when it should/recommended be used.</p>
<p>Is it the pointer that need to be in a boundary or the position in the parent structure of the SLIST_HEADER or the whole parent structure needs to be aligned. All the above ?</p>
<p>Been programming for over 10 years. Never needed to learn it.</p>
<p>This makes me feel uneducated again.</p>
<p>I have to put it in the todo list.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1021223">
				<div id="div-comment-1021223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021223">
			November 15, 2012 at 2:16 pm</a>		</div>

		<p>[I just checked. The assertion is there. Of course, assertions are enabled only in chk builds&#8230; -Raymond]</p>
<p>I think CMPXCHG16B will itself fault if the structure is not 16-byte aligned.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1021233">
				<div id="div-comment-1021233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021233">
			November 15, 2012 at 2:30 pm</a>		</div>

		<p>@James:</p>
<p>If I have some &quot;struct S { &#8230; SLIST_ENTRY list; &#8230; };&quot; and an object &quot;struct S s;&quot;, technically speaking it&#39;s only the &#39;s.list&#39; field that needs that alignment. In other words, &quot;&amp;s + offsetof(S, list)&quot; must be a multiple of MEMORY_ALLOCATION_ALIGNMENT, but nothing unusual is imposed on &#39;s&#39; itself. (Of course, other members may have other alignment needs.)</p>
<p>But in practice this also means that &quot;&amp;s&quot; needs to be aligned to that boundary as well, and enough padding added (perhaps none) to get &#39;offsetof(S, list)&#39; out to be a multiple of MEMORY_ALLOCATION_ALIGNMENT as well. (Suppose MEMORY_ALLOCATION_ALIGNMENT is 16 and offsetof(S, list) is 8. To get &#39;s.list&#39; aligned on a 16-byte boundary, &#39;s&#39; would have to be aligned on an 8 byte boundary but NOT a 16 byte boundary. An alignment requirement like that is&#8230; strange, to say the least.)</p>
<p>(At least, this is my understanding. I&#39;m not sure I&#39;ve ever really had to deal with anything with unusual alignment characteristics.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1021123">
				<div id="div-comment-1021123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021123">
			November 15, 2012 at 9:36 am</a>		</div>

		<p>@Rodrigo &#8212; here is my quick approach:</p>
<p>struct EXTRASTUFF</p>
<p>{</p>
<p> &nbsp; &nbsp;DWORD Awesome1;</p>
<p> &nbsp; &nbsp;DWORD Awesome2;</p>
<p>};</p>
<p>static_assert(sizeof(EXTRASTUFF) &lt;= MEMORY_ALLOCATION_ALIGNMENT)</p>
<p>// error checking elided for expository purposes</p>
<p>void *operator new(size_t n)</p>
<p>{</p>
<p> &nbsp;EXTRASTUFF *extra = (EXTRASTUFF)malloc(MEMORY_ALLOCATION_ALIGNMENT + n);</p>
<p> &nbsp;extra-&gt;Awesome1 = get_awesome_1();</p>
<p> &nbsp;extra-&gt;Awesome2 = get_awesome_2();</p>
<p> &nbsp;return ((BYTE *)extra) + MEMORY_ALLOCATION_ALIGNMENT;</p>
<p>}</p>
<p>But there are probably better ones</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1021253">
				<div id="div-comment-1021253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021253">
			November 16, 2012 at 1:56 am</a>		</div>

		<p>@James,</p>
<p>In C, the largest alignment requirement of a struct member becomes the alignment requirement of the whole struct. In the order of declaration, all struct members are shifted by the compiler to the next offset that meet their individual alignment requirement.</p>
<p>For sizeof(double) == 8,</p>
<p>struct S {char a; double b; char c;};</p>
<p>becomes</p>
<p>struct S {char a; char <em>pad1</em>[7]; double b; char c; char <em>pad2</em>[7]; }</p>
<p>with a alignment requirement of 8 and a size of 24.</p>
<p>The size of a struct is always a multiple of the alignment requirement. This has the consequence that arrays in C don&#39; need to add space between array elements to get the elements aligned.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1021263">
				<div id="div-comment-1021263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021263">
			November 16, 2012 at 3:21 am</a>		</div>

		<p>Can someone explain to me why the 32-bit alignment is 8? You&#39;d expect it to be 4.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1021273">
				<div id="div-comment-1021273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021273">
			November 16, 2012 at 6:12 am</a>		</div>

		<p>Anonymous: &nbsp;Follow the link in Raymond&#39;s &quot;you&#39;re trying too hard&quot; comment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1021283">
				<div id="div-comment-1021283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021283">
			November 16, 2012 at 6:23 am</a>		</div>

		<p>sizeof(double) = 8. An allocator has to support structs containing all base types of the programming language. If the largest primitive type in C(++) requires 8, then the allocator must return memory aligned to 8.</p>
<p>But MEMORY_ALLOCATION_ALIGNMENT is defined in WinNT.h, not in the C header files. There may be machine instructions with strange alignment requirements, for example alignment to a physical page boundary, but is there something in 64-bit C++ itself which requires an alignment of 16? Does the C runtime really need to respect MEMORY_ALLOCATION_ALIGNMENT from WinNT.h?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1021333">
				<div id="div-comment-1021333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021333">
			November 16, 2012 at 7:52 am</a>		</div>

		<p>@AnonymousCoward:</p>
<p>For 32-bit, the memory alignment is 64-bit in order to give aligned read access to doubles, which improves the performance of SSE instructions (which require 8-byte alignment) and lockcmpxchg32 instructions.</p>
<p>For 64-bit, the memory alignment is 128-bit in order to give aligned read access to MMX instructions and lockcmpxchg64 instructions</p>
<p>These two requirements allow the compiler to assume best case performance when doing certain instructions such as MMX (which are used in lots of wierd places, like some optimised memsets and memcpys). Instead of testing whether to do the fast (aligned) instruction or the slow instruction with a test and jump (which in practice kills the performance benefit) &#8211; and in the lockxchgcmp instructions also loses you cross-processor atomicity, Microsoft simply states that such pointers must be aligned on 64-bit and 128-bit respectively.</p>
<p>In practice, since the paradigm of (FOO*)malloc(sizeof(FOO)) is so common, malloc needs to return a size that means that given a FOO, it is likely that the output pointer matches the alignment of FOO. As described above, this is either 64-bit or 128-bit alignment. If you need bigger alignment for weird reasons (CONTEXT_AMD64 is a good example; it needs 128-bit alignment even on WOW64), you just have to call _aligned_malloc() or carefully position your struction WITHIN the malloc&#39;ed region, instead of just at the front of it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1021423">
				<div id="div-comment-1021423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021423">
			November 16, 2012 at 1:19 pm</a>		</div>

		<p>(Nitpick: The EXTRASTUFF cast on the malloc result actually should be to EXTRASTUFF*.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1021433">
				<div id="div-comment-1021433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021433">
			November 17, 2012 at 2:16 am</a>		</div>

		<p>This wouldn&#39;t have been a problem if segment allocation code from DOS had been reused.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1021603">
				<div id="div-comment-1021603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121115-00/?p=6083#comment-1021603">
			November 20, 2012 at 5:36 am</a>		</div>

		<p>Is there any way to detect/crash on misaligned access as soon as it occurs, say in debug builds?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>