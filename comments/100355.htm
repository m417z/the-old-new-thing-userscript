<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-kbiel even thread-even depth-1" id="comment-1371915">
				<div id="div-comment-1371915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/KennyBiel' rel='external nofollow' class='url'>KennyBiel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371915">
			November 29, 2018 at 10:59 am</a>		</div>

		<p>The first example, besides having a spurious semicolon after the Select, does not do what you expect it to do. I believe you need this:<br />
.OrderBy(g =&gt; g.First().Time) // sort the groups by best time</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-valcis odd alt thread-odd thread-alt depth-1 parent" id="comment-1371925">
				<div id="div-comment-1371925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Vilx-' rel='external nofollow' class='url'>Vilx-</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371925">
			November 29, 2018 at 12:20 pm</a>		</div>

		<p>Seems like a delicate trick that could be easily missed by future maintainers of the code. I&#8217;d probably leave a comment there bringing their attention to this subtlety. Or write it in a more obvious way.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-kbiel even depth-2" id="comment-1371935">
				<div id="div-comment-1371935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/KennyBiel' rel='external nofollow' class='url'>KennyBiel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371935">
			November 29, 2018 at 12:57 pm</a>		</div>

		<p>I find that it&#8217;s the GroupBy returning IEnumerable&lt;IGrouping&gt; that is not obvious to people who do not use it much. Then you have the Select returning a IEnumerable&lt;IOrderEnumerable&gt;. I find the comments that Raymond has are sufficient though.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1371965">
				<div id="div-comment-1371965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371965">
			November 29, 2018 at 10:30 pm</a>		</div>

		(The content was deleted per user request)
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1 parent" id="comment-1371975">
				<div id="div-comment-1371975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371975">
			November 29, 2018 at 10:58 pm</a>		</div>

		<p>The second method works, but the first one throws exception when running:</p>
<p>System.ArgumentException: At least one object must implement IComparable.<br />
   at System.Collections.Comparer.Compare(Object a, Object b)<br />
   at System.Collections.Generic.ObjectComparer`1.Compare(T x, T y)<br />
   at System.Linq.EnumerableSorter`2.CompareKeys(Int32 index1, Int32 index2)<br />
   at System.Linq.EnumerableSorter`1.QuickSort(Int32[] map, Int32 left, Int32 right)<br />
   at System.Linq.EnumerableSorter`1.Sort(TElement[] elements, Int32 count)<br />
   at System.Linq.OrderedEnumerable`1.d__1.MoveNext()<br />
   at System.Linq.Enumerable.d__17`2.MoveNext()<br />
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1371985">
				<div id="div-comment-1371985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371985">
			November 29, 2018 at 11:03 pm</a>		</div>

		(The content was deleted per user request)
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even depth-2" id="comment-1371995">
				<div id="div-comment-1371995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371995">
			November 29, 2018 at 11:05 pm</a>		</div>

		<p>Have to change to the following to work: .OrderBy(g =&gt; g.First().Time)</p>
<p>Just like KennyBiel said. (Why there&#8217;s no edit comment button?)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tspeot-is odd alt thread-even depth-1" id="comment-1372595">
				<div id="div-comment-1372595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ta.speot.is' rel='external nofollow' class='url'>ta.speot.is</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1372595">
			December 4, 2018 at 11:41 pm</a>		</div>

		<p>&#8220;The GroupÂ­By method is documented as reporting the groups in the order of first appearance, so this ensures that the fastest group comes first.&#8221;</p>
<p>The documentation for LINQ&#8217;s Enumerable.GroupBy makes this guarantee, but not the documentation for LINQ&#8217;s Queryable.GroupBy. As far as I&#8217;m aware the common implementations of IQueryable (Entity Framework etc.) don&#8217;t apply any ordering as a result of Queryable.GroupBy. And they are not obliged to.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>