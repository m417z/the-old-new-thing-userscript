<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-859003">
				<div id="div-comment-859003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859003">
			September 3, 2010 at 8:15 am</a>		</div>

		<p>Or the registry. &nbsp;Or write a service.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859013">
				<div id="div-comment-859013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wizou</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859013">
			September 3, 2010 at 8:44 am</a>		</div>

		<p>Or maybe use DuplicateHandle to keep a reference to the object in your other processes?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-859023">
				<div id="div-comment-859023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas Rejbrand</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859023">
			September 3, 2010 at 8:57 am</a>		</div>

		<p>Isn&#39;t this at the very heart of a modern operating system, not to let a single process damage the system?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859033">
				<div id="div-comment-859033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gigi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859033">
			September 3, 2010 at 10:01 am</a>		</div>

		<p>Linux does persist various objects after a process exits, like memory maps or semaphores. This can be a major pain in the ass, since you need to make sure the object does not exist anymore when starting your process again if you want to start from a clean object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-859043">
				<div id="div-comment-859043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Asa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859043">
			September 3, 2010 at 10:42 am</a>		</div>

		<p>I know that in kernel mode, kernel objects can be either permanent or temporary. The decision for such is made at device creation time, but a permanent device can be made temporary to remove it. ZwMakeTemporaryObject ( <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ff566477(v=VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ff566477(v=VS.85).aspx</a> ) would be the kernel mode method of doing that.</p>
<p>To make it stick around though you have to set OBJ_PERMANENT when performing InitializeObjectAttributes. The flag is described as &quot;This flag only applies to objects that are named within the object manager. By default, such objects are deleted when all open handles to them are closed.&quot; ( <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ff547804(v=VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ff547804(v=VS.85).aspx</a> )</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859103">
				<div id="div-comment-859103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Archer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859103">
			September 4, 2010 at 6:59 am</a>		</div>

		<p>I am sorry but I was a little confused&#8230;Do you mean that a named kernel object would be deleted even the process who had created it exits without calling the CloseHandle? Thanks for an advanced explanation~</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-859113">
				<div id="div-comment-859113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Rose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859113">
			September 4, 2010 at 7:06 am</a>		</div>

		<p>In linux/unix typically named objects are treated like files in that they exist until deleted. &nbsp; Sometimes this is extremely handy, like when you want persistence but a file doesn&#39;t exactly fit the bill. &nbsp; The issue of having the objects pile up and having to restart the system is really no different than if a Windows app were to create billions of files and not delete them. &nbsp;In linux you can delete the named object just like you can delete a file.</p>
<p>The Windows and unix ways are simply different, and there are advantages and downsides to both. &nbsp;When writing a native application for either, I rarely have trouble. &nbsp; When trying to port an application that uses named objects from one to the other, it can be a pain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859123">
				<div id="div-comment-859123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859123">
			September 4, 2010 at 7:55 am</a>		</div>

		<p>A good OS should close handles to all objects when a process crash. Sloppy OS don&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-859133">
				<div id="div-comment-859133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859133">
			September 4, 2010 at 9:04 am</a>		</div>

		<p>@Archer:</p>
<p>Let me repeat that for you:</p>
<p>&quot;When the last handle to a named kernel object (such as a named semaphore or a named shared memory block) is closed, the object itself is destroyed. Doesn&#39;t matter whether you explicitly closed the handle by calling CloseHandle or the kernel closed the handle for you when it cleaned up the mess you left behind.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859143">
				<div id="div-comment-859143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859143">
			September 4, 2010 at 12:35 pm</a>		</div>

		<p>Not just closed, but also released (mutex). It wasn&#39;t so obvious to me at first.</p>
<div class="post">[<i>Um, if the object is destroyed, it doesn&#39;t have a released/not released state. (Or are you talking not about object destruction but merely handle closure at process termination? [I.e., are you changing the subject?] In which case the behavior you describe is a <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/09/12/463977.aspx" rel="nofollow">specific behavior for mutexes</a>, not a general property of kernel objects.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-859313">
				<div id="div-comment-859313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859313">
			September 6, 2010 at 9:23 pm</a>		</div>

		<p>Paul Rose: What objects in Linux are named but not files? I know there are named pipes, devices, and directories, but those aren&#39;t shared memory or semaphore. Perhaps you&#39;re talking about SYSV IPC primitives (shared memory, semaphores)? They stick around until explicitly deleted (or the system reboots), but they&#39;re not named.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859333">
				<div id="div-comment-859333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Rose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859333">
			September 7, 2010 at 6:59 am</a>		</div>

		<p>Gabe: we use shm_open with names in /dev/shm. &nbsp; We take advantage of the persistence to save time on process restarts, but we can always delete via rm if things go wrong. &nbsp;</p>
<p>On windows builds we use CreateFileMapping and do without the persistence.</p>
<p>The linux app typically restarts much faster, but once in a blue moon requires that we manually clean up. &nbsp; The winodws app restarts slower but is a little more bulletproof.</p>
<p>Again, no different than a file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-859393">
				<div id="div-comment-859393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859393">
			September 7, 2010 at 8:16 am</a>		</div>

		<p>Nitpick: your inline response to Gabest has the following mismatched parenthetical structure: {([])]</p>
<div class="post">[<i>I was hoping not to have to go back and re-edit for punctuation. I guess everything has to be perfect around here. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859533">
				<div id="div-comment-859533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MikeCaron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859533">
			September 7, 2010 at 2:18 pm</a>		</div>

		<p>[I was hoping not to have to go back and re-edit for punctuation. I guess everything has to be perfect around here. -Raymond]</p>
<p>You should have added #pragma nipick(disable:4699)</p>
<p>On topic, this is one of those blog entries that make me &#8212; involuntarily, mind you &#8212; go &quot;Duh!&quot; Outstanding handles are closed when the process dies, and objects are destroyed when there aren&#39;t any more handles. Any further explanation is just fluff.</p>
<p>(note, this is not a criticism of your writing, but a criticism of someone who is unable or unwilling to think things through to their logical conclusion)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>