<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1300385">
				<div id="div-comment-1300385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Fee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300385">
			June 22, 2017 at 8:19 am</a>		</div>

		<p>It&#8217;s good that it&#8217;s called out in the documentation, and I agree with you that this is a flaw in the implementation, but if the implementation isn&#8217;t going to be fixed, the documentation should be more explicit as to what that means and how to handle the error. It&#8217;s a bit opaque as it is. Maybe they should link to this blog post.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-scott-brickey odd alt thread-odd thread-alt depth-1 parent" id="comment-1300395">
				<div id="div-comment-1300395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Scott+Brickey' rel='external nofollow' class='url'>Scott Brickey</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300395">
			June 22, 2017 at 9:18 am</a>		</div>

		<p>in whose implementation? Win API or customer app?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle even depth-2 parent" id="comment-1300405">
				<div id="div-comment-1300405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300405">
			June 22, 2017 at 9:23 am</a>		</div>

		<p>From context, I would assume the Win32 API (which makes sense; if your underlying implementation has a race condition, you should try to handle it internally instead of forcing consumers to handle it unless there&#8217;s a strong reason to do so).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3" id="comment-1300415">
				<div id="div-comment-1300415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300415">
			June 22, 2017 at 9:39 am</a>		</div>

		<p>On the other hand, <a href="http://dreamsongs.com/WIB.html" rel="nofollow">Worse is Better</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3 parent" id="comment-1300426">
				<div id="div-comment-1300426" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300426">
			June 22, 2017 at 11:03 am</a>		</div>

		<p>Of course, Unix does this kind of thing too.  See EINTR: for just about every syscall other than sleep(2), select(2), pause(2), and their relatives, the Right Thing is almost always a silent retry.  In a mad anomaly, you can tell the implementation to retry some of these syscalls using SA_RESTART, but this must be done on every signal handler, and not at the call site.  So it&#8217;s broken in much the same way as the O_CLOEXEC flag (i.e. libraries may fail to set it and shoot your program in the foot).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1300596">
				<div id="div-comment-1300596" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300596">
			June 24, 2017 at 9:08 pm</a>		</div>

		<p>Turns out the right thing isn&#8217;t a silent retry. You need to check your sigXXX handler global variables before retry.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1300745">
				<div id="div-comment-1300745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300745">
			June 26, 2017 at 8:01 pm</a>		</div>

		<p>Eww, you use global variables?  Just open a pipe(2) and stick it in your select(2) call in the main event loop.  Then you write to the pipe when you handle a signal and process it like any other file descriptor event.  Look Ma, no reentrancy issues!</p>
<p>(Or you use sigprocmask(2)/pselect(2) to implement substantially the same pattern, but then the problem with EINTR does not arise.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1300867">
				<div id="div-comment-1300867" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300867">
			June 28, 2017 at 9:55 am</a>		</div>

		<p>@Kevin: I would prefer to use sigselect() myself but library authors often have to deal with code that does it the old way. :(</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1300435">
				<div id="div-comment-1300435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300435">
			June 22, 2017 at 12:09 pm</a>		</div>

		<p>There&#8217;s an inherent race condition in any API that returns a value. If you&#8217;ve got another thread modifying the thing behind your back then the results might be invalid by the time the API actually returns to user-space. You&#8217;d need some kind of transaction mechanism to get around that, which is a serious step up in complexity.</p>
<p>If you cannot protect yourself against the inherent race (because you don&#8217;t actually control the other threads) then being able to protect yourself from the more obvious ERROR_INSUFFICIENT_BUFFER is just a false sense of security. Conversely, if you can protect yourself against the inherent race (by coming to some synchronisation agreement with the other threads) then you won&#8217;t get the buffer error either.</p>
<p>On balance, then, I think I&#8217;m with whoever wrote the existing implementation.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1300535">
				<div id="div-comment-1300535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300535">
			June 23, 2017 at 10:08 am</a>		</div>

		<p>A race condition is one thing; getting an Error_Insufficient_Buffer is a totally different thing.</p>
<p>Yes, when you check (for example) if a file exists, and then you do something like read that file, it certainly could have been deleted after you checked but before you tried to read it.  Also, the computer could crash after you check one thing and before you do something else.</p>
<p>This does not mean that nothing is worth doing.  But a better implementation might avoid the buffer error being returned to the caller, who can&#8217;t do anything about it (except retry).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1300545">
				<div id="div-comment-1300545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300545">
			June 23, 2017 at 10:15 am</a>		</div>

		<p>Getting stale information from an API is not what I consider to be the issue here.  The issue is that the API returns an &#8220;insufficient buffer&#8221; unpredictably, and expects the calling code to handle it (as though userland code can do anything to fix an API&#8217;s internal buffers!).  I&#8217;d rather see the API handle this error internally; that is, if the buffer is insufficient, then increase the buffer size and re-query the DACL.  Repeat until a result can be sent back to the calling code.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alexcohn odd alt depth-3 parent" id="comment-1300655">
				<div id="div-comment-1300655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300655">
			June 25, 2017 at 9:04 pm</a>		</div>

		<p>This won&#8217;t be a good decision. The (implicit) contract is that the API returns immediately. Well, immediate does not mean 3 CPU cycles, but still, I would have a problem with an API that randomly takes x10 longer, without &#8220;a pattern to the failure&#8221;.</p>
<p>The documentation is &#8220;almost there&#8221;. At least, it should have explicitly mentioned ERROR_INSUFFICIENT_BUFFER as what could happen under the race condition. In a better world, the API could return a more relevant error code.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1300676">
				<div id="div-comment-1300676" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300676">
			June 26, 2017 at 8:02 am</a>		</div>

		<p>This was my first reaction.  You don&#8217;t want your low-level APIs randomly taking a much longer time.  But I changed my mind for two reasons.</p>
<p>First, this isn&#8217;t the low-level API.  It&#8217;s a wrapper around GetKernelObjectSecurity, GetUserObjectSecurity, GetFileSecurity, etc.</p>
<p>Second, calling GetSecurityInfo in a loop when it returns ERROR_INSUFFICIENT_BUFFER may never terminate.  If the security descriptor is rapidly changing then the call to GetSecurityInfo may always coincide with an increase in size in the security descriptor.  Sure, this is unlikely, but security holes are made of unlikelihoods.  In other words, retrying inside the API is the only way to make it reliable.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alexcohn odd alt depth-5" id="comment-1300705">
				<div id="div-comment-1300705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300705">
			June 26, 2017 at 10:57 am</a>		</div>

		<p>But the system API will by unlucky chance get locked forever, unless it makes something sophisticated as locking the security descriptor. Which may have its nasty side-effects, too. If your program cannot control a race condition between two threads, where one perpetually changes security info, and the other perpetually tries to read it &#8211; maybe you should return to the drawing board and redesign your app. But in conventional situations I would prefer to deal once in a while with the need to retry <b>GetSecurityInfo()</b> rather than take care of never calling this function on UI thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1300725">
				<div id="div-comment-1300725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300725">
			June 26, 2017 at 1:43 pm</a>		</div>

		<p>&#8220;But the system API will by unlucky chance get locked forever&#8221;</p>
<p>The problem isn&#8217;t locking, it is the security descriptor increasing in size.  This wouldn&#8217;t be a problem for the proposed design because the size of the buffer it allocates would get larger after each failure and the size of a security descriptor is bounded.</p>
<p>The current design has no memory of its previous failures so it can fail in the same way endlessly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt depth-5" id="comment-1300785">
				<div id="div-comment-1300785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300785">
			June 27, 2017 at 1:20 pm</a>		</div>

		<p>Here is an easy scenario where the API will never return: imagine thread A that switches security object between 128 bytes and 256 bytes. In thread B, GetSecurityInfo function reads the size, allocates 128 bytes, tries to read 256 bytes, fails, checks the size again, and finds 128 bytes again.</p>
<p>If the API could lock the object, the vicious loop would be stopped, but we don&#8217;t want GetSecurityInfo to be intrusive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1300805">
				<div id="div-comment-1300805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300805">
			June 27, 2017 at 4:58 pm</a>		</div>

		<p>Yes, this is exactly the point.  GetSecurityInfo has this problem.  It is a fundamental flaw in its design.</p>
<p>But it wouldn&#8217;t have this problem if it looped internally.  It would call GetKernelObjectSecurity as it does now.  GetKernelObjectSecurity would fail because the security descriptor had increased in size from 128 to 256 but, crucially, GetKernelObjectSecurity would also return the new required buffer size of 256.  So the next call would succeed.  (Or the security descriptor size might have increased again but, as I said before, this must terminate eventually because is it bounded.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt depth-5" id="comment-1300885">
				<div id="div-comment-1300885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170622-00/?p=96445#comment-1300885">
			June 28, 2017 at 2:31 pm</a>		</div>

		<p>Thanks, now I got your point.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>