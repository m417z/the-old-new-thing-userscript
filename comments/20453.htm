<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-677683">
				<div id="div-comment-677683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081027-00/?p=20453#comment-677683">
			October 27, 2008 at 7:26 pm</a>		</div>

		<p>Yep, one of the problems is that a process termination can happen at any instruction, so you&#8217;d have to disassemble the code to see the exact combination of states that the structure can get into. That is why atomic instructions are so important.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-677723">
				<div id="div-comment-677723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">strik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081027-00/?p=20453#comment-677723">
			October 28, 2008 at 8:29 am</a>		</div>

		<p>You could also use some transactional system like the following ad-hoc solution:</p>
<ol>
<li>Get the mutex</li>
<li>
<p>If WAIT_ABANDONED, check for any &quot;left over&quot; data structure and repair it</p>
</li>
<li>
<p>Before doing any changes, just record what you want to do. You have to record the state before, or the state afterwards. When this record has been written successfully, mark it as complete (setting one bit might suffice, or putting a pointer into it into the data structure).</p>
</li>
<li>
<p>Now, perform your changes.</p>
</li>
<li>
<p>release the mutex.</p>
</li>
</ol>
<p>If you get WAIT_ABANDONED, you know that another user has just crashed. Thus, in step 2, you can either recreate what was there (if the stored state is the state before), or perform the changes &quot;the other one&quot; wanted to perform (if the stored state is what should have been changed). After performing it, mark the information as &quot;incomplete&quot; before proceeding with step 3.</p>
<p>Note, however, that this is an ad-hoc solution; there might still be some race I did not think about yet. Note also that you have to make sure that the compiler does not interfere by its optimisations or changes to the order of executed operations.</p>
<p>Note also that undoing the anticipated changes might be easier than completing them.</p>
<p>This is one solution of the form Raymond named as &quot;transactional&quot; above.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>