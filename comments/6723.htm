<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1008243">
				<div id="div-comment-1008243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008243">
			August 30, 2012 at 8:06 am</a>		</div>

		<p>Could be worse. At least one compiler would result in calling NULL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1008253">
				<div id="div-comment-1008253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008253">
			August 30, 2012 at 8:29 am</a>		</div>

		<p>Actually Joshua, I would consider that better. &nbsp;A guaranteed crash right at the point of the problem is always better than undefined behavior that might seem to work sometimes. &nbsp;Actually that would be a good suggestion for the MSVC compiler if it doesn&#39;t already do that for debug builds.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1008263">
				<div id="div-comment-1008263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008263">
			August 30, 2012 at 8:38 am</a>		</div>

		<p>Probably a stupid question (I&#39;m not a C++ expert) &nbsp;but how does an object get destructed when something still has a live reference to it. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1008273">
				<div id="div-comment-1008273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008273">
			August 30, 2012 at 8:56 am</a>		</div>

		<p>@Joshua, @SimonRev: How would you expect a compiler to achieve that? &nbsp;Zero out every object&#39;s memory after destruction? &nbsp;That would be a huge performance hit, something you&#39;d only want to do in a debug build.</p>
<p>@Mc: Dangling references:</p>
<p>MyObject *obj = new MyObject;</p>
<p>delete obj;</p>
<p>FunctionWhichAllocatesSomeObjectsAndWritesRandomBytesIntoTheMemoryFormerlyKnownAsObj();</p>
<p>obj-&gt;BaseClassPureVirtual(); &nbsp;// BOOM!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1008283">
				<div id="div-comment-1008283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">j b</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008283">
			August 30, 2012 at 9:26 am</a>		</div>

		<p>@Mc:</p>
<p>Since you state yourself that you are not a C++ expert, will you allow me to guess that your are more familiar with languages with automatic garbage collection, like C# and Java?</p>
<p>In C/C++ you must yourself explicitly release the memory you have allocated. There is nothing to prevent you from releasing an object to which there are still live references to it. If you do, that is your problem&#8230; (yafiygi)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1008293">
				<div id="div-comment-1008293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008293">
			August 30, 2012 at 9:34 am</a>		</div>

		<p>@Adam: &nbsp;Exactly, but not quite that extensive. &nbsp;The compiler is already messing with the vtable pointer during destruction. &nbsp;Just have it null out that pointer when destruction is complete. &nbsp;Obviously not something you want in a release build due to performance ramifications (and I am not sure whether it would be permitted by a strictly standard compliant compiler). &nbsp;But in a debug build, the cost to null out a pointer is minimal and the benefit to catching such errors may be worth it.</p>
<p>@Mc &#8212; C++&#39;s single biggest benefit over something like C# (IMO) is deterministic destruction of objects. &nbsp;But it does leave you vulnerable to using already destroyed objects if you ever save a reference or pointer to one. &nbsp;Adam&#39;s example is a bit obvious. &nbsp;Here is a more subtle one, especially if you have a C# background.</p>
<p>BaseClass &amp; GetABaseClass() {</p>
<p>&nbsp; &nbsp;DerivedClass retVal;</p>
<p>&nbsp; &nbsp;return retVal;</p>
<p>}</p>
<p>void DoSomething() {</p>
<p>&nbsp; &nbsp;BaseClass &amp;someObj = GetABaseClass();</p>
<p>&nbsp; &nbsp;someObj.VirtualMethod();</p>
<p>}</p>
<p>This code has undefined behavior, because retVal is destroyed at the point of return from GetABaseClass. &nbsp;However, a reference lives on and gets used. &nbsp;In this case, there is a very good chance that the memory pattern occupied by retVal is still intact and calling VirtualMethod would result in a __purecall violation. &nbsp;However if the method were virtual but not pure virtual, then the method call might seem to succeed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1008303">
				<div id="div-comment-1008303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008303">
			August 30, 2012 at 10:45 am</a>		</div>

		<p>@SimonRev: It filled NULLs into the vtable, so any means of calling a pure virtual function (say indirectly from base class constructor&#8211;direct call would be caught by compiler) would call NULL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1008313">
				<div id="div-comment-1008313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MarcT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008313">
			August 30, 2012 at 11:04 am</a>		</div>

		<p>Probability this will come in handy at least once in a 40-year career: 80%</p>
<p>Probability I will remember this solution: 3%</p>
<p>Probability I will vaguely remember Raymond said something interesting about it sometime: 15%</p>
<p>Probability I would install a &quot;Raymondizer&quot; extension to VS that pops up during obscure errors (such as __purecall) and points to relevant Raymond Chen blog posts: 100%</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1008323">
				<div id="div-comment-1008323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008323">
			August 30, 2012 at 11:52 am</a>		</div>

		<p>@j b</p>
<p>Even in Java or C# this still will happen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1008333">
				<div id="div-comment-1008333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008333">
			August 30, 2012 at 12:09 pm</a>		</div>

		<p>Danny: Are you suggesting that in Java or C# you could reference an object that has already been garbage-collected?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1008343">
				<div id="div-comment-1008343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008343">
			August 30, 2012 at 2:01 pm</a>		</div>

		<p>@Joshua &#8212; while I believe it could NULL out the vtable pointer for an object instance, I cannot believe it would fill the vtable itself with NULLs. &nbsp;If it did that, then any live instances of the object would instantly die as all instances of the type share the same vtable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1008353">
				<div id="div-comment-1008353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008353">
			August 30, 2012 at 2:55 pm</a>		</div>

		<p>Note that in debug builds the runtime already overwrites freed dynamic memory with <code>0xdd</code> bytes (which is even better than setting the memory to zero). I don&#39;t think the compiler does anything similar for automatic objects that go out of scope (though newer ones can fill uninitialized locals with <code>0xcc</code>) . &nbsp;There might be value in that, but it&#39;s unclear to me how much bang for buck you&#39;d get.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1008363">
				<div id="div-comment-1008363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jolyon.smith_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jolyon.smith@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008363">
			August 30, 2012 at 6:03 pm</a>		</div>

		<p>Using a replacement memory manager in Delphi (FastMM) we can compile with flags set that &#8211; among other useful things &#8211; cause the memory manager to write a specific bit pattern over any unallocated memory, including in destructed objects. &nbsp;At runtime this will then result in errors such as &quot;Attempt to call method on a destroyed object)&quot;, along with a stack trace of the attempted call and a stack trace of the destruction of the object.</p>
<p>If you inspect such an object (memory reference) using a bad reference in the debugger, it&#39;s classname is reported as a &quot;TFreedObject&quot;.</p>
<p>So finding such errors during development is made much easier (not bullet proof, as it is still possible that such deallocated memory might be re-allocated before the bad reference is used).</p>
<p>Neat huh ? &nbsp;:)</p>
<p>Well, we can do this as long as Embarcadero don&#39;t rewrite the EULA to stop us. &nbsp;:D</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1008383">
				<div id="div-comment-1008383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008383">
			August 30, 2012 at 10:29 pm</a>		</div>

		<p>@Gabe: well you can access an object that has been &#39;disposed&#39;. But I believe this is the step just before it gets collected, so technically it&#39;s not collected yet.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1008403">
				<div id="div-comment-1008403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008403">
			August 31, 2012 at 1:03 am</a>		</div>

		<p>@Gabe</p>
<p>Yes, that&#39;s exactly what I am saying. Mind you, we talk about object reference here, not object access!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1008413">
				<div id="div-comment-1008413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ooh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008413">
			August 31, 2012 at 4:36 am</a>		</div>

		<p>@Gabe, Drak: Beyond disposed objects (which still have references to them and thus don&#39;t qualify for garbage collection) something called object resurrection can happen.</p>
<p>Situation: You have a finalizable object, i.e. the object&#39;s type declares a finalizer. When the object isn&#39;t referenced any more, the garbage collector runs the finalizer. In the finalizer code, a new reference to the object is added. Then the object survives garbage collection; it resurrects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1008663">
				<div id="div-comment-1008663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008663">
			August 31, 2012 at 11:54 am</a>		</div>

		<p>Danny: I don&#39;t know what you mean. If I have a reference to an object, I can access it. The GC only collects objects that have no references, so there&#39;s no way to have a reference to a GCed object.</p>
<p>Ooh alludes to a way to have a reference to an object that has had its finalizer called, but such an object would still not have been GCed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1008723">
				<div id="div-comment-1008723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008723">
			August 31, 2012 at 5:41 pm</a>		</div>

		<p>I remeber hitting this some time ago with a &quot;role your own&quot; smartpointer implementation that would do an implicit upcast resulting in the destruction of the underlying object (which is why boost et al prevent this). The annoying thing about the pure virtual function call exception is that it throws up a dialog box! Instead of crashing, as would be the sane thing to do, and providing a nice call stack, you get a dialog that stops the program waiting for user input! What is the user going to do? Attach a debugger? (yes I am aware that it is possible to add your own handler to avoid this issue. Now I am). In this specific situation it was made worse because the program would continue to drive itself via the window message pump! We had just crashed, but kept right on going! We got a report from a customer saying &quot;why do we get this strange dialog?, if I ignore it every keeps on working.&quot; To decide to throw a dialog for a pure virtual function call was an insane idea; time to grab the torches and pitchforks people! </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1008733">
				<div id="div-comment-1008733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008733">
			August 31, 2012 at 7:37 pm</a>		</div>

		<p>Ben: If your program just kept on working, it didn&#39;t really crash now, did it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1008783">
				<div id="div-comment-1008783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">fdiv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008783">
			September 1, 2012 at 12:22 pm</a>		</div>

		<p>@Gabe: Many times it can be hard to determine if the program, or a complex system in general, is buggy. That&#39;s why the Pentium fdiv bug wasn&#39;t discovered immediately, it was only a fractional bug.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1008813">
				<div id="div-comment-1008813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120830-00/?p=6723#comment-1008813">
			September 2, 2012 at 6:07 am</a>		</div>

		<p>fdiv: What Ben was describing was more of a fender-bender than a crash. While I understand that a car crash necessarily means that I may not make it to my destination, I&#39;m glad that every fender-bender or check-engine light doesn&#39;t delay my trip any more than absolutely necessary.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>