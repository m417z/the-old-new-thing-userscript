<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-522223">
				<div id="div-comment-522223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522223">
			July 5, 2007 at 11:18 am</a>		</div>

		<p>I know you don&#8217;t own the article you linked, but it suggests using SetThreadAffinityMask, which is terrible, unless that thread is only used to gather timing information. If it&#8217;s a thread that does grunt work (&quot;Typically, this is the main game thread&quot;), you just have made an application that won&#8217;t scale with multiple CPUs&#8230; even if it&#8217;s launched several times. If every application did that, they all would run in just one core.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-522243">
				<div id="div-comment-522243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522243">
			July 5, 2007 at 11:30 am</a>		</div>

		<p>At the risk of pointing out the obvious&#8230;</p>
<p>A GUID isn&#8217;t big. &nbsp;It&#8217;s only 128 bits; there&#8217;s only a 50% space savings using a 64-bit unique identifier over a GUID.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-522263">
				<div id="div-comment-522263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reinder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522263">
			July 5, 2007 at 12:40 pm</a>		</div>

		<p>I would avoid &quot;just generate a bunch of bits and hope they are unique&quot; schemes such as GUID-based ones. Even with 128 bits, &quot;once in a billion is next Tuesday&quot; if you really have to generate lots of keys.</p>
<p>InterlockedIncrement64 gives stronger guarantees about the uniqueness of the numbers it generates (you only get a duplicate once every 10^18 or thereabouts keys), and because it is easy to detect that it has generate a duplicate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-522293">
				<div id="div-comment-522293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://gregbeech.com/blogs/tech' rel='external nofollow' class='url'>Greg Beech</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522293">
			July 5, 2007 at 1:14 pm</a>		</div>

		<p>Reinder &#8211; GUID generation is hardly &quot;generate and hope&quot;, it&#8217;s based on a pretty sophisticated algorithm.</p>
<p>And with 3.40282367 &#215; 10^38 possible values, no matter how many you generate, that&#8217;s hardly next tuesday. Even if you generate a billion a second, it would still take over a thousand trillion trillion years before it was likely to generate a duplicate value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-522303">
				<div id="div-comment-522303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522303">
			July 5, 2007 at 1:54 pm</a>		</div>

		<p>Reinder: depends on your calendar, I guess, when next Tuesday is.</p>
<p>From RFC4122:</p>
<p>&quot;Since a UUID is a fixed size and contains a time field, it is possible for values to rollover (around A.D. 3400, depending on the specific algorithm used).&quot;</p>
<p>Not very often you&#8217;ll get to enjoy birthdays with that calendar :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-522313">
				<div id="div-comment-522313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">=</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522313">
			July 5, 2007 at 2:06 pm</a>		</div>

		<p>So, it&#8217;s IMPOSSIBLE, completely without doubt, to have two idential GUIDs generated? Is there a mathematical algorithm which suggests this? What algorithm is used when I use the Create GUID tool?</p>
<p>Excluding accidents: GUIDs have always confounded me since who&#8217;s to stop someone from &lt;i&gt;intentionally&lt;/i&gt; generating an identical GUID with the expressed purpose of causing trouble?</p>
<div class=post>[<i>Since a GUID includes a timestamp, you need to wait for clock rollover to get a duplicate. Of course, nothing will stop somebody from intentionally generating duplicates, but the consequences depend on what the GUID is used for. It&#8217;s like saying &#8220;What&#8217;s to stop somebody from intentionally generating an identical random number?&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-522323">
				<div id="div-comment-522323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">niklas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522323">
			July 5, 2007 at 2:06 pm</a>		</div>

		<p>Before anyone begin screaming &quot;birthday paradox&quot;, let me do a preemptive dismissal of their concerns.</p>
<p>The probality of generating a collision when drawing n numbers out of k is (1-n/k)^n which is approximately (1-n^2/k), all the vanishingly small later terms are dropped. If k is 2^128, n needs to come close to 2^64 to make a collision likely. so if you generate less than 2^61 numbers or so, you should worry more about winning on the lottery than generating a collision.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-522353">
				<div id="div-comment-522353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">niklas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522353">
			July 5, 2007 at 2:12 pm</a>		</div>

		<p>Though it is always of course a good idea to not have your app crash and burn if it found a pair of identical GUIDs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-522363">
				<div id="div-comment-522363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522363">
			July 5, 2007 at 2:22 pm</a>		</div>

		<p>The really nice thing about GUIDs is that you don&#8217;t have to worry about which machine/process/whatever is responsible for generating the unique value.</p>
<p>The only thing I don&#8217;t like about GUIDs is that they hurt my eyes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-522423">
				<div id="div-comment-522423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522423">
			July 5, 2007 at 4:46 pm</a>		</div>

		<p>&gt; Since a GUID includes a timestamp, you need to wait for clock rollover to get a duplicate.</p>
<p>There&#8217;s two problems here.</p>
<p>1) See RFC4211 4.1.4 &#8211; UUIDs don&#8217;t include timestamps in later versions. &nbsp;This is a good thing.</p>
<p>2) The granularity is only a tenth of a microsecond&#8230; so GUIDs generated in the same tenth of a microsecond would have the same timestamp. &nbsp;GUIDs generated using a low-res system clock would be vulnerable to the resolution of the clock.</p>
<div class=post>[<i>That&#8217;s what 4.1.5 is for. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-522463">
				<div id="div-comment-522463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522463">
			July 5, 2007 at 5:10 pm</a>		</div>

		<p>s/tenth of a second/tenth of a microsecond/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-522473">
				<div id="div-comment-522473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mirobin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522473">
			July 5, 2007 at 5:21 pm</a>		</div>

		<p>The clock sequence is only a portion of the GUID (60bits); it is not required to be unique per generation, just reasonably unique for a single source generating a GUID. &nbsp;In other words, it is designed to reduce the chances of a collision, not eliminate it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-522483">
				<div id="div-comment-522483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522483">
			July 5, 2007 at 6:33 pm</a>		</div>

		<p>There is no bug in RFC 4122 4.1.5</p>
<p>The RFC specifies an algorithm that can generate up to 10 million UUIDs per second.</p>
<p>The RFC suggests a few ways to prevent generating duplicate UUIDs if multiple requests are made within the same timestamp interval, right down to requiring the generator to issue an error or stall if no other option exists:</p>
<p>4.2.1.2. &nbsp;System Clock Resolution</p>
<p>&nbsp; The timestamp is generated from the system time, whose resolution may</p>
<p>&nbsp; be less than the resolution of the UUID timestamp.</p>
<p>&nbsp; If UUIDs do not need to be frequently generated, the timestamp can</p>
<p>&nbsp; simply be the system time multiplied by the number of 100-nanosecond</p>
<p>&nbsp; intervals per system time interval.</p>
<p>&nbsp; If a system overruns the generator by requesting too many UUIDs</p>
<p>&nbsp; within a single system time interval, the UUID service MUST either</p>
<p>&nbsp; return an error, or stall the UUID generator until the system clock</p>
<p>&nbsp; catches up.</p>
<p>&nbsp; A high resolution timestamp can be simulated by keeping a count of</p>
<p>&nbsp; the number of UUIDs that have been generated with the same value of</p>
<p>&nbsp; the system time, and using it to construct the low order bits of the</p>
<p>&nbsp; timestamp. &nbsp;The count will range between zero and the number of</p>
<p>&nbsp; 100-nanosecond intervals per system time interval.</p>
<p>&nbsp; Note: If the processors overrun the UUID generation frequently,</p>
<p>&nbsp; additional node identifiers can be allocated to the system, which</p>
<p>&nbsp; will permit higher speed allocation by making multiple UUIDs</p>
<p>&nbsp; potentially available for each time stamp value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-522283">
				<div id="div-comment-522283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mr. Black</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522283">
			July 5, 2007 at 1:13 pm</a>		</div>

		<p>Riiight &#8230;.</p>
<p>2^128 = 10^35.5</p>
<p>1000000 * 60 * 60 * 24 * 365.25 * 1000000 = 10^19.5</p>
<p>In other words, if you generated a GUID every microsecond for one million years, you would still have used one thousand-trillionth of the available keys.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-522503">
				<div id="div-comment-522503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nix</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522503">
			July 5, 2007 at 11:05 pm</a>		</div>

		<p>public static long GenerateUniqueId()</p>
<p>{</p>
<p> &nbsp; &nbsp;System.Int64 id1 = 0, id2 = 0;</p>
<p> &nbsp; &nbsp;QueryPerformanceCounter(ref id1);</p>
<p> &nbsp; &nbsp;do {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;QueryPerformanceCounter(ref id2);</p>
<p> &nbsp; &nbsp;} while(id2 == id1); </p>
<p> &nbsp; &nbsp;return id2;</p>
<p>}</p>
<div class="post">[<i>Works great until you create a second thread. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-522453">
				<div id="div-comment-522453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522453">
			July 5, 2007 at 5:08 pm</a>		</div>

		<p>&gt; RFC 4211</p>
<p>s/4211/4122/ &#8211; sorry.</p>
<p>I see that 4.1.5 will solve the problem across generators.</p>
<p>But GUIDs generated in the same tenth of a second *by the same generator* are still going to have the same timestamp&#8230; and as I read the RFC, they&#8217;ll still have the same clock sequence. &nbsp;So 4.1.5 doesn&#8217;t solve the problem.</p>
<p>(I consider this a bug in the RFC&#8230; the sentence &#8220;the UUID generator can not be sure that no UUIDs were generated with timestamps larger than the value to which the clock was set,&#8221; should probably read &#8220;the UUID generator can not be sure that no UUIDs were generated with timestamps *equal to or* larger than the value to which the clock was set,&#8221;)</p>
<p>But anyway, guidgen uses v4*, which has no timestamp at all (or node identifier either) and is the closest of all the UUID schemes to a random number.</p>
<p>* not necessarily conclusive proof that v4 is better than v1</p>
<div class=post>[<i>Yeah, should be &#8220;equal to or larger than&#8221;. It seems clear that the intent was to use the clock to protect against time standing still as well as time going backwards. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-522513">
				<div id="div-comment-522513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.virtualdub.org/' rel='external nofollow' class='url'>Phaeron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522513">
			July 6, 2007 at 1:52 am</a>		</div>

		<p>There are some dual core systems that have unsynchronized clocks such that QueryPerformanceCounter() returns inconsistent counter values, making it more likely that an identical value can be seen by a thread calling QPC() as the kernel scheduler moves the thread to different cores. It&#8217;s even possible for the time value to go backwards.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-522523">
				<div id="div-comment-522523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522523">
			July 6, 2007 at 2:02 am</a>		</div>

		<p>Is the internal GUID generator used in VB.Net succeptible to doubles if many are generated? Asking because a quick Google turned up no usable results, just a bunch of pages where people made their own GUID generators in VB&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-522533">
				<div id="div-comment-522533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522533">
			July 6, 2007 at 3:39 am</a>		</div>

		<p>Recent motherboards also have HPET support (<a rel="nofollow" target="_new" href="http://www.intel.com/hardwaredesign/hpetspec_1.pdf" rel="nofollow">http://www.intel.com/hardwaredesign/hpetspec_1.pdf</a>) that have a minimum frequency of 10MHz (100ns &#8211; coincidentally the same as the resolution of a FILETIME), and is allowed to implement up to 10^15Hz (that&#8217;s 1000 <em>tera</em> Hz, I think it&#8217;ll suffice for a while :-) ).</p>
<p>Doesn&#8217;t recent MS HAL&#8217;s use the HPET functionality (for QueryPerformance*) if it&#8217;s available?</p>
<p>Not that it&#8217;s any good for a unique identifier, that indeed should be handled by InterlockedInc, just thought I&#8217;d mention it as timers were mentioned.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mihailik odd alt thread-odd thread-alt depth-1" id="comment-522543">
				<div id="div-comment-522543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mihailik' rel='external nofollow' class='url'>Mihailik</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522543">
			July 6, 2007 at 4:19 am</a>		</div>

		<p>Don&#8217;t be too smart :-)</p>
<p>Good old ++ operator beats performance counters in virtually any field.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-522563">
				<div id="div-comment-522563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Bassett</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522563">
			July 6, 2007 at 6:07 am</a>		</div>

		<p>What about values that have to be reasonably unique (within a set time period) but non sequential? I.e. they must not enable the user to guess another id based on the one they have been assigned.</p>
<p>Like the Session ID in asp.net.</p>
<p>Currently I use the .net RNGCryptoServiceProvider class to generate unique 32 bit ids that give no information about other ids in use in the system. Each id is typically in use for less than 30 minutes so I feel this is a valid solution.</p>
<p>I&#8217;d be interested in what you think.</p>
<p>Pete</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-522583">
				<div id="div-comment-522583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ac</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522583">
			July 6, 2007 at 8:06 am</a>		</div>

		<p>After listening to the SecrityNow podcast it seems like TPM is the perfect solution</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-522703">
				<div id="div-comment-522703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522703">
			July 6, 2007 at 1:43 pm</a>		</div>

		<p>As for GUID&#8217;s, it should be noted that they are neither Globally Unique (impossible) nor fully generated ID&#8217;s. IIRC &quot;Mario&quot; is a hand-hacked &quot;GUID&quot; identifier part.</p>
<p>Also, using GUID&#8217;s for interfaces can not be trusted. MS themselves have changed interfaces having the same GUID from OS to OS (proof provided upon request).</p>
<p>I think the CORBA people were one to something, and seemingly MS thikgs so to due to the use of the &quot;lookup by name instead of GUID&quot;&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-522573">
				<div id="div-comment-522573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522573">
			July 6, 2007 at 6:50 am</a>		</div>

		<p>Oleg, operator++ for POD types is not atomic. For a single-threaded environment it indeed is superior in performance, but for multi-threaded scenarios you need an atomic operation &#8211; where InterlockedInc happens to be the fastest (if inlined).</p>
<p>As for Peter Bassett&#8217;s question, that is indeed an interesting question &#8211; one that cryptographers and mathematicians spent considerable time researching. For a likely really, really good implementation I&#8217;d suggest having a look at OpenBSD&#8217;s network stack. I don&#8217;t dubt Vista is also way better than older Windows versions, but last I checked the source code wasn&#8217;t available. ;-)</p>
<p>Basically, what is wanted is a PRGN that doesn&#8217;t repeat itself too often (preferrably &quot;never&quot;), and can&#8217;t be reproduced without knowing the initial state. For something that must be unique for at least 30 minutes, I&#8217;d probably consider also &quot;salting&quot; with at least a millisecond timer, preferrably faster, modulo timer speed vs. value lifetime could suffice. (in terms of 30 minutes vs. QueryPerf*, I&#8217;d consider &quot;salt = perf_count % (perf_freq * 1800)&quot;). But how to actually calculate your &quot;unique&quot; PRNG ID&#8230; That&#8217;s an excerise I leave to you. :-)</p>
<p>I&#8217;d expect that RNGCryptoServiceProvider to be at least decent. Not super-good cryptography stuff, but &quot;good enough&quot; (at least much, much better than MS&#8217;s C runtime lib&#8217;s rand() function, that even today only gives 15 bits of &quot;randomness&quot;, and a child with VB could reproduce the sequences :-) ).</p>
<p>Wortless knowledge:</p>
<p>With 2^32 possible values with required unique lifetime of 30 minutes, one could hand out over 2.386.092 unique ID&#8217;s every second before a collision occured.</p>
<p>A gigabit (using 10^9 bits/s here, maybe it&#8217;s in reality is 2^30?) NIC could theoretically produce 31.250.000 such 32-bit keys/s, exhausting the keyspace in around 137 seconds.</p>
<p>A 2GHz CPU making a loop of inc+jmp every clock cycle would wrap around after roughly two seconds.</p>
<p>Writing the numbers on paper would give you &quot;COBOL fingers&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-522623">
				<div id="div-comment-522623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve Nuchia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522623">
			July 6, 2007 at 11:11 am</a>		</div>

		<p>It took me quite a while to get past the suspicion that GUID weren&#8217;t really globally unique. &nbsp;The timestamp part of the algorithm gets all the attention; it&#8217;s actually pretty good but only ensures *local* uniqueness.</p>
<p>The job of making them globally unique is subcontracted out to the IEEE. &nbsp;48 of the 128 bits are taken from the MAC address of one of your network interfaces. &nbsp;How it chooses which interface is not specified.</p>
<p>So, if all of your network interfaces are using their IEEE-derived globally unique hardware addresses the GUIDs you generate are guaranteed not to duplicate any GUIDs generated anywhere / anywhen else *by any conforming generator*. &nbsp;If you do not have any NICs or some of them are using software-assigned MAC addresses you&#8217;re playing roulette.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-522963">
				<div id="div-comment-522963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522963">
			July 8, 2007 at 4:54 pm</a>		</div>

		<p>GUIDs also have their own scope, even if there are two identical in the world there is very little chance of being used for the same thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-522983">
				<div id="div-comment-522983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-522983">
			July 8, 2007 at 9:35 pm</a>		</div>

		<p>&quot;One in a million chances happen nine times out of ten&quot; &#8212; Terry Pratchett.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-523693">
				<div id="div-comment-523693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-523693">
			July 10, 2007 at 2:07 pm</a>		</div>

		<p>The benefit of a GUID over an incrementor is that two different generators can be run at the same time without having to sync up.</p>
<p>The birthday paradox is always a concern with random generators, but 128 bits is probably enough randomness to serve us well.</p>
<p>To illustrate the birthday paradox:</p>
<blockquote><p>
  With 2^32 possible values with required unique lifetime of 30 minutes, one could hand out over 2.386.092 unique ID&#8217;s every second before a collision occured.
</p></blockquote>
<p>This is true for an incrementor, which can use all the values. &nbsp;But for a random generator, this is false&#8230; there&#8217;s a square-root law in effect if you throw darts at your state space instead of methodically combing it. &nbsp;So you could probably only get away with about 1400 unique IDs a second using 32-bit random numbers.</p>
<p>128-bit random numbers, on the other hand, are much much much much better than 32-bit random numbers. &nbsp;(It&#8217;s easy to get 128-bit random numbers; just get four 32-bit random numbers and glue them together.) &nbsp;I&#8217;d even go so far as to say they&#8217;re better than GUIDs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-526623">
				<div id="div-comment-526623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lyon-smith.org/blogs/code-o-rama/archive/2007/07/17/timing-code-on-windows-with-the-rdtsc-instruction.aspx' rel='external nofollow' class='url'>code-o-rama</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070705-00/?p=26143#comment-526623">
			July 17, 2007 at 8:04 pm</a>		</div>

		<p>If you need to accurately time operations in Windows, you&#8217;re usually directed to the QueryPerformanceCounter</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>