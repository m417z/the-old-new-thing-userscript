<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-829133">
				<div id="div-comment-829133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100428-00/?p=14223#comment-829133">
			April 28, 2010 at 8:55 am</a>		</div>

		<p>Since we&#8217;re talking about memory-mapped files, let me warn you about one special case. It&#8217;s when you create a temporary file to back your memory, and it is DELETE_ON_CLOSE file.</p>
<p>Some programmers close the original file handle after they passed it to CreateFileMapping. In theory, the file mapping object keeps a reference to the file object, so the file is not supposed to go away. But if the file is created with DELETE_ON_CLOSE, it gets deleted on CloseHandle (IRP_MJ_CLEANUP), not on file object destruction.</p>
<p>In this case, the file mapping won&#8217;t be able to flush the dirty pages. They will actually be silently discarded, and will be all zero after page-in.</p>
<p>This problem was reportedly fixed around Vista timeframe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829143">
				<div id="div-comment-829143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100428-00/?p=14223#comment-829143">
			April 28, 2010 at 3:38 pm</a>		</div>

		<blockquote><p>
  changes made to one view are immediately reflected in other views
</p></blockquote>
<p>&lt;a href=&quot;<a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Cache_coherence&quot;&gt;I" rel="nofollow">http://en.wikipedia.org/wiki/Cache_coherence&quot;&gt;I</a> don&#8217;t think this is possible on a multiprocessor system.&lt;/a&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829163">
				<div id="div-comment-829163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100428-00/?p=14223#comment-829163">
			April 28, 2010 at 4:12 pm</a>		</div>

		<p>@Anonymous:</p>
<p>IA32/x86-64 multiprocessor have implicit cache coherence protocol between processors. When the data left the write buffer (by virtues of a write barrier) and got to cache, it is immediately visible to all other processors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829193">
				<div id="div-comment-829193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ismael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100428-00/?p=14223#comment-829193">
			April 29, 2010 at 5:09 am</a>		</div>

		<p>@Anonymous, Alexandre Grigoriev:</p>
<p>Both views are correct, for differing definitions of &quot;immediately&quot;; immediately after the write instruction retires, immediately before the next instruction executes, or immediately after the write is sent to L2 cache I guess.</p>
<p>It&#8217;s possible to mess this stuff up, which is why we have e.g interlocked instructions and special lock-free IPC protocols that guarantee a certain internally-consistent memory semantic, provided all the participating processes implement it correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829223">
				<div id="div-comment-829223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">volatile</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100428-00/?p=14223#comment-829223">
			April 29, 2010 at 7:53 am</a>		</div>

		<p>Objects has to be declared as &quot;volatile&quot; to be sure to be synced immediately.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829233">
				<div id="div-comment-829233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dylan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100428-00/?p=14223#comment-829233">
			April 29, 2010 at 8:19 am</a>		</div>

		<p>@volatile</p>
<p>On some level you could say that, but volatile is rarely the correct answer.</p>
<p><a rel="nofollow" target="_new" href="http://www.kernel.org/doc/Documentation/volatile-considered-harmful.txt" rel="nofollow">http://www.kernel.org/doc/Documentation/volatile-considered-harmful.txt</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829253">
				<div id="div-comment-829253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100428-00/?p=14223#comment-829253">
			April 29, 2010 at 8:54 am</a>		</div>

		<p>@ismael, volatile:</p>
<p>Standard defines &#8216;volatile&#8217; as memory whose contents can be changed by means outside of C/C++ &quot;virtual machine&quot; control. Most proper example of this are memory-mapped device registers.</p>
<p>But the standard doesn&#8217;t define any multiprocessing, or memory ordering.</p>
<p>Microsoft-specific implementation of volatile access in the latest compilers adds read barrier after reading a volatile, and write barrier before writing a volatile.</p>
<p>A written data is visible as soon as it gets to L1 cache. It may not be visible if it&#8217;s in the write buffer. A serializing instruction makes sure all posted writes are committed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829723">
				<div id="div-comment-829723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100428-00/?p=14223#comment-829723">
			May 3, 2010 at 6:46 am</a>		</div>

		<p>@Dylan</p>
<p>The compiler/linker/environment/IDE/whatever/&#8230; could replace the volatile language construct with those accessor functions to I/O hardware. Instead of reinventing the wheel, existing keywords could be reused and made to work as developers expect them to work.</p>
<p>@ismael</p>
<p>The standard doesn&#8217;t prevent the compiler from implementing a volatile keyword which syncs between threads/processes/&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>