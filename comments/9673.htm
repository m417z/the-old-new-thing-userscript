<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-934843">
				<div id="div-comment-934843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Skrobov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934843">
			September 12, 2011 at 7:17 am</a>		</div>

		<p>Do you mean, WM_QUIT gets posted before the control returns to WinMain, thus making the modal loop in MessageBox exit immediately?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-934853">
				<div id="div-comment-934853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934853">
			September 12, 2011 at 7:26 am</a>		</div>

		<p>As the reference docs say, WM_CREATE is called after the window is created, but before its set visible, and that failure from WM_CREATE causes the window to be destroyed. &nbsp;This means that failing from WM_CREATE causes WM_DESTROY to be sent, which posts a quit message, which quits the message box. &nbsp;Presumably, failing a WM_NCCREATE doesn&#39;t cause a matching WM_DESTROY (perhaps it causes a WM_NCDESTROY?!)</p>
<p>Of course, this behavior is counter-intuitive to C++ programmers. &nbsp;If a constructor fails (by way of an exception of course), you never get a destructor call on a partially constructed object. &nbsp;I&#39;m sure the way most people think of it is &quot;if I fail a create, I clean up after myself first. &nbsp;If a create passes, THEN call WM_DESTROY because only them am I a fully constructed window&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-934863">
				<div id="div-comment-934863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934863">
			September 12, 2011 at 7:26 am</a>		</div>

		<p>The question contains two conceptual errors, I think. (A long time since I did this for real&#8230;)</p>
<p>First error is as A. Skrobov, the quit message on the queue kills the dialog. Questioner assumes it does not.</p>
<p>Second half is, Questioner assumes WM_DESTROY will be sent since the window is being destroyed. But since it is only partially created it only needs to be partially destroyed. WM_NCDESTROY will still occur, since we reached WM_NCCREATE, but WM_DESTROY will not because we never reached that stage of creation, so there should be nothing to destroy. So no quit message is posted, and the messagebox shows fine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-934873">
				<div id="div-comment-934873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934873">
			September 12, 2011 at 9:27 am</a>		</div>

		<p>Not destroyed, just well hidden:</p>
<p><a rel="nofollow" target="_new" href="http://web.archive.org/web/20071031111918/http://www.adrianmccarthy.com/blog/?m=200703#post-52" rel="nofollow">web.archive.org/&#8230;/blog</a></p>
<p>(then scroll up slightly, since the panel at the top covers the start of the post)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-934883">
				<div id="div-comment-934883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934883">
			September 12, 2011 at 10:50 am</a>		</div>

		<p>I&#39;m guessing from the answers so far that the &quot;strange behaviour&quot; of the MessageBox function is that the second message is never seen. However, this isn&#39;t actually stated in the original article.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-934913">
				<div id="div-comment-934913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934913">
			September 12, 2011 at 2:30 pm</a>		</div>

		<p>Its all obvous here&#8230; BTW I always wondered about that different return results meaning in quite same messages:</p>
<p>WM_CREATE &#8211; &quot;If an application processes this message, it should return zero to continue creation of the window. If the application returns –1, the window is destroyed&quot;</p>
<p>vs</p>
<p>WM_NCCREATE &#8211; &quot;Nonzero if the nonclient area is created. It is 0 if an error occurs; the Create function will return failure &quot;</p>
<p>WM_PAINT &#8211; &quot;An application returns zero if it processes this message.&quot;</p>
<p>vs</p>
<p>WM_ERASEBKGND &#8211; &quot;An application should return nonzero if it erases the background; otherwise, it should return zero.&quot;</p>
<p>WM_SIZING, WM_MOVING &#8211; &quot;An application should return TRUE if it processes this message&quot;</p>
<p>vs</p>
<p>WM_WINDOWPOSCHANGING &#8211; &quot;If an application processes this message, it should return zero.&quot;</p>
<p>Why so much mess in quite similar functionality? Is it just a historical random or some compatibility tricks hidden here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-934923">
				<div id="div-comment-934923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934923">
			September 12, 2011 at 3:24 pm</a>		</div>

		<p>@Killer: It&#39;s almost like Microsoft doesn&#39;t want us to get it right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-934963">
				<div id="div-comment-934963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934963">
			September 13, 2011 at 5:32 am</a>		</div>

		<p>@Killer: You forgot the WM_CTLCOLORxxx messages, which ignore the DWL_MSGRESULT, and whose documentation said &quot;cast the return value to a BOOL&quot; long after the DLGPROC return type was changed to INT_PTR, despite being the only reason I can see for a DLGPROC to return an INT_PTR in the first place!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-935093">
				<div id="div-comment-935093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-935093">
			September 13, 2011 at 10:19 am</a>		</div>

		<p>Now reading the answers here and the online help, I think I&#39;ve understood it:</p>
<p>WM_NCCREATE Message: &quot;If the application returns FALSE, the CreateWindow or CreateWindowEx function will return a NULL handle.&quot;</p>
<p>WM_CREATE Message: &quot;If the application returns –1, the window is destroyed and the CreateWindowEx or CreateWindow function returns a NULL handle.&quot;</p>
<p>Raymonds &quot;Modality, part 3: The WM_QUIT message&quot;: &quot;The other important thing about modality is that a WM_QUIT message always breaks the modal loop. Remember this in your own modal loops! If ever you call &nbsp;the PeekMessage function or &nbsp;The [typo fixed 10:30am] GetMessage function and get a WM_QUIT message, you must not only exit your modal loop, but you must also re-generate the WM_QUIT message (via &nbsp;the PostQuitMessage message) so the next outer layer will see the WM_QUIT message and do its cleanup as well.&quot;</p>
<p>So I guess &quot;the window is destroyed&quot; in the second reference means (I think it can be more clearly written in the documentation) is &quot;the WM_DESTROY is called.&quot; I guess it&#39;s called because CreateWindow is itself called before the application even entered message loop, and CreateWindow somehow manages to call the WndProc with WM_CREATE before. So it probably also does other calls. And the call to WM_DESTROY of given WndProc in the given application finally performs: &quot;PostQuitMessage(0)&quot;</p>
<p>Now how is MessageBox modal loop is written? Based on the third (Raymond&#39;s) reference the modal loop should detect the WM_QUIT and finish itself. That means that the GetMessage or PeekMessage of that modal loop must be used with the second parameter NULL:</p>
<p>&quot;If hWnd is NULL, GetMessage retrieves messages for any window that belongs to the current thread, and any messages on the current thread&#39;s message queue whose hwnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages and thread messages are processed.&quot;</p>
<p>Now in Raymond&#39;s example application at the moment MessageBox modal loop runs it sees that WM_QUIT and nicely closes itself.</p>
<p>Not obvious at all for uninitiated, I don&#39;t know where in the MSDN the exact &quot;protocol&quot; of calls to WndProc is documented (like CreateWindow calls that that and that, and all that without the queue) and where I&#39;d otherwise find the info from &quot;Modality, part 3: The WM_QUIT message&quot;</p>
<p>Again, it appears that Raymond provided more alone than the official documentation maintained for years (if it&#39;s not so I&#39;d appreciate pointers, thanks).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-935203">
				<div id="div-comment-935203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-935203">
			September 13, 2011 at 11:56 pm</a>		</div>

		<p>It would be nice if there was a way for Windows to hint this stuff. You&#39;re in Visual Studio, you do something like this, then a tab on the output pops up like &quot;Hinta&quot; listing things that went strange but the dev might not notice.</p>
<p>In this case, it would say &quot;filename.c:37 &#8211; MessageBox called while quitting (WM_QUIT or PostQuitMessage called before this MessageBox). MessageBox not displayed. MessageBox contents: &#8230;&quot;</p>
<p>Because it&#39;s going to happen again and again.</p>
<p>And no, it only exists if enabled in the build. Call it &quot;Debugging Aide &#8211; helps solve common Windows problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>