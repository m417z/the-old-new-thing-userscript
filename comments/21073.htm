<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-662313">
				<div id="div-comment-662313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080827-00/?p=21073#comment-662313">
			August 27, 2008 at 10:31 am</a>		</div>

		<p>Hmmm&#8230; 1234 isn&#8217;t a multiple of 4, unless you mean 0x1234, of course.</p>
<div class=post>[<i>Thanks. Fixed. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-662323">
				<div id="div-comment-662323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">keithmo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080827-00/?p=21073#comment-662323">
			August 27, 2008 at 10:31 am</a>		</div>

		<p>I wonder if &#8220;next time&#8221; will concern the disgusting &#8220;set the low bit of the event handle in an OVERLAPPED structure to suppress the I/O completion indication&#8221; hack&#8230;</p>
<div class=post>[<i>Um, that topic was the inspiration for this one. Try clicking that first link. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-662373">
				<div id="div-comment-662373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080827-00/?p=21073#comment-662373">
			August 27, 2008 at 11:10 am</a>		</div>

		<p>This whole thing just seems like too much of a hack for me. &nbsp;I much prefer adding a second parameter to a function. &nbsp;My personal feeling is that an opaque handle should mean one thing and one thing only. &nbsp;If you want to associate some extra information with a handle perhaps you should implement SetHandleLong() or something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-662403">
				<div id="div-comment-662403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080827-00/?p=21073#comment-662403">
			August 27, 2008 at 11:34 am</a>		</div>

		<p>But one must still be careful. &quot;Console&quot; pseudo-handles returned by GetStdHandle have some lower bits set, that WriteFile uses to determine if it should redirect the call to WriteConsoleA.</p>
<p>All this because console handle are not real handles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-662543">
				<div id="div-comment-662543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080827-00/?p=21073#comment-662543">
			August 27, 2008 at 7:03 pm</a>		</div>

		<p>I am glad that my &quot;ignorance&quot; on the subject has inspired Raymond to write an educational article.</p>
<p>As for my imagination shortage &#8212; still there is nothing here to convince me that such implementation is actually faster. Why not write two test cases along with some timing code and post them in one of the future blog posts?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-662553">
				<div id="div-comment-662553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080827-00/?p=21073#comment-662553">
			August 27, 2008 at 7:10 pm</a>		</div>

		<p>&quot;still there is nothing here to convince me that such implementation is actually faster&quot;</p>
<p>Quote from Raymond: &quot;Then again, who said that it had anything to do with performance?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-662583">
				<div id="div-comment-662583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bruno Mart&#237;nez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080827-00/?p=21073#comment-662583">
			August 27, 2008 at 7:59 pm</a>		</div>

		<p>You can use boost::optional to do this cleanly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-662593">
				<div id="div-comment-662593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080827-00/?p=21073#comment-662593">
			August 27, 2008 at 8:22 pm</a>		</div>

		<p>Of course, just because you /can/ doesn&#8217;t mean you /should/.</p>
<p>// works, but ew</p>
<p>switch (h) {</p>
<p>// technically NULL % 4 == 0 but, hey, it&#8217;s special</p>
<p>case NULL: &#8230;; break;</p>
<p>case INVALID_HANDLE_VALUE: &#8230;; break;</p>
<p>// probably need to unwrap this</p>
<p>case GetCurrentProcess(): &#8230;; break;</p>
<p>case YOUR_FAVORITE_NON_MULTIPLE_OF_FOUR_SENTINEL1: &#8230;; break;</p>
<p>case YOUR_FAVORITE_NON_MULTIPLE_OF_FOUR_SENTINEL2: &#8230;; break;</p>
<p>&#8230;</p>
<p>case YOUR_FAVORITE_NON_MULTIPLE_OF_FOUR_SENTINEL/n/: &#8230;; break;</p>
<p>default: assert((h % 4) == 0); WriteFile(h, &#8230;);</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-662603">
				<div id="div-comment-662603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080827-00/?p=21073#comment-662603">
			August 27, 2008 at 8:31 pm</a>		</div>

		<p>I&#8217;ve taken advantage of those lower two bits in a different way when I was writing a little debugging tool. It needed to keep track of process IDs (which aren&#8217;t handles, but also have the lower two buts set to zero), and it was important to be able to look up process handles by process ID very fast. It used a hash table with the simplest hash function ever: right-shift the process ID by two.</p>
<p>Nitpickery: &quot;But if the lower two bits weren&#8217;t always zero, you wouldn&#8217;t need a hash function at all!&quot;</p>
<p>Yeah, but then I wouldn&#8217;t have had a possibly mildly interesting anecdote to tell.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-662643">
				<div id="div-comment-662643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080827-00/?p=21073#comment-662643">
			August 28, 2008 at 12:19 am</a>		</div>

		<p>For some reason this reminds of that Mistakes Demotivator with the caption &quot;It could be that the purpose of your life is only to serve as a warning to others&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-662663">
				<div id="div-comment-662663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Me</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080827-00/?p=21073#comment-662663">
			August 28, 2008 at 3:26 am</a>		</div>

		<p>John wrote on Wednesday, August 27, 2008 11:10 AM:</p>
<blockquote><p>
  My personal feeling is that an opaque handle should mean one thing and one thing only.
</p></blockquote>
<p>But if this were always followed, we would not know the FILENOTFOUND value for a boolean enum:</p>
<p><a rel="nofollow" target="_new" href="http://thedailywtf.com/Articles/What_Is_Truth_0x3f_.aspx" rel="nofollow">http://thedailywtf.com/Articles/What_Is_Truth_0x3f_.aspx</a></p>
<p>But I think we all know this same from some other circumstance, don&#8217;t we?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-662623">
				<div id="div-comment-662623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080827-00/?p=21073#comment-662623">
			August 27, 2008 at 10:35 pm</a>		</div>

		<p>I can see what Raymond is getting at, but I personally would have done:</p>
<p>class LogHandle</p>
<p>{</p>
<p>public:</p>
<p>virtual ~LogHandle(){}</p>
<p>virtual void Write(LPCVOID ToWrite, DWORD Len)=0;</p>
<p>};</p>
<p>class LogFileHandle : public LogHandle</p>
<p>{</p>
<p>HANDLE regularHandle;</p>
<p>public:</p>
<p>LogFileHandle(HANDLE);</p>
<p>~LogFileHandle();</p>
<p>virtual void Write(LPCVOID ToWrite, DWORD Len)</p>
<p>{</p>
<p>DWORD WrittenLen = 0;</p>
<p>WriteFile(regularHandle, ToWrite, Len, 0, &amp;WrittenLen);</p>
<p>}</p>
<p>};</p>
<p>class LogDebugHandle : public LogHandle</p>
<p>{</p>
<p>public:</p>
<p>virtual void Write(LPCVOID ToWrite, DWORD Len)</p>
<p>{</p>
<p>AddToDebugWindow(ToWrite, Len);</p>
<p>}</p>
<p>};</p>
<p>__declspec(dllexport) LogHandle* NewLogHandle(HANDLE WriteTo)</p>
<p>{</p>
<p>return new LogFileHandle(WriteTo);</p>
<p>}</p>
<p>__declspec(dllexport) void FreeHandle(LogHandle* ToDelete)</p>
<p>{</p>
<p>delete ToDelete;</p>
<p>}</p>
<p>__declspec(dllexport) LogHandle* GetDebugHandle()</p>
<p>{</p>
<p>//Yes, I could use a singleton, but I&#8217;d need a</p>
<p>//way to allow the &#8220;free&#8221; function to recognize</p>
<p>//the static variable, and that&#8217;s beyond</p>
<p>//the scope of this example.</p>
<p>return new LogDebugHandle();</p>
<p>}</p>
<p>__declspec(dllexport) void LogOutput(LogHandle* LogTo, LPCVOID ToLog, DWORD Len)</p>
<p>{</p>
<p>LogTo-&gt;Write(ToLog, Len);</p>
<p>}</p>
<p>Yes, this may be slower (function pointers rather than if branches), but really, do you need to be fast when outputting to a file, debug window, etc? Wouldn&#8217;t the actual writing be orders of magnitude slower than a function pointer? Plus, this is extensible. What if I want to output via WM_COPYDATA? Or across a network? I could create COPYDATA_HANDLE and add an if, but how would I know what window I&#8217;m sending to? Using a class allows me a great deal of flexibility.</p>
<p>So I honestly, sincerely want to get your opinions: how would using a HANDLE sentinal be better than the above?</p>
<div class="post">[<i>It&#8217;s a lot easier if you&#8217;re retrofitting an existing code base that originally used <code>HANDLE</code>s. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-663313">
				<div id="div-comment-663313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/08/29/8904342.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080827-00/?p=21073#comment-663313">
			August 31, 2008 at 11:05 pm</a>		</div>

		<p>Extending the namespace to cover new object types.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>