<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1155363">
				<div id="div-comment-1155363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155363">
			October 13, 2014 at 7:34 am</a>		</div>

		<p>Shell_NotifyIconGetRect was added in Win7 so people creating toasts should use that if all they need is the location. This API did not exist in Vista but Vista had toasts/flyouts for several of its system icons, was automation used to get the location on Vista?</p>
<div class="post">[<em>Hardly. Automation names are not part of the API, so if you use automation for business logic, you are going to break the next time the UI changes. System icons which used the automation API would have been broken in Windows 7. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155373">
				<div id="div-comment-1155373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155373">
			October 13, 2014 at 10:36 am</a>		</div>

		<p>UIA was not backported to Windows 2000, Windows NT, or pre-SP3 Windows XP. That might make support for those versions of the OS problematic.</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ee684009%28v=vs.85%29.aspx#downlevel_support">msdn.microsoft.com/&#8230;/ee684009%28v=vs.85%29.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155393">
				<div id="div-comment-1155393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155393">
			October 13, 2014 at 11:35 am</a>		</div>

		<p>Funny I remember doing some kind of UIA on XP SP1. Obviously not the same one as it literally moved the cursor across the screen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155433">
				<div id="div-comment-1155433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155433">
			October 13, 2014 at 2:31 pm</a>		</div>

		<p>What&#39;s the point of doing &quot;foreach &#8230; yield return&quot; instead of just &quot;return&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155443">
				<div id="div-comment-1155443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155443">
			October 13, 2014 at 2:39 pm</a>		</div>

		<p>Since Azarian can&#39;t be bothered to use Google: <a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/410026/proper-use-of-yield-return">stackoverflow.com/&#8230;/proper-use-of-yield-return</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155453">
				<div id="div-comment-1155453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155453">
			October 13, 2014 at 2:44 pm</a>		</div>

		<p>@Azarien: It&#39;s the easiest way to merge three Enumerables together plus you don&#39;t have to fill all three sets before you start doing work on the first one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155463">
				<div id="div-comment-1155463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155463">
			October 13, 2014 at 2:48 pm</a>		</div>

		<p>@Joshua: that doesn&#39;t answer my question. Which is:</p>
<p>why</p>
<p> &nbsp; &nbsp;foreach (var item in collection) yield return item;</p>
<p>instead of just</p>
<p> &nbsp; &nbsp;return collection;</p>
<p>Both are lazy evaluated if collection is lazy evaluated, so why bother with additional overhead?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155473">
				<div id="div-comment-1155473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155473">
			October 13, 2014 at 2:50 pm</a>		</div>

		<p>Okay, ignore last comment. Now I see there are three iterations in one function. I thought there are separate functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155483">
				<div id="div-comment-1155483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155483">
			October 13, 2014 at 2:59 pm</a>		</div>

		<p>@parkrrrr: &nbsp;Support for those versions of Windows (Windows 2000, Windows NT, or pre-SP3 Windows XP) is &quot;problematic&quot; anyway. &nbsp;What is your point? &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155503">
				<div id="div-comment-1155503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155503">
			October 13, 2014 at 8:11 pm</a>		</div>

		<p>So I have been wondering for a while (read: pretty much every UI Automation post you&#39;ve posted), and it makes me wonder &#39;Why?&#39;&#8230;</p>
<p>I understand UI Automation makes things possible and slightly more accessible for the right uses. But all of your posts and examples just make me feel like these are mis-uses and abuses of the API.</p>
<p>Ever since the old days of Windows, there&#39;s been problems with compatibility, people finding window class names and manipulating the UI that manner. Yet in this post we get something really similar: version specific strings and tree structures that are supposed to make those same old things + more possible. You say these will differ per version, but how do you prevent the must-stay-the-same compatibility issues as before from creeping in? And similarly, how is this going to keep coders from messing with things they shouldn&#39;t mess with? (Unless I misunderstand your post, clicking a taskbar chevron and similar Windows UI are things I would not expect to be touched by other programs.)</p>
<p>Simply put&#8230; do your posts on this subject not encourage the wrong kinds of uses for this API? Or is it really intended as a FindWindow()-style replacement to poke and prod everything on the system with by every application out there?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155513">
				<div id="div-comment-1155513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Baltasar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155513">
			October 14, 2014 at 3:25 am</a>		</div>

		<p>Is this the proper way to recognize the system volume notifier:</p>
<p>var name = icon.GetCurrentPropertyValue(AutomationElement.NameProperty) as string;</p>
<p>if (name.StartsWith(&quot;Speakers:&quot;)) {</p>
<p> &nbsp; &nbsp;// &#8230;</p>
<p>}</p>
<p>Looks clumsy to me. I hope that i18n does not affect the code, i.e., the name for the icons is stable among all international versions of Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155523">
				<div id="div-comment-1155523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155523">
			October 14, 2014 at 5:18 am</a>		</div>

		<p>Baltasar: If you&#39;re looking for something that wouldn&#39;t be affected by i18n, see AutomationIdProperty. The documentation <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/system.windows.automation.automationelement.automationelementinformation.automationid.aspx">msdn.microsoft.com/&#8230;/system.windows.automation.automationelement.automationelementinformation.automationid.aspx</a> states this:</p>
<p>&quot;While support of an AutomationId is always recommended for better testability, this property is not mandatory. Where it is supported, an AutomationId is useful for creating test automation scripts that run regardless of UI language. Clients should make no assumptions regarding the AutomationIds exposed by other applications. An AutomationId is not necessarily guaranteed to be stable across different releases or builds of an application.&quot;</p>
<p>In other words, you would use it to find a given control regardless of what the UI language is, but don&#39;t expect to be able to find the Speakers icon the same way across different versions of Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155533">
				<div id="div-comment-1155533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155533">
			October 14, 2014 at 5:50 am</a>		</div>

		<p>Baltasar: It breaks even before i18n. For me the full name is &quot;Speakers (USB): 2%&quot; so it would not match with the search. UI Automation API is very clumsy when the target application is not carefully designed for the automation. However, it is usually better than the alternatives when you have to automate interaction with the user interface.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155563">
				<div id="div-comment-1155563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155563">
			October 14, 2014 at 6:29 am</a>		</div>

		<p>@DWalker:</p>
<p>My point is, Raymond specifically mentioned support for those operating systems as &quot;an exercise,&quot; presumably on the assumption that the names and tree structure and whatnot would be somewhat different, but manageable. But the fact that the entire UIA subsystem is missing in those versions makes it a rather more difficult exercise.</p>
<p>You could use Active Accessibility, the predecessor to UIA, but even that will fail on Windows NT if it isn&#39;t at least NT4 SP6.</p>
<p>I know you&#39;re trying to say that all of those versions are EOLed, anyway, so there&#39;s no point in supporting them. But some of us live in the real world where we still encounter those versions &#8211; especially XP but even NT4, believe it or not &#8211; on a regular basis.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155603">
				<div id="div-comment-1155603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155603">
			October 14, 2014 at 8:18 am</a>		</div>

		<p>@JW</p>
<p>We use the UIAutomation Framework heavily here for an in house Automated Testing Framework (similar to White and other UI Test Frameworks/products) to perform integration testing of our software. Combined with good ol&#39; FindWindow and EnumThreadWindows its very powerful, and allows us to automate repetitive testing tasks freeing up our testers to focus on more actively developed portions of our product.</p>
<div class="post">[<em>UIAutomation is for accessibility and automated testing. In this case, it&#39;s so you can write an automated test to verify that your program is showing its notification icon when it should. It is not for shipping business logic because the accessibility tree is not contractual. (If a service pack breaks your tests, then you update your tests. If a service pack breaks your app, then you have a lot of unhappy customers.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155653">
				<div id="div-comment-1155653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155653">
			October 14, 2014 at 1:54 pm</a>		</div>

		<p>So, I take from that then that no, UI Automation is not intended for production code used by end-users. I really hope that is how programmers will use it, but I&#39;ve got a feeling it is going to be popular in a lot of products to &#39;unlock special functionality&#39; regardless. :/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155683">
				<div id="div-comment-1155683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1155683">
			October 15, 2014 at 5:19 am</a>		</div>

		<p>UI Automation is absolutely intended for production code used by end-users. As long as your production code is accessibility or test software, and that&#39;s what your end users are using it for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156193">
				<div id="div-comment-1156193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1156193">
			October 16, 2014 at 5:06 pm</a>		</div>

		<p>The enumeration should definitely not be lazily evaluated. &nbsp;What happens if you take so much time with an item that user interaction, which typically close the overflow area, gets in the way of the enumeration? &nbsp;Just take a snapshot of it with ToArray or ToList.</p>
<p>It gets more unreliable if you think that the area might actually be open to start with, so by clicking on it will close it! &nbsp;Actually, if you run the enumeration twice fast, the second time will yield fewer items. &nbsp;You must also check if the overflow area is open or not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156243">
				<div id="div-comment-1156243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141013-00/?p=43863#comment-1156243">
			October 17, 2014 at 3:28 am</a>		</div>

		<p>@John Doe:</p>
<p>Lazy evaluation is good enough considering that the properties are not cached. Taking a snapshot of automation elements does not help if you are later going to ask their property values or you try to interact with them (i.e. the element must exist at that point anyway). There are other, more significant problems with the implementation. For example, FindFirst() should not be used with TreeScope.Descendants when enumerating root element, because it may iterate over thousands of elements and lead to a stack overflow (according to MSDN).</p>
<p>More robust implementation could use CacheRequest to get the property values and then take a snapshot of all needed automation elements. Also a custom implementation of FindFirst() method with breadth-first algorithm and an optional maxDepth parameter would be a good idea, but the implementation is a bit tricky because the tree traversal may fail whenever the automation tree changes.</p>
<p>However, the automation element of speaker icon must still be alive when you try to click it so these actions have limited benefits for that scenario.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>