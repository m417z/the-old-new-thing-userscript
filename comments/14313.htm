<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-826513">
				<div id="div-comment-826513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826513">
			April 16, 2010 at 3:25 pm</a>		</div>

		<p>You think it&#8217;s just an itty-bitty bitmap good for nuthing? No. It&#8217;s a copy of Kazimir Malevich&#8217;s picture!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826523">
				<div id="div-comment-826523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.winstep.net' rel='external nofollow' class='url'>Jorge Coelho</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826523">
			April 16, 2010 at 3:34 pm</a>		</div>

		<p>Ah, finaly, comments enabled for this topic! :-)</p>
<p>Got a question. For a case such as </p>
<p>hdc= CreateCompatibleDC(AnotherHdc)</p>
<p>hBitmap = CreateDIBSection(hdc, TempBI, DIB_RGB_COLORS, 0, 0, 0)</p>
<p>hOldBitmap = SelectObject(hdc, hBitmap)</p>
<p>&nbsp; &#8230; do something</p>
<p>SelectObject(hdc, hOldBitmap)</p>
<p>DeleteDC(hdc)</p>
<p>DeleteObject(hBitmap)</p>
<p>Do we have a memory leak if we skip the last SelectObject and just delete the DC? Eg;</p>
<p>hdc= CreateCompatibleDC(AnotherHdc)</p>
<p>hBitmap = CreateDIBSection(hdc, TempBI, DIB_RGB_COLORS, 0, 0, 0)</p>
<p>SelectObject(hdc, hBitmap)</p>
<p>&nbsp; &#8230; do something</p>
<p>DeleteDC(hdc)</p>
<p>DeleteObject(hBitmap)</p>
<p>In theory you can&#8217;t delete a bitmap while a DC is selected into it, but what if we delete the DC first? It doesn&#8217;t seam to leak&#8230;?</p>
<div class=post>[<i>I think you know the answer already. You&#8217;re just hoping I&#8217;ll say what you want, knowing that I won&#8217;t. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826533">
				<div id="div-comment-826533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826533">
			April 16, 2010 at 7:12 pm</a>		</div>

		<p>Maybe he does, but I don&#8217;t.</p>
<p>There could be two reasons why it doesn&#8217;t leak: 1) the bitmap has been automatically deselected so DeleteObject succeeds or 2) the bitmap has been automatically deleted (so DeleteObject fails).</p>
<p>The MSDN documentation for DeleteDC and ReleaseDC is severely lacking and should contain an explanation of the semantics of retiring a device context.</p>
<div class=post>[<i>It is a general principle that you need to restore the DC to how you found it when you&#8217;re done. Not sure what this has to do with the stock bitmap, though. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826553">
				<div id="div-comment-826553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826553">
			April 16, 2010 at 11:34 pm</a>		</div>

		<p>It&#8217;s weird that when you ask for an Xx0 or 0xY, you get 1&#215;1. Thanks for saying that this is how it has been designed to work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826573">
				<div id="div-comment-826573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826573">
			April 17, 2010 at 1:12 am</a>		</div>

		<blockquote><p>
  It is a general principle that you need to restore the DC to how you found it when you&#8217;re done.
</p></blockquote>
<p>I&#8217;ll chalk that up as undefined, subject to change without notice. (The relevant MSDN pages should state so.) I always habitually restore the old state of device contexts, but the relevant documentation is at the SelectObject page and I&#8217;m not sure it&#8217;s quite correct. It says ‘after it has finished drawing’ which probably should be ‘before it deletes or releases the device context’ unless there&#8217;s even more going on&#8230; but then we&#8217;d need a good rule to decide when we&#8217;ve finished drawing.</p>
<blockquote><p>
  Not sure what this has to do with the stock bitmap, though.
</p></blockquote>
<p>It&#8217;s part of the initial state of device contexts, so the question of what happens to a device context that contains something else when it goes bye-bye is natural.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tihiy odd alt thread-odd thread-alt depth-1" id="comment-826583">
				<div id="div-comment-826583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826583">
			April 17, 2010 at 5:36 am</a>		</div>

		<p>There is an undocumented quirk in GDI on NT systems: you can actually delete selected objects and they will go away as soon as they&#8217;re not referenced anymore.</p>
<p>Or am i wrong? I would like to know about those secret rules.</p>
<div class=post>[<i>It&#8217;s a bad idea to program to the implementation rather than the contract, because there is no promise that the implementation will not change. And not all versions of Windows are NT-based. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826593">
				<div id="div-comment-826593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826593">
			April 17, 2010 at 6:18 am</a>		</div>

		<p>Select&#173;Object also returns NULL on success somtimes, usually when you restore the original objects. The program must not fail if Select&#173;Object returns NULL. The return value is useless. Returning a dummy bitmap is a architectural flaw.</p>
<p>In general, the GDI API for using bitmaps is a mess. It&#8217;s more complicated than it has to be, even considering it must work in real mode. 50 lines of unmaintainable code, at minimum, to draw a bitmap in a window really suck.</p>
<p>I beleive this is the answer lag problems with terminal server. The underlying API is unnecessary complex.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826543">
				<div id="div-comment-826543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.winstep.net' rel='external nofollow' class='url'>Jorge Coelho</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826543">
			April 16, 2010 at 11:26 pm</a>		</div>

		<p>[I think you know the answer already. You&#8217;re just hoping I&#8217;ll say what you want, knowing that I won&#8217;t. -Raymond]</p>
<p>Raymond, I really don&#8217;t, or I wouldn&#8217;t be asking, period. And I&#8217;m not alone in not knowing or being confused about this. </p>
<p>IMO, there are two possible things that could leak: the 1&#215;1 &#8216;stock&#8217; bitmap which is now an orphan (on the other hand, if it&#8217;s &#8216;stock&#8217; and shared it doesn&#8217;t leak, which is why you don&#8217;t need to delete it either) or hBitmap. The later for sure doesn&#8217;t, event though I&#8217;ve deleted the DC before restoring it, or I would have a HUGE quickly noticeable memory leak.</p>
<p>What I am asking is if, *in this specific case*, not restoring the DC before deleting it would introduce a very small leak of some kind or not. And if it causes a leak, what exactly is leaking?</p>
<div class=post>[<i>Since you know it&#8217;s not something you&#8217;re supposed to be doing in the first place, what does it matter what happens when you do it? Just don&#8217;t do it. Here&#8217;s what happens: An error occurs. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo even thread-even depth-1" id="comment-826603">
				<div id="div-comment-826603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826603">
			April 17, 2010 at 6:37 am</a>		</div>

		<p>[Or am i wrong? I would like to know about those secret rules.]</p>
<p>If you&#8217;d like to know about them for the sake of knowledge ok, but since they are undocumented you shouldn&#8217;t rely on them in your applications.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm odd alt thread-odd thread-alt depth-1" id="comment-826613">
				<div id="div-comment-826613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826613">
			April 17, 2010 at 8:53 am</a>		</div>

		<p>&quot;Select&#173;Object also returns NULL on success somtimes, usually when you restore the original objects.&quot;</p>
<p>How? &nbsp;When you restore the original objects, it returns the object that you selected into the DC to replace the original objects. &nbsp;It&#8217;s not a stack or anything like that, where retuning non-NULL means that you still need to pop something off. &nbsp;The only time it could return NULL on success is if there was nothing selected into the DC at the time you called SelectObject. &nbsp;The only way there could be nothing selected into the DC is if the DC started off with nothing selected for that particular type, you selected a NULL object into it, or somehow the selected object became NULL without the program calling SelectObject. &nbsp;However, passing NULL to SelectObject is an error, because then the function can&#8217;t determine which type of object you meant. &nbsp;Therefore, you can&#8217;t select a NULL object into it. &nbsp;I don&#8217;t know what happens if you try to DeleteObject on something while it is selected into a DC. &nbsp;Does selecting an object into a DC do something to it so that DeleteObject knows not to actually delete it? &nbsp;If so, then this eliminates that possibility for SelectObject to return NULL on success. &nbsp;What other way do you know of for SelectObject to return NULL on success?</p>
<p>&quot;The program must not fail if Select&#173;Object returns NULL. The return value is useless.&quot;</p>
<p>How is that?</p>
<p>&quot;Returning a dummy bitmap is a architectural flaw.&quot;</p>
<p>It&#8217;s not a dummy bitmap, it&#8217;s a stock bitmap, just like the stock pen and stock brush that are initially selected into the DC. &nbsp;If you think it is an architectural flaw, then how would you have done it differently?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826623">
				<div id="div-comment-826623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826623">
			April 17, 2010 at 9:17 am</a>		</div>

		<p>GDI is indeed more complicated than it needs to be, but I would hardly call it a mess.</p>
<p>Once you come to terms with what a device context really is, its not so bad. I think that most programmers see device contexts as some form of mysterious voodoo.</p>
<p>A device context is a list of handles (to objects, and a driver) used in rendering. Thats it. Thats all there is to them. Simple, right?</p>
<p>The complications come from the fact that while you may or may not &quot;own&quot; the objects in it, you have an absolute responsibility to clean up those objects that you do &quot;own.&quot;</p>
<p>Simplified GDI code doesnt pass device contexts around unless absolutely necessary. Such code creates device contexts on-demand and releases them as soon as possible. This code passes the handles to the relevant objects (bitmap, font, pen, brush..) around instead.</p>
<p>Any other methodology risks &quot;container spaghetti&quot; where at certain points in the code it is non-obvious what the state of the container is (who owns each of the things inside), and thus, non-trivial to destroy the container properly. Often within an exception handler it is not at all obvious what the state of the device context is unless the handler is local to its creation and deletion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826653">
				<div id="div-comment-826653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826653">
			April 17, 2010 at 11:09 am</a>		</div>

		<p>[What valid operation on a 0×n or n×0 bitmap is not possible on a 1×1 bitmap?]</p>
<p>0×n or n×0 bitmaps would give more consistent results when querying attributes (GetObject), for example if the bitmap represents the visible part of some graphical object (which may completely hidden). Just like a file of length zero is often useful even if it doesn&#8217;t contain any data.</p>
<div class=post>[<i>Okay, GetObject() behaves differently. But even if CreateBitmap supported 0×n and n×0 bitmaps, CreateDIBSection doesn&#8217;t, so you&#8217;re still screwed. Oh, and zero-width/height bitmaps cause CreatePatternBrush to divide by zero. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826673">
				<div id="div-comment-826673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">danielye</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826673">
			April 17, 2010 at 1:44 pm</a>		</div>

		<p>Why not simply SaveDC/RestoreDC ? This way you don&#8217;t need to bother with restoring the DC to the initial state, and save all the handles.</p>
<p>Unless it requires a lot of memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826683">
				<div id="div-comment-826683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826683">
			April 17, 2010 at 2:01 pm</a>		</div>

		<blockquote><p>
  you can actually delete selected objects and they will go away as soon as they&#8217;re not referenced anymore.
</p></blockquote>
<p>Sounds like a backwards compatibility hack. What should happen is that the deletion will fail and everything will stay as it was.</p>
<blockquote><p>
  GDI is indeed more complicated than it needs to be
</p></blockquote>
<p>It&#8217;s about as neat as it reasonably could have been designed in an age where object oriented programming wasn&#8217;t commonplace yet. A lot of the Windows API is essentially emulating oop in C. Yes, we can do better now, but I suspect that&#8217;s only because we&#8217;ve seen C++ and Java.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826633">
				<div id="div-comment-826633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826633">
			April 17, 2010 at 9:20 am</a>		</div>

		<p>Thanks for the insight into this mysterious object. A few questions:</p>
<p>(1) What is the (historical) reason for preventing creation of *real* bitmaps with zero width or height? (CreateBitmap returns the stock bitmap and CreateDIBSection fails.)</p>
<p>(2) Is the bitmap returned by CreateBitmap(0,0,0,0,0) a real stock object? That is, is it possible to skip calling DeleteObject, and can it be used to return a (memory) DC to a &#8220;clean&#8221; state (see <a href="http://msdn.microsoft.com/en-us/library/ms969928.aspx" rel=nofollow target=_new rel="nofollow">http://msdn.microsoft.com/en-us/library/ms969928.aspx</a>)?</p>
<p>(3) If the stock bitmap is the same for all DCs, why doesn&#8217;t GetStockObject return it?</p>
<div class=post>[<i>Suppose you could create a 0×n or n×0 bitmap. You can&#8217;t do anything with it! What valid operation on a 0×n or n×0 bitmap is not possible on a 1×1 bitmap? In other words: How does it change the behavior of a correctly-written program? (See discussion of malloc(0).) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826663">
				<div id="div-comment-826663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mx</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826663">
			April 17, 2010 at 12:06 pm</a>		</div>

		<p>&quot;It is a general principle that you need to restore the DC to how you found it when you&#8217;re done.&quot;</p>
<p>That&#8217;s certainly true of DCs obtained via GetDC since they can be shared by multiple windows, but does that really apply to *created* DCs? Aren&#8217;t created DCs totally independent of other DCs?</p>
<p>&quot;Here&#8217;s what happens: An error occurs.&quot;</p>
<p>Can you elaborate? I have never restored the stock bitmaps/pens/brushes/fonts before calling DeleteDC, and haven&#8217;t observed any failures, leaks, incorrect painting, etc., on 9x or NT.</p>
<p>(I understand your advice is to &quot;just not do it&quot;, but &quot;just not doing it&quot; in my case would require modifying/retesting hundreds of lines of code&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tihiy even thread-even depth-1" id="comment-826693">
				<div id="div-comment-826693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826693">
			April 18, 2010 at 12:49 am</a>		</div>

		<p>[Sounds like a backwards compatibility hack. What should happen is that the deletion will fail and everything will stay as it was.]For NT3.1 or some buggy old ms app i guess then? Win16/9x are just failing deletion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826713">
				<div id="div-comment-826713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.winstep.net' rel='external nofollow' class='url'>Jorge Coelho</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826713">
			April 18, 2010 at 6:36 am</a>		</div>

		<p>Raymond said:</p>
<p>[Here&#8217;s what happens: An error occurs.]</p>
<p>Mx said:</p>
<p>[Can you elaborate? I have never restored the stock bitmaps/pens/brushes/fonts before calling DeleteDC, and haven&#8217;t observed any failures, leaks, incorrect painting, etc., on 9x or NT.</p>
<p>(I understand your advice is to &#8220;just not do it&#8221;, but &#8220;just not doing it&#8221; in my case would require modifying/retesting hundreds of lines of code&#8230;)]</p>
<p>Exactly the same problem here, although very recently I started changing the code so it does restore the DC before deleting it (which is why I am so interested in a clear and detailed response to my question). A lot of work which can introduce some real bugs if I am not careful &#8211; and for what?</p>
<p>As someone who has several times explained the hidden costs of fixing a real bug, you know exactly what I mean.</p>
<p>What error occurs? Where? What are the consequences of this error? The documentation says nothing about this, so only an &#8216;insider&#8217; like you might be able to shed some light on it. If you refuse to, we&#8217;re just be left in the dark and nobody will be any wiser: just like the parent who tells his kid not to do something but doesn&#8217;t bother clearly explaining to him what the consequences of that action are.</p>
<p>I also understand that you don&#8217;t want to encourage the &#8216;wrong&#8217; way of doing things, but, like Mx, I never observed any immediately visible leak of any kind. Is it such a slow leak or consequence that it would take a very, very, long time to become apparent?</p>
<div class=post>[<i>The results are undefined. If the documented said what happened when undefined behavior occurs, then it wouldn&#8217;t be undefined any more. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826723">
				<div id="div-comment-826723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826723">
			April 18, 2010 at 8:45 am</a>		</div>

		<p>Jorge, maybe you should experiment with the theory that it doesnt leak by throwing your actions into an infinite loop and then watching the resource usage.</p>
<p>This past month I helped a person on a forum with a game loop.</p>
<p>At the beginning. he pretty much wasnt doing anything right and was leaking VERY badly, causing the program to misbehave only after a few minutes, which is why he posted asking for help.</p>
<p>At the end he really wanted me (and others) to bless his not restoring the stock objects, and when I wouldn&#8217;t bless that, he wanted to know of ways to create new instances of the stock objects at DC deletion time. I refused to bless that as well.</p>
<p>Restore the stock objects. If its hard to do that, then maybe your design is flawed (why is the DC in an unknown state?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826743">
				<div id="div-comment-826743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.winstep.net' rel='external nofollow' class='url'>Jorge Coelho</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826743">
			April 18, 2010 at 10:28 am</a>		</div>

		<p>[Jorge, maybe you should experiment with the theory that it doesnt leak by throwing your actions into an infinite loop and then watching the resource usage.]</p>
<p>And I did just that.</p>
<p>After 1,000,000 interactions creating a 1024&#215;1024 pixel 32 bit bitmap WITHOUT restoring the DC to the stock object before deleting it, there was no memory leak, no Handle leak, no GDI leak and no User leak.</p>
<p>This said, I did notice the following: RAM usage would sometimes jump from 10,000 KB to 14,000 KB and then back down to 10,000 KB (I was running this in the VB5 IDE, by the way).</p>
<p>Either there is no leak, or, if there is one (which might explain the occasional 10,000 KB to 14,000 KB and back again jump), then Windows is cleaning up after me.</p>
<p>Still none the wiser. :-P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826753">
				<div id="div-comment-826753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826753">
			April 18, 2010 at 11:24 am</a>		</div>

		<blockquote><p>
  A lot of work which can introduce some real bugs if I am not careful &#8211; and for what?
</p></blockquote>
<p>Even if your program behaves correctly if you don&#8217;t restore device context state, according to Raymond you&#8217;re relying on undocumented behaviour that might be subject to change or different among implementations. Maybe this will mean that your program will stop working in Windows 8, or will be hard to port to Wine, ReactOS or Windows CE. Or maybe you can run into an edge case where Windows doesn&#8217;t do the right thing and your program screws up.</p>
<p>As for code changes being likely to introduce new bugs, I really doubt that in this case. Your code probably looks like:</p>
<p>|dc = CreateDC(&#8230;);</p>
<p>|SelectObject(&#8230;);</p>
<p>|&#8230;</p>
<p>|SelectObject(&#8230;);</p>
<p>|&#8230;</p>
<p>|DeleteDC(dc);</p>
<p>You just need to change this to:</p>
<p>|dc = CreateDC(&#8230;);</p>
<p>|HGDIOBJ oo = SelectObject(&#8230;);</p>
<p>|&#8230;</p>
<p>|SelectObject(&#8230;);</p>
<p>|&#8230;</p>
<p>|SelectObject(dc, oo);</p>
<p>|DeleteDC(dc);</p>
<p>Or use SaveDC and RestoreDC if you&#8217;re swapping so many objects around that you&#8217;re getting confused. Note that changing your code like this will even make interacting with your own code easier. Suppose you write code like this:</p>
<p>|&#8230; draw stuff &#8230;</p>
<p>|DrawSmiley(dc);</p>
<p>|&#8230; draw stuff &#8230;</p>
<p>If the function DrawSmiley leaves the device context in its original state you won&#8217;t have to worry about reselecting pens and brushes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826773">
				<div id="div-comment-826773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826773">
			April 18, 2010 at 2:08 pm</a>		</div>

		<blockquote><p>
  mostly they&#8217;re created and deleted at different places
</p></blockquote>
<p>That shouldn&#8217;t matter. What does matter is that you a) don&#8217;t delete a bitmap while it&#8217;s still in use and b) that you deselect your bitmaps properly. Point b) has been discussed into tedium. The basic scenario of point a) is:</p>
<p>|SelectObject(dc, bm);</p>
<p>|&#8230; draw stuff &#8230;</p>
<p>|Subroutine(dc, bm); //Deletes bm.</p>
<p>|&#8230; draw stuff &#8230;</p>
<p>This actually bears some resemblance to a common anti-pattern where you&#8217;re creating and deleting objects on different scope levels. Similar things apply to all operations where you do two actions that constitute a logical pair, like opening and closing files for example.</p>
<p>Either you move them upward like this:</p>
<p>|obm = SelectObject(dc, bm);</p>
<p>|&#8230; draw stuff &#8230;</p>
<p>|Subroutine(dc, bm);</p>
<p>|&#8230; you can do more stuff here &#8230;</p>
<p>|SelectObject(dc, obm);</p>
<p>|DeleteObject(obm);</p>
<p>|&#8230; draw stuff &#8230;</p>
<p>Or you move them downward like this:</p>
<p>|&#8230; draw stuff &#8230; //But put everything relating to bm in Subroutine.</p>
<p>|Subroutine(dc, bm); //Selects, deselects and deletes bm.</p>
<p>|&#8230; draw stuff &#8230;</p>
<p>It should always be easy to pair SelectObjects, logically they&#8217;re like { and }. Creation and deletion of non-temporary bitmaps is more like using new and delete. It shouldn&#8217;t be any harder not to delete a bitmap that&#8217;s still selected than it is not to delete an object that can still be accessed. Not trivial perhaps, but you&#8217;re a programmer so as long as your design is good you won&#8217;t find it hard and I don&#8217;t see how you could introduce bugs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826733">
				<div id="div-comment-826733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.winstep.net' rel='external nofollow' class='url'>Jorge Coelho</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826733">
			April 18, 2010 at 10:08 am</a>		</div>

		<p>I *have* been changing the code to restore the DCs to the stock objects before deleting them when I became aware that this could potentially lead to a leak, although nobody seems to know for sure and I have no evidence that indeed it does. </p>
<p>It&#8217;s only hard because it&#8217;s a HUGE, very graphic intensive, project &#8211; so there are a lot of changes to do.</p>
<p>The problem is that I have no confirmation that all this work (which can easily induce bugs if I&#8217;m not careful matching everything as it&#8217;s tedious work and most objects are destroyed in a difference place from where they are created) is actually benefiting anything!</p>
<p>Unlike what Raymond seems to think, I&#8217;m not looking for someone to bless the wrong way of doing things (I have been changing the code just in case, after all), quite the opposite, in fact: I&#8217;m looking for a confirmation that the work I&#8217;ve been having (and the risk of introducing a serious bug somewhere) is worth it. A definite confirmation of the type &#8216;yes, it&#8217;s worth having all that work because if you don&#8217;t you get error &lt;so and so&gt; because of &lt;this and that&gt;, which, on the long run, results in &lt;this&gt; happening&#8217;.</p>
<p>So far I got a &#8216;it results in an error&#8217;. Comming from Raymond (thanks Raymond) that&#8217;s more information than I previously had, sure, but I&#8217;m still none the wiser as to where the error happens, why it happens, and what are the practical consequences of this error. </p>
<p>Hope that clears it. :-)</p>
<p>P.S. I don&#8217;t see any GDI or User leaks. As for memory, it would be very hard to detect if the leak(?) is very small. *Apparently* there is no leak.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826763">
				<div id="div-comment-826763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.winstep.net' rel='external nofollow' class='url'>Jorge Coelho</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826763">
			April 18, 2010 at 12:46 pm</a>		</div>

		<p>[Even if your program behaves correctly if you don&#8217;t restore device context state, according to Raymond you&#8217;re relying on undocumented behaviour that might be subject to change]</p>
<p>Yes, unfortunately I only noticed his reply to Tihiy *after* posting the above. Tihiy&#8217;s theory about the &#8216;undocumented quirk&#8217; is apparently true, but Raymond and you are right in that one should not rely on undocumented behavior (unless there is absolutely no other choice, which is not the case).</p>
<p>Note that sometimes one *does* have to rely on undocumented behaviour when doing something the OS has no API support for &#8211; with the knowledge that things might change without notice with a new Windows version or Service Pack and that your program might break or stop working correctly.</p>
<p>As for the code changes, sometimes it&#8217;s that simple (i.e.; the bitmap is created and deleted on the same routine), but mostly they&#8217;re created and deleted at different places &#8211; since there are a lot of persistent bitmaps, it&#8217;s easy to make a mistake and mismatch the object names, which would cause a leak, or, worse, a crash.</p>
<p>Needless to say, I&#8217;ve been using the &#8216;correct way&#8217; of doing things ever since I realized there was the potential for a leak, and changing the code to conformity as I run into old routines that do not restore the DC.</p>
<p>Anyway, thanks for the advice! :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826803">
				<div id="div-comment-826803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hagenp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100416-00/?p=14313#comment-826803">
			April 19, 2010 at 5:07 am</a>		</div>

		<p>So the Stock Bitmap is in fact a Null Object:</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Null_Object_pattern" rel="nofollow">http://en.wikipedia.org/wiki/Null_Object_pattern</a></p>
<p>Nice! :)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>