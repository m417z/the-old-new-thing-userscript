<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1291795">
				<div id="div-comment-1291795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1291795">
			April 10, 2017 at 8:19 am</a>		</div>

		<p>&#8220;Note, however, that handing back unaligned memory is likely to result in other problems,&#8221;<br />
I doubt this is as likely as you imply, as I would expect the alignment requirement of nearly all allocations would be a factor of their size. One could, in theory, allocate 3 bytes, then treat the first two bytes as a 16-bit integer and the third as an 8-bit, causing a problem, but I doubt this is common. More likely someone would create a C-style struct Foo { int16_t x, int8_t y } and then allocate sizeof(struct Foo) bytes; since the structure&#8217;s size gets rounded up to 4[1] (as otherwise arrays would not align), the resulting allocation at &#8230;FFFC is sufficiently aligned for the structure.</p>
<p>As for &#8220;standard page heap&#8221;, I assume because the allocation is made from a &#8220;standard page&#8221; (i.e. one that could be shared with other allocations)?</p>
<p>[1]Assuming no meddling with #pragma pack. My predecessor left too many of those behind for me to make such assumption lightly.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1291805">
				<div id="div-comment-1291805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1291805">
			April 10, 2017 at 8:25 am</a>		</div>

		<p>Indeed; I have noted that if the structure is not being padded by the compiler, allocating an array would surely cause alignment disasters.</p>
<p>Since this does not happen, we may normally assume that allocating an array works correctly for oddly-sized structs. In fact the linux equivalent of this does indeed put the last byte of odd sizes at the end of the page and therefore returns an odd pointer in such cases.</p>
<p>I suppose this is slightly more likely to break in that it will break on an unpadded struct for which arrays cannot be allocated, but that must be rare.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1291815">
				<div id="div-comment-1291815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Torsten</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1291815">
			April 10, 2017 at 8:32 am</a>		</div>

		<p>Consider the pattern of the variable size structure:</p>
<p>struct s {<br />
  __m128 vector;<br />
  size_t numBytes;<br />
  byte payload[0];<br />
}</p>
<p>This structure requires 16 byte alignment but can have any length, including odd ones. The heap manager has no way of knowing whether any given allocation is intended for something like that.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1291865">
				<div id="div-comment-1291865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1291865">
			April 10, 2017 at 1:00 pm</a>		</div>

		<p>As of C99, the size of the structure is &#8220;as if the [zero-length] array member were omitted except that it may have more trailing padding than the omission would imply.&#8221;  So the compiler can add padding if it likes, but otherwise the member is ignored.</p>
<p>(Before C99, this was a non-standard feature, so who knows what will happen.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1291885">
				<div id="div-comment-1291885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1291885">
			April 10, 2017 at 5:34 pm</a>		</div>

		<p>I suspect the dead giveaway bus error told you this application was not compatible. You never used this in production anyway so no matter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1291945">
				<div id="div-comment-1291945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stuart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1291945">
			April 11, 2017 at 7:40 am</a>		</div>

		<p>Does that mean that C99 doesn&#8217;t require a trailing zero-length array to be aligned to its own type? So that given, say,</p>
<p>struct v {<br />
byte length;<br />
double entries[0];<br />
}</p>
<p>it&#8217;d be legal for sizeof(struct v) and alignof(struct v) to be 1?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ranta even depth-2" id="comment-1291835">
				<div id="div-comment-1291835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1291835">
			April 10, 2017 at 9:04 am</a>		</div>

		<p>The alignment could be a problem with a structure that ends with an ANYSIZE_ARRAY, like SP_DEVICE_INTERFACE_DETAIL_DATA. That structure starts with a DWORD member, and applications first call SetupDiGetDeviceInterfaceDetail to get *RequiredSize = the number of bytes that you need to allocate for the structure, but number might not be a multiple of sizeof(DWORD).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1291837">
				<div id="div-comment-1291837" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1291837">
			April 10, 2017 at 9:30 am</a>		</div>

		<p>There are issues with HeapValidate() also.<br />
On small overruns &#8211; it will report a block as OK in Released code.<br />
Custom heap with alignment and exact allocation sizes is a way to go.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1291845">
				<div id="div-comment-1291845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1291845">
			April 10, 2017 at 9:53 am</a>		</div>

		<p>Shouldn&#8217;t it be a three-byte buffer that must be overrun by 13 bytes to get detected?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-2" id="comment-1291895">
				<div id="div-comment-1291895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1291895">
			April 10, 2017 at 7:19 pm</a>		</div>

		<p>It&#8217;ll be detected &#8220;when you free or reallocate the memory block&#8221;. Add checking on every write operation will probably slow your code to unacceptable level that you just want to turn it off.</p>
<p>That said, I wonder if there can be option that makes the heap manager to allocation 16 byte aligned memory, but report address from the tail side of allocated block minus requested allocation size. Of course the heap manager would have to remember the reported address and translate to actual starting address when free/reallocation of the pointer occurs in this mode.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even thread-odd thread-alt depth-1 parent" id="comment-1291855">
				<div id="div-comment-1291855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1291855">
			April 10, 2017 at 12:56 pm</a>		</div>

		<p>While this is a useful tool I honestly think it would be better for VC++ to support AddressSanitizer. The heap cookie system it uses is an excellent way of finding these sorts of bugs and doesn&#8217;t require an access violation to work.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1291875">
				<div id="div-comment-1291875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1291875">
			April 10, 2017 at 4:00 pm</a>		</div>

		<p>The nice thing about PageHeap is that you can turn it on retroactively for any binary. No recompilation needed. Recompilation may alter behavior enough to make the problem go away! And the bug might be in a component you didn&#8217;t compile, or in a component not written in C++.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1291905">
				<div id="div-comment-1291905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Yang</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1291905">
			April 10, 2017 at 7:23 pm</a>		</div>

		<p>&#8220;canary bytes&#8221; protection does not help on kernel pool overrun detection, correct?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1292005">
				<div id="div-comment-1292005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1292005">
			April 11, 2017 at 1:43 pm</a>		</div>

		<p>Just the thing I was researching last week!:<br />
Is there any way to enable pageheap in the middle of the running application? Or only for some of allocations?<br />
It seems it should be possible, as pageheap can be enabled only for allocations of a specific dll. But I&#8217;m unable to find a way to control it at will.<br />
I need this, because enabling pageheap from the start of my app exhausts 32bit address space completely, but I need tracking a bug in a specific part of the app.</p>
<p>Anyone knows of a way?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-2 parent" id="comment-1292095">
				<div id="div-comment-1292095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1292095">
			April 12, 2017 at 3:03 am</a>		</div>

		<p><a href="http://stackoverflow.com/questions/4714349/gflags-full-heap-enabling-with-dlls-doesnt-work" rel="nofollow">http://stackoverflow.com/questions/4714349/gflags-full-heap-enabling-with-dlls-doesnt-work</a></p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1292235">
				<div id="div-comment-1292235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1292235">
			April 12, 2017 at 1:06 pm</a>		</div>

		<p>Tnx for the link. I&#8217;d seen it.<br />
 It states its possible to enable pageheap per dll; But I want to enable pageheap only for some allocations in the main exe, not per dll. For eg. some way to enable/disable it by calling a function.<br />
As it is possible to be enabled per dll, I think it should be possible to enable at will. Right?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-4" id="comment-1292296">
				<div id="div-comment-1292296" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1292296">
			April 12, 2017 at 9:30 pm</a>		</div>

		<p>I don&#8217;t know&#8230; I&#8217;m not familiar with C++, but maybe you can create a macro that on debug will replace your memory allocation with &#8220;memory allocation round up to the next page size&#8221; then set the memory on next page with page guard?</p>
<p>You&#8217;ll need to write macro for each memory allocation/free function, and things can break if the arguments of those functions changes in future.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1292306">
				<div id="div-comment-1292306" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1292306">
			April 13, 2017 at 1:12 am</a>		</div>

		<p>You&#8217;re misunderstanding how this system works,  the SO answer is trying to explain exactly that (if you think about it, that&#8217;s also the only way this system can work).</p>
<p>You can turn the heap flag on per DLL that actually uses HeapAlloc. Since all your dlls presumably use malloc or new they all call into a single dll to allocate memory, so whatever setting exists for that dll is relevant. </p>
<p>Which also suggests the solution: You&#8217;ll have to use a separate heap for your interesting dlls. This is error prone and requires that the application plays along but doable.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1292055">
				<div id="div-comment-1292055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ismo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170410-00/?p=95935#comment-1292055">
			April 11, 2017 at 9:14 pm</a>		</div>

		<p>Any way to query how much padding after the reserved block there is to the page break ? Perhaps one should tweak all reservations to be 16 bytes ( or some other boundary) and in own code bump the pointer up if possible ( like character buffer, it can be aligned at one byte precision). </p>
<p>Or just use _aligned_malloc,</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>