<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1252755">
				<div id="div-comment-1252755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Vine [MSFT]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675#comment-1252755">
			June 15, 2016 at 8:17 am</a>		</div>

		<p>Interestingly, docs for WindowsDuplicateString say it can only succeed or fail if the input argument for the output HSTRING* was nullptr. This makes it hard to fail if out-of-memory happens which it seems could happen if the input string was fast-pass (?). I assume this is a doc bug and logged as so.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-chris_guzak odd alt depth-2" id="comment-1253525">
				<div id="div-comment-1253525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Chris+Guzak' rel='external nofollow' class='url'>Chris Guzak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675#comment-1253525">
			June 22, 2016 at 3:53 pm</a>		</div>

		<p>Yes, doc bug.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1252805">
				<div id="div-comment-1252805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Govert van Drimmelen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675#comment-1252805">
			June 15, 2016 at 3:43 pm</a>		</div>

		<p>I&#8217;m curious about the CLR projection for WinRT which maps HSTRING  System.String. There are some WindowsCreateStringReference calls in the coreclr code, but I&#8217;ve not found any guidelines to help understand when WinRT interop will make copies of string contents, going either way. Will calling an API like Windows.Storage.FileIO.ReadLinesAsync copy the strings an extra time when called from .NET?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-even depth-1" id="comment-1252825">
				<div id="div-comment-1252825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675#comment-1252825">
			June 15, 2016 at 5:11 pm</a>		</div>

		<p>In some ways the fast-pass concept also exists in the COM/BSTR world where it is not uncommon to see code that does pBrowser-&gt;Navigate((BSTR)L&#8221;http://example.com&#8221;,&#8230;). This is not correct code but I suspect the functions in question have to allow it for compatibility because their initial implementation just treated it as a LPCWSTR. I assume a HSTRING is very similar to a BSTR except that it does not point directly to the wide string because the ABI has already been down that road.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command even thread-odd thread-alt depth-1" id="comment-1252845">
				<div id="div-comment-1252845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675#comment-1252845">
			June 16, 2016 at 1:17 am</a>		</div>

		<p>Hey, you fixed the random line break problem! :)</p>
<p>[<i>I fixed nothing. It was a server problem. The server team fixed it. -Raymond</i>]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1252895">
				<div id="div-comment-1252895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675#comment-1252895">
			June 16, 2016 at 5:53 pm</a>		</div>

		<p>1. WindowsPreallocateStringBuffer(0, &#8230;) returns the same empty stock char array as WindowsGetStringRawBuffer(0, 0) returns.</p>
<p>However, the MSDN documentation for WindowsPreallocateStringBuffer says &#8220;You must ensure that mutableBuffer ends in a terminating NUL character&#8221;.</p>
<p>Does the documentation mean &#8220;only in the call to WindowsPromoteStringBuffer&#8221; or &#8220;at all times&#8221;?</p>
<p>If it means &#8220;only in the call to WindowsPromoteStringBuffer&#8221; then it implies that I can overwrite the NUL character of the empty stock char array except until I pass it to WindowsPromoteStringBuffer.</p>
<p>If it means &#8220;at all times&#8221; then it implies that I can overwrite the NUL character as long as it&#8217;s the NUL character. But it turns out that the empty stock char array located in read only memory and you get an access violation if you try to do that.</p>
<p>I think the MSDN documentation should be updated rather than the API changed to allow for the above.</p>
<p>2. The documentation for WindowsPreallocateStringBuffer says it allows bufferHandle to be NULL if length is 0 but the actual implementation will result in an error if you do that. Is this a documentation error or an implementation error?</p>
<p>3. The documentation for WindowsGetStringRawBuffer says the return value is &#8220;the empty string if string is NULL or the empty string.&#8221; But I thought NULL was the empty string. I think it should be reworded to something akin to &#8220;the stock empty string if string is NULL.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>