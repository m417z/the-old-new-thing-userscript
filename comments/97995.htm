<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1324345">
				<div id="div-comment-1324345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324345">
			February 9, 2018 at 7:39 am</a>		</div>

		<p>Ah yes, the Blit. If you were to ask me 10 years ago (holy cow it&#8217;s been 10 years now), I would&#8217;ve been super extra double obsessed with all the things coming out of Bell Labs at that time.</p>
<p>Before reading the SIGGRAPH paper today, I didn&#8217;t know that the Blit had a 68000 as its CPU, and WOW the AT&amp;T dialect of 68000 assembly language looks quite different from the Motorola variant that I am familiar with! Not as extreme as AT&amp;T vs Intel x86 assembly, mind (the biggest difference is that where AT&amp;T says <b>%a0@+</b>, Motorola says <b>(a0)+</b>), but still odd somehow&#8230;</p>
<p>Bonus watching: Penn and Teller using what looks like a Blit but probably isn&#8217;t to prank Rob Pike&#8217;s and Dennis Ritchie&#8217;s then-boss, co-discoverer of the cosmic microwave background Arno Penzias: <a href="https://www.youtube.com/watch?v=fxMKuv0A6z4" rel="nofollow">https://www.youtube.com/watch?v=fxMKuv0A6z4</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1324355">
				<div id="div-comment-1324355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324355">
			February 9, 2018 at 7:50 am</a>		</div>

		<p>Very interesting to see to what lengths the Windows devs went to make things fast. Any ballpark numbers by how much this improved performance over the first approach?</p>
<p>And, since it&#8217;s probably costly to maintain, are there still many of these performance tricks inside Windows? As nowadays it seems common that the hardware improvements of the last 20 years are being spent by userland applications adding about a dozen levels of abstraction, until a blinking cursor uses up the CPU, so all these neat improvements will get eaten up anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1324365">
				<div id="div-comment-1324365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Elliott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324365">
			February 9, 2018 at 7:58 am</a>		</div>

		<p>The Windows 1.x drivers I&#8217;ve looked at all generate blit code on the fly. I think they&#8217;d have been for Windows 1.03 or 1.04.</p>
<p>The drivers for GEM on the Apricot F-series also generate code, but they&#8217;re the only ones I&#8217;ve seen that do. Presumably Digital Research decided the performance increase wasn&#8217;t worth the extra burden of maintenance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt thread-odd thread-alt depth-1 parent" id="comment-1324375">
				<div id="div-comment-1324375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324375">
			February 9, 2018 at 8:01 am</a>		</div>

		<p>I would imagine that BitBlt still evolved to include even more crazy stuff. Windows NT 4 made the GDI kernel mode and the latest versions also include hardware acceleration when available.<br />
Thinking about that, and going off on a tangent. These parts of Windows were originally made kernel mode to improve performance. Raymond, do you know if this is still holding true, especially with Meltdown and Spectre, or has nobody at Microsoft tested this?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1324405">
				<div id="div-comment-1324405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324405">
			February 9, 2018 at 9:39 am</a>		</div>

		<p>It moved into user-mode in Vista and IIRC stayed there. Cost of switching was amortized by doing bulk of work in user-mode code and only sending finished result to kernel-mode for displaying. One of major reasons for introduction of WDDM.</p>
<p>So none of fixes/workarounds for those two vulnerabilities should have any measurable impact on graphical performance.</p>
<p>See:<br />
<a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/display/windows-vista-and-later-display-driver-model-architecture" rel="nofollow">https://docs.microsoft.com/en-us/windows-hardware/drivers/display/windows-vista-and-later-display-driver-model-architecture</a><br />
<a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/display/windows-vista-and-later-display-driver-model-operation-flow" rel="nofollow">https://docs.microsoft.com/en-us/windows-hardware/drivers/display/windows-vista-and-later-display-driver-model-operation-flow</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-3 parent" id="comment-1324435">
				<div id="div-comment-1324435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324435">
			February 9, 2018 at 11:14 am</a>		</div>

		<p>I knew that happened with the Direct3D runtime. But are you sure that it also happens with the GDI?<br />
The first link you provided shows that even in the WDDM model, the Win32 GDI goes straight to Win32K. From that, my understanding was that even in Vista and newer versions, Win32K, or kernel mode, was still where the GDI was implemented.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1324505">
				<div id="div-comment-1324505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324505">
			February 11, 2018 at 3:24 am</a>		</div>

		<p>GDI was pulled out of kernel along with everything else in Vista. Where did you get the idea that it wasn&#8217;t? All GDI now runs through cdd.dll, which manages the actual interfacing with WDDM and the driver from there.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-5" id="comment-1324525">
				<div id="div-comment-1324525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324525">
			February 11, 2018 at 12:01 pm</a>		</div>

		<p>General lack of major interest and no real pressing need to research into it. The little bit of prodding around that I did do made it seem that the flow went gdi32.dll -&gt; win32u.dll or maybe gdi32full.dll -&gt; win32u.dll, and win32u.dll is the entry into win32k. There also wasn&#8217;t any obvious links between cdd.dll and anything else, since it is obviously a kernel mode library and it depends on win32k and it doesn&#8217;t have any exports.<br />
But well, if people keep saying that part of GDI is user mode then who am I to argue.<br />
The question was originally just one of those random passing thoughts anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1324535">
				<div id="div-comment-1324535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.solsoftsolutions.com' rel='external nofollow' class='url'>Mark S</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324535">
			February 11, 2018 at 7:44 pm</a>		</div>

		<p>(I can&#8217;t reply to Darran&#8217;s message, presumably because the thread is too deeploy nested)</p>
<p>Note that as a consequence, in Vista, GDI could no longer be hardware accelerated.  But partial support for GDI hardware acceleration was restored in Windows 7.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-4 parent" id="comment-1324685">
				<div id="div-comment-1324685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324685">
			February 12, 2018 at 11:01 am</a>		</div>

		<p>Ok. Looks like answer is far less clear then I remember it. As far as I can tell based upon following links, GDI is handled by DWM. Apparently it is not known how much is done in user-mode.</p>
<p>Engineering Windows 7 Graphics Performance:<br />
<a href="https://blogs.msdn.microsoft.com/e7/2009/04/25/engineering-windows-7-graphics-performance/" rel="nofollow">https://blogs.msdn.microsoft.com/e7/2009/04/25/engineering-windows-7-graphics-performance/</a></p>
<p>Also this page might give you some idea about answer:<br />
<a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/display/rendering-on-a-discrete-gpu-using-cross-adapter-resources" rel="nofollow">https://docs.microsoft.com/en-us/windows-hardware/drivers/display/rendering-on-a-discrete-gpu-using-cross-adapter-resources</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-s-m-joshi-02 even depth-5" id="comment-1324695">
				<div id="div-comment-1324695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324695">
			February 12, 2018 at 2:47 pm</a>		</div>

		<p>Articles like this strongly suggest GDI is still in the Kernel. <a href="https://blog.quarkslab.com/reverse-engineering-the-win32k-type-isolation-mitigation.html" rel="nofollow">https://blog.quarkslab.com/reverse-engineering-the-win32k-type-isolation-mitigation.html</a></p>
<p>Apparently, there have been many exploits that relied on that fact.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1324385">
				<div id="div-comment-1324385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324385">
			February 9, 2018 at 8:18 am</a>		</div>

		<p>In the interlaced case is it hopping forward and back between two separate bitmaps for the odd and even fields?  On 80s systems I programmed the video controllers handed interlacing transparently, which made things easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1324395">
				<div id="div-comment-1324395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324395">
			February 9, 2018 at 8:26 am</a>		</div>

		<p>In about 1984 my friend John Butler told me about this fancy Windows BitBlt and credited Rao Remala with the design and implementation. I still remember John&#8217;s excitement when he uttered the strange sentence &#8220;And then it executes the stack!&#8221;. What a cool idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-iboyd odd alt thread-even depth-1 parent" id="comment-1324415">
				<div id="div-comment-1324415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324415">
			February 9, 2018 at 10:29 am</a>		</div>

		<p>I remember an old Michael Abrash article in Dr. Dobbs talking about WinG. (<a href="http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/1995/9514/9514f/9514f.htm" rel="nofollow">http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/1995/9514/9514f/9514f.htm</a>)</p>
<p>WinG gave developers a flat 32-bit bitmap model, with a fast, double-buffered, copy to the screen. He also mentioned that all the functionatilty was built into Windows NT &#8211; and so on NT it was a simple wrapper.</p>
<p>&gt; You see, Windows is a DOS extender, it provides driver support in a generally device-independent way, and it attracts far more drivers than any other platform. The only thing missing for real-time graphics is fast, direct, double-buffered graphics&#8211; or, rather, I should say &#8220;was,&#8221; because that gap is now filled by WinG (pronounced win-GEE), the software that made WinDOOM possible. WinG does nothing more or less profound than support fast, double-buffered drawing on Win 3.1, Win32s, and Win32, and that&#8217;s precisely the missing ingredient in making Windows an excellent real-time animation platform.<br />
&gt;<br />
&gt; I know what you&#8217;re thinking: Is that all? Is that what you&#8217;re getting so excited about? Well, yes. Think of it this way. Right now, if you want to do real-time, 256-color graphics above 320&#215;200 under DOS, you have to deal with the complexities of Mode X. If you want to go past 360&#215;480, you have to deal with supporting dozens of different SuperVGAs, and you have to handle banked video memory. You also have to do all the drawing yourself, including text. Furthermore, you have to deal with protected mode somehow, plus input handling, and all the rest.<br />
&gt;<br />
&gt; With WinG, the details of protected mode, devices, and input handling are handled by Windows, and 32-bit programming is a snap with Windows NT or Win32s or, soon, Windows 95, with tools galore available. Better yet, you can do all your drawing into a single, linear pixel buffer, with GDI&#8217;s help, if you&#8217;d like, and then WinG will copy or stretch that buffer to the screen at memory bandwidth. No banking, no Mode X, no mode-set complexities, just the big, linear pixel buffer with 32-bit addressing that you&#8217;ve always dreamed of&#8211;and Windows is everywhere nowadays, so we&#8217;re talking about a huge and rapidly growing installed base.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1324445">
				<div id="div-comment-1324445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Beldantazar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324445">
			February 9, 2018 at 12:04 pm</a>		</div>

		<p>Ah, the days before directx and gpu&#8217;s doing all the work for you far faster than the cpu ever could.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1324465">
				<div id="div-comment-1324465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324465">
			February 9, 2018 at 5:55 pm</a>		</div>

		<p>Microsoft&#8217;s strategy with gaming was actually pretty clever. The first stage was to get all the Dos games running on WinG with the &#8220;Windows as a Dos extender that lets you render into a linear framebuffer and then blast it to the screen&#8221; model Abrash was advocating. The second was to develop DirectX as an abstraction layer between games and the GPU so things like drawing a textured polygon could be hardware accelerated. </p>
<p>Pretty quickly Windows was a better platform for gaming than Dos was.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1324466">
				<div id="div-comment-1324466" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://stolk.org' rel='external nofollow' class='url'>Bram Stolk</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324466">
			February 9, 2018 at 8:18 pm</a>		</div>

		<p>Heh, takes me back.<br />
I used to do this too.<br />
Convert sprite-data into blit-code (even with alpha-transparency added.)<br />
I would convert it into x86 code, and load it as a shared object.</p>
<p>Later, I even ported it from x86 asm to a dec-alpha assembly system, because I had a toy dec-alpha running linux at the time.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1324545">
				<div id="div-comment-1324545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.solsoftsolutions.com' rel='external nofollow' class='url'>Mark S</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324545">
			February 11, 2018 at 7:46 pm</a>		</div>

		<p>You might enjoy this bit of craziness:  <a href="https://www.youtube.com/watch?v=vAHXK2wut_I" rel="nofollow">https://www.youtube.com/watch?v=vAHXK2wut_I</a><br />
Using the sprite positions *as* code in this intricate Super Mario World exploit</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1324475">
				<div id="div-comment-1324475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">i336_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324475">
			February 10, 2018 at 3:07 am</a>		</div>

		<p>It would be so awesome for the Windows 3.1 source code to become available someday. Windows 95 would be&#8230; I&#8217;d love to live to see that.</p>
<p>I&#8217;d love to see the full JIT routines in question &#8211; since that&#8217;s what this is! I&#8217;m very happy to learn that Windows 1.x (see other comment here) through Windows 95 and probably even NT used JIT techniques to manipulate the contents of the screen. Wow!</p>
<p>(A tangent on the subject of graphics: I want to do a feasibility study on making a (barebones) Win3.x driver for the Bochs GPU (which is very simple). I&#8217;ve timidly poked through the 3.1 DDK (which appears to have some reference code), but I can&#8217;t figure out what I&#8217;m looking at. I guess my first question is if I&#8217;d be able to shim everything and write the bulk of the code in C. End thread hijack &#8211; but I suspect that ONT could be the best place to ask this&#8230;)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1324485">
				<div id="div-comment-1324485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Elliott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324485">
			February 10, 2018 at 2:27 pm</a>		</div>

		<p>You can find source for the Windows 2.x version in the Windows 2 DDK &#8212; see, for example, vga-ega/cblt.asm.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1324476">
				<div id="div-comment-1324476" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324476">
			February 10, 2018 at 3:11 am</a>		</div>

		<p>Huh, and here was me thinking that the 256 ROP codes were handled by reversing the computation in the table at <a href="https://msdn.microsoft.com/en-us/library/aa932106.aspx" rel="nofollow">https://msdn.microsoft.com/en-us/library/aa932106.aspx</a> i.e. D = ROP &gt;&gt; 16 &gt;&gt; P * 4 &gt;&gt; S * 2 &gt;&gt; D &amp; 1 (except I was assuming it used some sort of optimised bit twiddling magic instead of computing it bit by bit).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1324495">
				<div id="div-comment-1324495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://stuartaxon.com' rel='external nofollow' class='url'>Stu</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324495">
			February 10, 2018 at 5:01 pm</a>		</div>

		<p>I seem to remember Executor, the Mac emulator did something similar for blitting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1324625">
				<div id="div-comment-1324625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1324625">
			February 12, 2018 at 8:35 am</a>		</div>

		<p>Now I don&#8217;t feel bad for my own trampolines on the stack.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1325265">
				<div id="div-comment-1325265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R P (MSFT)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1325265">
			February 15, 2018 at 9:57 am</a>		</div>

		<p>Can you shed some light on the low-order word of the predefined ROP codes? I have a vague memory that the SDK documentation used to say that it was opaque input to the code generator, but that might have been Petzold, Pietrek, Schulman, or someone else who said that.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>