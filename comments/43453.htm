<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1165423">
				<div id="div-comment-1165423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dasyatid1</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165423">
			December 8, 2014 at 7:28 am</a>		</div>

		<p>Lbh qvqa&#39;g hfr gur enk ertvfgre orpnhfr ba n cebprffbe fhccbegvat gung, lbh jbhyq unir nyernql unq n zhygvcyvpngvba lvryqvat bar uhaqerq gjragl rvtug ovgf sebz gjb fvkgl sbhe ovg ertvfgref angviryl ninvynoyr.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165433">
				<div id="div-comment-1165433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165433">
			December 8, 2014 at 7:36 am</a>		</div>

		<p>re. Exercise: You&#39;re writing 32-bit code, therefore have no access to the RAX register, otherwise you would have just used 64-bit operands and a single multiplication instruction in the first place!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165443">
				<div id="div-comment-1165443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">innocenat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165443">
			December 8, 2014 at 8:18 am</a>		</div>

		<p>Shouldn&#39;t it be</p>
<p>&nbsp; &nbsp;add &nbsp; &nbsp;result[4], eax</p>
<p>&nbsp; &nbsp;adc &nbsp; &nbsp;result[8], edx</p>
<p>&nbsp; &nbsp;adc &nbsp; &nbsp;result[12], 0</p>
<p>? I think we need to carry the first term too?</p>
<div class="post">[<em>Good catch. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165453">
				<div id="div-comment-1165453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scooby Doo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165453">
			December 8, 2014 at 8:44 am</a>		</div>

		<p>Is ROT13 common on this board, or is Dasyatid1 a geocacher?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx even thread-even depth-1" id="comment-1165463">
				<div id="div-comment-1165463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165463">
			December 8, 2014 at 9:36 am</a>		</div>

		<p>I see that it IS ROT13. At first I thought it was just insane gibbering.</p>
<p>Luckily I remembered the arcane Unix incantation: tr &#39;[A-Za-z]&#39; &#39;[N-ZA-Mn-za-m]&#39;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165473">
				<div id="div-comment-1165473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EduardoS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165473">
			December 8, 2014 at 9:56 am</a>		</div>

		<p>I need to benchmark but I suspect there are more efficient ways of doing this</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165483">
				<div id="div-comment-1165483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Colin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165483">
			December 8, 2014 at 10:02 am</a>		</div>

		<p>I just thought it was a reference to all the movdqa, pmuludq, punpckldq making the post look like gibberish.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165493">
				<div id="div-comment-1165493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165493">
			December 8, 2014 at 1:23 pm</a>		</div>

		<p>For the signed portion of the question, I think that the below shorter code will work. &nbsp;Whether it&#39;s faster, I have no idea. &nbsp;It uses the following identity, which is true assuming signed overflow is well-defined as wraparound: 1 + ~a == -a. &nbsp;To complete the explanation behind it, NOT is the same as XOR with all 1&#39;s (-1) and subtracting -1 is the same as adding 1.</p>
<p>mov eax, [x + 4] &nbsp;// high dword of x</p>
<p>mov edx, [y + 4] &nbsp;// high dword of y</p>
<p>xor eax, edx &nbsp;// XOR the sign bits</p>
<p>sra eax, 31 &nbsp;// ((x &lt; 0) ^ (y &lt; 0)) ? -1 : 0</p>
<p>xor [result + 8], eax</p>
<p>xor [result + 12], eax</p>
<p>sub [result + 8], eax</p>
<p>sbb [result + 12], eax</p>
<p>I tried running the original code and was not getting a correct answer in result dwords 1 and 2 out of 0-3. &nbsp;Thus, I haven&#39;t tested mine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1165503">
				<div id="div-comment-1165503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165503">
			December 8, 2014 at 5:57 pm</a>		</div>

		<p>Once in a while, you&#39;d find that you missed the ROT13 encoder that comes with Outlook Express.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165513">
				<div id="div-comment-1165513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165513">
			December 8, 2014 at 8:38 pm</a>		</div>

		<p>&quot;Luckily I remembered the arcane Unix incantation&quot;</p>
<p>Fortunately, you are also (presumably) using a web browser to read this page, so you could paste that text into the textbox at rot13.com and get the result.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165523">
				<div id="div-comment-1165523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165523">
			December 9, 2014 at 1:30 am</a>		</div>

		<p>@RickC: &#8230; you could paste that text into the textbox at rot13.com and get the result.</p>
<p>M-x rot13-region</p>
<p>M-x all-hail-emacs</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165533">
				<div id="div-comment-1165533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165533">
			December 9, 2014 at 2:32 am</a>		</div>

		<p>SFU for Windows XP didn&#39;t like that tr incantation for some reason, I had to use tr A-Ma-mN-Zn-z N-Zn-zA-Ma-m instead. (The square brackets are only needed for System V compatibility.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165563">
				<div id="div-comment-1165563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165563">
			December 9, 2014 at 7:05 am</a>		</div>

		<p>Thanks! I knew I was missing something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1165613">
				<div id="div-comment-1165613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165613">
			December 9, 2014 at 8:13 am</a>		</div>

		<p>I found this an interesting read and it made me wonder if I could do a similar trick with my 16-bit microcontroller that has an MPY32 peripheral (32&#215;32=64 with 16-bit register interfaces). Then I wondered &quot;What the heck would I do with a 128-bit number on a 16-bit MCU?&quot; Not to mention figuring out how to represent it since the compiler tops out at 64-bit long long.</p>
<p>Certainly a trick to remember though, it may be useful in trying to implement a constant-time Curve25519 ECC computation algorithm&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165543">
				<div id="div-comment-1165543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165543">
			December 9, 2014 at 5:19 am</a>		</div>

		<p>Re ROT13: &quot;Leetkey&quot; addon for Firefox.</p>
<p>I&#39;m confused by this:</p>
<p>&nbsp;movq xmm1, y &nbsp; &nbsp; &nbsp; &nbsp; // xmm1 = { 0, 0, C, D } = { *, *, C, D }</p>
<p>&nbsp;&#8230;</p>
<p>&nbsp;punpckldq xmm1, xmm1 // xmm1 = { C, C, D, D } = { *, C, *, D }</p>
<p>&nbsp;pshufd xmm2, xmm1, _MM_SHUFFLE(2, 0, 3, 1)</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // xmm2 = { D, D, C, C } = { *, D, *, C }</p>
<p>Specifically, why is the unpack necessary? Can&#39;t you just shuffle {0,0,C,D} to {0,D,0,C} directly? (I honestly don&#39;t know &#8211; I&#39;ve never played with SSE at all.)</p>
<div class="post">[<em>Yes, I could&#39;ve done that, but I also need <code>xmm1 = { *, C, *, D }</code> for the <code>pmuludq xmm1, xmm0</code> that follows. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165833">
				<div id="div-comment-1165833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1165833">
			December 9, 2014 at 6:47 pm</a>		</div>

		<p>&quot;M-x rot13-region</p>
<p>M-x all-hail-emacs&quot;</p>
<p>Sure, but then I&#39;d have to use Emacs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1166133">
				<div id="div-comment-1166133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1166133">
			December 10, 2014 at 11:55 pm</a>		</div>

		<p>@Brian_EE</p>
<p>Not only can you do it with a 32&#215;32 hardware multiplier peripheral, but you can also do it by recursively simulating each 32&#215;32 multiply with 16&#215;16 multiplies! (Is your mind blown yet?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166143">
				<div id="div-comment-1166143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward (again)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1166143">
			December 10, 2014 at 11:57 pm</a>		</div>

		<p>@Brian_EE</p>
<p>Also, you would store a 128-bit number with something like:</p>
<p>struct int128 {long long low, high;};</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1166173">
				<div id="div-comment-1166173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1166173">
			December 11, 2014 at 5:35 am</a>		</div>

		<p>Anonymous Coward (again): You probably want the low 64 bits to be unsigned:</p>
<p>struct int128 {unsigned long long low; long long high;};</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1166403">
				<div id="div-comment-1166403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141208-00/?p=43453#comment-1166403">
			December 12, 2014 at 7:13 am</a>		</div>

		<p>@Anonymous Coward: Yes, I know that I could use a struct to build my own data type for 128 bits. But then I also have to create all my own operators (such as addition etc) to manipulate it. The compiler tops out at 64 bits for compiler-generated operations. There is still the &quot;what would I use this for&quot; aspect in the low-power MCU world.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>