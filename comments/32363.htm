<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-343833">
				<div id="div-comment-343833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carlos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060207-08/?p=32363#comment-343833">
			February 7, 2006 at 11:00 am</a>		</div>

		<p>&quot;If nâ‰¥0 and m&gt;0, then floor_div(n,m) = n/m where / is the C integer division operator&quot;</p>
<p>The equality doesn&#8217;t hold when n&lt;0 because the C integer division and modulus operators are broken by design: even the basic identities (a+m)/m=(a/m)+1 and (a+m)%m=a%m (for m&gt;0) don&#8217;t hold. &nbsp;This has been briefly discussed on your blog before (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2005/05/31/423407.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2005/05/31/423407.aspx</a>) but I&#8217;m still curious: does anyone know why this is broken and has anyone ever found the brokenness useful? &nbsp;Or why every other computer language seems to have the same problem?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-343873">
				<div id="div-comment-343873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060207-08/?p=32363#comment-343873">
			February 7, 2006 at 12:47 pm</a>		</div>

		<p>I don&#8217;t know for sure why C works that way, but I&#8217;m going to guess that it was because it was easier to implement them that way on the PDP-6, or something like that.</p>
<p>I&#8217;m also guessing that most other languages have the same issues because they&#8217;re pretty much built on C these days. &nbsp;Either their interpreter uses C code to do the actual division, or their compiler generates C-equivalent machine language. &nbsp;(The language might even compile &quot;through&quot; C, like some early C++ compilers did, and C-Intercal still does.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-343883">
				<div id="div-comment-343883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060207-08/?p=32363#comment-343883">
			February 7, 2006 at 12:48 pm</a>		</div>

		<p>Probably because -3 &gt;&gt; 1 = -2 with 2&#8217;s complement math.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-343913">
				<div id="div-comment-343913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060207-08/?p=32363#comment-343913">
			February 7, 2006 at 1:58 pm</a>		</div>

		<p>The standard is unclear on these mathematical topics because ANSI C at least was to be an federation of existing practices more than defining a whole new language.</p>
<p>Prior to ANSI C the general rule was that the C compiler should do the right thing for the physical machine that it was targetting. &nbsp;Each operation should have a direct predictable performance impact. &nbsp;(Thus the usual comment that C is just &quot;portable assembly&quot;.)</p>
<p>Even then, it was really up to the whim of the compiler author. &nbsp;Few early compilers actually would test the performance of various code sequences to figure out the best to generate; there is/was a very general mental model of &quot;fewer instructions means faster&quot; which was often the case before good caches and faster memory. &nbsp;This is still the case if you compare a few contemporary &quot;new&quot; popular architectures, say in the 64 bit world.</p>
<p>When the committee met and basically vendor A said &quot;it has to work &gt;this&lt; way or all my existing code will break!&quot; and vendor B made the same claim about the opposite implementation, the committee unified what it could and left the rest as an implementation detail.</p>
<p>e.g. 12%10==2 no matter what but -12%10 may yield any number of different answers. &nbsp;(Common answers include: 2, -2, 8. &nbsp;8 is, I believe, exceedingly rare even if it is the mathematically expected one for modulus arithmetic.)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-343933">
				<div id="div-comment-343933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060207-08/?p=32363#comment-343933">
			February 7, 2006 at 3:01 pm</a>		</div>

		<p>Ouch &#8211; all this math&#8230;</p>
<p>Raymond, has Eric Lippert taken over your blog today?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-343943">
				<div id="div-comment-343943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://demosaic.blogspot.com' rel='external nofollow' class='url'>Mike</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060207-08/?p=32363#comment-343943">
			February 7, 2006 at 3:43 pm</a>		</div>

		<p>Michael Grier wrote:<br />
<br />&quot;e.g. 12%10==2 no matter what but -12%10 may yield any number of different answers. &nbsp;(Common answers include: 2, -2, 8. &nbsp;8 is, I believe, exceedingly rare even if it is the mathematically expected one for modulus arithmetic.)&quot;</p>
<p>If you want to compute a % b as a positive number between 0 and b, and preserve the rule that a % b is congruent to (a + b) % b for all a, including a &lt; 0, then you can substitute where a &lt; 0: (b &#8211; (-a % b)) % b</p>
<p>I did not compile and test the above operation. It is my assumption that you know what I mean, and perhaps the compiler does too (compiling and testing would prove it one way or the other, as would looking up operator precedence).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-343973">
				<div id="div-comment-343973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060207-08/?p=32363#comment-343973">
			February 7, 2006 at 6:53 pm</a>		</div>

		<p>The problem is that the compilers do not guarantee this in general. &nbsp;I believe that the behavior of % when either of its operands is &quot;implementation defined&quot; which means that it&#8217;s whatever the compiler vendor says it is. &nbsp;It could format your hard drive as long as it was documented to do so. &nbsp;;-)</p>
<p>There are/were additional standards for numerical processing in C but they were not widely adopted and I don&#8217;t believe that anyone &quot;fixed&quot; this for C++ given that for the longest time C++&#8217;s design was constrained to be able to be a preprocessor (cfront et al.) before handing off the generated code to a &quot;real&quot; C compiler.</p>
<p>Sure I understand what it means (or should mean to a mathematician) but I don&#8217;t know how many times I&#8217;ve had people at my whiteboard during interview questions who expect that &quot;(-12 % 10) == 2&quot;. &nbsp;(That&#8217;s about the worst answer possible even if it is what they are hoping for in the context.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-343813">
				<div id="div-comment-343813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060207-08/?p=32363#comment-343813">
			February 7, 2006 at 11:00 am</a>		</div>

		<p>But the all too common problem of this is when lazy programmers naively do these kind operations on a finite set of numbers when they never restrict the input to a valid range. Lots of times you have to handle the edge cases explicitly or do a robust rewrite like <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2004/08/12/213468.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2004/08/12/213468.aspx</a> :</p>
<p>p &gt;= buffer &amp;&amp; p &#8211; buffer &lt; BUFFER_SIZE</p>
<p>to</p>
<p>p &gt;= buffer &amp;&amp; p &lt; buffer + BUFFER_SIZE</p>
<p>(*every* STL implementation I&#8217;ve seen has a bug like this in their _adjust_heap (or whatever) helper function that calculates index = 2*(index + 1) but they never make sure that calculation doesn&#8217;t overflow)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-344003">
				<div id="div-comment-344003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://demosaic.blogspot.com' rel='external nofollow' class='url'>Mike</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060207-08/?p=32363#comment-344003">
			February 7, 2006 at 10:24 pm</a>		</div>

		<p>I was discussing this with a friend over lunch and he pointed out that several languages have modulus operators and remainder operators, and LISP (he&#8217;s a big fan) has both.</p>
<p>Whether the % is implemented as mod or remainder (probably depends upon the CPU instruction set available), the expression I gave above (with the appropriate parentheses to garuntee precedence) would make the behavior more consistent with a mathematical modulus operator.</p>
<p>int mod( int a, int b )<br />
<br />{<br />
<br /> &nbsp; if( b &lt;= 1 ) return 0;<br />
<br /> &nbsp; if( a &gt;= 0 ) return a % b;<br />
<br /> &nbsp; return (b &#8211; (-a % b) ) % b;<br />
<br />}</p>
<p>bool testMod()<br />
<br />{<br />
<br /> &nbsp; int min = 2, max = 25;<br />
<br /> &nbsp; for( int b = min; b &lt; max; ++b )<br />
<br /> &nbsp; {<br />
<br /> &nbsp; &nbsp; &nbsp;int test = 5 * b;<br />
<br /> &nbsp; &nbsp; &nbsp;for( int a = -test; a &lt; test; ++a )<br />
<br /> &nbsp; &nbsp; &nbsp;{<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp; if( mod( a, b ) != mod( a + b, b ) )<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return false;<br />
<br /> &nbsp; &nbsp; &nbsp;}<br />
<br /> &nbsp; }<br />
<br /> &nbsp; return true;<br />
<br />}</p>
<p>I find that it&#8217;s nice always nice to have a clean scratch project on my dev boxes for when I get curious about the behavior of the compiler. Maybe it would be good for interviews to have something similarly prepared.</p>
<p>It might make for a quick and easy warm-up interview question to ask an interviewee to implement mod without using the remainder operator (telling them that they can use +, -, * and / would be a hint if they got stuck on what it was that they were trying to do).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-344033">
				<div id="div-comment-344033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060207-08/?p=32363#comment-344033">
			February 7, 2006 at 11:55 pm</a>		</div>

		<p>Modulus *is* a remainder, it just depends on how you round after division.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-344043">
				<div id="div-comment-344043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060207-08/?p=32363#comment-344043">
			February 8, 2006 at 1:16 am</a>		</div>

		<p>C89/C++ can pick between two rounding modes for division: truncation aka round towards 0 (i.e. -12 / 10 == -1) or floor aka round towards -Inf (i.e. -12 / 10 == -2). C99 requires round towards 0, which most hardware uses since fortran required it and it&#8217;s easier to implement (since -a/b == -(a/b)) if they even bother dedicating transistors for it at all. If you *really* want the round towards 0 guarantee then use the div() function but be prepared to take a speed hit since compilers usually don&#8217;t inline it or make it an intrinsic and since most people dynamically link the C runtime, not even whole program optimization can save you. Now since C requires (a/b)*b + a%b == a,</p>
<p>with round towards 0 you get the remainder:<br />
<br />(-12/10)*10 + -12%10 == -12<br />
<br />-1*10 + -12%10 == -12<br />
<br />-10 + -12%10 == -12<br />
<br />-12%10 == -2</p>
<p>with round towards -Inf you get the modulus:<br />
<br />(-12/10)*10 + -12%10 == -12<br />
<br />-2*10 + -12%10 == -12<br />
<br />-20 + -12%10 == -12<br />
<br />-12%10 == 8</p>
<p>(2 can never be an answer on a non-broken implementation). It&#8217;s ridiculously easy to get round towards -Inf with round towards 0:</p>
<p>div_t divmod(int a, int b)<br />
<br />{<br />
<br />	div_t ret;<br />
<br />	ret.quot = a/b &#8211; (a%b &lt; 0);<br />
<br />	ret.rem = a &#8211; b*ret.quot;<br />
<br />	return ret;<br />
<br />}<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-345203">
				<div id="div-comment-345203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://merle_.livejournal.com/' rel='external nofollow' class='url'>Merle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060207-08/?p=32363#comment-345203">
			February 11, 2006 at 10:48 am</a>		</div>

		<p>&lt;em&gt;&quot;Those of you who&#8217;ve played with a Rubik&#8217;s Cube are well familiar this technique: If you have a move that, say, flips two adjacent edges, but you want to flip two edges that aren&#8217;t adjacent, you can still accomplish this by manipulating the cube until the two edges are adjacent, perform the flip move, then undo the steps you performed to get the edges adjacent in the first place.&quot;&lt;/em&gt;</p>
<p>This is a &lt;b&gt;very&lt;/b&gt; useful thing to know. &nbsp;It has allowed me to solve cubes (or other solids) that I do not actually understand. &nbsp;There was a dodecahedral Rubik&#8217;s thing, with some 62 pieces. &nbsp;All I needed to learn was how to swap two edge pieces and two corner pieces, and the rest was just &quot;manipulate the cube so the pieces are in the right place, perform the operation, and de-manipulate them&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>