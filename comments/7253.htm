<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-995013">
				<div id="div-comment-995013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995013">
			June 29, 2012 at 7:09 am</a>		</div>

		<p>Could you require all functions to be 2-byte aligned so that you could repurpose the bottom bit of the IP for another bit of selector?</p>
<div class="post">[<i>Wouldn&#39;t be much help here because we are patching return addresses, not function entry points. You would have to require all return addresses to be 2-byte aligned, which given the 8086 instruction set, would be expensive to enforce. (&quot;Why is there a NOP immediately before half of my function calls?&quot;) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995073">
				<div id="div-comment-995073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mijzelf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995073">
			June 29, 2012 at 8:05 am</a>		</div>

		<p>The stack is 16 bits wide, so the pointer to the next stackframe has one bit left. (Actually more, I suppose. With a 64kB stack I suppose the frames were never 32kB from each other, so the most significant bit could be stripped either.</p>
<div class="post">[<i>The bottom bit of the pointer to the next stack frame was already being used: &quot;We saw some time ago that the BP register associated with far calls was incremented before being pushed on the stack.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995083">
				<div id="div-comment-995083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995083">
			June 29, 2012 at 8:13 am</a>		</div>

		<ul>
<li>The second thing you do is push the DS register. (DS is the data segment register, which holds a segment containing data the caller function wanted to be able to access.) </li>
</ul>
<p>Wow I dodged a bullet by not supporting Real Mode Windows. I had <em>no idea</em> you had to do that when programming targeting 16 bit Windows. Win 3.1 didn&#39;t seem to care.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995103">
				<div id="div-comment-995103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mijzelf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995103">
			June 29, 2012 at 8:43 am</a>		</div>

		<p>[quote][The bottom bit of the pointer to the next stack frame was already being used: &quot;We saw some time ago that the BP register associated with far calls was incremented before being pushed on the stack.&quot; -Raymond][/quote]</p>
<p>True, but you already know it was a far call, right? For a near call the stack wouldn&#39;t have to be patched, as the code segment wouldn&#39;t be swapped away with running code in it.</p>
<div class="post">[<i>The way we knew it was a far call was by checking the bottom bit! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995133">
				<div id="div-comment-995133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995133">
			June 29, 2012 at 8:49 am</a>		</div>

		<p>You can have two different entry points to the return thunk for almost the price of one, if you prefix the actual code with a single-byte INC BP instruction. The called function&#39;s epilogue will already have reset the low bit of BP to 0, so now it can be used as a local temporary in the return-fixup code, remembering whether the INC BP was executed or not while we save the user code&#39;s register values. Voil&agrave;! we then have freedom to choose 13 bits of the return offset.</p>
<div class="post">[<i>That is brilliant. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995153">
				<div id="div-comment-995153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SMW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995153">
			June 29, 2012 at 9:05 am</a>		</div>

		<p>I can&#39;t tell whether Raymond&#39;s reply to Henning is sincere or sarcastic.</p>
<div class="post">[<i>Sincere. He found another bit of air that could be squeezed out. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995163">
				<div id="div-comment-995163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zwieback</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995163">
			June 29, 2012 at 9:31 am</a>		</div>

		<p>Real-mode Windows was the real innovation, once we switched over to protected mode we just used what Intel gave us. Not that I wish those day back&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995193">
				<div id="div-comment-995193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995193">
			June 29, 2012 at 10:29 am</a>		</div>

		<p>I can see a possible problem with this system: Suppose the DS index is 0xFFF and the return thunk&#39;s physical address is 0x1234F (or anything else that ends with a high nybble). The thunk will be invoked by returning to 0235:FFFF, but this will likely crash because code execution wraps around to 0235:0000.</p>
<p>This could be fixed either by limiting the number of segments to 4095 instead of 4096, or by aligning return thunks so they never need to cross from one 16-byte paragraph to the next.</p>
<div class="post">[<i>I glossed over many tiny details. This is one of them. But +1 on you for noticing. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995203">
				<div id="div-comment-995203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995203">
			June 29, 2012 at 10:36 am</a>		</div>

		<p>@Joshua, when Raymond says &quot;you&quot; he didn&#39;t mean you per se. &nbsp;The compiler took care of a lot of this for you; IIRC the main thing you had to do was make sure no functions or individual data items (like an array) were bigger than 64KB. &nbsp;In particular, the compiler inserted all that function prolog/epilog stuff for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995213">
				<div id="div-comment-995213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995213">
			June 29, 2012 at 11:00 am</a>		</div>

		<p>[Wouldn&#39;t be much help here because we are patching return addresses, not function entry points. You would have to require all return addresses to be 2-byte aligned, which given the 8086 instruction set, would be expensive to enforce. (&quot;Why is there a NOP immediately before half of my function calls?&quot;) -Raymond]</p>
<p>I was obviously not thinking clearly when I wrote that. &nbsp;If we were dealing with a fixed-width instruction set (like many RISC ISAs), we could be sure of instruction alignment for all return addresses, but yeah, imposing that on x86 would be a bad idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995233">
				<div id="div-comment-995233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995233">
			June 29, 2012 at 11:14 am</a>		</div>

		<p>@Rick C: I dabbled in 16 bit assembly language.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995273">
				<div id="div-comment-995273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995273">
			June 29, 2012 at 1:35 pm</a>		</div>

		<p>@Joshua, so did I, but I targetted DOS not Windows, to avoid that stuff.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995143">
				<div id="div-comment-995143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/stephen.oberholtzer_4000_freedompay.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>stephen.oberholtzer@freedompay.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995143">
			June 29, 2012 at 8:51 am</a>		</div>

		<p>I don&#39;t know how &quot;small&quot; this change is, but&#8230;</p>
<p>As I understand it, *after* being patched, the pushed values look like this:</p>
<p>DS = original return IP</p>
<p>CS:IP = Address of return thunk, directly encoding 12 bits of the original DS, and indirectly encoding the original CS (by way of pointing to the return thunk for that CS).</p>
<p>Therefore, the remaining 4 bits of DS must be derivable from the preserved 12 bits (the easiest way is probably to make them all 0 or 1).</p>
<p>To push up to 8192 values, I would have two copies of each return thunk (or at least, two entry points for each thunk.) If DS is even, use thunk #1; if odd, use thunk #2:</p>
<p>mov bx, dword ptr [thunk_entry_point]</p>
<p>mov ax, ds</p>
<p>; not sure if this is better or worse than a test-jz</p>
<p>and ax, &nbsp;1</p>
<p>not ax</p>
<p>inc ax</p>
<p>and ax, THUNK2_OFFSET</p>
<p>add bx, ax</p>
<div class="post">[<i>Having two return thunks is the solution I had in mind. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995323">
				<div id="div-comment-995323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995323">
			June 29, 2012 at 8:53 pm</a>		</div>

		<blockquote><p>
  [self] Wow I dodged a bullet by not supporting Real Mode Windows.
</p></blockquote>
<p>I went back and checked. None of my assembly functions ever yielded so I was safe anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995353">
				<div id="div-comment-995353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995353">
			June 30, 2012 at 4:15 am</a>		</div>

		<p>@Joshua: Including not calling far functions in discardable segments?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995363">
				<div id="div-comment-995363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995363">
			June 30, 2012 at 7:40 am</a>		</div>

		<p>@Neil: As it happened, yes. (I&#39;m assuming kernel is not discardable.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995573">
				<div id="div-comment-995573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995573">
			July 2, 2012 at 12:34 pm</a>		</div>

		<p>@Myria: Windows doesn&#39;t need to fix it &#8211; this is a call, not a return. The function has its own dedicated INT 3F thunk (as described in <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2012/06/22/10322767.aspx" rel="nofollow">blogs.msdn.com/&#8230;/10322767.aspx</a>) which &quot;meow&quot; will point to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995543">
				<div id="div-comment-995543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995543">
			July 2, 2012 at 12:25 pm</a>		</div>

		<p>How were far function pointers stored as local variables on the stack handled?</p>
<p>void (__far *meow)() = SomeFunction;</p>
<p>SomeOtherFunction();</p>
<p>(*meow)();</p>
<p>How could the Windows kernel fix the copy of &quot;meow&quot; saved to the stack during the SomeOtherFunction call? &nbsp;Specifically, how did the kernel know about it in the stack trace?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995673">
				<div id="div-comment-995673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995673">
			July 2, 2012 at 8:14 pm</a>		</div>

		<p>Dare I ask what happens when somebody does a longjmp into a discardable segment?</p>
<div class="post">[<em><a href="http://blogs.msdn.com/b/oldnewthing/archive/2014/01/03/10486694.aspx" rel="nofollow">Sure</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>