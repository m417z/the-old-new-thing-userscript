<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1112593">
				<div id="div-comment-1112593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112593">
			March 14, 2014 at 7:18 am</a>		</div>

		<p>IFileOperation::DeleteItems is also documented to accept a IPersistIDList and I assume this is more efficient than creating an array that you are just going to throw away?</p>
<div class="post">[<em>But IPersistIDList represents only one item, which doesn&#39;t help if you want to delete multiple. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1112603">
				<div id="div-comment-1112603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jschroedl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112603">
			March 14, 2014 at 7:45 am</a>		</div>

		<p>Very nice &#8211; love the shell articles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1112623">
				<div id="div-comment-1112623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">T</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112623">
			March 14, 2014 at 7:53 am</a>		</div>

		<p>Looks handy, but may I ask why you&#39;re naming variables like this? ppsia, rgt, cpidl, rgpidl&#8230; Is it really a matter of getting used to? Because to me, it looks like deliberately obfuscated code.</p>
<div class="post">[<em>The shell historically uses so-called Hungarian Notation. ppsia = pointer to pointer to shell item array. rgt = range (array) of t. cpidl = count of pointer to id list. rgpidl = range (array) of pointer to id list. Once you get used to it, you spend pretty much zero time thinking about variable names. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1112663">
				<div id="div-comment-1112663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112663">
			March 14, 2014 at 9:02 am</a>		</div>

		<p>@Raymond, but Hungarian notation is prefixing names with type indications (mostly worthless for an explicitly statically typed language, anyway). &nbsp;Where are the actual names?</p>
<div class="post">[<em>They don&#39;t have names. If there&#39;s only one item array, you don&#39;t need to give it a name. It&#39;s just &quot;the item array&quot;. A non-Hungarian system would call it shellItemArray. Hungarian calls it sia. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1112673">
				<div id="div-comment-1112673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112673">
			March 14, 2014 at 9:16 am</a>		</div>

		<p>@T, that&#39;s Hungarian notation ( <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/aa260976.aspx">msdn.microsoft.com/&#8230;/aa260976.aspx</a> yes, that&#39;s 1999), and Hungarian notation alone.</p>
<p>ppsia: [p]ointer to [p]ointer to I[S]hell[I]tem[A]rray</p>
<p>rgt: [r]an[g]e of [T]</p>
<p>cpidl: [c]ount of [p]ointer to an item [id]entifier [l]ist (Introduction to the Shell Namespace <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/cc144090.aspx">msdn.microsoft.com/&#8230;/cc144090.aspx</a> ; ITEMIDLIST structure <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb773321.aspx">msdn.microsoft.com/&#8230;/bb773321.aspx</a> )</p>
<p>rgpidl: [r]an[g]e of [p]ointer to an item [id]entifier [l]ist</p>
<p>This is a little program, so I guess you&#39;ll have to &quot;just suck it&quot; ( <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/10/10424662.aspx">blogs.msdn.com/&#8230;/10424662.aspx</a> ).</p>
<p>But if it were actually committed/checked-in code, it would certainly ring a bell aound some places where you can&#39;t even code an iteration in a slightly different way, much less not have descriptive parameters and variables.</p>
<p>I guess this is the software parallel of mathematical symbols, but they &quot;solve&quot; their 1 character limit and lack of namespaces with extra alphabets and typesetting.</p>
<p>Oh wait, there&#39;s APL which allows you to do both!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1112703">
				<div id="div-comment-1112703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112703">
			March 14, 2014 at 12:37 pm</a>		</div>

		<p>@Raymond: I meant in a loop of course:</p>
<p>for (int i = 1; i &lt; 3; ++i)</p>
<p>{</p>
<p>TCHAR path[MAX_PATH+20];</p>
<p>wsprintf(path+GetTempPath(MAX_PATH, path), _T(&quot;file%d.tmp&quot;), i);</p>
<p>IPersistIDList*ppil = CreateIPersistIDList(path);</p>
<p>if (ppil) spfo-&gt;DeleteItems(ppil), ppil-&gt;Release();</p>
<p>}</p>
<p>spfo-&gt;PerformOperations();</p>
<p>Maybe IFileOperation has a vector of the different operations and in the end this method has more overhead, I don&#39;t know&#8230;</p>
<div class="post">[<em>Interesting, hadn&#39;t occurred to me to submit multiple operations. Yeah, that should work fine. But then I don&#39;t get to show how to create an array of items (sob). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1112793">
				<div id="div-comment-1112793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112793">
			March 15, 2014 at 4:57 am</a>		</div>

		<p>I thought it was interesting that you&#39;re using C++ features like scope guards (CCoInitialize), template functions and smart pointers, but you&#39;re using new[]/delete[] over vector&lt;&gt;. I&#39;m guessing this is for the (std::nothrow): is most of the code you write kernel-side with strict rules about not leaking or even throwing C++ exceptions?</p>
<p>Heck, if you made it a vector&lt;unique_ptr&lt;IDLIST_ABSOLUTE, CoTaskMemFree&gt;&gt; you wouldn&#39;t even have to manually free them, but annoyingly unique_ptr doesn&#39;t let you (safely) get a pointer to it&#39;s member so you&#39;d have to initialize a raw then assign to the unique_ptr, which sucks.</p>
<div class="post">[<em>My background is in Win32 platform code, and in Win32, C++ exceptions are not allowed to escape because they are not part of the ABI. I don&#39;t know how this code is going to be reused, so I play it safe and write exception-free code. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>