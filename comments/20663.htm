<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-673063">
				<div id="div-comment-673063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081003-00/?p=20663#comment-673063">
			October 3, 2008 at 11:06 am</a>		</div>

		<p>Although the linked text is in the &quot;Windows Driver Kit&quot; section of MSDN, there are functions in Win32 as for example:</p>
<p>InterlockedCompareExchangeAcquire</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms683564" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms683564</a>(VS.85).aspx</p>
<p>&quot;implemented using a compiler intrinsic where possible. For more information, see the header file and _InterlockedCompareExchange_acq.&quot;</p>
<p>Which means that if you see that your compiler does indeed generate intrinsic code it will work even on Windows XP, even if MSDN entry states: &quot;Requires Requires Windows Vista, Windows Server 2008 or Windows Server 2003.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673083">
				<div id="div-comment-673083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081003-00/?p=20663#comment-673083">
			October 3, 2008 at 11:41 am</a>		</div>

		<p>Some of the interlockXXX functions are useful to do things atomically with out the overhead of other sync objects..</p>
<p>But what&#8217;s the difference between this example, a critical section, semaphore, wait object, etc ? Usually when I need a sync primitive, I see the various options win32 offers and haven&#8217;t seen a differentiation of why the differences or in what cases you&#8217;d want one over the other, etc..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673093">
				<div id="div-comment-673093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081003-00/?p=20663#comment-673093">
			October 3, 2008 at 12:08 pm</a>		</div>

		<p>BTW, the documentation on the intrinsics used says they are only available on Itanium (ia64).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673123">
				<div id="div-comment-673123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081003-00/?p=20663#comment-673123">
			October 3, 2008 at 12:27 pm</a>		</div>

		<p>Nathan: &quot;But what&#8217;s the difference between this example, a critical section, semaphore, wait object, etc ?&quot;</p>
<p>Read The F MSDN&#8230; You&#8217;ll find everything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673173">
				<div id="div-comment-673173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081003-00/?p=20663#comment-673173">
			October 3, 2008 at 2:51 pm</a>		</div>

		<p>Oh I&#8217;ve read the MSDN. Haven&#8217;t needed to use one in about 6 months, but last time I looked and thought &#8212; what really is the difference ? Named objects if you need to share a sync object between processes, but otherwise.. Shades of grey..</p>
<p>All your college books ever had were monitors and semaphores for locks, and you could build more complex things like reader or writer priority syncs etc. But the MSDN, at last recall, didn&#8217;t make a good case for why you&#8217;d use one win32 sync primitive over another. (OK, I&#8217;ll admit, I needed to wake all waiters, so an event was the best solution, but I&#8217;ll stick with shades of grey)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673183">
				<div id="div-comment-673183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081003-00/?p=20663#comment-673183">
			October 3, 2008 at 3:35 pm</a>		</div>

		<p>@Nathan_works:</p>
<p>Here are some cases where it&#8217;s easier to decide which primitive to use:</p>
<p>Scenario: I need to have a certain number of readers or writers processing at the same time, after which more readers/writers will have to wait.</p>
<p>Primitive: Use a counted semaphore.</p>
<p>Scenario: I&#8217;d like thread A to not use resources, and only wake up when something happens on thread B.</p>
<p>Primitive: Use an event.</p>
<p>Scenario: I&#8217;d like to protect a section of code or data from two threads running at the same time.</p>
<p>Primitive: Use a critical section or mutex.</p>
<p>Scenario: I&#8217;m building an operating system, and would like to make some high level primitives for use in my API.</p>
<p>Primitive: Use the CPU&#8217;s locking techniques (which are what InterlockedXXX mostly do).</p>
<p>This is by no means an exhaustive list, just some ideas.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673193">
				<div id="div-comment-673193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081003-00/?p=20663#comment-673193">
			October 3, 2008 at 5:38 pm</a>		</div>

		<p>Nathan: you use spinlocks (the code in the example) for short-lived locking on multiprocessor machines, because spinlocks don&#8217;t put the thread to sleep</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673283">
				<div id="div-comment-673283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081003-00/?p=20663#comment-673283">
			October 4, 2008 at 2:15 am</a>		</div>

		<p>Another place for the interlock spinlock are for places where you may have to work with an interrupt handler.</p>
<p>If you do apps programming &#8211; stick to the API locking mechanisms. In that case, the kernel handles everything for you in the background, putting your thread to sleep if necessary.</p>
<p>Inside the kernel though, you start having to worry about the semantics of your locking. Sometimes, sleeping isn&#8217;t an option and you have to do a spinlock. Or maybe you&#8217;re sharing a critical section with an interrupt handler. Or code that switches IRQL &#8211; some synchronization primitives only work at certain levels.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673413">
				<div id="div-comment-673413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">quotemstr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081003-00/?p=20663#comment-673413">
			October 6, 2008 at 10:09 am</a>		</div>

		<p>I love convergent evolution. Linux&#8217;s memory barriers work much the same way: <a rel="nofollow" target="_new" href="http://kerneltrap.org/node/6431" rel="nofollow">http://kerneltrap.org/node/6431</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673443">
				<div id="div-comment-673443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antti Huovilainen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081003-00/?p=20663#comment-673443">
			October 6, 2008 at 2:41 pm</a>		</div>

		<p>@quotemstr:</p>
<p>That&#8217;s because the functions are thin wrappers around existing cpu instructions. The Old Interlocked functions correspond mostly to lock inc/dec/xchg/xmpchg.</p>
<p>One of the most useful uses is creating lock free data structures (lists, queues etc). In realtime applications you need to avoid priority inversion, so any calls that may block are dangerous. Certain high performance apps also have serious contention between multiple threads, and again using lock free structures can increase performance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673543">
				<div id="div-comment-673543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081003-00/?p=20663#comment-673543">
			October 6, 2008 at 6:03 pm</a>		</div>

		<p>ChrisR,</p>
<p>Thanks.</p>
<p>In some ways, I can see how you could implement every one of those using a classical semaphore.</p>
<ul>
<li>wake a thread on an event ? Start with a semaphore of 0, and have thread P(). To signal the thread, other thread V()&#8217;s the semaphore.</li>
<li>
<p>Protect code ? Semaphore with a value of 1.</p>
</li>
</ul>
<p>That&#8217;s where I was coming from &#8212; last OS class was 10 years ago, but what I recalled was everything could be built from simple primitives, and that mindset makes you see everything Win32 offers and wonder why. Granted, that was also &quot;when all you have is a hammer, all problems are nails..&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-674113">
				<div id="div-comment-674113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081003-00/?p=20663#comment-674113">
			October 9, 2008 at 2:05 am</a>		</div>

		<p>Nathan_works: It&#8217;s true that all other locking primitives can be written in terms of semaphores, in the same way that it&#8217;s possible to deconstruct all branching constructs (while, for, etc) in terms of goto and if. Nobody would use a language that only had goto and if, though, would they?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>