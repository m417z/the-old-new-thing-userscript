<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-613413">
				<div id="div-comment-613413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ultrafractal.com/' rel='external nofollow' class='url'>Frederik Slijkerman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613413">
			March 27, 2008 at 11:33 am</a>		</div>

		<p>And is there a reason not to use this?</p>
<p>struct XYZ {</p>
<p>&nbsp;&#8230;</p>
<p>};</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-613423">
				<div id="div-comment-613423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ultrafractal.com/' rel='external nofollow' class='url'>Frederik Slijkerman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613423">
			March 27, 2008 at 11:33 am</a>		</div>

		<p>And is there a reason not to use this?</p>
<p>struct XYZ {</p>
<p>&nbsp;&#8230;</p>
<p>};</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-613433">
				<div id="div-comment-613433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ultrafractal.com/' rel='external nofollow' class='url'>Frederik Slijkerman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613433">
			March 27, 2008 at 11:33 am</a>		</div>

		<p>And is there a reason not to use this?</p>
<p>struct XYZ {</p>
<p>&nbsp;&#8230;</p>
<p>};</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-613443">
				<div id="div-comment-613443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skywing</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613443">
			March 27, 2008 at 11:37 am</a>		</div>

		<p>It is also required for the debugger. &nbsp;The debugger requires the use of the UDT tag (e.g. struct tag) when fetching typeinformation, and not the typedef.</p>
<p>(An unpredictable guid-like struct tag is generated for anonymous structs, as I recall. &nbsp;You can&#8217;t reference a type via a typedef, only the struct tag, using the .pdb codeview format.)</p>
<ul>
<li>S</li>
</ul>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-613453">
				<div id="div-comment-613453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://f0dder.reteam.org' rel='external nofollow' class='url'>f0dder</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613453">
			March 27, 2008 at 11:56 am</a>		</div>

		<p>Slijkerman: C vs. C++. With the &quot;typedef struct {&#8230;} MYTYPE;&quot;, you can do &quot;MYTYPE myvar;&quot;. With &quot;struct MYTYPE { &#8230; };&quot; you need &quot;struct MYTYPE myvar;&quot; in C.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-613473">
				<div id="div-comment-613473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613473">
			March 27, 2008 at 12:43 pm</a>		</div>

		<blockquote><p>
  And is there a reason not to use this?
</p></blockquote>
<p>Yeah, there is. Apparently the compiler somehow includes the header file three times if you do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-613483">
				<div id="div-comment-613483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613483">
			March 27, 2008 at 12:50 pm</a>		</div>

		<p>My question is: why does the midl compiler choose different names on different occasions? I mean, you know, computers are fairly predictable things which, when you tell them to do X, Y, and Z will do X, Y, and Z the same way each time. They&#8217;re not Sirius Cybernetics Corporation elevators.</p>
<div class=post>[<i>Look at some MIDL-generated files and it won&#8217;t take long before you figure out the algorithm. Hint: 0001, 0002&#8230; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-613493">
				<div id="div-comment-613493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613493">
			March 27, 2008 at 12:59 pm</a>		</div>

		<p>@required:</p>
<p>How would the MIDL compiler choose the same name as last time? &nbsp;The MIDL compiler probably chooses its current naming convention because no sane programmer would and therefore there&#8217;s a lower risk of collision. &nbsp;If for instance, MIDL chose MIDL_type or something like that, a programmer just might have already used that name and we&#8217;d be up a creek without a paddle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-613513">
				<div id="div-comment-613513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sandman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613513">
			March 27, 2008 at 1:06 pm</a>		</div>

		<p>I don&#8217;t follow the point about it being a problem with the version control system &#8211; unless you are checking generated files into the VCS.</p>
<p>Isn&#8217;t that generally considered bad practice?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-613523">
				<div id="div-comment-613523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">theorbtwo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613523">
			March 27, 2008 at 1:10 pm</a>		</div>

		<p>Ray&#8217;s last point is also a good example of the rule &quot;generated files shouldn&#8217;t go in your version control system&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-613603">
				<div id="div-comment-613603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613603">
			March 27, 2008 at 6:28 pm</a>		</div>

		<p>@sandman, theorbtwo</p>
<p>Windows is pretty big and there are tons of generated files that change seldom/never (after all, if they change all the time, it&#8217;s hard to maintain compatibility). &nbsp;Hundreds of windows builds are produced every day from different groups, so it makes sense that if you&#8217;re going to make a change to a generated file that&#8217;s shared across parts of Windows (local generated files don&#8217;t matter) that you should bear the costs of generating the file rather than imposing it on every build machine out there. &nbsp;Some of those rules might work for normal projects which build relatively quickly, but can&#8217;t work for Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-613633">
				<div id="div-comment-613633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jroller.com/jsight/' rel='external nofollow' class='url'>Jess Sightler</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613633">
			March 27, 2008 at 10:56 pm</a>		</div>

		<p>An even stronger rule than that one is &quot;never say never&quot;. &nbsp;:-)</p>
<p>I think that rule is more of a guideline for frequently generated files than something that someone should make as a hard, fast rule.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-613643">
				<div id="div-comment-613643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Johns</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613643">
			March 27, 2008 at 11:11 pm</a>		</div>

		<p>Here&#8217;s a related article on the subject that helped me recently realize how to properly use tag names to forward declare structures :</p>
<p><a rel="nofollow" target="_new" href="http://www.embedded.com/columns/programmingpointers/9900748" rel="nofollow">http://www.embedded.com/columns/programmingpointers/9900748</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-613683">
				<div id="div-comment-613683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613683">
			March 28, 2008 at 6:26 am</a>		</div>

		<p>The reason to use forward declarations instead of including the header is not just to break cyclic dependencies. It also speeds up compilation.</p>
<p>A compiler faced with a #include &quot;X.h&quot; may need to look in a dozen locations, and it can&#8217;t really cache that information during a build (the &quot;X.h&quot; file may be the output of another build step)</p>
<p>This isn&#8217;t really new; see Lakos&#8217; Large Scale C++ Design.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-613733">
				<div id="div-comment-613733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">movl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613733">
			March 28, 2008 at 9:55 am</a>		</div>

		<p>&quot;Hundreds of windows builds are produced every day from different groups&quot;</p>
<p>Just wow! I take it Microsoft is really advanced these days in the field of quantum computing? Seriously, Mozilla for example is pretty slim in comparison but I can hardly build it overnight. To build NTOS+WOW+Shell+the rest in a day is incredible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-613803">
				<div id="div-comment-613803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-613803">
			March 28, 2008 at 11:45 am</a>		</div>

		<p>&gt; it won&#8217;t take long before you figure out the algorithm</p>
<p>Well, my point was &#8220;why is the algorithm such that it may generate different names on susequent runs&#8221;. Based on the example you gave (&#8220;typedef enum { &#8230; } XYZ;&#8221;) I don&#8217;t see why it could not generate (for example):</p>
<p>typedef enum __MIDL___MIDL_itf_XYZ</p>
<p>{</p>
<p>&nbsp; &nbsp;&#8230;</p>
<p>} XYZ;</p>
<p>since duplicate type declarations are invalid AFAIK (i.e. declaring two types in your original file called XYZ would be an error anyway).</p>
<p>IMO, an algorithm seems to have been chose which will cause this problem, it isn&#8217;t a problem inherent in generating names.</p>
<div class=post>[<i>It gives different names because you changed the MIDL file between runs. Obviously if you change the input file, then it&#8217;s not unreasonable that the output file changes too! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-614333">
				<div id="div-comment-614333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080327-00/?p=22973#comment-614333">
			March 31, 2008 at 8:30 pm</a>		</div>

		<p>I&#8217;ve always wondered why the &#8220;tag&#8221; prefix is used. That is, why not just write it as:</p>
<p>typedef struct XYZ {</p>
<p>&#8230;</p>
<p>} XYZ;</p>
<p>instead of:</p>
<p>typedef struct tagXYZ {</p>
<p>&#8230;</p>
<p>} XYZ;</p>
<div class=post>[<i>I&#8217;ve always wondered whether people read the first sentence of the blog entry before posting a comment. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>