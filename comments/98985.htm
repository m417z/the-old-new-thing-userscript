<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1346125">
				<div id="div-comment-1346125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://helloacm.com' rel='external nofollow' class='url'>ACM-er</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346125">
			June 12, 2018 at 7:15 am</a>		</div>

		<p>just tried on BASH, and it doesn&#8217;t work :(</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1346205">
				<div id="div-comment-1346205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346205">
			June 12, 2018 at 10:42 am</a>		</div>

		<p>That&#8217;s unsurprising.  On Unix, foo/bar/.. and foo/ can be entirely distinct directories, if bar is a symbolic link to somewhere else.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle even depth-3 parent" id="comment-1346225">
				<div id="div-comment-1346225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346225">
			June 12, 2018 at 12:43 pm</a>		</div>

		<p>Technically, that&#8217;s also the case in Windows, since C:\foo\bar could be a symbolic link to D:\baz\doh.  The difference is that on FAT/NTFS/ReFS, . and .. aren&#8217;t real directory entries and have implicit behavior, whereas on Linux they are hard links I believe.  So C:\foo\bar\saw\..\.. will still resolve as C:\foo in this case.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1346235">
				<div id="div-comment-1346235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346235">
			June 12, 2018 at 3:07 pm</a>		</div>

		<p>I&#8217;m probably wrong on this.  But it isn&#8217;t really anything to do with hard links, soft links, symlinks, or anything.  It&#8217;s just to do with how the shell (and in Linux, by extension, the libraries) deal with a path.</p>
<p>As Raymond says, the Windows CMD shell chooses to ignore the possibility that C:/foo/bar might actually be a symlink to D:/baz (in which case, &#8220;..&#8221; would take you back to D:) and simply goes back and forth across the path graph you give it.  Which, arguably, is a more intuitive way of handling a path-name with &#8220;magic&#8221; redirects that behave differently, depending upon whether links of any kind are involved.  And of course, arguably, it isn&#8217;t &#8230;</p>
<p>But as long as the libraries work the same way as the shell, I don&#8217;t really care, in either case.  It&#8217;s fair to say though that, if you are building say X-Windows from scratch, and the make file is full of gibberish like &#8220;../.././foo/bar/../shenanigans/../video&#8221; you are going to have a hard time figuring out which particular hard or soft link caused your build to fail, three hours in. (Jamie Zawinski used to complain about this.)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-ranta even depth-5" id="comment-1346315">
				<div id="div-comment-1346315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346315">
			June 13, 2018 at 7:07 am</a>		</div>

		<p>Common Lisp does not overload the meaning of &#8220;..&#8221;; instead, it defines the :UP and :BACK keywords for the semantic and syntactic parent directories. Implementations do not have to support both, though. See CLHS ยง19.2.2.4.3 &#8220;Restrictions on Examining a Pathname Directory Component&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1346245">
				<div id="div-comment-1346245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346245">
			June 12, 2018 at 5:16 pm</a>		</div>

		<p>Nope. They&#8217;re implicitly resolved on Linux. Try pointing .. somewhere else with a disk editor. It will be ignored. Source: I wrote a Linux fs driver for my Master&#8217;s.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-brantgurga even thread-odd thread-alt depth-1 parent" id="comment-1346135">
				<div id="div-comment-1346135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brant+Gurganus' rel='external nofollow' class='url'>Brant Gurganus</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346135">
			June 12, 2018 at 8:09 am</a>		</div>

		<p>How does this interact with traverse checking? Is that being bypassed technically? <a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc739389(v=ws.10)" rel="nofollow">https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc739389(v=ws.10)</a></p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1346155">
				<div id="div-comment-1346155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346155">
			June 12, 2018 at 8:59 am</a>		</div>

		<p>Path name canonicalization can go without directory access, i.e. also for GetFullPathName().</p>
<p>Unfortunately, the feature explained in this article does not seem to work with path name auto-completion &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1346185">
				<div id="div-comment-1346185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346185">
			June 12, 2018 at 9:53 am</a>		</div>

		<p>Nothing was traversed at all, so there was nothing to bypass. Traversal checking bypass doesn&#8217;t let you traverse into something that doesn&#8217;t exist.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1346195">
				<div id="div-comment-1346195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ig</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346195">
			June 12, 2018 at 10:41 am</a>		</div>

		<p>Is it actually a cmd.exe trick? (i.e. is it really cmd.exe which does that path simplification?)</p>
<p>I mean &#8211; sure, you can use it in cmd.exe, but (similarly to the previous one &#8211; using forward slashes instead of backslashes) it&#8217;s something that Win32 API supports &#8211; you can call CreateFile(&#8220;C:\\doesnt-exist\\..\\Windows\win.ini&#8221;, &#8230;) and you get a valid handle.<br />
You can call SetCurrentDirectory(&#8220;C:\\doesnt-exist\\..\\Windows&#8221;) and C:\Windows becomes the process&#8217;s current directory.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1346255">
				<div id="div-comment-1346255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aged .Net Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346255">
			June 12, 2018 at 6:17 pm</a>		</div>

		<p>I agree it&#8217;s more widespread than just cmd.exe.  On e.g. Win8 open a fresh Notepad, type some gibberish, then do a [Save as]. In the file name textbox enter a valid absolute folder path followed by &#8220;\_nonexistent directory_\..\newfilename.txt&#8221;.  It saves just fine in the &#8220;parent&#8221; of _nonexistent directory_ .</p>
<p>It&#8217;s certainly possible that the same path simplification logic was built into various MS tools. IMO it&#8217;s far more likely that the path canonicalization is implemented just once deeper in the file system.  For security if nothing else it seems to me one would want to canonicalize = sanitize potentially malicious input before starting to walk the path into the actual device folder and ACL hierarchy.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3" id="comment-1346335">
				<div id="div-comment-1346335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346335">
			June 13, 2018 at 7:17 am</a>		</div>

		<p>The Save As dialog can&#8217;t use GetFullPathName because it needs to resolve relative paths against something different from the current directory. Instead, it uses PathCombine, which happens to implement the same algorithm. So yes, the same path simplification logic exists in multiple places.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1346295">
				<div id="div-comment-1346295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rbmm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346295">
			June 13, 2018 at 3:03 am</a>		</div>

		<p>of course that is not related to cmd at all. this is generic win32 path conversions rules. in concrete case (cd in cmd) conversion was in `GetFullPathNameW` api. simply example:<br />
	WCHAR path[MAX_PATH];<br />
	GetFullPathNameW(L&#8221;y:\\xxx\\..\\zzz&#8221;, RTL_NUMBER_OF(path), path, 0);<br />
	// y:\\zzz in exit<br />
also the same conversions will be inside RtlDosPathNameToNtPathName_U[_WithStatus]</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3 parent" id="comment-1346325">
				<div id="div-comment-1346325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346325">
			June 13, 2018 at 7:15 am</a>		</div>

		<p>It may be that GetFullPathNameW has this same feature, but cmd.exe doesn&#8217;t use GetFullPathNameW, as I recall. But it&#8217;s been a while since I last checked. Maybe they use it now.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1346465">
				<div id="div-comment-1346465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rbmm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346465">
			June 13, 2018 at 3:00 pm</a>		</div>

		<p>no, cmd.exe always (i check from xp up to win10) use GetFullPathNameW inside `int ChangeDirectory(PCWSTR, CHANGE_OP)` and exactly in this function was path conversion (<a href="https://i.imgur.com/Eo0w07C.png" rel="nofollow">https://i.imgur.com/Eo0w07C.png</a> &#8211; win10, <a href="https://i.imgur.com/3WBeOui.png" rel="nofollow">https://i.imgur.com/3WBeOui.png</a> &#8211; xp). but more frequently conversion was inside RtlDosPathNameToNtPathName_U[_WithStatus] api</p>
<p>also, sorry as side note to canceling a thread pool callback series (only just view this, but comments here already closed) &#8211; exist much more simply and clean solution here &#8211; TpSetCallbackFinalizationCallback function for set own FinalizationCallback and free memory(object) associated with PTP_TIMER exactly in this callback. as result code will be look like</p>
<p>VOID NTAPI FinalizationCallback(PTP_CALLBACK_INSTANCE /*Instance*/, PVOID Context)<br />
{<br />
	delete reinterpret_cast(Context);<br />
}</p>
<p>	if (TimerContext* ctx = new TimerContext)<br />
	{<br />
		TP_CALLBACK_ENVIRON cbe;<br />
		TpInitializeCallbackEnviron(&amp;cbe);<br />
		TpSetCallbackFinalizationCallback(&amp;cbe, FinalizationCallback);</p>
<p>		if (PTP_TIMER pti = CreateThreadpoolTimer(OnTimer, ctx, &amp;cbe))<br />
		{<br />
			SetThreadpoolTimer(pti, &amp;DueTime, *, 0);<br />
			//..<br />
			CloseThreadpoolTimer(pti);<br />
		}<br />
		else<br />
		{<br />
			delete ctx;<br />
		}<br />
	}</p>
<p>call SetThreadpoolTimer, WaitForThreadpoolTimerCallbacks functions &#8211; also not need. only CloseThreadpoolTimer.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1346305">
				<div id="div-comment-1346305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346305">
			June 13, 2018 at 4:40 am</a>		</div>

		<p>Obligatory comment about Plan 9, the OS that managed to have this trick (&#8220;foo/bar/../&#8221; is exactly the same as &#8220;foo/&#8221;) in the FS with symbolic links of a sort, and without performance penalties. Source: Rob Pike, &#8220;Lexical File Names in Plan 9 or Getting Dot-Dot Right&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1346495">
				<div id="div-comment-1346495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rich Shealer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346495">
			June 13, 2018 at 5:45 pm</a>		</div>

		<p>Is there a contract for this behavior or is it an implementation detail that may change?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1346595">
				<div id="div-comment-1346595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1346595">
			June 14, 2018 at 7:32 am</a>		</div>

		<p>I would consider it a (handy) implementation detail. Okay for interactive use, but I wouldn&#8217;t use it programmatically.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1347235">
				<div id="div-comment-1347235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1347235">
			June 15, 2018 at 11:27 am</a>		</div>

		<p>I read Project Zero&#8217;s explanation of this:<br />
<a href="https://googleprojectzero.blogspot.com/2016/02/the-definitive-guide-on-win32-to-nt.html" rel="nofollow">https://googleprojectzero.blogspot.com/2016/02/the-definitive-guide-on-win32-to-nt.html</a></p>
<p>Very interresting. From what I read there, regardless of the application, cmd.exe or other, all pathes from all APIs gets always converted to an absolute NT path before it reaches the kernel.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-george-chakhidze odd alt thread-even depth-1" id="comment-1348195">
				<div id="div-comment-1348195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/George+Chakhidze' rel='external nofollow' class='url'>George Chakhidze</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180612-00/?p=98985#comment-1348195">
			June 21, 2018 at 12:38 pm</a>		</div>

		<p>Applies to powershell.exe too.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>