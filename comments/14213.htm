<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-829203">
				<div id="div-comment-829203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Fisher</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829203">
			April 29, 2010 at 7:12 am</a>		</div>

		<p>The puzzle is short, but the answer is long.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-829283">
				<div id="div-comment-829283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829283">
			April 29, 2010 at 10:05 am</a>		</div>

		<p>It does have another point, though. In Vista and later, you are always using the low-fragmentation heap, there is no other option.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works even thread-even depth-1" id="comment-829293">
				<div id="div-comment-829293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829293">
			April 29, 2010 at 12:39 pm</a>		</div>

		<p>Custom memory managers, or dinking with the parameters of the one you have is something that only the very very wise or utterly foolish would do.. But often, the person doing it is both..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829263">
				<div id="div-comment-829263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829263">
			April 29, 2010 at 8:58 am</a>		</div>

		<p>One of the hardest bugs I ever had to track down was in a homemade, classical memory manager.</p>
<p>It was back in the 16-bit Windows days. &nbsp;If you did a particular (long) sequence of steps, the app would crash. &nbsp;In the debugger, we could see that one data structure was thoroughly trashed, but we couldn&#8217;t tell why. &nbsp;Worse, setting a breakpoint *any* breakpoint prevented the problem from reproducing.</p>
<p>Our homemade memory manager allocated 64KB blocks from the OS and carved them up as needed by our application. &nbsp;If it ran out of that space (which was rare), it would allocate another 64KB block. &nbsp;The long sequence of steps had the effect of using up the first 64KB block and a little bit of the second one, and then freeing some of those recent allocations, and then allocating some new blocks.</p>
<p>The bug was that the memory manager would accidentally coalesce a free block at the tail end of the first 64KB block with one at the front end of the next 64KB block, *if* the 64KB blocks were at consecutive memory locations. &nbsp;That was a huge problem, since our memory manager doled out near (16-bit) pointers. &nbsp;The long sequence of steps resulted in a buffer that supposedly spanned one of these 64KB boundaries. &nbsp;As the buffer filled up, the near pointer wrapped around to the beginning of the first 64KB block, trashing one of the very first data structures the program had allocated.</p>
<p>In the bad old 16-bit days, the debuggers were more invasive. &nbsp;If you set a breakpoint, the debugger made an allocation off your OS heap. &nbsp;It happened that that block was always between the first and second 64KB blocks that our memory manager got. &nbsp;Since the 64KB blocks were no longer adjacent in memory, the coalescing bug never manifested if you had a breakpoint set. &nbsp;It took days of printf debugging to finally crack that nut.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829273">
				<div id="div-comment-829273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arlie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829273">
			April 29, 2010 at 9:04 am</a>		</div>

		<p>I know this is a Windows blog (chiefly), but I&#8217;m so glad I don&#8217;t have to worry about heap fragmentation any more. &nbsp;I do nearly all of my work in C#, and with some pretty stringent performance requirements. &nbsp;The benefits for performance of a compacting GC are just amazing. &nbsp;No VA fragmentation! &nbsp;Your cache locality *increases* over time!</p>
<p>When I go back to plain old C/C++ development now, it feels like bear-skins-and-stone-knives time. &nbsp;Don&#8217;t get me wrong &#8212; I appreciate all the work that went into Windows (hell, I was a Windows Networking dev for years), and into the C/C++ environment. &nbsp;But I&#8217;m through with it, and I love it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829303">
				<div id="div-comment-829303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wojo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829303">
			April 29, 2010 at 6:36 pm</a>		</div>

		<p>@yuhong2, mostly true. I believe it disables the LFH in certain scenarios like fixed size heaps or with the flag HEAP_NO_SERIALIZE (which is used often when you take care of more details in your own memory manager). Also, when the LFH is disabled, a very naive (read: slow) heap manager is used that is even slower than the pre-LFH memory manager. Watch out for that!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829313">
				<div id="div-comment-829313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829313">
			April 29, 2010 at 11:30 pm</a>		</div>

		<p>Raymond, it looks like you don&#8217;t like Lisp! I mean, look, this snippet:</p>
<p>&#8220;&#8230; (This description is simplified for the purpose of the discussion.) (I can&#8217;t believe I had to write that.)&#8221;</p>
<p>should really be:</p>
<p>&#8220;&#8230; (This description is simplified for the purpose of the discussion. (I can&#8217;t believe I had to write that.))&#8221;</p>
<div class=post>[<i>News flash: English and Lisp are different languages. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829323">
				<div id="div-comment-829323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.adamhouldsworth.blogspot.com' rel='external nofollow' class='url'>Adam</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829323">
			April 30, 2010 at 1:47 am</a>		</div>

		<p>&#8220;So you see, you don&#8217;t even have to know what you&#8217;re talking about to be an expert.&#8221;</p>
<p>Slightly dangerous comment given past gripes :)</p>
<p><a href="http://blogs.msdn.com/oldnewthing/archive/2009/04/16/9551818.aspx" rel=nofollow target=_new rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2009/04/16/9551818.aspx</a></p>
<div class=post>[<i>Um, that was the case of somebody who <u>didn&#8217;t care about the logic behind the answer</u>, the opposite of somebody who tries to reason it out. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829333">
				<div id="div-comment-829333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jheriko-rtw.blogspot.com' rel='external nofollow' class='url'>Semi Essessi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829333">
			April 30, 2010 at 2:21 am</a>		</div>

		<p>&quot;So you see, you don&#8217;t even have to know what you&#8217;re talking about to be an expert. You just have to be able to take a scenario and think, &quot;How would somebody have designed a system to solve this problem?&quot;&quot;</p>
<p>This is a good attitude to have and its not specific to programming or any field in particular.</p>
<p>Logic &gt;&gt; experience.</p>
<p>I can&#8217;t count the number of times I&#8217;ve solved a problem or improved a process with little or no knowledge, simply because what would be an obvious bug in code (due to logic) stands out like a flashing red warning light.</p>
<p>The downside is that some people get really offended when this happens&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829343">
				<div id="div-comment-829343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://marksowul.com' rel='external nofollow' class='url'>Mark Sowul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829343">
			April 30, 2010 at 6:20 am</a>		</div>

		<p>Arlie: I agree, but it&#8217;s not something you can put completely out of your mind, because the large-object heap is not compacted&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829393">
				<div id="div-comment-829393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829393">
			April 30, 2010 at 7:47 am</a>		</div>

		<p>&quot;[Um, that was the case of somebody who didn&#8217;t care about the logic behind the answer, the opposite of somebody who tries to reason it out. -Raymond]&quot;</p>
<p>You weren&#8217;t reasoning &#8211; you were providing an educated guess that proved to be correct.</p>
<p>But on the up side, unlike that other person, you did go to confirm that you were correct &#8211; so kudos there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829433">
				<div id="div-comment-829433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829433">
			April 30, 2010 at 9:17 am</a>		</div>

		<p>@wojo: HeapAlloc only slow in DEBUG. In RELEASE it is quite fast.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829543">
				<div id="div-comment-829543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829543">
			April 30, 2010 at 3:42 pm</a>		</div>

		<p>Adam: Isn&#8217;t the difference between an educated guess and a regular guess that an educated one has reasoning behind it and a regular one is effectively random?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-829553">
				<div id="div-comment-829553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829553">
			April 30, 2010 at 5:12 pm</a>		</div>

		<p>BTW, on enabling the low-frag heap in Windows 2000, just because HeapSetInformation is exported in kernel32.dll doesn&#8217;t mean the low-frag heap is actually available, as all it does is GetProcAddress RtlHeapSetInformation from ntdll.dll, which is the DLL that actually contain the heap code. If this function is not actually exported from ntdll.dll, HeapSetInformation will fail and the low-frag heap is not available. I found this out by stepping into kernel32!HeapSetInformation using a debugger.</p>
<div class=post>[<i>I don&#8217;t remember anybody asking about the low-fragmentation heap on Windows 2000. I&#8217;m further convinced you comment just to hear yourself talk. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829613">
				<div id="div-comment-829613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wojo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829613">
			May 1, 2010 at 2:51 pm</a>		</div>

		<p>@AsmGuru62, I believe that even in release mode it is. I received feedback from someone at Microsoft&#8217;s team that worked on the heap manager and he mentioned the slowdown I&#8217;m mentioning (when HEAP_NO_SERIALIZE) was due to now slower code paths in the heap manager. It can happen from certain debugging flags and the HEAP_NO_SERIALIZE flag. These paths are slower because of the reorganization during Vista development, supposedly. If you are interested more, let me know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829633">
				<div id="div-comment-829633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829633">
			May 1, 2010 at 11:29 pm</a>		</div>

		<blockquote><p>
  When I go back to plain old C/C++ development now, it feels like bear-skins-and-stone-knives time.
</p></blockquote>
<p>c/c++ doesn&#8217;t necessary exclude a gc. Infact, VS do combine these if you want.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829653">
				<div id="div-comment-829653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829653">
			May 2, 2010 at 4:20 am</a>		</div>

		<p>Does &quot;Low-fragmentation&quot; refer to internal fragmentation, external fragmentation, or both?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-830003">
				<div id="div-comment-830003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-830003">
			May 4, 2010 at 2:14 am</a>		</div>

		<p>There are, of course, other reasons to allocate memory blocks of the same size together. &nbsp;I&#8217;ve used allocators before that decide on a single size-of-allocation for each page, and then just use a bitmap to decide which blocks within the page are allocated. &nbsp;This makes allocation faster and reduces memory overhead compared to the traditional linked-list-of-blocks approach. &nbsp;I&#8217;m actually quite surprised that any modern allocator isn&#8217;t taking this approach.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>