<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-318053">
				<div id="div-comment-318053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318053">
			November 1, 2005 at 10:41 am</a>		</div>

		<p>A previous company I worked for used a (misguided) attempt to get around this requirement:  Instead of creating a new interface, there was general agreement that you could new functions to an interface, but only to the end.  As long as the client knew that it was talking to a newer version of the service (which it did), it could safely call the additional function.  In theory, older clients would only call the first N functions in the interface, which would always be safe, whether the service was new or old.</p>
<p>Now this might have worked if we had been using &#8216;real&#8217; COM (or maybe we would have run into the same problem).  However, in order to run cross-platform, we had our own &#8216;COM lite&#8217; implementation which in almost all respects worked the same.  Instead of constructing the interfaces using IDL, we just used a C++ abstract base class.  People just added functions to the end of the list, and since they get added to the end of the vtable, we were safe, as long as we were careful.</p>
<p>And then one day we started getting crash reports.  When I looked into it, I discovered that the compiler had decided to be &#8216;smart&#8217;: We had an interface like this:<br />
<br />interface IMyComponent {<br />
<br />  HRESULT DoSomething( long x );<br />
<br />  HRESULT Print( long y );<br />
<br />}<br />
<br />Then someone had added:<br />
<br />  HRESULT DoSomething2( long x, long y );</p>
<p>And the compiler, instead of adding it to the bottom of the vtable, like it always had before, decided that DoSomething2 belonged together with DoSomething, so the vtable looked like:<br />
<br />  DoSomething<br />
<br />  DoSomething2<br />
<br />  Print</p>
<p>An old client tried to call Print, which ended up calling DoSomething2, which not only did the wrong thing, but popped too many arguments off the stack&#8230;  Now I&#8217;m not necessarily going to call this a compiler bug, because the whole vtable concept is just an implementation detail, but it was certainly unexpected behavior.  (Since we had a component autoupdate system, we were able to release a 3rd component that would detect the situation, &#8216;fix up&#8217; the vtable, and keep the system alive long enough for it to be updated.</p>
<p>Lesson learned: stop modifying interfaces, even at the end&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-318063">
				<div id="div-comment-318063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318063">
			November 1, 2005 at 10:55 am</a>		</div>

		<p>hmmm, given that, once you are done with all the IDL stuff, what the c++ compiler gets are generated plain old header files with virtual class definitions&#8230; well, if that isn&#8217;t a bug, how do the MIDL generated header files avoid the compiler re-ordering the interfaces?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-318083">
				<div id="div-comment-318083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318083">
			November 1, 2005 at 11:10 am</a>		</div>

		<p>Chris, of course you are right.  I was thinking of the c-style pseudo-virtual tables that the MIDL compiler generates, but of course it generates C++ style class too, which could have the same problem.  This occured in MSVC6, I don&#8217;t know if it is still around.<br />
<br />(Typo: Of course my interface functions were declared virtual &#8230; =0 )</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-318103">
				<div id="div-comment-318103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephane Rodriguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318103">
			November 1, 2005 at 12:55 pm</a>		</div>

		<p>&quot;But remember that if you change an interface, you need to generate a new Interface Identifier (IID).&quot;</p>
<p>Huh? As long as you add new methods at the end of your interface (with greater IDs), and never change public methods, both old (version N) and new consumers (version N+1) of that interface are happy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-318113">
				<div id="div-comment-318113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">julian_t</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318113">
			November 1, 2005 at 12:59 pm</a>		</div>

		<p>Stephane said:</p>
<p>&quot;Huh? As long as you add new methods at the end of your interface (with greater IDs), and never change public methods, both old (version N) and new consumers (version N+1) of that interface are happy.&quot;</p>
<p>And what happens if a new (version N+1) consumer happens to get hold of an older (version N) component? They try calling a method that doesn&#8217;t exist in the older component and&#8230;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-318123">
				<div id="div-comment-318123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318123">
			November 1, 2005 at 1:58 pm</a>		</div>

		<p>Not to mention Raymond&#8217;s comment about what happens if you have to figure out which version is installed on a specific machine.</p>
<p>It&#8217;s impossible using COM alone (because QueryInterface won&#8217;t tell you); you&#8217;d have to use some other attribute of the component&#8217;s container file (the EXE or DLL), like a hash or version number.  But this gets unwieldy pretty fast, especially if you&#8217;re patching relatively often.  It&#8217;s simpler to just let the component tell you which version it is, based on the IIDs that it supports.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-patriotb even thread-even depth-1" id="comment-318153">
				<div id="div-comment-318153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PatriotB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318153">
			November 1, 2005 at 6:03 pm</a>		</div>

		<p>The pattern of using both a REFIID and an LPVOID* when retrieving objects is seen throughout the main COM/OLE interfaces as well as shell interfaces.  I always wondered why they didn&#8217;t just return an IUnknown and make you manually query for the interface you want &#8212; but I suppose this way you can save making an extra call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-318173">
				<div id="div-comment-318173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318173">
			November 1, 2005 at 6:34 pm</a>		</div>

		<p>Re: REFIID/LPVOID pattern in methods other than QueryInterface:</p>
<p>One answer is the round tripping one.  When your interfaces are not remoted, you lucky dog, maybe QIing for another interface is cheap.  If your interfaces are remoted, doing two round trips to the remote machine instead of one is just kind of dumb.</p>
<p>The second answer is that this is not even semantically equivalent to getting an IUnknown and QIing for a different interface.  The provider is fully allowed to give up a different kind of object depending on the IID passed in.  OLE/DB providers may exploit this pattern by giving different kinds of recordsets depending on the iid passed in when the query is executed or the table is opened.  I use this pattern regularly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-318073">
				<div id="div-comment-318073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John C. Kirk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318073">
			November 1, 2005 at 11:02 am</a>		</div>

		<p>Interesting points, and I must confess to having &quot;bent the rules&quot; (ahem) a few times in the past. A couple of minor typos, though:</p>
<p>* &quot;GetColorCount&quot; should be &quot;GetColorInfo&quot;.</p>
<p>* &quot;IGraphicImage function&quot; should be &quot;IGraphicImage interface&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-318203">
				<div id="div-comment-318203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.foxyshadis.com' rel='external nofollow' class='url'>foxyshadis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318203">
			November 1, 2005 at 8:00 pm</a>		</div>

		<p>&quot;And the compiler, instead of adding it to the bottom of the vtable, like it always had before, decided that DoSomething2 belonged together with DoSomething, so the vtable looked like:&quot;</p>
<p>This exact error occured in the new version of avisynth; they were trying to keep it binary compatible with its hundreds of plugins by adding to the end but then whoosh, it reordered a couple new functions. Could it be mitigated by reordering the vtable in the compiled output prior to linking? (As a quick and dirty fix.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-318213">
				<div id="div-comment-318213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318213">
			November 1, 2005 at 10:12 pm</a>		</div>

		<p>From my reading of the C++ standard, a class can contain some member functions (both static and non-static) and still be a POD-struct as long as it meets stated conditions on the member variables and not having a base class etc.  And it is possible for two different POD-struct classes to be layout-compatible even if they have different member functions as long as their member variables meet stated conditions.  I wonder how compilers handle those vtables.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-318133">
				<div id="div-comment-318133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.simulplex.net/' rel='external nofollow' class='url'>Klaus H. Probst</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318133">
			November 1, 2005 at 2:55 pm</a>		</div>

		<p>AB: That works (worked!) in the &#8216;real world&#8217; very well. Because typelib binding is done in vtable order, you will rarely (if ever) brake an existing client by adding methods to an existing interface. This applies to &#8216;semi-late&#8217; binding and COM+ interception as well.</p>
<p>If you have a component doing some sort of nasty late binding IDispatch stupid tricks then it gets interesting, so you wouldn&#8217;t want to use it in a *commercial* product. But for COM-based distributed apps within a corporate environment, it was a good compromise between contract and future flexibility. I hate adding numbers to interface names &#8211; your typelibs start looking like movie sequel lists.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-318243">
				<div id="div-comment-318243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318243">
			November 2, 2005 at 4:56 am</a>		</div>

		<p>So, as long as you stick to the rules, and ensure that the &quot;interface&quot; class is a POD struct&#8230; then you are immune to compiler re-ordering?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-318503">
				<div id="div-comment-318503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Weiss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318503">
			November 2, 2005 at 2:24 pm</a>		</div>

		<p>I&#8217;ve always developed patchs to versions of software using the ENTRIE set of source code at the point of that versions release.</p>
<p>When patching two versions, I would merge those fixes into the source code of each version. And ship all, or just the changed, binaries for each version. The patch to version N was built using the headers from version N, N+1&#8217;s patch was built using N+1&#8217;s headers.</p>
<p>Other then doubling SOME of the work when patching, whats the problem? A good SCM system helps in this area.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-318713">
				<div id="div-comment-318713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318713">
			November 2, 2005 at 10:33 pm</a>		</div>

		<p>Wednesday, November 02, 2005 4:56 AM by Chris Becke<br />
<br />&gt; So, as long as you stick to the rules, and<br />
<br />&gt; ensure that the &quot;interface&quot; class is a POD<br />
<br />&gt; struct&#8230; then you are immune to compiler<br />
<br />&gt; re-ordering?</p>
<p>As far as I could tell from reading relevant portions of the standard, it looks that way.  But I can&#8217;t figure out how it can be true.</p>
<p>In C days I could pounce on bugs in the standard and prove why they needed fixing.  (A lot of them still need fixing, i.e. weren&#8217;t fixed, but I proved the need anyway.)  But I don&#8217;t expect to become a C++ language lawyer.  I&#8217;ll probably just remain in the status of not figuring out how things can work the way the standard says on this point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-318853">
				<div id="div-comment-318853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-318853">
			November 3, 2005 at 12:09 pm</a>		</div>

		<p>Since Mozilla&#8217;s build system doesn&#8217;t track interface dependencies its typelibs aren&#8217;t regenerated when a base interface UUID changes. You can of course work around the problem using forward references and letting the compiler/typelib loader fix up the UUIDs later.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519593">
				<div id="div-comment-519593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.inconspicuous.info/archives/22' rel='external nofollow' class='url'>My $0.02 &raquo; Blog Archive &raquo; Don&#8217;t change the rules in the middle of the game (or: There&#8217;s a reason COM interfaces are immutable.)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051101-54/?p=33533#comment-519593">
			June 26, 2007 at 6:43 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blog.inconspicuous.info/archives/22" rel="nofollow">http://blog.inconspicuous.info/archives/22</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>