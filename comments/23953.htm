<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-584583">
				<div id="div-comment-584583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-584583">
			January 2, 2008 at 10:33 am</a>		</div>

		<p>The tree-view was a child window. &nbsp;The parent window got their WM_DESTROY (which caused MFC (or whatever) to call XYZPage::OnDestroy), then the window manager sent a WM_DESTROY to the tree-view window. &nbsp;The tree-view window code tried to refer to the image-list.</p>
<p>I can think of a couple possible fixes: first, change OnDestroy to OnNcDestroy (assuming the framework provides this function). &nbsp;Otherwise, before the image-list is destroyed, remove the tree-view&#8217;s reference to it (if possible); that way the tree-view won&#8217;t be able to refer to the list after it&#8217;s gone. &nbsp;However, this may screw up other things; it&#8217;d be better to use OnNcDestroy (AKA the WM_NCDESTROY message).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-584663">
				<div id="div-comment-584663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sab39.netreach.com/' rel='external nofollow' class='url'>Stuart Ballard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-584663">
			January 2, 2008 at 11:46 am</a>		</div>

		<p>I&#8217;m proud of myself &#8211; this is one of the rare occasions when my psychic debugging was up to the task of solving one of the problems on this blog. As soon as I got to the point that the imagelist was being accessed in the treeview&#8217;s destroy function, I knew it was going to be an issue of freeing resources at the beginning of the cleanup process, before the children have been freed, rather than at the end.</p>
<p>I had to read the referenced prior entry to understand what the relevance of messages going to windows was, but still, that&#8217;s not bad for someone who lives in C# ASP.NET apps and has never written a windows C/C++ program in his life, I think&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-584683">
				<div id="div-comment-584683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">harmony7</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-584683">
			January 2, 2008 at 12:35 pm</a>		</div>

		<p>As BryanK has pointed out above, the window manager is sending WM_DESTROY to the child window, AFTER the parent window&#8217;s OnDestroy handler has already completed, since the child window didn&#8217;t do it itself.</p>
<p>I would handle this by modifying the OnDestroy handler (of the parent window) by sending WM_DESTROY to the TreeView window myself, before the lines that free the image list. &nbsp;(The call would be similar to m_hWndTreeView.DestroyWindow(), if using MFC)</p>
<p>However, with this approach I am hoping the Image List and TreeView are both initialized in OnCreate() (in that order). &nbsp;At least, that is how I would put it together.</p>
<p>WM_NCDESTROY would work because of the order that the message is sent, but I sort of feel weird putting code in there if I can avoid it. &nbsp;I would do that if I am initializing the image list in WM_NCCREATE. &nbsp;But doesn&#8217;t that feel wacky?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-584723">
				<div id="div-comment-584723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dataland.wordpress.com/' rel='external nofollow' class='url'>Dataland</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-584723">
			January 2, 2008 at 12:58 pm</a>		</div>

		<p>If I had to guess, I see a problem with these two:</p>
<p>&nbsp; &nbsp; &nbsp;ImageList_RemoveAll(m_hImageList);</p>
<p>&nbsp; &nbsp; &nbsp;ImageList_Destroy(m_hImageList);</p>
<p>Guessing&#8230; ImageList_RemoveAll just removed the images from the imageList. &nbsp;Then ImageList_Destroy is trying to do destruction and inadvertently (or due to a poor design coupled with over or under engineering), tries to reference the ImageList that was just freed: ImageList_GetBkColor. &nbsp;Why are they calling this in the destructor?</p>
<p>I do have to guess, because you tell me WM_Destroy was called and&#8230; I cannot see if we are in ImageList_Destroy, which I guess we are. &nbsp;Are we?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-584733">
				<div id="div-comment-584733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-584733">
			January 2, 2008 at 1:00 pm</a>		</div>

		<p>I&#8217;m not sure that it&#8217;s a good idea to send a WM_DESTROY on your own. &nbsp;Won&#8217;t the window manager send another one anyway? &nbsp;(Of course by that time maybe the tree-view has released its reference to the image list anyway, so maybe that would work. &nbsp;Still seems a bit odd to be sending that type of message to child windows manually, though.)</p>
<p>I&#8217;d say that initializing the image-list in the OnNcCreate handler probably makes more sense than manufacturing fake messages, but that&#8217;s just me. &nbsp;There&#8217;s already a place to hook into the destruction notification after the child windows have done their thing; why not just use it? &nbsp;:-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-584773">
				<div id="div-comment-584773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-584773">
			January 2, 2008 at 2:36 pm</a>		</div>

		<p>I love these sorts of postings. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-584793">
				<div id="div-comment-584793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ghbyrkit</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-584793">
			January 2, 2008 at 2:53 pm</a>		</div>

		<p>If you free a resource used by a child, then remove the reference from the child, before its WM_DESTROY message is processed. &nbsp;If this doesn&#8217;t work, then you must move the cleanup of the resource (image list) to the WM_NCDESTROY handler, where as the article Raymond refers to puts it: &quot;The WM_NCDESTROY is the last message your window will receive (in the absence of weirdness), and it is therefore the best place to do &quot;final cleanup&quot;. This is why our new scratch program waits until WM_NCDESTROY to destroy its instance variables.&quot;</p>
<p>So the bet is that the second action, moving it to the WM_NCDESTROY handler, is the choice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-584873">
				<div id="div-comment-584873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Comctl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-584873">
			January 2, 2008 at 4:15 pm</a>		</div>

		<p>If you destroy the imagelist, you need to call TVM_SETIMAGELIST so that it doesn&#8217;t have the reference to it in its destruction handler. Then you don&#8217;t need to move the ImageList_Destroy call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-584913">
				<div id="div-comment-584913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-584913">
			January 2, 2008 at 5:20 pm</a>		</div>

		<p>I liked the &quot;This is urgent; please give it priority attention.&quot; As if customers call PSS with issues that are not urgent&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-584973">
				<div id="div-comment-584973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">harmony7</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-584973">
			January 2, 2008 at 9:56 pm</a>		</div>

		<p>With regard to the WM_NCDESTROY message, it&#8217;s probably just me, but I&#8217;ve never ever had to handle this message in all 8+ years of my Windows programming career.</p>
<p>If we&#8217;re using MFC, we&#8217;d generally put an instance of CWnd (or derived class) as a class member of our parent window. &nbsp;In the parent window&#8217;s OnCreate, we&#8217;d call the CreateEx member of the child window, and in the OnDestroy, we&#8217;d call DestroyWindow. &nbsp;While it&#8217;s true that the child window would be destroyed automatically when the parent window is destroyed, that sounds to me along the same lines as not closing a file or unregistering a window class because that stuff all happens when a process shuts down.</p>
<p>If you&#8217;re not using MFC, I&#8217;d be creating the child window (using CreateWindowEx) in the parent window&#8217;s WM_CREATE handler. &nbsp;So wouldn&#8217;t it just be natural to put a DestroyWindow in the WM_DESTROY handler? &nbsp;Why WM_NCDESTROY? &nbsp;It doesn&#8217;t make semantic sense to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-585033">
				<div id="div-comment-585033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AndreiM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-585033">
			January 3, 2008 at 7:15 am</a>		</div>

		<p>Now I know how items are released from a tree control.</p>
<p>I think the code works like this:</p>
<ol>
<li>WM_DESTROY is received</li>
<li>
<p>The ImageList is cleaned-up but not unset from the tree.</p>
</li>
<li>
<p>Next, the Window Manager tries to destroy the TreeControl, and first will remove all items.</p>
</li>
<li>
<p>After the first item is removed, will set another item to be active, which will cause a repaint, and the image list (now invalid) is used, therefore &#8230; crash.</p>
</li>
</ol>
<p>The solution would be either to cleanup on WM_NCDESTROY (requires more knowledge) or unset the image-list for the control &#8211; for beginners.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-585093">
				<div id="div-comment-585093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">harmony7</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-585093">
			January 3, 2008 at 9:35 am</a>		</div>

		<p>Sorry, I noticed I messed up in my earlier post when I said that one should send the WM_DESTROY message to a child window directly. &nbsp;I meant to say that &quot;one should destroy the child window directly&quot; (thereby causing WM_DESTROY to be sent to it).</p>
<p>Everyone who is saying that the ImageList should be cleaned up during the handling of WM_NCDESTROY is correct in that it would work. &nbsp;I&#8217;m not disagreeing with that. &nbsp;I&#8217;m just trying to say that, although it is true that WM_DESTROY is sent parent-first and WM_NCDESTROY is sent child-first, I don&#8217;t believe that the purpose the two exist is just to have a separate destruction notification mechanism for each direction, but to handle two meaningfully separate events (the destruction of the window itself and the destruction of the window&#8217;s non-client area).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-585123">
				<div id="div-comment-585123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ghbyrkit</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-585123">
			January 3, 2008 at 10:04 am</a>		</div>

		<p>The point is: if you do NOT use the WM_NCDESTROY handling pattern, you will forever be finding problems such as this written by those who do not understand that the parent&#8217;s data items shared with its children are not done with until the parent receives the WM_NCDESTROY message and processes it. &nbsp;Simply calling Destroy on a child to &#8216;post a WM_DESTROY&#8217; message doesn&#8217;t get that message processed by the child at that time. &nbsp;Unhooking the data item from the child during WM_DESTROY of the parent only works if you track what you&#8217;ve added and do things carefully. &nbsp;So waiting until WM_NCDESTROY is so much simpler and more cerain to succeed&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-584993">
				<div id="div-comment-584993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-584993">
			January 3, 2008 at 3:22 am</a>		</div>

		<p>Well, of course you don&#8217;t *need* to handle WM_NCDESTROY if you use a resource usage and freeing pattern that works with WM_DESTROY. The point is that, if you have a choice from the beginning, using WM_NCDESTROY for cleanup is more intuitive, because WM_NCDESTROY is sent in the &quot;natural&quot; order for destruction (children first, then parent), which is the opposite order of construction. Using WM_NCDESTROY for cleanup means that, when you receive WM_DESTROY, you can assume all your children and their resources are still valid. Conversely, when you process WM_NCDESTROY, you know all child windows have been destroyed and their resources have been freed.</p>
<p>Putting a DestroyWindow() in the parent&#8217;s WM_DESTROY handler is just clumsy, because WM_DESTROY is sent to child windows before it&#8217;s sent to the parent window. All you achieve with that is that the child window will have to be careful not to cleanup twice, and it certainly doesn&#8217;t make shared resource cleanup any easier. This is exactly why it&#8217;s not the most intuitive way for doing resource cleanup, and it&#8217;s exactly what went wrong here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-585053">
				<div id="div-comment-585053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-585053">
			January 3, 2008 at 8:26 am</a>		</div>

		<p>Never mind about the brain farting in my last post&#8230; Of course WM_DESTROY is sent to the *parent* first before it&#8217;s sent to children&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-585513">
				<div id="div-comment-585513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-585513">
			January 3, 2008 at 6:32 pm</a>		</div>

		<blockquote><p>
  &#8230;and a little bit of spelunking revealed&#8230;
</p></blockquote>
<p>-Surely, you&#8217;ve heard of me. I am Raymond Chen, the famous spelunker.</p>
<p>-Me too! It&#8217;s such a pleasure to meet a fellow &#8216;lunker&#8217;!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-585543">
				<div id="div-comment-585543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://hexatron.com' rel='external nofollow' class='url'>hexatron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-585543">
			January 3, 2008 at 7:46 pm</a>		</div>

		<p>The guy who decided WM_CREATE on the main window should happen after the child windows&#8211;are his children also older than he is&#8211;is he the same guy who hung his pictures on the wall before he built the wall&#8211;the guy who thot backslash was the perfect path-delimiter? Is his name really Bass Ackwards? Izze? Wazee?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-585593">
				<div id="div-comment-585593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://hexatron.com' rel='external nofollow' class='url'>hexatron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080102-00/?p=23953#comment-585593">
			January 3, 2008 at 9:09 pm</a>		</div>

		<p>Here are the messages sent to a WS_OVERLAPPED window from when CreateWindow is called until CreeateWindow returns:</p>
<p>WM_GETMINMAXINFO 0x0 0x12fdb8</p>
<p>WM_NCCREATE 0x0 0x12fdb0</p>
<p>WM_NCCALCSIZE 0x0 0x12fdd8</p>
<p>WM_CREATE 0x0 0x12fd60</p>
<p>WM_SETTEXT 0x0 0x12fc38</p>
<p>and on destruction only</p>
<p>WM_DESTROY</p>
<p>WM_NCDESTROY</p>
<p>A dialog was a little different&#8211;</p>
<p>calling DialogBox() generated (in order) (about is the dialog box)</p>
<p>main WM_CANCELMODE 0x0 0x0</p>
<p>main WM_KILLFOCUS 0x0 0x0</p>
<p>main WM_ENABLE 0x0 0x0</p>
<p>about WM_SETFONT 0xd0a07bc 0x0</p>
<p>about WM_INITDIALOG 0x8302ee 0x0</p>
<p>main WM_NCACTIVATE 0x0 0x5e01ea</p>
<p>main WM_GETTEXT 0xff 0x12f204</p>
<p>main WM_ACTIVATE 0x0 0x5e01ea</p>
<p>about WM_WINDOWPOSCHANGING 0x0 0x12fc14</p>
<p>main WM_WINDOWPOSCHANGING 0x0 0x12fc14</p>
<p>main WM_NCPAINT 0x1 0x0</p>
<p>main WM_GETTEXT 0xff 0x12f204</p>
<p>main WM_ERASEBKGND 0xb2010922 0x0</p>
<p>main WM_WINDOWPOSCHANGED 0x0 0x12fc14</p>
<p>about WM_NCACTIVATE 0x1 0x5e01ac</p>
<p>about WM_ACTIVATE 0x1 0x5e01ac</p>
<p>about WM_USER 0x0 0x0</p>
<p>about WM_CHANGEUISTATE 0x3 0x0</p>
<p>main WM_PAINT 0x0 0x0</p>
<p>about WM_SHOWWINDOW 0x1 0x0</p>
<p>about WM_WINDOWPOSCHANGING 0x0 0x12fc98</p>
<p>about WM_NCPAINT 0x1 0x0</p>
<p>about WM_GETTEXT 0xff 0x12f394</p>
<p>about WM_ERASEBKGND 0x3010830 0x0</p>
<p>about WM_CTLCOLORDLG 0x3010830 0x5e01ea</p>
<p>about WM_WINDOWPOSCHANGED 0x0 0x12fc98</p>
<p>about WM_SIZE 0x0 0x8300d8</p>
<p>about WM_MOVE 0x0 0x12400ee</p>
<p>about WM_PAINT 0x0 0x0</p>
<p>(it goes on, but painting the dialog seems like a good place to stop)</p>
<p>which is lots of messages, but there is no WM_NCCREATE sent to the dialog. However, when the dialog box is destroyed, we do get</p>
<p>about WM_DESTROY</p>
<p>about WM_NCDESTROY</p>
<p>So much for fearful symmetry!</p>
<p>This only took a few minutes and was pretty educational, though I doubt if I really needed to know about the WM_CANCELMODE message.</p>
<div class=post>[<i>This is discussed in my book, but it&#8217;s obvious if you think about it. (How can something that is established during initialization happen before the initialization itself?) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>