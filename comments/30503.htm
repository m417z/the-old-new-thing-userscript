<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-401353">
				<div id="div-comment-401353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://qstuff.blogspot.com' rel='external nofollow' class='url'>Justin Olbrantz</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-401353">
			July 17, 2006 at 10:47 am</a>		</div>

		<p>&#8220;Okay, that&#8217;s a quick introduction to how functions are imported and exported on 16-bit Windows. Next time, we&#8217;ll look at the transition to 32-bit Windows and the design decisions that went into the new model.&#8221; </p>
<p>Please explain why you decided to perform relocations for global data references, rather than use a TOC register/local variable (at least for x86; I don&#8217;t know about other architectures). I really want to know.</p>
<div CLASS=post>[<i><a href="http://blogs.msdn.com/oldnewthing/archive/2004/09/14/229387.aspx" rel="nofollow">I already discussed this</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-401383">
				<div id="div-comment-401383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">orcmid</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-401383">
			July 17, 2006 at 12:01 pm</a>		</div>

		<p>Wow, now that&#8217;s an old new thing. &nbsp;I worked on a rewrite of a relocating loader implemented by Bill Lynch in 1962 and that is exactly how he did it and how the relocating-loader format did it from then on. &nbsp;I think his design may have been inspired by a Control Data compiler system, but I can&#8217;t be sure now. &nbsp;</p>
<p>My first work on relocating loaders was to adapt ideas from the original Binary Symbolic Subroutine (BSS) loader of the first Fortran II compiler for working with an assembler on the IBM 650. &nbsp;In the assember three of us hacked at the University of Washington in 1959, we didn&#8217;t know about fixup chains, so we missed a chance. &nbsp;</p>
<p>In the little Fortran compiler that Don Knuth wrote and for which Lynch&#8217;s loader was designed, Don knew all about fixup chains. &nbsp;One-pass assemblers (and compilers) often used them to handle forward references as well as externals.</p>
<p>Now that&#8217;s a blast from the past!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401393">
				<div id="div-comment-401393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-401393">
			July 17, 2006 at 12:08 pm</a>		</div>

		<blockquote><p>
  the loader wrote the address of a function<br />
  <br />KERNEL:120 UndefDynlink (yes, you can link to it&#8230;)<br />
  <br />&gt;that displayed the &quot;Call to Undefined Dynalink&quot; fatal error dialog.<br />
  <br />More precisely, NTVDM displays that fatal error dialog; Windows 95 displays &quot;Program Error&quot; &quot;Your program is making an invalid dynamic link call to a .DLL file&quot;. I forget whether Windows 3.1 had a different message.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-401473">
				<div id="div-comment-401473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-401473">
			July 17, 2006 at 4:03 pm</a>		</div>

		<blockquote><p>
  One-pass assemblers (and compilers) often used them to handle forward references as well as externals. </p>
<p>When you tell that to kids these days, they say &quot;Rubbish. &nbsp;One-pass assemblers can&#8217;t handle forward references at all.&quot;</p>
<p>(You have to write an assembler before you can even consider guessing how many people think that. &nbsp;A huge proportion of all programmers, probably in excess of 90%, by my estimation)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401483">
				<div id="div-comment-401483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-401483">
			July 17, 2006 at 4:41 pm</a>		</div>

		<p>Well, I won&#8217;t discount that forward references are possible in a single-pass assembler, but I&#8217;m not really seeing how you&#8217;d do them. &nbsp;Even with a fixup chain, you&#8217;d have to fix up the chain eventually; wouldn&#8217;t that be considered another pass? &nbsp;Or is the fixing up done at runtime, by the program loader (as in win16 here)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-401583">
				<div id="div-comment-401583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-401583">
			July 18, 2006 at 7:07 am</a>		</div>

		<p>@BryanK</p>
<p>A one pass assembler makes one pass through the source code. The second pass is just patching the chained forward references in the binary.</p>
<p>I guess back in the old days, reading the source code from disk was slow, and even strcmp and the like were not exactly speedy. But following and patching a linked list was blazingly fast, so you could sell this as &#8216;one pass assembly&#8217;, even though it&#8217;s more like a 1.1 pass assembler.</p>
<p>Of course on a modern processor with caches and memory mapped files, you have to wonder whether fixup chains and the like make sense. The problem is that each chain requires a pass through the file &#8211; accesses are highly non local, which messes with both caches and memory mapping, since both optimise for sequential reading and writing.</p>
<p>Worst of all, each page you patch will be copied, since the exe file is mapped as &#8216;copy on write&#8217;. And on a server OS like Windows NT was meant to be from the start, that&#8217;s bad because it means that they can&#8217;t be shared by different instances of the same process. So if you have 10 instances of services.exe, each instance will need to have a private copy of all the patched pages.</p>
<p>I wonder if these sort of architectural changes in processors and the fact that Win32 was supposed run on big iron Risc servers rather than nasty little desktop boxes affected how they decided to do it on Win32 ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401603">
				<div id="div-comment-401603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-401603">
			July 18, 2006 at 8:31 am</a>		</div>

		<p>Ah, OK, that makes sense then. &nbsp;Thanks! &nbsp;;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-401693">
				<div id="div-comment-401693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-401693">
			July 18, 2006 at 11:38 am</a>		</div>

		<p>Tom: that&#8217;s why the &#8216;rebase&#8217; and &#8216;bind&#8217; tools exist. We set the base address of the DLL so that it doesn&#8217;t clash with any other DLL and therefore doesn&#8217;t need fixing up at runtime. We then use &#8216;bind&#8217; to set the default addresses in the import table to be the correct addresses assuming that the DLL loads at its preferred base address. The loader detects that the DLL is the correct version (using link checksum I believe) and that it loaded at the correct base address and therefore skips the importing step since it knows the addresses are correct. Therefore these pages aren&#8217;t touched and no copying is done.</p>
<p>DLLs shipped with Windows are correctly rebased and bound. People complain about IE&#8217;s fast start times assuming that Microsoft are doing something internal to the operating system to allow it to load quickly (presumably making a corollary that this is to the detriment of other applications), but this is false: it simply uses the OS facilities as far as possible (therefore mainly touching code that is already &#8216;hot&#8217;), and the DLLs are rebased and bound so the loader doesn&#8217;t need to do any fixups. There have been hints that Microsoft have some special tools to break apart functions into mainline/error handling paths and put the error handling paths onto different pages &#8211; I&#8217;ve experienced this odd jumping around when trying to debug in kernel32 before! &#8211; and to then reorganise these blocks so that startup code is all on the same page, reducing the I/O needed to load a process. There&#8217;s no reason that Microsoft&#8217;s competitors can&#8217;t do the same.</p>
<p>Security patches or other hotfixes obviously have to add extra code, so functions will move around a bit, making the binding less effective.</p>
<p>Windows Vista will have a feature called &quot;Address Space Layout Randomization&quot; or ASLR for short. See <a rel="nofollow" target="_new" href="http://blogs.msdn.com/michael_howard/archive/2006/05/26/608315.aspx" rel="nofollow">http://blogs.msdn.com/michael_howard/archive/2006/05/26/608315.aspx</a> for details. I think this will require rebasing at runtime, once, the first time a system DLL is loaded; subsequent instantiations of a DLL will use the same base address so there&#8217;ll only be one copy-on-write operation made.</p>
<p>Windows CE completely ignores base addresses so binding is pointless on that platform. The copy-on-write is prevented because the DLLs are always loaded at the same address in every process. This remains the same in Windows CE 6.0 (now in beta) which changes the process address space model from a side-by-side 32MB address space to a completely overlapping 2GB model as the desktop has.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401843">
				<div id="div-comment-401843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-401843">
			July 18, 2006 at 8:41 pm</a>		</div>

		<p>Tuesday, July 18, 2006 7:07 AM by Tom<br />
<br />&gt; A one pass assembler makes one pass through<br />
<br />&gt; the source code. The second pass is just<br />
<br />&gt; patching the chained forward references in<br />
<br />&gt; the binary.</p>
<p>Sure but so what ^_?</p>
<p>&gt; I guess back in the old days, reading the<br />
<br />&gt; source code from disk</p>
<p>Back in the old days, if you had a disk, it wasn&#8217;t big enough for source code. &nbsp;If you had a disk then you didn&#8217;t have to load the OS in from cards or tape, and probably you didn&#8217;t have to load in the assembler from cards or tape, but your source code you sure did.</p>
<p>&gt; was slow, and even strcmp and the like were<br />
<br />&gt; not exactly speedy. But following and<br />
<br />&gt; patching a linked list was blazingly fast,</p>
<p>But the CPU time was drowned out by the elapsed time spent reading the first version of the object code from cards or tape and punching the patched version on cards or tape.</p>
<p>In less old days you could sell a 1.1 pass assembler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-401853">
				<div id="div-comment-401853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-401853">
			July 18, 2006 at 8:48 pm</a>		</div>

		<p>Sorry for two in a row, I just belatedly noticed this:<br />
<br />Tuesday, July 18, 2006 11:38 AM by Mike Dimmick<br />
<br />&gt; Windows CE completely ignores base addresses<br />
<br />&gt; so binding is pointless on that platform.<br />
<br />&gt; The copy-on-write is prevented because the<br />
<br />&gt; DLLs are always loaded at the same address<br />
<br />&gt; in every process.</p>
<p>Therefore the DLL loader in WinCE is completely different from the DLL loader in Win32. &nbsp;Therefore is there some possibility that maybe the first argument to DllMain really is a HANDLE in WinCE, really different from the HINSTANCE that Win32 has? &nbsp;If these OSes really differ in this way then there&#8217;s a chance that some of Microsoft&#8217;s code and tools aren&#8217;t broken the way they seem to be and maybe Microsoft&#8217;s explanations were broken instead. &nbsp;This makes a huge difference in figuring out what is correct. &nbsp;Even though the bug (or part thereof) is already resolved as &quot;won&#8217;t fix&quot;, it would still be informative to figure out exactly what the bug is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402373">
				<div id="div-comment-402373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/07/20/672695.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-402373">
			July 20, 2006 at 10:00 am</a>		</div>

		<p>Preserving the spirit while accommodating separate address spaces and new processors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402533">
				<div id="div-comment-402533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-402533">
			July 20, 2006 at 6:37 pm</a>		</div>

		<p>In fact, you could probably have used UndefDynlink as a poor man&#8217;s weak reference. Take the example of EnableScrollBar which IIRC is a 3.1 API not present in 3.0; rather than write something along the lines of<br />
<br />FARPROC esbProc = GetProcAddress(hUser, MAKEINTRESOURCE(482));<br />
<br />if (esbProc) {<br />
<br /> &nbsp;/* call it */<br />
<br />}<br />
<br />you could import it from your .DEF file and write<br />
<br />if (EnableScrollBar != UndefDynlink) {<br />
<br /> &nbsp;/* call it */<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402653">
				<div id="div-comment-402653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/07/21/673830.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-402653">
			July 21, 2006 at 10:00 am</a>		</div>

		<p>Wherein the compiler doesn&#8217;t know what&#8217;s going on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403133">
				<div id="div-comment-403133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-403133">
			July 25, 2006 at 6:52 am</a>		</div>

		<p>I asked the following in response to Mike Dimmick&#8217;s comment:<br />
<br />&gt; Therefore is there some possibility that<br />
<br />&gt; maybe the first argument to DllMain really<br />
<br />&gt; is a HANDLE in WinCE, really different from<br />
<br />&gt; the HINSTANCE that Win32 has?</p>
<p>I&#8217;ve seen some hints that the answer is no, the first argument has a value that&#8217;s really an HINSTANCE even in WinCE, and it just gets forced through a wrongly typed parameter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403883">
				<div id="div-comment-403883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/07/27/680250.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-403883">
			July 27, 2006 at 10:00 am</a>		</div>

		<p>For reference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666953">
				<div id="div-comment-666953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://msmvps.com/blogs/vandooren/archive/2008/09/12/how-dll-exports-really-work.aspx' rel='external nofollow' class='url'>Cluebat-man to the rescue</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503#comment-666953">
			September 12, 2008 at 6:50 am</a>		</div>

		<p>I found this list of article on Raymond&amp;#39;s blog . Raymond&amp;#39;s blog is one of the more interesting</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>