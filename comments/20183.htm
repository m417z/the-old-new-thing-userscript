<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-684503">
				<div id="div-comment-684503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob Shearman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081117-00/?p=20183#comment-684503">
			November 17, 2008 at 11:16 am</a>		</div>

		<p>In addition to the point Raymond makes some Win32 code may not even have a message loop, such as services or library code. In such a case, having an easy way to make a wait operation happen asynchronously is beneficial. Even in the case where you do have a message loop, the operation that you perform when the object is signalled may take a long time to complete and so you wouldn&#8217;t want to do it on a UI thread anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-684493">
				<div id="div-comment-684493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arlie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081117-00/?p=20183#comment-684493">
			November 17, 2008 at 11:08 am</a>		</div>

		<p>There&#8217;s another set of good reasons to use RegisterWaitForSingleObject (or just plain WaitForSingleObject or WaitForMultipleObjects in your own worker thread).</p>
<p>Every time a thread calls any WaitFor* function, the kernel needs to translate handles to object pointers, and needs to link up the wait blocks for the current thread in the headers of the waitable objects (in the portion of the objects&#8217; header that is owned by the dispatcher). &nbsp;This is work, and it is work that is proportional to the number of handles, and the number of times you call any WaitFor* method.</p>
<p>GUI threads typically have a high rate of message processing, and the speed which those messages are processed has a strong effect on the quality of the user&#8217;s experience. &nbsp;If you are managing an array of wait handles, and you use MsgWaitForMultipleObjects in order to multiplex between wait handles and USER32/GUI messages, then you&#8217;re adding a fair amount of processing to every user/kernel transition.</p>
<p>If you are managing a large number of handles, and those handles become signalled relatively infrequently (for example, notifications from the Plug-and-Play manager, or a directory notification event for your configuration files, etc.), then you should use RegisterWaitForSingleObject. &nbsp;The thread (from the thread pool) which does the waiting will get to sleep for a long time, and so all of its private data will get pushed out of L1 and L2 cache, leaving you more room in L1 and L2 for your &quot;real&quot; work. &nbsp;Then, in your callback function, you can use PostMessage to your main thread to forward the message. &nbsp;This gives you the simplicity of single-threaded processing (you don&#8217;t have to worry about locks nearly as much), but also gives you decent performance, and also side-steps the problem Raymond described, with modal message pumps that are beyond your control.</p>
<p>If you have wait handles that are signaled at a very high rate, such as asynchronous I/O for networking or disk I/O, then you probably want to be doing this on a worker thread anyway, rather than your GUI thread. &nbsp;You should still use PostMessage to send messages to your GUI thread. &nbsp;(SendMessage is evil because it blocks, but sometimes that&#8217;s the least-evil choice.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>