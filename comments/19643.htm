<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-696963">
				<div id="div-comment-696963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-696963">
			January 1, 2009 at 10:33 am</a>		</div>

		<p>If you&#8217;re running XP/2003, there is the &lt;a href=&quot;<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms681952" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms681952</a>(VS.85).aspx&quot;&gt;AttachConsole&lt;/a&gt; function. &nbsp;Couldn&#8217;t this be combined with a method like &lt;a href=&quot;<a rel="nofollow" target="_new" href="http://support.microsoft.com/kb/105305&quot;&gt;this&lt;/a&gt;" rel="nofollow"></a><a href="http://support.microsoft.com/kb/105305&quot;&gt;this&lt;/a&#038;gt" rel="nofollow">http://support.microsoft.com/kb/105305&quot;&gt;this&lt;/a&#038;gt</a>; or &lt;a href=&quot;&quot;&gt;<a rel="nofollow" target="_new" href="http://www.halcyon.com/~ast/dload/guicon.htm&lt;/a&gt;" rel="nofollow"></a><a href="http://www.halcyon.com/~ast/dload/guicon.htm&lt;/a&#038;gt" rel="nofollow">http://www.halcyon.com/~ast/dload/guicon.htm&lt;/a&#038;gt</a>; to achieve the desired affect? &nbsp;I&#8217;ve used the last example a few times, but it allocates a new console instead of using the parent&#8217;s console.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-696973">
				<div id="div-comment-696973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-696973">
			January 1, 2009 at 10:37 am</a>		</div>

		<p>&gt;&gt;To do this the kernel would have to have psychic powers&lt;&lt;</p>
<p>I don&#8217;t see why that is necessary. &nbsp;Why can&#8217;t there be a third type &#8211; &#8220;dynamic&#8221; &#8211; where creating or attaching to the console and whether to release the CMD prompt to accept the next command is made by the application at run-time through API calls. &nbsp;Many of the API calls are actually already available (AttachConsole, etc.).</p>
<p>This type of usage is actually quite common. &nbsp;Microsoft has a number of executables that emulate this behavior (e.g., Visual Studio), and if you search the &#8216;net, there are lots of people trying to do the same with their apps.</p>
<div class=post>[<i>Before the first instruction in the process executes, kernel needs to set up the execution environment. It needs to decide whether to set the process&#8217;s stdin/stdout to NULL or to create a console and set the stdin/stdout to that console. But it has to wait until the process calls &#8220;IHaveDecidedWhetherIWantAConsole()&#8221;. Program execution requires execution environment. Execution environment includes setting stdin/stdout. Knowing what stdin/stdout should be requires program execution. Without psychic powers, you have a deadlock. That&#8217;s the entire point of my article, which I apparently did a bad job of explaining. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-696983">
				<div id="div-comment-696983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">qwertz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-696983">
			January 1, 2009 at 10:46 am</a>		</div>

		<blockquote><p>
  These are programs that want to decide at run time whether they want a console or not.
</p></blockquote>
<p>Isn&#8217;t that exactly what AllocConsole and AttachConsole are there for?</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms681944" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms681944</a>(VS.85).aspx</p>
<p>But maybe the point is that there are actually programs that want decide during run time whether a console should have existed during startup?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-697003">
				<div id="div-comment-697003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Me</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697003">
			January 1, 2009 at 12:28 pm</a>		</div>

		<p>And yet Unix has no problem doing this. &nbsp;All programs are effectively console programs, but they can choose not to use stdin and stdout. &nbsp;In fact, there are ways to determine at runtime if a program is connected to a terminal and perform different actions. &nbsp;So if a program is started from the command line, stdin would be connected to a tty and the program can take a different path than if stdin was connected to /dev/null, or if it was connected to a file, or whatever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-697013">
				<div id="div-comment-697013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697013">
			January 1, 2009 at 12:34 pm</a>		</div>

		<p>I like the devenv solution. The problem with the ildasm solution is that the application will never see WM_QUERYENDSESSION messages.</p>
<p>ildasm may have been originally written with an older compiler/linker which didn&#8217;t automatically work with both (w)WinMain and (w)main entry points, which explains the use of editbin.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-697033">
				<div id="div-comment-697033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697033">
			January 1, 2009 at 1:40 pm</a>		</div>

		<p>Junfeng&#8217;s description of how devenv.com works is incorrect.</p>
<p>devenv.com is a general purpose console-mode stub application. &nbsp;When it runs it creates three pipes to redirect the console&#8217;s stdin, stdout and stderr. &nbsp;It then finds its own name (usually devenv.com), replaces the &quot;.com&quot; with &quot;.exe&quot; and launches the new app (i.e. devenv.exe) using the read end of the stdin pipe and the write ends of the stdout and stderr pipes as the standard handles. &nbsp;Then it just sits and waits for devenv.exe to exit and copies data between the console and the pipes.</p>
<p>Thus even though devenv.exe is a gui app it can read and write the &quot;parent&quot; console using its standard handles.</p>
<p>And you could use devenv.com yourself for myapp.exe by renaming it to myapp.com. &nbsp;But you can&#8217;t in practise because it belongs to MS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-697043">
				<div id="div-comment-697043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697043">
			January 1, 2009 at 1:44 pm</a>		</div>

		<p>I&#8217;ve tackled this a little differently in the past. I wrote a small, generic &quot;GUI runner&quot; console exe. You give that the path and arguments of the GUI program you want to run.</p>
<p>It runs the GUI program, hooking its IO handles to pipes which connect to the console&#8217;s IO handles. It waits for the GUI program to exit so that the command-line launch doesn&#8217;t run in the background.</p>
<p>The nice thing about this is it&#8217;s a small, generic exe which you can use with any GUI app. The GUI app doesn&#8217;t have to do anything special, except ensure that it doesn&#8217;t display any UI if given a command line.</p>
<p>As someone who came from the Amiga world, where there was no distinction between a command-line app and a GUI app, I still find just about everything related to the console subsytem in Windows to be horrible.</p>
<p>The past cannot be changed but a new, good, well-designed console / command-line shell could be added to Windows. I hoped that was what PowerShell would be but it turned out to run within the same old console subsystem and thus solved nothing. Ah well!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-697053">
				<div id="div-comment-697053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697053">
			January 1, 2009 at 1:46 pm</a>		</div>

		<p>Based on laonianren&#8217;s description (which I think was posted as I wrote my previous post), I guess my method isn&#8217;t that different after all. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-697073">
				<div id="div-comment-697073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">manicmarc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697073">
			January 1, 2009 at 3:41 pm</a>		</div>

		<p>How does the shutdown command work? It has an option &#8220;/i&#8221; that displays a GUI. </p>
<p>It doesn&#8217;t create a new process (my first guess), the command prompt window stays there waiting, and pressing CTRL + C in the command window closes the program, and therefore the GUI window.</p>
<div class=post>[<i>Yup, that&#8217;s a console application. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-697083">
				<div id="div-comment-697083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chriso</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697083">
			January 1, 2009 at 4:24 pm</a>		</div>

		<p>Dunno, but aren&#8217;t such &quot;workarounds&quot; potential backward compatibility problems in future Windows &nbsp;versions?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-697093">
				<div id="div-comment-697093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.henning.makholm.net/' rel='external nofollow' class='url'>Henning Makholm</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697093">
			January 1, 2009 at 4:43 pm</a>		</div>

		<p>It is nice to hear from an authori^H^H^H^H^H^H^H guy who usually seems to know what he&#8217;s talking about that there is no easy solution for this one.</p>
<p>It appears that it would ALMOST make sense to &quot;inherit a console if present&quot; &#8212; but how is cmd.exe then going to know whether it should wait for the process to terminate before emitting a new command prompt? If the process decides that today it wants to be pure GUI, the user might want his shell back before it terminates.</p>
<p>Then one would need to kludge on some ad-hoc APIs to let CMD know whether and when the process has closed its console handle (which I can imagine would not integrate nicely with how the kernel otherwise handles handles).</p>
<p>The reason why this is not a problem on Unix is that Unix shell users accept that they have to predict the behavior of their application and tell the shell what to do (by adding an ampersand on the command line for GUI programs). Starting to require this in Windows would probably be perceived as a compatibility break by many.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-697113">
				<div id="div-comment-697113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.distributed.net/source/' rel='external nofollow' class='url'>Bovine</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697113">
			January 1, 2009 at 5:16 pm</a>		</div>

		<p>The distributed.net client (dnetc) is another example of something that uses the devenv.com method. &nbsp;It includes a dnetc.com frontend (see w32cuis.c) that creates pipes before launching dnetc.exe to do the real work. &nbsp;If dnetc.exe is launched directly, you get a custom GUI that happens to resemble a console-like application but with pull-down menus other GUI enhancements.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-697173">
				<div id="div-comment-697173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697173">
			January 1, 2009 at 8:14 pm</a>		</div>

		<p>I don&#8217;t know whether it&#8217;s appropiate to do this way, but in my previous company, I&#8217;ve written a C# program typed &quot;service&quot; and detect whether it&#8217;s launched from console in the main() function. If it&#8217;s not attached then run Application.Run(new frmMain) from there&#8230; And it does seems to work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-697063">
				<div id="div-comment-697063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/' rel='external nofollow' class='url'>James Sutherland</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697063">
			January 1, 2009 at 2:32 pm</a>		</div>

		<p>If we could just set some new flag to suppress the creation of a *new* console on launch, everything would be fine. At present, a process either *always* has a console (even if that means creating a new one) or *never* has it (even if that means detaching from the existing one) &#8211; an intermediate option, inheriting an existing console if present but never creating one, would solve the last irritating glitch of a console appearing then disappearing immediately.</p>
<p>(Alternatively, having CSRSS.EXE delay opening the new console window until it&#8217;s actually needed would solve this even for existing applications: discard it unopened upon a FreeConsole call, avoiding the transient appearance where it&#8217;s unwanted.)</p>
<div class=post>[<i>The flag would solve <u>many</u> cases but not all. Consider the app that wants to run either in GUI mode or console mode (creating a console if necessary) based on a command line switch. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-697193">
				<div id="div-comment-697193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697193">
			January 1, 2009 at 10:36 pm</a>		</div>

		<p>Does anybody know how to generate a &quot;.com&quot; output file using VS2008? &nbsp;I&#8217;m trying to work up a solution similar to what devenv.com/devenv.exe does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-697103">
				<div id="div-comment-697103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697103">
			January 1, 2009 at 5:03 pm</a>		</div>

		<p>Henning: The application would call FreeConsole if it wanted to detach itself from the console, as it does already.</p>
<p>Still, I don&#8217;t think this is a must-have feature, since the &quot;console flash&quot; thing you get with the solution used by ildasm isn&#8217;t *that* horrible. I don&#8217;t think many non-technical people would even notice it (though I guess dual-mode applications would be targeted to technical people&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-697233">
				<div id="div-comment-697233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697233">
			January 2, 2009 at 3:24 am</a>		</div>

		<p>This &quot;magic&quot; can be done by using masm (and specifying wingui in the exe header). There&#8217;s even a hello world app (wingui) that writes to the console it is started in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-697243">
				<div id="div-comment-697243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697243">
			January 2, 2009 at 3:28 am</a>		</div>

		<p>@Tom: I doubt that devenv.com is really a DOS .COM file &#8211; COM files lack the PE header. Instead it&#8217;s a renamed standard PE EXE. The only reason to call it devenv.com is because Windows will run a .COM file first, rather than a .EXE if it finds both in a directory.</p>
<p>The quirk is that a) Windows inherits the DOS prefer-.com-over-.exe, and b) that the Windows image loader doesn&#8217;t inspect extensions when loading &#8211; it&#8217;ll see if a file has a valid header first, before trying to set up a DOS COM environment and running it that way.</p>
<p>I think Raymond did an article about this&#8230; apparently it dates back to DOS too.</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2008/03/24/8332730.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2008/03/24/8332730.aspx</a></p>
<p>Just that devenv.com is a console Win32 app with a false extension. Or how screensavers with .scr are really also .exe in disguise.</p>
<p>Now the question is, if you create a console app&#8230; can it call all the GDI functions as normal (including message pump, etc)? I think you can, and I believe I have, but I&#8217;m not sure &#8211; it was a while back.</p>
<p>If so, then the only real reason to have the com/exe thing was to hide an &quot;ugly&quot; console window&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-697253">
				<div id="div-comment-697253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697253">
			January 2, 2009 at 5:01 am</a>		</div>

		<p>BTW, Exchange 2007&#8217;s setup.com uses the same trick as devenv.com. But why use this trick when there is AttachConsole() and AllocConsole?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-697283">
				<div id="div-comment-697283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697283">
			January 2, 2009 at 9:20 am</a>		</div>

		<p>AttachConsole is only available starting with XP, and AllocConsole does not attach to the parent console (which is the whole point of making it run as a console application).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-697363">
				<div id="div-comment-697363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sandman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697363">
			January 2, 2009 at 12:39 pm</a>		</div>

		<p>@Henning</p>
<p>Most unix GUI programs need &#8216;&amp;&#8217; in that usage, because their authors don&#8217;t think they need to detach from the console.</p>
<p>It is possible (under unix) to close you stdio/err/out, and respawn yourself via fork. Then exit the original process &#8211; this is normally called daemonising.</p>
<p>Moving back on topic, this is akin to want the Windows kernel does for GUI Subsytem programs. (There are differences though). Unfortunately it depends on the fork() syscall for which windows has no alternative &#8211; although I believe Cygwin can fake it somehow.</p>
<p>The nearest equivalent for this trick under windows is the ildasm solution. The reason unix apps don&#8217;t suffer from the windows flicker issue &#8211; is that the kernel doesn&#8217;t set an environment up for new processes in unix in the same way. They just inherit form their parent.</p>
<p>The downside of this is starting a console app in unix from inside a windowing context is that the consoles output may never reach the user since stdout may only be directed to /dev/null. (stderr is often direct to a hidden file). Of course if the GUI launcher knows an application is console app it can start a console/terminal window for it.</p>
<p>It an good example of the different approaches taken.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-697473">
				<div id="div-comment-697473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697473">
			January 2, 2009 at 2:14 pm</a>		</div>

		<p>Leo,</p>
<p>I may be remembering wrong, but in the Amiga world I seem to remember that it was similar to the UNIX model where a GUI app is just like any other app but if you launch it from Workbench its output handles aren&#8217;t attached to anything.</p>
<p>This means that if you wanted to launch a command line app from Workbench you needed a wrapper that would open a console and then spawn the command line tool&#8230; which is basically what Windows is doing, but doing it in the kernel rather than needing the intermediate app.</p>
<p>UNIX desktops generally follow a similar principle to how command-line tools were launched in Workbench, but desktop environments usually make life a little easier by providing a &quot;Run in Terminal&quot; checkbox that launches your default terminal.</p>
<p>One thing that was neat on the Amiga though was that they took &quot;everything is a file&quot; to an even greater extreme than UNIX, with the CON: device that would open an on-screen console, and the SPEAK: device that would route anything written to it through the text-to-speech engine. This meant that the Amiga equivalent of AllocConsole was just fopen(f, &quot;CON:&quot;).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-697593">
				<div id="div-comment-697593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kujo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697593">
			January 2, 2009 at 5:40 pm</a>		</div>

		<blockquote><p>
  Consider the app that wants to run either in GUI mode or console mode (creating a console if necessary) based on a command line switch.
</p></blockquote>
<p>It&#8217;s just up to the app to let go of the console if the command-line switch is missing or create one if needed. At this point, I think that would mean another devenv.com-style trick.</p>
<blockquote><p>
  But why use this trick when there is AttachConsole()
</p></blockquote>
<p>In addition to the OS support John mentions, you also want cmd to wait for your program to finish (when it&#8217;s run from cmd.)</p>
<blockquote><p>
  The application would call FreeConsole if it wanted to detach itself from the console, as it does already.
</p></blockquote>
<p>Unfourtunately, cmd will still wait for it to finish. &nbsp;I don&#8217;t think there&#8217;s any extant mechanism for cmd to tell the FreeConsole has happened.</p>
<p>So we have two feature requests: An &quot;inherit&quot; application mode and something in the console subsystem that cmd would use to tell when the child calls FreeConsole. &nbsp;And this &quot;inherit&quot; application mode can&#8217;t break backwards compatibility with older OSes, debuggers, 4nt, etc. &nbsp;While I&#8217;ve wanted this power for ages, I&#8217;m not holding my breath :)</p>
<p>(I seem to be having trouble submitting this. &nbsp;I hope I don&#8217;t end up being &quot;that guy&quot; with five copies of his post.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-697863">
				<div id="div-comment-697863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.codeinsight.com' rel='external nofollow' class='url'>Mike Fitzpatrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697863">
			January 4, 2009 at 7:27 pm</a>		</div>

		<p>Try this (VB code):</p>
<p>&nbsp;&#8216; Hide the console window if there are no command line args</p>
<p>&nbsp;Dim myHandle As IntPtr</p>
<p>&nbsp;myHandle = Process.GetCurrentProcess.MainWindowHandle</p>
<p>&nbsp;Dim hwnd As Integer = myHandle.ToInt32</p>
<p>&nbsp;Dim nCmdShow As Integer = SW_HIDE</p>
<p>&nbsp;Dim bShow As Integer = ShowWindow(hwnd, nCmdShow)</p>
<p>&nbsp;myFrm.Show() : Application.DoEvents()</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-697893">
				<div id="div-comment-697893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sarathc.wordpress.com' rel='external nofollow' class='url'>Sarath</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-697893">
			January 5, 2009 at 4:41 am</a>		</div>

		<p>That&#8217;s a great post. I found MSDEV is actually loading msdev.com &#8230;. I think it&#8217;s loading the COM file because of the priority it get from .COM over .exe extension. Am I correct? Otherwise how it&#8217;s possible to determine to launch .com or .exe program?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-698033">
				<div id="div-comment-698033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sarathc.wordpress.com/2009/01/05/how-you-can-write-code-both-works-with-console-and-windowed-mode/' rel='external nofollow' class='url'>How you can write code both works with console and windowed mode? &laquo; Sharing my thoughts&#8230;</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-698033">
			January 5, 2009 at 2:44 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://sarathc.wordpress.com/2009/01/05/how-you-can-write-code-both-works-with-console-and-windowed-mode/" rel="nofollow">http://sarathc.wordpress.com/2009/01/05/how-you-can-write-code-both-works-with-console-and-windowed-mode/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-698663">
				<div id="div-comment-698663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-698663">
			January 7, 2009 at 10:07 am</a>		</div>

		<p>[The flag would solve many cases but not all. Consider the app that wants to run either in GUI mode or console mode (creating a console if necessary) based on a command line switch. -Raymond]</p>
<p>if (console_mode_selected)</p>
<p>&nbsp;AllocConsole(), puts(&#8220;problem solved&#8221;);</p>
<p>You need a better counter-example.</p>
<div class=post>[<i>You need a better example. In your case, the output doesn&#8217;t go into the parent process&#8217;s console, which is what most people want when they run a console app. Imagine if &#8220;echo&#8221; worked this way. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-698783">
				<div id="div-comment-698783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-698783">
			January 7, 2009 at 12:13 pm</a>		</div>

		<p>I done that for few applications at work. I used C#.NET, where I create a windows app looking for number of arguments. If argument exists (proper ones) then run it as console. Otherwise follow the normal route and bring up the GUI.</p>
<p>Assumption is that the argument I am looking for should be provided only from the console mode.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-698863">
				<div id="div-comment-698863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cameron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090101-00/?p=19643#comment-698863">
			January 7, 2009 at 8:05 pm</a>		</div>

		<p>In a similar vein, is there no way to make Visual Studio route the I/O of a console app to an &quot;Console Output&quot; window like IDEs on Mac OS X and Unix do, (rather than starting a console window&#8230;)?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>