<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-248033">
				<div id="div-comment-248033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248033">
			January 21, 2005 at 7:11 am</a>		</div>

		<p>Wow, that&#8217;s ugly.</p>
<p>Why not add an extra parameter &quot;bool suppresCompletionNotification&quot; to the functions that use this mechanism ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248043">
				<div id="div-comment-248043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248043">
			January 21, 2005 at 7:24 am</a>		</div>

		<p>Because it would have to be added to every API that could possibly cause an event to be set to the signalled state.</p>
<p>This includes the ReadFile and WriteFile API, as well as all the synchronization APIs.</p>
<p>That means that literally dozens of APIs would have had to be updated.</p>
<p>Remember: completion ports were added in NT 3.5, it would have been difficult (to say the least) to rev all the Win32 APIs to handle this.</p>
<p>Instead, they encoded the &quot;suppress notifications&quot; functionality into the handle itself.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-248063">
				<div id="div-comment-248063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248063">
			January 21, 2005 at 7:45 am</a>		</div>

		<p>I like how it says, &quot;For compatibility with future operating systems, it is best to call GetCurrentProcess instead of hard-coding this constant&quot; but you know that in 10 years, the App. Compat. team is going to have to figure out a way to make at least 3 dozen applications work that all used the constant value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248133">
				<div id="div-comment-248133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mathias</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248133">
			January 21, 2005 at 10:43 am</a>		</div>

		<p>The ability to avoid a completion in a completion port for a particular operation is useful for perf. Consider:</p>
<p>A) I post an operation (read, write, what have you)<br />
<br />B) The file handle is already attached to a completion port<br />
<br />C) I know it&#8217;s going to take a while. I don&#8217;t want to make this call synchronous since I can reuse the thread for other things in the mean time.<br />
<br />D) I don&#8217;t want another thread to preempt this thread when this operation completes. For some other operations on this file handle, it&#8217;s ok but for this particular one, it isn&#8217;t.<br />
<br />E) In other words, I wan&#8217;t to go verify on my own terms with my current thread whether the operation has completed. I&#8217;ll probably do that when I have some spare cycles.</p>
<p>Thus it&#8217;s useful to be able to disable completion for a particular operation.</p>
<p>Someone correct me if I screwed up&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-248153">
				<div id="div-comment-248153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MYG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248153">
			January 21, 2005 at 11:24 am</a>		</div>

		<p>Why not just make the completion notification another attribute of the underlaying kernel object? Then it could have been settable with:</p>
<p>   SetCompletionNotification(handle, TRUE|FALSE);</p>
<p>This just kind of smells as a hacked on interface. I wonder what Cutler thought of this hack?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248183">
				<div id="div-comment-248183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://perlmonks.org/?node=theorbtwo' rel='external nofollow' class='url'>James Mastros (theorbtwo)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248183">
			January 21, 2005 at 12:32 pm</a>		</div>

		<p>You didn&#8217;t actually answer the question in the title: Why are the low two bits always zero?  Because it&#8217;s really a pointer to a pointer, which is always aligned on a four-byte boundry.  (Which is actually readable from user-space, but would I emphatically not suggest doing so on any code that you&#8217;re planning on shipping or want to be stable across any sort of OS upgrade, or you&#8217;ll give Raymond more backwards-compatability nightmares.  Read: debugging tools and the fun of it only.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-248193">
				<div id="div-comment-248193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spaces.msn.com/members/mpll' rel='external nofollow' class='url'>Pavel Lebedinsky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248193">
			January 21, 2005 at 12:40 pm</a>		</div>

		<p>It&#8217;s true that this information is not very interesting for people writing applications, but knowing what kernel handles look like is very useful for debugging.</p>
<p>For example, if you see a printf call stuck in WriteFile with a handle like 0x5fc you know that your stdout has probably been redirected. Regular standard handles look totally different (on my system stdin/out/err are 3, 7 and 11 respectively).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248203">
				<div id="div-comment-248203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248203">
			January 21, 2005 at 12:56 pm</a>		</div>

		<p>(Um, James, try dereferencing 0x5fc and see what that gets you&#8230;  Kernel HANDLEs are not pointers to anything.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-248213">
				<div id="div-comment-248213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248213">
			January 21, 2005 at 12:58 pm</a>		</div>

		<p>Larry, well, instead of adding bool parameter to a bunch of functions, they could simply add a EnableNotifications(HANDLE,BOOL) API instead&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248223">
				<div id="div-comment-248223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248223">
			January 21, 2005 at 1:04 pm</a>		</div>

		<p>See my previous explanation of why EnableNotifications wouldn&#8217;t work: <a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2005/01/21/358109.aspx#358334" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2005/01/21/358109.aspx#358334</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-248233">
				<div id="div-comment-248233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248233">
			January 21, 2005 at 2:32 pm</a>		</div>

		<p>What did Cutler think of this hack?</p>
<p>I mean, given that kernel handles are always multiples of four, I imagine that he was one of the people that thought this up. Unless ntdef.h has changed much since NT3.51?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248253">
				<div id="div-comment-248253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248253">
			January 21, 2005 at 2:56 pm</a>		</div>

		<p>Again, that affects all I/O on that handle, not just the one I/O call you&#8217;re making &#8211; see &quot;cola&quot;s example above. If you did a MakeHandleNotifyable(hfile, FALSE), then you just screwed up your other threads which are doing async I/O on that handle simultaneously and expecting completion notifications. </p>
<p>I think people fail to realize that the completion suppression flag is a &gt;per-I/O-request&lt; flag, not per-file or per-handle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-248103">
				<div id="div-comment-248103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cola</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248103">
			January 21, 2005 at 8:49 am</a>		</div>

		<p>Because someone in the API team wanted to use a filehandle with non-APC asynchronous notification without spamming the completion port, and they knew a programmer in the OS team, and the OS manager didn&#8217;t want to change the interface just for one programmer, so they hacked it in and it got documented?</p>
<p>(Also the binary and source have to be backwards compatible and C compatible, so: no changing the arguments to DeviceIoControl in the DLL; *or* with a #define in the source; *or* with C++ overloading either!  There has to be an entirely new function name.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248113">
				<div id="div-comment-248113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cola</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248113">
			January 21, 2005 at 9:53 am</a>		</div>

		<p>Let&#8217;s see if we can figure out why anyone would want to register a completion port and then to suppress completion port notifications.</p>
<p>How about a synchronous write?  Like:</p>
<p>BOOL FakeSyncWrite(HANDLE hfile, int offset_, char *buf, int *length) {<br />
<br />BOOL success = 0;<br />
<br />waitobj = CreateEvent(name=NULL, security=NULL, manual=TRUE, signaled=FALSE);<br />
<br />OVERLAPPED async = { offset: offset_, hEvent: waitobj };<br />
<br />*(int*)&amp;async-&gt;hEvent |= 1; // suppress completion ports, if any<br />
<br />success = WriteFile(hfile, buf, length, &amp;async)<br />
<br />&amp;&amp; WaitForSingleObject(waitobj, delay=INFINITE);<br />
<br />if(CloseHandle(waitobj)) return success;<br />
<br />else return 0;<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-248293">
				<div id="div-comment-248293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248293">
			January 21, 2005 at 6:46 pm</a>		</div>

		<p>I think Waleri was requesting a function like:</p>
<p>HANDLE MakeHandleNotifieable(HANDLE x)<br />
<br />{<br />
<br />  return x | 1;<br />
<br />}</p>
<p>so that he doesn&#8217;t have to hard-code 1 in his program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248173">
				<div id="div-comment-248173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248173">
			January 21, 2005 at 11:52 am</a>		</div>

		<p>But that would change the behavior for *all* I/O against the file, not just for the one I/O request. And if you wanted to disable completion notification for all I/O against a file, then don&#8217;t associate it with a completion port to begin with!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-248243">
				<div id="div-comment-248243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248243">
			January 21, 2005 at 2:47 pm</a>		</div>

		<p>Ops, sorry missed that one&#8230; </p>
<p>Good point, but still, its better be via API call rather than set a bit directly.. something like </p>
<p>HANDLE MakeHandleNotifieable(HANDLE);</p>
<p>This would be much better than<br />
<br />*(int*)&amp;async-&gt;hEvent |= 1;</p>
<p>Oh, well, from now on, our handles will be always round of four :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248343">
				<div id="div-comment-248343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248343">
			January 23, 2005 at 2:34 am</a>		</div>

		<p>Console handles have something different in the bottom<br />
<br />2 bits as well since they aren&#8217;t kernel objects but<br />
<br />get passed to ReadFile, WriteFile, etc APIs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-248413">
				<div id="div-comment-248413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Len</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248413">
			January 23, 2005 at 3:15 pm</a>		</div>

		<p>When using the same &#8216;handle&#8217; between threads I always thought you were supposed to use DuplicateHandle when giving it up to other threads?  Or am I missing something here.</p>
<p>I can see the use of the &#8216;spare cycle&#8217; example above.  But the function to set something inside the handle struct sounds much cleaner?  Then clear on next io compleation?  When using other threads?  Or does DuplicateHandle &#8216;cheat&#8217; and reuse some of the same stuff underneath?</p>
<p>Course it is a BIT (heh) late now&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248443">
				<div id="div-comment-248443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248443">
			January 23, 2005 at 6:39 pm</a>		</div>

		<p>Again people, remember, there can be multiple outstanding overlapped I/O&#8217;s on a single handle. (Hence the whole &quot;overlapped&quot; thing.) You can&#8217;t set a flag on the handle struct because the same handle is being used for multiple I/O&#8217;s.  After all, if you could have only one outstanding I/O on a handle at a time, there would be no need for the event in the first place! You could just wait on the file handle.</p>
<p>Clearly there is widespread misunderstanding of how overlapped I/O works. Most of the &quot;suggestions&quot; on how to &quot;fix&quot; the completion port &quot;problem&quot; completely miss the point of overlapped I/O.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-248433">
				<div id="div-comment-248433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lazybones.ca/blog/index.php?p=29' rel='external nofollow' class='url'>Anonymous</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248433">
			January 23, 2005 at 8:48 pm</a>		</div>

		<p>lazybones &amp;raquo; Dirty trick</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248533">
				<div id="div-comment-248533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Potter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248533">
			January 24, 2005 at 2:09 am</a>		</div>

		<p>Well it was just an example :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-248453">
				<div id="div-comment-248453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Potter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248453">
			January 23, 2005 at 8:10 pm</a>		</div>

		<p>I think people are misunderstanding the original article, and thinking that the event handle itself needs to have its LSB set to prevent completion port notification.</p>
<p>What Raymond (and the docs) are saying is that the hEvent _member_ of the OVERLAPPED structure must have the LSB set to prevent completion port notification, eg:</p>
<p>OVERLAPPED o;<br />
<br />o.hEvent = hEvent;<br />
<br />*(DWORD*)&amp;o.hEvent | = 1;</p>
<p>Or something like this:</p>
<p>#define EventNoNotify(e) (HANDLE)(((DWORD)e)|1)</p>
<p>OVERLAPPED o;<br />
<br />o.hEvent = EventNoNotify(hEvent);</p>
<p>You aren&#8217;t modifying the event handle, you&#8217;re just modifying the member of the OVERLAPPED struct when you pass the event handle to the function in question.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248523">
				<div id="div-comment-248523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thomas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248523">
			January 24, 2005 at 12:30 am</a>		</div>

		<p>@Jon Potter: note that you need to typecast handles to ULONG_PTR/DWORD_PTR, not DWORD. You want to write 64bit compatible code, don&#8217;t you?</p>
<p>OVERLAPPED o;<br />
<br />o.hEvent = hEvent;<br />
<br />*(ULONG_PTR*)&amp;o.hEvent | = 1; </p>
<p>or<br />
<br />#define EventNoNotify(e) (HANDLE)(((ULONG_PTR)e)|1) </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-248763">
				<div id="div-comment-248763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Swamp Justice</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248763">
			January 24, 2005 at 10:06 am</a>		</div>

		<p>While coding, I sometime ask myself, jokingly: What Would Cutler Do? (WWCD?)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-248733">
				<div id="div-comment-248733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cola</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-248733">
			January 24, 2005 at 9:51 am</a>		</div>

		<p>Heh, my &quot;interesting&quot; code for modifying the bits of a void pointer seems to have caught on.  I think it&#8217;s actually clearer than the same code with parentheses added, and the precedence happens to be correct.  (Although I shouldn&#8217;t have used int.)</p>
<p>Although ov-&gt;hEvent is the value you are modifying, what you are doing is setting a tag bit on the OVERLAPPED structure.  It has no effect elsewhere, probably.  So the macro should apply to the structure:</p>
<p>#define SetCPortSuppression(overlapped) (*(LONG_PTR*)&amp;(overlapped).hEvent))|=1</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-633313">
				<div id="div-comment-633313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ntdebugging/archive/2008/05/19/ntdebugging-puzzler-0x00000006-invalid-handle-can-you-handle-it.aspx' rel='external nofollow' class='url'>Microsoft Advanced Windows Debugging and Troubleshooting</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050121-00/?p=36633#comment-633313">
			May 27, 2008 at 5:07 pm</a>		</div>

		<p>Hi NTDebuggers, this week’s puzzler just so happens to match its number: 0x000000006 = ERROR_INVALID_HANDLE.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>