<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (39)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-760263">
				<div id="div-comment-760263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760263">
			August 6, 2009 at 10:44 am</a>		</div>

		<p>ObQuote: Some people, when confronted with a problem, think &quot;I know, I&#8217;ll use regular expressions.&quot; Now they have two problems.</p>
<p>&#8212; Jamie Zawinski &lt;<a rel="nofollow" target="_new" href="http://www.jwz.org/hacks/marginal.html&gt;" rel="nofollow"></a><a href="http://www.jwz.org/hacks/marginal.html&#038;gt" rel="nofollow">http://www.jwz.org/hacks/marginal.html&#038;gt</a>;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760273">
				<div id="div-comment-760273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760273">
			August 6, 2009 at 10:53 am</a>		</div>

		<p>Nooooo&#8230;.. &quot;Using &lt;&gt; angle brackets around each URI is especially recommended as a delimiting style for a reference that contains embedded whitespace.&quot;</p>
<p>&#8212; RFC 3986, Appendix C</p>
<p>Blog software comment automated URL extraction FAIL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760283">
				<div id="div-comment-760283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760283">
			August 6, 2009 at 11:09 am</a>		</div>

		<p>I don&#8217;t understand, why would you purposely give someone a fake, invalid regular expression for the problem they are trying to solve? Isn&#8217;t it easier and less jerky to just not respond? I must be missing something here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760293">
				<div id="div-comment-760293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam V</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760293">
			August 6, 2009 at 11:10 am</a>		</div>

		<blockquote><p>
  Blog software comment automated URL extraction FAIL.
</p></blockquote>
<p>Ah, it&#8217;s using an outdated RegEx. Email the blog software maintainers and tell them to change it to $*G#(:@}6)V^%&amp;]1[; which should fix it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760303">
				<div id="div-comment-760303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam V</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760303">
			August 6, 2009 at 11:12 am</a>		</div>

		<p>@KT: Raymond&#8217;s posting these emails from memory. The real emails had (slightly more) correct RegExs, he just didn&#8217;t want to dig through his email to get the RegEx when he was going to make up the rest of the (fake) email.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-760323">
				<div id="div-comment-760323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760323">
			August 6, 2009 at 11:47 am</a>		</div>

		<p>Yeah, it&#8217;s a pain that there&#8217;s no standard regexp syntax. :( Probably too late to fix that, too.</p>
<p>I&#8217;ve tried to explain this to people who get quite angry that $program doesn&#8217;t support $syntax when they think that particular syntax is The One True RegExp and it&#8217;s a moral outrage if anything is different.</p>
<p>I guess some programs have an option for which regexp syntax you want to use but by doing that&#8230; you&#8217;ve probably got three problems instead of just two. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760333">
				<div id="div-comment-760333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760333">
			August 6, 2009 at 12:00 pm</a>		</div>

		<p>There really does need to be a standard across all software systems for Regular expression support. There are actually two different flavors of RE support for the Visual Studio &quot;Find&quot; dialog and the .NET framework itself alone much less the differences between the *nix tools. It&#8217;s just maddening. I wouldn&#8217;t be at all surprised to find the same kinds of inconsistencies between the CAtlRegExp class and Visual Studio&#8217;s &quot;Find&quot; as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760353">
				<div id="div-comment-760353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil (SM)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760353">
			August 6, 2009 at 12:41 pm</a>		</div>

		<p>@KT: First of all, Raymond was not quoting himself in that posting. Second, the real posting had a real regex.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760373">
				<div id="div-comment-760373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760373">
			August 6, 2009 at 1:09 pm</a>		</div>

		<p>And then sometimes you write your regex unquoted on the command line so you have to add in the syntax for that particular shell&#8217;s escape characters, which of course varies from shell to shell.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760393">
				<div id="div-comment-760393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">costive expressionist</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760393">
			August 6, 2009 at 1:43 pm</a>		</div>

		<p>clearly what we need is a way of selecting and perhaps event tweaking the regular expression engine at run time:</p>
<p>/usr/bin/kludge &#8211;regexp_style=greg</p>
<p>or</p>
<p>/usr/bin/kludge &#8211;regexp_style=perl &#8211;regexp_exclusions=boundary &#8211;nongreedy=off</p>
<p>I&#8217;ll be monitoring SourceForge for this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760413">
				<div id="div-comment-760413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">costive expressionist</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760413">
			August 6, 2009 at 1:45 pm</a>		</div>

		<p>Oh yes, and the minute that the configurable regexp feature is available and semi-usable in the first open source implementation, I will be sure to come back to MSDN and abuse Microsoft for not supporting it!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760443">
				<div id="div-comment-760443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Colascione</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760443">
			August 6, 2009 at 2:33 pm</a>		</div>

		<p>God, I can&#8217;t stand that we have separate, yet similar regular expression languages for almost every application. There&#8217;s grep, egrep, Javascript, Perl/PCRE, Python, Emacs, and that&#8217;s just in the Free Software world.</p>
<p>Personally, I&#8217;d encourage everyone to just use the PCRE library. It&#8217;s feature-rich, and because it&#8217;s BSD licensed, so you can even use it in commercial software.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760453">
				<div id="div-comment-760453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760453">
			August 6, 2009 at 6:29 pm</a>		</div>

		<p>I think the problem, of multiple varying syntaxes for regex, is due to practical concerns. Most of the regex operators aren&#8217;t strictly necessary; they are just shorthand.</p>
<p>For example with an alphabet of &#8216;ab&#8217; and using e for ε (epsilon (just in case ε doesn&#8217;t render)).</p>
<p>[ab] = (a + b)</p>
<p>a+ = aa*</p>
<p>a? = (a + e)</p>
<p>much of the shorthand is designed to reduce typing while others (?) are introduced because of the lack of an epsilon character.</p>
<p>the classic mathematical syntax works well for problem encountered in computation theory since the alphabets are usually very limited. In my theory of computing course, most problems only had an alphabet consisting of just &#8216;ab&#8217;.</p>
<p>The syntaxes used in the practical world have much larger alphabets, which include the characters used as operators. Just imagine how long that IPv4 regex would be if the character class shorthand wasn&#8217;t used, every instance of d would have to be replaced with [0123456789] (which is really short for (0 + 1 + &#8230; + 9))</p>
<p>The biggest problem with having multiple syntaxes, is that if i want/need to use regex, i have to go look up the syntax every single time. (i actually printed out the a cheat sheet for the visual studio search regex).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760463">
				<div id="div-comment-760463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760463">
			August 6, 2009 at 6:32 pm</a>		</div>

		<p>In response to the &quot;you now have two problems&quot; remarks, there are many things that regex can&#8217;t do, Matching balanced parenthesis, which is the classic example.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760473">
				<div id="div-comment-760473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://marksowul.com' rel='external nofollow' class='url'>Mark Sowul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760473">
			August 6, 2009 at 7:01 pm</a>		</div>

		<p>Fortunately, .NET&#8217;s regular expressions library has a neat trick that does allow you to match balanced parentheses</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/bclteam/archive/2005/03/15/396452.aspx" rel="nofollow">http://blogs.msdn.com/bclteam/archive/2005/03/15/396452.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760483">
				<div id="div-comment-760483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Trevel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760483">
			August 6, 2009 at 7:08 pm</a>		</div>

		<p>Personally, I love the idea that Raymond spends his nights posting bad regexs to mailing lists under the pseudonym of Jane Smith. He&#8217;d be like a super hero, only more nerdy and less useful.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760493">
				<div id="div-comment-760493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760493">
			August 6, 2009 at 7:42 pm</a>		</div>

		<p>RegEx&#8230; get it right straight away, because generally you can only modify a complex regex for approximately 30 seconds after you finish writing it before you forget how it works. Made worse if you&#8217;re a tool whore (uh&#8230; sorry) and are mixing RegEx dialects.</p>
<p>.Net has very good RegEx, but why, oh why did they invent new syntax? They should have used Vim&#8217;s. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760503">
				<div id="div-comment-760503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.clarkmichael.com' rel='external nofollow' class='url'>Mike</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760503">
			August 6, 2009 at 7:48 pm</a>		</div>

		<p>I love regex&#8217;s. But to me it is the great Unknown. &nbsp;I bought O&#8217;Reilly&#8217;s Regular Expression Pocket Reference thinking it would be of some help learning them, then I found that only pages 1-16 were about regex&#8217;s per se, including a two-page cookbook that was easily the most useful part of the book. &nbsp;The rest of the book,pages 16-114, delved into the different implementations (PHP, .NET, Apache Web Server, vi, Unix shell tools, Python, Java, and so on) and their little quirky differences. &nbsp;Necessary, I suppose, but Yikes!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760523">
				<div id="div-comment-760523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hexatron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760523">
			August 6, 2009 at 8:37 pm</a>		</div>

		<p>You omitted the ancestral re of ed, the unix editor of 1974. Looking at the source for compile(), we find, in those days, that a regular expression understood:</p>
<p>^ &#8211; beginning of line</p>
<ul>
<li>
<ul>
<li>match last character</li>
</ul>
</li>
</ul>
<p>. &#8211; match any character</p>
<p>( &#8211; start of a bracketed expression</p>
<p>) &#8211; end of a bracketed expression</p>
<p>t b &#8211; tab, bell</p>
<p>$ &#8211; end of line</p>
<p>[ad-g] &#8211; match a single character of adefg (&amp;etc)</p>
<p>[^ad-g] &#8211; match a single character not in adefg</p>
<p>and that&#8217;s about it.(/g to apply more than once)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760533">
				<div id="div-comment-760533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760533">
			August 6, 2009 at 8:44 pm</a>		</div>

		<blockquote><p>
  &gt; There really does need to be a standard across all software systems for Regular expression support.
</p></blockquote>
<p>Is that before or after &quot;embrace and extend&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760573">
				<div id="div-comment-760573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760573">
			August 7, 2009 at 12:08 am</a>		</div>

		<p>@Mark Sowul:</p>
<blockquote><p>
  Fortunately, .NET&#8217;s regular expressions library has a neat trick that does allow you to match balanced parentheses
</p></blockquote>
<p>That&#8217;s nice, but it&#8217;s not done with regular expressions (which the first paragraph of the article implies).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760583">
				<div id="div-comment-760583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760583">
			August 7, 2009 at 1:37 am</a>		</div>

		<p>@hexatron: You omitted the ancestral re of ed, the unix editor of 1974. Looking at the source for compile(), we find, in those days, that a regular expression understood:</p>
<p>Actually, Raymond did get it. He called it by its more m9odern descendant, vi. (vi is just a mode of ed, after all).</p>
<p>Though, after all this, there are few regex engines around. Sure perl/pcre, sed, awk, ed/vi, grep/etc., all have different syntax, but the internal engines all fall into a few flavors. This is important, because certain regexes can cause the engine to hang, while others can get it to be really slow.</p>
<p>To be honest, though, I&#8217;ve never seen terribly complex regex unless it was to illustrate a point (usually about how regex isn&#8217;t always the best tool). The reason for this is probably with the explosion of scripting languages, it&#8217;s probably easier to break a regex into small pieces, and use the programmatic ability of perl/python/ruby/etc. to aid in matching the whole. TGhe ability to implement state machines makes it less frustrating over all.</p>
<p>Try matching an IP address, for example. Far easier to do in code than regex. Even a naive implementation that still matches all possible ways of writing a IPv4 address is simpler. And, you get comments.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760593">
				<div id="div-comment-760593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760593">
			August 7, 2009 at 1:43 am</a>		</div>

		<p>@Jeff:</p>
<p>Generally this is not possible with regular expression, that language just is not descriptive enough to handle this &#8230;</p>
<p>However in .Net this is actually possible with something called Balancing Group Definition. This construct generally looks like (?&lt;name1-name2&gt;). </p>
<p>How is this then not Regular Expression?</p>
<div class="post">[<i>Um, because the language it describes isn&#8217;t regular? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760603">
				<div id="div-comment-760603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mantas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760603">
			August 7, 2009 at 2:00 am</a>		</div>

		<p>Sometimes I wish all programs &#8211; grep, sed, vi, Notepad2 &#8211; got modified to use the same (standard) regex library. PCRE maybe. But backward-compatibility isn&#8217;t just a Windows thing, doing that would break so many shell scripts (and even a few Windows batch scripts) that everyone depends on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760613">
				<div id="div-comment-760613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760613">
			August 7, 2009 at 2:18 am</a>		</div>

		<p>@drak:</p>
<p>the long answer is that regular expressions define the regular language, and can describe exactly what a deterministic finite automata (DFA) can accept. Matching brakets requires a Push-down Automata (PDA) and can accept context free grammers.</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Deterministic_finite-state_machine" rel="nofollow">http://en.wikipedia.org/wiki/Deterministic_finite-state_machine</a></p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Pushdown_automaton" rel="nofollow">http://en.wikipedia.org/wiki/Pushdown_automaton</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760623">
				<div id="div-comment-760623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760623">
			August 7, 2009 at 2:35 am</a>		</div>

		<p>If .Net says &#8216;This is part of our Regular Expression Library&#8217; then I&#8217;d assume they mean &#8216;This function is part of our definition of &#8216;Regular Expression&#8217;, be they regular or not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760513">
				<div id="div-comment-760513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adblockplus.org/' rel='external nofollow' class='url'>Wladimir Palant</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760513">
			August 6, 2009 at 7:55 pm</a>		</div>

		<p>Yes, it is great to discover that Apache&#8217;s regexp syntax is *almost* the same as the one Perl is using &#8211; except that it doesn&#8217;t support the d character class. Makes for a fun debugging session.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760643">
				<div id="div-comment-760643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760643">
			August 7, 2009 at 8:21 am</a>		</div>

		<p>So that original grep &#8220;regular&#8221; expression language wasn&#8217;t a true regular language because there were some constructs that it couldn&#8217;t express because it lacked alternation?</p>
<div class="post">[<i>It&#8217;s still a regular language. Not a maximal regular language, but nobody claimed that it was. A language that consists only of the null string is still regular. Not very useful, mind you. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760653">
				<div id="div-comment-760653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://billpg.me.uk/' rel='external nofollow' class='url'>Bill P. Godfrey</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760653">
			August 7, 2009 at 8:42 am</a>		</div>

		<p>My pet peeve with regexs is the lack of consistency.</p>
<p>Pick a character. Say you match that specific character, do you put a  on it or not?</p>
<p>To match &#8216;d&#8217;, use &#8216;d&#8217;.</p>
<p>To match &#8216;.&#8217;, use &#8216;.&#8217;.</p>
<p>To match &#8216;(&#8216;, use&#8230; uhh&#8230; Let me look it up&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760663">
				<div id="div-comment-760663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://smellegantcode.wordpress.com' rel='external nofollow' class='url'>Daniel Earwicker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760663">
			August 7, 2009 at 9:44 am</a>		</div>

		<p>Not only is it too late to harmonise the existing implementations, it&#8217;s also too late to even bother to make a token gesture of publishing an ISO standard, because so many other widely used standards already incorporate a version (or two) of regex.</p>
<p>The POSIX standard defines two levels of support (basic and extended). ECMAScript includes a Perl-ish flavour. The C++0x standard will include &#8216;regex&#8217;, which most recently is proposed to default to ECMAScript syntax but allow optional alternatives. Unicode Technical Standard 18 defines &quot;Unicode Regular Expressions&quot;, which are used by XML Schema.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760703">
				<div id="div-comment-760703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760703">
			August 7, 2009 at 10:40 am</a>		</div>

		<p>It&#8217;s the same thing I love about Java. Your &quot;write once run anywhere&quot; code will behave differently when run under different app servers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760723">
				<div id="div-comment-760723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760723">
			August 7, 2009 at 11:20 am</a>		</div>

		<p>Trevel, you have implanted a strange image in my mind.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760743">
				<div id="div-comment-760743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760743">
			August 7, 2009 at 12:30 pm</a>		</div>

		<p>&quot;I just ran my hand randomly over the keyboard to generate that fake regular expression. The scary thing is, at first glance, it is not obviously not a regular expression!&quot;</p>
<p>That is by design :-)</p>
<p>&quot;Larry Wall falls asleep and hits Larry Wall&#8217;s forehead on the keyboard. Upon waking Larry Wall decides that the string of characters on Larry Wall&#8217;s monitor isn&#8217;t random but an example program in a programming language that God wants His prophet, Larry Wall, to design. Perl is born.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-760773">
				<div id="div-comment-760773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760773">
			August 7, 2009 at 1:12 pm</a>		</div>

		<p>I like how Visual Studio 2005&#8217;s search and replace doesn&#8217;t use the .NET regex flavor. Nothing like having to keep 2 flavors in your memory space at once while using the same tool</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-760903">
				<div id="div-comment-760903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760903">
			August 7, 2009 at 8:12 pm</a>		</div>

		<blockquote><p>
  Pick a character. Say you match that specific character, do you put a  on it or not?
</p></blockquote>
<p>The rule of thumb (for Unix-y regexes, anyway) is, use a  if-and-only-if the character is punctuation.</p>
<p>This rule will occasionally lead you to use a backslash unnecessarily, but that will never break anything. &nbsp;For example, _ is the same as _ by itself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-760913">
				<div id="div-comment-760913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760913">
			August 7, 2009 at 8:20 pm</a>		</div>

		<p>^Z@1&amp;*B*!34 is a perfectly good regular expression. &nbsp;It matches anything that:</p>
<p>Starts with Z@1</p>
<p>Followed by zero or more &amp;s</p>
<p>Followed by zero or more Bs</p>
<p>Followed by !34</p>
<p>For example:</p>
<p>Z@1!34</p>
<p>Z@1&amp;&amp;&amp;!34sao8f</p>
<p>Z@1&amp;BB!34sao8f</p>
<p>$)(#$C)*# is not a regular expression though, because of the unbalanced parentheses&#8230;</p>
<p>&#8230; unless this is Perl, where $) is a short name for $EFFECTIVE_GROUP_ID.</p>
<p>This will match different things depending on whether /x is in effect (in which case it&#8217;s not a regular expression because the # is a comment which wipes out the rest of the line, so there are unbalanced parentheses after all) and whether there&#8217;s a $C variable in scope.</p>
<p>$C in scope: this will match anything that contains:</p>
<p>The effective group ID of the process</p>
<p>Zero or more occurences of # plus the value of $C</p>
<p>A final #</p>
<p>For example, if the effective group ID is 123 and $C is &quot;foo&quot;, this will match</p>
<p>blahblah123#blahblah</p>
<p>blahblah123#foo#foo#foo#blahblah</p>
<p>No $C in scope: this will match anything that contains:</p>
<p>The effective group ID of the process</p>
<p>Zero or more occurences of # plus end-of-line plus C</p>
<p>A final #</p>
<p>Since the end of line comes before n, and C is not n, $C will never match &#8211; so the &quot;zero or more&quot; will only ever match zero times&#8230;</p>
<p>So this matches things like</p>
<p>blahblahblah123#blahblahblah</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-760983">
				<div id="div-comment-760983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">!(regex)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-760983">
			August 8, 2009 at 5:30 pm</a>		</div>

		<p>Is there any better expression matching language out there?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-761033">
				<div id="div-comment-761033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-761033">
			August 10, 2009 at 4:46 am</a>		</div>

		<p>(E)BNF probably qualifies. It can also describe non-regular languages, e.g. a rule like A ::= ε | &#8216;(&#8216; A &#8216;)&#8217; matches paired ().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-761193">
				<div id="div-comment-761193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090806-00/?p=17203#comment-761193">
			August 10, 2009 at 12:39 pm</a>		</div>

		<p>@Worf: vi is a mode of *ex*, not of ed.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>