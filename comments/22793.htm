<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-617513">
				<div id="div-comment-617513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ping?</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-617513">
			April 10, 2008 at 10:31 am</a>		</div>

		<p>And if the compiler were designed better, it would have tracked the origin line of the definitions, saving you time and labor. :)</p>
<div class="post">[<i>Please read the article again. I snuck in that pre-emptive snarky comment but apparently the pre-emptive snarky comment doesn&#8217;t work unless I write <b>Pre-emptive snarky comment</b> in front. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-617533">
				<div id="div-comment-617533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-617533">
			April 10, 2008 at 10:51 am</a>		</div>

		<p>I realize I&#8217;m probably violating one of the blog rules, but this series has brought a question to mind.</p>
<p>In a recent interview, Bjarne Stroustrup said the inclusion of macros in the C++ specification was a necessary mistake. &nbsp;From your articles, it is clear that macros can sometimes be a bit of a headache, so I thought I&#8217;d ask: what is your opinion on macros in programming languages? &nbsp;Mind you, I&#8217;m not looking for a treatise on the subject; a single sentence will do (for me, at least).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-617583">
				<div id="div-comment-617583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-617583">
			April 10, 2008 at 11:38 am</a>		</div>

		<p>Counter question: Are you aware that in other languages macros might not just work by text substitution? Some actually add new production rules to the language. I hope I don&#8217;t need to tell you the benefits of this approach and how it eases programming&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-617733">
				<div id="div-comment-617733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Grant</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-617733">
			April 10, 2008 at 1:10 pm</a>		</div>

		<p>How did I know Tom&#8217;s comment was going to bring out the Smug Lisp Weenies?</p>
<p><a rel="nofollow" target="_new" href="http://c2.com/cgi/wiki?SmugLispWeenie" rel="nofollow">http://c2.com/cgi/wiki?SmugLispWeenie</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-617783">
				<div id="div-comment-617783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sushovande.6te.net' rel='external nofollow' class='url'>Sushovan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-617783">
			April 10, 2008 at 2:01 pm</a>		</div>

		<p>A more frequently encountered scenario would be if the rogue header file had used #ifndef AWESOME before defining AWESOME&#8230; the suggested method wont work, and scary fact is&#8230; this kind of code is common.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-friedicusrediculoushotmail-com odd alt thread-odd thread-alt depth-1" id="comment-617833">
				<div id="div-comment-617833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Fried' rel='external nofollow' class='url'>Mike Fried</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-617833">
			April 10, 2008 at 3:19 pm</a>		</div>

		<p>This reminds me of the common sense development practice that too few developers actually do: Make a quick project and test assumptions.</p>
<p>Someone and I recently were talking about virtual vs non-virtual destructors and what happens when you have class A with virtual ~A inherited by class B with non-virtual ~B inherited by class C with non-virtual ~C.</p>
<p>Rather than wondering if A would destruct and B and C would not destruct, I just fired up the compiler and wrote the program. All 3 destructors were called just fine.</p>
<p>It&#8217;s amazing how little time it takes to make a test app, and test some hypothesis, and yet so many people just assume something without testing it. Maybe they are too lazy or not curious enough to find out the answers.</p>
<p>Abusing macros is bad. Adbusing templates can be much, much worse. That&#8217;s why I like C#. They don&#8217;t have macros, and generics aren&#8217;t quite the same thing as templates.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-617883">
				<div id="div-comment-617883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tcliu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-617883">
			April 10, 2008 at 4:57 pm</a>		</div>

		<p>@mikefried: True &#8211; now the problem is this: Does it work because it is supposed to work that way, or is it just a coincidence that it works?</p>
<p>Also, I think macros are nastier than templates. windows.h for example:</p>
<p>&nbsp; &nbsp;#define Yield()</p>
<p>Which means that if you name a function Yield, it&#8217;ll be replaced with whitespace when you compile. Took me a bit to figure that one out.</p>
<p>Templates, at least, are namespaced and won&#8217;t bit you like this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-617953">
				<div id="div-comment-617953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-617953">
			April 10, 2008 at 6:07 pm</a>		</div>

		<p>nice trick!</p>
<p>(now I need a &quot;what you got&quot; compiler to show off&#8230;)</p>
<blockquote><p>
  &gt; sometimes you you have to make do with what you&#8217;ve got.
</p></blockquote>
<p>pos-mortem-snarky comment: or just demand that you get a better one.</p>
<blockquote><p>
  &gt; &nbsp;#define Yield()
</p></blockquote>
<p>I once pondered writing a parser that reads windows headers and spits out C++-style headers that use enums and inline functions. I had no idea how to figure out the function parameters, though&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-617963">
				<div id="div-comment-617963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-617963">
			April 10, 2008 at 6:16 pm</a>		</div>

		<blockquote><p>
  &gt; now the problem is this: Does it work because it is supposed to work that way, or is it just a coincidence that it works?
</p></blockquote>
<p>In this case, the answer is that since a base class has a virtual destructor all those classes will have virtual destructors. &nbsp;This is part of the C++ specification. (12.4.7 &#8211; If a class has a base class with a virtual destructor, its destructor (whether user or implicitly declared) is virtual.)</p>
<p>But your real point may have been that just because something works a particular way on one compiler does not necessarily mean that it is &nbsp;guaranteed behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-618083">
				<div id="div-comment-618083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://paramanand.blogspot.com' rel='external nofollow' class='url'>Paramanand Singh</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-618083">
			April 11, 2008 at 9:17 am</a>		</div>

		<blockquote><p>
  &gt; On the other hand, if somebody #undefs your symbol before redefining it, then the -D trick won&#8217;t work.
</p></blockquote>
<p>In that case (or something even more complex) what should be done? I think that in cases of macro redefinition it is better to change your macro name. Moreover people should refrain from defining their own macros if they are provided by standard system headers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-618093">
				<div id="div-comment-618093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PinkDuck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-618093">
			April 11, 2008 at 9:30 am</a>		</div>

		<p>&quot;sometimes you you have&quot;</p>
<p>One less &#8216;you&#8217; please :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-friedicusrediculoushotmail-com odd alt thread-odd thread-alt depth-1" id="comment-618483">
				<div id="div-comment-618483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Fried' rel='external nofollow' class='url'>Mike Fried</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-618483">
			April 12, 2008 at 11:41 pm</a>		</div>

		<p>tcliu wrote:</p>
<blockquote><p>
  &gt; now the problem is this: Does it work because it is supposed to work that way, or is it just a coincidence that it works?
</p></blockquote>
<p>I think you are digging too deep:</p>
<p>The point I was trying to make is that people need to avail themselves of the compiler more to answer their questions. Raymond&#8217;s &quot;hack&quot; to #define before the headers is one of many clever ways to use the tools. When you pick a set of tools, you commit to their shortcomings, so whenever you have a question about the tools, you should test the tools to find your answer. The most important part of learning on the job is to learn to understand your tools. Always take opportunities to question the tools when you have a question.</p>
<p>mikeb wrote:</p>
<blockquote><p>
  But your real point may have been that just because something works a particular way on one compiler does not necessarily mean that it is guaranteed behavior.
</p></blockquote>
<p>That is a good point, not exactly what I was getting at, but a good point nonetheless. I like to put it the other way: Having book knowledge of the standard and being able to know why to expect one thing out of the language/platform is well and good, but platforms and tools are made by imperfect humans. They may be very well tested, but their behaviors are all testable by you. By testing them, you may learn something. No test is too small or stupid to run on your tools. Even the best developers get surprised sometimes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-619513">
				<div id="div-comment-619513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-619513">
			April 15, 2008 at 8:23 am</a>		</div>

		<p>mikefried: What you just said only applies half the time. &nbsp;If the standard says one thing, so you test your compiler, and it does something different, then what you said applies. &nbsp;It&#8217;s good to know when your tools don&#8217;t follow the standards.</p>
<p>But if the various applicable standards (and the tool documentation) say nothing about whatever you&#8217;re testing, then even if it works today, that means nothing about whether it&#8217;s actually correct.</p>
<p>In other words, if a test fails, that&#8217;s useful knowledge. &nbsp;But if a test succeeds, that means almost nothing. &nbsp;It just means that one particular instance of the tool-set works with one particular test. &nbsp;If the standards and documentation are silent, then just because it works today, in your environment, on your installation of the tools, doesn&#8217;t mean it will continue to work tomorrow, or in a different environment, or on a different installation of those tools.</p>
<p>(How many times has Raymond blogged about some compatibility hack that had to be inserted into various parts of windows because people were running exactly the type of test you&#8217;re talking about, and interpreting the positive test result as a guarantee that whatever they were doing was correct?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-619533">
				<div id="div-comment-619533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Name required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080410-00/?p=22793#comment-619533">
			April 15, 2008 at 8:53 am</a>		</div>

		<blockquote><p>
  This tells the compiler to act as if the line #define AWESOME @ were at the top of the file.
</p></blockquote>
<p>Is this affected by the MS development environment&#8217;s insistence that the precompiled header inclusion is the first thing in the file? As I recall (sorry, I no longer have VS installed) anything above the #include &lt;stdafx.h&gt; was simply igonored.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>