<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1268985">
				<div id="div-comment-1268985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1268985">
			October 14, 2016 at 7:26 am</a>		</div>

		<p>We found that setting <code>LARGEADDRESSAWARE</code> explicitly on x64 builds seemed to do the trick without needing to do that. Windows 8 didn&#8217;t care about the flag, but Windows 7 seems to act as if it&#8217;s set to false by default for some reason.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1269006">
				<div id="div-comment-1269006" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269006">
			October 14, 2016 at 7:48 am</a>		</div>

		<p>I thought that was on by the linker by default for x64 and turning it off restricted the process to 2GB even if it was 64 bit. Maybe that too stopped in W8.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude even depth-3" id="comment-1269026">
				<div id="div-comment-1269026" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269026">
			October 14, 2016 at 9:41 am</a>		</div>

		<p>We thought so too, or more to the point we assumed it was ignored unless explicitly set to <code>NO</code>. But we found that explicitly it to <code>YES</code> resulted in Windows 7 allocating above the 4gb line. In this particular case it was quite annoying since I had a developer senior to me on Windows 7 that couldn&#8217;t reproduce a crash bug I was seeing. We messed around with the flags and found this behavior was very consistent. From that point on we made sure all components had it explicitly set to <code>YES</code> even though it should be ignored.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1268995">
				<div id="div-comment-1268995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1268995">
			October 14, 2016 at 7:41 am</a>		</div>

		<p>There&#8217;s some sample code at <a href="https://randomascii.wordpress.com/2012/02/14/64-bit-made-easy/" rel="nofollow">https://randomascii.wordpress.com/2012/02/14/64-bit-made-easy/</a> that tries to reserve all the address space below 4GB, so that future allocations come from address above 4GB.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1269005">
				<div id="div-comment-1269005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269005">
			October 14, 2016 at 7:48 am</a>		</div>

		<p>The linker no longer support specifying the location of your code and stack? Maybe I&#8217;m remembering wrong, I thought there were ways to force the addresses you wanted.</p>
<p>Also, I would have thought that since address space is private to the process, the OS could simply add a fixed offset to all allocations from a range it would know is free (say, by design). For example,  adding 2^35 to all virtual addresses, causing no slow-down.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1269025">
				<div id="div-comment-1269025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew w.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269025">
			October 14, 2016 at 9:21 am</a>		</div>

		<p>@Pierre<br />
I doubt the vm code is optimized for this kind of use case, although what you&#8217;re saying is probably possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1269085">
				<div id="div-comment-1269085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269085">
			October 15, 2016 at 7:00 am</a>		</div>

		<p>It would appear the customers problem was with the heap, not the stack or code segments.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1269015">
				<div id="div-comment-1269015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269015">
			October 14, 2016 at 8:43 am</a>		</div>

		<p>Try PVS-Studio (<a href="http://www.viva64.com/en/pvs-studio/" rel="nofollow">http://www.viva64.com/en/pvs-studio/</a>) which can find many of these bugs through static analysis.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-the-wench even thread-even depth-1 parent" id="comment-1269165">
				<div id="div-comment-1269165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Monochrome+Wench' rel='external nofollow' class='url'>Monochrome Wench</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269165">
			October 17, 2016 at 5:50 am</a>		</div>

		<p>Without seeing the code for the affected program I&#8217;m guessing it won&#8217;t be nice to have to maintain. They are resorting to testing in production?!?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-davebacher odd alt depth-2" id="comment-1269485">
				<div id="div-comment-1269485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269485">
			October 18, 2016 at 11:28 am</a>		</div>

		<p>TDD is great, good engineering too &#8212; preview programs like Windows Insider are good too.</p>
<p>No amount of testing can replicate the unexpected chain of events caused by users and the third party software they have installed.  You don&#8217;t know what is injecting into the process &#8212; and you can ask, but the customer won&#8217;t know, either.  You have a tremendous diversity, and third party drivers, etc.</p>
<p>And so sure, sometimes the only solution is to test on production, or do some beta program</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1269295">
				<div id="div-comment-1269295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269295">
			October 17, 2016 at 12:00 pm</a>		</div>

		<p>Use a parent process to help with this.  Have the parent process call CreateProcessW with CREATE_SUSPENDED, then do:<br />
for (std::uintptr_t addr = 0; addr &lt; 0x100000000ULL; addr += 0x10000) {<br />
    VirtualAllocEx(process, reinterpret_cast(addr), 0x10000, MEM_RESERVE, PAGE_NOACCESS);<br />
}<br />
ResumeThread(thread);<br />
Intentionally ignore VirtualAllocEx errors.  Certain things will end up below 4 GB, such as the environment and command line, but a bug with handling these is unlikely.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1269297">
				<div id="div-comment-1269297" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269297">
			October 17, 2016 at 12:02 pm</a>		</div>

		<p>Just realized a bug in my code: addr should start at 0x10000.  The zero page should already be reserved, and passing zero would have allocated the reserved region at a random address.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>