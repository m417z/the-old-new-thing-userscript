<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-899693">
				<div id="div-comment-899693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899693">
			March 9, 2011 at 8:23 am</a>		</div>

		<p>Yossi Kreinin wrote a really good article about 1.5 years ago about getting stack traces of programs compiled with the frame pointer optimization enabled: <a rel="nofollow" target="_new" href="http://www.yosefk.com/blog/getting-the-call-stack-without-a-frame-pointer.html" rel="nofollow">http://www.yosefk.com/&#8230;/getting-the-call-stack-without-a-frame-pointer.html</a></p>
<p>One cool trick he used is to have a program decode the instructions of its own function prologues to figure out the size of the stack frame and hence where the next stack frame was.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899703">
				<div id="div-comment-899703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899703">
			March 9, 2011 at 8:35 am</a>		</div>

		<p>That digression is pure gold. &nbsp;Thanks!</p>
<div class="post">[<i>Sadly, I was hoping that my audience already knows everything in that digression, because it was a digression merely to define the term <span style="text-decoration:underline;">EBP chain</span>. Someday I&#39;ll be able to cover advanced topics again. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-899713">
				<div id="div-comment-899713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899713">
			March 9, 2011 at 9:07 am</a>		</div>

		<p>In this example you have symbols for ABC. Usually the debugger is able to compensate for FPO if you have the corresponding PDB.</p>
<div class="post">[<i>The symbols for ABC naturally came from a symbols-only PDB (no debugging information). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899733">
				<div id="div-comment-899733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899733">
			March 9, 2011 at 9:46 am</a>		</div>

		<p>Awesome!</p>
<p>Using a symbols-only PDB you can recover the stack frame another way (this almost always works).</p>
<p>Walk down the stack, printing any value that is between start and end of any function. Start is exclusive, end is inclusive.</p>
<p>You get all function calls on the stack and a very few integers that happen to be in the right range (you don&#39;t get any pointers unless someone took the address of a goto label).</p>
<div class="post">[<i>Note that this also finds return addresses left in uninitialized stack variables. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-899743">
				<div id="div-comment-899743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian G</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899743">
			March 9, 2011 at 9:47 am</a>		</div>

		<p>I&#39;m far below your target audience in terms of knowledge and expertise as a simple hobbiest, but I still find your work interesting to read even when (as today) it goes far over my head. &nbsp;All that being said, even when I don&#39;t understand what you&#39;re talking about, I&#39;m not going to ask you to clarify. &nbsp;After all, I&#39;m not a member of your target audience, just someone who&#39;s stumbled across your blog in the vast collection of internet stuff.</p>
<p>Also, I love that you have something new every day. &nbsp;The line about 2 years&#39; suspense is fantastic.</p>
<p>Thanks for all the info!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899753">
				<div id="div-comment-899753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899753">
			March 9, 2011 at 10:30 am</a>		</div>

		<p>[Note that this also finds return addresses left in uninitialized stack variables. -Raymond]</p>
<p>Personally I&#39;ve never seen it do that but yes it certainly could do that to you. Good catch.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-899763">
				<div id="div-comment-899763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zahical</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899763">
			March 9, 2011 at 11:38 am</a>		</div>

		<p>Brian G: After following the &#39;Old New Thing&#39; for 7 years now, I&#39;m pretty sure the &quot;2 years&#39; suspense&quot; line is actually not a joke.</p>
<p>This is both good and bad because:</p>
<p>a) Yes, there will almost certainly be a second article on the subject (Mr. Chen keeps his promises)</p>
<p>and</p>
<p>b) Yes, we are going to read it in &quot;two years or so&quot; (Mr. Chen keeps his promises)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899783">
				<div id="div-comment-899783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian G.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899783">
			March 9, 2011 at 12:16 pm</a>		</div>

		<p>@Zahical: oh, I&#39;ve been reading for a couple years myself (and caught up on all the archives too over a few extremely slow days at work). &nbsp;I know it&#39;s completely serious. &nbsp;That takes away absolutely none of the amusement. &nbsp;&lt;grin&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-899793">
				<div id="div-comment-899793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899793">
			March 9, 2011 at 2:49 pm</a>		</div>

		<p>But I don&#39;t want to wait two years! Please can we have it early Mr Chen, please!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899803">
				<div id="div-comment-899803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">campbell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899803">
			March 9, 2011 at 5:44 pm</a>		</div>

		<blockquote><p>
  (In C/C++, the value after the comma is always zero.)
</p></blockquote>
<p>I tried generating assembly from a sample C program and I see slightly different &#8211; j in &quot;ret j&quot; is zero, but not the k in &quot;sub esp, k&quot;. If this parameter k is always zero, how does a function reserve its local space?</p>
<p>I know Raymond wants to write in detail later about this, but perhaps someone can point me in the right direction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-899813">
				<div id="div-comment-899813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul M. Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899813">
			March 9, 2011 at 6:24 pm</a>		</div>

		<p>@campbell: Raymond&#39;s parenthetical was referring specifically to the ENTER instruction&#39;s second operand.</p>
<p><a rel="nofollow" target="_new" href="http://www.sxlist.com/TECHREF/intel/x86/inst/enters.htm" rel="nofollow">http://www.sxlist.com/&#8230;/enters.htm</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899823">
				<div id="div-comment-899823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hexatron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899823">
			March 9, 2011 at 7:42 pm</a>		</div>

		<p>I stopped doing stuff like this when &#39;core dumps&#39; were 2-inch-thick fanfold listings that you got in the box where you thought the results of your batch run on the GE-635 would be.</p>
<p>Now I subscribe to the snake-bite theory:</p>
<p>Two miners are deep in the desert. One of them gets bitten on the privates by a rattlesnake. The other one looks in his field guide for snake-bite treatment. He reads about making x-shaped cuts over the bite and sucking the poison out. He tells his companion, &quot;You&#39;re gonna die.&quot;</p>
<p>Nonsense from the debugger? &quot;You&#39;re gonna die.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-899833">
				<div id="div-comment-899833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">campbell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899833">
			March 9, 2011 at 8:49 pm</a>		</div>

		<p>@Marks:</p>
<p>Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899843">
				<div id="div-comment-899843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-899843">
			March 9, 2011 at 9:06 pm</a>		</div>

		<p>@Hexatron: how about a process that tended to crash the debugger while stopped at a debug break. I had to debug with that getting in the way. 100% managed code too.</p>
<p>Found the problem eventually. Never did find out why it crashed the debugger so easily.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-900123">
				<div id="div-comment-900123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110309-00/?p=11263#comment-900123">
			March 10, 2011 at 10:01 am</a>		</div>

		<p>Going all the way back, the ENTER instruction has almost never been the most efficient (time-wise) way to erect a stack frame.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>