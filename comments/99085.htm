<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1348715">
				<div id="div-comment-1348715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348715">
			June 25, 2018 at 7:10 am</a>		</div>

		<p>I realize in kernel-land this probably matters a ton, but if I saw this code in code review I&#8217;d probably flag it. The reason being that we shouldn&#8217;t try to &#8216;help&#8217; the compiler. Moreover on modern systems as we&#8217;re well aware with SPECTRE and MELTDOWN that write would have to have a full fence in front of it inserted by the compiler since it&#8217;s conditional. Without the conditional that mitigation isn&#8217;t necessary. The end result is that the page will be resident and probably copied long before I ever have to worry about it. Hence I&#8217;d rather the write be non-conditional as it makes the code clearer and easier to understand. That then saves time from another engineer that wonders why someone would do that in the first place.</p>
<p>Final note: by removing the conditional you also let the compiler reorder it as appropriate and potentially the CPU can too! (Although x86 and x86-64 won&#8217;t)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fleet-command odd alt depth-2" id="comment-1348945">
				<div id="div-comment-1348945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348945">
			June 26, 2018 at 3:14 am</a>		</div>

		<p>Well, if only there was a comment optimizer to optimize &#8220;Although x86 and x86-64 won’t&#8221; into &#8220;Although x86&#8221; because &#8220;x86-64&#8221; <i>is</i> &#8220;x86&#8221; already. 😉 But then, it begs the question: What platform were you talking about so far?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1348725">
				<div id="div-comment-1348725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348725">
			June 25, 2018 at 7:27 am</a>		</div>

		<p>This article&#8217;s discussion assumes that the assignment is atomic or of limited size (i.e. a 64-bit value in a 32-bit processor). If you are writing to a larger object (an array/string, a whole structure, etc.), the question is wether the assignment itself is significantly more expensive than the compare. Cache and paging continue to be an issue, but as large objects use to span several cache lines and can straddle between two pages, their analysis is more difficult.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-2 parent" id="comment-1348735">
				<div id="div-comment-1348735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348735">
			June 25, 2018 at 8:06 am</a>		</div>

		<p>Honestly? Unless it shows up as a constant issue in the profiler in some hot code&#8230; I&#8217;m probably going to stick to the simple answer and allow the assignment unconditionally. Like all micro-optimizations, profile first, make changes later.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-kadu_cortez even depth-3 parent" id="comment-1348805">
				<div id="div-comment-1348805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kc0rtez' rel='external nofollow' class='url'>kc0rtez</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348805">
			June 25, 2018 at 1:15 pm</a>		</div>

		<p>&#8220;Like all micro-optimizations, profile first, make changes later.&#8221; with complex structures it can cut more than half the work so you shouldn&#8217;t always consider it a micro-optimization; Also, bear in mind not all languages have good profilers to pinpoint the issue AFTER the code is there, so it might save you quite a lot of hassle if you optimize simple stuff during development. In the end, it might just be better to code with common sense.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-4" id="comment-1348815">
				<div id="div-comment-1348815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348815">
			June 25, 2018 at 1:44 pm</a>		</div>

		<p>This isn&#8217;t a language issue, this is statistical analysis issue. You don&#8217;t need specialized profilers to do this. ETW could do it. Unless that function in particular is a hot spot I wouldn&#8217;t worry about it, because 90% of the time you&#8217;re wrong in your original assumptions. For example most people would assume that smaller structures are always better. But if that causes your structs to then cross cache lines in an array it could be slower. But even that doesn&#8217;t matter because the CPU prefetcher may detect that data pattern and fetch it anyway. My point is that there are too many variables to quantify in this case to assume. For all you know the CPU could consistently mis-predict on that branch which would cause a massive penalty on some CPUS. It&#8217;s also worth noting that conditional writes are the core of SPECTRE and MELTDOWN, so more than likely if you have those mitigations enabled it is going to insert a full fence after the read. In Kernel-land there are other considerations (triggering a page fault may cause a bug check), that need to be accounted for. But in userland you should always always profile first and never assume.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1348845">
				<div id="div-comment-1348845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348845">
			June 25, 2018 at 3:18 pm</a>		</div>

		<p>There are &#8220;micro-optimizations&#8221;, and then are what I call &#8220;inline micro-optimizations&#8221;. It consists of writing code while having the low level data structures in mind (&#8220;reverse-engineering the compiler&#8221;, if you want to see it that way). Then, when you write a allegedly expensive (or &#8220;heavy&#8221;) operation, stop a few seconds (no more than five or ten!) to think how can you optimize it out. It doesn&#8217;t take too much time once you get used, and the results are spectacular. But you need to have some knowledge of what&#8217;s under the hood, even if you are using a modern, high-level, garbage-collected language.</p>
<p>Of course, if you find yourself asking the same questions about the same datatype over and over, you may want to abstract it in a class or a module. Or maybe it&#8217;s that the data structure you are using isn&#8217;t the right one for the job. Don&#8217;t be afraid of refactoring or throwing out code (unless your company policies don&#8217;t allow you to; but then, your case belongs to The Daily WTF&#8230;).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-3" id="comment-1348955">
				<div id="div-comment-1348955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348955">
			June 26, 2018 at 7:12 am</a>		</div>

		<p>To be fair, the cost of write may not be seen by the profiler immediately at this line.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kadu_cortez even thread-even depth-1 parent" id="comment-1348755">
				<div id="div-comment-1348755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kc0rtez' rel='external nofollow' class='url'>kc0rtez</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348755">
			June 25, 2018 at 10:16 am</a>		</div>

		<p>&#8220;if (x != newValue) x = newValue;&#8221; should not be the optimal solution in pretty much any scenario, since there are smarter ways to write the conditional. A better solution would be to assign said variable where the value is changed, avoiding any further checks thus getting optimal performance, or simply querying the value directly instead of storing it into a variable (Considering you either can track the changes in the value or can query it at any given time; but heck, i can&#8217;t think of a scenario where at least one of these is true).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1348895">
				<div id="div-comment-1348895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Crowther</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348895">
			June 25, 2018 at 11:47 pm</a>		</div>

		<p>In .NET apps where you commonly see that conditional check is in a property setter that checks to see whether the value being assigned to the property is actually different to what it already has; the additional expense there is after changing the value you often raise a PropertyChanged event for the property, with all the associated overhead that goes with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1349085">
				<div id="div-comment-1349085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zboot</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1349085">
			June 26, 2018 at 3:22 pm</a>		</div>

		<p>I think you didn&#8217;t read the article. If you always write to memory when the value is written, that results in an expensive operation if the value being written doesn&#8217;t actually change. You&#8217;re assuming the only time a write occurs is when there&#8217;s a change of value.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-adarsha-mv odd alt thread-odd thread-alt depth-1 parent" id="comment-1348765">
				<div id="div-comment-1348765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/mvadu' rel='external nofollow' class='url'>mvadu</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348765">
			June 25, 2018 at 11:25 am</a>		</div>

		<p>in any modern languages which gets compiled multiple times (C#-&gt;IL-&gt;machine code) even if we profile this is not something you will notice. This level of tuning only makes sense if I am coding for Arduino or ESP32 kind of processors. (I can&#8217;t relate to Windows kernel development as I have not done any, and I don&#8217;t myself getting into Raymond&#8217;s organization anytime in future)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1348835">
				<div id="div-comment-1348835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348835">
			June 25, 2018 at 2:56 pm</a>		</div>

		<p>That&#8217;s why Raymond&#8217;s points about paging are more relevant. Now, in some high level languages that might be less likely, but with e.g. page deduplication in both OSes and hypervisors, you could at least in some circumstances have your actual workset minimized by copy-on-write semantics even when never really caring about it. If you have any rate of swap acitivity or if the data is backed by a memory-mapped file (less likely in the .NET case, I know), then it could matter greatly. And, of course, if you are in the pathological case of lots of threads accessing (and writing to) shared variables in the same cache line.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1348785">
				<div id="div-comment-1348785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348785">
			June 25, 2018 at 11:34 am</a>		</div>

		<p>A similar issue arises in databases, where you want to change some values in a table.  During data cleanup, should you replace all values in a character column with a space-trimmed value, for example, or only replace those values that don&#8217;t already match their space-trimmed equivalents?  I lean toward reducing attempts to &#8220;rewrite with the same values&#8221; in database tables, especially if that value usually won&#8217;t actually change.   </p>
<p>Even though I&#8217;m not sure if the database engine is smart enough to not actually change the data and rewrite the table data-pages in these cases.   (Don&#8217;t try to fool the compiler or the database engine internals.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1348825">
				<div id="div-comment-1348825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348825">
			June 25, 2018 at 1:58 pm</a>		</div>

		<p>A database engine should not trim written values. A database should store what it is told to store, should not try to be pragmatic.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1348995">
				<div id="div-comment-1348995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348995">
			June 26, 2018 at 7:54 am</a>		</div>

		<p>You can&#8217;t make a blanket statement like that.  When data comes from systems (that WE have no control over) and gets directly imported into database tables, then cleaned, IF that data came from hand-entered account numbers or Zip codes (for example) where leading and trailing blanks should not actually be there, then trimming the blanks from the data is the right thing to do.  Who wants to keep leading blanks on a Zip code?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-iboyd even depth-3 parent" id="comment-1349025">
				<div id="div-comment-1349025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1349025">
			June 26, 2018 at 8:53 am</a>		</div>

		<p>@Karl  ANSI/ISO SQL-92 specification requires database engines to trim trailing spaces (when doing certain things). </p>
<p>And you certainly don&#8217;t want to needlessly take exclusive locks, and trigger triggers, when it&#8217;s not needed.</p>
<p>Like you don&#8217;t want to cause a page copy when it&#8217;s not needed.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1349045">
				<div id="div-comment-1349045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1349045">
			June 26, 2018 at 10:12 am</a>		</div>

		<p>What certain things exactly?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1349065">
				<div id="div-comment-1349065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1349065">
			June 26, 2018 at 12:05 pm</a>		</div>

		<p>Yep, but we get leading spaces too, which &#8212; for some data values &#8212; are not significant (and shouldn&#8217;t be there).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1348855">
				<div id="div-comment-1348855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dox.com.au' rel='external nofollow' class='url'>Ian Yates</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348855">
			June 25, 2018 at 3:48 pm</a>		</div>

		<p>Good example though. And it shows how it can get more complicated as you go to higher levels of abstraction.</p>
<p>If this wasn&#8217;t a field, but a c# property with a setter, you&#8217;ve got side effects.<br />
We do similar things with our Knockout JavaScript code where we avoid writing what looks like the same object (same data, but different instance) since it&#8217;s wasteful to do so &#8211; it&#8217;ll trigger downstream notifications, which might repaint screens, etc to actually have zero visible change.<br />
We hide that complexity by using a comparer on the observable so we can write the simple assignment but get the &#8220;only write if meaningfully different&#8221; behaviour implicitly (well, in this case it still writes but only notifies if different)</p>
<p>This is part of react&#8217;s virtual dom claim to fame.</p>
<p>For databases, updates are a bit like a property set since you have triggers, concurrency, etc.</p>
<p>In short, abstractions matter, and this shows advice in one situation can&#8217;t be cargo cult applied to all.</p>
<p>I like nuance ☺️</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1348885">
				<div id="div-comment-1348885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The_Assimilator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1348885">
			June 25, 2018 at 10:44 pm</a>		</div>

		<p>&#8220;Factors pull in both directions. The result is a balance.&#8221; Very Zen of you, Raymond. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-iboyd odd alt thread-even depth-1" id="comment-1349015">
				<div id="div-comment-1349015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1349015">
			June 26, 2018 at 8:46 am</a>		</div>

		<p>Similar to the question Eric Brumer posed in one of his C++ performance talks.</p>
<p>You want to call a function pointer (which is simply what a virtual method call is):</p>
<p>Version 1:</p>
<p>    pFunc(42);</p>
<p>Version 2:</p>
<p>    if (pFunc == FuncAdd)<br />
       FuncAdd(42)<br />
    else if (pFunc == FuncLn)<br />
       FuncLn(42)<br />
    else<br />
       Func(42);</p>
<p>Rather than stalling on the fetch of the address contained in pFunc, you let the CPU&#8217;s Branch Predictor (which is right 90% of the time) simply start executing the function.</p>
<p>The Visual Studio compiler, with Profile Guided Optimizations (PGO), will insert these kinds of optimizations for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1349595">
				<div id="div-comment-1349595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://skuldwyrm.no/' rel='external nofollow' class='url'>Roger Hågensen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180625-00/?p=99085#comment-1349595">
			June 30, 2018 at 10:00 pm</a>		</div>

		<p>You are missing a third fragment.<br />
/******************************************/<br />
x = newValue;<br />
if (x != newValue) x = newValue;<br />
/******************************************/</p>
<p>This is something I often do when most of the time a condition is true but rarely it&#8217;s not.<br />
After all a single write tends to be faster than both a read and a write.<br />
Sure, one could argue that a if conditional is done needlessly, and perhaps earlier in a program a state is known and checkable to avoid reaching this code at all.</p>
<p>The fastest code to execute is the code you don&#8217;t have to execute at all.</p>
<p>I often &#8220;waste&#8221; extra code before or after a loop if it means I end up with less code inside the loop for example.<br />
I try to apply the same principle to if else as well.<br />
And within functions I often do just a if then exit the function rather than a if else nesten inside another if else. I call this the &#8220;exit early principle&#8221;, in that if a condition is false then just exit the function. This means most of my functions only have a single &#8220;if&#8221; nesting level.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>