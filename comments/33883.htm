<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-311523">
				<div id="div-comment-311523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Heston Holtmann</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051006-09/?p=33883#comment-311523">
			October 6, 2005 at 2:12 pm</a>		</div>

		<ol>
<li>When did this bug come into existence; i.e; When Win95 was developed?<br />
<br />2. When did Microsoft become <em>aware</em> of this bug?<br />
<br />3. Why did it take so long to finaly ship the fix?</p>
<p>Just curious?</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-311573">
				<div id="div-comment-311573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051006-09/?p=33883#comment-311573">
			October 7, 2005 at 4:00 am</a>		</div>

		<p>Craig:</p>
<p>I&#8217;d strongly recommend &quot;Windows System Programming&quot; (Third Edition) by Johnson M. Hart.  It&#8217;s a clear, professional study of Win32 for experienced Unix and VMS programmers.</p>
<p>The issue with malloc &amp; free between different DLLs is this:  if you choose to build each DLL statically linked and bound to its own copy of the C run-time library, then each DLL will maintain its own heap, its own streams and file handles, its own errno, etc.</p>
<p>Instead, link your C programs and DLLs against the &quot;multithreaded DLL&quot; version of the library (using the /MD compiler flag), which makes them all share a single copy of the MSVCRT.DLL library.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-311553">
				<div id="div-comment-311553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mailto:craig@postnewspapers.com.au' rel='external nofollow' class='url'>Craig Ringer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051006-09/?p=33883#comment-311553">
			October 6, 2005 at 11:40 pm</a>		</div>

		<p>This sort of thing is pretty amazing. I don&#8217;t envy the Windows team their job of maintaining source and binary compatibility for 15-year-old applications while trying to produce a secure, reliable OS for users who don&#8217;t want to sacrifice anything for security or reliability.</p>
<p>Eek.</p>
<p>In fairness, this sort of scary quirk is why I avoid win32 programming like the plague. On the other hand, if I had a large body of existing win32 code to maintain I imagine I&#8217;d be very thankful indeed for this sort of compatibility hack.</p>
<p>On a side note, is there any MSDN coverage of safe memory handling in DLLs and safe pointer use between DLLs? I found very little, and most information I&#8217;ve seen has been from other (perhaps outdated) sources. As a UNIX guy who&#8217;s dabbling with Windows, this is immensely frustrating &#8211; on UNIX, shared libraries seem *WAY* simpler. It&#8217;s very hard to find out what you can and can not safely do with/in DLLs on win32. I mean things like &quot;allocate memory in DLL 1 and free it in DLL 2&quot;. It&#8217;s even harder to find out what limitations are due to the inherent architecture of DLLs on win32, and what is due to binary compatibility problems caused by the need to support runtime linking DLLs built by three different compilers into an executable built by a fourth.</p>
<p>Maybe MSDN could use a section with references for people coming from UNIX/Linux platforms &#8211; they&#8217;ll understand C and C++, but not the win32 API, process model, threading model, shared library handling, etc. A section with links, and where possible explanations of the win32 systems in terms of the UNIX/Linux approach to each problem, would be really handy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-311593">
				<div id="div-comment-311593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas Haeber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051006-09/?p=33883#comment-311593">
			October 7, 2005 at 8:06 am</a>		</div>

		<p>Maybe a bit late to post a comment here now.</p>
<p>Craig, if you ever read this page again: Look at <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnucmg/html/UCMGch09.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnucmg/html/UCMGch09.asp</a> for a comparison of Win32 and UNIX.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-311563">
				<div id="div-comment-311563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051006-09/?p=33883#comment-311563">
			October 7, 2005 at 2:01 am</a>		</div>

		<p>If you&#8217;re going straight to Win32 API for your memory management, it doesn&#8217;t care whether you do stuff in a DLL, the EXE, separate DLLs, whatever.  It&#8217;s all a single process.</p>
<p>If you link two pieces of code against different *instances* of some runtime library and use it to manage memory, you could have problems.  The C and C++ runtime libraries have a significant amount of internal state, including their own private heaps (apparently&#8230;).  The rule is, any time state is created in the runtime in one DLL, don&#8217;t expect that state to exist in another.</p>
<p>However, if you link all DLLs against the same version of the multithreaded dll version of the runtime, they&#8217;ll share a single instance and the problem goes away.  That&#8217;s the proper solution.</p>
<p>Or at least, that&#8217;s how I remember it&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-311583">
				<div id="div-comment-311583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051006-09/?p=33883#comment-311583">
			October 7, 2005 at 7:16 am</a>		</div>

		<p>&gt; the window manager knows that valid 32-bit HINSTANCEs have zero in the bottom 16 bits, whereas 16-bit HINSTANCE values are nonzero there.</p>
<p>Presumably 16-bit HINSTANCE values are zero in the *top* 16 bits, whereas 32-bit HINSTANCEs are nonzero there.</p>
<p>Or am I overlooking the obvious?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>