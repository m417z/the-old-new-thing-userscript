<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1173063">
				<div id="div-comment-1173063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173063">
			January 28, 2015 at 7:08 am</a>		</div>

		<p>I think the conventional example should read &quot;mov edx, ecx; mov ecx, eax&quot;. I do love these compiler optimisation examples, I would never have thought of this one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173083">
				<div id="div-comment-1173083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173083">
			January 28, 2015 at 7:19 am</a>		</div>

		<p>Now that we are finally back on calling conventions, I noticed the calling convention requires __chkstk to be called, but it does not seem to be exported from system DLLs.</p>
<p>It is exported from the C standard library, but if you&#39;re not linking against it anymore&#8230;</p>
<div class="post">[<em>Why would a system DLL export __chkstk? Then you would have people linking to the wrong __chkstk. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173093">
				<div id="div-comment-1173093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173093">
			January 28, 2015 at 7:23 am</a>		</div>

		<p>Was the different calling convention causing a problem, or just confusion as they debugged through the assembly and registers?</p>
<p>Presumably compilers always use the standing convention when compiling a function for use by an external module.</p>
<p>Do compilers ever do something weird for a function marked as callable from an external module, where the external uses get one address which uses the standard convention, and internal uses go to a different address which uses an optimized convention? Kind of like inlining?</p>
<p>Actually, I would expect a clever compiler to optimize the &quot;foo&quot; function out completely and just inline it.</p>
<div class="post">[<em>This was obviously a simplified example. The real foo was not inlined because it was large, or it had multiple callers, or something. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-odd thread-alt depth-1" id="comment-1173113">
				<div id="div-comment-1173113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173113">
			January 28, 2015 at 8:07 am</a>		</div>

		<p>Call target?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173133">
				<div id="div-comment-1173133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173133">
			January 28, 2015 at 8:53 am</a>		</div>

		<p>And of course the extreme example of this is when compilers inline functions calls &#8211; sometimes even for functions that are not explicitly marked as inline in the source file. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173143">
				<div id="div-comment-1173143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173143">
			January 28, 2015 at 9:08 am</a>		</div>

		<p>@pc I believe that when PGO is used it&#39;s possible for the compiler to compile a single source function into several different binary forms depending on the caller. &nbsp;It&#39;s definitely possible to get inline and out of line versions of a function even without PGO.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173173">
				<div id="div-comment-1173173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173173">
			January 28, 2015 at 11:50 am</a>		</div>

		<p>[Why would a system DLL export __chkstk? Then you would have people linking to the wrong __chkstk. -Raymond]</p>
<p>How can there be a wrong __chkstk if it&#39;s effect is specified in the ABI?</p>
<div class="post">[<em>Why would you link to some random system DLL&#39;s __chkstk (that isn&#39;t part of that system DLL&#39;s contract) when you could link to the one in the C runtime (which is part of the C runtime&#39;s contract)? Maybe a future version of the OS gets rid of that system DLL. Should system DLLs also export malloc? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173193">
				<div id="div-comment-1173193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173193">
			January 28, 2015 at 12:49 pm</a>		</div>

		<p>The x86-64 unwind information in .pdata allocates 4 bits for specifying which registers are saved on the stack and which register is the frame pointer. &nbsp;Since this can specify the full range of register numbers, does this mean that it is legal to use what is normally a volatile register as a frame pointer in a function that doesn&#39;t call any other functions? &nbsp;(This in theory could be useful for a leaf function that calls _alloca/__chkstk).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173203">
				<div id="div-comment-1173203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173203">
			January 28, 2015 at 12:58 pm</a>		</div>

		<p>@Raymond: (Regarding reply to Joshua) How does the stack unwind system recognize __chkstk itself? &nbsp;Does it look for __chkstk&#39;s binary pattern, or does __chkstk itself follow the standard x86-64 ABI rules? &nbsp;If its binary pattern is recognized specifically by RtlVirtualUnwind, that would make it impossible to properly implement alloca in a third-party compiler without infringing Microsoft&#39;s copyright, since msvcrt.dll does not export it.</p>
<div class="post">[<em>It doesn&#39;t need to do anything special to recognize __chkstk. On x64, __chkstk is a normal function with standard stack usage, unlike x86. On x64, the caller does the &quot;sub rsp, n&quot;.&nbsp;Therefore, the existing unwind codes describe it adequately. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173213">
				<div id="div-comment-1173213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173213">
			January 28, 2015 at 2:30 pm</a>		</div>

		<p>@Myria: __chkstk violates the /normal/ ABI pretty hard by being called inside the function prolog.</p>
<p>[Maybe a future version of the OS gets rid of that system DLL]</p>
<p>Can&#39;t get rid of kernel32.dll. Interesting that it is currently exported from 64 bit kernel32.dll (but not 32 bit kernel32.dll) and not documented that it is so. I suppose this means the export is allowed to disappear in the future. IE8 was discovered to be linked against it, but that won&#39;t pose a problem for future Windows versions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston even thread-even depth-1" id="comment-1173223">
				<div id="div-comment-1173223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173223">
			January 28, 2015 at 4:12 pm</a>		</div>

		<p>So &#8230; can we implement our own __chkstk if we aren&#39;t using Visual Studio&#39;s C runtime?</p>
<div class="post">[<em>You&#39;re asking the wrong person. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173233">
				<div id="div-comment-1173233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">philiplu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173233">
			January 28, 2015 at 4:26 pm</a>		</div>

		<p>__chkstk should be a statically linked even when linking to the DLL version of the CRT. &nbsp;You can always just extract the chkstk.obj object from the library and link against that.</p>
<p>In general, you can&#39;t completely avoid the C runtime when it&#39;s used to provide compiler support, like __chkstk or the structured exception handler support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston even thread-even depth-1" id="comment-1173243">
				<div id="div-comment-1173243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173243">
			January 28, 2015 at 6:01 pm</a>		</div>

		<p>@Raymond: oh, I wasn&#39;t expecting you to answer; just thought someone might know. &nbsp;And as it turns out I was confusing __chkstk with the /GS (buffer security check) functions anyway. :-)</p>
<p>@philiplu: thanks, that sounds sensible &#8211; and I wonder if I can do the same for the cookie functions? &nbsp;So far I&#39;ve been able to avoid needing __chkstk by virtue of using mainly static variables, and I just turn the /GS option off, but it is always good to have options. &nbsp;(These are small-to-trivial applications, which don&#39;t take untrusted input, so the risk is minimal.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173153">
				<div id="div-comment-1173153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173153">
			January 28, 2015 at 10:01 am</a>		</div>

		<p>@mikeb: &quot;sometimes even for functions that are not explicitly marked as inline in the source file&quot;? I should *hope* my compiler isn&#39;t so dense as to require me to sprinkle &quot;inline&quot; around. &quot;inline&quot; is a relic from more innocent times &#8212; if you need to tweak inlining at all these days it&#39;s typically to explicitly mark a function as *not* to be inlined.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173283">
				<div id="div-comment-1173283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">philiplu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173283">
			January 28, 2015 at 11:50 pm</a>		</div>

		<p>You can probably get the /GS support working without the rest of the CRT, but it&#39;s more involved than, say, __chkstk. &nbsp;I wrote most of that support code about a decade ago, but left Microsoft 7 years ago, so I&#39;m not sure how much it&#39;s changed since my time there. &nbsp;The good news is it appears that the CRT source code now includes the necessary source files (gs_*.c and a few others, probably). &nbsp;We didn&#39;t use to ship all the support files, especially for things like SEH and C++ EH support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173293">
				<div id="div-comment-1173293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173293">
			January 29, 2015 at 2:27 am</a>		</div>

		<p>So, as optimised code becomes ever harder to debug, and unoptimised code becomes ever slower (it&#39;s all very well using templates instead of macros but in full debug builds they become out-of-line function calls), is there a happy medium?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173303">
				<div id="div-comment-1173303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">not an anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173303">
			January 29, 2015 at 6:24 am</a>		</div>

		<p>@Neil &#8212; yes there is. &nbsp;Modern compilers are developing the ability for their optimizer to emit special debug data that tells the debugger what the optimizer did to variables; this, along with improvements to unwinding (in particular, the ability to unwind without an explicit frame pointer), helps when debugging optimized code.</p>
<p>(If you want to know more, look up the GCC -fvar-tracking and -fvar-tracking-assignments options.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173423">
				<div id="div-comment-1173423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173423">
			January 29, 2015 at 9:15 am</a>		</div>

		<p>&quot;[You&#39;re asking the wrong person. -Raymond]&quot;</p>
<p>Nah. &nbsp;You are able to tell him he CAN implement it himself: &nbsp;the answer, trivially, is &quot;yes&quot;. &nbsp;Whether it&#39;s an ill-advised idea is another matter. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1173823">
				<div id="div-comment-1173823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173823">
			January 30, 2015 at 10:32 am</a>		</div>

		<p>@JM one justified usage of `inline` with Microsoft compiler is to avoid &quot;duplicate symbol&quot; linker error.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173913">
				<div id="div-comment-1173913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">inliner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173913">
			January 30, 2015 at 11:19 pm</a>		</div>

		<p>To discussion about inline keyword: It has very little to do with inlining optimization. It means, there are several copies of this function (usually because function was defined in header file), but that&#39;s ok.</p>
<p>It is related to inlining this way: to inline a function in a compilation unit, the function code needs to be available, usually achieved by defining it in a header file, so inline keyword is needed to avoid build errors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1174183">
				<div id="div-comment-1174183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1174183">
			February 3, 2015 at 7:32 am</a>		</div>

		<p>Could (or, rather, does) the compiler ever do both? That is, make an &quot;optimized&quot; entry point that does this, and a &quot;standard&quot; entry point that you get for external usage of the function or if you take the address?</p>
<div class="post">[<em>I don&#39;t see why not. You could call it &quot;shared inlining.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>