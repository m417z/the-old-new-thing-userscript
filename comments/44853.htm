<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1172613">
				<div id="div-comment-1172613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150122-00/?p=44853#comment-1172613">
			January 22, 2015 at 7:35 am</a>		</div>

		<p>I have always found these hard to work with and there are lot&#39;s of undocumented strings that you run across when debugging IShellFolder and friends. That being said, this table is going to be really useful as a quick reference so on behalf of shell developers everywhere, thank you!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172643">
				<div id="div-comment-1172643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150122-00/?p=44853#comment-1172643">
			January 22, 2015 at 9:46 am</a>		</div>

		<p>I&#39;d have to imagine that the only reason the STR_GPS_* values exist is that they predated the idea of having a standard property bag.</p>
<p>You could do it now, but prior to Win8 it was a lot easier to create a trivial object to represent a bool than to create an object to hold an int.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172653">
				<div id="div-comment-1172653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nikos z</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150122-00/?p=44853#comment-1172653">
			January 22, 2015 at 10:05 am</a>		</div>

		<p>I always puzzled why such an over the top method like bind contexts was used to pass effectively 0-1 bits of information (mostly). So what if you want to activate 2 behaviours simultaneously (of the boolean type), you call Register&shy;Object&shy;Param twice with the same dummy IUnknown?</p>
<div class="post">[<em>You&#39;ll have to ask the COM folks why they chose to use a bind context to pass binding parameters. Sure, you could have a standard dummy IUnknown that you use. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172673">
				<div id="div-comment-1172673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150122-00/?p=44853#comment-1172673">
			January 22, 2015 at 11:27 am</a>		</div>

		<p>@nikos &#8211; my understanding is the bind context was meant for more than just passing extra parameters. &nbsp;In particular, during moniker binding, the bind context can also be used for internal communication between the objects that are performing the parse/bind operations as a composite moniker is processed. &nbsp;For example, an expensive-to-create resource that might be needed more than once could be cached in the binding context to allow simple monikers later in the pipeline to avoid the cost of re-creating it.</p>
<p>Or at least that what I&#39;ve understood. &nbsp;In all my years of COM programming (not with the shell APIs), I don&#39;t recall ever actually using the bind context for anything at all &#8211; it was just another object to haul around and pass long.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172703">
				<div id="div-comment-1172703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150122-00/?p=44853#comment-1172703">
			January 22, 2015 at 3:18 pm</a>		</div>

		<p>[You&#39;ll have to ask the COM folks why they chose to use a bind context to pass binding parameters. Sure, you could have a standard dummy IUnknown that you use. -Raymond]</p>
<p>Would passing the IBindCtx itself be correct?</p>
<div class="post">[<em>From the API&#39;s standpoint, you can put anything you want. But putting the bind context inside itself would create a circular reference and therefore a memory leak. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172713">
				<div id="div-comment-1172713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150122-00/?p=44853#comment-1172713">
			January 22, 2015 at 7:31 pm</a>		</div>

		<p>Ohhh I missed the critical part. The boolean is evaluated later.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>