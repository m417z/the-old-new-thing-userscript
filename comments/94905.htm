<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1276485">
				<div id="div-comment-1276485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276485">
			December 9, 2016 at 8:56 am</a>		</div>

		<p>I once solved the cross-DLL memory alloc/free problem with an amusing solution. The policy was all such allocations are made using HeapAlloc(GetProcessHeap(), &#8230;) and are freed with HeapFree(GetProcessHeap(), &#8230;).</p>
<p>There was a rumor that you could in fact call malloc in one C library and free the resulting memory block in a matching C library. The scary thing is I encountered two C libraries for which this was in fact true. One did malloc -&gt; HeapAlloc(GetProcessHeap(), &#8230;) and the other had this weird artifact where free() located the heap by pointer arithmetic on the pointer being freed. You could easily depend on this behavior by accident and years later wonder why it doesn&#8217;t work anymore.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-2" id="comment-1276495">
				<div id="div-comment-1276495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276495">
			December 9, 2016 at 9:05 am</a>		</div>

		<p>glib does that, particularly for files (g_open but no g_close), this has caused me innumerable problems because the GTK-WIN project doesn&#8217;t always keep up with the latest VC++. Fortunately there are other options for opening files with UTF-8 paths (boost.filesystem). But it is a very serious issue when dealing with libraries imported from *nix which assume a system wide allocator and syscalls in the C library.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even depth-2" id="comment-1276555">
				<div id="div-comment-1276555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276555">
			December 9, 2016 at 2:58 pm</a>		</div>

		<p>In a debug build, this might not be a straight HeapAlloc anymore.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1276505">
				<div id="div-comment-1276505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276505">
			December 9, 2016 at 10:31 am</a>		</div>

		<p>&gt; The DLL uses the C runtime that it chooses. </p>
<p>there isn&#8217;t any choice if the dependent modules have to be abi compatible, no?</p>
<p>[<i>That was the DLL&#8217;s choice, to take a dependency on other DLLs that constrain its choice of C runtime. -Raymond</i>]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1276535">
				<div id="div-comment-1276535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276535">
			December 9, 2016 at 12:44 pm</a>		</div>

		<p>&gt; The last detail is something people often overlook.</p>
<p>Probably because on other systems, there is only one C runtime library.</p>
<p>&gt; and you cannot even pass a file descriptor between modules, because even though file descriptors are integers, they are integers that are managed by the corresponding C runtime library.</p>
<p>This one is even worse: on Unix-based systems (nowadays, basically every system except Windows), file descriptors are managed by the kernel (they are more like handles), so you can pass them between modules even if you somehow are using more than one C runtime library in the same process. It&#8217;s easy to forget that, on Windows, they are not managed by the kernel.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1276545">
				<div id="div-comment-1276545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276545">
			December 9, 2016 at 1:28 pm</a>		</div>

		<p>[Posst flickered in and out of existence as I tried to reply to it]</p>
<p>1: The hacked descriptors in the windows C runtime library have essentially no use. The NET Core wisely avoids them and just uses handles outright. The Linux port of NET Core stuffs the descriptor in the handle variables because they are the true equivalent.</p>
<p>2: My Linux system has I believe 5 C libraries (or 6 if libc5 is still installed but I don&#8217;t think it is). It is quite impossible to compile any program that crosslinks them however. What would happen if you tried is the linker would yelp as they are utterly incompatible no matter how many layers of indirection you went through. In effect they are different executable file formats.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1276625">
				<div id="div-comment-1276625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NTAuthority</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276625">
			December 12, 2016 at 3:17 am</a>		</div>

		<p>The latter, of course, merely because the dynamic linker on Linux is part of the C runtime library, and has its own executable parser.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1276685">
				<div id="div-comment-1276685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Beldantazar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276685">
			December 12, 2016 at 10:55 am</a>		</div>

		<p>So what would happen on linux if someone replaced a .so file with a version compiled with a different libc?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1276705">
				<div id="div-comment-1276705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276705">
			December 12, 2016 at 5:45 pm</a>		</div>

		<p>The loader would try to load the second libc and fail because the libc references symbols in another loader.</p>
<p>You might succeed if you statically linked the .so file against the target libc&#8217;s .so file (this is a weird case with no analog in Windows; the full path to the .so file and its load address are specified in the binary), but if you went through all that work and figured out how to keep ASLR from hosing you you deserve what you get.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1277155">
				<div id="div-comment-1277155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1277155">
			December 16, 2016 at 1:40 am</a>		</div>

		<p>Many Linux developers seem to be surprised that on Windows, the C runtime is not built into the system. I remember reading somewhat recently a blogpost that started basically with &#8220;Hey, we used jemalloc for out new hot library, and when we tried to build and use it on Windows, terrible things happened when free() was called&#8221;. Then it proceeded to discuss possible solutins â€” and it was clear from the text that it was a new and exciting problem for the author, which left a kind of strange impression on a Windows developer: after all, the problem (and all the discussed solutions) was already old when Delphi 3.0 was new.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1276565">
				<div id="div-comment-1276565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276565">
			December 9, 2016 at 3:36 pm</a>		</div>

		<p>I deal with this in one project I work on (a game engine) by having a common dll that provides a memory manager (and all the other bits link to it). In this case this is done not just because it ensures cross-boundary memory allocation works but it has other advantages (performance, memory leak detection, things like that)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-martin-baschnegger odd alt thread-even depth-1" id="comment-1276875">
				<div id="div-comment-1276875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Martin+Ba.+_' rel='external nofollow' class='url'>Martin Ba. _</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276875">
			December 14, 2016 at 2:52 am</a>		</div>

		<p>ad footnote (2): &#8220;&#8230;decide to upgrade one module to a newer version of the compiler &#8230; Once you do that, you have a C runtime mismatch&#8221;</p>
<p>Except when the new compiler is VC++2017 and the old one is VC++2015, because here MS kept binary compatibility. And of course within the update timeframe of one VS version, the runtime library also stays the same.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>