<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-848193">
				<div id="div-comment-848193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848193">
			July 23, 2010 at 7:05 am</a>		</div>

		<p>From MSDN:</p>
<p>&quot;If the source and destination overlap, the behavior of memcpy is undefined. Use memmove to handle overlapping regions.&quot;</p>
<p>So the DebugValidateWritePtr should use memmove to work as intended, I guess</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-848203">
				<div id="div-comment-848203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848203">
			July 23, 2010 at 7:08 am</a>		</div>

		<p>(Sorry for double posting, I thought of this just right after clicking &quot;Post&quot;)</p>
<p>On the other hand memmove might do a quick check if src and dst are identical and skip the whole operation. While this is valid for the semantics of memmove it isn&#39;t what was wanted. So using either memcpy or memmove for this purpose will rely on their implementation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-848283">
				<div id="div-comment-848283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle S.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848283">
			July 23, 2010 at 8:50 am</a>		</div>

		<p>How does this avoid the problematic guard page example from the original article?</p>
<div class="post">[<i>It doesn&#39;t. That&#39;s why it&#39;s called DebugValidateWritePtr and not ValidateWritePtr. See second sentence of this article. And the entire final paragraph. There must be some Internet law for this: No matter how many caveats you put in your article, somebody will ignore them all. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-848313">
				<div id="div-comment-848313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848313">
			July 23, 2010 at 9:27 am</a>		</div>

		<p>My C(++) is a bit rusty, but I think you can prevent unwanted interactions with compiler optimizations by using volatile here.</p>
<p>void DebugValidateWritePtr(void volatile *p, size_t cb)</p>
<p>{</p>
<p>memcpy(p, p, cb);</p>
<p>}</p>
<p>if that requires casting, wrap this thing in a function that does that casting for you.</p>
<p>I also think you will have to roll your own memcpy and memcmp if you want to prevent the compiler from special-casing these, as a C++ compiler is allowed to know what standard library calls do. (a typical use is in optimizing &quot;for( int i = 0; i &lt; strlen(s); ++i){}&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-848323">
				<div id="div-comment-848323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul M. Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848323">
			July 23, 2010 at 9:39 am</a>		</div>

		<p>@Someone: If this function is only being used in debugging, it&#39;s usually the case that optimizations are not enabled (not always, but usually). I don&#39;t know about everyone else, but by the time I get around to working with optimized code I have all my debug-only code removed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-848363">
				<div id="div-comment-848363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sukru</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848363">
			July 23, 2010 at 10:47 am</a>		</div>

		<p>memcpy behavior is undefined, since it relies on the copy direction. for example if you where you shift the following buffer to right by tow items:</p>
<p>1,2,3,4,5</p>
<p>and do it from left to right it would become</p>
<p>1,1,1,1,1,1,1</p>
<p>on the other hand from right to left you get</p>
<p>1,2,1,2,3,4,5</p>
<p>that&#39;s what memmove automatically handles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-848383">
				<div id="div-comment-848383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848383">
			July 23, 2010 at 11:05 am</a>		</div>

		<p>Why don&#39;t the IsBadXxxPtr functions use some kernel functions to check if the memory is valid? (Instead of &quot;try and see if it fails&quot;.) The kernel certainly has the ability to check that somehow.</p>
<p>Apart from that there is no point in using them anyway. If someone passes in valid but &quot;wrong&quot; pointers you might overwrite vital data and then will be crashing anyway somewhere. That&#39;s the callee&#39;s fault, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-848453">
				<div id="div-comment-848453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">benjamin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848453">
			July 23, 2010 at 2:11 pm</a>		</div>

		<blockquote><p>
  If I&#39;m not supposed to call IsBadXxxPtr, how can I check if a pointer is bad?
</p></blockquote>
<p>Practice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-848243">
				<div id="div-comment-848243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Pryor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848243">
			July 23, 2010 at 7:58 am</a>		</div>

		<p>Given the undefined behavior of memcpy here, and the fact that at least some memmove implementations that Google finds don&#39;t actually do anything if source == dest, C++ templates might be the better idea:</p>
<p>template &lt;typename T&gt;</p>
<p>inline void DebugValidateWritePtr(T* p)</p>
<p>{*p = *p;}</p>
<p>This likely isn&#39;t ideal either &#8212; for non-pointer types it&#39;ll invoke T::operator=, which often will check for assignment against &#39;this&#39; and do nothing &#8212; but at least it&#39;s a start, doesn&#39;t rely on undefined behavior, and will actually perform the write.</p>
<p>Unfortunately, it&#39;s C++. &nbsp;I suppose we could use a macro for C:</p>
<p>#define DEBUG_VALIDATE_WRITE_PTR(p) do {*p = *p} while(0)</p>
<p>though not everyone likes heavy use of macros.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-848353">
				<div id="div-comment-848353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848353">
			July 23, 2010 at 10:37 am</a>		</div>

		<p>@Someone: Your C++ is rusty. Volatile does not inherit through function calls like that *and* the memcpy operation is inherently thread unsafe so volatile won&#39;t help.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-848393">
				<div id="div-comment-848393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">fred</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848393">
			July 23, 2010 at 11:32 am</a>		</div>

		<p>For anyone concerned about the use of memcpy() in an undefined manner or that it might get optimized away (even though both are probably not concerns in the intended debug scenarios), here&#39;s an alternative that should take care of those concerns (I sure hope I didn&#39;t bug this somehow&#8230;):</p>
<p>&lt;pre&gt;</p>
<p>void DebugValidateWritePtr(void* pv, size_t cb)</p>
<p>{</p>
<p> &nbsp; &nbsp;char volatile* p = (char*) pv;</p>
<p> &nbsp; &nbsp;for (;cb != 0; &#8211;cb, ++p) {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;char c = *p;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;*p = c;</p>
<p> &nbsp; &nbsp;}</p>
<p>}</p>
<p>&lt;/pre&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-848483">
				<div id="div-comment-848483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848483">
			July 23, 2010 at 10:12 pm</a>		</div>

		<p>&quot;This idea is fraught with peril, and I fear that my answers to your questions will be interpreted as approval rather than reluctant assistance.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-848493">
				<div id="div-comment-848493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848493">
			July 23, 2010 at 11:10 pm</a>		</div>

		<p>Is there any reason why we can&#39;t use memset rather than memcpy?</p>
<p>Since it&#39;s debug only, setting it to a strange pattern could help debugging odd crashes if someone accesses the buffer while it isn&#39;t owned&#8230;</p>
<div class="post">[<i>memset would not be very nice to in/out buffers which are writable but whose contents are still meaningful. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-848553">
				<div id="div-comment-848553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.net/' rel='external nofollow' class='url'>Igor Levicki</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848553">
			July 24, 2010 at 4:39 pm</a>		</div>

		<p>So Raymond, are you saying that doing:</p>
<p>int some_func(void *p)</p>
<p>{</p>
<p>&nbsp; &nbsp;if (p == NULL) {</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;return E_BADARG;</p>
<p>&nbsp; &nbsp;}</p>
<p>&nbsp; &nbsp;// &#8230; some code &#8230;</p>
<p>&nbsp; &nbsp;return E_OK;</p>
<p>}</p>
<p>Is also a bad idea/practice? Because a lot of people are writing such code, and they are checking the return value from some_func().</p>
<p>True, the above code won&#39;t catch a stray pointer (the one which is not NULL but is invalid anyway), but if you initialize your variables and return proper values on error you should not have such pointers anyway unless your hardware is broken.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-848573">
				<div id="div-comment-848573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">programmer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848573">
			July 25, 2010 at 4:01 am</a>		</div>

		<p>Igor this hardly does any harm but also hardly any good.</p>
<p>Other opinions may differ, but I does not consider this to be worth the extra if.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-848583">
				<div id="div-comment-848583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">avakar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848583">
			July 25, 2010 at 4:36 am</a>		</div>

		<p>So what exactly is the difference between <code>DebugValidateXXXPtr(p, s)</code> and <code>assert(IsBadXXXPtr(p, s))</code>? Doesn&#39;t <code>IsBadXXXPtr</code> touch each byte of the range, just like <code>DebugValidateXXXPtr</code>?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-848593">
				<div id="div-comment-848593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AndyC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848593">
			July 25, 2010 at 5:42 am</a>		</div>

		<p>@avakar, the difference is that IsBadXXXPtr conceals the original exception, wheras DebugValidateXXXPtr crashes instead allowing you to much more clearly debug the problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-848603">
				<div id="div-comment-848603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848603">
			July 25, 2010 at 12:23 pm</a>		</div>

		<p>avakar: Read the original article that Raymond links to. It messes up the guard pages and means things like your program potentially crashing next time a thread needs to extend its stack.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-848653">
				<div id="div-comment-848653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848653">
			July 25, 2010 at 9:45 pm</a>		</div>

		<p>In addition to the problems with memcpy that others have already covered, that usage is not safe if the function is given a write-only pointer. &nbsp;Granted, those are pretty unusual, but for most &quot;output-only&quot; type functions they shouldn&#39;t be illegal, either.</p>
<p>Igor: explicitly validating parameters within the function is ok if it&#39;s part of the function&#39;s contract that it needs to be &quot;safe&quot; when given null data. &nbsp;If it&#39;s unspecified, or specified to only accept good data, then crashing on being given a null is usually (but not always) the better thing to do, since it&#39;s easier to find a crash than it is to find an error code return value, especially if the app ignores it (as many do).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-848833">
				<div id="div-comment-848833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul M. Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-848833">
			July 26, 2010 at 11:17 am</a>		</div>

		<p>@Igor: Miral answered, but I&#39;ll provide an example. I maintain a library of API functions that accept structures of data, some fields of which contain pointers. If a pointer is NULL, I know not to take any action on it, but if the pointer is non-NULL I have to assume that it is valid, and crash otherwise. NULL is a known state, and actionable. Non-NULL has to indicate a valid pointer (leaving out the ugly case of non-NULL flag values).</p>
<p>So, no, testing for NULL is not the same as DebugValidateXXXPtr.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-849013">
				<div id="div-comment-849013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100723-00/?p=13343#comment-849013">
			July 27, 2010 at 1:02 am</a>		</div>

		<p>avakar: IsBadXxxPtr most likely only touches 1 byte per page (4k or 8k), rather than every byte.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>