<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1154653">
				<div id="div-comment-1154653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1154653">
			October 8, 2014 at 8:39 am</a>		</div>

		<p>[If you really must change a standard handle, you&#39;d be best off doing so right at the start]</p>
<p>That&#39;s my model.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1154663">
				<div id="div-comment-1154663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1154663">
			October 8, 2014 at 9:16 am</a>		</div>

		<p>If you ever close a handle, don&#39;t let a separate thread use it. Duplicate the handle for another thread, or synchronize usage and closing carefully.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154673">
				<div id="div-comment-1154673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1154673">
			October 8, 2014 at 10:28 am</a>		</div>

		<p>Unix systems have the dup2() system call, which make one file descriptor a clone of another. So instead of closing, one could open the new target, use dup2() to make the original file descriptor point to it, and close the (now redundant) new file descriptor. I have not checked, but I believe this operation is atomic (taking the file descriptor table lock in the kernel).</p>
<p>I wonder if Win32 has something like that. DuplicateHandle does not seem to allow one to specify the target handle; it seems to always create a new fresh handle, instead of being able to replace an open handle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154683">
				<div id="div-comment-1154683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1154683">
			October 8, 2014 at 10:45 am</a>		</div>

		<p>@Cesar: Why wonder when you can find out? Here&#39;s the _dup, _dup2 page for VS2013: <a href="http://msdn.microsoft.com/en-us/library/8syseb29.aspx" rel="nofollow" target="_new">msdn.microsoft.com/&#8230;/8syseb29.aspx</a> . Yes, it&#39;s part of the VS CRT but that makes sense considering that Win32 isn&#39;t libc.</p>
<div class="post">[<em>dup2 operates on file descriptors, not handles. The CRT emulates file descriptors by having a private table that maps descriptors to handles, so the CRT&#39;s dup2 can just update the private table. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154703">
				<div id="div-comment-1154703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1154703">
			October 8, 2014 at 12:52 pm</a>		</div>

		<p>/me wonders what Cesar thinks SuspendThread is for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154713">
				<div id="div-comment-1154713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1154713">
			October 8, 2014 at 3:04 pm</a>		</div>

		<p>Joshua: Where does SuspendThread enter the picture?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154723">
				<div id="div-comment-1154723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1154723">
			October 8, 2014 at 4:46 pm</a>		</div>

		<p>That&#39;s why I use unicorn handles in all my programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154733">
				<div id="div-comment-1154733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1154733">
			October 8, 2014 at 7:52 pm</a>		</div>

		<p>@Joshua: SuspendThread is for debugging. Unless you know precisely what code is running at that moment within the thread (but in that case, the code itself should wait for whatever event you want), you are asking for trouble (the thread might be holding some resource your code will directly or indirectly need, leading to a deadlock). The MSDN documentation for SuspendThread says the same thing.</p>
<p>But I echo @Gabe: what does SuspendThread have to do with this standard handles discussion?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154783">
				<div id="div-comment-1154783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1154783">
			October 9, 2014 at 7:48 am</a>		</div>

		<p>Cesar: I&#39;ve never written a garbage collector, but if I were to do so, I would use SuspendThread. Although you could argue that a GC is similar to a debugger in its need to walk stacks, inspect the heap, and look at registers.</p>
<div class="post">[<em>If you use SuspendThread, then you would have to use a noncopying collector (and probably a conservative collector) because the thread you interrupted may have already loaded the address of an object, and you therefore can&#39;t move it. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154803">
				<div id="div-comment-1154803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1154803">
			October 9, 2014 at 8:10 am</a>		</div>

		<p>It&#39;s pretty simple actually. By suspending all other threads we can make atomic operations. Be careful. The only safe way to allocate memory in the protected region is VirtualAlloc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154813">
				<div id="div-comment-1154813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1154813">
			October 9, 2014 at 8:21 am</a>		</div>

		<p>@Joshua: First you have to get a list of all other threads in the process. &nbsp;Including ones started between the time you got the list and the time you suspended the thread starting new threads. &nbsp;And threads spawned for signal handling (console control handler). &nbsp;And threads injected remotely. &nbsp;And threads started by libraries you didn&#39;t right, which happen to have taken a lock you need, from a thread you don&#39;t know about.</p>
<p>No, sorry. &nbsp;Suspending other threads is not the right implementation of a critical section.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154823">
				<div id="div-comment-1154823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1154823">
			October 9, 2014 at 8:44 am</a>		</div>

		<p>@Ben Voigt: I had a draft implementation of this. It works by enumerating threads so yes it catches remote-injected threads. The only difficult part it taking the loader lock so that any newly injected threads have to wait.</p>
<p>It&#39;s hard to argue about right implementation when it&#39;s the only possible one since the kernel has no dup2 equivalent and it&#39;s missed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155063">
				<div id="div-comment-1155063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1155063">
			October 10, 2014 at 1:23 pm</a>		</div>

		<p>If I were writing a GC, it would likely either be for an environment like C (where it would have to be very conservative because you never know what might be a pointer into an object), or it would be for a more controlled environment (like managed code).</p>
<p>For a copying collector, there would be times when it is not safe to do a GC. In order to find out if a thread is executing in one of those unsafe zones, I would have to check the thread&#39;s PC or stack to look for known unsafe areas.</p>
<p>If a thread isn&#39;t in a safe zone, I would have to change the return address of the the earliest unsafe zone to redirect to a function that would wait for the GC to be over. Or I suppose maybe I could single-step the thread until it returns to a safe zone. :)</p>
<p>So if I can just tell a thread to wait on an event to signal the end of the GC, I don&#39;t need SuspendThread, right? Well, I need to be able to mess with the thread&#39;s stack or PC in the first place. I don&#39;t want my thread inspector to be in a race with the inspectee. I would need SuspendThread to freeze the thread&#39;s stack in order to tell it to wait on the GC event.</p>
<p>In other words: in a controlled environment I could change a standard handle by freezing all the threads (using return address redirection for any thread currently using the handle), swapping the handle, and then replacing any reference to the old handle with the new one.</p>
<div class="post">[<em>Detecting whether the program counter is in an unsafe zone is hard. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155213">
				<div id="div-comment-1155213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1155213">
			October 10, 2014 at 10:53 pm</a>		</div>

		<p>Is it that hard to determine if an instruction is in an usafe zone?</p>
<p>Since this is a controlled environment, the code generator could easily make a table of all unsafe zones (like it would for exception handlers). When checking a return address on the stack or a program counter, I could look it up in the table to see if it&#39;s unsafe.</p>
<p>I may be naive, as I haven&#39;t actually implemented anything like this, but it seems like a decent solution.</p>
<div class="post">[<em>An instruction is unsafe if, at the start of the instruction, there is a pointer to the heap in any live register. So your table is going to be crazy huge.<br /> BEGIN_UNSAFE ; first parameter is in ecx<br /> sub esp, 4<br /> mov [esp], ecx ; save first parameter<br /> END_UNSAFE<br /> mov ecx, [globalObject]<br /> BEGIN_UNSAFE<br /> call GlobalObject.GetCurrentValue<br /> END_UNSAFE<br /> mov ecx, [esp]; recover first parameter<br /> BEGIN_UNSAFE<br /> mov [ecx], eax<br /> END_UNSAFE<br /> pop ecx<br /> ret<br /> -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155243">
				<div id="div-comment-1155243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1155243">
			October 11, 2014 at 9:40 am</a>		</div>

		<p>[Detecting whether the program counter is in an unsafe zone is hard. -Raymond]</p>
<p>My response: Check if a register equals a stack frame variable that we already know points to an object. My table is a table of stack frames. True this is very slightly conservative on which objects can move or not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155273">
				<div id="div-comment-1155273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1155273">
			October 11, 2014 at 11:40 pm</a>		</div>

		<p>When a heap pointer is in a register that doesn&#39;t make GC unsafe, it simply means that I have to use that register as a GC root. Obviously I would need some table to indicate that.</p>
<p>Actual unsafe zones would be much more rare, like cases where I have a pointer to the inside of an object, or where an object has been allocated but not yet initialized.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155323">
				<div id="div-comment-1155323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1155323">
			October 12, 2014 at 6:48 am</a>		</div>

		<p>@Joshua: What if someone writes something like this?:</p>
<p> &nbsp; &nbsp;void *foo = &amp;something_on_the_heap[5];</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155343">
				<div id="div-comment-1155343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1155343">
			October 12, 2014 at 8:56 am</a>		</div>

		<p>@Gabe: in a controlled environment you could create your own standard handle abstraction, making this whole discussion moot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155353">
				<div id="div-comment-1155353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141008-00/?p=43893#comment-1155353">
			October 12, 2014 at 4:28 pm</a>		</div>

		<p>Kevin: Now that&#39;s what I call paying attention. This generates:</p>
<p> &nbsp; mov eax, [ebx + 5*4]</p>
<p> &nbsp; mov [esp + offset], eax</p>
<p>Guess what the GC does. (Gee nice to have a controlled compiler in kahoots with the GC isn&#39;t it?)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>