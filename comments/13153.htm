<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (34)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-leo-davidson even thread-even depth-1" id="comment-853573">
				<div id="div-comment-853573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853573">
			August 13, 2010 at 7:14 am</a>		</div>

		<p>Can that finalizer even know that sr is a live object? It may have already been finalized and garbage collected.</p>
<p>It&#39;s a while since I used .Net but I remember one of the rules was that finalizers for a class are not allowed to access any managed objects contained in the class for that reason.</p>
<p>IMO, the line in blue should trigger a compiler warning. (Maybe it does already.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853583">
				<div id="div-comment-853583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeroen Pluimers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853583">
			August 13, 2010 at 7:32 am</a>		</div>

		<p>s/tread/thread/</p>
<div class="post">[<i>In this case, I actually did mean &quot;tread&quot;. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853593">
				<div id="div-comment-853593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853593">
			August 13, 2010 at 7:47 am</a>		</div>

		<p>So, in this poorly designed program, is the correct behavior to modify NextLine() like this?</p>
<p>public string NextLine() { string result = sr.ReadLine(); GC.KeepAlive(this); return result; }</p>
<div class="post">[<i>Personally, I would remove the finalizer. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853613">
				<div id="div-comment-853613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen Cleary</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853613">
			August 13, 2010 at 8:15 am</a>		</div>

		<p>@Leo: You&#39;re correct. Adding GC.KeepAlive will only work if AppDomain.IsFinalizingForUnload is false. And stays false throughout the finalizer. Which can&#39;t be checked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853633">
				<div id="div-comment-853633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853633">
			August 13, 2010 at 8:20 am</a>		</div>

		<p>@Zarat: how could the reference still be there if the memory was recollected (compacted and addresses changed) at a previous GC collection (on a lower generation, just some objects freed, not a full GC)? Is there any guaranty that objects that refer each other will be finalized and memory freed at the same GC collection?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853643">
				<div id="div-comment-853643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Stone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853643">
			August 13, 2010 at 8:22 am</a>		</div>

		<p>Fascinating article. &nbsp;Makes me pine for the days of unmanaged code, when it seemed like the rules were at least clear. &nbsp;Then I go back to my unmanaged code base and stop pining pretty quickly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-rob263 even thread-even depth-1" id="comment-853653">
				<div id="div-comment-853653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RobSiklos' rel='external nofollow' class='url'>RobSiklos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853653">
			August 13, 2010 at 8:32 am</a>		</div>

		<p>In order to help squash memory leaks, I have a static MemoryTracker class which keeps weak references to any object which I register to it.</p>
<p>I use finalizers in my objects to tell the MemoryTracker to unregister that object.</p>
<p>At the end of the day, I can query my MemoryTracker and it will give me the list of all registered objects which are still &quot;in memory&quot;.</p>
<p>Would you consider this an appropriate use of finalizers?</p>
<p>P.S. &nbsp;All finalizers are enclosed in &quot;#if (DEBUG)&quot;, so that my release builds don&#39;t get any performance hit from running finalizers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853673">
				<div id="div-comment-853673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen Cleary</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853673">
			August 13, 2010 at 8:45 am</a>		</div>

		<p>@Zarat: Almost the only thing a finalizer can do is p/Invoke a native free-resource function. AppDomain.IsFinalizingForUnload and Environment.HasShutdownStarted only indicate that you&#39;re probably doing something wrong in your finalizer. I can&#39;t think of a single use case for them.</p>
<p>@Rob: That&#39;s not appropriate; sorry. You should not access any managed code from a finalizer (there are only a couple of exceptions to this rule, such as Console).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853683">
				<div id="div-comment-853683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mmmh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853683">
			August 13, 2010 at 8:50 am</a>		</div>

		<p>@Rob263</p>
<p>Why ?</p>
<p>If your objects have references to disposable resources either choose one (if the resource was not already disposed): free the resource (as the guidelines say) or throw/assert to signal the anomaly (Raymond says to throw, I prefer an assert here).</p>
<p>If your objects do not have references to disposable resources, you are debugging the CLR..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853693">
				<div id="div-comment-853693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853693">
			August 13, 2010 at 8:58 am</a>		</div>

		<p>There&#39;s one other good use for GC.KeepAlive(): optimization barrier.</p>
<p>When implementing double checked locking or certain thread-safe datastructures, controlling when local variables get written to class or global variables is a must. To prevent the optimizer from breaking it for me I insert a call to GC.KeepAlive(classvariable) right before classvariable=localvariable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853713">
				<div id="div-comment-853713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Earwicker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853713">
			August 13, 2010 at 9:48 am</a>		</div>

		<p>&quot;If I ruled the world, I would decree that the only thing you can do in a finalizer is perform some tests to ensure that all the associated external resources have already been explicitly released, and if not, raise a fatal exception: System.Exception.Resource Leak.&quot;</p>
<p>Then I say: VOTE FOR RAYMOND!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-rob263 odd alt thread-odd thread-alt depth-1" id="comment-853723">
				<div id="div-comment-853723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RobSiklos' rel='external nofollow' class='url'>RobSiklos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853723">
			August 13, 2010 at 10:07 am</a>		</div>

		<p>@Stephen, @Mmmh: &nbsp;I should note that I&#39;m not using disposable objects or unmanaged resources. &nbsp;I want to know which of my objects aren&#39;t being collected because someone is still referencing them (then I can use windbg to find out who). &nbsp;For instance, objectA subscribes to an event on objectB. &nbsp;Now, objectA can&#39;t be collected until objectB is no longer referenced (or never, if the event is static).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853763">
				<div id="div-comment-853763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853763">
			August 13, 2010 at 10:38 am</a>		</div>

		<p>@Rob263: &nbsp;You might want to consider making your MemoryTracker so that instead of relying on finalizers to unregister objects that it would periodically perform it&#39;s own &#39;garbage collection&#39;. &nbsp;when certain timer intervals have passed (or some other heuristic) and when certain operations are performed on the MemoryTracker (like liating the objects that are still alive), have it go through it&#39;s collection of WeakReferences discarding any that have a Target of NULL (or !IsAlive &#8211; this seems like a situation where the IsAlive property is legitimately useful &#8211; it would allow you to drop known dead WeakReferences without needlessly creating a strong reference to an object that might be just about to be GC&#39;d).</p>
<p>Of course, your MemoryTracker should already be doing at least some of this since finalizers aren&#39;t guaranteed to be called and since MemoryTracker is already dealing with WeakReferences it already has to handle the possibility that Target could be null even if the object weren&#39;t deregistered.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-rob263 odd alt thread-odd thread-alt depth-1" id="comment-853773">
				<div id="div-comment-853773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RobSiklos' rel='external nofollow' class='url'>RobSiklos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853773">
			August 13, 2010 at 10:41 am</a>		</div>

		<p>@mikeb &#8211; yes &#8211; you are 100% correct &#8211; since MemoryTracker already checks IsAlive and drops known dead references, I don&#39;t really need the finalizers at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853813">
				<div id="div-comment-853813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kojiishi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853813">
			August 13, 2010 at 11:40 am</a>		</div>

		<p>This is interesting. I understand objects are eligible to be collected while its method is executed, but I still don&#39;t know why CLR team took such design.</p>
<p>Given that, even if I&#39;m using &quot;using&quot; pattern, GC could collect the object while Dispose() is executing, so I guess &quot;using&quot; isn&#39;t still safe.</p>
<p>But forcing every developer to use GC.KeepAlive() on every last method call in a function doesn&#39;t make a good sense.</p>
<p>Do you have any idea why CLR team took such design? Couldn&#39;t this be changed and make &quot;this&quot; to be a reference?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853823">
				<div id="div-comment-853823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853823">
			August 13, 2010 at 11:45 am</a>		</div>

		<p>@kojiishi</p>
<p>&quot;this&quot; doesn&#39;t have to be left anywhere on the stack, so the GC has no knowledge that &quot;this&quot; may still be in use.</p>
<p>At another note and before I forget, after AppDomain shutdown doesn&#39;t mean the OS will clean up, because you can have more than one AppDomain per process. So if you mess up during shutdown but are using multiple AppDomains you are generating memory leaks ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853843">
				<div id="div-comment-853843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853843">
			August 13, 2010 at 1:12 pm</a>		</div>

		<p>@kojishi</p>
<p>Actually, the using block uses the variable implicitly in the closing brace. If you disassemble you get a normal try/finally so GC.KeepAlive doesn&#39;t make a difference.</p>
<p>If you think hard enough about it you would realize that if this were an issue adding GC.KeepAlive inside the using block wouldn&#39;t help anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853853">
				<div id="div-comment-853853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Trillian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853853">
			August 13, 2010 at 2:35 pm</a>		</div>

		<p>Is there an MSDN article or a part of the CLI specification that says precisely under which circumstances an object is allowed to be reclaimed by the GC? I don&#39;t remember reading that objects can be collected it has references to it, but they are not &quot;active references&quot;. I&#39;ve tried and failed to reproduce a situation where an object is reclaimed while one of its methods is executing. Does that mean that MS&#39;s implementation doesn&#39;t do that but another implementation could, or I&#39;ve just been lucky?</p>
<div class="post">[<i><a href="http://msdn.microsoft.com/en-us/library/aa691138.aspx" rel="nofollow">3.9 Automatic memory management</a>. Clause 2 is the important one here. (And you&#39;ve just been lucky.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853603">
				<div id="div-comment-853603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853603">
			August 13, 2010 at 8:11 am</a>		</div>

		<p>Yes it can have been finalized, but the reference should still be there (as far as I know the GC doesn&#39;t reset references, after all Sample1 is about to be collected too). Also closing a finalized StreamReader is a no-op. So it should work.</p>
<p>Though it is another question if it makes sense. Leo is totally right, the example makes no sense. The (documented) finalizer rule he mentioned says StreamReader must finalize itself and not someone outside. A finalizer disposing another managed object is usually something you don&#39;t want to do (StreamReader.Close is an alias for its IDisposable.Dispose implementation).</p>
<p>IMHO GC.KeepAlive should only ever be used by the object containing the finalizer. Since the object knows what its finalizer does it also knows what methods need to protect an object from being collected before the method finishes. The alternative is having *every* caller doing GC.KeepAlive, which is plain stupid and something you don&#39;t want to rely on.</p>
<p>And on a last note, writing proper finalizers where it matters (ie. for unmanaged objects/resources) is *hard* because of one thing: Application shutdown. During shutdown everything is collected at once, meaning all finalizers run in random order and you can&#39;t rely on any managed classes anymore. During runtime you can control finalizing order by having GCRoots or static references, but during shutdown there&#39;s nothing you can do if finalizing order matters for the unmanaged resource. In WinForms there&#39;s at least an event for shutdown, but thats just WinForms and not generally available. So the ugly hack I&#39;m doing is to check in every finalizer if the AppDomain is shutting down (Environment.HasShutdownStarted) and if so just do nothing and hope the OS cleans up better than I can. I wished Microsoft had separated runtime GC and shutdown GC better, but I suppose its too late now :(</p>
<p>@Jason: Yes it is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joe_woodbury odd alt thread-odd thread-alt depth-1" id="comment-853873">
				<div id="div-comment-853873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/JoeWoodbury' rel='external nofollow' class='url'>JoeWoodbury</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853873">
			August 13, 2010 at 3:14 pm</a>		</div>

		<p>I like Raymond&#39;s suggestion of the finalizer throwing an exception if it has to actually do something. I have a .NET assembly that references an unmanaged DLL. Odds are a managed code thread is in a wait in the unmanaged code. Using IDisposible, I can tear the whole thing down very gracefully. I&#39;m not so confident I have the finalizer right, though my tests haven&#39;t exposed a problem. I did add a section to the documentation in big red letters that this object should be used in an using statement or other explicitly Disposed when no longer needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853883">
				<div id="div-comment-853883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853883">
			August 13, 2010 at 4:45 pm</a>		</div>

		<p>I, for one, welcome our old new backwards compatible overlord!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853803">
				<div id="div-comment-853803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853803">
			August 13, 2010 at 11:03 am</a>		</div>

		<p>@Mihai</p>
<p>The address can&#39;t change during compaction without the references being updated or nulled, otherwise you&#39;d have created a giant security hole when the (badly written) finalizer tries to access the reference which points to an invalid location. I fully agree with you that there is no guarantee that managed references are not nulled, in my first post I just said that in my observations it doesn&#39;t happen with the current GC. Of course this is an implementation detail and may change anytime.</p>
<p>@Stephen</p>
<p>Except for shutdown it is perfectly valid to do more than P/Invoke in finalizers. The WinForms library does it a lot. What you have to do is to guarantee that the references you care about are not already collected. To do this you create a GCRoot or put them in a static collection. This effectively creates a strict order on finalizers, because objects I&#39;ve put in a static collection are *guaranteed* to not be collected. So in my finalizer I can do anything I want with them, then remove them from the static collection, enabling them for GC in the next cycle.</p>
<p>Such ordered finalizing is not just theory, it is very important whenever you have a hierarchic structure of managed resources and must ensure the children are released before the parents. In some native APIs, after you released the parent, the children will become invalid too, but your managed classes don&#39;t know about it, and trying to finalize the children after the parent will crash, or worse, release something unrelated which happens to use the same unmanaged resource slot/pointer/handle.</p>
<p>I don&#39;t remember exactly where I&#39;ve seen it in WinForms, but I think it was related to HWNDs and/or callbacks. One place where it definitely is required to finalzie in-order is the native API to read type libraries (TLBs) because once you release the root COM interface it automatically releases all interfaces describing TLB content. Yes this violates the COM rules but that&#39;s no reason to leak (or crash if you try to cleanup properly in a finalizer when the child was auto-released).</p>
<p>The point where this all stops to work is shutdown. Suddenly all static collections and GCRoots are collectible too, so no more ordering of finalizers. For the typelib API it will finalize in random order and usually crash because there&#39;s a high chance that the root interface is finalized somewhere in between its children. For WinForms this shutdown problem is why they have the Application.ApplicationExit event, allowing to properly cleanup *before* shutdown comes with it madness of finalizer calls. This works only because the usual WinForms pattern is to start the Application in Main() and let it take over, so it knows once the top level Application.Run() returns it should better have cleaned up. But you don&#39;t have that in the general case, and if you write a library you don&#39;t have any shutdown notification and can&#39;t do much more than skip finalizers during shutdown by checking Environment.HasShutdownStarted</p>
<p>Bleh this was a long explanation :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853893">
				<div id="div-comment-853893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">klhuillier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853893">
			August 13, 2010 at 6:46 pm</a>		</div>

		<p>This does not seem like appropriate behavior for a garbage collector. I tried it out in both .NET 3 and Java 6, and neither the CLR nor the JVM would finalize the object while a thread is using a method of that object. They would finalize an object if there is no local variable reference in scope. Perhaps my test code was flawed?</p>
<p>One reason why this would be inappropriate is if an object becomes a candidate for finalization, so might some of its referenced fields. This could leave the method that is currently running in a state where it will invoke methods on finalized objects. Furthermore, if the object&#39;s own finalizer disposes of its fields, the method will be stuck with an invalid state.</p>
<p>I hope this was never the garbage collector&#39;s behavior in .NET, but it sounds like it was. Yet another reason to avoid finalizers (except in the cases of native code where the managed runtime can&#39;t clean up, in which case tread carefully).</p>
<div class="post">[<i>Try this program:</i></p>
<pre>class Program {
  public static void Main()
  {
     Program p = new Program();
     p.GCMe();
  }
  public void GCMe()
  {
     System.GC.Collect();
     System.Threading.Thread.Sleep(1000);
     System.Console.WriteLine(&quot;returning from GCMe&quot;);
  }
  ~Program()
  {
     System.Console.WriteLine(&quot;finalized&quot;);
  }
}
</pre>
<p><i>This prints<br />
finalized<br />
returning from GCMe<br />
showing that the object was finalized while the GCMe method was still running. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853903">
				<div id="div-comment-853903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Angstrom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853903">
			August 13, 2010 at 8:58 pm</a>		</div>

		<p>I&#39;m impressed at the number of people who have misinterpreted what can happen to &#39;this&#39; during method evaluation.</p>
<p>If your method (or your caller, or any other reachable object) might use &#39;this&#39;, either explicitly or implicitly, then &#39;this&#39; cannot be collected.</p>
<p>This means that klhuillier&#39;s comment that &quot;One reason why this would be inappropriate is if an object becomes a candidate for finalization, so might some of its referenced fields. This could leave the method that is currently running in a state where it will invoke methods on finalized objects.&quot; is false, because if your method might access those fields, then it needs &#39;this&#39; around at least until it accesses the field, preventing the referrent of &#39;this&#39; from being collected. Similarly, kojiishi&#39;s remark that &quot;Given that, even if I&#39;m using &quot;using&quot; pattern, GC could collect the object while Dispose() is executing, so I guess &quot;using&quot; isn&#39;t still safe.&quot; &#8212; as Joshua points out, the using statement&#39;s closing brace also implicitly refers to the IDisposable you&#39;re &quot;using&quot; against, and the .Dispose() method is subject to the same reachability rules that prevent &quot;this&quot; from being collected before you&#39;ve read all the fields you&#39;re going to read.</p>
<p>In short, *stop worrying*, people. The GC is not going to yank the rug out from under you, ever, unless you ask it to by writing a finalizer (which may run at a surprising time) or use a weak reference (which can be cleared at any time).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853913">
				<div id="div-comment-853913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853913">
			August 14, 2010 at 9:19 am</a>		</div>

		<p>&quot;The garbage collector is a rogue thread that closes the thread at a bad time.&quot;</p>
<p>My guess is that the thread closes the *file* at a bad time.</p>
<p>Anyway, why&#39;s everybody hatin&#39; on finalizers? Like &quot;unsafe&quot; and &quot;volatile&quot;, finalizers are parts of the language you don&#39;t use unless you know you need to. But when you need them, you&#39;re glad that they&#39;re there. Odds are that&#39;s the only way to know when you need to flush an output buffer or rollback an abandoned transaction.</p>
<div class="post">[<i>I meant &quot;closes the stream at a bad time.&quot; Fixed, thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853943">
				<div id="div-comment-853943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Oldwood</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-853943">
			August 14, 2010 at 4:36 pm</a>		</div>

		<p>I ran into the issue of an object being finalized whilst another thread was executing a method on it a few months back and found an excellent article called &quot;Lifetime, GC.KeepAlive, handle recycling&quot; by Chris Brumme [<a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/cbrumme/archive/2003/04/19/51365.aspx" rel="nofollow">blogs.msdn.com/&#8230;/51365.aspx</a>].</p>
<p>FWIW Here is my blog post on the issue &#8211; <a rel="nofollow" target="_new" href="http://chrisoldwood.blogspot.com/2010/04/object-finalized-whilst-invoking-method.html" rel="nofollow">chrisoldwood.blogspot.com/&#8230;/object-finalized-whilst-invoking-method.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-854113">
				<div id="div-comment-854113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">klhuillier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-854113">
			August 16, 2010 at 1:27 pm</a>		</div>

		<p>Raymond,</p>
<p>Thanks for the example. That was similar to what I tried. Your program didn&#39;t work for me either. Every time I get &quot;returning from GCMe&quot; before &quot;finalized&quot;. I tried several different build configurations as well.</p>
<p>Angstrom wrote:</p>
<p>&quot;[&#8230;] if your method might access those fields, then it needs &#39;this&#39; around at least until it accesses the field, preventing the referrent of &#39;this&#39; from being collected.&quot;</p>
<p>Ah, that is an excellent point. I forgot to consider that all objects referenced by a local variable are considered root objects.</p>
<div class="post">[<i>The fact that you wrote &quot;build configurations&quot; tells me you&#39;re running it from inside Visual Studio. Remember, the GC changes its behavior when run under a debugger. Do it from the command line. &quot;%windir%Microsoft.NETFrameworkv3.5csc Program.cs&quot; and then &quot;Program.exe&quot;. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-854123">
				<div id="div-comment-854123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">klhuillier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-854123">
			August 16, 2010 at 2:32 pm</a>		</div>

		<p>Raymond,</p>
<p>You are correct, I was using Visual Studio. Running it from the command-line worked as described. Thank you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-854213">
				<div id="div-comment-854213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-854213">
			August 17, 2010 at 6:52 am</a>		</div>

		<p>So the &#39;this&#39; reference isn&#39;t treated as a GC root? That seems absolutely crazy.</p>
<div class="post">[<i>That&#39;s because <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/08/09/10047586.aspx" rel="nofollow">you&#39;re thinking about garbage collection the wrong way</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-854543">
				<div id="div-comment-854543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-854543">
			August 18, 2010 at 1:27 am</a>		</div>

		<p>No I&#39;m not &#8211; briefly accepting your &quot;simulating a computer with an infinite amount of memory&quot; definition of GC, if the user can observe a situation where memory that they were using has dispappeared due to it being collected, then the simulation of infinite memory has failed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-854553">
				<div id="div-comment-854553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mmmh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-854553">
			August 18, 2010 at 2:10 am</a>		</div>

		<p>@Joe</p>
<p>If your code never refers to this, you are not using the memory and thus it can be collected, even if you are in an instance method.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-854563">
				<div id="div-comment-854563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-854563">
			August 18, 2010 at 4:38 am</a>		</div>

		<p>If you&#39;re in an instance method, the code does refer to this. It&#39;s analagous to the as-if rule for C++ optimization &#8211; if you can tell that the optimization has happened, then the optimizer made a mistake. Likewise, if you can ever access a reference to an object that has been collected, the GC is buggy.</p>
<p>Of course, it&#39;s arguable that the bug is actually the decision to provide finalizers at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-854573">
				<div id="div-comment-854573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mmmh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-854573">
			August 18, 2010 at 6:58 am</a>		</div>

		<p>@Joe</p>
<blockquote><p>
  &gt; If you&#39;re in an instance method, the code does refer to this.
</p></blockquote>
<p>Absolutely not.</p>
<p>int Sum(int x, int y)</p>
<p>{</p>
<p>&nbsp;return x + y;</p>
<p>}</p>
<p>does not of course refer to this, even if it&#39;s an instance method. You need this to be valid to call it, but there is no side effect in reclaiming the memory during its execution (in fact in other languages &#8211; like C++ &#8211; you can call it without a valid this pointer! but it&#39;s an implementation detail I think).</p>
<p>Even if your code uses a couple of members, it may still be considered not referencing this.</p>
<p>For example</p>
<p>int Sum(int x, int y)</p>
<p>{</p>
<p>&nbsp;return x + y + m_SomeReferenceType.GetSomeValueSomewhere();</p>
<p>}</p>
<p>could safely reclaim this memory, provided m_SomeReferenceType is not collected in the process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-855433">
				<div id="div-comment-855433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100813-00/?p=13153#comment-855433">
			August 20, 2010 at 6:56 am</a>		</div>

		<p>@Mmmh: If the GC can deduce that the instance method doesn&#39;t actually uae the &#39;this&#39; reference, of course it can collect it &#8211; that&#39;s the &quot;as if&quot; optimization rule. In a similar fashion, the GC can treat a local variable as not being a GC root if it can deduce that the variable will never be accessed again.</p>
<p>Raymond&#39;s example demonstrates a bug in the CLR&#39;s GC &#8211; or a bug in the relevant language specifications depending on your point of view &#8211; because legal well defined code can access memory that the garbage collector has incorrectly determined is inaccessible.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>