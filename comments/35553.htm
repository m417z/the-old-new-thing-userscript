<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-277393">
				<div id="div-comment-277393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050524-48/?p=35553#comment-277393">
			May 24, 2005 at 11:32 am</a>		</div>

		<p>IMO the RPN string is completely useless.  Just make a truth table for what you want and forget about the operation required.</p>
<p>I #define a long list of ROP3_33, ROP3_8C, etc. so I can just use the number straight out of the truth table as well.  (I also write the table sideways so it&#8217;s easier to read that way&#8230;)</p>
<p>Same deal for binary raster ops.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-277433">
				<div id="div-comment-277433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050524-48/?p=35553#comment-277433">
			May 24, 2005 at 1:55 pm</a>		</div>

		<p>I agree.  The whole discussion about RPN really just obfuscates the whole thing.  The first time I tried to find some non-standard rop I wasted a huge amount of time coming up with RPN forms and alternatives and trying to match them to the table.  Just going by the truth table is much simpler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-277443">
				<div id="div-comment-277443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sergey Vlasov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050524-48/?p=35553#comment-277443">
			May 24, 2005 at 2:01 pm</a>		</div>

		<p>I have found an old book &quot;Writing Windows device drivers&quot; by Daniel Norton, and was surprised to see that even the raster operation codes are not unique.  E.g., the &quot;DPSoo&quot; you give as an example is encoded as 0x02a9 (this gives the 0x00FE02A9 value in the MSDN table), but if represented as &quot;DSPoo&quot;, the same operation can be encoded as 0x02a6, or as 0x2a0 (&quot;SPDoo&quot;), or even as 0x02a5 (&quot;PDSoo&quot;)&#8230;</p>
<p>Probably there was some ordering between the alternative representations which gave the rule to choose one from them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-277463">
				<div id="div-comment-277463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.mercuryframeworks.com' rel='external nofollow' class='url'>E. Massey</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050524-48/?p=35553#comment-277463">
			May 24, 2005 at 3:09 pm</a>		</div>

		<p>The ROP codes have always been a bit &quot;mysterious&quot; since there&#8217;s little detailed documentation about them.  However, there used to be a MS knowledge base article titled &quot;The Lower Order Word of 32-Bit ROP Codes&quot; (Q74508) that explained the ROP codes in detail.</p>
<p>I can&#8217;t find it online, but it&#8217;s part of the MSDN that came with VC++ 6.0.</p>
<p>Some key points from this article:</p>
<p>&#8230;only the higher-order word or most-significant word (MSW) of the 32-bit ROP code is explained. This word is an index in the ROP table. The use of the lower-order word or least-significant word (LSW) of the ROP code is not addressed in the Windows Device Development Kit (DDK). </p>
<p>The LSW of the ROP code may be used by display drivers to assist in parsing the ROP. A complete explanation of the LSW of the ROP code can be found in the file COMMENT.BLT, which is included with the DDK display driver sample source code.</p>
<p>&#8230;</p>
<p>The low-order word in and of itself does not contain enough information to generate the ROP code. What it contains is: </p>
<p>1.  An index specifying which predefined parse sting to use.</p>
<p>2. Amount to rotate the parse string.</p>
<p>3. Five logic operations.</p>
<p>4.  A parity bit used to imply a sixth logic operation of NOT. Pairs of trailing NOTs are discarded since they cancel. </p>
<p>&lt;pre&gt;</p>
<p>Example 1: 85, 0085 1E05, PDSPnoaxn,<br />
<br />           D = not ((((not P) or S) and D) xor P)</p>
<p>1E08 = 00 01 11 10 00 0 001 01<br />
<br />       |  |  |  |  |  |  |  |<br />
<br />       |  |  |  |  |  |  |  |___ bias start by 1<br />
<br />       |  |  |  |  |  |  |______ use string 1<br />
<br />       |  |  |  |  |  |_________ parity &#8211; no trailing NOT<br />
<br />       |  |  |  |  |____________ Logic operation #1 is a NOT<br />
<br />       |  |  |  |_______________ Logic operation #2 is a OR<br />
<br />       |  |  |__________________ Logic operation #3 is a AND<br />
<br />       |  |_____________________ Logic operation #4 is a XOR<br />
<br />       |________________________ Logic operation #5 is a NOT</p>
<p>String #1 is defined as:      SPDSPDSP</p>
<p>After the bias, it will be:   PDSPDSPS</p>
<p>&lt;/pre&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-277483">
				<div id="div-comment-277483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050524-48/?p=35553#comment-277483">
			May 24, 2005 at 4:10 pm</a>		</div>

		<p>Feng Yuan does a very detailed job describing the ROP code format in his Windows Graphics Programming book (among other things). I made an interactive ROP code truth table (javascript required) a while ago <a rel="nofollow" target="_new" href="http://www.kkow.net/etep/docs/rop.html" rel="nofollow">http://www.kkow.net/etep/docs/rop.html</a> because looking up a ROP code in that MSDN table is really annoying and impossible to do in under a minute.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-277593">
				<div id="div-comment-277593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://tommycarlier.blogspot.com' rel='external nofollow' class='url'>Tommy Carlier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050524-48/?p=35553#comment-277593">
			May 25, 2005 at 1:35 am</a>		</div>

		<p>I know how to use ternary raster operations, but I don&#8217;t think I know a situation where to use them. Could you give me some PRACTICAL examples or situations that use ternary raster operations?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nickfitz even thread-even depth-1" id="comment-277623">
				<div id="div-comment-277623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NickFitz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050524-48/?p=35553#comment-277623">
			May 25, 2005 at 3:49 am</a>		</div>

		<p>@Tommy Carlier:</p>
<p>An example from my days as a games programmer:</p>
<p>Suppose a 32 bit word in display memory has value 0x12345678 where a pixel is 4 bits in size (16 colours was a lot in those days&#8230;) and you want to place part of a space invader on it without disturbing the parts of the background outside the invader. Assume that the invader word has value 0x00009876. Further asssume that you have a mask word corresponding to the visible pixels of the invader: 0x0000ffff.</p>
<p>You can now get your piece of invader on the screen using</p>
<p>screen AND (NOT mask) OR invader:</p>
<p>0x12345678 (screen) AND<br />
<br />0xffff0000 (NOT mask) OR<br />
<br />0x00009876 (beastie)</p>
<p>gives</p>
<p>0x12349876</p>
<p>Do that for a matrix of words on the screen and you have a menacing monster over a pretty background the graphics boys drew for you. If you want, you can extend the mask by one pixel around the sides of the monster, which gives it a black outline, helping it to stand out against the background. (The mask can also be used for collision detection, but that&#8217;s another story.)</p>
<p>Just one example from the halcyon days of the &#8217;80s :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-277643">
				<div id="div-comment-277643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://tommycarlier.blogspot.com' rel='external nofollow' class='url'>Tommy Carlier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050524-48/?p=35553#comment-277643">
			May 25, 2005 at 6:10 am</a>		</div>

		<p>@NickFitz:<br />
<br />That was a very practical example, thanks!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-277653">
				<div id="div-comment-277653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050524-48/?p=35553#comment-277653">
			May 25, 2005 at 6:37 am</a>		</div>

		<p>I seem to remember reading (possibly even in this blog) that the GDI would dynamically generate machine code for specific blitter operations rather than using slow generic code to handle them all. At a guess, the low word of the ROP would be used to drive that code generator. For operations that can be performed by a hardware blitter (which is probably all of them with current hardware) it&#8217;s presumably useless.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>