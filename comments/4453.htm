<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1054423">
				<div id="div-comment-1054423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130506-00/?p=4453#comment-1054423">
			May 6, 2013 at 7:09 am</a>		</div>

		<p>I&#39;m not really knowledgeable about the subjects, but the answer is obviously &quot;for compatibility&quot;.</p>
<p>Maybe some programs used to hard-code the bit-mask they wanted and set that directly, instead of going the &quot;get current &#8211; modify &#8211; set&quot; routine displayed here. That means whenever a previously unknown flag was added, those programs would accidentally disable them.</p>
<p>Do these flags get reset to default when the process quits or do they stick to the console window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-odd thread-alt depth-1" id="comment-1054433">
				<div id="div-comment-1054433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130506-00/?p=4453#comment-1054433">
			May 6, 2013 at 7:11 am</a>		</div>

		<p>[ Discuss why there is the crazy ENABLE_EXTENDED_FLAGS flag. ]</p>
<p>Probably some previous Windows version just used the first N bits of the DWORD for actual flags, leaving the rest unused. Those &quot;free&quot; bits were left garbage or even used as free storage by some crazy application, and to avoid breaking them you have the ENABLE_EXTENDED_FLAGS to keep the &quot;official&quot; usage of those bits as opt-in, without altering the crazy games those legacy apps played with them.</p>
<p>Still, I&#39;m not really sure about this explaination, since SetConsoleMode is a relatively obscure API (as all console APIs, I&#39;d say), so it seems too far fetched that applications &quot;cleverly&quot; exploited those &quot;free bits&quot;.</p>
<p>As for other solutions, the WM folks would have solved the problem with a SetConsoleModeEx function (as in window styles/extended windows styles); the GDI team, instead, would have opted for ExtSetConsoleMode. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1054513">
				<div id="div-comment-1054513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Dunn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130506-00/?p=4453#comment-1054513">
			May 6, 2013 at 8:37 am</a>		</div>

		<p>The answer to &quot;Why does Windows do this thing in such a weird way?&quot; is usually &quot;Because doing it the obvious way would have broken some program.&quot;</p>
<p>Nothing is too obscure to be abused. &nbsp;If there are some free bits lying around, some programmer will use them. &nbsp;I can&#39;t find the blog post now, but I remember that Raymond once said that the Explorer team couldn&#39;t use the item data field in a header control because some shell extension was already using it to keep its own data.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes odd alt thread-odd thread-alt depth-1" id="comment-1054543">
				<div id="div-comment-1054543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130506-00/?p=4453#comment-1054543">
			May 6, 2013 at 1:57 pm</a>		</div>

		<p>I can speculate on the reason, but I believe that Matteo Italia already beat me to the punch. Based on his speculation regarding old apps that used those bits for their own strange purposes, he suggests creating a new function with extended capabilities to achieve this.</p>
<p>An alternative approach would be to create an application compatibility shim that emulates the old behavior and enable it for the applications in question. Any new development can happily ignore that this was ever an issue.</p>
<p>Given that my understanding of Windows compatibility is not quite up to your level, Raymond, how would you do it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1054483">
				<div id="div-comment-1054483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130506-00/?p=4453#comment-1054483">
			May 6, 2013 at 7:52 am</a>		</div>

		<p>The ENABLE_INSERT_MODE and ENABLE_QUICK_EDIT_MODE flags were introduced in a later version of Windows, where all other flags were already specified and applications were already setting the console mode with an OR&#39;ed mask (*_INPUT | *_INPUT | &#8230;).</p>
<p>Existing applications would have annoying behavior if they enabled or disabled these modes when that was not the original intention. Note that even the suffix on the names are different.</p>
<p>What I can&#39;t explain is why the quick-edit mode takes precedence on enabling mouse input. We&#39;re talking about Win32 native console applications, not an old DOS application that uses the mouse. But I reckon this is an issue where you just can&#39;t please everyone, and where &quot;Yet Another Checkbox&quot;â„¢ that asks the user what prevails if both flags are set would seem really confusing and/or stupid to almost everyone.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1054553">
				<div id="div-comment-1054553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130506-00/?p=4453#comment-1054553">
			May 6, 2013 at 6:30 pm</a>		</div>

		<p>Gotch&#39;ya Ray!! You did what you chanted for years =&gt; &quot;Do not overwrite user settings with your superawesomemegaextra program&quot;. Now, why you overwrite user settings regarding Quick Mode? Maybe he wants to use the mouse in Quick Edit mode on all his console programs and is your burden to give him mouse support without messing with it. How do I do it? Well, I&#39;m a big fan of hooks, but there are other ways as well. Anyway, I expect that star!!!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1054563">
				<div id="div-comment-1054563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130506-00/?p=4453#comment-1054563">
			May 6, 2013 at 7:46 pm</a>		</div>

		<p>@Danny:</p>
<p>In this case, it would be fine because it makes sense. It is the same sort of tale as games choosing to change the screen resolution, which was especially important back in the day when 256 color and specific resolutions were pretty much hammered into place due to game code generally not having the leeway to be flexible, assuming that a customers computer was even able to use 16-bit or 24-bit color. For games, it makes no sense to ask the user &#39;hey, please change your settings to mode X with Y colours at Z hertz refresh rate&#39;.</p>
<p>Anyhow, back to the point. The user runs an application, and that application would appear to be designed to be controlled with a mouse. Ignoring the fact that it is odd to have a strongly mouse-driven application in a console window, it is completely weird for an application to be signaling &#39;click me&#39; and the user is unable to do that. They&#39;ll think the application is broken, maybe not even remembering that they have the Quick Edit setting turned on. Additionally, in those mouse-driven console applications where Quick Edit is indeed turned on, there is often a fair bit User Interface chrome (I&#39;m thinking Q(uick)Basic-style interfaces atm). This is generally not of a very copy-pastable nature and work counter-intuitive to what a user expects.</p>
<p>My only real curiousity is about the way the console window behaves with regards to an application shutting down. Does it return the settings to what they were? (I am pretty sure modern Windows versions have started to babysit old games / buggy applications that (used to) wreck the screen resolution to try and help prevent it from happening.) The console window and setting is a shared resource, so it might make sense for it to stick around, but it also makes no sense to expect applications to be baby-sitting their console window flags every time they launch another application. Whatever the implementation is, I suspect it is similar to what happens to have been the first public implementation&#8230; backwards compatibility and all. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1054603">
				<div id="div-comment-1054603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cmv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130506-00/?p=4453#comment-1054603">
			May 7, 2013 at 5:15 am</a>		</div>

		<p>Maybe, in some past version of Windows, it went something like: bits 0-9 are flags, bit 10 is reserved, bits 11-31 are unused. So developers used bits 12-31 for their own purposes and the reserved bit turned into ENABLE_EXTENDED_FLAGS. Of course this relies on developers not also stomping on the reserved bit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1054613">
				<div id="div-comment-1054613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130506-00/?p=4453#comment-1054613">
			May 7, 2013 at 6:27 am</a>		</div>

		<p>AC has the most plausible explanation of the problem. &nbsp;The console team could have:</p>
<p>a) Added a new Ex function (as suggested above).</p>
<p>b) Implemented option a) as a macro that calls SetConsole(hConsoleHandle, (dwMode) | ENABLE_EXTENDED_FLAGS).</p>
<p>c) Added explicit DISABLE_QUICK_EDIT_MODE and DISABLE_INSERT_MODE flags. &nbsp;This could get quite confusing.</p>
<p>d) Based the behaviour of the function on the subsystem version number in the executable&#39;s header. &nbsp;This breaks library code, but it still happens:</p>
<p><a rel="nofollow" target="_new" href="http://connect.microsoft.com/VisualStudio/feedback/details/753224/regression-getsystemmetrics-delivers-different-values" rel="nofollow">connect.microsoft.com/&#8230;/regression-getsystemmetrics-delivers-different-values</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1054633">
				<div id="div-comment-1054633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130506-00/?p=4453#comment-1054633">
			May 7, 2013 at 7:14 am</a>		</div>

		<p>To &quot;do the same thing another way&quot; &#8211; add a bitmask field, that tells the API which bits are actually to be considered valid in the bitset field. &nbsp;Old software wouldn&#39;t use the new API, new ones would explicitly say which bits were being twiddled.</p>
<div class="post">[<em>That&#39;s what I had in mind. That way we won&#39;t have to add a <code>ENABLE_MORE_EXTENDED_FLAGS</code> in the future. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1054833">
				<div id="div-comment-1054833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130506-00/?p=4453#comment-1054833">
			May 7, 2013 at 10:48 am</a>		</div>

		<blockquote><p>
  &gt; you also have to pass the ENABLE_EXTENDED_FLAGS flag. (You can guess how I discovered this.)
</p></blockquote>
<p>Is the answer to this something more clever than carefully reading the MSDN docs or looking in the source?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1055053">
				<div id="div-comment-1055053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130506-00/?p=4453#comment-1055053">
			May 8, 2013 at 4:03 am</a>		</div>

		<p>@Raymond, I&#39;m with mikeb.</p>
<p>Also, how is it you won&#39;t need a ENABLE_MORE_EXTENDED_FLAGS? Right now, there&#39;s already the undocumented (thus also unexpected) ENABLE_AUTO_POSITION.</p>
<p>Whatever the answer, it deserves a place in the remarks of SetConsoleMode&#39;s documentation.</p>
<p>GetConsoleMode&#39;s documentation doesn&#39;t say anything about returning ENABLE_EXTENDED_FLAGS in its result, which makes the kludge one-way.</p>
<p>Wouldn&#39;t it make more sense to say &quot;any other flags are undefined and reserved for future use&quot;, or to just have a *ConsoleModeEx?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>