<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-586293">
				<div id="div-comment-586293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586293">
			January 7, 2008 at 10:16 am</a>		</div>

		<p>So why does CloseHandle() bother to have a return value? &nbsp;It sounds like the only failure it can ever encounter is an invalid parameter, so either the object will be successfully closed or you passed an invalid parameter. &nbsp;Either way, there is no further action for your program to take.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586313">
				<div id="div-comment-586313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586313">
			January 7, 2008 at 10:37 am</a>		</div>

		<p>@john: Debugging? So that you can tell from traces/logs that you&#8217;re doing the wrong thing sometimes?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586323">
				<div id="div-comment-586323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Lyon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586323">
			January 7, 2008 at 11:11 am</a>		</div>

		<blockquote><p>
  So why does CloseHandle() bother to have a return value?
</p></blockquote>
<p>To let you know that you the programmer screwed up, and give you a chance to fix it before it bites your customers.</p>
<p>So what should your program do when it gets an error from CloseHandle? Log the error and die. Die suddenly, horribly, without any opportunity to save files or cleanup. This will force you to fix it.</p>
<p>If you ship code that receives errors from CloseHandle(), occasionally you&#8217;ll pass it a handle that has been reassigned to some other component in your process, and you&#8217;ll be in the boat of trying to diagnose random failures. (&quot;The framistat function got an InvalidHandle error, but I can see that it successfully opened the handle only 2 lines of code earlier.&quot;)</p>
<p>&#8212; jimbo</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586343">
				<div id="div-comment-586343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586343">
			January 7, 2008 at 12:22 pm</a>		</div>

		<p>&quot;The fclose() function does not handle NULL arguments; they will result in a segmentation violation. &nbsp;This is intentional &#8211; it makes it easier to make sure programs written under FreeBSD are bug free. &nbsp;This behaviour is an implementation detail, and programs should not rely upon it.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586353">
				<div id="div-comment-586353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Inode Jones</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586353">
			January 7, 2008 at 12:30 pm</a>		</div>

		<p>fclose() and UNIX close() return error codes because errors may indeed otherwise go undetected.</p>
<p>On Unix, an NFS client is permitted to cache write data locally. &nbsp;It must force that data out to the server when the file is closed, and guarantee to the caller that the data has been written successfully. &nbsp;If the server crashes, or gets a disk full, etc. then close() will fail.</p>
<p>If close() fails, there&#8217;s not much you can do with THAT handle, but if the data you wrote is still available you can at least inform the user that the document save failed, and ask for an alternate path to save to, hopefully to a local disk that will work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586363">
				<div id="div-comment-586363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jeffcode.blogspot.com' rel='external nofollow' class='url'>jeffdav</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586363">
			January 7, 2008 at 12:32 pm</a>		</div>

		<p>Yes, for debugging. &nbsp;In fact, I&#8217;m a believer in ASSERTing that these types of functions succeed so you know right away if you have a bug.</p>
<p>if (SUCCEEDED(OpenSomething(&amp;thing)))</p>
<p>{</p>
<p>&nbsp; &nbsp;&#8230; your code here &#8230;</p>
<p>&nbsp; &nbsp;SHOULD_NOT_FAIL_HR(CloseSomething(&amp;thing));</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586443">
				<div id="div-comment-586443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586443">
			January 7, 2008 at 2:38 pm</a>		</div>

		<p>@John, it needs a return value so you know to tear down the application&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-xepol odd alt thread-odd thread-alt depth-1" id="comment-586453">
				<div id="div-comment-586453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Xepol' rel='external nofollow' class='url'>Xepol</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586453">
			January 7, 2008 at 3:05 pm</a>		</div>

		<p>Ever seen a Delphi app throw an exception in a form&#8217;s OnClose method? &nbsp;The form never closes, the app can&#8217;t close and you have to force it down.</p>
<p>Seriously annoying and agrevating and a PERFECT example of trying to how trying to handle errors on cleanup can cause more problems than it solves.</p>
<p>JGSoft&#8217;s EditpadPro suffers from this problem &#8211; it tries to write to the registry when it closes, if it fails, the form will never go away. &nbsp;Just to make everything extra helpful, they catch the exception at the root application level and supress reporting, so you have no clue why your editor will not go away unless you know that it is written in Delphi and a lot about how Delphi works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-586483">
				<div id="div-comment-586483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586483">
			January 7, 2008 at 3:15 pm</a>		</div>

		<p>So suppose you open a file that&#8217;s on a network drive and cache the handle&#8230;</p>
<p>And then sometime after your last WriteFile(&#8230;) the network drops out&#8230;</p>
<p>Will CloseHandle() return an error? &nbsp;I sure hope so.</p>
<p>Q: How do you clean up from a failed clean-up?</p>
<p>A: Well, how do you clean up from a failed anything else? &nbsp;On debug builds, you can ASSERT. &nbsp;If you have a log available, you can log (unless the failure breaks logging.) &nbsp;If you have UI you can present the failure to the user. &nbsp;If you&#8217;re a running test case you can fail the test case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586493">
				<div id="div-comment-586493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.virtualdub.org/' rel='external nofollow' class='url'>Phaeron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586493">
			January 7, 2008 at 3:31 pm</a>		</div>

		<p>To expand on Inode Jones&#8217; point, the return value of fclose() should absolutely be checked and handled when writing a file &#8212; even when writing to a local drive. fclose() does an implicit flush on the stream buffer and if the final write fails, such as due to insufficient disk space, an error code will result. Ignoring the return code and terminating the application are not good ways to handle this.</p>
<p>CloseHandle() might be a bit less likely to fail here, as the OS has already seen all writes from the application by that point, but it couldn&#8217;t hurt to handle it gracefully as well.</p>
<div class=post>[<i>My point is that when fclose even &#8220;fails&#8221;, the failure mode is not &#8220;leave the stream open&#8221;. I tried to forestall this tangent in my final paragraph but once again I was unsuccessful. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586503">
				<div id="div-comment-586503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.werkema.com' rel='external nofollow' class='url'>Sean W.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586503">
			January 7, 2008 at 3:56 pm</a>		</div>

		<p>I think this poses an fundamental philosophical design question: &nbsp;Which is worse in a function that encounters an unrepairable error: &nbsp;To tell the programmer about an error he can do nothing about, or to tell him nothing and pretend it didn&#8217;t happen?</p>
<p>The program is probably toast either way, so it&#8217;s really like asking whether you want to be killed by an in-your-face firing squad or by the sniper&#8217;s bullet you never see.</p>
<p>If you tell him about the error, he runs the risk of trying to fix it and making things worse, but at least he knows something went wrong.</p>
<p>If you tell him nothing, he runs the risk of not knowing that something went wrong; but on the other hand, it&#8217;s impossible for him to screw up the error-handling since there are no errors to handle.</p>
<p>Personally, my attitude when designing functions like these is to return void, because if the programmer can&#8217;t do anything about it anyway, telling him the error is more likely to hurt him than help him, since anything he&#8217;s likely to do at this point will just make the problem worse &#8212; of course, most programs ignore the return value from cleanup functions anyway. &nbsp;My attitude stems from the error-reporting philosophy Al Cooper suggested in <em>About Face</em>: &nbsp;Users don&#8217;t understand and don&#8217;t like errors, so when in doubt, don&#8217;t report anything you can fix or avoid. &nbsp;Programmers don&#8217;t really understand or like errors either, despite how often we deal with them: &nbsp;Most higher-level language designs know this and silently fix mistakes for you rather than report them because that&#8217;s easier to work with than the &quot;report everything&quot; philosophy of languages like C.</p>
<p>So the less error-prone the design, the better, I think: &nbsp;You may be losing a little information, but it&#8217;s information that was only marginally useful anyway, and information that&#8217;s more likely to cause problems in the long run than solve them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586513">
				<div id="div-comment-586513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DriverDude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586513">
			January 7, 2008 at 4:03 pm</a>		</div>

		<p>&quot;So what should your program do when it gets an error from CloseHandle? Log the error and die. Die suddenly, horribly, without any opportunity to save files or cleanup. This will force you to fix it.&quot;</p>
<p>In today&#8217;s plug-n-play and wireless world, where all sorts of user blunders and transisant errors can occur, graceful error handling is a necessity. The user can unplug a disk drive after the app is done calling ReadFile/WriteFile but just before the app CloseHandle. If CloseHandle returns an error, should the app die horribly?</p>
<p>It sure complicates debugging, but nobody said PnP and power management and error handling was easy. There are other ways to find logic errors without depending on the OS to catch them for you (the programmer)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586533">
				<div id="div-comment-586533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586533">
			January 7, 2008 at 5:19 pm</a>		</div>

		<p>In general, I&#8217;m not a big fan of the MFC VERIFY macro, but I use it on my calls to CloseHandle type of functions, so I am at least checking the return value on a debug build during development. A call to CloseHandle that was failing was the clue to solving one of the nastiest bugs I had to deal with. The team was puzzled for months on this one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586543">
				<div id="div-comment-586543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586543">
			January 7, 2008 at 5:41 pm</a>		</div>

		<p>A successful return from WriteFile does not guarantee that your data made it to stable storage. &nbsp;It means that the write will be visible to subsequent reads, and that the OS will attempt to write the data to storage in the background. &nbsp;If your app needs a stronger guarantee, then it should call FlushFileBuffers, or use unbuffered I/O and write-through.</p>
<p>After all, what would your app do if the power went out after the last successful WriteFile, but before calling CloseHandle? &nbsp;You still wouldn&#8217;t know if the data made it to the disk, so you can&#8217;t really assume that it did.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586583">
				<div id="div-comment-586583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eugene</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586583">
			January 7, 2008 at 6:50 pm</a>		</div>

		<p>&quot;It never fails; it always succeeds, but possibly with errors.&quot;</p>
<p>This goes into the quotation file ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586593">
				<div id="div-comment-586593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">fschwiet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586593">
			January 7, 2008 at 7:04 pm</a>		</div>

		<p>Maybe the modern view of this is, don&#8217;t throw exceptions from destructors or exception handlers.</p>
<p>Really I&#8217;m afraid to do anything from an exception handler. &nbsp;Write to a log file? &nbsp;Good idea I hope the logfile doesn&#8217;t blow up.</p>
<p>I pity the guys at Microsoft, you know someone there had to write some code &quot;throw new OutOfMemoryException()&quot; and had the darndest time getting it to work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586653">
				<div id="div-comment-586653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vanilla man!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586653">
			January 8, 2008 at 12:22 am</a>		</div>

		<p>Surely, in the context of some executing program there are different classes of fault.</p>
<p>Do people really provide functionality to act upon every single error status?</p>
<p>So, you have piece of code X, a subset of monster program Y. X calls &quot;close&quot; which returns an error status. Now, sometimes Y crashes horribly. On one occasion, I spotted something wrong, and it lead me to &quot;close&quot; after which the whole of Y was clearly failing.</p>
<p>When I tried to recreate the problem I couldn&#8217;t, but I know that after close nothing worked properly.</p>
<p>Well, I have to get back to Z (another subset) now but I&#8217;d really like to know if &quot;close&quot; fails, because I might be able to get a better handle on the context prior to close.</p>
<p>In fact what I&#8217;ll do is put in a debug message, which only prints when close fails, and it gives me some information related to the things I suspect could be a problem.</p>
<p>Personally, unless I&#8217;m expecting that something could fail (file open) any kind of response to a system function error code, is debugging, and ripe for elimination, however,</p>
<p>where I come from you arent allowed to remove any code until you know what it does. Equally you&#8217;re neglecting your duty as a good programmer if you only ever add code!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586663">
				<div id="div-comment-586663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586663">
			January 8, 2008 at 1:19 am</a>		</div>

		<p>What Raymond is saying here that should CloseHandle() or fclose() or close() return any error at all, the only thing guaranteed is the OS does not have whatever that handle/file/file object represents open anymore. All uses of the handle, FILE*, file descriptor will fail afterwards.</p>
<p>However, when you get an error, you can see if there are alternative ways to fix the problem.</p>
<p>If CloseHandle() on a COM port fails &#8211; can&#8217;t so anything, ignore failure. If CloseHandle() on a library object (LoadLibrary()) fails, ignore it. (You can log it, or MessageBox() it). You can&#8217;t do anything with the error, so it&#8217;s best ignored, logged, or disregarded.</p>
<p>BUT, if it fails closing a data file the user has open, you have options! Whatever the failure, you can&#8217;t assume that the user&#8217;s data made it to storage. However, users like to know their data is safe, so handle it in a safe way.</p>
<p>If you opened a file for reading, well, nothing needs to be done &#8211; you read in everything you were going to read (hence you close the file), so it doesn&#8217;t matter that storage disappeared. The only thing you should note is if you&#8217;re going to reopen the file for writing, perhaps it&#8217;s not a good idea &#8211; the close returned an error, so the file may not exist or be writable anymore. Do something about that &#8211; try another path, save a recovery file, anything.</p>
<p>With writes, well, you can&#8217;t assume that the file caches were flushed from the last write if there&#8217;s an error, so it&#8217;s possible the file is now corrupt. Hopefully there&#8217;s enough state information around that you can either save another copy, write it to a journal to replay should the original file reappear, do something. The fact that you couldn&#8217;t close the file should mean that the user&#8217;s data is now in jeopardy because it may not exist on disk, network, whatever (if it&#8217;s in an inconsistent state, for example). The only representation is in RAM.</p>
<p>It also depends on the type of file you&#8217;re working with. Let&#8217;s take a video editing suite. If you&#8217;re rendering the final video given the cutlist, and the final video cannot be closed, you have the cutlist, and can always re-do the video render. If you&#8217;ve failed in closing the cutlist, then perhaps you should do something since that&#8217;s the real data that work has been put into creating. Try the save elsewhere. Make a backup file somewhere. If all else fails, ask the user &quot;I could not guarantee your data was saved, do you wish to try to save somewhere else?&quot;</p>
<p>Basically, the mantra is, if you can recover, or you failed closing a user file, try to find another place to put it. If it&#8217;s something that you can&#8217;t fix yourself, or if it doesn&#8217;t matter because it can be re-done, it&#8217;s best to ignore the error (e.g., you can&#8217;t help it if you can&#8217;t close the serial port, or a DLL, or a GDI object, so move on.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-586563">
				<div id="div-comment-586563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586563">
			January 7, 2008 at 6:33 pm</a>		</div>

		<p>@Dan: it&#8217;s worse than that. NTFS (unless using Transactional NTFS in Vista/Server 2008) only guarantees that its metadata is in a recoverable state. It does not guarantee that *your data* made it to disk even after you closed the handle.</p>
<p>Even FlushFileBuffers might fail if you have an IDE drive which lies to the OS about completing the I/O (which most do &#8211; they write to their internal buffer and return, then lazily flush the buffer). The difference between &#8216;desktop&#8217; and &#8216;enterprise&#8217; SATA drives is that the &#8216;enterprise&#8217; drives actually honour the write-through flags. They also don&#8217;t do such rigorous error recovery &#8211; a &#8216;desktop&#8217; drive will keep going over a bad sector repeatedly trying to recover the data; the &#8216;enterprise&#8217; drive assumes it&#8217;s part of an array, the filesystem can recover the data from another disk, so fails fast so the OS can get on with fixing the problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586693">
				<div id="div-comment-586693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586693">
			January 8, 2008 at 5:20 am</a>		</div>

		<p>In other words, if your application requires CloseHandle to succeed, then you&#8217;ve already lost.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586643">
				<div id="div-comment-586643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://coleman.jandasoft.biz' rel='external nofollow' class='url'>Coleman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586643">
			January 7, 2008 at 11:19 pm</a>		</div>

		<p>&quot;&#8230;the point is that the result of the call to fclose is always a closed stream.&quot;</p>
<p>Right. &nbsp;But, what do you do when it returns an error? &nbsp;Great; the stream is closed, but how should the program proceed, in your opinion? &nbsp;I disagree that it should fail in a loud, grotesque, military manner. &nbsp;But, it should do *something* gracefully; something at a minimum being notify the user (log file, debug string, whatever). &nbsp;</p>
<p>The application should NOT go on assuming that everything is OK. &nbsp;In the above example of unplugging the drive, I would expect a popup dialog indicating a serious, unrecoverable error. &nbsp;If fclose fails^H^H^H^H^H succeeds with an error, there are more serious problems ahead. </p>
<p>On another note: &quot;&#8230;don&#8217;t report anything you can fix or avoid.&quot; &nbsp;So, the application shouldn&#8217;t report an error if malloc or new fails? &nbsp;To me, it&#8217;s not about telling the programmer, it&#8217;s about telling the user who could very well do something about it. &nbsp;Out of memory? &nbsp;Close some other application. &nbsp;Don&#8217;t just fail, tell the user *why* you&#8217;re failing. &nbsp;Otherwise, you&#8217;ll be getting the email that says &quot;the application I bought from you doesn&#8217;t work&quot; with no more information to help you troubleshoot the issue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586733">
				<div id="div-comment-586733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">eran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586733">
			January 8, 2008 at 9:20 am</a>		</div>

		<p>I know that CloseHandle ultimately goes into the kernel where it create at least two IRPs (CLEANUP and CLOSE), those operations can fail (At least the IRP allocation). Cannot CloseHandle fail because of resource issues in kernel mode?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586743">
				<div id="div-comment-586743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586743">
			January 8, 2008 at 9:39 am</a>		</div>

		<p>Ok, so fclose has failed, what are you going to do about it? &nbsp;Sure you can detect the failure but to what end? &nbsp;How much code are you going to write to support &quot;proper&quot; error handling for something that might happen once in 100 years for a standard application? &nbsp;How are you going to test this code?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586753">
				<div id="div-comment-586753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586753">
			January 8, 2008 at 10:07 am</a>		</div>

		<p>@Tim &#8211; It depends on the application.</p>
<p>Suppose it&#8217;s a word processor and one of the scenarios above exist causing CloseHandle to fail during an attempt to save a document. &nbsp;Ignore it and a portion, or possibly all, of the document is lost &#8211; possibly without the user knowing it. &nbsp;Ooops there goes that big presentation tomorrow.</p>
<p>Why would you die horribly or ignore the error when a sane, and very simple, very testable, solution would be to not clear the dirty flag for the document and to tell the user that an error occurred during the save. &nbsp;That way the user couldn&#8217;t inadvertantly close the document and lose their changes. &nbsp;They could attempt the save again, at which time the might be told the network was disconnected or the USB device was unattached or unavaiable so they could fix it and resume, or they could attempt to save the file to a different drive. &nbsp;</p>
<p>As long as the app logic was sane and didn&#8217;t try to use this same handle but started the save process anew, you&#8217;d very likely find a way to save your work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586853">
				<div id="div-comment-586853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Lyon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586853">
			January 8, 2008 at 11:52 am</a>		</div>

		<p>From experience, I can tell you that CloseHandle() does not give an error if attempts to flush data you&#8217;ve written fail. In fact, CloseHandle() doesn&#8217;t even attempt to synchronously flush your data, so it may not get flushed until minutes later, after your program is long gone.</p>
<p>From reading one version of Windows source, it looks like CloseHandle can fail for only two reasons: the handle doesn&#8217;t exist, and the handle is marked as protected from being closed.</p>
<p>In other words, a failure in CloseHandle in particular means that you the programmer screwed up, not that there is something wrong in your environment.</p>
<p>In general, error handling is hard. I find it helpful to split errors into three categories:</p>
<ol>
<li>Expected errors. If you&#8217;re calling DeleteFile with a mindset of &quot;I don&#8217;t care if the file currently exists; I just want it gone,&quot; then FILE_NOT_FOUND and possibly PATH_NOT_FOUND are expected errors, and are easy to deal with.</li>
<li>
<p>Environmental errors. These are the ones where your request is reasonable, but something over which you have no control has gone wrong. Network failures are one classic example.</p>
</li>
<li>
<p>Programer errors. These are errors that indicate that the programmer did something wrong. In addition to CloseHandle, errors from APIs like SetEvent and ClearEvent tend to fall into this category.</p>
</li>
</ol>
<p>My main point was that the appropriate response to errors in the 3rd category is usually to fail fast. People like DriverDude above point out that this is not necessarily the right answer for the second category; I agree.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586893">
				<div id="div-comment-586893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586893">
			January 8, 2008 at 12:55 pm</a>		</div>

		<p>Any pervasive, consistent approach to runtime errors is better than none at all. When fclose returns an error, I would rather see a program over-react than ignore it. At least then you know something bad happened and can cope, even though it may be possible to cope only by updating deployed software. Even that is better than blundering forward ignorantly. It takes a leap of faith to actually put this into practice, but once you&#8217;ve done it in a non-trivial project, you will never go back. You will find so many bugs in your own code before they turn into monster debugging sessions that you&#8217;ll wonder how you ever survived before.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-586923">
				<div id="div-comment-586923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryce Maryott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586923">
			January 8, 2008 at 1:34 pm</a>		</div>

		<p>Saying that cleanup functions shouldn&#8217;t return a value level (which is really all we&#8217;re talking about) is close to saying no running programs should return such a value either.</p>
<p>Consider this: fClose can fail for a multitude of reasons &#8211; coding mistakes, hardware problems, user intervention, etc. &nbsp;The more information that can be passed back up the program tree, the more effective you can deal with the issue. &nbsp;Not all such problems can be give to the user, but some can and should (&quot;Unable to access USB drive &#8211; you&#8217;ve probably corrupted the file by yanking it out without stopping it again!&quot;) and some should be logged (&quot;network file unable to close correctly &#8211; check integrity or rebuild when the program restarts!&quot;) and some can be ignored (&quot;// Third day working with no sleep &#8211; will need to double check I need this in the morning. 04:29 04-02-1996&quot;)</p>
<p>But the REAL reason your cleanup functions should be ready to return odd conditions gracefully (Killing everyone in the room is NOT graceful!) is because you&#8217;re not the only programmer in the world. &nbsp;99.99% of the time, there will be someone else that has to work on your code, including the cleanup functions. &nbsp;Odds are good they&#8217;re not going to know what you did or why, nor are they able to real throught the 12 billion lines else where (including libraries that may not have the origional source handy!) and the if someone comments out a section that initates something your cleanup is designed to handle and breaks it, you should be the option to decide what to do. &nbsp;(1) fclose fails and I kill the computer, the user and his first born. &nbsp; (2) fclose fails and I ignore it.</p>
<p>If a function fails (and a cleanup really is JUST a function!) and you don&#8217;t pass that information along, I ask that you don&#8217;t program libraries. &nbsp;Because you don&#8217;t know what kind of code I&#8217;m writing, let alone the way I&#8217;m coding.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-586953">
				<div id="div-comment-586953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-586953">
			January 8, 2008 at 2:23 pm</a>		</div>

		<p>Let&#8217;s not forget that future changes to the OS could result in additional intricacies by which functions such as CloseHandle() could fail. &nbsp;Be it due to new classes of storage devices, new file systems underlying the OS, or other means there&#8217;s always the possibility that some subtle change will allow CloseHandle() to &nbsp;fail for reasons different from those it fails for today. &nbsp;If you were checking that return value and acting appropriate to your application then you&#8217;ll either be covered automatically or you&#8217;ll have a much easier time identifying the source of the failure. &nbsp;If you&#8217;re not&#8230; have fun debugging.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-589013">
				<div id="div-comment-589013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Flawed logic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080107-00/?p=23913#comment-589013">
			January 12, 2008 at 10:39 pm</a>		</div>

		<blockquote><p>
  In other words, if your application requires CloseHandle to succeed, then you&#8217;ve already lost.
</p></blockquote>
<p>Yes. But it&#8217;s a difference between showing a error message and crashing/writing corrupt data.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>