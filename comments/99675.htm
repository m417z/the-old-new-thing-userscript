<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1359715">
				<div id="div-comment-1359715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359715">
			September 7, 2018 at 7:37 am</a>		</div>

		<p>It wasn&#8217;t initially clear (to me anyway) that the code being instrumented is in a DLL.</p>
<p>So maybe I&#8217;m missing the point.  But adding a clean exit mechanism to the worker thread seems like less effort than adding a clean exit mechanism and moving to the thread pool.  Or is there some problem with waiting for the worker thread to terminate in atexit?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1359915">
				<div id="div-comment-1359915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359915">
			September 9, 2018 at 10:12 am</a>		</div>

		<p>And how do you add that clean exit mechanism to the worker thread? The usual solution is <code>FreeLibraryAndExitThread</code>, but that also prevents the DLL from unloading.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1359995">
				<div id="div-comment-1359995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359995">
			September 10, 2018 at 4:15 pm</a>		</div>

		<p>Sorry, I wasn&#8217;t being that sophisticated!  I was thinking you could just signal the worker thread and wait for it to exit, but I was forgetting this would cause a loader lock deadlock.</p>
<p>The TerminateThread solution is unfortunately recommended here (section headed &#8220;Thread Synchronization in DllMain for DLL_THREAD_DETACH during DLL Unload&#8221;):<br />
<a href="https://docs.microsoft.com/en-us/windows/desktop/Dlls/dynamic-link-library-best-practices" rel="nofollow">https://docs.microsoft.com/en-us/windows/desktop/Dlls/dynamic-link-library-best-practices</a></p>
<p>It seems unhelpful to label this &#8220;best practice&#8221; when it&#8217;s actually &#8220;best practice for getting out of a hole you can usually avoid with better API design&#8221;.  And if that&#8217;s not an option, your thread pool solution is better.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1360025">
				<div id="div-comment-1360025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1360025">
			September 10, 2018 at 4:52 pm</a>		</div>

		<p>Yes, <a href="https://blogs.msdn.microsoft.com/oldnewthing/20150814-00/?p=91811/">I&#8217;ve complained about that document before</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1359735">
				<div id="div-comment-1359735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359735">
			September 7, 2018 at 9:10 am</a>		</div>

		<p>I like shared memory for IPC in the same security context. To my mind ReadProcessMemory and WriteProcessMemory provide an implementation of shared memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-even depth-1 parent" id="comment-1359785">
				<div id="div-comment-1359785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359785">
			September 7, 2018 at 2:03 pm</a>		</div>

		<p>A finer-grained alternative to <code>ReadProcessMemory</code> may have been a named shared memory block &#8211; say, the instrumentation code at startup does something like <code>CreateFileMapping(INVALID_HANDLE_VALUE, ..., ("ContosoInstrumentationTool" + std::to_string(GetCurrentProcessId())).c_str())</code>, creating the memory area to use to store the information for the instrumentation tool. The instrumentation tool, in turn, given the process ID can open the corresponding memory block and read it as it pleases.</p>
<p>As a bonus point, as long as the instrumentation tool keeps the file mapping open the data is kept alive for it to examine.</p>
<p>The only drawback that comes to mind is that you may have problems if the shared memory is still alive and a new process <i>with the same PID</i> is started, but this can be worked around by adding an increasing suffix to the mapping name if the base name fails.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1359815">
				<div id="div-comment-1359815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359815">
			September 7, 2018 at 9:51 pm</a>		</div>

		<p>Isn&#8217;t there a temporary involved whose c_str() you are calling?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1359845">
				<div id="div-comment-1359845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Maia Everett</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359845">
			September 8, 2018 at 2:43 am</a>		</div>

		<p>Nitpick, but in the code you provided, wouldn&#8217;t the anonymous std::string be immediately destroyed before the CreateFileMapping is called, thus invalidating the c_str pointer?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3" id="comment-1359925">
				<div id="div-comment-1359925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359925">
			September 9, 2018 at 2:18 pm</a>		</div>

		<p>The temporary is destroyed <a href="https://stackoverflow.com/questions/3041249/when-are-temporaries-created-as-part-of-a-function-call-destroyed" rel="nofollow">at the end of the full expression</a>, which means after <code>CreateFileMapping</code> returns.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>