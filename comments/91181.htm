<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1196871">
				<div id="div-comment-1196871" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Muzer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196871">
			August 4, 2015 at 7:13 am</a>		</div>

		<p>To my mind, this seems so hacky, and yet quite clever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196861">
				<div id="div-comment-1196861" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196861">
			August 4, 2015 at 7:26 am</a>		</div>

		<p>What happens when one instruction of the bundle incurs, say, a page fault? Does the whole bundle get discarded before calling into the trap handler, or only a single instruction?</p>
<p>If the whole bundle gets re-executed: Could this lead to a situation where a (pretty naive) page handler runs in circles paging in one page for another, and two instructions of the bundle alternatingly raise page faults?</p>
<div class="post">[<em>This is a non-problem because bundles are 16 bytes long and are aligned on on 16-byte boundaries, so they can never straddle a page boundary. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196841">
				<div id="div-comment-1196841" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jared S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196841">
			August 4, 2015 at 7:38 am</a>		</div>

		<p>@Andre: You could get into that situation on x86 if you have an instruction that crosses a page boundary.</p>
<div class="post">[<em>Also, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/08/27/221486.aspx">unaligned data</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1196831">
				<div id="div-comment-1196831" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196831">
			August 4, 2015 at 7:57 am</a>		</div>

		<p>I&#39;m not sure Andre&#39;s question was perfectly understood here.</p>
<p>The way I read it, it&#39;s about what can happen if a bundle contains two instructions that each load a memory value from two different pages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196821">
				<div id="div-comment-1196821" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196821">
			August 4, 2015 at 8:15 am</a>		</div>

		<p>@Medinoc:</p>
<p>Yes, that&#39;s what I meant.</p>
<div class="post">[<em>Sorry, I misunderstood. Fault handlers have access to a privileged <code>rfi</code> instruction, which has the power to resume execution at a specific instruction within the bundle. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196811">
				<div id="div-comment-1196811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kirchner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196811">
			August 4, 2015 at 8:18 am</a>		</div>

		<p>Somebody care to help me understand how this instruction makes sense?</p>
<p>addl &nbsp; &nbsp;r30 = 08h, r30 ;; &nbsp; &nbsp; &nbsp; // r30 = this-&gt;m_q + 1</p>
<p>I&#39;d say it adds 8 to r30. What am I missing?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1196801">
				<div id="div-comment-1196801" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196801">
			August 4, 2015 at 8:22 am</a>		</div>

		<p>@Kirchner: The declaration of m_q isn&#39;t shown, but if it&#39;s a pointer to int64_t, adding 1 to it translates as adding 8 to the actual address it contains.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196791">
				<div id="div-comment-1196791" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Typo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196791">
			August 4, 2015 at 8:30 am</a>		</div>

		<p>It says &quot;it tries to deference the null pointer&quot;.</p>
<p>It should be &#39;dereference&#39; instead of &#39;deference&#39;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196781">
				<div id="div-comment-1196781" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kirchner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196781">
			August 4, 2015 at 8:33 am</a>		</div>

		<p>@Medinoc, thanks a lot. I missed that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tom-lambert-13live-com odd alt thread-odd thread-alt depth-1" id="comment-1196771">
				<div id="div-comment-1196771" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Tom+Lambert+%28Koopakiller%29' rel='external nofollow' class='url'>Tom Lambert (Koopakiller)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196771">
			August 4, 2015 at 11:43 am</a>		</div>

		<p>I am a pure .NET developer but this strategy sounds very clever to me. A really interesting Strategy</p>
<p>Thanks for the article ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196761">
				<div id="div-comment-1196761" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196761">
			August 4, 2015 at 12:29 pm</a>		</div>

		<p>At least as reported in the press at the time, one of the biggest problems of the Itanium was that the compilers never managed to deliver the promised performance. Was that just an early problem, or something that persisted over the lifetime of the architecture? Has the state of compiler research advanced enough that VLIW would be a viable model for general-purpose computing today?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196751">
				<div id="div-comment-1196751" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196751">
			August 4, 2015 at 12:42 pm</a>		</div>

		<p>&quot;The recovery code re-executes the instructions non-speculatively so that all the exceptions can be raised in the standard way, and any exception handlers can do their work in the standard way.&quot;</p>
<p>Presumably you need to make sure the code is correct under multithreading/interrupts, given that &quot;the same&quot; instructions can now execute more than once? (The general pattern of &quot;load the register again non-speculatively given that we already know this branch will be taken&quot; is safe, of course.)</p>
<div class="post">[<em>The non-speculative version is the &quot;real&quot; execution. The speculative version is the &quot;Gosh, I wonder if I can get away with this &quot; version. So any exceptions raised in the non-speculative version are the ones that correspond to the code as-written. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196741">
				<div id="div-comment-1196741" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NOR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196741">
			August 4, 2015 at 2:06 pm</a>		</div>

		<p>&gt;(p6) &nbsp; &nbsp;chk.s &nbsp; r29, recovery &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // if true: recover r29 if not valid</p>
<p>&gt;(p6) &nbsp; &nbsp;or &nbsp; &nbsp; &nbsp;ret0 = r0, r29 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// if true: use the value we precalculated</p>
<p>&gt;(p7) &nbsp; &nbsp;or &nbsp; &nbsp; &nbsp;ret0 = 2ah, r0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// if false: return the default value</p>
<p>&gt; &nbsp; &nbsp; &nbsp; &nbsp;br.ret.sptk.many rp &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // return</p>
<p>&gt;</p>
<p>&gt;recovery:</p>
<p>&gt; &nbsp; &nbsp; &nbsp; &nbsp;ld4 &nbsp; &nbsp; r29 = [r34] ;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// load *b</p>
<p>Q1: Are all five really in the same block? Is there an implicit &#39;;;&#39; after an unconditional jump?</p>
<p>Q2: Why are there no &#39;;;&#39; in the first four instructions?</p>
<p>&nbsp; &nbsp;If NAT is set for r29:</p>
<p>&nbsp; &nbsp; &nbsp;1) Is there a guarantee that we jump to recovery first and don&#39;t return?</p>
<p>&nbsp; &nbsp; &nbsp;2) Is the content of ret0 defined?</p>
<div class="post">[<em>There is an implicit <code>;;</code> after any taken jump. If r29 has NaT set, then the jump at <code>chk.s</code> is taken, and a <code>;;</code> is auto-inserted, thereby preventing <code>ret0</code> from being set and the <code>br.ret</code> from being taken. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196731">
				<div id="div-comment-1196731" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196731">
			August 4, 2015 at 4:26 pm</a>		</div>

		<p>Very interesting.</p>
<p>Thanks a lot, Raymond, for the posts and the answer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196721">
				<div id="div-comment-1196721" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh Bowman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196721">
			August 4, 2015 at 4:26 pm</a>		</div>

		<p>@asdf:</p>
<p>35 years on from the introduction of x86, compilers are still improving with multiple-percent gains each major version. Small, but a non-negligible increase. While the science of compilers has evolved in tandem, it was already pretty solid when Itanic was introduced, and especially since the architecture throws out many x86 (and Power, Arm, Sparc) assumptions, there&#39;s still decades of theory and engineering work to truly take advantage of its uniqueness. The market didn&#39;t give it more than a half-decade, so here we are.</p>
<p>(It would probably have gained an on-chip recompiler anyway. Intel&#39;s the only one who ever understand it well enough.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>