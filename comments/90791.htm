<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-mngoldeneagle even thread-even depth-1" id="comment-1234466">
				<div id="div-comment-1234466" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150730-00/?p=90791#comment-1234466">
			July 30, 2015 at 7:45 am</a>		</div>

		<p>Maybe I&#39;m missing something here, but what enforces a program from writing to registers that aren&#39;t within it&#39;s local region or output? &nbsp;Couldn&#39;t a malicious function manipulate values in earlier registers and then unwind?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234446">
				<div id="div-comment-1234446" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150730-00/?p=90791#comment-1234446">
			July 30, 2015 at 7:53 am</a>		</div>

		<p>Something about an airtight hatchway&#8230;</p>
<p>A malicious function could do /anything it wants to/.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234396">
				<div id="div-comment-1234396" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150730-00/?p=90791#comment-1234396">
			July 30, 2015 at 10:36 am</a>		</div>

		<p>I suppose in principal a function could not use alloc and still call a function. All it has to do is push pfs and rp. Good luck unwinding that though.</p>
<p>[In fact, it&#39;s nowhere near the function&#39;s code.]</p>
<p>That would make trampolines ugly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234386">
				<div id="div-comment-1234386" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150730-00/?p=90791#comment-1234386">
			July 30, 2015 at 10:39 am</a>		</div>

		<p>If you want hardware-enforced security across function calls, you need something like the iAPX 432. It was a huge failure &#8211; much more so than Itanium.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234376">
				<div id="div-comment-1234376" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150730-00/?p=90791#comment-1234376">
			July 30, 2015 at 10:52 am</a>		</div>

		<p>Maybe I&#39;m missing something, but I cannot see where br.call might have to spill anything ever.</p>
<p>Did you perhaps fail to separate it cleanly from the alloc instruction?</p>
<div class="post">[<em>Oops, you&#39;re right. The spilling occurs at the alloc. Fixed. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234336">
				<div id="div-comment-1234336" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150730-00/?p=90791#comment-1234336">
			July 30, 2015 at 7:59 pm</a>		</div>

		<p>I have to imagine that in the event of a tail call optimization, a new alloc would need to take place. Or does the caller undo its alloc before doing the optimized tail call? I couldn&#39;t find any information on what it takes to eliminate a tail call on IA64.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234326">
				<div id="div-comment-1234326" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150730-00/?p=90791#comment-1234326">
			July 31, 2015 at 12:51 am</a>		</div>

		<p>Joshua: Itanium function pointers point to a small object with two fields. One field is the actual code pointer, the other is the global pointer for that function. Calling a function through a pointer involves loading the global pointer in the gp register, and branching to the code pointer. So everything works pretty much the same, except with an extra level of indirection. I forget if it was MIPS or PowerPC that had a similar ABI</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1234316">
				<div id="div-comment-1234316" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150730-00/?p=90791#comment-1234316">
			July 31, 2015 at 5:51 am</a>		</div>

		<p>Gabe: A tail call doesn&#39;t necessarily have to jump to the entry point of a function. I&#39;d have thought a jump to the instruction just after the usual prolog would be correct &#8211; e.g. in Raymond&#39;s example, if logging is (for some reason) using a tail call, the jump would be to the first instruction of &#8230;do complicated logging&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234206">
				<div id="div-comment-1234206" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150730-00/?p=90791#comment-1234206">
			July 31, 2015 at 5:08 pm</a>		</div>

		<p>AMD64 also has a red zone, at least in AMD&#39;s original ABI. I don&#39;t recall if Microsoft&#39;s AMD64 ABI kept it.</p>
<div class="post">[<em>Yup, still there. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197061">
				<div id="div-comment-1197061" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150730-00/?p=90791#comment-1197061">
			August 2, 2015 at 5:09 pm</a>		</div>

		<p>It seems to me that in that particular example, it would be more efficient to inline the if command, so the function call only occurs if necessary. &nbsp;But I guess that would be difficult to do across module boundaries.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>