<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-931763">
				<div id="div-comment-931763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110824-00/?p=9823#comment-931763">
			August 24, 2011 at 7:19 am</a>		</div>

		<p>I should hope so &#8212; it&#39;d be an awful shame if the program loader went around changing the carpets in the EXE&#39;s house when the guest DLL wanders over.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-931863">
				<div id="div-comment-931863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110824-00/?p=9823#comment-931863">
			August 24, 2011 at 2:06 pm</a>		</div>

		<p>Random tidbit: /LARGEADDRESSAWARE actually has meaning in a 64-bit EXE. &nbsp;If you add /LARGEADDRESSAWARE:NO to the linker command line for a 64-bit executable, you will get a 64-bit executable whose address space is limited to 0x7FFFFFFF. &nbsp;Obviously, it defaults to on when building for 64-bit architectures. &nbsp;(Matteo Italia is wrong in the link.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-931873">
				<div id="div-comment-931873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Newman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110824-00/?p=9823#comment-931873">
			August 24, 2011 at 4:14 pm</a>		</div>

		<p>We found this out just recently with work software. While we didn&#39;t expect it to change the stack allocations for existing threads, we were hoping it would work for threads created from code in the DLL. Unfortunately, no such luck.</p>
<p>We ended up doing a slightly odd work around involving allocating a stack of memory and changing registers to convince the problem function (a section of JIT compiled code) it was a completely fresh stack. And that was the lesser of two oddities.</p>
<div class="post">[<i>How does the kernel know that the thread was created by your DLL? Do you want it to <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/01/01/47042.aspx" rel="nofollow">check the return address</a>? For people who use _beginthread, that means that it will always MSVCR80&#39;d thread preferences! -raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-931893">
				<div id="div-comment-931893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110824-00/?p=9823#comment-931893">
			August 24, 2011 at 9:24 pm</a>		</div>

		<p>@Peter: If you swap the stack, be sure to also change that thread&#39;s NT_TIB::StackBase and NT_TIB::StackLimit so that the kernel knows the bounds of your stack. &nbsp;This will allow the kernel to automatically extend the stack if you have a separated reserve/commit system and guard page like the normal stacks. &nbsp;Also, the kernel will say STATUS_STACK_OVERFLOW instead of STATUS_ACCESS_VIOLATION in the event of an overrun.</p>
<p>I believe that StackBase and StackLimit are backward from the usual meaning of the words &#8211; you&#39;ll have to see what it is for a normal stack.</p>
<p>x86-32: NT_TIB *tib = reinterpret_cast&lt;NT_TIB *&gt;(static_cast&lt;uintptr_t&gt;(__readfsdword(FIELD_OFFSET(NT_TIB, Self))));</p>
<p>x86-64: NT_TIB *tib = reinterpret_cast&lt;NT_TIB *&gt;(static_cast&lt;uintptr_t&gt;(__readgsqword(FIELD_OFFSET(NT_TIB, Self))));</p>
<div class="post">[<i>Even better: Use CreateFiber to create a stack and SwitchToFiber to switch to it. Now your code is portable. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-932203">
				<div id="div-comment-932203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110824-00/?p=9823#comment-932203">
			August 25, 2011 at 3:17 pm</a>		</div>

		<p>@Myria: Or just don&#39;t overflow your shadow stack. I&#39;m used to allocating them in the middle of the heap so they don&#39;t have room to grow anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>