<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1164413">
				<div id="div-comment-1164413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141201-00/?p=43503#comment-1164413">
			December 1, 2014 at 7:31 am</a>		</div>

		<p>What&#39;s with the alignment? Using &quot;normal&quot; library calls (like new) in 32-bit programs, we get things aligned to 8 bytes and to nicely use SSE things I guess it&#39;s preferable having them aligned to 16.</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ycsb6wwf.aspx">msdn.microsoft.com/&#8230;/ycsb6wwf.aspx</a></p>
<p>And here we have static &quot;int array[10000];&quot; I don&#39;t believe we can expect it to be 16-bytes aligned either? I guess if we assume we target only 64-bits we&#39;re safe?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1164423">
				<div id="div-comment-1164423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RCG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141201-00/?p=43503#comment-1164423">
			December 1, 2014 at 7:49 am</a>		</div>

		<p>Raymond,</p>
<p>This made my Monday morning so much better. &nbsp;The stuff on lock free programming was nice too. &nbsp;I miss working on challenging stuff like this. &nbsp;Thanks for reminding me why I used to like programming so much. &nbsp;It&#39;s time to start hacking on something fun after hours.</p>
<p>RCG</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1164433">
				<div id="div-comment-1164433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141201-00/?p=43503#comment-1164433">
			December 1, 2014 at 7:51 am</a>		</div>

		<p>@acq</p>
<p>Well, as the page you linked to mentions, there&#39;s _aligned_malloc, although I think that&#39;s nonportable.</p>
<p>If you&#39;re willing to restrict yourself to newer versions of C and C++, there&#39;re aligned_alloc (in C11), and std::align (in C++11). aligned_alloc looks to be pretty convenient, basically just malloc with an alignment argument. I know from experience that std::align is a total pain to use.</p>
<p>As for the static array, you could use unaligned loads (which are always safe (I think)), or you could make it larger than necessary and use something like std::align which does the arithmetic to find an aligned subset for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1164463">
				<div id="div-comment-1164463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lars</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141201-00/?p=43503#comment-1164463">
			December 1, 2014 at 9:42 am</a>		</div>

		<p>@Douglas</p>
<p>In C++, it&#39;s easy to make a wrapper class for malloc/new. Given how often one needs custom memory allocation anyway, you won&#39;t notice the difference &#8211; and it does not require C++11.</p>
<p>An inconspicuous wrapper could be written in C as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1164493">
				<div id="div-comment-1164493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Vine [MSFT]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141201-00/?p=43503#comment-1164493">
			December 1, 2014 at 12:34 pm</a>		</div>

		<p>The intel intrinsics guide at <a rel="nofollow" target="_new" href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/">software.intel.com/&#8230;/IntrinsicsGuide</a> is a really good reference for looking up and searching for SIMD and related instructions</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1164503">
				<div id="div-comment-1164503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141201-00/?p=43503#comment-1164503">
			December 1, 2014 at 3:27 pm</a>		</div>

		<p>@acq:</p>
<p>The reason for alignment is that newer SSE calls do mostly require alignment if they access memory. I was playing around with some x64 assembly, and I messed up the stack alignment requirement due to miscounting the stack usage. I ended up calling into a CRT function and the function ended up causing the program to crash. After stepping through, I tracked down the problem to the CRT function using an SSE2 instruction. It was trying to use an instruction on an unaligned memory address and failing due to the stricter alignment requirements. These instructions do trigger a general protection fault when they are used unaligned.</p>
<p>Obviously, after I noticed that it was unaligned, I went straight back to my ASM and checked the alignment there. After fixing things it worked perfectly fine. So it is not just preferable, most of the time it is required.</p>
<p>For the ones which allow unaligned access, there is a difference in performance. I would imagine that the processor does two memory accesses, one aligned one for the first part, shifts it down and put it into the lower bits of the register, then the second one for the higher part shifting it up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1164543">
				<div id="div-comment-1164543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141201-00/?p=43503#comment-1164543">
			December 2, 2014 at 3:20 am</a>		</div>

		<p>@acq: in MSVC one can do</p>
<p> &nbsp; &nbsp;__declspec(align(16)) int array[10000];</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1164553">
				<div id="div-comment-1164553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">doynax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141201-00/?p=43503#comment-1164553">
			December 2, 2014 at 3:56 am</a>		</div>

		<p>If the boundary is 0 &lt;= n &lt;= 10 then I suppose one might try using the (saturated) packing instructions to squeeze 16 elements into a single register to shave off a couple of instructions</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1164573">
				<div id="div-comment-1164573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141201-00/?p=43503#comment-1164573">
			December 2, 2014 at 7:04 am</a>		</div>

		<p>That was a complete joy to read, thanks a lot :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1164723">
				<div id="div-comment-1164723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141201-00/?p=43503#comment-1164723">
			December 2, 2014 at 4:25 pm</a>		</div>

		<p>The code as posted uses _mm_loadu_si128() which will happily load from addresses which aren&#39;t 16-byte aligned. On a modern CPU there&#39;s no performance penalty for using that instruction as long as the data is actually aligned. Try comparing with _mm_load_si128() which will cause a crash if you try and load from a misaligned address.</p>
<p>However if the array is actually misaligned e.g. &quot;__m128i *xarray = (__m128i*)(array + 1);&quot; then there&#39;s a significant performance hit from _mm_loadu_si128() &#8211; about 33% on my PC. For that reason it&#39;s probably best to go with the aligned instruction where possible, to avoid accidentally throwing away performance.</p>
<p>One way to fix the alignment is to replace global operator new and delete (and all their variants).</p>
<p>I also noticed that some of the less optimized versions of the code benefit from /arch:AVX and also from switching to x64, without changing the code. AVX gives you three operand instructions to help avoid copies, and x64 gives the compiler more registers to play with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1164943">
				<div id="div-comment-1164943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Manodeep</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141201-00/?p=43503#comment-1164943">
			December 3, 2014 at 8:55 am</a>		</div>

		<p>Thanks for the fantastic article. </p>
<p>I got carried away a bit and created a gist with all the functions in them : <a rel="nofollow" target="_new" href="https://gist.github.com/manodeep/05c65432cddf34dc11ea">gist.github.com/&#8230;/05c65432cddf34dc11ea</a></p>
<p>I run the benchmarks with both gcc4.8 and clang6 on my 2012 Macbook air &#8212; seems that clang does that best job with the -O3 flag. Max. improvements are 25% or so &#8212; compared to gcc where max. improvements are ~7x.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165163">
				<div id="div-comment-1165163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141201-00/?p=43503#comment-1165163">
			December 4, 2014 at 6:20 am</a>		</div>

		<p>Any reason for using shuffle+add to sum the lanes rather than a pair of horizontal adds? (_mm_hadd_epi32)</p>
<p>Ok, in this example it is outside of the loop so not really performance critical but is one faster/better than the other assuming you have SSE3?</p>
<div class="post">[<em>Unless it would be a significant hardship, I stick to SSE2 because <a href="http://windows.microsoft.com/en-US/windows-8/system-requirements">Windows minimum system requirements</a> are only SSE2. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>