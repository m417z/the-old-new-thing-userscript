<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-496313">
				<div id="div-comment-496313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070424-00/?p=27143#comment-496313">
			April 24, 2007 at 11:54 am</a>		</div>

		<p>Wow, thanks for elucidating this stuff! &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-496413">
				<div id="div-comment-496413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070424-00/?p=27143#comment-496413">
			April 24, 2007 at 1:05 pm</a>		</div>

		<p>Great stuff &#8211; this has been Ctrl-C/Ctrl-V&#8217;ed right into my debugging notes file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-496593">
				<div id="div-comment-496593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Metathunk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070424-00/?p=27143#comment-496593">
			April 24, 2007 at 9:12 pm</a>		</div>

		<blockquote><p>
  0x000c7568</p>
<p>  we just need to subtract eight</p>
<p>  0x000c7560-8</p>
<p>  This obviously doesn&#8217;t smell right
</p></blockquote>
<p>Metanitpicker&#8217;s corner: &nbsp;Only a bug hunter would care.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-496603">
				<div id="div-comment-496603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://hallvards.blogspot.com/2004/07/hack-7-interface-to-object-in-delphi.html' rel='external nofollow' class='url'>Hallvard Vassbotn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070424-00/?p=27143#comment-496603">
			April 25, 2007 at 3:27 am</a>		</div>

		<p>I do something similar at runtime in Delphi:</p>
<p><a rel="nofollow" target="_new" href="http://hallvards.blogspot.com/2004/07/hack-7-interface-to-object-in-delphi.html" rel="nofollow">http://hallvards.blogspot.com/2004/07/hack-7-interface-to-object-in-delphi.html</a></p>
<p>Delphi interfaces are COM compatible, so basically it is the same technique. I guess it is easier to call this function from the debugger than to muck about by hand ;).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-496623">
				<div id="div-comment-496623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070424-00/?p=27143#comment-496623">
			April 25, 2007 at 5:18 am</a>		</div>

		<p>What a coincidence you should be talking about COM interface pointers and vtables. I recently wrote a shell extension that adds a custom clipboard format to the shell&#8217;s IDataObject by allocating some global memory, and (after doing something useful with the memory) calling IDataObject::SetData. The shell eventually frees the memory by calling IUnknown::Release on the pUnkForRelease member of the STGMEDIUM I passed into IDataObject::SetData. </p>
<p>Nitpicker&#8217;s corner: when the shell extension&#8217;s reference count decrements zero, it calls OleFlushClipboard if necessary, which pretty much forces the shell to actually the free memory that was allocated. No memory leak here.</p>
<div class="post">[<i>Huh? If you still have a reference in the pUnkForRelease then your reference count can&#8217;t be zero. -Raymond</i>]</div>
<p>Anyway&#8230; earlier today a thought occurred to me: &#8220;suppose I had a .NET object that handed out an STGMEDIUM, and I had to free it immediately when the consumer releases it, not whenever the next garbage collection occurs. Can that be done in the CLR?&#8221; As it turns out, the answer is yes, but it&#8217;s not trivial. I wouldn&#8217;t recommend actually doing this in a real-world situation.</p>
<p>The problem is that the CLR doesn&#8217;t notify the underlying managed object when the last reference to the COM-callable wrapper is released. The CCW simply removes the strong reference to the managed object, making eligible for garbage collection (barring any other references to it.) Some mechanism akin to ATL&#8217;s FinalRelease method would have been nice, but alas, there&#8217;s no such thing in managed world. Nor does the CCW call the managed object&#8217;s IDisposable.Dispose method (should it exist,) which strikes me as an appropriate thing to do, but which might lead to unexpected behavior.</p>
<p>To get back on topic, the solution is to do some magic pointer-swizzling on the vtable of the managed object&#8217;s CCW. The CCW is a perfectly ordinary COM object, with a perfectly ordinary vtable. Since all COM objects inherit from IUnknown, the third entry in the vtable always points to the CCW&#8217;s Release method. </p>
<p>The trick is to create a delegate for that pointer using Marshal.GetDelegateForFunctionPointer. COM uses the stdcall calling convention, always passing a pointer to the COM object as the first argument on the stack, so the delegate&#8217;s signature can be &#8220;int SwizzledRelease(IntPtr pUnknown)&#8221; as long the method is static. </p>
<p>Marshal.ReadIntPtr(pUnknown) returns the address of the vtable, and Marshal.ReadIntPtr(pVtable, 2 * IntPtr.Size) returns the pointer to the CCW&#8217;s Release method. Calling Marshal.GetDelegateForFunctionPointer with that pointer will create a delegate that calls the CCW&#8217;s original Release method. An unmanaged pointer to a delegate of the SwizzledRelease method can be obtained by using Marshal.GetFunctionPointerForDelegate. Finally, the CCW’s vtable is modified by calling Marshal.WriteIntPtr(pVTable, 2 * IntPtr.Size, pSwizzledRelease). This concludes the pointer swizzling.</p>
<p>Now the SwizzledRelease method will be called whenever a COM consumer calls IUnknown::Release on the managed object. All that remains is for the SwizzledRelease method to call through the delegate of the CCW’s original Release method and eventually to return the result from it. In the meantime, the managed object can be obtained using Marshal.GetObjectForIUnknown. Et voila, if the reference count returned from the CCW’s original Release method is zero, the memory specified by the STGMEDIUM can now be released right on cue.</p>
<p>This was a fun little exercise in messing with COM vtables. I think for my next experiment I’ll try to bypass the CCW entirely by creating a vtable on the fly. This should actually be much safer to do, since I’ll own the entire thing, and won’t be messing with someone else’s memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-496773">
				<div id="div-comment-496773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070424-00/?p=27143#comment-496773">
			April 25, 2007 at 2:21 pm</a>		</div>

		<p>&gt;[Huh? If you still have a reference in the pUnkForRelease then your reference count can&#8217;t be zero. -Raymond]</p>
<p>Oh, I create a separate object, whose sole purpose is to free the memory on its final Release. It&#8217;s this object&#8217;s IUnknown pointer I specify in the pUnkForRelease. </p>
<p>Actually, I found it necessary to do it this way. It appears that the shell tries to unload itself pretty damn quick when a file open/save dialog is dismissed in an application. The extension&#8217;s DllCanUnloadNow is never called and the IShelExtInit&#8217;s Release is only called once, regardless of how many references are still held. </p>
<div class=post>[<i>That separate object increments your DLL object count, so it can&#8217;t be zero. And that aggressive unload isn&#8217;t coming from the shell; <a href="http://blogs.msdn.com/oldnewthing/archive/2004/06/28/167800.aspx#167919" rel="nofollow">it&#8217;s coming from CoUninitialize</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-496803">
				<div id="div-comment-496803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070424-00/?p=27143#comment-496803">
			April 25, 2007 at 4:41 pm</a>		</div>

		<p>&quot;Metanitpicker&#8217;s corner: &nbsp;Only a bug hunter would care.&quot;</p>
<p>A rather pointless statement since this post &lt;i&gt;started&lt;/i&gt; with the phrase &quot;When you&#8217;re debugging.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-496843">
				<div id="div-comment-496843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Metadebugger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070424-00/?p=27143#comment-496843">
			April 25, 2007 at 9:07 pm</a>		</div>

		<blockquote><p>
  A rather pointless statement since this post</p>
<p>  &lt;i&gt;started&lt;/i&gt; with the phrase &quot;When you&#8217;re</p>
<p>  debugging.&quot;
</p></blockquote>
<p>Well sure, when I&#8217;m debugging I make mistakes too, and I have to debug my debugging mistakes. &nbsp;If I thunk twice about subtracting 8 then I&#8217;d discover how pointless that dt statement was. &nbsp;I&#8217;d have to go back and subtract 8 just once instead of twice. &nbsp;Some call this kind of observation &quot;nitpicking&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-junfeng even thread-even depth-1" id="comment-497283">
				<div id="div-comment-497283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Junfeng+Zhang' rel='external nofollow' class='url'>Junfeng Zhang</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070424-00/?p=27143#comment-497283">
			April 27, 2007 at 12:29 am</a>		</div>

		<p>We reserved one DWORD dwSig for every class. </p>
<p>When you dump the adjacent memory you will know exactly which class it is. </p>
<div class="post">[<i>This works great as long as you don&#8217;t interoperate with components written by other people (e.g., you never call CoCreateInstance). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>