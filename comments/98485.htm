<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1332615">
				<div id="div-comment-1332615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332615">
			April 11, 2018 at 7:16 am</a>		</div>

		<p>I guess the use of delay slots allowed them to&#8230; DELAY the introduction of branch prediction logic!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1332635">
				<div id="div-comment-1332635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VinDuv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332635">
			April 11, 2018 at 8:22 am</a>		</div>

		<p>What happens if an interrupt occurs during the execution of a branch delay slot? Does the kernel also has to rewind execution in that case?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1332735">
				<div id="div-comment-1332735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332735">
			April 11, 2018 at 12:53 pm</a>		</div>

		<p>Yes. Anything that requires resumption must back up to the branch instruction in order to resume correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1332685">
				<div id="div-comment-1332685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332685">
			April 11, 2018 at 9:23 am</a>		</div>

		<p>[1] claims that the &#8220;likely&#8221; branches offered marginal gains and became harder to implement with high-performance (presumably longer) pipelines.  They were deprecated so CPU implementations could choose correct but slow.</p>
<p>This is not an official document but Tim Olson does seem to be an actual CPU designer.</p>
<p>[1]: <a href="https://compilers.iecc.com/comparch/article/03-09-094" rel="nofollow">https://compilers.iecc.com/comparch/article/03-09-094</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1332715">
				<div id="div-comment-1332715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Louis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332715">
			April 11, 2018 at 11:33 am</a>		</div>

		<p>I don&#8217;t understand how the &#8220;likely&#8221; instructions work. Isn&#8217;t it just as complex to &#8220;not execute the branch delay slot if the branch is not taken&#8221; as it is to &#8220;not execute the branch delay slot if the branch <i>is</i> taken&#8221; (i.e. regular branching with no branch delay slot)?</p>
<p>As I typed this I&#8217;ve come up with a guess: it&#8217;s sort of like a branch predictor where the prediction is always &#8220;taken&#8221; no matter what, and the instruction in the BDS is backed out if the branch is not taken. The only other possibility I can come up with is that the processor stalls until it knows whether or not to take the branch, but that doesn&#8217;t buy anything over a regular branch followed by a NOP.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1332745">
				<div id="div-comment-1332745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332745">
			April 11, 2018 at 1:15 pm</a>		</div>

		<p>The instruction is bubbled if the branch wasn&#8217;t taken. In an in-order processor this will never cause a further stall so it is faster than a NOP in the branch-taken case and no slower in the branch-not-taken case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1332775">
				<div id="div-comment-1332775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332775">
			April 11, 2018 at 2:09 pm</a>		</div>

		<p>The two cases indeed need pretty much the same mechanisms (conditionally nullifying in-flight instructions). But the branch-likely thing saves you a cycle (or, more specifically, lets you put an instruction into a cycle that would otherwise be wasted).</p>
<p>The whole thing about branch delay slots in general is that by the time the branch actually executes, more instructions have entered the pipeline and might have to get cancelled. If you do cancel them on a taken branch, that means the machine is going to be idle for the next few cycles after a branch. The idea with branch delay slots and branch-likely both is to get some value out of the instructions you&#8217;ve already fetched, but the actual use cases are somewhat complementary.</p>
<p>Into a regular branch delay slot, you can only schedule instructions that you _always_ want to execute. What this usually boils down to is trying to find one instruction from the basic block preceding the branch that the branch itself doesn&#8217;t depend on, and moving it into the branch delay slot. That&#8217;s great if you have such an instruction, but often you don&#8217;t.</p>
<p>The branch-likely thing allows you to grab an instruction from the basic block you&#8217;re branching to. Unless that instruction happens to be a branch itself, you can just grab the first instruction of that block (and then branch straight to the second instruction).</p>
<p>So having both branch delay slots and the branch-likely thing increases your pool of instructions you can pick from, and reduce the number of wasted cycles on a taken branch.</p>
<p>All this is nice if your pipeline is short enough that a taken branch only induces one extra cycle of latency (as was the case for the earliest MIPS chips), but by the time of the R4000 the pipeline had gotten longer, there were more cycles to fill, and it had become painfully obvious that clever hacks assuming a particular pipeline and latency were going to be liabilities in the long run. (Both the delay slot and the branch-likely hack are trouble if your pipeline doesn&#8217;t work exactly the same way as the pipeline of the machine they were originally designed for.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1332835">
				<div id="div-comment-1332835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332835">
			April 12, 2018 at 6:44 am</a>		</div>

		<p>I found the best instruction to put there was usually the loop incr instruction because you rarely care after the loop what the value of the counter is.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1332725">
				<div id="div-comment-1332725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332725">
			April 11, 2018 at 12:04 pm</a>		</div>

		<p>If you don&#8217;t want to deal with branch delay slots, always put a NOP after any kind of branch. Maybe the compiler will do that for you with -O0 (or whatever the equivalent was in Visual C++ at the time).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1332755">
				<div id="div-comment-1332755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332755">
			April 11, 2018 at 1:30 pm</a>		</div>

		<p>The earliest MIPS implementations (MIPS I architecture, the original &#8220;Microprocessor without Interlocked Pipeline Stages&#8221;) had a five-stage pipeline (IF, ID, EX, MEM, WB) and, if I remember correctly, had some trickery to evaluate the branch conditions early specifically to make sure that only one cycle is &#8220;burned&#8221; after branches, and then they made that the branch delay slot. (They also had load delay slots, because the result of loads was known by the end of MEM, which finishes at the same time at the succeeding instruction&#8217;s EX cycle, i.e. too late.)</p>
<p>By the R4000 (MIPS III architecture), there were (some) interlocks, load delay slots were gone, load latencies were another cycle longer, and branch delay slots still existed in the ISA but the actual delay was up to 3 cycles by then. (1 cycle covered by the branch delay slot, the next two were inserted speculatively and had to get nullified if the branch was found to be taken.) [Source: <a href="https://people.eecs.berkeley.edu/~kubitron/courses/cs252-S07/handouts/papers/R4000.pdf%5D" rel="nofollow">https://people.eecs.berkeley.edu/~kubitron/courses/cs252-S07/handouts/papers/R4000.pdf%5D</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1332795">
				<div id="div-comment-1332795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Clarkstone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332795">
			April 11, 2018 at 3:38 pm</a>		</div>

		<p>I have considered the possibility of a processor with a variable-length branch-delay slot to let programs be written with branch delay slots that could take advantage of future processors with longer pipelines: a jump would be split into an LJR instruction that loaded the jump-destination register (a specific special-purpose jump-register not a general-purpose register, and it must be in its &#8220;empty&#8221; state before loading), then another XJ instruction that executed the jump and invalidated the contents of the register (effectively the marker for the end of the branch-delay slot). When the instruction-fetcher got to an XJ instruction it would stall if necessary until the instruction-executor loaded the jump register.</p>
<p>A subroutine that did no branches itself could load its return address into the jump register as its first action before doing its main work.</p>
<p>I later noticed that the jump register can be thought of like a queue that could have 0 or 1 elements in it, which suggests the generalisation of a longer queue in later processors of the same ISA, for routines that can tell you what their next few jumps will be, e.g. code like<br />
&#8220;if i++ then p else q&#8221; will become something like:<br />
&#8220;&#8221;&#8221;<br />
LOAD i<br />
LJR_NZ p   // LJR conditional on value loaded being non-zero<br />
LJR_NZ r   // LJR conditional on value loaded being non-zero<br />
LJR_Z q    // LJR conditional on value loaded being zero<br />
INC    // in the branch delay slot<br />
STORE i    // in the branch delay slot<br />
XJ // to p or q<br />
p:<br />
&#8230; // p stuff<br />
XJ // always to r<br />
q:<br />
&#8230; // q stuff<br />
r:<br />
&#8220;&#8221;&#8221;<br />
and the instruction fetching could be all the way to &#8220;r:&#8221; before the &#8220;LOAD i&#8221; had finished.<br />
Code like &#8220;{if b then p else q} ; r; {if b then s else t}; u&#8221; where p/q/r/s do no jumps can happily push 4 addresses onto a jump queue the moment that b is known.</p>
<p>It&#8217;s not clear how this would interact with exceptions or interrupts, and it&#8217;s a bit crippled when you have subroutine call in either branch. For that matter, there&#8217;s probably not much point in mechanisms to let the instruction fetching get so far ahead of the instruction execution when delay slots are *already* hard to fill. Still a fun thing to think about.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1333095">
				<div id="div-comment-1333095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erkin Alp Güney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1333095">
			April 14, 2018 at 2:43 am</a>		</div>

		<p>What makes you believe XJ finalise-jump would be accomplished in single cycle?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1332825">
				<div id="div-comment-1332825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332825">
			April 12, 2018 at 4:00 am</a>		</div>

		<p>So whenever there&#8217;s an unexpected kernel transition, the kernel has to check whether the previous instruction is a branch so that it can resume it correctly? How does the kernel even know that the previous instruction exists? (I&#8217;m thinking you might have just jumped to the first instruction on a page and the previous page doesn&#8217;t exist.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1332845">
				<div id="div-comment-1332845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Giedrius</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332845">
			April 12, 2018 at 8:28 am</a>		</div>

		<p>I&#8217;d guess processor never updates IP to branch delay slot. So if kernel transition happens, kernel still sees the original branch IP.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1332875">
				<div id="div-comment-1332875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332875">
			April 12, 2018 at 9:19 am</a>		</div>

		<p>MIPS is well-documented on the Internet, probably because many schools use it in their assembly language / computer architecture class. Short answer: The processor provides enough information for the kernel to figure out what happened. For example, <a href="http://os161.eecs.harvard.edu/documentation/sys161-1.99.04/mips.html" rel="nofollow">the BD bit is set if the exception occurred in a branch delay slot</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1332865">
				<div id="div-comment-1332865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332865">
			April 12, 2018 at 8:50 am</a>		</div>

		<p>Could be worse: could be SuperH, where some instructions have branch delay and some don&#8217;t! :D (And in one case, you can even opt in to branch delays with the /s suffix.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>