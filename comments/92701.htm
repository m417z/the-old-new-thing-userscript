<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1 parent" id="comment-1220211">
				<div id="div-comment-1220211" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151223-00/?p=92701#comment-1220211">
			December 23, 2015 at 8:02 am</a>		</div>

		<p>I guess that&#8217;s the problem with C being the primary language of the Windows API, because in C++ this would probably have been solved with a base class and two derived classes&#8230;</p>
<p>//Nitpicker&#8217;s corner<br />
Why use a reinterpret_cast from void*, where a static_cast would suffice?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-2 parent" id="comment-1220221">
				<div id="div-comment-1220221" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151223-00/?p=92701#comment-1220221">
			December 23, 2015 at 9:59 am</a>		</div>

		<p>You know that Raymond is a fan of reinterpret_cast, don&#8217;t you? It&#8217;s like more brutal and dangerous variant of C-cast, while you can pretend you enjoy type safety of C++.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3 parent" id="comment-1220231">
				<div id="div-comment-1220231" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151223-00/?p=92701#comment-1220231">
			December 23, 2015 at 10:04 am</a>		</div>

		<p>I use <code>static_cast</code> when I&#8217;m converting between related pointers. But <code>void*</code> isn&#8217;t related to anything, so I use <code>reinterpret_cast</code> to emphasize &#8220;This is scary, you&#8217;d better be right because the compiler isn&#8217;t going to help.&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-4 parent" id="comment-1220251">
				<div id="div-comment-1220251" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151223-00/?p=92701#comment-1220251">
			December 23, 2015 at 1:24 pm</a>		</div>

		<p>I always end up seeing it in the opposite way. Because of that implicit conversion to void *, it is actually related to everything.<br />
Of course, the result is the same. You are going to have to be really sure when you cast it back, otherwise bad things are going to happen.<br />
I was just mentioning this because it was interesting how a differing point of view ended up with the same result.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1220263">
				<div id="div-comment-1220263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151223-00/?p=92701#comment-1220263">
			December 23, 2015 at 1:32 pm</a>		</div>

		<p>I tend to use <code>static_cast</code> for &#8220;The compiler will double-check me here&#8221; and <code>reinterpret_cast</code> for &#8220;Pay close attention here.&#8221; Although you can technically use <code>static_cast</code> with <code>void*</code>, I think it&#8217;s misleading and lets you hide a dangerous cast inside something that looks safe.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt depth-4" id="comment-1220272">
				<div id="div-comment-1220272" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151223-00/?p=92701#comment-1220272">
			December 23, 2015 at 11:28 pm</a>		</div>

		<p>It&#8217;s a pity that there is no compiler flag to mark all casts from void* (including typedef&#8217;ed) as dangerous. I&#8217;d also follow such cast with some assert() wherever possible.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1220233">
				<div id="div-comment-1220233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">praetorian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151223-00/?p=92701#comment-1220233">
			December 23, 2015 at 12:51 pm</a>		</div>

		<p>There is another option. unique_ptr has a nifty feature where the managed pointer type can be switched from T* to Deleter::pointer if that type exists. So just provide a specialization of LocalAlloc_delete for SECURITY_DESCRIPTOR</p>
<p>template<br />
struct LocalAlloc_delete<br />
{<br />
  void operator()(PSECURITY_DESCRIPTOR p) const throw( )<br />
  {<br />
    LocalFree(p);<br />
  }<br />
  using pointer = PSECURITY_DESCRIPTOR;<br />
};</p>
<p>Now unique_localptr will happily accept a PSECURITY_DESCRIPTOR</p>
<p><a href="http://rextester.com/UOC70003" rel="nofollow">http://rextester.com/UOC70003</a></p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1220242">
				<div id="div-comment-1220242" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">praetorian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151223-00/?p=92701#comment-1220242">
			December 23, 2015 at 12:53 pm</a>		</div>

		<p>Obviously I have no clue how to do code formatting in comments.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3" id="comment-1220262">
				<div id="div-comment-1220262" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151223-00/?p=92701#comment-1220262">
			December 23, 2015 at 1:31 pm</a>		</div>

		<p>I don&#8217;t think you can, so don&#8217;t worry. (P.S., cool trick.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1220282">
				<div id="div-comment-1220282" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151223-00/?p=92701#comment-1220282">
			December 24, 2015 at 1:13 am</a>		</div>

		<p>No problem, just change it to what&#8217;s expected.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1220291">
				<div id="div-comment-1220291" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151223-00/?p=92701#comment-1220291">
			December 24, 2015 at 2:30 am</a>		</div>

		<p>Instead of:</p>
<p>template using unique_localptr = std::unique_ptr&lt;T, LocalAlloc_delete&gt;;<br />
&#8230;<br />
unique_localptr sd(result);</p>
<p>why not</p>
<p>template<br />
std::unique_ptr&lt;T, LocalAlloc_delete&gt; unique_localptr(T* raw_ptr)<br />
{<br />
    return std::unique_ptr&lt;T, LocalAlloc_delete&gt;(raw_ptr);<br />
}<br />
&#8230;<br />
auto sd(unique_localptr(result));</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1220311">
				<div id="div-comment-1220311" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">French Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151223-00/?p=92701#comment-1220311">
			December 24, 2015 at 7:18 am</a>		</div>

		<p>Wouldn&#8217;t it have been better to name the generic security descriptor SECURITY_DESCRIPTOR_GENERIC and create a SECURITY_DESCRIPTOR_ABSOLUTE alias for SECURITY_DESCRIPTOR (keeping the old name around for compatibility)?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>