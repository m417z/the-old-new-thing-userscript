<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-471453">
				<div id="div-comment-471453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-471453">
			February 12, 2007 at 10:30 am</a>		</div>

		<p>This seems to be another of those things where the OS can clean up after processes quite well, but it can&#8217;t clean up after DLLs very well at all. &nbsp;Opened file handles, for instance, are treated the same way &#8212; if your DLL opens a file but the file isn&#8217;t closed before the DLL is unloaded, the file will stay open in the hosting process until it exits (at which point the OS closes the file). &nbsp;Memory is the same way &#8212; pagetable allocations are per process, not per module.</p>
<p>In any case, it&#8217;s easy to track which process has registered a window class, or opened a file, or allocated memory. &nbsp;So you can clean up after a process exits, whether it was a clean exit or an unclean one. &nbsp;But it&#8217;s not easy (with current OSes anyway; I don&#8217;t know whether it&#8217;s possible with some other OS design) to track which module did these things, so you can&#8217;t clean up after a DLL unload.</p>
<p>In short: &nbsp;DLLs are not processes, and it&#8217;s currently not possible to treat them like they were. &nbsp;So don&#8217;t. &nbsp;;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-471473">
				<div id="div-comment-471473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mork</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-471473">
			February 12, 2007 at 10:46 am</a>		</div>

		<p>As an aside :</p>
<blockquote><p>
  &gt;You&#8217;ve made the kernel call into the window manager.
</p></blockquote>
<p>You could have some notification system (something like KiRegisterDllUnloadNotifyHandlerPlease :)) which does not create dependencies because works the other way (the WM loads and asks the kernel to be notified) and has the advantage of being generic enough (it can be used by .. whatever other software has a similar need).</p>
<p>This is not to say that I think the decision is wrong &#8211; I think it was the right one but the upward dependency argument can be easily circumvented if it&#8217;s worth to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-471493">
				<div id="div-comment-471493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-471493">
			February 12, 2007 at 11:18 am</a>		</div>

		<p>BrianK &gt; Uh &#8211; what about where a DLL creates a resource which the caller is supposed to clean up? Say you write a library of useful functions that includes my_strdupf(char const *, &#8230;) that works like sprintf() but allocates the return buffer itself so you don&#8217;t have to, like strdup(). As with strdup(), it&#8217;s up to the caller to free() the memory returned by the function.</p>
<p>Now, what happens when your useful library gets unloaded? Suddenly all those strings returned by my_strdupf() that your program was hanging onto and was going to free in good time get deleted from underneath it! As soon as you try to use them, BOOM, invalid memory access.</p>
<p>You can do the same thing with file handles; write a function that searches, say, the MY_SPECIAL_PATH environment variable for a bare filename (no preceding directory) to open and returns an otherwise normal file handle to the caller. Read and write with fread()/fwrite()/fprintf(), and close with fclose(). Again, it all goes pear-shaped when the DLL gets unloaded and the app tries to access a file that was previously open.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-471603">
				<div id="div-comment-471603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-471603">
			February 12, 2007 at 4:59 pm</a>		</div>

		<blockquote><p>
  it&#8217;s impractical to track every resource a dll allocates (e.g. files) so why give window classes special treatment?
</p></blockquote>
<p>They track every memory allocation, and thus every new object, why don&#8217;t the file and UI APIs work the same way? They could even use reference counting (or various other methods) to do garbage collection and ensure that something isn&#8217;t needed any more before it&#8217;s unloaded, and unloaded when it isn&#8217;t needed any more.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-471613">
				<div id="div-comment-471613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-471613">
			February 12, 2007 at 5:20 pm</a>		</div>

		<blockquote><p>
  They track every memory allocation
</p></blockquote>
<p>How so? Memory is tracked just like file handles and so on. When the process exits, the OS cleans up the memory, just like it cleans up file, window, socket, and other handles.</p>
<p>The point of the article is that these things are &quot;tracked&quot; by PROCESS not by MODULE, so it can be automatically freed when the process exits but not when the module is unloaded.</p>
<p>Actually, the point is that you should probably be freeing these things yourself, rather than relying on the system to do it for you&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion odd alt thread-odd thread-alt depth-1" id="comment-471633">
				<div id="div-comment-471633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-471633">
			February 12, 2007 at 5:25 pm</a>		</div>

		<p>Nar, memory allocations are not tracked. Their lifetime is intrinsic, not associated to the lifetime of any other object (well, no&#8230; they are tied to the heap they&#8217;re allocated from. But the heap, in turn, isn&#8217;t tied to anything)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-471513">
				<div id="div-comment-471513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-471513">
			February 12, 2007 at 11:53 am</a>		</div>

		<p>Um, OK? &nbsp;I don&#8217;t think I said that the kernel *should* try to free resources that a DLL allocated when the DLL was unloaded; I just said that with current OSes (that I know of), it can&#8217;t, because that stuff isn&#8217;t tracked per module. &nbsp;(This applies to more than just window classes, in other words.) &nbsp;You point out a reason that memory shouldn&#8217;t be tracked per module, but I agree: it shouldn&#8217;t. &nbsp;In fact, it can&#8217;t. &nbsp;;-)</p>
<p>Now, when a DLL allocates memory for you (e.g. your my_strdupf function), the API is supposed to document how to free that memory. &nbsp;And most of the time, on Windows anyway, the DLL will have to provide a separate function that the caller is supposed to use to free the memory &#8212; this way, the DLL can use its own heap to do the free. &nbsp;And in that case, if the DLL gets unloaded, you can&#8217;t free the memory anymore anyway; you have to wait for the process to die. &nbsp;Reloading the DLL *might* work, but I doubt it: the heap structure that it uses would have to be self-describing enough that it can handle freeing memory without the rest of the heap that it came from being around anymore.</p>
<p>(And on Windows, there are several different C libraries. &nbsp;If your program is linked against a different library than the DLL &#8212; or even a different library version, e.g. multi-thread vs. single-thread &#8212; then if you try to free() the memory yourself you&#8217;ll cause problems. &nbsp;You have to call the free() that matches the malloc() that was originally used. &nbsp;So unless you *know* that your callers will *always* use the same C library that you&#8217;re using, don&#8217;t write your my_strdupf function that way. &nbsp;Provide a call into your DLL instead, so your DLL can use your C library&#8217;s free() function. &nbsp;No, I don&#8217;t like this design, but it&#8217;s a consequence of the way the Windows C libraries were written way back when, and I doubt it can be changed now. &nbsp;I actually like systems where there&#8217;s a single C library for everything, and that library handles back-compat on its own (using versioned symbols to keep the old code around in the tree; yes, this requires linker support for user programs). &nbsp;But that isn&#8217;t going to happen anytime soon on Windows.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-471663">
				<div id="div-comment-471663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-471663">
			February 12, 2007 at 9:54 pm</a>		</div>

		<p>Something out-of-topic here&#8230;</p>
<p>I installed fiddler yesterday, and today when I visited this blog I noticed the following error:</p>
<p>Fiddler has detected a protocol violation in session #1012.</p>
<p>The Server did not return properly formatted HTTP Headers. HTTP headers</p>
<p>should be terminated with CRLFCRLF. &nbsp;These were terminated with LFLF.</p>
<p>The error does not occur in other&#8217;s blog like Larry&#8217;s or Rico&#8217;s, don&#8217;t everyone in blogs.msdn.com use the same blog web application?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-471563">
				<div id="div-comment-471563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Foolhardy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-471563">
			February 12, 2007 at 1:59 pm</a>		</div>

		<p>BrianK, single C library: I think that the Win32&#8217;s kernel32.dll was designed to be the common library for that kind of thing; kernel32.dll does a lot of things that a classic UNIXy C library does like a front-line API for accessing files, heap functions (three sets actually: Heap*, Local* and Global*), text conversion functions, process, console, threading, etc.</p>
<p>There are lots of Win32 components that return buffers to the caller from kernel32&#8217;s &quot;local&quot; heap to be freed by LocalFree. See</p>
<p><a rel="nofollow" target="_new" href="http://www.google.com/search?hl=en&amp;q=localfree+site%3Amsdn2.microsoft.com&amp;btnG=Search" rel="nofollow">http://www.google.com/search?hl=en&#038;q=localfree+site%3Amsdn2.microsoft.com&#038;btnG=Search</a></p>
<p>A good article on different standard Windows heaps:</p>
<p><a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/ms810466.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/ms810466.aspx</a></p>
<p>Back on topic, a little nit about the kernel having to call back into user mode: isn&#8217;t the module loader implemented mostly in user mode, in the ntdll!Ldr* functions? AFAIK, the only thing the kernel does is provide a little special handling for mapping image sections. Things like load/unload notification are done in user mode. Even so, the only function that would need to be modified is kernel32!FreeLibrary, to find and delete window classes registered with the same HMODULE. This would still be a serious upwards-dependency since window classes are implemented in user32, which kernel32 isn&#8217;t and shouldn&#8217;t be dependent on.</p>
<p>And as BrianK said, it&#8217;s impractical to track every resource a dll allocates (e.g. files) so why give window classes special treatment?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-471683">
				<div id="div-comment-471683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-471683">
			February 12, 2007 at 11:03 pm</a>		</div>

		<p>Cheong: That happens on the request to <a href="http://www.assoc-amazon.com" rel="nofollow">http://www.assoc-amazon.com</a> &#8212; it&#8217;s not a problem with blogs.msdn.com per-se.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-471713">
				<div id="div-comment-471713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-471713">
			February 13, 2007 at 3:01 am</a>		</div>

		<p>Dean: You&#8217;re right, I should have checked the offening session URL first.</p>
<p>Amazing to find that it also misspelled the word &quot;Connection&quot; as &quot;nnCoection&quot; in the header&#8230; :O</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-471723">
				<div id="div-comment-471723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-471723">
			February 13, 2007 at 4:26 am</a>		</div>

		<blockquote><p>
  Dean: You&#8217;re right, I should have checked the offening session URL first.</p>
<p>  Amazing to find that it also misspelled the word &quot;Connection&quot; as &quot;nnCoection&quot; in the header&#8230; :O
</p></blockquote>
<p>See Fun with HTTP Headers by Andrew Wooster:</p>
<p><a rel="nofollow" target="_new" href="http://www.nextthing.org/archives/2005/08/07/fun-with-http-headers" rel="nofollow">http://www.nextthing.org/archives/2005/08/07/fun-with-http-headers</a></p>
<p>&quot;imdb.com, amazon.com, gamespy.com, and google.com have all at various times used these or similar misspellings of connection, and I’m not by any means the first to have noticed. My first thought was that this was just a typo. After more consideration, however, I now believe this is something done by a hackish hardware load balancer trying to “remove” the connection close header when proxying for an internal server. That way, the connection can be held open and images can be transmitted through the same TCP connection, while the backend web server doesn’t need to be modified at all. It just closes the connection and moves on to the next request&#8230;&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-471733">
				<div id="div-comment-471733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-471733">
			February 13, 2007 at 8:24 am</a>		</div>

		<p>&gt; BrianK, single C library: I think that the Win32&#8217;s kernel32.dll was designed to be the common library for that kind of thing</p>
<p>Except it&#8217;s not a *C* library: a program intended to be portable can&#8217;t use it. &nbsp;;-)</p>
<p>There is no malloc()/free() in kernel32, only Global*, Local*, and Heap* &#8212; some of which are direct drop-in replacements for malloc/free (so portability can be obtained with a pair of #defines), but none of which can be *mixed* with malloc/free on a single buffer. &nbsp;If your DLL uses malloc, then the calling program can&#8217;t use GlobalFree, LocalFree, *or* HeapFree. &nbsp;It *must* use free() (and it *must* be the free() from the same C library that the DLL used).</p>
<p>But this is getting a bit off topic; I think I&#8217;ll stop here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-472473">
				<div id="div-comment-472473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.alex-ionescu.com' rel='external nofollow' class='url'>Alex Ionescu</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-472473">
			February 15, 2007 at 2:22 pm</a>		</div>

		<p>&#8220;The third reason is architectural. Unregistering a module&#8217;s classes when it unloads means that there is now an &#8220;upward dependency&#8221;: You&#8217;ve made the kernel call into the window manager. When a module unloads, the kernel needs to call into the window manager to say, &#8220;Hey, I just unloaded this module. You might want to clean up stuff.&#8221; This means that non-GUI programs still have a dependency on the window manager, something you hard-core command line junkies probably would find distasteful. &#8220;Why does my non-GUI program have a dependency on the GUI?&#8221;&#8221;</p>
<p>Unless I&#8217;m misunderstanding you, that&#8217;s not true at all. The kernel already does this in PspExitThread and PspExitThread by using the Win32k Process/Thread callouts, if the thread/process is a GUI One (by checking if KTHREAD-&gt;Win32Thread is != NULL). So why couldn&#8217;t the same check be done to DLL unload, since it&#8217;s already being done with threads/processes.</p>
<div class=post>[<i>I thought we were supposed to be removing these dependencies not adding to them. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-473423">
				<div id="div-comment-473423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070212-01/?p=28053#comment-473423">
			February 18, 2007 at 10:32 am</a>		</div>

		<blockquote><p>
  They track every memory allocation, and thus</p>
<p>  every new object, why don&#8217;t the file and UI</p>
<p>  APIs work the same way?
</p></blockquote>
<p>Will all of you stop being lazy arses and start writing your own cleanup code instead of relying on the OS to do the cleanup for you?!?!?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>