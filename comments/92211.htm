<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1215611">
				<div id="div-comment-1215611" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151127-00/?p=92211#comment-1215611">
			November 27, 2015 at 7:15 am</a>		</div>

		<p>In your &quot;shrinkable&quot; sample, shouldn&#39;t you loop? If the file can both grow and be shrunk by external actors, isn&#39;t it possible that it shrank again between your UnlockFile and LockFile inside the if?</p>
<div class="post">[<em>You&#39;re right. Better would be to require that the file be locked when shrunk. Then you wouldn&#39;t need to re-lock. (Basically, fall back to &quot;Use byte 0xFFFFFFFF`FFFFFFFF has the &quot;I&#39;m changing the file size&quot; signal.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1215591">
				<div id="div-comment-1215591" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151127-00/?p=92211#comment-1215591">
			November 27, 2015 at 8:54 am</a>		</div>

		<p>FILE_APPEND_DATA is tricky unless you like occasional split writes (therefore I only use it for log files). Good call on LockFile. LockFile doesn&#39;t work reliably across a network due to unavoidable physics. There ought to be a solution using transactional filesystem (handle the rollbacks by starting again).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1215581">
				<div id="div-comment-1215581" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151127-00/?p=92211#comment-1215581">
			November 27, 2015 at 9:05 am</a>		</div>

		<p>What about using</p>
<p>FILE_APPEND + GetFileSize + WriteFile.</p>
<p>Eventualy WriteFile would fail if you&#39;re NOT at the end of file and in this case retry the operation.</p>
<div class="post">[<em>If you open in FILE_APPEND_DATA mode, then the WriteFile ignores your current position and always appends, as noted in the linked article. (I.e., WriteFile succeeds even if you are not at the end of the file.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1215561">
				<div id="div-comment-1215561" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151127-00/?p=92211#comment-1215561">
			November 27, 2015 at 11:03 am</a>		</div>

		<p>Apart from &quot;being sloppy&quot; (and preventing writing to earlier parts of the file, if that&#39;s something you need) are there any other downsides to locking the entire file?</p>
<p>Ie. is it more expensive in addition to being more expansive?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1215551">
				<div id="div-comment-1215551" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151127-00/?p=92211#comment-1215551">
			November 27, 2015 at 12:56 pm</a>		</div>

		<p>@Michael</p>
<p>Disclaimer: I&#39;m just guessing here.</p>
<p>On its own, probably not at all. With no readers, again, probably not.</p>
<p>Where it would matter is if somebody wanted to read the first however many bytes/chunks/logs of the file. If you only lock the &#39;end&#39; of the file and the reader only locks the &#39;beginning&#39;, both can work concurrently, objectives permitting.</p>
<p>Going off on a tangent:</p>
<p>You could probably make the data consumer process the file a chunk at a time whenever the filesize increases. At that point, you should probably just use a pipe (or named pipe, or FIFO, etc.). For saving the data as it goes through (if you want that), you use a &quot;tee&quot; program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1215281">
				<div id="div-comment-1215281" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Juan Garcia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151127-00/?p=92211#comment-1215281">
			November 30, 2015 at 7:55 am</a>		</div>

		<p>I am afraid to ask. Yet the desire to know the answer beats me. Why don&#39;t you use a critical section when writing the file? (Just asking)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1215271">
				<div id="div-comment-1215271" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sean</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151127-00/?p=92211#comment-1215271">
			November 30, 2015 at 8:33 am</a>		</div>

		<p>@Juan Garcia</p>
<p>Because a critical section only works within a single process. The customer was asking for a solution which would work not only cross-process, but also cross-computer, as well as handling the possibility of the same file being accessed through different paths.</p>
<p>The existing solution the customer had used mutexes, which are named and cross-process (a process can access existing mutexes created by other processes using their names), but those do not work with processes on different computers. The mutex solution also required each process writing the file to use the same mutex name for that file, and their approach (to use the file&#39;s path) is not guaranteed to work (files can have multiple paths, e.g. due to a hard link to the file).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>