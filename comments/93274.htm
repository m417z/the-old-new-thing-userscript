<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1232741">
				<div id="div-comment-1232741" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232741">
			April 8, 2016 at 7:40 am</a>		</div>

		<p>&#8220;As a second mark of good fortune, the flag is ignored by older versions of Windows, so you can go ahead and pass the flag unconditionally&#8221;</p>
<p>It&#8217;s good fortune in this case, and certainly used to be common everywhere, but is the behaviour of ignoring unknown flags recommended/allowed for new APIs?</p>
<p>I know that some library vendors have had issues where they&#8217;ve ignored unknown flags before, and users of the library have ended up passing in garbage values, because that worked. However, when new flags are defined for future API-/ABI-compatible library updates, those users end up enabling them, and getting behaviour they didn&#8217;t actually want.</p>
<p>Conversely, if code using the new API flags ends up getting (dynamically?) linked against an old version of the library, where the library *doesn&#8217;t* know about those flags &#8211; some of which might enable security features the client is relying on &#8211; the client also doesn&#8217;t get the behaviour they asked for, but silently. They&#8217;d rather get a &#8220;not supported&#8221; error in that case.</p>
<p>It&#8217;s another one of those times when Postel&#8217;s Law, which was great for helping get new technologies off the ground, ends up causing unintended problems further down the line. See also: tag soup.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1232764">
				<div id="div-comment-1232764" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232764">
			April 8, 2016 at 9:58 am</a>		</div>

		<p>The AssocQueryString function did the wrong thing (accepting invalid flags), but we got lucky and it happens to work out in our favor. Most of the time, these mistakes lead to sadness.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1232773">
				<div id="div-comment-1232773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232773">
			April 8, 2016 at 1:08 pm</a>		</div>

		<p>Um, yeah. That&#8217;s why I was asking if this behaviour is still recommended/allowed for new APIs.</p>
<p>?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1232781">
				<div id="div-comment-1232781" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232781">
			April 8, 2016 at 2:21 pm</a>		</div>

		<p>So in a world where you can&#8217;t pass invalid flags to functions, and where you can&#8217;t reliably get the OS version, what is the recommended way to write code that targets different versions?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1232803">
				<div id="div-comment-1232803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232803">
			April 9, 2016 at 9:56 am</a>		</div>

		<p>You declare that your app has been tested with Windows XP, Windows Vista, and Windows 7. Then you ask what version you are running on. If running on Windows 7 or higher, you will be told Windows 7. At which point you know that the UNKNOWN flag is supported.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1233053">
				<div id="div-comment-1233053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RKZENITH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1233053">
			April 12, 2016 at 1:57 pm</a>		</div>

		<p>Who do we ask about the version?  The user?  Because, as Ivo says, we&#8217;re repeatedly told not to ask Windows.</p>
<p>Specifically, from the MSDN page for VerifyVersionInfo:<br />
&#8220;Identifying the current operating system is usually not the best way to determine whether a particular operating system feature is present. This is because the operating system may have had new features added in a redistributable DLL.&#8221;</p>
<p>And the MSDN page for GetVersionEx:<br />
&#8220;With the release of Windows 8.1, the behavior of the GetVersionEx API has changed in the value it will return for the operating system version. The value returned by the GetVersionEx function now depends on how the application is manifested.  Applications not manifested for Windows 8.1 or Windows 10 will return the Windows 8 OS version value (6.2). Once an application is manifested for a given operating system version, GetVersionEx will always return the version that the application is manifested for in future releases.&#8221;</p>
<p>The way that I read those two pages, starting with 8.1, Windows will return the version that you tell it to return, not the version that&#8217;s actually running, completely defeating the point of doing a version check in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1233605">
				<div id="div-comment-1233605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1233605">
			April 15, 2016 at 9:03 pm</a>		</div>

		<p>Apparently, I can&#8217;t reply to RKZENITH. This is a stupid threading model. Anyway&#8230;</p>
<p>The point of doing a version check is to verify the behaviour of the OS. The manifest says &#8220;I have verified my application with the behaviour of .&#8221;<br />
If you&#8217;re using APIs that only exist in Windows 8 and are manifested for Vista/7/8, and you get back &#8220;Win7&#8221;, you know not to use those APIs. </p>
<p>If you&#8217;re depending on behaviour that existed in Win7 and you get back &#8220;Win7,&#8221; you know you&#8217;re at least running in a compatibility layer for Win7.</p>
<p> If you&#8217;re depending on bugs that existed in Win7, you should stop because that&#8217;s stupid.</p>
<p>If you want to know if you&#8217;re on a newer OS version than you&#8217;ve tested on, you should stop. There&#8217;s no valid reason to do that. If you *are* doing it, you&#8217;re probably trying to annoy the user by telling them that your application doesn&#8217;t work on their OS, despite it probably working perfectly fine.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1232751">
				<div id="div-comment-1232751" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232751">
			April 8, 2016 at 7:56 am</a>		</div>

		<p>| Older versions of Windows didn’t have the “Open unknown file” handler</p>
<p>Of course they have: see HKCR\unknown\shell\openas, introduced with Windows 95</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1232753">
				<div id="div-comment-1232753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232753">
			April 8, 2016 at 8:18 am</a>		</div>

		<p>&#8220;This is not exactly the same as Find­Executable because that function has special-case code for when you pass in, for example, excel.exe. In those cases, the Find­Executable function just returns the file itself, since executables are their own handlers.&#8221;</p>
<p>I find that kind of surprising.  Excel.exe isn&#8217;t really its own handler, since you don&#8217;t get useful results if you run excel.exe excel.exe (i.e. if you pass excel.exe as a parameter to excel.exe).</p>
<p>If the .exe really must return a handler (as GetExecutable decided to), I&#8217;d expect the handler for excel.exe to be something more like cmd.exe (since you can do cmd.exe /cexcel.exe) or explorer.exe (since explorer.exe excel.exe seems to work) (obviously I know in 16-bit Windows it would have been command.com and progman.exe &#8211; I haven&#8217;t got a 16-bit installation handy to see what happens when these are passed exes as parameters).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ted-2 odd alt thread-odd thread-alt depth-1 parent" id="comment-1232763">
				<div id="div-comment-1232763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Glassware' rel='external nofollow' class='url'>Glassware</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232763">
			April 8, 2016 at 8:19 am</a>		</div>

		<p>I&#8217;m amazed to discover that DDE still exists.</p>
<p>I wrote a DDE library for Windows 3.0 so that I could connect to a program that shared its log data via DDE; and I remember at the time thinking that DDE really seemed quite half-baked.  Does it still function today?  Is it still technically supported or has it been fully replaced by OLE Automation?</p>
<p>I am fascinated however with the interesting collection of metaphors in windows.  Originally, all communication was done via messages that would get sent to your message loop.  Nowadays you have a ton of different methods of getting callback via remote procedure invocation.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao even depth-2" id="comment-1232791">
				<div id="div-comment-1232791" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232791">
			April 8, 2016 at 5:38 pm</a>		</div>

		<p>DDE is still supported. Win32 even has special support for the DDE messages in addition to DDEML. It is probably better to use the messages directly so that for example timeouts on DDE broadcasts are possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1232793">
				<div id="div-comment-1232793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232793">
			April 9, 2016 at 2:06 am</a>		</div>

		<p>I have written DDE code only once 15 years ago or so, but it&#8217;s still in use today: jumping to a specific target in a PDF using Adobe Reader for our internal help feature.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hankhein even thread-even depth-1 parent" id="comment-1232771">
				<div id="div-comment-1232771" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henri+Hein' rel='external nofollow' class='url'>Henri Hein</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232771">
			April 8, 2016 at 12:51 pm</a>		</div>

		<p>The code snip says ASSOCF_INIT_INGORENUNKNOWN.  The comments say ASSOCF_INIT_UNKNOWN.  I think in both cases you mean   ASSOCF_INIT_IGNOREUNKNOWN.  It&#8217;s the only ASSOCF flag with both INIT and UNKNOWN in it, that I could find.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1232813">
				<div id="div-comment-1232813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232813">
			April 10, 2016 at 8:08 pm</a>		</div>

		<p>I was wondering about that. Also about why we might wish to ignore known nuns.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-dwalker-wk even depth-3" id="comment-1232911">
				<div id="div-comment-1232911" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232911">
			April 11, 2016 at 11:50 am</a>		</div>

		<p>You should NEVER ignore known nuns!  Didn&#8217;t you see the movie The Blues Brothers?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt depth-2" id="comment-1232814">
				<div id="div-comment-1232814" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232814">
			April 10, 2016 at 10:55 pm</a>		</div>

		<p>It seems to me that the description of this flag on MSDN is somewhat problematic too.</p>
<p>&#8220;Introduced in Windows 7. Specifies that the &#8220;Unknown&#8221; ProgID should be ignored; instead, fail.&#8221;</p>
<p>Sounds to me that if &#8220;unknown&#8221; and &#8220;known&#8221; handler both exist, it&#8217;ll still return error (i.e.: fail).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>