<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-280063">
				<div id="div-comment-280063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280063">
			June 6, 2005 at 9:07 am</a>		</div>

		<p>Am I missing something or is just that the event is simply created as signaled (the third param in CreateEvent) so Wait&#8230; function is not supposed to wait by design?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-280073">
				<div id="div-comment-280073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.valhallalegends.com/skywing' rel='external nofollow' class='url'>Skywing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280073">
			June 6, 2005 at 9:08 am</a>		</div>

		<p>You need to request the SYNCHRONIZE standard access right to an object in order to be able to use WaitForXxx on it.  This was not done with the OpenEvent() call &#8212; the handle returned by OpenEvent here can only be used with SetEvent/PulseEvent/ResetEvent.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-280083">
				<div id="div-comment-280083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280083">
			June 6, 2005 at 9:09 am</a>		</div>

		<p>Because the event is created in a signaled state (3rd parameter of TRUE).  The wait in the 2nd process will see that and return.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-280093">
				<div id="div-comment-280093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280093">
			June 6, 2005 at 9:17 am</a>		</div>

		<p>CreateEvent&#8217;s third parameter is bInitialState: &quot;If this parameter is TRUE, the initial state of the event object is signaled; otherwise, it is nonsignaled.&quot; (MSDN)<br />
<br />Here, it is TRUE, hence the event is in the signaled state.<br />
<br />Now, &quot;The WaitForSingleObject function returns when the specified object is in the signaled state or the time-out interval elapses.&quot; (MSDN)<br />
<br />So, WaitForSingleObject returns.<br />
<br />Or did I miss something?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-280103">
				<div id="div-comment-280103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wound</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280103">
			June 6, 2005 at 9:19 am</a>		</div>

		<p>It seems to me as if both AC&#8217;s and skywings comments are correct. Assuming that hEventA is created first, then even if the desired access for open event was (EVENT_MODIFY_STATE | SYNCHRONIZE) the wait would return immediately. The MSDN docs also say that the event ought to have a &quot;Local&quot; or &quot;Global&quot; prefix to cope with fast user switching.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-280123">
				<div id="div-comment-280123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Denis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280123">
			June 6, 2005 at 10:20 am</a>		</div>

		<p>The event existed prior to the call to CreateEvent (from process C). Process C created this as a Manual Reset Event initially set. The params for the type of event and its state are ignored in Process A since the event already exists.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-280223">
				<div id="div-comment-280223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">toomuchwin32</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280223">
			June 6, 2005 at 11:56 am</a>		</div>

		<p>Well you opened the event with EVENT_MODIFY_STATE but not with SYNCHRONIZE. So you can set the event but the handle that you got back with the OpenEvent call does not have permissions to wait on it.</p>
<p>This musters as a puuzzle in Microsoft? I am really surprised</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-280233">
				<div id="div-comment-280233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ignacio Burgue&#241;o</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280233">
			June 6, 2005 at 12:10 pm</a>		</div>

		<p>The desired access param for the OpenEvent call should additionally have SYNCHRONIZE rights in order to use the handle in a WaitForSingleObject, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-280273">
				<div id="div-comment-280273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thales</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280273">
			June 6, 2005 at 2:38 pm</a>		</div>

		<p>What does WaitForSingleObject return?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-280363">
				<div id="div-comment-280363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Normski</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280363">
			June 7, 2005 at 5:30 am</a>		</div>

		<p>The 3rd parameter of the CreateEvent function states that the initial condition of the event will be set to this, which is in this case TRUE. WaitForSingleObject see that the event has been singled therefore return immediately.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-280373">
				<div id="div-comment-280373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280373">
			June 7, 2005 at 7:39 am</a>		</div>

		<p>Re: the initial confusion: Even the first time I saw CreateEvent (it was really long long ago) I found these two BOOL parameters very, very unlucky. I never tried to remember which is which. I immediatelly made two my functions like CreateManualResetEvent and  CreateAutoResetEvent. One BOOL less, the remaining one was then clearly the initial state, and the nature of the event was also readable and easy to be found with &quot;Find in files&quot;.</p>
<p>Alternatively, the second parameter should have been made accepting some EV_MANUAL or EV_AUTO constants and not BOOL. Of course it can&#8217;t be changed anymore, but I wanted to point at it as the example of the unlucky design decision.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-280383">
				<div id="div-comment-280383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rich Dutton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280383">
			June 7, 2005 at 8:48 am</a>		</div>

		<p>If the named event already exists CreateEvent does not fail, as one may expect, but rather returns a handle to the <em>already created</em> object. In the case I would imagine that the event was created by another (possibly malicious) process that set the event on creation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-280413">
				<div id="div-comment-280413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/06/07/426296.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280413">
			June 7, 2005 at 11:03 am</a>		</div>

		<p>Watch your access masks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-280693">
				<div id="div-comment-280693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050606-34/?p=35433#comment-280693">
			June 7, 2005 at 7:26 pm</a>		</div>

		<p>Tuesday, June 07, 2005 7:39 AM by AC</p>
<p>&gt; I found these two BOOL parameters very, very<br />
<br />&gt; unlucky.</p>
<p>Actually one is bad enough, like an MFC function that copies data between UI controls and class variables.  Which direction is TRUE and which direction is FALSE?</p>
<p>&gt; Alternatively, the second parameter should<br />
<br />&gt; have been made accepting some EV_MANUAL or<br />
<br />&gt; EV_AUTO constants and not BOOL. Of course it<br />
<br />&gt; can&#8217;t be changed anymore,</p>
<p>Yes it can.  For backwards compatibility the BOOL values will still be accepted, but additional definitions can be added for human-readable enum values or macros.  It isn&#8217;t even necessary to change Microsoft&#8217;s DLLs.  Just a change to .h files and MSDN pages can make it possible for programmers to add more human-readability to new code.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>