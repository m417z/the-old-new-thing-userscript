<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-849873">
				<div id="div-comment-849873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rich</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849873">
			July 30, 2010 at 7:33 am</a>		</div>

		<p>Hey, great post. The exact type of thing that gets me started, and I can dive deeper if needed. This will be really handy in sept. when I take my final semester in Comp. Sci. It&#39;s going to be a rough semester, these timbits of info really help.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-849893">
				<div id="div-comment-849893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849893">
			July 30, 2010 at 8:49 am</a>		</div>

		<p>Thank you so much for getting back to in-depth, hard-to-get, advance debugging technique!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-849903">
				<div id="div-comment-849903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Todd A.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849903">
			July 30, 2010 at 10:11 am</a>		</div>

		<p>Is there any documentation on the structure that we are traversing in this article? Even if the EXACT structure is generated by the VC 8.23.3737 compiler ONLY, I&#39;d be curious to see what information kicks around after an exception.</p>
<p>Alternatively, is the traversing you have shown in this article the only traversing that can be safely done with the application in this exceptional state?</p>
<p>And finally&#8230; How do you learn about these techniques or develop them? Is it because you have internal Microsoft documentation for the exception structures generated or are there books that will show you how to derive this information?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-849913">
				<div id="div-comment-849913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben C.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849913">
			July 30, 2010 at 10:54 am</a>		</div>

		<p>If you have a pointer to the object, and that object has virtual functions, there is a strong probability that the object will have a vtable pointer. &nbsp;If you have symbols loaded for that object, then the debugger will usually tell you the type of the object based off of that vtable information.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-849923">
				<div id="div-comment-849923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849923">
			July 30, 2010 at 10:54 am</a>		</div>

		<p>Very Interesting.</p>
<p>Is there a similar way to do this in the Visual Studio debugger when you&#39;re in a catch(&#8230;) block? (Or maybe there&#39;s a build in way to display the exception type that I&#39;ve overlooked)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-849963">
				<div id="div-comment-849963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849963">
			July 30, 2010 at 4:23 pm</a>		</div>

		<p>Note that this information falls under the category of implementation detail. There is no guarantee that this method will continue to work in the future, so don&#39;t write code that relies on it. It&#39;s just a debugging tip.</p>
<p>You should format that as big red and ugly. And still everybody will ignore it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-849983">
				<div id="div-comment-849983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Felix Wyss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849983">
			July 31, 2010 at 1:28 pm</a>		</div>

		<p>Filling in some blanks based on information I&#39;ve collected and reverse engineered. </p>
<p>Labeling the structure pointed to by the ExceptionInformation[2] member of EXCEPTION_RECORD as &quot;A&quot;, we have the following:</p>
<p>*A*</p>
<p>DWORD &nbsp;bitmask; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Probably: 1=Const, 2=Volatile</p>
<p>DWORD &nbsp;destructor; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // RVA (Relative Virtual Address) of destructor for that exception object</p>
<p>DWORD &nbsp;unknown;</p>
<p>DWORD &nbsp;catchableTypesPtr; &nbsp; &nbsp;// RVA of instance of type &quot;B&quot;</p>
<p>*B*</p>
<p>// Array of RVAs of descriptors (type &quot;C&quot;) describing types as which the thrown object may be caught. &nbsp;</p>
<p>// The most specific/derived type is listed first.</p>
<p>DWORD &nbsp;count;</p>
<p>DWORD &nbsp;catchableTypes[count];</p>
<p>*C* </p>
<p>DWORD &nbsp;someBitmask;</p>
<p>DWORD &nbsp;typeInfo; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // RVA of std::type_info for that type</p>
<p>DWORD &nbsp;memberDisplacement; &nbsp; // Add to ExceptionInformation[1] in EXCEPTION_RECORD to obtain &#39;this&#39; pointer.</p>
<p>DWORD &nbsp;virtBaseRelated1; &nbsp; &nbsp; // -1 if no virtual base</p>
<p>DWORD &nbsp;virtBaseRelated2; &nbsp; &nbsp; // ?</p>
<p>DWORD &nbsp;objectSize; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Size of the object in bytes</p>
<p>DWORD &nbsp;probablyCopyCtr; &nbsp; &nbsp; &nbsp;// RVA of copy constructor (?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-849993">
				<div id="div-comment-849993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Morten</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849993">
			August 1, 2010 at 8:20 am</a>		</div>

		<p>It strikes me that given that this is something people in the real world use as part of their job, it should probably be locked down or have a tool for somehow helping one get at the info. I mean, when I debug $SYSTEM I want as much information about what went on at the time of the incident as possible, up to and including implementation details like which class was most intimately involved in the crash and where the offending object was living at the time. Sure it might change in the next incarnation, but RIGHT NOW real world problems are harder to solve than they should be because the support information is not quite available. YMMV.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jamesnt even thread-even depth-1" id="comment-850003">
				<div id="div-comment-850003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/JamesNT' rel='external nofollow' class='url'>JamesNT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-850003">
			August 1, 2010 at 9:51 am</a>		</div>

		<p>Mr. Chen,</p>
<p>Very helpful information. &nbsp;You are my programming god.</p>
<p>JamesNT</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-850023">
				<div id="div-comment-850023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CPDaniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-850023">
			August 1, 2010 at 4:36 pm</a>		</div>

		<p>@Todd A: &nbsp;I&#39;d recommend writing a small bit of C++ code that catches and throws exceptions and compiling it with /FAsc to get an assembler listing. &nbsp;You can usually deduce a lot from the structure declarations and the names of the symbols generated by the compiler. &nbsp;Sometimes feeding the symbol names to undname.exe will reveal details about the purpose of the symbol beyond the simple unmangling of a C++ object name.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>