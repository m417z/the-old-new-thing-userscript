<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (51)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-227823">
				<div id="div-comment-227823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nate</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-227823">
			November 19, 2004 at 7:22 am</a>		</div>

		<p>What is the difference between SendNotifyMessage() and PostMessage()?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227863">
				<div id="div-comment-227863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-227863">
			November 19, 2004 at 7:51 am</a>		</div>

		<p>SendNotifyMessage will call the wndproc if the HWND is in the same thread otherwise it behaves just like PostMessage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227873">
				<div id="div-comment-227873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nate</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-227873">
			November 19, 2004 at 7:53 am</a>		</div>

		<p>Ok then, call me stupid but I&#8217;ve always thought that posting a message merely constituted an asynchronous send.  Apparently I must be missing something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227883">
				<div id="div-comment-227883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-227883">
			November 19, 2004 at 8:00 am</a>		</div>

		<p>asdf: No, SendNotifyMessage does not behave just like PostMessage. Sent messages are not queued. Obviously, I need to dedicate a future entry to explaining the difference between posting and sending messages since people appear not to grasp it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227893">
				<div id="div-comment-227893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Johan Ericsson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-227893">
			November 19, 2004 at 8:17 am</a>		</div>

		<p>Thanks for the discussion on SendMessage. And, I would also learn something from a discussion of the difference between posting and sending messages (as I thought it only had to do with the asynchronous nature of PostMessage) </p>
<p>On the SendMessage issue, any chance you can shed some light on this error: RPC_E_CANTCALLOUT_ININPUTSYNCCALL <br /><a href="http://support.microsoft.com/kb/q131056/" target=_new rel="nofollow">http://support.microsoft.com/kb/q131056/</a> </p>
<p>We ran into this problem when doing inter-thread SendMessage calls. Our work-around was to implement our own &#8220;SendMessage&#8221; by combining a PostMessage with a semaphore. We haven&#8217;t had any deadlocks; but I still don&#8217;t really understand why we got the error in the first place. </p>
<p>Thanks again for your postings! They are always interesting.</p>
<div class=post>[<i><a href="http://blogs.msdn.com/oldnewthing/archive/2007/10/01/5216600.aspx" rel="nofollow">Response</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227903">
				<div id="div-comment-227903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-227903">
			November 19, 2004 at 8:19 am</a>		</div>

		<p>I believe the difference is SendMessage calls the WndProc directly, bypassing the message quere, while PostMessage posts the message on the end of the queue, where it will get processed in turn.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227913">
				<div id="div-comment-227913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-227913">
			November 19, 2004 at 8:27 am</a>		</div>

		<p>Please put suggestions into the suggestion box instead of hijacking an existing thread. Suggestions posted as normal comments tend to get lost.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227933">
				<div id="div-comment-227933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Maas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-227933">
			November 19, 2004 at 8:41 am</a>		</div>

		<p>I was always uneasy with the usage of the word &quot;Send&quot; in these functions. My first impression was that &quot;send&quot; always implied use of a queue &#8211; it took me a long time to understand that this is not the case.</p>
<p>For that matter I was also uneasy with the use of a single WndProc function for handling both synchronous same-thread function calls and asynchronous queued events.</p>
<p>(not coincidentally I&#8217;ve spent a lot of time finding bugs in my Win32 code that occur when WndProcs are re-entered by a SendMessage &#8211; it takes careful code sometimes to handle re-entrant calls gracefully).</p>
<p>Oh well, water under the bridge.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227943">
				<div id="div-comment-227943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leonardo Brondani Schenkel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-227943">
			November 19, 2004 at 8:47 am</a>		</div>

		<p>It&#8217;s not clear to me how this works: thread A can SendMessage() to another thread B, but thread B is busy doing other work (or blocked by some kind of synchronization). How does Windows call the window procedure of thread B without disrupting the thread&#8217;s  flow of execution?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227963">
				<div id="div-comment-227963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-227963">
			November 19, 2004 at 8:51 am</a>		</div>

		<p>I already discussed this.</p>
<p><a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/06/08/150929.aspx" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/06/08/150929.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227983">
				<div id="div-comment-227983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-227983">
			November 19, 2004 at 8:52 am</a>		</div>

		<p>Eh? It&#8217;s my understanding that if you send a message to a HWND in the same thread, it calls the wndproc before the function returns. If the window is in another thread, it gets posted in the dest thread&#8217;s message queue at a higher priority than the posted messages and when the Get/Wait/PeekMessage function of the dest thread receives it, it calls the wndproc, notifies the caller of the LRESULT, and then tries to pull more messages out until it finds a posted message (minus a crap-load of details I left out). The SendMessage/Timeout functions will wait for the reply before returning and SendMessageCallback will make the src thread respond to the reply via the callback in its Get/Wait/PeekMessage code.</p>
<p>It&#8217;s not like PostMessage in the sense that GetMessage will return it (not to mention it&#8217;s at a higher priority) but it certainly puts it in the thread&#8217;s message queue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227993">
				<div id="div-comment-227993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leonardo Brondani Schenkel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-227993">
			November 19, 2004 at 8:56 am</a>		</div>

		<p>Ok, what if my thread is busy doing some work? I think Windows will not call the window procedure until I call some Win32 blocking API. Is that correct?</p>
<p>Or, in another terms: does SendMessage() always bypass the message queue? If the thread does not have a message loop, is the window procedure called anyway?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228013">
				<div id="div-comment-228013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228013">
			November 19, 2004 at 9:12 am</a>		</div>

		<p>&quot;Windows will not call the window procedure until I call some Win32 blocking API. Is that correct?&quot; </p>
<p>That is incorrect. Clearly there is much misinformation on this subject that cannot be cleared up in a simple comment. It looks like another multi-part series is in the cards. (I dread the multi-part series&#8230; they take months to write&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228053">
				<div id="div-comment-228053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leonardo Brondani Schenkel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228053">
			November 19, 2004 at 9:19 am</a>		</div>

		<p>Thank you. I&#8217;m looking forward to this new series. :-)</p>
<p>This means that even a thread is doing this:</p>
<p>while(1) {<br />
<br />    whatever++;<br />
<br />}</p>
<p>Windows can &quot;freeze&quot; this loop, call the window procedure, and later continue the loop like standard C signals?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228063">
				<div id="div-comment-228063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228063">
			November 19, 2004 at 9:21 am</a>		</div>

		<p>Assuming I write it at all. I may decide not to because it&#8217;s too much work. I don&#8217;t get paid to do this you know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228073">
				<div id="div-comment-228073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leonardo Brondani Schenkel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228073">
			November 19, 2004 at 9:25 am</a>		</div>

		<p>Yes, I know. Just kidding.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228083">
				<div id="div-comment-228083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228083">
			November 19, 2004 at 9:25 am</a>		</div>

		<p>I have never recieved a message unless I called a Win32&#8230; well User32 function of some type.</p>
<p>If the thread that is needed to process messages is stuck in a while(1); Im pretty sure its not going to get any sent messages. Surely?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228123">
				<div id="div-comment-228123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ac</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228123">
			November 19, 2004 at 9:45 am</a>		</div>

		<p>Regarding the differences between PostMessage and SendMessage, I find that this article summarizes it pretty well (in an MFC context):</p>
<p><a target="_new" href="http://www.flounder.com/messaging.htm" rel="nofollow">http://www.flounder.com/messaging.htm</a></p>
<p>Some of the other articles on the site are useful too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228153">
				<div id="div-comment-228153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Potter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228153">
			November 19, 2004 at 11:53 am</a>		</div>

		<p>A busy loop like:</p>
<p>while(1) {<br />
<br />whatever++;<br />
<br />} </p>
<p>will never retrieve a message, Sent or Posted. Messages Sent from out of thread or out of process are dispatched by calls to GetMessage or PeekMessage &#8211; but they are <em>automatically</em> dispatched to the window procedure. That is, GetMessage() will never return with the MSG structure filled with a &#8216;sent&#8217; message &#8211; instead, the window procedure is called from within the GetMessage() function.</p>
<p>That&#8217;s also why you can&#8217;t Send a message to a thread that doesn&#8217;t have a window, whereas you can Post a message to a thread without a window.</p>
<p>At least that&#8217;s my understanding of it :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227833">
				<div id="div-comment-227833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-227833">
			November 19, 2004 at 7:26 am</a>		</div>

		<p>Apples and oranges. SendMessage *sends* a message, while PostMessage *posts* it. The purpose of this entry was to discuss the various ways of *sending* a message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228183">
				<div id="div-comment-228183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric TF Bat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228183">
			November 20, 2004 at 4:40 am</a>		</div>

		<p>You&#8217;re not being paid to do this?  Here you are, generating more good will among the serious geeks of the planet than anyone else in Microsoft, and they&#8217;re not paying you for it?  Insane.</p>
<p>Still, maybe this way you don&#8217;t attract the attention of the lawyers&#8230; though, gods know, anything that would divert them from their usual job of patenting everything that&#8217;s not nailed down would be a good thing&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228203">
				<div id="div-comment-228203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mikedimmick.blogspot.com' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228203">
			November 20, 2004 at 7:29 am</a>		</div>

		<p>The places that I&#8217;m aware of sent messages (sent from another thread) being handled are in GetMessage, PeekMessage and WaitMessage. MsgWaitForMultipleObjects[Ex] returns if a sent message is queued, but does not process it &#8211; you need to PeekMessage. Remember that other APIs may call one of these APIs for you &#8211; for example, when making a COM call to another thread from a thread marked COINIT_APARTMENTTHREADED. COM uses Windows messaging to communicate to/from apartment threads for compatibility with 16-bit Windows. This is where Johan&#8217;s issue arises: while in the COM message filter, where COM is waiting for an outbound call to return, a sent message has been processed &#8211; perhaps a call back from the server to the client. In the window procedure, the thread has tried to make a second outbound call (perhaps to a different thread). This is illegal in COM so it fails the second call with the error above. I had to deal with similar problems with the use of DoEvents in a VB6 COM server &#8211; an earlier author had tried to improve concurrency by adding it, but it caused more problems than it solved (mainly due to unexpected re-entrancy!)</p>
<p>The difference between SendNotifyMessage and PostMessage is that sent messages have a higher priority than posted messages. Also, sent messages cannot be filtered since the application first sees them when they arrive at the window procedure. The application can choose whether or not to dispatch a posted message to the window procedure.</p>
<p>I&#8217;ll have to admit I don&#8217;t understand why the documentation for GetMessage lists sent messages twice, both top priority and after input messages.</p>
<p>A good reference for this stuff is Jeff Richter&#8217;s &quot;Programming Applications for Microsoft Windows, Fourth Edition&quot;, which should be compulsory reading for any Windows developer, IMO.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228223">
				<div id="div-comment-228223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">carlso</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228223">
			November 20, 2004 at 4:42 pm</a>		</div>

		<blockquote><p>
  &quot;Windows will not call the window procedure until I call some Win32 blocking API. Is that correct?&quot;</p>
<p>Raymond replies:  That is incorrect.</p>
<p>Perhaps what the original post meant was not &quot;Win32 blocking API&quot;, but instead &quot;Win32 yielding API&quot;.</p>
<p>I&#8217;m going to go out on a limb here, but my understanding is that messages are only processed (i.e., a WndProc is called) when an application calls one of the &quot;Yielding&quot; APIs.</p>
<p>There was a nice article written by Bob Gunderson at Microsoft back in the 16-bit, Win 3.x days called &quot;Modules, Instances, and Tasks.&quot;  In those days, Windows supported cooperative multitasking instead of today&#8217;s pre-emptive multitasking.  In other words, a task would never lose control of the CPU until it explicitly called a function that could yield control.  And Microsoft documented the list of functions that could do so.  Win 3.x had a concept of “task” which then got extended to become a concept of a “thread” in Win32.  My understanding is that the inter-thread messaging in Win32 tried to maintain the previous semantics of how tasks yielded to each other under the old 16-bit APIs.  That is, today, within a Win32 thread (task), the only time a WndProc can be called (even from the result of another thread sending you a message), is when you execute one on the &quot;yielding&quot; functions (as mentioned below).</p>
<p>Here&#8217;s the text from the Gunderson paper:</p>
<p>TASKS<br />
  <br />&#8212;&#8211;</p>
<p>A task can be thought of as a &quot;logical CPU&quot; with its own CS:IP, stack, and registers. A task can execute code from any number of modules. As execution enters a module (usually through an exported entry point), the current task handle remains unchanged, but the function&#8217;s prolog code sets the proper execution context, that is, the proper data segment.</p>
<p>Task switching occurs when an application calls a Windows function that gives up control of the system, a procedure known as yielding. Because Windows is a nonpreemptive multitasking system, applications must periodically give up control of the system to allow other applications to run. The following functions can cause the calling task to yield:</p>
<p> &#8211; DialogBox, DialogBoxParam, DialogBoxIndirect, DialogBoxIndirectParam</p>
<p> &#8211; DeviceMode, ExtDeviceMode (These can display a dialog box.)</p>
<p> &#8211; GetDC (Only if all device contexts [DCs] are in use.)</p>
<p> &#8211; GetMessage, PeekMessage, WaitMessage</p>
<p> &#8211; MessageBox</p>
<p> &#8211; Yield</p>
<p>Along with the functions on this list, any function that sends a message to another application (such as SendMessage) can cause a temporary task switch while the target application processes the message.<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228233">
				<div id="div-comment-228233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">carlso</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228233">
			November 20, 2004 at 5:23 pm</a>		</div>

		<p>After reading my previous post, I’m not sure if I made the point clear.</p>
<p>Consider this example back in the Win 3.x cooperative multitasking days:</p>
<p>Task A has control of the CPU and calls one of the yielding APIs.<br />
<br />Windows notices that Task B has messages pending in the queue and passes control of the CPU to Task B.<br />
<br />Task B now runs (processing a message via a WndProc call), and subsequently sends a message to Task A.<br />
<br />Control of the CPU is immediately given back to Task A to process the message.  And note that because the only way Task A could have lost control of the CPU in the first place is by calling a yielding API (which it is now waiting in), the only way execution can resume within Task A is at the point of its last yielding call.</p>
<p>If those semantics still hold in Win32, then you might conclude that the only time a receiving thread can process a message from another thread is when the receiving thread has called one of those yielding APIs – which is my understanding.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228283">
				<div id="div-comment-228283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason Malinowski</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228283">
			November 21, 2004 at 10:50 am</a>		</div>

		<p>I&#8217;m not sure if my understanding of this entire messaging thing, but I&#8217;m going to throw it in for either 1) people to ignore, 2) people to correct, or 3) people to say it&#8217;s right. :-)</p>
<p>I guess the way I always understood it is that each thread has a message queue, and GUI messages (at least) get added to that queue. However, messages don&#8217;t get processed until you expliclity remove them from the queue (through either GetMessage or PeekMessage), and dispatch them (which is what DispatchMessage does, right?) GetMessage doesn&#8217;t really do anything else (well, maybe it does) then wait for a message (until there is one), without the thread consuming 100% CPU (well, in a cooperative kernel, it would make sense what carlso is saying in his posts above mine.)</p>
<p>If I do SendMessage to another thread (or another process, for that matter), it will block the calling thread until the receving thread removes the message from the queue and processes it, at which point it returns the value back to the calling thread. PostMessage (and maybe SendNotifyMessage too?) posts it, but returns immediatly (which is why you can&#8217;t send pointers: since your code has continued, there&#8217;s no guarentee that the pointers will be valid when the thread receving the message finally gets it.) Still, I&#8217;ve understood it that you should never use SendMessage on another window in another app if you can get away with it: if that app has locked up, so will you (since it will never process or message.) Same idea with ShowWindowAysnc.</p>
<p>Now, like Raymond said in his bonus remark, any calls to SendMessage to windows belonging to the same thread are called directly, as if it was put onto the thread queue, SendMessage would block, waiting for you to respond to a message that you can&#8217;t get. :-)</p>
<p>Am I right here? My understanding seems to explain all the behavior I&#8217;ve ever run into with Win32, including one very nasty reentrancy problem where I called MessageBox in response to a winsock message, but I&#8217;m not sure if it&#8217;s 100% correct. Am I even close? (a yes or no is fine)</p>
<p>Raymond: and even if you don&#8217;t write the week-long article, you still do a great job here. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228303">
				<div id="div-comment-228303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228303">
			November 21, 2004 at 11:42 am</a>		</div>

		<p>SendMessage bypasses the queue. That&#8217;s what people are missing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228313">
				<div id="div-comment-228313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Potter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228313">
			November 21, 2004 at 1:39 pm</a>		</div>

		<p>It doesn&#8217;t strictly though, does it? I mean if a thread is busy doing something, and 10 other threads all try to send it a message, those messages all get &quot;queued&quot;. It&#8217;s just that those messages are automatically dispatched by a call to GetMessage or similar function, rather than being <em>returned</em> by GetMessage to be dispatched later by DispatchMessage.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228323">
				<div id="div-comment-228323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228323">
			November 21, 2004 at 2:28 pm</a>		</div>

		<p>They don&#8217;t go into the message queue; they go into a separate place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228333">
				<div id="div-comment-228333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228333">
			November 21, 2004 at 2:35 pm</a>		</div>

		<p>Well, strictly it does bypass &quot;the queue&quot;. Each UI thread has a queue of posted messages in which GetMessage and PeekMessage check. That queue is bypassed.</p>
<p>Multiple threads simultaneously calling SendMessage will be executed in a queued fashion, but as a result of Win32&#8217;s thread synchronization functions, not the destination threads message queue.  Which could result in very un-queue like behaviour :- I dont think that Win32 guarantees that mutexes are signalled on a first come first served type basis.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228343">
				<div id="div-comment-228343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Potter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228343">
			November 21, 2004 at 3:10 pm</a>		</div>

		<p>Seems like you are splitting hairs here. They don&#8217;t go into <em>the</em> queue, but they go into <em>a</em> queue? :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228363">
				<div id="div-comment-228363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228363">
			November 21, 2004 at 5:14 pm</a>		</div>

		<p>It&#8217;s a very important hair to split because many functions operate on &quot;the message queue&quot; &#8211; since sent messages do not go into &quot;the message queue&quot;, they are unaffected by those functions. There are queued messages (which go into &quot;the message queue&quot;) and non-queued messages (which do not go into &quot;the message queue&quot;). From the comments here, it appears that many people fail to understand this distinction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228383">
				<div id="div-comment-228383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228383">
			November 21, 2004 at 6:03 pm</a>		</div>

		<p>Well, that&#8217;s an implementation detail. They could be stuck into one queue but marked as &quot;sent message&quot; so the messages that operate on posted messages skip over them. Which is how I&#8217;ve always conceptualized it seeing as how sent messages have higher priority over the posted ones anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228393">
				<div id="div-comment-228393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228393">
			November 21, 2004 at 6:12 pm</a>		</div>

		<p>It&#8217;s an implementation detail that impacts the documentation. If you think of them as &quot;in the queue but marked as sent&quot; then documentation for functions that operate on message queues (eg PeekMessage) would have to say &quot;except sent messages&quot; everywhere.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228403">
				<div id="div-comment-228403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason Malinowski</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228403">
			November 21, 2004 at 6:17 pm</a>		</div>

		<p>OK&#8230;.I&#8217;m now beginning to get it.</p>
<p>Anyways: here&#8217;s an interesting article that seems to discuss SendMessage vs. PostMessage:</p>
<p><a target="_new" href="http://msdn.microsoft.com/msdnmag/issues/1200/c/default.aspx" rel="nofollow">http://msdn.microsoft.com/msdnmag/issues/1200/c/default.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228413">
				<div id="div-comment-228413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Potter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228413">
			November 21, 2004 at 6:18 pm</a>		</div>

		<p>Maybe if it did then fewer people would fail to understand the distinction :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228423">
				<div id="div-comment-228423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228423">
			November 21, 2004 at 6:19 pm</a>		</div>

		<p>The docs already allude to the fact that messages sent between threads get queued:</p>
<p>The GetQueueStatus function indicates the type of messages found in the calling thread&#8217;s message queue.</p>
<p>&#8230;</p>
<p>QS_SENDMESSAGE<br />
<br />A message sent by another thread or application is in the queue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228433">
				<div id="div-comment-228433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Potter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228433">
			November 21, 2004 at 6:43 pm</a>		</div>

		<p>Ooh, explain that Raymond :)<br />
<br />(just kidding!)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228443">
				<div id="div-comment-228443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228443">
			November 22, 2004 at 2:46 am</a>		</div>

		<p>Let me see if I have this straight:</p>
<p>When you post messages to another thread using PostMessage, they go into &quot;the message queue&quot;.</p>
<p>When you send messages to another thread using SendNotifyMessage, they don&#8217;t technically go into &quot;the message queue&quot; but rather a &quot;separate place&quot;.</p>
<p>When PeekMessage is called on the receiving end, it first checks if there are any messages in the &quot;separate place&quot; and dispatches them all automatically. It then checks &quot;the message queue&quot; and returns the first matching message.</p>
<p>And just because GetQueueStatus() will tell you whether sent messages are pending doesn&#8217;t mean those messages actually reside in &quot;the message queue&quot;. QS_SENDMESSAGE is just a quirk they added because they didn&#8217;t want to add a separate function for it (?).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228493">
				<div id="div-comment-228493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228493">
			November 22, 2004 at 7:38 am</a>		</div>

		<p>Yes that&#8217;s it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228573">
				<div id="div-comment-228573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jasmusic.com' rel='external nofollow' class='url'>Joshua Schaeffer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228573">
			November 22, 2004 at 10:31 am</a>		</div>

		<p>About this &quot;separate place&quot;&#8230; does it guarantee that the order in which a window receives SendMessage calls is the same order they were sent?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228583">
				<div id="div-comment-228583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228583">
			November 22, 2004 at 10:36 am</a>		</div>

		<p>You already know the answer based on information posted in this thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228473">
				<div id="div-comment-228473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leonardo Brondani Schenkel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228473">
			November 22, 2004 at 6:16 am</a>		</div>

		<p>My understanding of it:</p>
<p>When SendMessage() is used to send a message to a window in *this* thread, the window procedure is called immediately by SendMessage().</p>
<p>When SendMessage() is used to send a message to a window is *another* thread, the message goes to a &quot;separate place&quot; that is not the message queue. But the message will only be sent (i.e., the window procedure will only be called) when the thread that owns the window calls a Win32 API function that directly or indirectly looks at this &quot;separate place&quot; for queued messages and automatically calls the window procedure.</p>
<p>Am I missing something?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-228803">
				<div id="div-comment-228803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cola</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-228803">
			November 23, 2004 at 12:15 am</a>		</div>

		<p>How does PeekMessage&#8217;s wRemoveMsg argument affect this?</p>
<p><a target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/messagesandmessagequeues/messagesandmessagequeuesreference/messagesandmessagequeuesfunctions/peekmessage.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/messagesandmessagequeues/messagesandmessagequeuesreference/messagesandmessagequeuesfunctions/peekmessage.asp</a></p>
<p>Can I retrieve sent messages as if they were posted messages, and then dispatch them?  I would like to be able to filter out, for example, Shatter attacks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-230463">
				<div id="div-comment-230463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">carlso</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-230463">
			November 26, 2004 at 8:00 am</a>		</div>

		<p>For the record, I just wanted to correct some statements I previously made in &quot;# re: The various ways of sending a message  11/20/2004 4:42 PM  carlso&quot;<br />
<br />(sorry, must have been the cold medicine I was on at the time ;-)</p>
<p>The confusion was due to my incorrect assumption that DispatchMessage() was listed among the yielding functions (it is not).  Of course, messages are processed (i.e., WndProc is called) during DispatchMessage as well.  Sorry for any confusion.</p>
<p>These statements are incorrect:<br />
<br />&quot;&#8230;my understanding is that messages are only processed (i.e., a WndProc is called) when an application calls one of the &quot;Yielding&quot; APIs.&quot;<br />
<br />&#8212; and  &#8212;<br />
<br />&quot;&#8230;the only time a WndProc can be called (even from the result of another thread sending you a message), is when you execute one on the &quot;yielding&quot; functions&#8230;&quot;</p>
<p>Here are the corrections:<br />
<br />In the first one, delete the word &quot;only&quot;:<br />
<br />&quot;&#8230;my understanding is that messages are processed (i.e., a WndProc is called) when an application calls one of the &quot;Yielding&quot; APIs.&quot;</p>
<p>And, in the second, rewrite:<br />
<br />&quot;&#8230;when a thread sends (i.e., not posts) a message to another thread, the WndProc to process that message within the receiving thread can only be called when the receiving thread executes one of the &quot;yielding&quot; functions&#8230;&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231853">
				<div id="div-comment-231853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-231853">
			December 2, 2004 at 3:35 am</a>		</div>

		<p>I was just wondering, sometimes I find with Visual Studio 2003 that I cannot switch back to it.  I then try and run a program called MessageSender found on Code Project (by Dmytro Ivanchykhin) and get it to send a WM_MDIACTIVATE,  to the VStudio window.  I have tried SendMessage,PostMessage and SendMessageTimeout and also used both the MessageSender and Target window thread contexts (the app that the message will seem to have come from)</p>
<p>But whatever I do, VStudio just crashes instead of being switched over to.</p>
<p>Why would this be?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-233543">
				<div id="div-comment-233543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">amit shrivastava</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-233543">
			December 8, 2004 at 2:37 pm</a>		</div>

		<p>Hi,</p>
<p>I am trying to stop a window from crashing through api. A window crashes when some operation on that window is done many times within a fraction of second. Can anybody tell me how to send windows O/s a message that tells O/s to stop closing the window whenever required.</p>
<p>please email me at <a href="mailto:amits@vt.edu">amits@vt.edu</a> if u know the answer or have ne idea on the matter.</p>
<p>I would really appreciate your comments and suggestions.</p>
<p>Thank you</p>
<p>Amit</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-254053">
				<div id="div-comment-254053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2005/02/09/369838.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-254053">
			February 9, 2005 at 10:51 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-262683">
				<div id="div-comment-262683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2005/03/10/392118.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-262683">
			March 10, 2005 at 9:58 am</a>		</div>

		<p>The pitfalls of broadcasting messages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-262713">
				<div id="div-comment-262713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2005/03/10/392168.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-262713">
			March 10, 2005 at 11:10 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-555103">
				<div id="div-comment-555103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/10/01/5216600.aspx' rel='external nofollow' class='url'>The Old New Thing : Suggestion Box 3, short answers (part 1 of who knows how many)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-555103">
			October 1, 2007 at 11:15 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/10/01/5216600.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/10/01/5216600.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-702563">
				<div id="div-comment-702563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.hilpers.com/956225-sendnotifymessage-vs-sendmessage' rel='external nofollow' class='url'>SendNotifyMessage vs. SendMessage | hilpers</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041119-00/?p=37243#comment-702563">
			January 20, 2009 at 10:55 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.hilpers.com/956225-sendnotifymessage-vs-sendmessage" rel="nofollow">http://www.hilpers.com/956225-sendnotifymessage-vs-sendmessage</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>