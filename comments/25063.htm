<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-551253">
				<div id="div-comment-551253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stuart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551253">
			September 19, 2007 at 10:10 am</a>		</div>

		<p>The problem is that the length of one or both of the strings may not actually be &#8216;n&#8217;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-551263">
				<div id="div-comment-551263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Psa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551263">
			September 19, 2007 at 10:11 am</a>		</div>

		<p>If the strings are equal but shorter than n, the result will depend on the junk past the end of the strings.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-551273">
				<div id="div-comment-551273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ultrafractal.com/' rel='external nofollow' class='url'>Frederik Slijkerman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551273">
			September 19, 2007 at 10:12 am</a>		</div>

		<p>Interestingly, the documentation for CompareString does not say explicitly what will happen for nulls in the strings if you pass a non-negative length value. I assume it will treat the string as a buffer that can contain nulls. Then, the code should be:</p>
<p>return CompareStringA(LOCALE_INVARIANT, NORM_IGNORECASE,</p>
<p>s1, </p>
<p>min(n, strlen(s1)), </p>
<p>s2, </p>
<p>min(n, strlen(s2))) &#8211; CSTR_EQUAL;</p>
<p>with</p>
<p>int min(int a, int b)</p>
<p>{</p>
<p>&nbsp;return (a &lt; b) ? a : b;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-551303">
				<div id="div-comment-551303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551303">
			September 19, 2007 at 10:28 am</a>		</div>

		<p>Don&#8217;t go blindly looking for the NUL character, that will cause crashes too. &nbsp; (i.e. the strlen)</p>
<p>Often, when you use methods that have a length parameter, you are dealing with strings that don&#8217;t have NUL termination (instead of using the length for substring extraction). &nbsp;For example, if you have ever used EXPAT, many of the strings coming from the notification routines are pointing directly to the parse buffer and don&#8217;t contain the terminating NUL, thus the supplied length parameter. &nbsp;I dealt with many a crashing program that assumed the strings were NUL terminated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-551373">
				<div id="div-comment-551373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551373">
			September 19, 2007 at 1:19 pm</a>		</div>

		<p>Just curious, what does an uppercase NUL look like? :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-551393">
				<div id="div-comment-551393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J. Edward Sanchez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551393">
			September 19, 2007 at 1:44 pm</a>		</div>

		<p>In ASCII, an uppercase NUL is represented as (NUL &amp; ~0x20).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-551403">
				<div id="div-comment-551403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wang-Lo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551403">
			September 19, 2007 at 1:52 pm</a>		</div>

		<p>@Ray</p>
<p>No that is the upper case.</p>
<p>Lower case looks like this: nul</p>
<p>Upper case looks like this: NUL</p>
<p>Don&#8217;t blame yourself for being confused. &nbsp;Failure to distinguish NUL from nul is the third most common programming fault after the fencepost error.</p>
<p>-Wang-Lo;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-551413">
				<div id="div-comment-551413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">michkap</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551413">
			September 19, 2007 at 2:48 pm</a>		</div>

		<p>Is it cheating if I answer? I did resist for just about the whole morning. :-)</p>
<p>One could always shove an &#198; or an &#230; in one of the strings and watch the fireworks&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-551423">
				<div id="div-comment-551423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sohail</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551423">
			September 19, 2007 at 2:54 pm</a>		</div>

		<p>[quote]</p>
<p>// buggy code &#8211; see discussion</p>
<p>void someFunction(char *pszFile)</p>
<p>{</p>
<p>CharUpperBuff(pszFile, MAX_PATH);</p>
<p>&#8230; do something with pszFile &#8230;</p>
<p>}</p>
<p>[/quote]</p>
<p>You&#8217;re kidding. No one who writes C code would ever write that.</p>
<div class=post>[<i>Depends on your definition of &#8220;that&#8221;. Perhaps not literally &#8220;that&#8221; but I&#8217;ve seen this class of bug in commercial software. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-551433">
				<div id="div-comment-551433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551433">
			September 19, 2007 at 2:59 pm</a>		</div>

		<p>&quot;You&#8217;re kidding. No one who writes C code would ever write that.&quot;</p>
<p>Unfortunately, the world is oversupplied with programmers who regularly write code that no intelligent person in their right mind would write, and C has more than its share.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-551283">
				<div id="div-comment-551283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551283">
			September 19, 2007 at 10:25 am</a>		</div>

		<p>Well, with the content of the rest of the article seems to be a hint. And a (very brief) look at an MSDN article on CompareString* turned up the following interesting phrase.</p>
<p>&quot;Normally, for case-insensitive comparison, this function maps the lowercase &quot;i&quot; to the uppercase &quot;I&quot;, &quot;</p>
<p>So my first guess would be that CompareStringA, when handed the NORM_IGNORECASE flag calls CharUpperBuff or similar function.**</p>
<p>So the broken example function, if 1) asked to compare strings of non-equal length, or 2) given a length in excess of the actual string size, would probably happily perform the data corruption described in this article.</p>
<p>*I keep looking to find the one on CompareStringA; so this might all be wrong</p>
<p>**And there is probably someplace I should know about that explicitly states exactly how this flag is handled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-551463">
				<div id="div-comment-551463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551463">
			September 19, 2007 at 8:19 pm</a>		</div>

		<p>&quot;You&#8217;re kidding. No one who writes C code would ever write that.&quot;</p>
<p>If it can compile then it&#8217;s been done.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-551473">
				<div id="div-comment-551473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551473">
			September 19, 2007 at 8:28 pm</a>		</div>

		<p>NUL is an old shorthand for the ASCII character &#8216; &#8217;. &nbsp;Many people use it instead of 0 or NULL to distinguish between the number zero, a &quot;NULL pointer&quot; and the ASCII character &#8216; &#8217;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-551483">
				<div id="div-comment-551483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551483">
			September 19, 2007 at 9:57 pm</a>		</div>

		<p>Actually the replacement function will work fine if n = -1, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-551493">
				<div id="div-comment-551493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551493">
			September 19, 2007 at 9:58 pm</a>		</div>

		<p>And the strings are NUL terminated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-551513">
				<div id="div-comment-551513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ultrafractal.com/' rel='external nofollow' class='url'>Frederik Slijkerman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551513">
			September 20, 2007 at 4:03 am</a>		</div>

		<p>@Tim Smith: &quot;Don&#8217;t go blindly looking for the NUL character, that will cause crashes too. &nbsp; (i.e. the strlen)&quot;</p>
<p>I think for a function called invariant_strnicmp with char* arguments, you can assume that these are valid null-terminated strings&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-551563">
				<div id="div-comment-551563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mccoyn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551563">
			September 20, 2007 at 9:13 am</a>		</div>

		<p>No one who writes C code would ever write that on purpose.</p>
<p>The problem is that if your team cranks out 100,000 lines of code for a product can you be sure that none of your developers made that mistake just once, even though there are 1000 places where it could have been made? &nbsp;Are your developers mistake rates less than 0.1% ?</p>
<p>You might be able to double check everything, but it will take a lot of work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-551523">
				<div id="div-comment-551523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-551523">
			September 20, 2007 at 5:26 am</a>		</div>

		<p>If you want it to work with strings that may or may not be null terminated, I think you need something like this:</p>
<p>int invariant_strnicmp(char *s1, char *s2, size_t n)</p>
<p>{</p>
<p> size_t n1 = strnlen(s1, n);</p>
<p> size_t n2 = strnlen(s2, n);</p>
<p> return CompareStringA(LOCALE_INVARIANT, NORM_IGNORECASE,</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s1, n1, s2, n2) &#8211; CSTR_EQUAL;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-552073">
				<div id="div-comment-552073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-552073">
			September 20, 2007 at 8:26 pm</a>		</div>

		<p>Frederik: I think for a function called invariant_strnicmp with char* arguments, you can assume that these are valid null-terminated strings&#8230;</p>
<p>Absolutely not. &nbsp;The history of the strnicmp routines date back to the old unix file systems where you would pack those file named in a structure that has enough space to hold a string up to the max length NOT including the NUL. &nbsp;</p>
<p>For many, strncmp has become a method of doing substring matching, but it was originally more about space savings and buffer padding (see strncpy.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-552273">
				<div id="div-comment-552273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ultrafractal.com/' rel='external nofollow' class='url'>Frederik Slijkerman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-552273">
			September 21, 2007 at 10:43 am</a>		</div>

		<p>@Tim Smith: You&#8217;re right, I forgot about that. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-552513">
				<div id="div-comment-552513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gazpacho</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-552513">
			September 21, 2007 at 3:53 pm</a>		</div>

		<p>&quot;You&#8217;re kidding. No one who writes C code would ever write that.&quot;</p>
<p>I think it is common knowledge among Windows programmers that the use of MAX_PATH anywhere in string-related code makes it crash-proof.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-552583">
				<div id="div-comment-552583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IgorD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-552583">
			September 21, 2007 at 6:49 pm</a>		</div>

		<p>This post brought tears to my eyes.</p>
<p>Few weeks ago I found a bug that &quot;sometimes&quot; crashed my application.</p>
<p>The code (simplified ) at first went something like this:</p>
<p>void DrawingFunction (&#8230;, char *someText)</p>
<p>{</p>
<p> &nbsp; int len = strlen (someText);</p>
<p> &nbsp; DrawText (hdc, someText, len, txtRect, DT_LEFT | &#8230;);</p>
<p>}</p>
<p>and everything was fine, but at some point I changed it to this:</p>
<p>void DrawingFunction (&#8230;, char *someText)</p>
<p>{</p>
<p> &nbsp; int &nbsp;len = strlen (someText); &nbsp;// HERE&#8217;S THE DEVIL!</p>
<p> &nbsp;char tmpBuff[256];</p>
<p> &nbsp; if (somethin) &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp;len = GetAltText (tmpBuff, someText);</p>
<p> &nbsp; else</p>
<p> &nbsp; &nbsp; &nbsp;sprintf (tmpBuff, &quot;%.*s&quot;, 255, someText); &nbsp;// NORMAL CASE</p>
<p> &nbsp; DrawText (hdc, tmpBuff, len, txtRect, DT_LEFT | &#8230;);</p>
<p>}</p>
<p>and it would crash every time &#8216;someText&#8217; was longer than 255+ characters (and &#8216;somethin&#8217; was false).</p>
<p>I was chasing that bug for two years (because &#8216;someText&#8217; was usualy very short). I don&#8217;t know, I must have done it in a hurry or asleap or &#8230;</p>
<p> Horror! Horror!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-552743">
				<div id="div-comment-552743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dagwood</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-552743">
			September 22, 2007 at 5:03 pm</a>		</div>

		<p>This entire scenario and discusion supports my contention that when C was foisted on us by Scott McNeely, et al in the 80&#8217;s it was a very tragic day for IT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-552783">
				<div id="div-comment-552783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/archive/2007/09/23/5070899.aspx' rel='external nofollow' class='url'>Sorting It All Out</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-552783">
			September 23, 2007 at 5:51 am</a>		</div>

		<p>Raymond makes a good point in What happens if you pass a source length greater than the actual string</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-552813">
				<div id="div-comment-552813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Hensley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-552813">
			September 23, 2007 at 8:39 pm</a>		</div>

		<p>C wasn&#8217;t &quot;foisted&quot; on anyone, and certainly not by Sun. Programmers took it up willingly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-554003">
				<div id="div-comment-554003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AndyB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070919-00/?p=25063#comment-554003">
			September 26, 2007 at 8:17 am</a>		</div>

		<p>Dagwood, C was foisted upon us by the folks at MS, not Scott McNealy. Scott foisted Java upon us, though I concur that Java and C are practically the same thing.</p>
<p>I think I may have misplaced a # character in there somewhere though :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>