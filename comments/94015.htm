<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-jeremytais even thread-even depth-1 parent" id="comment-1258665">
				<div id="div-comment-1258665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258665">
			August 3, 2016 at 7:05 am</a>		</div>

		<p>While I understand that ODR violations are not a required diagnostic by C++ linkers, is there a reason that modern linkers don&#8217;t do the requisite check and emit at least a warning?  Is performing link-time ODR checking really that computationally expensive?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1258675">
				<div id="div-comment-1258675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258675">
			August 3, 2016 at 7:10 am</a>		</div>

		<p>In the classical model of linking, the linker doesn&#8217;t see the definitions. The compiler has already generated object code. All the linker sees is a blob of bytes with fixups.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1258775">
				<div id="div-comment-1258775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258775">
			August 3, 2016 at 12:40 pm</a>		</div>

		<p>It is true however that the compiler could automatically emit a #pragma detect_mismatch-like for each type/inline function definition, named like the mangled name of the relevant entity and with a hash of the tokens sequence as value (which IIRC is what the standard defines as relevant for the ODR). I don&#8217;t think that it would cost so much to implement.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1258715">
				<div id="div-comment-1258715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258715">
			August 3, 2016 at 10:43 am</a>		</div>

		<p>@SimonRev: If you use GCC 5 or later with -flto-odr-type-merging it will warn about ODR violations by default (disable with -Wno-odr).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-shiva-live even thread-odd thread-alt depth-1" id="comment-1258725">
				<div id="div-comment-1258725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Kenneth+Porter' rel='external nofollow' class='url'>Kenneth Porter</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258725">
			August 3, 2016 at 11:41 am</a>		</div>

		<p>How do you recommend checking structure packing options?  It would be nice to see an example that shows as many C++ code generation options checked as possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1258785">
				<div id="div-comment-1258785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm100</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258785">
			August 3, 2016 at 2:14 pm</a>		</div>

		<p>so the two strings have no meaning? the liner simply looks at all pragma&#8217;s called with name &#8216;foo&#8217; and verifies they are all either &#8216;wiz&#8217; or &#8216;bang&#8217;? Its not looking at types or externs or anything</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-exchange-development-blog-team even depth-2 parent" id="comment-1258805">
				<div id="div-comment-1258805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">exchange development blog team</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258805">
			August 3, 2016 at 7:52 pm</a>		</div>

		<p>The example is actually kinda confusing and the MSDN page doesn&#8217;t help, does the NDEBUG pragma check tell you that you&#8217;ve built one module in debug mode and the other not, if it&#8217;s placed in a header file?  Do you have to methodically do a pragma_mismatch for every data structure and object in your code to get compete checking?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1258825">
				<div id="div-comment-1258825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258825">
			August 3, 2016 at 10:15 pm</a>		</div>

		<p>I think the idea is that you have 2 or 3 different configurations, and you check with the corresponding number of pragma_mismatch pairs. No need to check each structure if you&#8217;re saying &#8216;in configuration 1 I will use this set of types and in configuration 2 I will use a different set of types&#8217;. It&#8217;s the configuration that matters, not each specific type. (I think.)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1258976">
				<div id="div-comment-1258976" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258976">
			August 4, 2016 at 11:58 am</a>		</div>

		<p>You don&#8217;t need to put a check on every data structure, just for every configuration option that affects ODR. If you have twelve &#8220;#ifdef NDEBUG&#8221;s, you need only one #pragma detect_mismatch(&#8230;NDEBUG)&#8221; to cover it.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-exchange-development-blog-team odd alt depth-5" id="comment-1259055">
				<div id="div-comment-1259055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">exchange development blog team</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1259055">
			August 4, 2016 at 10:32 pm</a>		</div>

		<p>Ah, OK, thanks.  That makes it quite useful if you only need to do it once per config.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1258835">
				<div id="div-comment-1258835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258835">
			August 4, 2016 at 3:18 am</a>		</div>

		<p>This reminds me of the problem of wanting to link against two static libraries and find that one is using the static CRT while the other is using the dynamic CRT&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1258845">
				<div id="div-comment-1258845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258845">
			August 4, 2016 at 3:49 am</a>		</div>

		<p>A good example of a nasty gotcha!</p>
<p>Sometimes this con happen through no fault of your own. Eg: Some IDEs will sometimes not rebuild everything if you change a #define in the project file.</p>
<p>Does Link time code generation pick up on these errors in practice? By deferring code gen until link time, in theory the linker has all the information to know that there are type mismatches.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>