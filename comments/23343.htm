<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (43)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-603873">
				<div id="div-comment-603873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SRS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-603873">
			February 25, 2008 at 12:14 pm</a>		</div>

		<p>Isn&#8217;t &#8216;wc -l&#8217; a Unix command?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-603883">
				<div id="div-comment-603883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wang-Lo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-603883">
			February 25, 2008 at 12:23 pm</a>		</div>

		<blockquote><p>
  &quot;When somebody gives you a gift of code, it&#8217;s more often than not a burden in disguise&quot;
</p></blockquote>
<p>I have often found the same thing to be true when somebody gives me the gift of a free operating system preloaded on a new computer.</p>
<p>(I refer, of course, to such failed efforts as CDC/SCOPE, UNIVAC/RTB, Burroughs/MCP, etc. &nbsp;What did you think I meant?)</p>
<p>-Wang-Lo.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-603893">
				<div id="div-comment-603893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-603893">
			February 25, 2008 at 12:33 pm</a>		</div>

		<p>You cant win.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jamesnt odd alt thread-odd thread-alt depth-1" id="comment-603903">
				<div id="div-comment-603903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/JamesNT' rel='external nofollow' class='url'>JamesNT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-603903">
			February 25, 2008 at 12:55 pm</a>		</div>

		<p>I have found this to be the case with almost all free software &#8211; even open source. &nbsp;</p>
<p>With Windows and other software I use, if there is a problem I just contact the vendor and chances are the issue gets fixed in the next release or in some update.</p>
<p>But with free software the usual thing I hear is &quot;You have the source, fix it yourself!&quot;</p>
<p>Nevermind the 4 or 5 other programming projects I am working on at the time that I&#8217;m actually getting paid to work on.</p>
<p>I&#8217;d rather just buy what I need and avoid the hassle of trying to find it for free. &nbsp;And if someone offers me free code, I almost always turn them down.</p>
<p>Hassle = more money in wasted time.</p>
<p>JamesNT</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-603913">
				<div id="div-comment-603913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-603913">
			February 25, 2008 at 12:58 pm</a>		</div>

		<p>Scroll to the end of this for an attempt to bundle a graphing calculator app with Windows:</p>
<p><a rel="nofollow" target="_new" href="http://www.pacifict.com/Story/" rel="nofollow">http://www.pacifict.com/Story/</a></p>
<p>BTW, what was the average quality of the third party apps bundled?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-603923">
				<div id="div-comment-603923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-603923">
			February 25, 2008 at 1:38 pm</a>		</div>

		<blockquote><p>
  Isn&#8217;t &#8216;wc -l&#8217; a Unix command?
</p></blockquote>
<p>No, it&#8217;s a command from a set of POSIX compatible shell tools. Windows Services for Unix, LUA Warehouse, Cygwin, as well as native ports like UnxUtils and GnuWin32 bring the &#8216;wc&#8217; tool to the Windows world.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-603933">
				<div id="div-comment-603933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-603933">
			February 25, 2008 at 1:47 pm</a>		</div>

		<p>If the 3rd party components were included in Windows because Microsoft felt their features were needed then shouldn&#8217;t you compare being given exiting apps and source with having to write brand new apps in-house?</p>
<p>If the app was written in-house then, on top of the burden of designing and writing it from scratch, most of your points would still apply. </p>
<p>Someone at Microsoft would have had to port it to 64-bit, fix security flaws as they&#8217;re found, fix localisation problems, and so on.</p>
<p>So is this really just an argument against bundling apps with the OS, regardless of who wrote them? Or is your point that apps from 3rd parties tend to be lower quality and written without thought for security, localisation, and so on?</p>
<div class=post>[<i>If the app was written in-house, then it would already have been ported to 64-bit, be localization-ready, undergone a security review, etc. Because those are basic ground rules for coding at Microsoft. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-603953">
				<div id="div-comment-603953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-603953">
			February 25, 2008 at 2:16 pm</a>		</div>

		<p>Hmmm, Apple bundles loads of stuff with OS X and I&#8217;ve never heard them refer to it as a &quot;burden&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-603963">
				<div id="div-comment-603963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-603963">
			February 25, 2008 at 2:45 pm</a>		</div>

		<blockquote><p>
  Hmmm, Apple bundles loads of stuff with OS X and I&#8217;ve never heard them refer to it as a &quot;burden&quot;.
</p></blockquote>
<p>But most of them was written by Apple themselves.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-603973">
				<div id="div-comment-603973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JenK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-603973">
			February 25, 2008 at 2:47 pm</a>		</div>

		<p>Mark &#8211; How many Apple devs do you know who blog about work?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-603993">
				<div id="div-comment-603993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-603993">
			February 25, 2008 at 4:11 pm</a>		</div>

		<blockquote><p>
  But most of them was written by Apple themselves.
</p></blockquote>
<p>Huh? &nbsp;Python, Ruby, Rails, Apache, etc etc? &nbsp;Or are we only talking about &quot;applications&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-604043">
				<div id="div-comment-604043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wtroost</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604043">
			February 25, 2008 at 4:20 pm</a>		</div>

		<p>How are developers supposed to know what tools are &#8220;merely a courtesy&#8221;? &nbsp;Perhaps they&#8217;re just doing what seems right. &nbsp;It&#8217;s a compliment to Microsoft that developers rely on them so much! :)</p>
<div class=post>[<i>How about &#8220;Is the API documented on MSDN?&#8221; for starters. Nearly all tools are just courtesy tools and are not part of the Windows API contract. (Occasionally, a tool is part of the contract, such as control.exe.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604053">
				<div id="div-comment-604053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604053">
			February 25, 2008 at 4:32 pm</a>		</div>

		<p>You don&#8217;t just call random functions inside random DLLs in the Windows directory, just like how you don&#8217;t just drink random liquids inside a science lab.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-604103">
				<div id="div-comment-604103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604103">
			February 25, 2008 at 5:00 pm</a>		</div>

		<p>I understand the problem form your side.</p>
<p>But from an external developer side, it is often not visible if something is 3rd party or not, so that you do &quot;not rely on their continued presence&quot;</p>
<p>The logic is &quot;this is by default part of Win since Win X, in the About dialog it says MS, so it should be&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604113">
				<div id="div-comment-604113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604113">
			February 25, 2008 at 5:04 pm</a>		</div>

		<p>Since I have started writing my post I see there is some kind of answer: &quot;How about &quot;Is the API documented on MSDN?&quot; for starters&quot;</p>
<p>Counter-examples</p>
<ul>
<li>
<p>Imaging. Was there, some API was documented, but is not in XP anymore (and there is no obvious replacement for that API).</p>
</li>
<li>
<p>Backup: was there and working since NT 4 (at least). Not in Vista anymore (the only thing is a chopped-down version that cannot backup individual folders or FAT32 drives). But that was MS, I think.</p>
</li>
</ul>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-604123">
				<div id="div-comment-604123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604123">
			February 25, 2008 at 5:39 pm</a>		</div>

		<p>Agreed with your article.</p>
<p>One side thing I wonder though; isn&#8217;t this a huge waste of time to port everything to 64-bit? &nbsp;I mean&#8230; why do it?</p>
<p>I know posters above annoyingly brought up OSX and we&#8217;re all sick of this. &nbsp;But I can&#8217;t make sense of all of this porting to 64-bit. &nbsp;It isn&#8217;t done on OSX, and it makes life easier for all user. &nbsp;</p>
<p>OS X Finder is 32-bit, all the apps are 32-bit. &nbsp;Only the bits that benifit from 64-bit are ported. &nbsp;I&#8217;m on Vista 64-bit, and I have to explain the damn the 64-bit vs 32-bit to my co-workers coming to 64-bit, it really complicates Windows needlessly. And of course it creates a second binary to test for you guys.</p>
<p>It&#8217;s not like 32-bit support is going to be removed tomorrow. &nbsp;In the mean time, the users have to be &#8216;aware&#8217; of this technical detail, with many simple things, like shell extensions not working, or plug-ins in the 64-bit browser.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604133">
				<div id="div-comment-604133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604133">
			February 25, 2008 at 6:02 pm</a>		</div>

		<blockquote><p>
  I know posters above annoyingly brought up OSX and we&#8217;re all sick of this.
</p></blockquote>
<p>My apologies, I didn&#8217;t realize that we weren&#8217;t supposed to mention it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-604143">
				<div id="div-comment-604143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Homer Simpson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604143">
			February 25, 2008 at 6:15 pm</a>		</div>

		<p>&quot;just like how you don&#8217;t just drink random liquids inside a science lab&quot;</p>
<p>Mmmmm&#8230; random liquids</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604163">
				<div id="div-comment-604163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604163">
			February 25, 2008 at 6:22 pm</a>		</div>

		<p>Ulric: Here is a little bit of history about this.</p>
<p>64-bit Windows was originally for Itanium.</p>
<p>On that platform, there was a big performance hit for running 32-bit apps because of all the x86 emulation that have to be done.</p>
<p>Thus, MS decided not to allow 32-bit code in kernel mode and to port almost everything to 64-bit.</p>
<p>On the other hand, the 64-bit functionality in Tiger versions of Mac OS X was originally for PowerPC 970 (G5), where that were in fact a possible performance hit for moving to 64-bit.</p>
<p>Why, because of the larger pointers and code size. So the kernel and most apps stayed 32-bit, in fact in Tiger only command-line apps could be 64-bit. Leopard allowed GUI apps to be 64-bit, though most of them were still 32-bit only.</p>
<p>On x64, there are a little bit of performance improvement when executing recompiled x64 programs due to the additional registers and less code size increase compared to PowerPC. So it is somewhere in the middle. BTW, what about AXP64?</p>
<blockquote><p>
  Python, Ruby, Rails, Apache, etc etc?
</p></blockquote>
<p>Open Source does this in a different way that has none of the problems described.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-604173">
				<div id="div-comment-604173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604173">
			February 25, 2008 at 6:34 pm</a>		</div>

		<blockquote><p>
  the kernel
</p></blockquote>
<p>Most of it, that is. See the xnu source code for how Apple basically mixed 32-bit and 64-bit code in the kernel. Clue: Look at the ENTER_64BIT_MODE and ENTER_COMPAT_MODE macros. BTW, I wonder how does Parallels and VMware execute the Intel VT instructions on Mac OS X (VMXON, etc&#8230;) when they can&#8217;t even be executed in compatiblity mode. But that of course is a different matter that probably should not be discussed here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604183">
				<div id="div-comment-604183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604183">
			February 25, 2008 at 6:38 pm</a>		</div>

		<blockquote><p>
  Ulric said: this a huge waste of time to port everything to 64-bit? &nbsp;I mean&#8230; why do it?
</p></blockquote>
<p>Because 4GB isn&#8217;t enough. And it&#8217;s even worse because your 2 * 1GB video cards get mapped over 2GB of your RAM. When next-gen video cards hit 2GB+ there will be no address space left for RAM. <a rel="nofollow" target="_new" href="http://www.dansdata.com/askdan00015.htm" rel="nofollow">http://www.dansdata.com/askdan00015.htm</a></p>
<p>Although if I misunderstood the question and it was &quot;why port little apps like Calc.exe to 64 bit&quot;. I can think of a couple of reasons: a) why not. b) good practice for staff and process c) stops bad publicity (&quot;but it says 64bit on the box&quot;).</p>
<p>Some very popular applications are now 64bit only (such as Exchange although whether that was a marketing, budget or technical decision I don&#8217;t know).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-604193">
				<div id="div-comment-604193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604193">
			February 25, 2008 at 6:53 pm</a>		</div>

		<p>&gt;Because 4GB isn&#8217;t enough. And it&#8217;s even worse because your 2 * 1GB video cards get mapped over 2GB of your RAM. When next-gen video cards hit 2GB+ there will be no address space left for RAM. <a href="http://www.dansdata.com/askdan00015.htm" target=_new rel=nofollow rel="nofollow">http://www.dansdata.com/askdan00015.htm</a></p>
<p>PAE can solve this problem without moving to 64-bit, plus most video cards do not map all of the memory at once. Sadly, client versions of Windows act as if the /PAE switch is not specified, even if it is specified. The reasons for doing the compatiblity hack to limit physical address space to 4 GB is understandable.</p>
<div class=post>[<i>Remainder of comment deleted because it violates <a href="http://blogs.msdn.com/oldnewthing/archive/2004/02/21/77681.aspx" rel="nofollow">multiple rules</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604243">
				<div id="div-comment-604243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604243">
			February 26, 2008 at 12:06 am</a>		</div>

		<p>steveg:</p>
<blockquote><p>
  &gt;to port everything to 64-bit? &nbsp;I mean&#8230; why do it?</p>
<p>  Because 4GB isn&#8217;t enough.
</p></blockquote>
<p>I can see as argued above porting everything to 64-bit in the context of the Itanium. &nbsp;In the very long term (since Itanium wasn&#8217;t going to the desktop any time soon) &nbsp;</p>
<p>But on x86, not for that reason above.</p>
<p>32-bit applications each have 3 gig of address space addressable individually</p>
<p>(if they are flagged with /largeaddressaware, and most that need the RAM are ). &nbsp;</p>
<p>Those 32-bit apps already get access to 1 more gig of RAM by virtue of running on Windows 64-bit. &nbsp;You can run Photoshop, Illustrator, AfterFX, each of these will have access to 3 gig of RAM of your total 64-bit memory. &nbsp;BOOM! that&#8217;s an awesome performance boost and no code change and re-testing was required.</p>
<p>But most apps don&#8217;t even use that of course. &nbsp;The apps that benefit from 64-bit are multimedia or server apps and they are the only ones to port. &nbsp;Maya, 3D studio max are already 64-bit, Adobe apps will be coming soon. &nbsp;In the mean time, they are flagged /largeaddressaware</p>
<p>Right now tons are people are moving to 64-bit Vista. &nbsp;(They don&#8217;t know why, they just want it on their new machine.) &nbsp; This mainstream audience could have been spared separate Program Files folders and having to know the difference between 32-bit and 64-bit apps and process.</p>
<p>They&#8217;ve been spared that on OS X. &nbsp;Users don&#8217;t feel cheated that bundle apps or the shell aren&#8217;t 64-bit. &nbsp; When there will eventually be a 64-bit port of something, it will be hidden in a bundle, as opposed to dual &quot;Program Files&quot; folders or different shortcuts.</p>
<p>Port &quot;because we can&quot; as you suggest (steveg) &nbsp;just doubles the QA required on these unnecessary binaries, it&#8217;s irrational. &nbsp;</p>
<p>I&#8217;m surprised all this extra work wasn&#8217;t axed during Vista as there are no practical benefits. &nbsp;</p>
<p>It&#8217;s irksome on our side as users. &nbsp;For example because Explorer is 64-bit and the shell extensions we&#8217;re used to (simple things like Zip/Rar context menu, source control, etc) don&#8217;t work. &nbsp;There is nothing gained.</p>
<p>&quot;just in case&quot;, Vista 64-bit had to come with two copies explorer, one 32-bit and 64-bit. &nbsp;</p>
<p>Why ship (for example) explorer 64-bit at all? &nbsp;It means extra development, extra testing, and on our side extra explaining to users why things sometimes don&#8217;t work. &nbsp;Computers should be getting more simple not harder.</p>
<p>There is also a 32-bit and 64-bit IE, of course. &nbsp; No one will ever use 64-bit IE, and it just confuses users about the nature 64-bit and make them feel disappointed that there are no plug-ins. &nbsp;That should have been axed, too. &nbsp;The inmates are running the asylum on this one.</p>
<p>With this 32-bit and 64-bit binary duality right there in the UI, Vista 64-bit seems to still be &nbsp;a programmer&#8217;s pet project, but the mainstream adoption of 64-bit OS is really starting this year.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-604253">
				<div id="div-comment-604253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604253">
			February 26, 2008 at 2:02 am</a>		</div>

		<p>Hmm I tried Vista 64 bit. For a week. No, or beta, drivers for most of my (very recent) hardware. My homebuilt services failed. So I went back to 32 bit Vista. Much better support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604263">
				<div id="div-comment-604263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604263">
			February 26, 2008 at 2:27 am</a>		</div>

		<blockquote><p>
  No one will ever use 64-bit IE&#8230;</p>
<p>  &#8230; no plug-ins &#8230;
</p></blockquote>
<p>I use 64 bit IE all the time. No plug-ins == better security and performance. When I really need flash or acrobat, I switch to 32 bit IE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-604273">
				<div id="div-comment-604273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604273">
			February 26, 2008 at 3:22 am</a>		</div>

		<p>How would a 3rd party know in advance about the latest Windows design guidelines? If Microsoft wants to alter the guidelines and carry an application over to a new Windows release, it&#8217;s their own job to make sure the guidelines are met.</p>
<p>But it&#8217;s a matter of cost/benefit. If there&#8217;s a demand for feature X and there&#8217;s already a 32/64 bit, logo certified implementation available, it could be cheaper to license it. If it would cost more to fix a wonky implementation than to write it from scratch, doing so makes sense. Weigh in the overall benefit of the new feature (like increase in sales, improved productivity) and set a budget accordingly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604283">
				<div id="div-comment-604283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anno Nymus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604283">
			February 26, 2008 at 4:03 am</a>		</div>

		<p>Who adopted 3rd party utilities that should have been part of the OS from the start (and sometimes bought the whole company)? (Answer: Microsoft.)</p>
<p>Who has a leading position in the desktop operating systems market, to a big extent because they support a lot of devices and bundle (3rd party) utility programs? (Answer: Microsoft.)</p>
<p>Yes, it may be a burden. But would it really be better if the 3rd party software had been developed in-house? Honestly?</p>
<p>If for MS &#8211; and you and people you work with &#8211; it is a burden to maintain (&quot;formerly&quot;) 3rd party software, I&#8217;d suggest to &quot;enhance&quot; the OS to only execute software that passes WLK.</p>
<p>And to avoid being sued for unauthorized use, just add the feature to only playback/display DRM-protected and centrally cleared media (yes, even system sounds and wallpapers).</p>
<p>&#8230;once all this is implemented, I&#8217;ll just sit back, relax, and watch the fireworks&#8230; ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-604313">
				<div id="div-comment-604313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604313">
			February 26, 2008 at 5:17 am</a>		</div>

		<p>&quot;but it says 64bit on the box&quot;</p>
<p>I think Windows 95 said 32bit on the box, but msgsrv32.exe, the &quot;Windows 32-bit VxD Message Server&quot;, was, naturally, a 16-bit app ;-)</p>
<p>And with Resource Meter they couldn&#8217;t win &#8211; the shell icon calls were only 32-bit, but the resource API calls were only 16-bit.</p>
<p>I still use 16-bit software.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604323">
				<div id="div-comment-604323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604323">
			February 26, 2008 at 5:48 am</a>		</div>

		<blockquote><p>
  My apologies, I didn&#8217;t realize that we weren&#8217;t supposed to mention it.
</p></blockquote>
<p>It makes MSFTies feel insecure about themselves.</p>
<blockquote><p>
  They&#8217;ve been spared that on OS X. &nbsp;Users don&#8217;t feel cheated that bundle apps or the shell aren&#8217;t 64-bit. &nbsp; When there will eventually be a 64-bit port of something, it will be hidden in a bundle, as opposed to dual &quot;Program Files&quot; folders or different shortcuts.
</p></blockquote>
<p>In OS X different versions of an application are stored in the same executable file (fat-binary) if you do a &#8216;file&#8217; on the actual executable you&#8217;ll see at least an i386 and a PPC version.</p>
<p>Bundles are used to bundle an application with its resources, metadata, filetype associations, etc. but they are not needed to &#8216;hide&#8217; different executables, there is one executable and it can contain code for multiple architectures.</p>
<p>In fact, from leopard on, there is only one version of OS X for x86, PPC and x86-64bit. Also, 32bit drivers work on the 64bit version. Joe User doesn&#8217;t need to concern himself with this whole 32/64 bit stuff.</p>
<p>Why microsoft chose to have two separate versions of windows for 32 and 64 bit is beyond me. It needlessly complicates stuff. If a relatively small company like Apple can make one DVD that installs on 2 different architectures and on 32 and 64 bit systems, I don&#8217;t see a reason why MS couldn&#8217;t have done the same. Maybe it&#8217;s a licensing thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-604343">
				<div id="div-comment-604343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604343">
			February 26, 2008 at 6:58 am</a>		</div>

		<p>@steveg: Moving Exchange 2007 to 64-bit was to get around Exchange Store&#8217;s long-standing virtual memory issues, which led to a demand that you booted with the /3GB switch if you had as little as 1GB installed. Fundamentally ESE, which Exchange Store is built on top of, doesn&#8217;t operate by buffering database content directly into memory as SQL Server does, leading to a lot of problems due to fragmentation in the memory allocator. The main problem here is that the block size allocated is highly variable so no amount of keeping special lookaside lists helps.</p>
<p>Going 64-bit alleviates these issues by giving it a lot more space to mess about in. In addition, some installations with multigigabyte databases where the users are hitting it very regularly will benefit from the ability to buffer much more space.</p>
<p>Because of the consequences of /3GB, shrinking the system address space to 1GB, you were told not to boot with /PAE before Windows Server 2003 SP1 (because that doubles the width of all the page table entries). That OS introduced the use of the NX bit, which requires PAE mode anyway. You&#8217;re still advised not to fit more than 4GB of RAM into an Exchange Server 2003 server, as the data structures required to manage the extra memory, and I think some other allocations which vary proportionally with physical RAM fitted, suck up too much of the system address space available and reduce the number of concurrent connections that can be made.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604353">
				<div id="div-comment-604353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Austin Wise</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604353">
			February 26, 2008 at 7:00 am</a>		</div>

		<blockquote><p>
  Why microsoft chose to have two separate versions of windows for 32 and 64 bit is beyond me.
</p></blockquote>
<p>Since OS X came out in 1999 while the first version of Windows NT came out in 1993, the improvements in hardware might have made Apple&#8217;s solution viable. &nbsp;There also was that much more knowledge on the construction of operating systems.</p>
<p>For what it&#8217;s worth, .NET apps are generally compiled to be instruction set agnostic (/platform on csc.exe defaults to anycpu).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-604363">
				<div id="div-comment-604363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christopher</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604363">
			February 26, 2008 at 7:18 am</a>		</div>

		<p>If Windows had some kind of translation going on to allow 32-bit drivers, I&#8217;m sure that it would mean that almost no-one would bother writing 64-bit drivers. Apple have a pretty tight grip on their ecosystem and can and do regularly announce that support for old technologies is being dropped as of now, but that doesn&#8217;t fly with enterprise customers who are so important to Microsoft. Microsoft don&#8217;t want to have to support some major driver memory virtualisation workaround for years to come?</p>
<p>It may be similar to the Win16 problem. I&#8217;m sure that 64-bit Windows could have come with an emulator for running 16-bit programs (after all, Mac OS X on x86 came with one for PPC programs). But this would have been a lot of work for Microsoft and give no incentive for anyone to upgrade from their old Win16 programs which Raymond has mentioned being a problem for killing off the API, and they&#8217;d still be worrying about 16-bit compatibility subsystems in another 20 years&#8217; time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-604373">
				<div id="div-comment-604373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604373">
			February 26, 2008 at 7:19 am</a>		</div>

		<p>@Aaargh: Why doesn&#8217;t Microsoft support 32-bit drivers?</p>
<p>Fundamentally a lot of 32-bit drivers don&#8217;t support PAE mode correctly. They can&#8217;t be presented with a 64-bit physical address, even though that&#8217;s been supported on the PC platform since the Pentium Pro in 1995.</p>
<p>Even if they do support it, Windows would have to wrap all calls to a 32-bit driver to ensure that the driver was only ever presented with 32-bit virtual addresses. That means remapping any user data buffers into the right address range, which would make the 4GB large address space feature for 32-bit programs impossible &#8211; it would have to be capped at 3GB to allow the region from C000&#8217;0000 to FFFF&#8217;FFFF to be used for remapping. This remapping would have to be done dynamically and Windows would need to know which parameters were pointers, which for custom I/O control codes is not known. (64-bit drivers are responsible for translating 32-bit versions of their custom I/O control structures &#8211; see <a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/aa489577.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/aa489577.aspx</a>.)</p>
<p>32-bit drivers could also be using code that&#8217;s banned from 64-bit kernel mode, like x87 FPU code. It&#8217;s banned so that Windows doesn&#8217;t have to dump the FPU stack, a very costly operation, when switching away from a thread currently running in kernel mode, and doesn&#8217;t have to restore it when switching to one.</p>
<p>So even if we were willing to live with the performance issues created by use of 32-bit drivers, there are some intractable problems preventing it.</p>
<p>Basically Microsoft have treated 64-bit Windows as a chance to fix some of the issues causing performance problems on 32-bit Windows, which were (often unintended) consequences of the design back in the early 90s.</p>
<p>Apple haven&#8217;t had this problem as they&#8217;re dealing with: many fewer drivers, on a system that&#8217;s far newer (2001 in its PowerPC incarnation, 2006 for x86) and with the expectation from the beginning that it would run on 64-bit, so with fewer of the issues that cause problems for MS. Also, most of the drivers come from Apple themselves.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-604383">
				<div id="div-comment-604383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604383">
			February 26, 2008 at 7:36 am</a>		</div>

		<p>@Austin: with regard to .NET, that&#8217;s because the actual code executed by the machine is compiled at runtime by the JIT compiler.</p>
<p>If you compare the output between compiling with AnyCPU, x86, x64 or even Itanium, you&#8217;ll see that the MSIL bytecode is identical. The only different is in the CLR header and, if you&#8217;ve selected x64 or Itanium, in the PE header. The PE header tells Windows to create a 32-bit or 64-bit process (if it&#8217;s an EXE); the CLR header tells the CLR whether this assembly can be loaded into the process you&#8217;re trying to load it into.</p>
<p>Assemblies marked AnyCPU can load into either 32-bit or 64-bit processes, and IIRC Windows will create a 64-bit process on a 64-bit OS. Assemblies marked x86 can only load in a 32-bit process. Assemblies marked x64 or IPF can only load into a 64-bit process on the appropriate 64-bit OS. There are multiple GAC directories, one for each CPU type, so that you can have assemblies differing only by CPU type installed on the same system. (You need a command prompt to view them, as there&#8217;s a shell extension for Explorer which takes over when you navigate to C:WindowsAssembly [or wherever your Windows folder is], but if you issue a &#8216;dir&#8217; command you&#8217;ll see GAC, GAC_32 and GAC_MSIL folders if you have .NET 2.0 installed on a 32-bit system, and a GAC_64 folder as well on x64.)</p>
<p>This marking feature is there so that if you have some compatibility issue &#8211; perhaps using a sized integer rather than the variable-width IntPtr, or casting an IntPtr, or simply an API that doesn&#8217;t exist on the 64-bit or 32-bit platform or is implemented differently &#8211; you can ensure that this is dealt with early and not with some exception or error at the call site.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604463">
				<div id="div-comment-604463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604463">
			February 26, 2008 at 12:09 pm</a>		</div>

		<p>Aaargh!: I don&#8217;t see how bundling all the architectures together helps anything. Sure, it means you only have one file and don&#8217;t have to care about what&#8217;s in it. But then that file is 2 or 4 times the size of what you would ordinarily have to download, and there&#8217;s no guarantee that the file has what you need to run.</p>
<p>Let&#8217;s say you have a browser that supports both 32-bit and 64-bit. When you open it on a 64-bit machine, it will run the 64-bit version of the code, right? So what happens when it goes to load a plugin that only has a 32-bit version in its bundle?</p>
<p>With Windows, each version is a separate file so I can easily choose to run the 32-bit version when I want to use 32-bit plugins. If they were all in the same file, I would either be stuck with whatever version the OS gave me or I would have to use some more complicated method of choosing which to use.</p>
<p>If OS X users don&#8217;t have to concern themselves with these issues, it must be because there are simply no 64-bit apps that use 3rd-party libraries yet. Clearly porting to 64-bit is as nontrivial as Raymond suggests, or OS X would be all 64-bit by now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-604503">
				<div id="div-comment-604503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604503">
			February 26, 2008 at 12:52 pm</a>		</div>

		<p>&quot;Let&#8217;s say you have a browser that supports both 32-bit and 64-bit. When you open it on a 64-bit machine, it will run the 64-bit version of the code, right? So what happens when it goes to load a plugin that only has a 32-bit version in its bundle?&quot;</p>
<p>More common however are PowerPC only plugins that has not been ported to Intel, which is why Get Info have an &quot;Open in Rosetta&quot; option.</p>
<p>&quot;Clearly porting to 64-bit is as nontrivial as Raymond suggests, or OS X would be all 64-bit by now.&quot;</p>
<p>Yep, as I said, in Tiger only command-line apps could be 64-bit.</p>
<p>Leopard allows GUI apps to be 64-bit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604573">
				<div id="div-comment-604573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604573">
			February 26, 2008 at 3:27 pm</a>		</div>

		<p>And for that matter, who ports the software to Alpha, MIPS, and PowerPC? (Yep, Microsoft)</p>
<p>Because most of these examples happened in the Win95 days and thus had to be incorporated into NT 4.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-604693">
				<div id="div-comment-604693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wizou</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604693">
			February 27, 2008 at 6:04 am</a>		</div>

		<p>IIRC, MSDN used to document QuickView API in order for developpers to make their own type viewer</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604773">
				<div id="div-comment-604773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">32BitRules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-604773">
			February 27, 2008 at 10:55 am</a>		</div>

		<blockquote><p>
  Because 4GB isn&#8217;t enough. And it&#8217;s even worse because your 2 * 1GB video cards get mapped over 2GB of your RAM. When next-gen video cards hit 2GB+ there will be no address space left for RAM. <a rel="nofollow" target="_new" href="http://www.dansdata.com/askdan00015.htm" rel="nofollow">http://www.dansdata.com/askdan00015.htm</a>
</p></blockquote>
<p>Incorrect. &quot;Dan&quot; just happens to have a graphics card with the same amount of memory as the apature size. The 64MB card in my work computer also maps 256MB. If &quot;Dan&quot; upgraded to a 512MB or 1GB card then it would still map 256MB.</p>
<p>GRAPHICS CARDS DO NOT MAP THEIR ENTIRE VRAM INTO THE PHYSICAL ADDRESS SPACE (unless they have &lt;=256MB).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-605033">
				<div id="div-comment-605033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-605033">
			February 28, 2008 at 11:22 am</a>		</div>

		<p>Mike Dimmick: &nbsp;Re Exchange Server, I always wondered if Exchange Server should or could be rewritten using SQL Server as its data store. &nbsp;It would be a big undertaking, with possibly big benefits.</p>
<p>At the 10 and 15-person companies that I consult for, when a couple of them have asked if they should run this fancy thing called Exchange server that they have heard of in passing, I say NO! &nbsp;Let your ISP handle e-mail, even between users in the same company, and use some other solution for shared calendaring and conference room scheduling and the other things that Exchange can do.</p>
<p>Now, this doesn&#8217;t apply to 200-person companies or 1000-person companies or really big companies. &nbsp;But Exchange Server is a &quot;whole &#8216;nother world&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-605403">
				<div id="div-comment-605403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-605403">
			February 28, 2008 at 9:02 pm</a>		</div>

		<blockquote><p>
  &gt;GRAPHICS CARDS DO NOT MAP THEIR ENTIRE VRAM INTO THE PHYSICAL ADDRESS SPACE (unless they have &lt;=256MB).&lt;&lt;
</p></blockquote>
<p>Really?!?</p>
<p>How come that the Windows XP x64 with 4GB RAM shows 3.25 GB of physical memory in system properties when you have <font color="red">XYZ</font> card with 768 MB of VRAM installed? Coincidence?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-605413">
				<div id="div-comment-605413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-605413">
			February 28, 2008 at 9:11 pm</a>		</div>

		<p>I meant to say Windows XP above.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-605853">
				<div id="div-comment-605853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pagetable.com/' rel='external nofollow' class='url'>Myria</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080225-00/?p=23343#comment-605853">
			March 1, 2008 at 3:18 am</a>		</div>

		<p>NT 64 can&#8217;t have 32-bit drivers due to some of the core design elements of NT. &nbsp;The most important one is that the user-mode address space is directly accessible to kernel mode. &nbsp;Much kernel-mode code assumes that it can access the current user thread&#8217;s memory space directly, within appropriate guidelines. &nbsp;This obviously doesn&#8217;t work for 32-bit drivers when addresses may be larger than 2^32.</p>
<p>Darwin, in contrast, reloads the entire page table on a system call, so it has an opportunity to do thunking between a 64-bit user memory space and the 32-bit kernel. &nbsp;Apple&#8217;s old design decision works out well for usability, but they get nailed on performance.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>