<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1169503">
				<div id="div-comment-1169503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169503">
			January 2, 2015 at 7:31 am</a>		</div>

		<p>I sometimes do &quot;if (!GetCurrentThreadId()) DoDebugThing(whatever);&quot;. This has more run-time overhead but also allows you to selectively execute the function.</p>
<p>If you only care about VC:</p>
<p>EXTERN_C void __cdecl ThisSeemsToWorkInVC(int x, int y)</p>
<p>{</p>
<p>#pragma comment(linker, &quot;/include:&quot;__FUNCDNAME__)</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169513">
				<div id="div-comment-1169513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169513">
			January 2, 2015 at 7:46 am</a>		</div>

		<p>I just export the function. EXE images can export functions. I&#39;m told DLL images can refer to them but I have no idea how this works and as far as I know only Cygwin uses this so they may have hacked the loader.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1169523">
				<div id="div-comment-1169523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169523">
			January 2, 2015 at 8:18 am</a>		</div>

		<p>@Joshua: DLLs importing from the any other module, including the executable image, is supported by the OS itself (and not a recently added feature either). &nbsp;Nothing cygwin-specific there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169543">
				<div id="div-comment-1169543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169543">
			January 2, 2015 at 11:42 am</a>		</div>

		<p>Eww. Don&#39;t send it to a function that sets state and has a meaningful type like SetLastError. It&#39;s a type error at best and an app-compat fail waiting to happen. One day sending the pointer to SetLastError will do something crazy you didn&#39;t expect (like a shim hooking SetLastError to watching for a WINERROR range will happen to fire because ASLR put your function somewhere where it overlaps with that error-code range and then your app will explode and install malware and take your credit-card information).</p>
<p>At best pass it to something that doesn&#39;t change state and which expects a PVOID like Ntdll!EncodePointer, rather than something that statefully sets a meaningful non-PVOID parameter like SetLastError.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1169553">
				<div id="div-comment-1169553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">poizan42</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169553">
			January 2, 2015 at 11:44 am</a>		</div>

		<p>@Ben Voigt, I&#39;m not sure about how ASLR fit into this, but exe images used to not be relocateable (unless forcing the linker to generate a relocateable image ofc.), in which case loading it into another process will fail if there is already somthing allocated at the base address.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169563">
				<div id="div-comment-1169563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169563">
			January 2, 2015 at 12:26 pm</a>		</div>

		<p>Hmmm. Matt is correct. Too bad NtDll!EncodePointer is undocumented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1169583">
				<div id="div-comment-1169583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169583">
			January 2, 2015 at 12:53 pm</a>		</div>

		<p>Oh, are we trying to figure out the best Win32 function that you can pass a pointer to while minimizing any side effects?</p>
<p>I&#39;m going to nominate GetProcessId(). It will almost certainly fail, causing the last error to be set to something, but at least it will be something fairly predictable. It takes a HANDLE, but it&#39;s no problem to convert a pointer to a HANDLE.</p>
<div class="post">[<em>This is a bad idea, because it will generate a <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/12/11/1259599.aspx">STATUS_INVALID_HANDLE</a><a> exception. -Raymond</a></em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1169593">
				<div id="div-comment-1169593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169593">
			January 2, 2015 at 1:11 pm</a>		</div>

		<p>@Gabe: Why gamble when you can use &quot;IsBadReadPtr(myptr,0)&quot;? kernel32!EncodePointer is documented if you want to use that.</p>
<div class="post">[<em>IsBadReadPtr is a bad idea because it will trigger security warnings in code analysis tools. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1169603">
				<div id="div-comment-1169603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169603">
			January 2, 2015 at 1:17 pm</a>		</div>

		<p>@Joshua: It isn&#39;t undocumented: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/bb432254%28v=vs.85%29.aspx">msdn.microsoft.com/&#8230;/bb432254%28v=vs.85%29.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169623">
				<div id="div-comment-1169623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169623">
			January 2, 2015 at 2:21 pm</a>		</div>

		<p>@Matt: Ah there we go that&#39;s kernel32!EncodePointer which is fine if you run on anything newer than Windows 2000.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hikari even thread-even depth-1" id="comment-1169633">
				<div id="div-comment-1169633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Chris+Crowther' rel='external nofollow' class='url'>Chris Crowther</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169633">
			January 2, 2015 at 3:36 pm</a>		</div>

		<p>At least the not-nice thing can be resolved with comments.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169643">
				<div id="div-comment-1169643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169643">
			January 2, 2015 at 10:30 pm</a>		</div>

		<p>Ignoring for a moment that many of these architectures (alpha, mips, ppc) are not currently supported by NT-based Windows (and ia64 is not supported in the latest version), why not combine some of those (undecorated) architectures with an || in the preprocessor directive? &nbsp;This makes it much less verbose:</p>
<p>#if defined(_X86_)</p>
<p>#define DecorateCdeclFunctionName(fn) &quot;_&quot; #fn</p>
<p>#elif defined(_AMD64_) || defined(_ALPHA_) || defined(_MIPS_)</p>
<p>#define DecorateCdeclFunctionName(fn) #fn</p>
<p>#elif defined(_IA64_)</p>
<p>#define DecorateCdeclFunctionName(fn) &quot;.&quot; #fn</p>
<p>#elif defined(_PPC_)</p>
<p>#define DecorateCdeclFunctionName(fn) &quot;..&quot; #fn</p>
<p>#else</p>
<p>#error Unknown architecture</p>
<p>#endif</p>
<p>You could make it even shorter by putting the &quot;_&quot;, &quot;.&quot;, or &quot;..&quot; into another variable, maybe with &quot;prefix&quot; in the name&#8230; &nbsp;Seeing DecorateCdeclFunctionName(fn) so verbosely and so many times is off-putting.</p>
<div class="post">[<em>It&#39;s less verbose, but it&#39;s harder to manage when new architectures are added. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1169663">
				<div id="div-comment-1169663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169663">
			January 3, 2015 at 3:53 am</a>		</div>

		<p>@poizan42: this feature may be useful for in-process DLLs, too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169683">
				<div id="div-comment-1169683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craven Weasel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169683">
			January 3, 2015 at 8:07 am</a>		</div>

		<p>I can handle the syntactical ambiguities of C for the most part. But while glancing over your post I stared at the line &quot;ForceFunctionToBeLinked forceTestMe(TestMe);&quot; for about two minutes, trying to figure out how you could keep a function from being linked out simply by the return type, until it occurred to me that you are defining a variable, not a function.</p>
<p>Regarding the opaque-ness of this technique, you could always define a macro to hide the variable declaration behind a meaningful name. Perhaps play a trick with __LINE__ to generate a sufficiently unique identifier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1169703">
				<div id="div-comment-1169703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169703">
			January 3, 2015 at 1:49 pm</a>		</div>

		<p>@poizan42 That creates difficulty in loading an image compiled as a main application into a process that has another main application. &nbsp;It presents no difficulty whatsoever for modules importing functions from the first non-relocatable image in their process, which is the topic being discussed.</p>
<p>Imports don&#39;t necessarily require loading a DLL; they are perfectly happy binding to modules already present, including the application module.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169723">
				<div id="div-comment-1169723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169723">
			January 4, 2015 at 3:20 am</a>		</div>

		<p>@Matt: You are right, but we can still use the call with a simple change, since: &quot;Bit 29 is reserved for application-defined error codes; no system error code has this bit set&quot;</p>
<p>So just or the result with (1 &lt;&lt; 28) and we&#39;re golden.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1169733">
				<div id="div-comment-1169733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">killer{r}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169733">
			January 4, 2015 at 5:53 am</a>		</div>

		<p>if (!&amp;GetLastError) SetLastError(PtrToInt(p));</p>
<p>would be less intrusive, if only GetLastError will not become intrinsic one day </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169743">
				<div id="div-comment-1169743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169743">
			January 4, 2015 at 7:37 am</a>		</div>

		<p>Also a bit surprising that </p>
<p>volatile void *pTestMe = &TestMe;</p>
<p>is not helpful &#8211; no TestMe and no p in resulting module.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1169783">
				<div id="div-comment-1169783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169783">
			January 5, 2015 at 4:57 am</a>		</div>

		<p>Could also do it like this:</p>
<p>if (GetLastError() == PtrToInt(p)) SetLastError(PtrToInt(p));</p>
<p>It would never change the error code and even the call to SetLastError is very unlikely to happen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169793">
				<div id="div-comment-1169793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169793">
			January 5, 2015 at 9:41 am</a>		</div>

		<p>It seems to me that Joshua&#39;s idea of simply exporting the function would be the best choice &#8211; there&#39;s no &#39;opaqueness&#39; about it. &nbsp;You&#39;re explicitly declaring that you want to make the function callable from &#39;something else&#39;. &nbsp;In this case the debugger is that something else.</p>
<p>Is there a downside to that technique that&#39;s causing people to continue to look for another method that doesn&#39;t have some oddball side-effect possibility?</p>
<div class="post">[<em>The downside of exporting it is that it becomes externally visible, and now you have an undocumented API that you have to preserve for compatibility reasons. It also means that there are now two files you need to keep in sync (the DEF file and the implementation). And you can&#39;t put #ifdef in a DEF file, so now you have the debugging function availble even in the non-debug build. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1169803">
				<div id="div-comment-1169803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169803">
			January 5, 2015 at 9:45 am</a>		</div>

		<p>The worse thing the linker does in the debug build is identical COMDAT elimination (ICE). This causes all little stub functions to be merged. Then you can&#39;t set a breakpoint in just one of them, and it will mess any stack trace and disassembly which might refer to such functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169843">
				<div id="div-comment-1169843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Curran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150102-00/?p=43233#comment-1169843">
			January 5, 2015 at 2:20 pm</a>		</div>

		<p>Also, couldn&#39;t we reduce this to just</p>
<p>&nbsp; &nbsp; ForceFunctionToBeLinked(TestMe);</p>
<p>(Constructing, but not storing the object). This is even more obvious what it&#39;s doing (if less obvious how it doing it).</p>
<div class="post">[<em>You have to put the function call inside a function, and you have to make sure that enclosing function is itself not optimized out by the linker, so you&#39;re back to the original problem. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>