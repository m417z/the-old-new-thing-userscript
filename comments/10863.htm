<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-908313">
				<div id="div-comment-908313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">woodswan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908313">
			April 21, 2011 at 7:59 am</a>		</div>

		<p>A lock-free algorithm can make the multi-thread world simple, provided every thread plays the game in a unified way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908343">
				<div id="div-comment-908343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908343">
			April 21, 2011 at 11:50 am</a>		</div>

		<p>Wow &#8212; this is the exact same question I just asked on StackOverflow -&gt; <a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/5680869/are-lock-free-algorithms-really-more-performant-than-their-lock-full-counterparts" rel="nofollow">stackoverflow.com/&#8230;/are-lock-free-algorithms-really-more-performant-than-their-lock-full-counterparts</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-908353">
				<div id="div-comment-908353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cory Nelson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908353">
			April 21, 2011 at 1:12 pm</a>		</div>

		<p>There are also cases where a lock-free algorithm performs slower than its locked counterpart, like a lock-free queue versus a locked std::deque. &nbsp;The lock-free algorithm will scale better and so with enough contention will perform better, but it&#39;s definitely not for everybody and needs careful profiling.</p>
<p>In fact the ConcurrentQueue in .NET is actually not lock-free, but borrows some of the techniques to get a better performing deque with better scalability than a locked queue, while not having any of lock-free&#39;s other properties. &nbsp;Most apps don&#39;t actually require all the lock-free properties and just want something that performs well in the average case, so this isn&#39;t really a problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908373">
				<div id="div-comment-908373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908373">
			April 21, 2011 at 2:02 pm</a>		</div>

		<p>For the case of singleton you can almost always ensure the initialization happens before the first call to get and after the initialization can happen, with a little attention to detail and willingness to violate local concerns.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-908383">
				<div id="div-comment-908383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Niclas Lindgren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908383">
			April 21, 2011 at 2:35 pm</a>		</div>

		<p>That singleton implementation looks dubious to me, g_xx can be published before the object is published fully and a concurrent call might end up using an object that isn&#39;t yet fully published. So that&#39;s another benefit of lock free algorithms, they avoid the difficult memory model issues. Or you will have to place a fence/memory barrier somewhere there to resolve the issue I think is there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908393">
				<div id="div-comment-908393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/suryp_4000_email.cz/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>suryp@email.cz</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908393">
			April 21, 2011 at 11:51 pm</a>		</div>

		<p>@Niclas Lindgren: Critical sections (and some other functions too) use the appropriate barriers to ensure memory ordering, as can be seen here:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms686355%28v=vs.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms686355%28v=vs.85%29.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-908403">
				<div id="div-comment-908403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Niclas Lindgren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908403">
			April 22, 2011 at 5:37 am</a>		</div>

		<p>@suryo: Yes, inside and after the region is safe, however the reading of g_pX before the region is not, there is nothing preventing the compiler and/or CPU to publish the pointer reference to g_pX before it has published the entire object it is pointing to. that means that reading the g_pX before the section can cause another thread to grab the pointer and start using an object that isn&#39;t fully published. There needs to be a fence between the publishing of the g_pX and the creation/publication of the object itself. I still think my concern is valid on the above written code.</p>
<p>Also I somewhat made it sound like you don&#39;t need to worry about memory models for lock free algorithms, it is actually the very opposite, you need to pay close attention to them, but since you know you are doing lock free stuff you are very aware of them.</p>
<p>If you use locking algorithms, don&#39;t try to be clever, it will almost always fail. If memory is shared any access to it should be protected if you need the access to return the correct data (same data a single threaded program would see), if you don&#39;t need correct values, for some reason, then you can relax such things.</p>
<div class="post">[<i><a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/06/10150261.aspx" rel="nofollow">I already covered this topic</a>. The dangers of double-check locking wasn&#39;t the point of the article. I&#39;ll just delete the code. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908473">
				<div id="div-comment-908473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chrismcb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908473">
			April 22, 2011 at 10:58 am</a>		</div>

		<p>Don&#39;t you have an issue with initializing the CriticalSection?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-908503">
				<div id="div-comment-908503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908503">
			April 23, 2011 at 7:17 am</a>		</div>

		<p>@ChrisMcB</p>
<p>Once again, initialization of locks is obviously not the point of the article.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>