<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1071283">
				<div id="div-comment-1071283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071283">
			August 7, 2013 at 7:09 am</a>		</div>

		<p>Incidentally, WeakReference is implemented in terms of GCHandle, so if your collection of WeakReference is behaving badly, consider replacing (but don&#39;t forget to clean up in Finally).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071333">
				<div id="div-comment-1071333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071333">
			August 7, 2013 at 7:44 am</a>		</div>

		<p>Since (under normal circumstances) GC is only run when there is memory pressure, how is &quot;Treat this as a regular (strong) reference most of the time, but if there is memory pressure, then you can reclaim the object.&quot; incorrect?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071363">
				<div id="div-comment-1071363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071363">
			August 7, 2013 at 7:49 am</a>		</div>

		<p>You answered your own question: GC can be run in other circumstances under non-normal circumstances.</p>
<p>IIRC you can manually invoke it, for one. &nbsp;You probably shouldn&#39;t ever need to, but The Daily WTF has taught me to expect such things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071443">
				<div id="div-comment-1071443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071443">
			August 7, 2013 at 8:54 am</a>		</div>

		<p>@The MAZZTer</p>
<p>YOU don&#39;t need to, but the guy across the hall &quot;needs to&quot; all the time.</p>
<p>Or, to put it another way, &quot;This is why we can&#39;t have nice things.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071453">
				<div id="div-comment-1071453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ursus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071453">
			August 7, 2013 at 9:49 am</a>		</div>

		<p>Unlike the Prime Directive in Star Trek, the policy is actually followed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071463">
				<div id="div-comment-1071463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/dave3283_4000_gmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>dave3283@gmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071463">
			August 7, 2013 at 10:00 am</a>		</div>

		<p>@Vilx- Like MAZZTer said, the GC can run at any point, not just memory pressure.</p>
<p>As much as we like to say &quot;never manually garbage collect&quot;, it is sometimes necessary. One program I wrote did Excel import through COM. Every time the user opened a file, it opened excel.exe. When done, we would release all resources in the C# code, but a zombie excel.exe remained alive. Forcing a GC would ACTUALLY release the handles, and Excel would quit.</p>
<p>So we were left with the choice of let hundreds of excel.exe processes accumulate over the course of a day, or force a GC after every import. In the end, we got less complaints of low system memory (and hundreds of zombie excel.exe&#39;s) by forcing the GC.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071483">
				<div id="div-comment-1071483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dbt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071483">
			August 7, 2013 at 10:21 am</a>		</div>

		<p>I&#39;m more familiar with the java GC than the CLR one, but with generational collectors, objects can be collected well before your total heap usage reaches some obvious threshold. &nbsp;Java calls them eden, survivor, and tenured, CLR apparently calls them simply 0, 1 and 2 generation. &nbsp;Even if you&#39;re not allocating very many temporary objects, eventually the proportionally smaller generation 0 will get collected, and if your object is only weakly referred to it will be collected even if it could have been promoted instead.</p>
<p>I&#39;m surprised CLR doesn&#39;t have soft references, they&#39;re useful for things like in-memory caches. &nbsp;weak references are primarily for implementing better resource cleanup than finalizers (in a concurrent environment; in a scoped evaluation of native resources obviously IDisposable/Closeable is a better pattern).</p>
<p>Does CLR run finalizers before or after weak references are handled? &nbsp;If finalizers run after, does it have the equivalent of phantom references, which are only enqueued after finalizers have run and the object is actually freed?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071493">
				<div id="div-comment-1071493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071493">
			August 7, 2013 at 12:11 pm</a>		</div>

		<p>@dbt: The answer about your finalizer question is two links away: the older post Raymond has linked from today&#39;s one links to a short blog post explaining how WeakReferences work: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/clyon/archive/2006/05/01/588001.aspx">blogs.msdn.com/&#8230;/588001.aspx</a> . Apparently, the .Net WeakReference can work both as a Java WeakReference or a Java PhantomReference based on a constructor argument.</p>
<p>As for Java SoftReferences: they do look like a neat feature, but you are really giving up a lot of control over your cache if you use them. All you get is a suggestion to the GC (the least recently used objects should be collected first) and a promise that all softly referenced objects are collected before an OutOfMemoryError is thrown. You cannot reason about how big your cache will actually be, or what its hit rate will look like, since those depend on GC implementation details. It is entirely possible that some completely different cache in a completely different library will make your cache starve because new objects are introduced to that one at a bigger rate than to yours. I&#39;m sure there are cases where SoftReferences make sense despite these limitations, but you cannot just plug them into caches to make them work better.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1071533">
				<div id="div-comment-1071533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071533">
			August 7, 2013 at 8:21 pm</a>		</div>

		<p>@DAVe3283Martin: Agreed. There is perfomance issue when lots of these zombie excel process got cleaned too. You see, when GC finally decided to &quot;clean the house&quot;, most of these idling excel process already goes to page file. When they are &quot;released from detention&quot; you&#39;ll see lots of disk activity because they don&#39;t just quit and need to do some &quot;final works&quot;.</p>
<p>However we don&#39;t do GC collect, we just call quit, then goes out of scope and wait a few seconds, then try kill with the PID saved earlier to make sure it dies.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071563">
				<div id="div-comment-1071563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AlexPaven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071563">
			August 8, 2013 at 2:05 am</a>		</div>

		<p>@DAVe3283Martin: actually that problem can be solved without garbage collecting manually; it&#39;s been a while since I hit it but if I recall correctly you can use Marshal.ReleaseComReference (on all the COM objects you created, including the document and the actual Excel app object) and then the zombie process goes away. Doing a collect seems like taking an unnecessarily large sledgehammer to it :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071573">
				<div id="div-comment-1071573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ooh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071573">
			August 8, 2013 at 3:01 am</a>		</div>

		<p>@DAVe3283Martin and @AlexPaven: Yep, exactly. That&#39;s the &quot;local solution to local problem&quot; approach. Only downsides are that it&#39;s harder to get right and takes longer to develop, so it&#39;s the kind of solution many people don&#39;t want to know or care about (unfortunately).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-1071583">
				<div id="div-comment-1071583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071583">
			August 8, 2013 at 3:52 am</a>		</div>

		<p>The .NET GC does not primarily run due to memory pressure (though that is one reason for it to run). The primary reason for GC to run is simply that a certain amount of allocation has occurred. Typically it&#39;s when the allocator reaches the end of its current allocation segment.</p>
<p>A WeakReference is actually pretty simple: it is a reference to where an object currently lives. However, when GC is doing its mark-and-sweep, it won&#39;t use treat this as a reference to the object that should keep the object alive (unlike a normal reference). If anything else is still referencing the object, that reference causes GC to mark the object and move on.</p>
<p>In the sweep phase, if the object is still marked, it may be moved (depending on whether GC is compacting the heap) and GC will update the WeakReference with the new location. If the object isn&#39;t marked through some other normal reference, the WeakReference will be zeroed.</p>
<p>If you tell the WeakReference to &#39;track resurrection&#39;, and the object has a finalizer (and hasn&#39;t called GC.SuppressFinalize), GC will not immediately zero the weak reference in the sweep phase. It puts a pointer to the object&#39;s finalizer on the finalization queue. The finalizer thread then processes the finalization queue asynchronously. When it reaches this object, it checks whether any strong references exist: if so, it&#39;s taken back off the queue and allowed to live. Otherwise, the finalizer is run. If there are still no strong references, the WeakReference is zeroed. The object&#39;s memory itself remains in place until this area is next compacted.</p>
<p>In a well-running system, there should be little to no delay between GC putting the object on the finalizer queue and the finalizer running, so really, this &#39;track resurrection&#39; feature isn&#39;t that useful. The finalizer can itself create a strong reference back to the object, but it has to re-register for finalization. Care must be taken with that, as the finalizer will be called once for every time that GC.ReRegisterForFinalize is called (in real .NET, anyway: Compact Framework implements it differently and will only call the finalizer if GC.ReRegisterForFinalize has been called more recently than GC.SuppressFinalize).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071693">
				<div id="div-comment-1071693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/dave3283_4000_gmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>dave3283@gmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071693">
			August 8, 2013 at 12:07 pm</a>		</div>

		<p>@AlexPaven and @Ooh &#8211; It has been a while since I worked on that code, but I spent several days trying to get it to work without a garbage collect (security policy frowned on manual GC). In the end, I got 2 other programmers to look over it, but we could never get excel to quit without a GC (or killing the process, which is worse, IMO), so we just got an exception to the security policy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071743">
				<div id="div-comment-1071743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071743">
			August 8, 2013 at 3:18 pm</a>		</div>

		<p>@DAVe3283Martin: Did you try Excel.Quit()?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071913">
				<div id="div-comment-1071913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1071913">
			August 9, 2013 at 8:51 am</a>		</div>

		<p>@Mike Dimmick, now THAT&#39;s a comment!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072003">
				<div id="div-comment-1072003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1072003">
			August 9, 2013 at 11:09 am</a>		</div>

		<p>@DAVe3283Martin &quot;&quot;&quot; In the end, I got 2 other programmers to look over it, but we could never get excel to quit without a GC&quot;&quot;&quot;</p>
<p>In my experience, it was probably some Range object that was used in the middle of an expression that kept the whole thing alive. Ended up having to break even simple expressions that worked with the Cells collection into three or four lines each not counting the cleanup code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072113">
				<div id="div-comment-1072113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1072113">
			August 9, 2013 at 1:18 pm</a>		</div>

		<p>Joshua: Maybe you can help out this guy: <a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/18154315/c-sharp-excel-process-not-closing">stackoverflow.com/&#8230;/c-sharp-excel-process-not-closing</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072403">
				<div id="div-comment-1072403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mafu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130807-00/?p=3583#comment-1072403">
			August 12, 2013 at 5:21 am</a>		</div>

		<p>I wondered about this a while ago (<a rel="nofollow" target="_new" href="http://stackoverflow.com/q/7755954/39590" rel="nofollow">stackoverflow.com/&#8230;/39590</a> (ref)). Strangely enough, the MSDN library gives caches as an example of how to use the weak refs, even though that&#39;s a prime example of how *not* to use them. I&#39;ve been very trusting to the MSDN so I was really confused.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>