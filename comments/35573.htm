<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-larryosterman even thread-even depth-1" id="comment-277133">
				<div id="div-comment-277133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277133">
			May 23, 2005 at 9:12 am</a>		</div>

		<p>Raymond&#8217;s pointed to this before, but I&#8217;ll do it again&#8230;  His last example is the generalization of: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/larryosterman/archive/2004/04/22/118240.aspx" rel="nofollow">http://blogs.msdn.com/larryosterman/archive/2004/04/22/118240.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-277143">
				<div id="div-comment-277143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nate</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277143">
			May 23, 2005 at 11:47 am</a>		</div>

		<p>First of all, this code is sloppy because it does not keep the HINSTANCE returned by LoadLibrary() around; it would be more proper to keep it around and call FreeLibrary() when everything is all done.</p>
<p>Second, would I be correct if I said that if this code did proper HINSTANCE lifetime management, that the only time the code would not work would be when the executable shuts down?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-277163">
				<div id="div-comment-277163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ryanmy/' rel='external nofollow' class='url'>Ryan Myers [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277163">
			May 23, 2005 at 5:11 pm</a>		</div>

		<p>Nate, if it&#8217;s your first time here, Raymond tends to omit anything from a sample that&#8217;s not critical to showing a point.</p>
<p>Secondly, no, it&#8217;d still break even if you called FreeLibrary.  Note that the &quot;oops&quot; point is inside DllMain&#8217;s process detach event.  That means that it&#8217;s being called after the main program&#8217;s main() has returned, and the OS is unloading the DLLs from memory.</p>
<p>The whole point of this article is that, for the reasons Raymond explained, the OS does not know that A.DLL depends on B.DLL &#8212; so it is free, if it desires, to unload B.DLL before it unloads A.DLL.  (Remember, this is after the main program has exited!)  If this happens, A.DLL will attempt to jump to a function in dead memory.  The same problem would exist, as Raymond pointed out, if you called GetModuleHandle() to get a handle to a DLL already loaded by some other DLL, or if another DLL calls one of your functions to set a callback in their own code.</p>
<p>Also, consider that DLL dependencies form a DAG and answer for yourself why a simple reference count would not solve the problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-277173">
				<div id="div-comment-277173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277173">
			May 23, 2005 at 8:04 pm</a>		</div>

		<blockquote><p>
  or to provide additional lifetime management<br />
  <br />&gt; functionality (although it doesn&#8217;t do it any<br />
  <br />&gt; more, though it used to).</p>
<p>What did it used to do?  (Obviously it doesn&#8217;t do it any more, giving a 404 error now.)</p>
<p>Meanwhile, why not track dynamic dependencies in exactly the manner you&#8217;re describing?  You describe them and then say they&#8217;re not what was wanted, well sure they might not be exactly what someone had in mind at design time, but they&#8217;re exactly what the code is doing, and the result still yields a logical dependency graph (except for the same exceptions as always, as you pointed out, when circular dependencies are created).
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-277183">
				<div id="div-comment-277183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277183">
			May 23, 2005 at 8:14 pm</a>		</div>

		<p>&quot;why not track dynamic dependencies in exactly the manner you&#8217;re describing?&quot;</p>
<p>??? The whole point of the article was explaining why no such manner is valid. Or did I completely miss the point of your question? (What &quot;manner&quot; was I describing anyway?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-277213">
				<div id="div-comment-277213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/marcelolr/archive/2005/05/23/421251.aspx' rel='external nofollow' class='url'>Marcelo's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277213">
			May 23, 2005 at 9:49 pm</a>		</div>

		<p>In&amp;amp;nbsp;How To Do A Good Performance Investigation, Rico spells out step-by-step instructions on how&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-277233">
				<div id="div-comment-277233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277233">
			May 24, 2005 at 12:58 am</a>		</div>

		<blockquote><p>
  Monday, May 23, 2005 8:14 PM by oldnewthing</p>
<p>I thought you were anonymous when responding in your own blog?  ^u^</p>
<p>By the way since you&#8217;re reading your blog, please scroll down to what happens on May 19 and earlier.  You really blue it in editing.  ^_^</p>
<p>&gt; The whole point of the article was<br />
  <br />&gt; explaining why no such manner is valid.</p>
<p>My point was that even though no such manner is completely accurate, it would still be a useful thing to do.</p>
<p>For example even though you can&#8217;t trust the return address, if module A does something to show its dependency on module B then you don&#8217;t have to trust the return address, you can accept module A&#8217;s action saying that module A wants to be unloaded before B gets unloaded.</p>
<p>For example if A does something to depend on middle and middle does something to depend on B, then sure maybe the designer wanted A to depend on B, but it doesn&#8217;t hurt to accept the flow of execution making A depend on middle and middle depend on B.</p>
<p>I think it doesn&#8217;t even hurt to interpret a call to GetModuleHandle as asking for a dependency.  Sure a pathological case could create a circular dependency here where there wasn&#8217;t a circular dependency under the old rules.  But in such a case I&#8217;ll bet the logical design had that circularity.  (Of course we also need to check that no security problems are added.  I can&#8217;t see any when it&#8217;s just a dependency graph.)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-277193">
				<div id="div-comment-277193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277193">
			May 23, 2005 at 8:19 pm</a>		</div>

		<p>After reading Larry Osterman&#8217;s posting that he pointed to, and then the last &quot;Hilarity&quot; case here, I think I&#8217;ve figured out that another coding style suffers from the same kind of problem.</p>
<p>Sorry for abusing a not exactly a .Net blog with .Net code.</p>
<p>//Class-level declaration.<br />
<br /> /* Create a TraceSwitch to use in the entire application.*/<br />
<br /> static TraceSwitch* mySwitch = new TraceSwitch(S&quot;General&quot;, S&quot;Entire Application&quot;);</p>
<p>Since the pointer is static, the TraceSwitch object doesn&#8217;t get deleted until after the main program exits, right?</p>
<p>The sample code in this comment was copied from:<br />
<br /><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemDiagnosticsTraceSwitchClassTopic.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemDiagnosticsTraceSwitchClassTopic.asp</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-277203">
				<div id="div-comment-277203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277203">
			May 23, 2005 at 8:53 pm</a>		</div>

		<p>&gt; Since the pointer is static, the TraceSwitch object doesn&#8217;t get deleted until after the main program exits, right?</p>
<p>.NET doesn&#8217;t have deterministic finalization, so *any* finalizer can run after the main function has ended, whether it&#8217;s a global or not.  In this case, though, the framework will ensure that all finalizers that are going to run have already run by the time it starts unloading the AppDomain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-277253">
				<div id="div-comment-277253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://members.chello.nl/~a.degreef' rel='external nofollow' class='url'>Toine de Greef</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277253">
			May 24, 2005 at 5:28 am</a>		</div>

		<p>Is this similar to the behaviour in MSXML?<br />
<br />It seems that MSXML does an internal LoadLibrary of WinHTTP, and does not release that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-277353">
				<div id="div-comment-277353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Justin Olbrantz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277353">
			May 24, 2005 at 10:20 am</a>		</div>

		<p>Oh, this fun little feature. Learned about this one doing some debugging following a highy mysterious exit-time crash in one of my programs :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-universalis odd alt thread-odd thread-alt depth-1" id="comment-277243">
				<div id="div-comment-277243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Universalis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277243">
			May 24, 2005 at 5:01 am</a>		</div>

		<p>Norman Diamond &#8211; isn&#8217;t there a misconception behind all this?<br />
<br />DLLs can&#8217;t call LoadLibrary or GetModuleHandle. [People, including Raymond, talk as if they did but that&#8217;s just sloppy language]. Only processes (.EXEs) can call things because only processes can execute code.</p>
<p>So when you say &quot;if module A does something&quot;, the problem is that module A can&#8217;t do anything because module A is a DLL.</p>
<p>That&#8217;s where all the talk about return addresses came from, in a vain attempt to discover where the calling code was *located* as a way of inferring dependencies. But such attempts can&#8217;t succeed 100% (pathological test case: a wrapper DLL that exports a function called LoadLibray whose sole action is to call LoadLibrary) and in programming there are only two acceptable quality levels: 0% and 100%.</p>
<p>The LoadLibraryAndEstablishDependency API is the only way round this problem&#8230; when it gets written!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-277663">
				<div id="div-comment-277663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Todd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277663">
			May 25, 2005 at 7:20 am</a>		</div>

		<p>STDAPI DllCanUnloadNow(void)<br />
<br />{</p>
<p>    if (CanUnload())<br />
<br />    {<br />
<br />        if (g_hSomething)<br />
<br />        {<br />
<br />           FreeSomething(g_hSomething);<br />
<br />           g_hSomething = NULL;<br />
<br />        }</p>
<p>        return S_OK;<br />
<br />    }</p>
<p>    return S_FALSE;<br />
<br />}</p>
<p>BOOL CALLBACK DllMain(HINSTANCE hinst,<br />
<br />      DWORD dwReason, LPVOID lpReserved)<br />
<br />{<br />
<br /> switch (dwReason) {<br />
<br /> &#8230;<br />
<br /> case DLL_PROCESS_DETACH:<br />
<br />  if (g_hSomething) {<br />
<br />   //Do nothing. //Should have had a chance in DllCanUnloadNow. Anything we do now is suspect.<br />
<br />  }<br />
<br />  break;<br />
<br /> }<br />
<br /> return TRUE;<br />
<br />}</p>
<p>This is the way I have solved this in the past:</p>
<p>If I am going to return S_OK from DllCanUnloadNow, then I do cleanup there.</p>
<p>If I get to DllMain and I still have resources, then I dont touch them. I am basically getting kicked out of the process, and dont know the state of the other libraries in the process. </p>
<p>Does this seem sound?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-277773">
				<div id="div-comment-277773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kuhr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277773">
			May 26, 2005 at 3:31 am</a>		</div>

		<p>Raymond,</p>
<p>what if A.DLL stored the HMODULE returned by LoadLibrary(&quot;B.DLL&quot;) in a TLS-Slot and called a function in B using this HMODULE extracted from the TLS-Slot during DLL_THREAD_DETACH, not DLL_PROCESS_DETACH in DllMain? Does this suffer from the same problem or is this safe? Or is there just a simple rule: Don&#8217;t call into DLLs that your DLL loaded dynamically from within DllMain with either DLL_THREAD_DETACH or DLL_PROCESS_DETACH invoked?</p>
<p>&#8212;<br />
<br />Stefan</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-277783">
				<div id="div-comment-277783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kuhr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050523-05/?p=35573#comment-277783">
			May 26, 2005 at 4:21 am</a>		</div>

		<p>Hello all,</p>
<p>I think what I tried to ask in my post sounds a bit convoluted so here is what I meant expressed in C (dunno if this compiles, though). My question is: Is my call into B.DLL via the function pointer obtained in DLL_THREAD_DETACH dangerous or safe? Am I allowed to do the FreeLibrary a few lines below this function call or is this dangerous as well?</p>
<p>/// a global in A.DLL<br />
<br />DWORD g_dwTlsSlot = TLS_OUT_OF_INDEXES;</p>
<p>/// a function in A.DLL, not to be called from<br />
<br />/// A.DLL&#8217;s DllMain<br />
<br />void SomeAFunc()<br />
<br />{<br />
<br />    if (TLS_OUT_OF_INDEXES != g_dwTlsSlot &amp;&amp; !TlsGetValue(g_dwTlsSlot))<br />
<br />        TlsSetValue(g_dwTlsSlot, LoadLibrary(&quot;B.DLL&quot;));<br />
<br />}</p>
<p>/// DllMain of A.DLL:<br />
<br />BOOL APIENTRY DllMain( HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)<br />
<br />{<br />
<br />  switch(ul_reason_for_call)<br />
<br />  {<br />
<br />    case DLL_PROCESS_ATTACH:<br />
<br />      g_dwTlsSlot = TlsAlloc();</p>
<p>    case DLL_THREAD_ATTACH:<br />
<br />      break;</p>
<p>    case DLL_PROCESS_DETACH:<br />
<br />    case DLL_THREAD_DETACH:<br />
<br />      {<br />
<br />        if (TLS_OUT_OF_INDEXES != g_dwTlsSlot)<br />
<br />        {<br />
<br />          HMODULE hinstB = TlsGetValue(g_dwTlsSlot);<br />
<br />          GETSOMETHING GetSomething = NULL;<br />
<br />          if (hinstB)<br />
<br />            GetSomething = (GETSOMETHING) GetProcAddress(hinstB, &quot;GetSomething&quot;);</p>
<p>          //// Ooops or no oops when calling GetSomething here?<br />
<br />          if (GetSomething)<br />
<br />            GetSomething();</p>
<p>          TlsSetValue(g_dwTlsSlot, NULL);<br />
<br />          FreeLibrary(hinstB);</p>
<p>          if (DLL_PROCESS_DETACH==ul_reason_for_call)<br />
<br />          {<br />
<br />            TlsFree(g_dwTlsSlot);<br />
<br />            g_dwTlsSlot = TLS_OUT_OF_INDEXES;<br />
<br />          }</p>
<p>        }<br />
<br />      }<br />
<br />      break;<br />
<br />  }<br />
<br />  return TRUE;</p>
<p>}</p>
<p>&#8212;<br />
<br />Stefan Kuhr</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>