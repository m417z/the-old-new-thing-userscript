<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-952383">
				<div id="div-comment-952383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pedrow</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952383">
			December 9, 2011 at 7:33 am</a>		</div>

		<p>Does it also depend a bit on how much of the task&#39;s clock time is spent actually running stuff &#8211; say if it runs for 10 minutes mostly blocked waiting for stuff coming down a slow network connection it makes sense to create more threads. If it is running at 100% CPU there&#39;s less point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-952393">
				<div id="div-comment-952393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952393">
			December 9, 2011 at 8:32 am</a>		</div>

		<p>I&#39;ve been considering making a specialized thread pool that creates a new thread whenever it tries to allocate one and there isn&#39;t one to allocate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-952403">
				<div id="div-comment-952403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952403">
			December 9, 2011 at 10:48 am</a>		</div>

		<p>And that&#39;s why naming (of variables, constants, functions, &#8230;) is more important than compiler errors. Compiler errors are easy to fix compared to errornously named things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-952413">
				<div id="div-comment-952413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952413">
			December 9, 2011 at 10:50 am</a>		</div>

		<p>I was about to write something very similar to what Pedrow said. &nbsp;A task that&#39;s mostly waiting (the thus not scheduled CPU time) is a good candidate for WT_EXECUTELONGFUNCTION. &nbsp;A task that&#39;s CPU bound probably isn&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-952433">
				<div id="div-comment-952433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952433">
			December 9, 2011 at 1:28 pm</a>		</div>

		<p>@Pedrow, Adrian</p>
<p>Sure, if you know that the machine only has a single CPU&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-952443">
				<div id="div-comment-952443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952443">
			December 9, 2011 at 1:55 pm</a>		</div>

		<p>@Mike: Doesn&#39;t matter how many cores there are. &nbsp;Thread pools start with 1-2 threads per core. &nbsp;If your task is CPU bound, then there&#39;s no point in running it in parallel with the other tasks, you end up slowing everything down. &nbsp;This is an elementary result of queueing theory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-952463">
				<div id="div-comment-952463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952463">
			December 9, 2011 at 10:53 pm</a>		</div>

		<p>So should WT_EXECUTELONGFUNCTION be thought of as &quot;WT_EXECUTESLOWFUNCTION&quot; (as in &quot;resource-bound&quot; slow, not &quot;takes a long time&quot; slow) then?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-952483">
				<div id="div-comment-952483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/computer_2D00_dude_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>computer-dude@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952483">
			December 10, 2011 at 4:54 am</a>		</div>

		<p>I read the last part of the title first, and my first thought was &quot;a long is 32 bits. Why are you storing a time in 32 bits?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-952493">
				<div id="div-comment-952493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952493">
			December 10, 2011 at 9:11 am</a>		</div>

		<p>I can&#39;t help but think that it would&#39;ve made things simpler to be explicit about what is going on here and call the constant something like WT_FORCESEPARATETHREAD; while hiding the implementation behind an abstraction is good in some cases, this is clearly a case where the only way to make a decision on whether to set this flag is to understand the details of what it implies and how it is implemented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-952503">
				<div id="div-comment-952503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Guest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952503">
			December 11, 2011 at 5:53 pm</a>		</div>

		<p>it should be WT_ALLOWOVERSUBSCRIPTION</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-952513">
				<div id="div-comment-952513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chrismcb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952513">
			December 11, 2011 at 6:53 pm</a>		</div>

		<p>But it doesn&#39;t FORCE a SEPARATE thread. It is more likely to create a new thread than if you don&#39;t use the flag.</p>
<p>I&#39;m not sure why someone thinks it is missed name. If your job is going to take a long time to execute, then set this flag. You has the programmer decide what a &quot;long time&quot; is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-952653">
				<div id="div-comment-952653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952653">
			December 12, 2011 at 9:42 am</a>		</div>

		<p>@GWO: I think we know by now how the story ends &#8211; it turns out that some software relies on the one second timeout, therefore it&#39;s bound to that value in all future Windows versions for backwards compatibility!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-952533">
				<div id="div-comment-952533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952533">
			December 12, 2011 at 5:30 am</a>		</div>

		<p>&quot;After about a second, the thread pool got impatient and spun up a new thread to service the now-long-overdue Tick events.&quot; </p>
<p>Which suggests that, internally, there *is* a magic number, but that its none of your business.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-952743">
				<div id="div-comment-952743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111209-00/?p=8933#comment-952743">
			December 13, 2011 at 6:08 am</a>		</div>

		<p>In 2005 year article mentioned here, the example with 2 command line parameters confuses me a little. So there will be only ONE thread in the &#39;pool&#39; if flag WT_EXECUTELONGFUNCTION is never used? (Or maybe it was because example was run on a single-core CPU?)</p>
<p>For example, say thread pool has 2 threads, and one task is already running (without WT_EXECUTELONGFUNCTION flag). If new task is queued, will it wait for first task to complete, or will it run on the second thread?</p>
<p>And what if running task enters the wait-state? Doesn&#39;t the pool manager activates another task from the queue to keep the number of running threads in the pool at the same level? (I recall something like that is used in IOCP. I don&#39;t know if it applies here.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>