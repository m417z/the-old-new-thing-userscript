<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1262005">
				<div id="div-comment-1262005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160824-00/?p=94155#comment-1262005">
			August 24, 2016 at 7:42 am</a>		</div>

		<p>Shouldn&#8217;t the while condition be &#8220;while (Barrier-&gt;Unique == Unique)&#8221;?</p>
<p>Also, don&#8217;t we have a race condition here?  Suppose thread 1 enters the barrier and decides it needs to wait, but before it can call WaitOnAddress, thread 2 enters the barrier and calls WakeByAddressAll.  Now thread 1 calls WaitOnAddress and is stuck unless we have a spurious wake up or the or the barrier threads are released again (which probably won&#8217;t happen due to the stuck thread).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1262015">
				<div id="div-comment-1262015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160824-00/?p=94155#comment-1262015">
			August 24, 2016 at 7:47 am</a>		</div>

		<p>Thanks for the bug fix to the loop. But the race condition is solved because thread 2 will also increment the Unique, so thread 1&#8217;s late WaitOnAddress will return immediately because the Unique does not match the captured value.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1262055">
				<div id="div-comment-1262055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160824-00/?p=94155#comment-1262055">
			August 24, 2016 at 8:22 am</a>		</div>

		<p>I see.  But that pushes the problem into WaitOnAddress.  How are these functions implemented?  Do they basically just wrap a condition variable?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1262105">
				<div id="div-comment-1262105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Caron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160824-00/?p=94155#comment-1262105">
			August 24, 2016 at 10:13 am</a>		</div>

		<p>Note that WaitOnAddress accepts a variable to designate the &#8220;undesirable&#8221; value, in this case &amp;Unique. All it has to do is compare the value at the Waited On Address to the value provided, and go &#8220;oh, I guess we&#8217;re already done.&#8221; It doesn&#8217;t seem super crazy.</p>
<p>The only time this might be a problem is if 4 billion cycles pass before WaitOnAddress is called, but as noted in the article, that is rather unlikely.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1262056">
				<div id="div-comment-1262056" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R Samuel Klatchko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160824-00/?p=94155#comment-1262056">
			August 24, 2016 at 8:42 am</a>		</div>

		<p>There&#8217;s a bug that allows more than TotalThreads to come in without being detected due to the fact that you don&#8217;t reset WaitingThreads to 0 and increment Unique atomically.</p>
<p>Assume that TotalThreads-1 have come when another thread comes in, executes the statement &#8220;Barrier-&gt;WaitingThreads = 0;&#8221; and the scheduler than deschedules the thread. On that same CPU the schedulers chooses a new thread which enters EnterAltBarrier &#8211; is still has the old Unique and WaitingThreads of 0 so it incorrectly becomes part of the group.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1262075">
				<div id="div-comment-1262075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160824-00/?p=94155#comment-1262075">
			August 24, 2016 at 9:31 am</a>		</div>

		<p>The only way that would happen is if the caller sent another thread into the barrier before the existing threads were released from the barrier, which would be a bug in the caller for sending too many threads into the barrier.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1262065">
				<div id="div-comment-1262065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160824-00/?p=94155#comment-1262065">
			August 24, 2016 at 9:00 am</a>		</div>

		<p>&gt;Â¹If you are super-paranoid, then you could use a 64-bit counter for the wait cycle number. That gives you 18 pentillion barrier<br />
&gt; wait cycles. This means that even if you had a 4GHz processor entering the barrier every cycle, it would have to be locked out<br />
&gt; of the barrier for 136 years before the possibility that the wait cycle counter would get reused. </p>
<p>/// TODO: Change this for compatibility with Intel Quantum CPUs</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1262125">
				<div id="div-comment-1262125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160824-00/?p=94155#comment-1262125">
			August 24, 2016 at 10:58 am</a>		</div>

		<p>//// TODO: Make practical quantum computers &#8211; this will be more difficult than the hype lets on</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1262435">
				<div id="div-comment-1262435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160824-00/?p=94155#comment-1262435">
			August 28, 2016 at 2:52 am</a>		</div>

		<p>The following line seems really, really suspect:<br />
    while (Barrier-&gt;Unique == Unique) {</p>
<p>we&#8217;re doing a non atomic read with no ordering or visibility guarantees here, while another thread is writing to the same variable (atomically but that does us no good here). This is undefined behavior in C++. </p>
<p>Practically speaking the compiler does not know enough about WaitOnAddress to break the code and x86 with its strong memory model won&#8217;t either, but still for this to be correct it&#8217;d require an acquire read.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>