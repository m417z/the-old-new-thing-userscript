<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1085233">
				<div id="div-comment-1085233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chuck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131028-00/?p=2823#comment-1085233">
			October 28, 2013 at 7:22 am</a>		</div>

		<p>Raymond, you read my mind, I was studying this exact thing a few weeks ago and decided to settle with using the CoreInfo utility. Thank you for your post!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1085253">
				<div id="div-comment-1085253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jonwil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131028-00/?p=2823#comment-1085253">
			October 28, 2013 at 8:03 am</a>		</div>

		<p>Why would windows (and apps for that matter) need to care about cores vs packages? How is a dual core CPU different from 2 single core CPUs?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1085263">
				<div id="div-comment-1085263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Sowul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131028-00/?p=2823#comment-1085263">
			October 28, 2013 at 8:14 am</a>		</div>

		<p>@jonwil &#8211; two examples off the top of my head:</p>
<p>1) NUMA (there are other APIs for this, but it is an extreme case of dual-core being different from two single cores)</p>
<p>2) Licensing (per-core vs. per-package)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1085273">
				<div id="div-comment-1085273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131028-00/?p=2823#comment-1085273">
			October 28, 2013 at 8:17 am</a>		</div>

		<p>The processors in a dual core chip often share caches, making it cheaper to move a process from one to another on the same chip, rather than move it to another one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1085293">
				<div id="div-comment-1085293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131028-00/?p=2823#comment-1085293">
			October 28, 2013 at 8:33 am</a>		</div>

		<p>@jonvil:</p>
<p>You want to keep a process within one package (node), to reduce cache coherency traffic between sockets. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1085353">
				<div id="div-comment-1085353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131028-00/?p=2823#comment-1085353">
			October 28, 2013 at 11:48 am</a>		</div>

		<p>I don&#39;t think I&#39;ve ever seen code before that declared a variable in the condition of a for loop like this, though it&#39;s perfectly valid:</p>
<p>for ( &#8230;; auto pinfo = enumInfo.Current(); &#8230;) { &#8230; }</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1085363">
				<div id="div-comment-1085363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131028-00/?p=2823#comment-1085363">
			October 28, 2013 at 11:53 am</a>		</div>

		<p>@Adam Rosenfeld:</p>
<p>Same as in while() condition.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-odd thread-alt depth-1" id="comment-1085403">
				<div id="div-comment-1085403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131028-00/?p=2823#comment-1085403">
			October 28, 2013 at 12:35 pm</a>		</div>

		<p>Thanks a lot. Wikipedia could certainly use this post.</p>
<p>Although the &quot;Little Program&quot; with capital L and capital P scares me a little.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1085463">
				<div id="div-comment-1085463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">saveddijon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131028-00/?p=2823#comment-1085463">
			October 28, 2013 at 4:51 pm</a>		</div>

		<p>@alegr1:</p>
<p>Keeping all processes in one node doesn&#39;t always help you &#8211; unless you can keep their memory on that node as well.</p>
<p>On an AMD dual-socket system (or single-socket MCM such as Magny-Cours) each die has its own DDR controller, and the cache coherency controller to go with it. If you have processes on one die executing against memory hosted by the other die then you will still have lots of inter-die traffic simply managing the cache probes, even if no data ever moves around.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1085523">
				<div id="div-comment-1085523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131028-00/?p=2823#comment-1085523">
			October 29, 2013 at 3:35 am</a>		</div>

		<p>I once had to deal with a network provider which wouldn&#39;t bother to calculate the total buffer size, instead it just told you how much it tried to allocate when it found you hadn&#39;t provided enough. So if you provided no buffer, it would say you didn&#39;t even have enough for the basic structure, and only when you provided that did it admit that you needed a bigger buffer to cover the optional fields.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1085663">
				<div id="div-comment-1085663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mal DeMer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131028-00/?p=2823#comment-1085663">
			October 29, 2013 at 8:20 am</a>		</div>

		<p>@Adam Rosenfield: You need to get out more. :) This is perfectly legit, and nice because it limits the scope of the loop variable to that of the loop.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1085733">
				<div id="div-comment-1085733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131028-00/?p=2823#comment-1085733">
			October 29, 2013 at 10:12 am</a>		</div>

		<p>@saveddijon:</p>
<p>Memory affinity doesn&#39;t have anything to do with cache coherency.</p>
<p>&quot;Near&quot; and &quot;far&quot; memory only matters when you need to fetch data not in the local cache. But even with the &quot;near&quot; memory, the requesting CPU still needs to broadcast a request to all nodes, to see if it&#39;s in other socket&#39;s cache. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1085923">
				<div id="div-comment-1085923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">saveddijon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131028-00/?p=2823#comment-1085923">
			October 29, 2013 at 5:42 pm</a>		</div>

		<p>@alegr1:</p>
<p>Not fully true. If the coherency controller supports a cache directory (AMD calls it &quot;probe filter&quot;) then you do not necessarily need to broadcast to all nodes. The coherency controller already knows who has the data, and if the coherency controller for the memory is local to &quot;your&quot; die then you save a bit of I/O.</p>
<p>This is a big win for precisely the multi-die case, where you want to avoid all unnecessary inter-die communication.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>