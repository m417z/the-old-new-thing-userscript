<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-134363">
				<div id="div-comment-134363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimmick.demon.co.uk/' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134363">
			December 11, 2003 at 11:00 am</a>		</div>

		<p>There&#8217;s a race condition there, isn&#8217;t there? What if the parent manages to execute FreeStartupParams before the child got to MapViewOfFile? The mapping object will disappear.</p>
<p>You also need an unnamed event object (manual reset, initially unsignalled) created by the parent process, the handle to it passed on the command line in the same way as the mapping object; the child must signal it after calling GetStartupParams, and the server must wait on it before calling FreeStartupParams.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134373">
				<div id="div-comment-134373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134373">
			December 11, 2003 at 11:33 am</a>		</div>

		<p>No race condition here,: The handle was duplicated into the child process when you specified bInherit = TRUE. So now there are two handles to the shared memory block, one in the parent and one in the child. A shared memory object is not destroyed until all handles are closed.  If the parent closes its handle first, no problem &#8211; the child still has an open handle. Only after both the parent and the child call FreeStartupParams (in whichever order) does the object get destroyed.</p>
<p>So it&#8217;s good that no synchronization is needed, because adding synchronization would create another potential for a bug: What if somebody else manages to sneak in and signal the event before the child gets it? What if the child gets confused and never signals the handle? (For example, it may have run into a critical error in its startup and never got off the ground.)  This method is a safe &quot;fire and forget&quot; &#8211; you push the data into the child and now it&#8217;s all the child&#8217;s problem. The parent&#8217;s hands are clean.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134383">
				<div id="div-comment-134383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Catatonic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134383">
			December 11, 2003 at 2:12 pm</a>		</div>

		<p>Excellent article! One question &#8211; I gather this technique is not suitable if I want to continue sending data back &amp; forth after startup (I might use pipes for that).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134393">
				<div id="div-comment-134393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134393">
			December 11, 2003 at 3:36 pm</a>		</div>

		<p>You can use a similar trick to pass a pair of anonymous pipe handles on the command line &#8211; then you can talk back and forth over the pipes.  Note that if you do this, the parent needs to watch out for the child ends of the pipes getting wedged or dying spontaneously &#8211; you don&#8217;t want to leave zombies in the parent waiting around for nonexistent children.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134403">
				<div id="div-comment-134403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimmick.demon.co.uk/' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134403">
			December 11, 2003 at 5:48 pm</a>		</div>

		<p>Thanks for clearing that up, Raymond. For some reason I was thinking an inherited handle was only counted once, not twice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134413">
				<div id="div-comment-134413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134413">
			December 11, 2003 at 7:39 pm</a>		</div>

		<p>I much prefer the anonymous pipe method. Simpler code, and easily portable to Unix if the need arises.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134423">
				<div id="div-comment-134423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134423">
			December 11, 2003 at 8:49 pm</a>		</div>

		<p>*cough*cough* sockets *cough*cough*</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134433">
				<div id="div-comment-134433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Diego</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134433">
			December 11, 2003 at 10:19 pm</a>		</div>

		<p>Why not just put the data you want to pass into a temp file (in the temp dir?) and just pass it&#8217;s location as the first param to the child process?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134443">
				<div id="div-comment-134443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134443">
			December 12, 2003 at 1:03 am</a>		</div>

		<p>This line caught my eye:</p>
<p>            if (VirtualQuery(psp, &amp;mbi, sizeof(mbi)) &gt;= sizeof(mbi) &amp;&amp;</p>
<p>Is the &quot;&gt;=&quot; a typo, or is there really a case where VirtualQuery will return a value greater than that specified in the dwLength parameter?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134453">
				<div id="div-comment-134453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134453">
			December 12, 2003 at 1:48 am</a>		</div>

		<p>1. *cough* sockets &#8211; fine, go ahead and use sockets. I won&#8217;t stop you. I didn&#8217;t say this was the only way of doing things. It&#8217;s just that sockets require the parent to babysit the child, whereas anonymous shared memory is fire-and-forget.</p>
<p>2. Temporary file: Now you have to worry about when to delete the temporary file. The parent needs to delete the temporary file if the child process somehow failed to get off the ground; detecting this is tricky.</p>
<p>3. Return value of VirtualQuery: Equality would work here as well. I just had inequality on the brain due to the later size test.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134463">
				<div id="div-comment-134463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134463">
			December 12, 2003 at 2:19 am</a>		</div>

		<p>Err, that socket comment was in response to anonymous pipes. I&#8217;d personally use shared memory for passing data in a real app or temp files in dummy throw away apps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134473">
				<div id="div-comment-134473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134473">
			December 12, 2003 at 11:32 am</a>		</div>

		<p>Sockets: Anonymous pipes have the advantage of avoiding the network stack. You don&#8217;t need to load winsock, negotiate a version via WSAInitialize, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134483">
				<div id="div-comment-134483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eugene Gershnik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134483">
			December 12, 2003 at 3:02 pm</a>		</div>

		<p>Just use _popen() conveniently provided by VC. This avoids the pre-calculating shared memory size, manually setting up pipes, dealing with sockets, caring about passing and validating the handle values and whole lot of other issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134493">
				<div id="div-comment-134493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134493">
			December 12, 2003 at 4:15 pm</a>		</div>

		<p>Notice however that _popen works only for console apps.  &quot;The _popen function returns an invalid file handle, if used in a Windows program, that will cause the program to hang indefinitely.&quot;</p>
<p>Note also that if you do this, the child process won&#8217;t be able to accept input from the user via stdin or stdout since they got hooked up to the parent instead.  _popen is more for running a child process in the background and feeding it input / capturing its output.</p>
<p>You can still use it if you like. Just be aware of the limitations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-174893">
				<div id="div-comment-174893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Julian Rozentur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-174893">
			May 17, 2004 at 5:19 pm</a>		</div>

		<p>How about simply passing in the data as standard input for the child process? The STARTUPINFO structure has hStdInput member where you pass a handle to a file with data (possibly, memory-mapped).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-174953">
				<div id="div-comment-174953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-174953">
			May 17, 2004 at 11:56 pm</a>		</div>

		<p>Of course this means you now have to worry about who will delete the file&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196223">
				<div id="div-comment-196223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IgorF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-196223">
			July 19, 2004 at 7:46 am</a>		</div>

		<p>I recently cooked up a very similar mechanism for doing this, and I&#8217;m glad to see it validated as a design approach.</p>
<p>There&#8217;s one thing that I&#8217;m unclear about though&#8211;what exactly are the child process&#8217;s responsibilities regarding closing inherited handles? In your example, you explicitly close the inherited handle. Is that strictly necessary? What if the child process barfs early at startup for some reason and bails before even looking at its args? Or what if a child process is created with inheritable handles that it doesn&#8217;t even know to look for? Are those handles then leaked? And does it really matter if the child is short-lived, or does process shutdown clean things up to satisfaction?</p>
<p>As far as I can tell the docs are silent on this. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196243">
				<div id="div-comment-196243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-196243">
			July 19, 2004 at 8:07 am</a>		</div>

		<p>The child process&#8217;s responsibilities are exactly the same as with handles it opened itself. </p>
<p><a target="_new" href="http://msdn.microsoft.com/library/en-us/dllproc/base/terminating_a_process.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/dllproc/base/terminating_a_process.asp</a></p>
<p>&quot;Open handles to files or other resources are closed automatically when a process terminates. However, the objects themselves exist until all open handles to them are closed. This means that an object remains valid after a process closes, if another process has a handle to it.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>