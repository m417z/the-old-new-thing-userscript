<html>
<head>
<title>Why is the debugger telling me I crashed because my DLL was unloaded, when I see it loaded right here happily executing code?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why is the debugger telling me I crashed because my DLL was unloaded, when I see it loaded right here happily executing code?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 23, 2014 / year-entry #129</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer was puzzled by what appeared to be contradictory information coming from the debugger. We have Windows Error Reporting failures that tell us that we are executing code in our DLL which has been unloaded. Here's a sample stack: Child-SP RetAddr Call Site 00000037`7995e8b0 00007ffb`fe64b08e ntdll!RtlDispatchException+0x197 00000037`7995ef80 000007f6`e5d5390c ntdll!KiUserExceptionDispatch+0x2e 00000037`7995f5b8 00007ffb`fc977640 <Unloaded_contoso.dll>+0x3390c 00000037`7995f5c0 00007ffb`fc978296...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was puzzled by what appeared to be contradictory information
coming from the debugger.
</p>
<blockquote CLASS=q>
<p>
We have Windows Error Reporting failures that tell us that we
are executing code in our DLL which has been unloaded.
Here's a sample stack:
</p>
<pre>
Child-SP          RetAddr           Call Site
00000037`7995e8b0 00007ffb`fe64b08e ntdll!RtlDispatchException+0x197
00000037`7995ef80 000007f6`e5d5390c ntdll!KiUserExceptionDispatch+0x2e
00000037`7995f5b8 00007ffb`fc977640 <font COLOR=blue>&lt;Unloaded_contoso.dll&gt;+0x3390c</font>
00000037`7995f5c0 00007ffb`fc978296 RPCRT4!NDRSRundownContextHandle+0x18
00000037`7995f610 00007ffb`fc9780ed RPCRT4!DestroyContextHandlesForGuard+0xea
00000037`7995f650 00007ffb`fc9b5ff4 RPCRT4!ASSOCIATION_HANDLE::~ASSOCIATION_HANDLE+0x39
00000037`7995f680 00007ffb`fc9b5f7c RPCRT4!LRPC_SASSOCIATION::`scalar deleting destructor'+0x14
00000037`7995f6b0 00007ffb`fc978b25 RPCRT4!LRPC_SCALL_BROKEN_FLOW::FreeObject+0x14
00000037`7995f6e0 00007ffb`fc982e44 RPCRT4!LRPC_SASSOCIATION::MessageReceivedWithClosePending+0x6d
00000037`7995f730 00007ffb`fc9825be RPCRT4!LRPC_ADDRESS::ProcessIO+0x794
00000037`7995f870 00007ffb`fe5ead64 RPCRT4!LrpcIoComplete+0xae
00000037`7995f910 00007ffb`fe5e928a ntdll!TppAlpcpExecuteCallback+0x204
00000037`7995f980 00007ffb`fc350ce5 ntdll!TppWorkerThread+0x70a
00000037`7995fd00 00007ffb`fe60f009 KERNEL32!BaseThreadInitThunk+0xd
00000037`7995fd30 00000000`00000000 ntdll!RtlUserThreadStart+0x1d
</pre>
<p>
But if we ask the debugger what modules are loaded,
our DLL is right there, loaded as happy as can be:
</p>
<pre>
0:000&gt; lm
start             end                 module name
...
000007f6`e6000000 000007f6`e6050000   contoso    (deferred)
...
</pre>
<p>
In fact, we can view other threads in the process,
and they are happily running code in our DLL.
What's going on here?
</p>
</blockquote>
<p>
All the information you need to solve this problem is given
right there in the problem report.
You just have to put the pieces together.
</p>
<p>
Let's take a closer look at that
<code>&lt;Unloaded_contoso.dll&gt;+0x3390c</code>
entry.
The address that the symbol refers to is the return address
from the previous frame:
<code>000007f6`e5d5390c</code>.
Subtract <code>0x3390c</code> from that, and you get
<code>000007f6`e5d20000</code>,
which is the base address of the unloaded module.
</p>
<p>
On the other hand, the <code>lm</code> command says that
the currently-loaded copy of <code>contoso.dll</code> is
loaded at
<code>000007f6`e6000000</code>.
This is a <i>different address</i>.
</p>
<p>
What happened here is that <code>contoso.dll</code> was
loaded into memory at <code>000007f6`e5d20000</code>,
and then it ran for a while.
The DLL was then unloaded from memory,
and later loaded back into memory.
When it returned, it was loaded at a different address
<code>000007f6`e6000000</code>.
For some reason
(improper cleanup when unloading the first copy, most likely),
there was still a function pointer pointing into the old
unloaded copy, and when <code>NDRS&shy;Rundown&shy;Context&shy;Handle</code>
tries to call into that function pointer,
it calls into an unloaded DLL,
and you crash.
</p>
<p>
When faced with something that seems impossible,
you need to look more closely for clues that suggest
how your implicit assumptions may be incorrect.
In this case, the assumption was that there was only one
copy of <code>contoso.dll</code>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1125643">
				<div id="div-comment-1125643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125643">
			May 23, 2014 at 7:17 am</a>		</div>

		<p>Well OK then. Bleeetch.</p>
<p>Only two models ever avoided this problem &#8212; static linking and a.out shared libs (all shared libs had to be registered at build time to set non-overlapping load areas &#8212; no points for guessing what that entails for distributed binary libraries).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125653">
				<div id="div-comment-1125653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125653">
			May 23, 2014 at 7:22 am</a>		</div>

		<p>There is also the option of marking the DLL as non relocatable. Which is fine if you hate address space randomization and can manually pick a non conflicting location</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125663">
				<div id="div-comment-1125663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125663">
			May 23, 2014 at 7:32 am</a>		</div>

		<p>Not relocating the DLL would prevent this exact crash but it is masking the bug, not fixing it.</p>
<p>The callback can still occur when after it unloads but before it reloads.</p>
<p>And even if it has reloaded, and the callback calls the correct function, &nbsp;the internal state of the DLL has reset and the the callback could be passing in a handle, say, that this instance didn&#39;t create.</p>
<div class="post">[<em>All excellent points. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125713">
				<div id="div-comment-1125713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125713">
			May 23, 2014 at 8:53 am</a>		</div>

		<p>I&#39;ve seen this problem with Explorer. Particularly in Windows 8.1 it will unload my shell extension even if I return FALSE from DllCanUnloadNow. Next time it loads it on a different address and all such registered callbacks don&#39;t work. The fix is to call GetModuleHandleEx bump up the DLL ref count.</p>
<div class="post">[<em><a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/11/06/10464022.aspx">CoUninitalize will ask a DLL if it is okay to unload now, but the answer is a foregone conclusion</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125723">
				<div id="div-comment-1125723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125723">
			May 23, 2014 at 12:47 pm</a>		</div>

		<p>[CoUninitalize will ask a DLL if it is okay to unload now, but the answer is a foregone conclusion. -Raymond]</p>
<p>Given that explorer can&#39;t do much w/o COM I find it surprising that it would ever call CoUninitialize.</p>
<div class="post">[<em>Every STA thread uninitializes COM before it exits. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125753">
				<div id="div-comment-1125753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125753">
			May 23, 2014 at 5:18 pm</a>		</div>

		<p>How can we diagnose a crash in our product that occurs on a separate thread spawned by WinInet.dll? &nbsp;The thread crashes because a deep function unloads a Microsoft DLL that is used higher up in the call stack, like this example. &nbsp;It only happens on Windows 7; XP, Vista, 8, and 8.1 have never shown in crash reports.</p>
<p>An unrelated company&#39;s product also triggers this crash somehow in their own product; we found that in an Internet search. &nbsp;Either it&#39;s a Windows bug, or this other company&#39;s product is making the same mistake we are.</p>
<div class="post">[<em>You could set a breakpoint when the DLL unloads to see if that gives you a clue. I&#39;m not going to answer follow-up questions because I do not do one-on-one consulting. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125763">
				<div id="div-comment-1125763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125763">
			May 23, 2014 at 5:55 pm</a>		</div>

		<p>It&#39;s a known bug in W7. Pin the DLL being unloaded with LoadLibrary to fix.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125743">
				<div id="div-comment-1125743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140523-00/?p=913#comment-1125743">
			May 23, 2014 at 5:06 pm</a>		</div>

		<p>@Joshua:</p>
<p>The rule of thumb is a call to CoUninitialize for every successful CoInitialize(Ex). Since you have to initialize COM on every thread that you want to use it on inside a process*, then it is not surprising to call these functions more than once. Even with MTA threads, it is still good practice to call these two functions.</p>
<p>(*Terms and conditions apply, please see small print)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

