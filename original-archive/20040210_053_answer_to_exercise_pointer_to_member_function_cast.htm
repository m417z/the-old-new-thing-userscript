<html>
<head>
<title>Answer to exercise: Pointer to member function cast</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Answer to exercise: Pointer to member function cast</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 10, 2004 / year-entry #54</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040210-00/?p=40683</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Yesterday's exercise asked you to predict and explain the codegen for the following fragment: class Base1 { int b1; void Base1Method(); }; class Base2 { int b2; void Base2Method(); }; class Derived : public Base1, Base2 { int d; void DerivedMethod(); }; class Derived2 : public Base3, public Derived { }; void (Derived::*pfnDerived)(); void (Derived2::*pfnDerived2();...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF=http://weblogs.asp.net/oldnewthing/archive/2004/02/09/70002.aspx>
Yesterday's exercise</a> asked you to predict and explain the
codegen for the following fragment:</p>
<pre>
class Base1 { int b1; void Base1Method(); };
class Base2 { int b2; void Base2Method(); };
class Derived : public Base1, Base2
  { int d; void DerivedMethod(); };
class Derived2 : public Base3, public Derived { };

void (Derived::*pfnDerived)();
void (Derived2::*pfnDerived2();

pfnDerived2 = pfnDerived;
</pre>
<p>
Well, the codegen might go something like this:
</p>
<pre>
  mov  ecx, pfnDerived[0]       ; ecx = address
  mov  pfnDerived2[0], ecx

  mov  ecx, pfnDerived2[4]      ; ecx = adjustor
  add  ecx, sizeof(Base3)       ; adjust the adjustor!
  mov  pfnDerived2[4], ecx
</pre>
<p>
Let's use one of our fancy pictures:
</p>
<table BORDER=0 CELLSPACING=0>
<col SPAN=3 ALIGN=center>
<tr>
<td valign=top>p</td>
<td valign=top>&rarr;</td>
<td STYLE="border: solid 1px buttonshadow; border-bottom: none; width: 10em">
<div STYLE="border: solid 1px buttonshadow; margin: .5ex">
       Base3::b3
     </div>
</td>
</tr>
<tr>
<td valign=top>q</td>
<td valign=top>&rarr;</td>
<td STYLE="border: solid 1px buttonshadow; border-top: none; width: 10em">
<div STYLE="border: solid 1px buttonshadow; margin: .5ex">
<div STYLE="border: solid 1px buttonshadow; margin: .5ex">
        Base2::b2
       </div>
<div STYLE="border: solid 1px buttonshadow; margin: .5ex">
        Base1::b1
       </div>
<p>       Derived::d
     </p>
</div>
</td>
</tr>
</table>
<p>
Just for fun, I swapped the order of Base1 and Base2.
There is no requirement in the standard about the order in which
storage is allocated for base classes, so the compiler is completely
within its rights to put Base2 first, if it thinks that would be more
efficient.
</p>
<p>
A pointer to member function for class Derived expects the "this"
pointer to be at "q".  So when we have a "p", we need to add
sizeof(Base3) to it to convert it to "q", on top of whatever other
adjustment the original function pointer wanted.
That's why we add sizeof(Base3) to the existing adjustor to make
a new combined adjustor.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-141973">
				<div id="div-comment-141973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040210-00/?p=40683#comment-141973">
			February 10, 2004 at 1:55 pm</a>		</div>

		<p>you&#8217;re missing:<br />
<br />class Base3 { int b3; void Base3Method(); };</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-142003">
				<div id="div-comment-142003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040210-00/?p=40683#comment-142003">
			February 10, 2004 at 4:02 pm</a>		</div>

		<p>Now you need to get into the evils of good old virtual inheritance. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-142023">
				<div id="div-comment-142023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040210-00/?p=40683#comment-142023">
			February 10, 2004 at 4:21 pm</a>		</div>

		<p>I am so not going to cover virtual inheritance. That way lies madness.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

