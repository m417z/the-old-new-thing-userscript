<html>
<head>
<title>Using fibers to simplify enumerators, part 5: Composition</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Using fibers to simplify enumerators, part 5: Composition</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 4, 2005 / year-entry #2</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050104-00/?p=36813</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Another type of higher-order enumeration is composition, where one enumerator actually combines the results of multiple enumerators. (Everybody knows about derivation, but composition is another powerful concept in object-oriented programming. We've seen it before when building context menus.) In a producer-driven enumerator, you would implement composition by calling the two enumeration functions one after the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Another type of higher-order enumeration is composition,
where one enumerator actually combines the results of
multiple enumerators.
(Everybody knows about derivation, but
composition is another powerful concept in
object-oriented programming.
<a HREF="/oldnewthing/archive/2004/10/07/239197.aspx">
We've seen it before when building context menus</a>.)
</p>
<p>
In a producer-driven enumerator, you would implement composition
by calling the two enumeration functions one after the other.
In a consumer-driven enumerator, you would implement composition
by wrapping the two enumerators inside a large enumerator
which then chooses between the two based on which enumerator
was currently active.
</p>
<p>
A fiber-based enumerator behaves more like a consumer-driven
enumerator, again, with easier state management.
</p>
<p>
Let's write a composite enumerator that enumerates everything
in the root of your C: drive (no subdirectories),
plus everything in the current directory (including subdirectories).
</p>
<pre>
class CompositeEnumerator : public FiberEnumerator {
public:
 CompositeEnumerator()
   : m_eFiltered(TEXT("C:\\"))
   , m_eCd(TEXT(".")) { }

 LPCTSTR GetCurDir()
    { return m_peCur-&gt;GetCurDir(); }
 LPCTSTR GetCurPath()
    { return m_peCur-&gt;GetCurPath(); }
 const WIN32_FIND_DATA* GetCurFindData()
    { return m_peCur-&gt;GetCurFindData(); }

private:
 void FiberProc();

private:
 FiberEnumerator* m_peCur;
 FilteredEnumerator m_eFiltered;
 DirectoryTreeEnumerator m_eCd;
};

void CompositeEnumerator::FiberProc()
{
 FEFOUND fef;

 m_peCur = &amp;m_eFiltered;
 while ((fef = m_peCur-&gt;Next()) != FEF_DONE &&
        fef != FEF_LEAVEDIR) {
  m_peCur-&gt;SetResult(Produce(fef));
 }

 m_peCur = &amp;m_eCd;
 while ((fef = m_peCur-&gt;Next()) != FEF_DONE) {
  m_peCur-&gt;SetResult(Produce(fef));
 }
}
</pre>
<p>
<strong>Sidebar</strong>:
Our composite enumeration is complicated by the
fact that our <code>FilteredEnumerator</code>
spits out a <code>FEF_LEAVEDIR</code> at the
end, but which we want to suppress, so we have to
check for it and eat it.
</p>
<p>
In the more common case where the enumerator is generating
a flat list, it would be a simple matter of just forwarding
the two enumerators one after the other. 
Something like this:
</p>
<pre>
void CompositeEnumerator2::FiberProc()
{
 Enum(&amp;m_eFiltered);
 Enum(&amp;m_eCd);
}

void CompositeEnumerator2::Enum(FiberEnumerator *pe)
{
 m_peCur = pe;
 FEFOUND fef;
 while ((fef = m_peCur-&gt;Next()) != FEF_DONE) {
  m_peCur-&gt;SetResult(Produce(fef));
 }
}
</pre>
<p>
<strong>End sidebar</strong>.
</p>
<p>
You can try out this <code>CompositeEnumerator</code>
with the program you've been playing with for the past
few days.  Just change the line in <code>main</code>
that creates the enumerator to the following:
</p>
<pre>
 CompositeEnumerator e;
</pre>
<p>
<strong>Exercise</strong>: Gosh, why is the total so unusually large?
</p>
<p>
<strong>Exercise</strong>: How many fibers are there in the program?
</p>
<p>
<strong>Exercise</strong>: Draw a diagram showing how control flows
among the various fibers in this program.
</p>
<p>
Before you get all excited about fibers, consider the following:
</p>
<ul>
<li>Converting a thread to a fiber needs to be coordinated among   
    all the components in the process so that it is converted only
    once and stays converted until everybody is finished.
    This means that if you are writing a plug-in that will go into
    some other process, you probably should avoid fibers,
    since you don't know what the other components in the process
    are going to do with fibers.</p>
<li>Fibers do not completely solve the one-thread-per-connection problem.
    They do reduce the context switching, but the memory footprint
    will still limit you to 2000 fibers per process (assuming a
    2GB user-mode address space) since each fiber has a stack,
    which defaults to 1MB.
</ul>
<p>
I think that's enough about fibers for now.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-239123">
				<div id="div-comment-239123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M Knight</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050104-00/?p=36813#comment-239123">
			January 4, 2005 at 8:42 am</a>		</div>

		<p>CreateFiberEx is what you would use if you dont want to give the fiber the default stack size.  However, it doesnt look to be able to set the stack size for the 1st initial fiber you create.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-239163">
				<div id="div-comment-239163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">happy :-)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050104-00/?p=36813#comment-239163">
			January 4, 2005 at 2:10 pm</a>		</div>

		<p>Finally this boring series is over.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-239173">
				<div id="div-comment-239173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rebuttal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050104-00/?p=36813#comment-239173">
			January 4, 2005 at 2:55 pm</a>		</div>

		<p>happy :-) you don&#8217;t have to read Raymond&#8217;s blog if you don&#8217;t want to, besides this boring series has some very good info in it that could be useful to many, many people that are happy to get it not happy to see it over with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-239193">
				<div id="div-comment-239193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mschaef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050104-00/?p=36813#comment-239193">
			January 4, 2005 at 5:02 pm</a>		</div>

		<p>This is one of the more useful series of posts lately.  I&#8217;m thinking of implementing threads in a lisp interpreter and need precise control over the execution of threads (primarily to avoid having threads stomp all over my GC).  It seems like fibers might be a good fit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-239203">
				<div id="div-comment-239203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050104-00/?p=36813#comment-239203">
			January 4, 2005 at 6:24 pm</a>		</div>

		<p>raymond, thanks for the info on fibers, this was a really informative series.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-239213">
				<div id="div-comment-239213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vorn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050104-00/?p=36813#comment-239213">
			January 4, 2005 at 7:58 pm</a>		</div>

		<p>What exactly do you mean by the &quot;one-thread-per-connection problem&quot;?  Connection to what?</p>
<p>Vorn</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-239223">
				<div id="div-comment-239223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050104-00/?p=36813#comment-239223">
			January 4, 2005 at 8:06 pm</a>		</div>

		<p>A quick google for &lt;one thread per connection&gt; yields many hits, among them <a target="_new" href="http://www.cim.mcgill.ca/~franco/OpSys-304-427/lecture-notes/node68.html" rel="nofollow">http://www.cim.mcgill.ca/~franco/OpSys-304-427/lecture-notes/node68.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-239233">
				<div id="div-comment-239233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vorn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050104-00/?p=36813#comment-239233">
			January 4, 2005 at 9:09 pm</a>		</div>

		<p>Oh that.  Yes, I&#8217;ve run into that problem.</p>
<p>(one of my first big projects was an IRCd, and I wrote a threadpool thingy for it.  Threadpools are easy like whoa in Python, in particular because it&#8217;s got queue implementations that come with it that are designed specifically to be nice to threadpools)</p>
<p>The link there doesn&#8217;t seem to like me, though.</p>
<p>Vorn</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-239243">
				<div id="div-comment-239243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050104-00/?p=36813#comment-239243">
			January 5, 2005 at 6:55 am</a>		</div>

		<p>Isn&#8217;t the standard solution (when this one hits its limit) to use a fixed size pool of worker threads and have another thread dispatch work to them as available? This usually requires that you treat each connection like a state machine and also works best when the individual activities are fairly fine grained, but I haven&#8217;t seen anything that works better yet.</p>
<p>As far as fibers are concerned, they&#8217;d probably work great with CreateFiberEx &#8211; 1MB is entirely more stack than you need most of the time, and 64k would easily allow 10k connections.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-239423">
				<div id="div-comment-239423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vorn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050104-00/?p=36813#comment-239423">
			January 5, 2005 at 1:35 pm</a>		</div>

		<p>It&#8217;s not necessarily another thread dispatching.  It&#8217;s more often a data structure that makes threads wait until there&#8217;s something to do.  Check out Python&#8217;s PriorityQueue module for an example.</p>
<p>Vorn</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-247873">
				<div id="div-comment-247873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.wisniewski-online.com/cs/blogs/wizzys_world/archive/2005/01/20/4.aspx' rel='external nofollow' class='url'>Wizzy's World</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050104-00/?p=36813#comment-247873">
			January 20, 2005 at 6:33 pm</a>		</div>

		<p>A while back there was an article in MSDN magazine about wrapping up the unmaged fibers API to implement&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

