<html>
<head>
<title>Dragging a shell object, part 4: Adding a prettier drag icon</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Dragging a shell object, part 4: Adding a prettier drag icon</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 9, 2004 / year-entry #416</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041209-00/?p=37083</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>0</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You may have noticed that the drag feedback is rather sad-looking. Just a box, maybe with a plus sign or an arrow; you don't even know what it is you're dragging. Let's fix that. We'll drag the icon of the file around. We'll need to add the drag image to the data object. void OnLButtonDown(HWND...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
You may have noticed that the drag feedback is rather sad-looking.
Just a box, maybe with a plus sign or an arrow; you don't
even know what it is you're dragging.
</p>
<p>
Let's fix that.  We'll drag the icon of the file around.
We'll need to add the drag image to the data object.
</p>
<pre>
void OnLButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y, UINT keyFlags)
{
  IDataObject *pdto;
  if (SUCCEEDED(<font COLOR=blue>GetDataObjectOfFileWithCuteIcon(
                hwnd, g_pszTarget, &amp;pdto))</font>) {
     IDropSource *pds = new CDropSource();
     ...
</pre>
<p>
This new function <code>GetDataObjectOfFileWithCuteIcon</code>
creates the data object and then attaches the cute icon to it.
</p>
<pre>
HRESULT GetDataObjectOfFileWithCuteIcon(HWND hwnd,
 LPCWSTR pszPath, IDataObject **ppdto)
{
  HRESULT hr = GetUIObjectOfFile(hwnd, pszPath,
                    IID_IDataObject, (void**)ppdto);
  if (SUCCEEDED(hr)) {
    IDragSourceHelper *pdsh;
    if (SUCCEEDED(CoCreateInstance(CLSID_DragDropHelper, NULL, CLSCTX_ALL,
                                   IID_IDragSourceHelper, (void**)&amp;pdsh))) {
      SHDRAGIMAGE sdi;
      if (CreateDragImage(pszPath, &amp;sdi)) {
        pdsh-&gt;InitializeFromBitmap(&amp;sdi, *ppdto);
        DeleteObject(sdi.hbmpDragImage);
      }
      pdsh-&gt;Release();
    }
  }
  return hr;
}
</pre>
<p>
We use the
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/programmersguide/shell_basics/shell_basics_programming/transferring/dataobject.asp">
shell drag/drop helper object</a>
to attach the bitmap to the data object.
The shell drag/drop helper object requires that the data object
be able to accept arbitrary blobs, but fortunately, the standard
shell data object does this.
</p>
<p>
The nasty part is generating the drag image.
This is not the fun part, and you're not going to learn anything
from this function.  It just has to be written.
</p>
<pre>
BOOL CreateDragImage(LPCWSTR pszPath, SHDRAGIMAGE *psdi)
{
  psdi-&gt;hbmpDragImage = NULL;
  SHFILEINFOW sfi;
  HIMAGELIST himl = (HIMAGELIST)
    SHGetFileInfoW(pszPath, 0, &amp;sfi, sizeof(sfi), SHGFI_SYSICONINDEX);
  if (himl) {
    int cx, cy;
    ImageList_GetIconSize(himl, &amp;cx, &amp;cy);
    psdi-&gt;sizeDragImage.cx = cx;
    psdi-&gt;sizeDragImage.cy = cy;
    psdi-&gt;ptOffset.x = cx;
    psdi-&gt;ptOffset.y = cy;
    psdi-&gt;crColorKey = CLR_NONE;
    HDC hdc = CreateCompatibleDC(NULL);
    if (hdc) {
      psdi-&gt;hbmpDragImage = CreateBitmap(cx, cy, 1, 32, NULL);
      if (psdi-&gt;hbmpDragImage) {
        HBITMAP hbmPrev = SelectBitmap(hdc, psdi-&gt;hbmpDragImage);
        ImageList_Draw(himl, sfi.iIcon, hdc, 0, 0, ILD_NORMAL);
        SelectBitmap(hdc, hbmPrev);
      }
      DeleteDC(hdc);
    }
  }
  return psdi-&gt;hbmpDragImage != NULL;
}
</pre>
<p>
To create the drag image, we ask
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/functions/shgetfileinfo.asp">
the <code>SHGetFileInfo</code> function</a>
to give us the imagelist handle and icon index
for the icon that represents the file.
The icon size in the imagelist goes into
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/structures/shdragimage.asp">
the <code>SHDRAGIMAGE</code> structure</a>
as the bitmap dimensions and as the cursor point.
(We put the cursor at the bottom right corner of the image.)
Since we are creating an alpha-blended bitmap, we don't need
a color-key.
Finally, we create a memory DC to house an ARGB bitmap into which
we draw the icon.
</p>
<p>
If you run this program, you should see the icon for a text file
being dragged around as you drag your throwaway file around
the screen.
</p>
<p>
Next time, a way to make somebody else do the heavy lifting for you.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

