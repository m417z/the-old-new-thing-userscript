<html>
<head>
<title>Even though mouse-move, paint, and timer messages are generated on demand, it's still possible for one to end up in your queue</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Even though mouse-move, paint, and timer messages are generated on demand, it&#8217;s still possible for one to end up in your queue</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 23, 2013 / year-entry #141</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130523-00/?p=4273</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We all know that the generated-on-demand messages like WM_MOUSE­MOVE, WM_PAINT, and WM_TIMER messages are not posted into the queue when the corresponding event occurs, but rather are generated by Get­Message or Peek­Message when they detect that they are about to conclude that there is no message to return and the generated-on-demand message can be returned....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>We all know that the generated-on-demand messages like <code>WM_<wbr>MOUSE&shy;MOVE</wbr></code>, <code>WM_<wbr>PAINT</wbr></code>, and <code>WM_<wbr>TIMER</wbr></code> messages are not posted into the queue when the corresponding event occurs, but rather are generated by <code>Get&shy;Message</code> or <code>Peek&shy;Message</code> when they detect that they are about to conclude that there is no message to return and <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/12/19/10249000.aspx"> the generated-on-demand message can be returned</a>. When this happens, the window manager creates the message on the fly, posts it into the queue, and <i>hey, how about that</i>, the  <code>Get&shy;Message</code> or <code>Peek&shy;Message</code> function now has a message to return!</p>
<p> Note that this auto-generate can happen even though the queue is not empty, because the message filters control what messages in the queue can be returned. For example, suppose the message queue contains the following messages: </p>
<ul>
<li><code>{ hwnd1, WM_<wbr>CLIP&shy;BOARD&shy;UPDATE }</wbr></code> </li>
<li><code>{ hwnd2, WM_<wbr>LBUTTON&shy;DOWN }</wbr></code> </li>
</ul>
<p> (Note that the above diagram is not strictly correct, because the <code>WM_<wbr>LBUTTON&shy;DOWN</wbr></code> message goes into the input queue, not the message queue, but the distinction is not important here.) </p>
<p> Suppose you now call <code>Get&shy;Message(<wbr>&amp;msg, hwnd1, WM_<wbr>MOUSE&shy;FIRST, WM_<wbr>MOUSE&shy;LAST)</wbr></wbr></wbr></code>. None of the messages in the queue satisfy the message filter: The first message meets the window filter, but the message is not in range. The second message meets the message range filter, but does not meet the window filter. The <code>Get&shy;Message</code> function is about to give up and say "I guess I need to wait for a message," but before it finally concedes defeat, it says, "Hang on there. I see a note that tells me that I should auto-generate a <code>WM_<wbr>MOUSE&shy;MOVE</wbr></code> message  for window <code>hwnd1</code>. And that message satisfies the message filter. I'll generate it now!" </p>
<p> The <code>Get&shy;Message</code> function posts the <code>{ hwnd1, WM_<wbr>MOUSE&shy;MOVE }</wbr></code> message into the queue (assigning it the current time as the timestamp), and then it says, "Hey, lookie here! A message that satisfies the filter!" It then removes the message from the queue and returns it. </p>
<p> (Note that this algorithm is conceptual. It doesn't actually work this way internally. In particular, the window manager does not literally talk to itself, at least not out loud.) </p>
<p> Okay, so in the <code>Get&shy;Message</code> case, even if the message conceptually goes into the queue, it comes right back out immediately, so you never actually observe it there. </p>
<p> Now repeat the exercise with the <code>Peek&shy;Message</code> function. As before, the <code>WM_<wbr>MOUSE&shy;MOVE</wbr></code> message is posted into the queue with the current time as the timestamp. If the <code>PM_<wbr>REMOVE</wbr></code> flag is passed, then the message is removed from the queue and returned, just like <code>Get&shy;Message</code>. If the <code>PM_<wbr>NO&shy;REMOVE</wbr></code> flag is passed, then things get interesting: The message is returned but not removed from the queue. </p>
<p> You now have a <code>WM_<wbr>MOUSE&shy;MOVE</wbr></code> message <i>physically residing in the queue</i>! </p>
<p> This is the answer to the puzzle: If auto-generated messages are generated on demand, how is it possible for them to end up sitting in your message queue? </p>
<p> I recall a bug investigation from nearly two decades ago which basically boiled down to this issue: Somebody <code>PM_<wbr>NO&shy;REMOVE</wbr></code>'d an auto-generated message and not only left it in the queue, but kept generating new ones without processing the old ones. Eventually, the message queue filled up. </p>
<p> (Note that this is also the answer to the puzzle: If <code>WM_<wbr>MOUSE&shy;MOVE</wbr></code> is generated on demand, how can it be possible to retrieve a <code>WM_<wbr>MOUSE&shy;MOVE</wbr></code> message with a timestamp different from the current time?) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1057953">
				<div id="div-comment-1057953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130523-00/?p=4273#comment-1057953">
			May 23, 2013 at 8:18 am</a>		</div>

		<p>[(Note that this is also the answer to the puzzle: If WM_MOUSE&shy;MOVE is generated on demand, how can it be possible to retrieve a WM_MOUSE&shy;MOVE message with a timestamp different from the current time?)]</p>
<p>Also, clock skew!</p>
<div class="post">[<em>Not sure what you&#39;re referring to here. There is only one computer involved. If you mean signal propagation delay, then consider the question &quot;How can it be possible to retrieve a WM_MOUSE&shy;MOVE message with a timestamp <span style="text-decoration:underline;">significantly</span> different from the current time?&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1057963">
				<div id="div-comment-1057963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130523-00/?p=4273#comment-1057963">
			May 23, 2013 at 9:45 am</a>		</div>

		<p>Raymond, how do you generate a lot of those messages? Don&#39;t you need a lot windows for that? Meaning next time wouldn&#39;t it find previosly generated message? Wouldn&#39;t you run out of windows handles before running out of space on the gueue?</p>
<div class="post">[<em>That&#39;s a good question, and I didn&#39;t provide all the information necessary to answer it. Answering it will take more than two sentences, so I will toss it onto the topic queue. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1057973">
				<div id="div-comment-1057973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130523-00/?p=4273#comment-1057973">
			May 23, 2013 at 10:32 am</a>		</div>

		<p>First, assume that no shenanigans involving non usual code creating the message by the for other messages normal means will happen.</p>
<p>Use PeekMessage to create the message, then use filters to ignore it for a while and then clear/change the filters to accept the now old generated message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1057983">
				<div id="div-comment-1057983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130523-00/?p=4273#comment-1057983">
			May 23, 2013 at 11:00 am</a>		</div>

		<p>Since it wasn&#39;t obvious the first time, the second computer doesn&#39;t need to be part of the interchange process for clock skew to show up. The worst possible moment of time synchronization can cause the same behavior. If your delay timers are not written very carefully, clock skew will blow up your timers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes even thread-even depth-1" id="comment-1058003">
				<div id="div-comment-1058003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130523-00/?p=4273#comment-1058003">
			May 23, 2013 at 2:10 pm</a>		</div>

		<p>Raymond, when you say, &quot;We all know that&#8230;&quot;, who is your target audience&quot; I&#39;m pretty sure that not all of us actually know that.</p>
<p>Nonetheless, you present a very easy to follow explanation of a reasonably complex topic. I always find these things easier to visualize than to explain in words.</p>
<div class="post">[<em>I guess they don&#39;t teach Win32 the way they used to. The auto-generation of mouse, timer, and paint messages used to be one of the basics of Win32 UI programming that got drilled into you early. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1058013">
				<div id="div-comment-1058013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130523-00/?p=4273#comment-1058013">
			May 23, 2013 at 2:51 pm</a>		</div>

		<p>What is message-filtering useful for, by the way? Except that introducing rarely seen behaviour?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1058033">
				<div id="div-comment-1058033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130523-00/?p=4273#comment-1058033">
			May 23, 2013 at 9:13 pm</a>		</div>

		<p>[I guess they don&#39;t teach Win32 the way they used to. The auto-generation of mouse, timer, and paint messages used to be one of the basics of Win32 UI programming that got drilled into you early. -Raymond]</p>
<p>They&#39;re barely mentioned (if mentioned they&#39;re auto-generated at all), and most doesn&#39;t bother to explain the auto-generation machnism in detail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1058093">
				<div id="div-comment-1058093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130523-00/?p=4273#comment-1058093">
			May 24, 2013 at 6:53 pm</a>		</div>

		<p>And this is why you should just use the simplest message loop, if possible. If you have to use some fancy version of it, only do that if you know what you&#39;re doing.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

