<html>
<head>
<title>Lock free many-producer/single-consumer patterns: A work queue of distinct events, FIFO</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Lock free many-producer/single-consumer patterns: A work queue of distinct events, FIFO</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 25, 2016 / year-entry #249</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161125-00/?p=94795</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">No cutting in line.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>At last,
<a HREF="http://watergate.info/1974/08/09/ford-remarks-on-taking-office.html">
our long national nightmare is over</a>:
The end of the miniseries on lock-free
many-producer/single-consumer patterns.
We'll finish up with the case where there are many
producers generating work,
and one consumer performing the work,
and the work items must be processed in the order
they were submitted.
</p>
<p>
We can build on the algorithm we used last time,
when the order of processing was not important.
We just have to remember to process the work items
FIFO rather than LIFO.
</p>
<pre>
SLIST_HEADER WorkQueue;

struct alignas(MEMORY_ALLOCATION_ALIGNMENT)
WorkItem : SLIST_ENTRY
{
    ... other stuff ...
};

void Initialize()
{
 InitializeSListHeader(&amp;WorkQueue);
}

void RequestWork(WorkItem* work)
{
 if (InterlockedPushEntrySList(&amp;WorkQueue, work)
                                               == nullptr) {
  // You provide the WakeConsumer() function.
  WakeConsumer();
 }
}

// You call this function when the consumer receives the
// signal raised by WakeConsumer().
void ConsumeWork()
{
 PSLIST_ENTRY entry = InterlockedFlushSList(&amp;WorkQueue);
 entry = ReverseLinkedList(entry);
 while (entry != null) {
  ProcessWorkItem(static_cast&lt;WorkItem*&gt;(entry));
  delete entry;
 }
}
</pre>
<p>
I leave the <code>Reverse&shy;Linked&shy;List</code> function
as an exercise.
(<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253"
>Answer</a>.)
</p>
<p>
The conditions of the exercise are that
the order of operations is important,
but the linked list is LIFO.
We solve this by detaching the list
from the <code>Work&shy;Queue</code>,
so that it can no longer be affected by
<code>Request&shy;Work</code>,
and then we reverse the (now-private) list,
thereby converting it from LIFO to FIFO,
at which point we can process it.
</p>
<p>
Any new work that gets queued up will be added to the
the (now-empty) <code>Work&shy;Queue</code>.
The first such new work will cause
<code>Wake&shy;Consumer</code> to be called,
upon which a new cycle will begin as soon as the
current <code>Consume&shy;Work</code> finishes.
</p>
<p>
That's all I have on the topic of
lock-free many-producer/single-consumer patterns.
I hope you weren't too bored.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1274975">
				<div id="div-comment-1274975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken in NH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161125-00/?p=94795#comment-1274975">
			November 25, 2016 at 8:26 am</a>		</div>

		<p>It looks like your while loop is missing something. Is this what you meant?</p>
<p>PSLIST_ENTRY completedEntry = null;<br />
while (entry != null) {<br />
  ProcessWorkItem(static_cast(entry));<br />
  completedEntry = entry;<br />
  entry = completedEntry-&gt;next;<br />
  delete completedEntry;<br />
 }</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1274956">
				<div id="div-comment-1274956" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clockwork-Muse</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161125-00/?p=94795#comment-1274956">
			November 25, 2016 at 11:47 am</a>		</div>

		<p>Although with the current design, if more work is queued while some is being processed, it&#8217;s going to take a new invocation of ConsumeWork to process the new stuff.  This is in contrast to the earlier examples, which would process further queued work in the same invocation, and only signal to wake (or, well, it might have been processing the last one).  It operates under the same constraints as the bonus chatter from two days ago.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1275035">
				<div id="div-comment-1275035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Haim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161125-00/?p=94795#comment-1275035">
			November 26, 2016 at 10:45 am</a>		</div>

		<p>So, is this how the Win32 work queue works behind the scenes?<br />
I always wondered what makes the enqueuing of tasks via SubmitThreadPoolWork so fast. </p>
<p>Also, this code is not exception safe (although utilizes C++)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-schroedl odd alt thread-odd thread-alt depth-1" id="comment-1275235">
				<div id="div-comment-1275235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/schroedl' rel='external nofollow' class='url'>schroedl</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161125-00/?p=94795#comment-1275235">
			November 29, 2016 at 8:50 am</a>		</div>

		<p>Bored? No. Loved this series.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

