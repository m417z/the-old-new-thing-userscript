<html>
<head>
<title>Why did the original code for FIND.COM use lop as a label instead of loop?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why did the original code for FIND.COM use lop as a label instead of loop?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 16, 2015 / year-entry #79</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150416-00/?p=44223</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A few years ago, I left you with an exercise: Given the code mov dx,st_length ;length of the string arg. dec dx ;adjust for later use mov di, line_buffer lop: inc dx mov si,offset st_buffer ;pointer to beg. of string argument comp_next_char: lodsb cmp al,byte ptr [di] jnz no_match dec dx jz a_matchk ; no...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A few years ago, I left you with an exercise:
Given the code
</p>
<pre>
        mov     dx,st_length            ;length of the string arg.
        dec     dx                      ;adjust for later use
        mov     di, line_buffer
lop:
        inc     dx
        mov     si,offset st_buffer     ;pointer to beg. of string argument

comp_next_char:
        lodsb
        cmp     al,byte ptr [di]
        jnz     no_match

        dec     dx
        jz      a_matchk                ; no chars left: a match!
        call    next_char               ; updates di
        jc      no_match                ; end of line reached
        jmp     comp_next_char          ; loop if chars left in arg.
</pre>
<p>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/08/25/10200026.aspx">
why is the loop label called <code>lop</code>
instead of <code>loop</code></a>?
</p>
<p>
The answer is that calling it <code>loop</code> would create
ambiguity with the 8086 instruction <code>loop</code>.
</p>
<p>
Now, you might say
(<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/08/25/10200026.aspx#10200673">if
your name is Worf</a>),
that there is no ambiguity.
"Every line consists of up to four things (all optional).
A label,
an instruction/pseudo-instruction,
operands, and comments.
The label is optionally followed by a colon.
If there is no label, then the line must start with whitespace."
</p>
<p>
If those were the rules, then there would indeed be no ambiguity.
</p>
<p>
But those aren't the rules.
Leading whitespace is not mandatory.
If you are so inclined,
you can choose to begin your instructions all in column zero.
</p>
<pre>
mov dx,st_length
dec dx
mov di, line_buffer
lop:
inc dx
mov si,offset st_buffer
comp_next_char:
lodsb
cmp al,byte ptr [di]
jnz no_match
dec dx
jz a_matchk
call next_char
jc no_match
jmp comp_next_char
</pre>
<p>
It's not recommended, but it's legal.
(I have been known to do this when hard-coding breakpoints
for debugging purposes.
That way, a search for <code>/^int 3/</code> will find
all of my breakpoints.)
</p>
<p>
Since you can put the opcode in column zero,
a line like this would be ambiguous:
</p>
<pre>
loop ret
</pre>
<p>
This could be parsed as
"Label this line <code>loop</code> and execute a <code>ret</code>
instruction."
Or it could be parsed as
"This is an unlabeled line, consisting of a <code>loop</code>
instruction that jumps to the label <code>ret</code>."
</p>
</p>
<table CELLPADDING=3 STYLE="border-collapse: collapse">
<tr>
<th STYLE="border: solid 1px black; border-top-color: transparent">Label</th>
<th STYLE="border: solid 1px black; border-top-color: transparent">Opcode</th>
<th STYLE="border: solid 1px black; border-top-color: transparent">Operand</th>
</tr>
<tr>
<td><code>loop</code></td>
<td><code>ret</code></td>
<td></td>
</tr>
<tr>
<td COLSPAN=3 ALIGN=center>&ndash; or &ndash;</td>
<tr>
<td></td>
<td><code>loop</code></td>
<td><code>ret</code></td>
</tr>
</table>
<p>
Disallowing instruction names as labels or macros or equates
is the simplest way out of this predicament.
Besides, you probably shouldn't be doing it anyway.
<a HREF="http://www.cs.earlham.edu/~skylar/humor/Unix/c.language.pranks.html">
Imagine the havoc</a>
if you did
</p>
<pre>
or equ and
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1185203">
				<div id="div-comment-1185203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150416-00/?p=44223#comment-1185203">
			April 16, 2015 at 7:49 am</a>		</div>

		<p>Having spent two full semesters of my college EE career learning assembly language on 8086 XT machines (after having spent a semester learning 8085 assembly language on embedded dev kit boards) I knew the answer before reading the article.</p>
<p>This was a course-work plus lab experience class. There were a whole series of labs we did where the user feedback was making the PC speaker beep (by programming the 8254(?) ). Nothing like 12 computers beeping for a whole hour while you and your classmates debug your programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1185223">
				<div id="div-comment-1185223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NotThisMind</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150416-00/?p=44223#comment-1185223">
			April 16, 2015 at 8:42 am</a>		</div>

		<p>Damn, i cringe everytime i see code like that with or without my lens&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000300008195987d even thread-even depth-1" id="comment-1186123">
				<div id="div-comment-1186123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Spire' rel='external nofollow' class='url'>Spire</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150416-00/?p=44223#comment-1186123">
			April 21, 2015 at 1:45 am</a>		</div>

		<p>But isn&#39;t &quot;loop ret&quot; unambiguously a loop instruction because there isn&#39;t a colon after &quot;loop&quot;?</p>
<div class="post">[<em>But the colon is optional, so in the absence of a colon, you don&#39;t know whether you are in the &quot;There definitely is no colon here&quot; case or the &quot;There might be a missing colon here&quot; case. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000300008195987d odd alt thread-odd thread-alt depth-1" id="comment-1186573">
				<div id="div-comment-1186573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Spire' rel='external nofollow' class='url'>Spire</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150416-00/?p=44223#comment-1186573">
			April 22, 2015 at 3:48 pm</a>		</div>

		<p>I&#39;ve programmed my share of x86 assembly, but I didn&#39;t know that the colon after a label was optional. Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

