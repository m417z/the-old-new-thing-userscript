<html>
<head>
<title>Why does my control send its notifications to the wrong window after I reparent it?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does my control send its notifications to the wrong window after I reparent it?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 16, 2010 / year-entry #86</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100316-00/?p=14593</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>2</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">MontagFTB noticed that some controls have the problem that if you reparent the control, it still sends notifications to its old parent. We looked at the faulty diagnosis last time. What's the real reason? The control cached its original parent window. Most complex controls communicate with the parent window frequently, and in order to avoid...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>MontagFTB noticed that some controls have the problem that <a href="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#925651"> if you reparent the control, it still sends notifications to its old parent</a>. <a href="http://blogs.msdn.com/oldnewthing/archive/2010/03/15/9978691.aspx"> We looked at the faulty diagnosis last time</a>. What's the real reason?</p>
<p> The control cached its original parent window. </p>
<p> Most complex controls communicate with the parent window frequently, and in order to avoid calling <code>GetParent</code>, the control gets its parent once and caches the value for future use. Under normal conditions, this cache works very well since reparenting a window is extremely rare and is generally considered an unusual condition. Like the adoption of a child, it's the sort of thing you should only be doing with the coordination of all three parties (the old parent, the new parent, and the child). </p>
<p> When you reparent the control, the cached value in the child window is no longer correct. But since you didn't coordinate this with the child window, the control doesn't know this, and it keeps talking to the old parent. Unlike the Post Office, you can't submit a change of address form to the window manager and tell it, "Hey, if somebody tries to send a message to windows&nbsp;X, deliver it to window&nbsp;Y if the return address is window&nbsp;Z." (Actually, the Post Office stops forwarding mail after one year.) </p>
<p> Since window reparenting is considered to be an unusual condition, most controls don't have provisions for telling them, "Hey, I reparented you. Please send future notifications to that window over there." The window manager is fine with all your reparenting games, but the other participants may have made assumptions based on the stability of the window hierarchy. </p>
<p> Where does that leave MontagFTB? (It is at this point where a general topic gradually turns into addressing questions that are applicable only to MontagFTB's situation and aren't all that useful to others. This is something I try to avoid, because this is a blog, not a consulting service.) </p>
<p> First, you can avoid the staging window and just create the controls with the correct parent. I don't know why the staging window was necessary, so this may not be a viable solution. If it was merely to avoid flicker, then you can create the controls as hidden windows, and then do a massive <code>ShowWindow</code> when they are ready. Or you can create the controls at negative coordinates (so they don't appear inside the parent's client rectangle), and then when you're ready, <a href="http://blogs.msdn.com/oldnewthing/archive/2005/07/06/436043.aspx"> perform a big <code>EndDeferWindowPos</code></a> to move them all into position at once. </p>
<p> If you really need to have the staging window, you can have the staging window do the message forwarding. If it receives a <code>WM_COMMAND</code> or <code>WM_NOTIFY</code> notification message from one of these given-away child windows, it just forwards the message to the new owner. However, this violates the guideline that "When reparenting a window, the old parent, the new parent, and the child all need to be involved in the process if you want the adoption to go smoothly," so I would not recommend it. </p>
<p> If you don't want to make the staging window have to deal with message forwarding (for example, if you intend on destroying the staging window once you have removed all the child windows), then you can insert a level of redirection: Create a container window as a child of the staging window, and create the child windows as children of the container. Then when it's time to reparent the controls, move the container window to the new parent. This adheres to the guideline because the windows involved in the reparenting (the final destination, the staging window, and the container window) are all under your control, and therefore you can make sure all internal state is correct when you change the bookkeeping relationship among them. And since the controls are destined for a dialog box, you should give the container the <code>WS_EX_CONTROLPARENT</code> style so that they can participate in dialog box navigation. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-819983">
				<div id="div-comment-819983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dr. HelloWorld</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100316-00/?p=14593#comment-819983">
			March 16, 2010 at 3:26 pm</a>		</div>

		<p>WM_REFRESHPARENT (or WM_RECACHEPARENT) would have been useful. </p>
<div class=post>[<i>The issue isn&#8217;t coming up with a message to refresh the parent window handle. (You could have done that yourself without having a system-defined message for it.) The issue is getting people to bother implementing it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820003">
				<div id="div-comment-820003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Wooding</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100316-00/?p=14593#comment-820003">
			March 16, 2010 at 5:30 pm</a>		</div>

		<p>I&#8217;m slightly surprised that Windows doesn&#8217;t send the child a message to say that its parent has changed. &nbsp;The equivalent Xlib function XReparentWindow causes the server to emit a ReparentNotify event to the child to let it know that the world has changed.</p>
<p>Then again, reparenting windows is commonplace in X: the window manager adds its furniture (title bar, resize borders and so on) to new toplevel windows by reparenting them. &nbsp;I guess this is sufficiently rare in Windows that it wasn&#8217;t thought necessary.</p>
<p>(Also, there&#8217;s an obvious gap between the reparent operation and the event being received by the child during which the child&#8217;s cache is wrong. &nbsp;So this wouldn&#8217;t actually help. &nbsp;Good job widgets in X don&#8217;t work like this, then.)</p>
<p>Hmm&#8230; I&#8217;d guess that fancy tearoffable toolbars and suchlike work by playing with parent windows, so maybe it&#8217;s not that uncommon. &nbsp;So there must be some special form of communication to keep things working properly.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

