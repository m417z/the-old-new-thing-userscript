<html>
<head>
<title>How important is it nowadays to ensure that all my DLLs have non-conflicting base addresses?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How important is it nowadays to ensure that all my DLLs have non-conflicting base addresses?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 20, 2017 / year-entry #15</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>27</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Not so much, since ASLR changes it anyway.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Back in the day, one of the things you were
<a HREF="http://stackoverflow.com/q/3969190/">
exhorted to do</a>
was
rebase your DLLs so that they all had nonoverlapping address ranges,
thereby avoiding the cost of runtime relocation.
Is this still important nowadays?
</p>
<p>
This situation is another demonstration of how it is important
for
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20091104-00/?p=16153">
good advice to come with a rationale so you can tell when it becomes
bad advice</a>.
</p>
<p>
The rationale for rebasing goes like this:
If a DLL is loaded at its preferred base address, then
the image can be paged in directly from backing store
without requiring any fixups.
This means that the pages can be shared between processes,
since each process gets an identical copy.
(Of course, the sharing stops once somebody writes to the page
and makes their copy different from the shared copy.)
</p>
<p>
If a DLL cannot be loaded at its preferred address,
then
<a HREF="https://blogs.msdn.microsoft.com/larryosterman/2004/07/06/why-should-i-even-bother-to-use-dlls-in-my-system/">
the image will be relocated</a>, and the entire relocated
DLL is now backed by the page file.&sup1;
This is a relative expensive operation, since the DLL
has to be read from disk and fixed up, and a commit charge to
the page file is incurred in order to ensure that there is space
to write the fixed-up pages.
Furthermore,
if two processes relocate the DLL and happen by
some coincidence to relocate them to the same place,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301">
Windows NT does not attempt to share the relocated
images</a>.
There will be multiple copies in the page file.
</p>
<p>
The cost of this dynamic relocation is what
rebasing attempts to avoid.
Let's call this the "relocation penalty."
</p>
<p>
Enter ASLR.
</p>
<p>
ASLR causes the DLLs to be loaded at pseudo-random addresses.
Consequently,
a DLL will load its its preferred base address only in the case
of an astonishing coincidence.
</p>
<p>
Okay, so let's go back to the rationale to see if it still applies.
</p>
<p>
Does a DLL being loaded away from its preferred base address
incur a relocation penalty?
If you think about it,
ASLR means that no DLL ever loads at its preferred address,
but we also saw that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301">
the kernel makes accommodates for this so that DLLs subjected
to ASLR can still share pages</a>,
and it does so without forcing the entire DLL to be relocated
on initial load.
So there is no relocation penalty in the case where the DLL was
relocated by ASLR.
</p>
<p>
But what if the DLL is relocated for some other reason?
For example, it could be that the ASLR-chosen base address
is not available in the process, because the process already
allocated something else at that location.
In that case, a traditional relocation must take place,
and you pay the relocation penalty.
</p>
<p>
Ah, but here's the thing:
When a DLL is loaded, ASLR will assign a base address randomly
from among the available base addresses that are not already
being used.&sup2;
So you're not going to get into the
"the ASLR-chosen base address is not available" scenario
because ASLR chooses the DLL's base address from
among the base address that are available.&sup3;
</p>
<p>
Okay, so you can still get into a conflict situation, but you have
to really work at it.
For example, you could load a DLL into one process,
and get an ASLR-assigned base address.
You then start a second process, intentionally allocate
memory at that address (to force the collision),
and then load the DLL.
In this case, there will be a relocation because you
squatted on the place where ASLR wanted to put the DLL.
But this is no worse than what you had before ASLR:
In the pre-ASLR world,
squatting on a DLL's preferred base address
would have forced a relocation
penalty anyway.
</p>
<p>
So, let's see what the story is.
To rebase or not to rebase?
</p>
<p>
In the presence of ASLR, rebasing your DLLs has no effect
because ASLR is going to <i>ignore your base address anyway</i>
and relocate the DLL into a location of its pseudo-random choosing.
</p>
<p>
Mind you, even though rebasing has no effect, it doesn't hurt either.
</p>
<p>
If you are on a system without ASLR
(either because it predates ASLR, or because ASLR has been
disabled for whatever reason),
then rebasing will help, for the traditional reasons.
</p>
<p>
Mind you, systems without ASLR are really hard to find nowadays,
so rebasing provides no benefit in the overwhelming majority of cases.
But in that vanishingly small percentage of cases where you don't
have ASLR, then rebasing helps.
</p>
<p>
Conclusion:
It doesn't hurt to rebase, just in case,
but understand that the payoff will be extremely rare.
Build your DLL with <code>/DYNAMICBASE</code> enabled
(and with <code>/HIGHENTROPYVA</code> for good measure)
and let ASLR do the work of ensuring that no base address
collision occurs.
That will cover pretty much all of the real-world scenarios.
If you happen to fall into one of the very rare cases where
ASLR is not available, then your program will still work.
It just may run a little slower due to the relocation penalty.
</p>
<p>
&sup1;
More precisely, all the pages that contained fixups
are put into the page file.
We discussed this finer point
<!-- backref: A fine detail on how DLLs are relocated as the result of a base address collision, and consequences -->
last time</a>.
</p>
<p>
&sup2;
Okay, there's a third case, which is where ASLR has
simply run out of base addresses.
But again, this is no worse than what you had before ASLR:
If you run out of base addresses, then it's
every man for himself.
Each time a new DLL loads, the kernel has to scrounge around
for a large-enough chunk of available address space into
which to load the DLL.
</p>
<p>
&sup3;
As a result, ASLR actually
<a HREF="http://stackoverflow.com/a/3664921/902497">
does a better job of avoiding collisions
than manual rebasing</a>, since ASLR can view the system as a whole,
whereas manual rebasing requires you to know all the DLLs that are
loaded into your process, and coordinating base addresses
across multiple vendors is generally not possible.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1280706">
				<div id="div-comment-1280706" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280706">
			January 20, 2017 at 7:19 am</a>		</div>

		<p>I am curious if this is still as much an issue in x64 where you have true position independent code segments. I suspect there would still have to be fixups because of strings and whatnot but I would imagine this would be less of an issue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx odd alt thread-odd thread-alt depth-1 parent" id="comment-1280715">
				<div id="div-comment-1280715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280715">
			January 20, 2017 at 8:34 am</a>		</div>

		<p>I don&#8217;t remember seeing an option for it in the Microsoft tools, but I could have missed it&#8230;</p>
<p>Does Windows not have an option to build DLLs as Position Independent Code? </p>
<p>In Linux we can build a shared object library with GCC&#8217;s -fPIC option and then it doesn&#8217;t care where it loads. All the machine instructions use relative offsets. Executables can be built with -fPIE and then they can be loaded at random memory locations too.</p>
<p>PIC and PIE only became good options once AMD added a lot of instruction pointer relative addressing modes to AMD64, but it HAS been what, 15 years now?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude even depth-2 parent" id="comment-1280725">
				<div id="div-comment-1280725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280725">
			January 20, 2017 at 8:40 am</a>		</div>

		<p>As far as I&#8217;m aware all 64bit code on windows is PIC. Given the timing of the x64 compiler it makes sense as it was around the time of ALSRs introduction.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-3" id="comment-1280735">
				<div id="div-comment-1280735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280735">
			January 20, 2017 at 8:51 am</a>		</div>

		<p>For Windows, x64 predates Vista by at least a year. There was a release of Windows XP and Windows Server 2003 for x64.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-3" id="comment-1280745">
				<div id="div-comment-1280745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280745">
			January 20, 2017 at 8:58 am</a>		</div>

		<p>I would suggest you clarify your terminology a bit, because using relative jumps and global tables is just as position independent as using base addresses, relocations and fixups.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-msn odd alt depth-3" id="comment-1280815">
				<div id="div-comment-1280815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280815">
			January 21, 2017 at 11:31 am</a>		</div>

		<p>Also PIC have a performance penalty on x86 since there is no IP-relative addressing. You need a call/pop pair to get your current address. So either you litter your code with expensive calls (you don&#8217;t), or you cache you base address in a register (but then you have fewer registers available and need to spill more often)</p>
<p>When AMD designed x64 they realised the importance of position-independent code, so they added a IP-relative addressing scheme, which means it doesn&#8217;t have the same performance penalty as on x86.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-2 parent" id="comment-1280726">
				<div id="div-comment-1280726" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280726">
			January 20, 2017 at 8:48 am</a>		</div>

		<p>Well, if you use a general classification, Windows PE is position independent because they can load in anywhere. This article is on how ASLR affects things.<br />
But if you are wondering why Windows uses based images compared to the Linux style position independent code, the answer is mostly preference and history.<br />
There are some advantages to the way Windows does it over the way that Linux does it, like there is advantages to the way that Linux does it over how Windows does it. In the end, neither is clearly superior.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle odd alt depth-3" id="comment-1280775">
				<div id="div-comment-1280775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280775">
			January 20, 2017 at 1:34 pm</a>		</div>

		<p>I&#8217;d love to see a write-up of the advantages/disadvantages for both strategies from an academic standpoint.  Using pointer-relative addressing seems a lot cleaner to me than a dynamic base address, but frankly the only assembly I&#8217;ve ever played around with is MIPS, which is very different from x86-64.  I&#8217;d love to learn more about this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-msn even depth-3 parent" id="comment-1280825">
				<div id="div-comment-1280825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280825">
			January 21, 2017 at 11:34 am</a>		</div>

		<p>As I pointed out in my other comment, PIC is expensive on x86 which may be part of the reason. Linux has just chosen to prefer security over performance. Also ELF files fully well can contain relocations, but code moved to being position-independent when the push for ASLR started.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-4" id="comment-1280835">
				<div id="div-comment-1280835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280835">
			January 22, 2017 at 9:39 am</a>		</div>

		<p>&#8220;Linux has just chosen to prefer security over performance.&#8221; I&#8217;m not sure of this statement, especially since Microsoft went on to use relocatable libraries with ASLR even on x64. Don&#8217;t forget, the main reason why ASLR took longer to get into Windows was due to Microsoft being in the middle of developing Vista and not wanting to touch the kernel mode components of XP/2003.<br />
While it could very well have been that relocatable was chosen over IP relative addressing because of how expensive it was originally, that certainly isn&#8217;t true with x64, yet they stuck with relocatable.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1280755">
				<div id="div-comment-1280755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280755">
			January 20, 2017 at 9:25 am</a>		</div>

		<p>I&#8217;ve been compiling this one x86 DLL full PIC for ages (it has to interact with managed code and is loaded late so has no idea what its base address will be). Windows supports this just fine. I wonder how the ASLR thing handles it though. The old toolchain required to build it doesn&#8217;t know what /DYNAMICBASE is.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-kirbyfcf2 odd alt depth-3 parent" id="comment-1280786">
				<div id="div-comment-1280786" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Kirby+FC' rel='external nofollow' class='url'>Kirby FC</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280786">
			January 20, 2017 at 8:14 pm</a>		</div>

		<p>If executables and DLLs are capable of being position independent, then why is ASLR even needed?  Is it because most people use based images even though they don&#8217;t need to?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-4" id="comment-1280795">
				<div id="div-comment-1280795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280795">
			January 21, 2017 at 3:04 am</a>		</div>

		<p>No, this is a security measure. It prevents simple address based attacks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1280805">
				<div id="div-comment-1280805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280805">
			January 21, 2017 at 6:22 am</a>		</div>

		<p>ASLR only works because dlls can be relocated. The idea here is that contrary to old times an attacker cannot know at which memory address a function will be, so it makes exploiting the program harder.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1280855">
				<div id="div-comment-1280855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280855">
			January 23, 2017 at 12:08 am</a>		</div>

		<p>I imagine it is because the executable format has a field for base address and we need a flag to say &#8220;actually, pay no attention to that address&#8221;. As others have noted, PIC is expensive to emulate on x86, so designing a preferred base address into the executable format was sensible enough back in 1990.</p>
<p>To me, that cost assessment makes it all the more the surprising that it took so long for someone to add EIP-relative operations to Intel&#8217;s instruction set. However, perhaps I&#8217;m reading it wrongly and it is the existence of that &#8220;workaround&#8221; that meant the benefits of PIC were never quite enough to justify the effort.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3 parent" id="comment-1280995">
				<div id="div-comment-1280995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280995">
			January 23, 2017 at 9:12 am</a>		</div>

		<p>Honest question: How do you generate vtables and other statically-initialized pointers in position-independent code?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1281015">
				<div id="div-comment-1281015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1281015">
			January 23, 2017 at 9:29 am</a>		</div>

		<p>I checked. My compiler doesn&#8217;t implement it. If I ask it to build PIC and there would be a vtable it says no.</p>
<p>I&#8217;ve known how to do it for ages, but it&#8217;s never been profitable for me to attempt. What would need to be done is to fill out the vtables in DllMain, preferably with compiler assistance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude odd alt depth-4 parent" id="comment-1281115">
				<div id="div-comment-1281115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1281115">
			January 24, 2017 at 5:37 am</a>		</div>

		<p>It appears from a cursory google search that GCC uses a relocation table for vTables in PIC code as well as requiring that the vTables are initialized at load time. But it may use IP Relative for static calls.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1281285">
				<div id="div-comment-1281285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1281285">
			January 24, 2017 at 2:18 pm</a>		</div>

		<p>What did you use to search on Google? I tried &#8220;gcc pic vtable&#8221; and &#8220;how does gcc generate vtables for pic&#8221; but they didn&#8217;t turn up any answers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1281325">
				<div id="div-comment-1281325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1281325">
			January 24, 2017 at 7:53 pm</a>		</div>

		<p>@Raymond Chen: A search for `g++ &#8220;-fpic&#8221; vtable` reveals claim after claim that it works, but a pass through g++ -S reveals it does not. The compiler ignores -fpic -fPIC and generates a reloc vtable anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even depth-5" id="comment-1281445">
				<div id="div-comment-1281445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1281445">
			January 25, 2017 at 1:59 pm</a>		</div>

		<p>It was &#8220;GCC PIC C++&#8221; which didn&#8217;t get me to the answer directly, I had to go through the SO question that was the second result ( <a href="http://stackoverflow.com/a/967055/332733" rel="nofollow">http://stackoverflow.com/a/967055/332733</a> ) to get to this document <a href="https://www.akkadia.org/drepper/dsohowto.pdf" rel="nofollow">https://www.akkadia.org/drepper/dsohowto.pdf</a> by Ulrich Drepper, and then skim through until page 29 where it describes what&#8217;s done in the virtual table case. Other parts of the document cover non-virtual calls.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-5" id="comment-1281455">
				<div id="div-comment-1281455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1281455">
			January 25, 2017 at 2:08 pm</a>		</div>

		<p>Okay, so now I don&#8217;t feel so bad that I couldn&#8217;t find it with a cursory search. It was a second-order link.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1280845">
				<div id="div-comment-1280845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280845">
			January 22, 2017 at 6:28 pm</a>		</div>

		<p>I see no reason why EXEs can&#8217;t be moved, but they never seem to be. I don&#8217;t think they have relocation info in general. If I built an EXE that did would it be shuffled with the Falls?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-2" id="comment-1281335">
				<div id="div-comment-1281335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1281335">
			January 25, 2017 at 4:35 am</a>		</div>

		<p>When you build an executable with /DYNAMICBASE, it enables relocation.<br />
For example, do a dumpbin of notepad.exe, you will notice things like no &#8220;Relocations Stripped&#8221; flag in the characteristics and there is a .reloc section.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1280965">
				<div id="div-comment-1280965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1280965">
			January 23, 2017 at 8:46 am</a>		</div>

		<p>So what if I&#8217;m using a non-MS dev environment, and don&#8217;t have /DYNAMICBASE available. Does that imply ASLR never happens on my DLLs?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-2 parent" id="comment-1281035">
				<div id="div-comment-1281035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1281035">
			January 23, 2017 at 9:51 am</a>		</div>

		<p>Not really because of the most obvious reason, the toolchain&#8217;s linker may just set the flag on generated binaries.<br />
However, if you check the binary header&#8217;s DLL characteristics and there is no dynamic base flag there, then it will not take part in ASLR. Even though there shouldn&#8217;t be any difference between a binary with relocations in it and a binary compiled for ASLR, you need to specify the flag for it to happen.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle even depth-3" id="comment-1281465">
				<div id="div-comment-1281465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170120-00/?p=95225#comment-1281465">
			January 25, 2017 at 3:35 pm</a>		</div>

		<p>Unless you tell Windows to <a href="https://support.microsoft.com/en-us/help/2639308/an-update-is-available-for-the-aslr-feature-in-windows-7-or-in-windows-server-2008-r2" rel="nofollow">force it</a> to happen!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

