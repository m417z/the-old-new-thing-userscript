<html>
<head>
<title>What happens to a named object when all handles to it are closed?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What happens to a named object when all handles to it are closed?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 3, 2010 / year-entry #250</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer had a question about named kernel objects: I understand that handles in a process if leaked will be destroyed by the kernel when the process exits. My question would be around named objects. Would named objects hold their value indefinitely? If I run a small utility app to increment a named counting semaphore,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer had a question about named kernel objects:</p>
<blockquote class="q"><p>  I understand that handles in a process if leaked will be destroyed by the kernel when the process exits. My question would be around named objects. </p>
<p> Would named objects hold their value indefinitely? If I run a small utility app to increment a named counting semaphore, the count of that named semaphore could be lost when that app exits?  </p>
<p> I would expect it to always hold its current value so that transactions across processes and across time could be held even if no process is holding on to it. </p>
</blockquote>
<p> When the last handle to a named kernel object (such as a named semaphore or a named shared memory block) is closed, the object itself is destroyed. Doesn't matter whether you explicitly closed the handle by calling <code>CloseHandle</code> or the kernel closed the handle for you when it cleaned up the mess you left behind. The object manager doesn't say, "Well, if the application explicitly called <code>CloseHandle</code>, then I'll also delete the named object, but if the application leaked the handle, then I'll leave the named object around." </p>
<p> First of all, that would kind of belie the whole concept of clean-up. Cleaning up means destroying the resources the application neglected to. </p>
<p> Second, this would create a bizarre situation where the way to access a new feature is <i>to intentionally do something wrong</i>. (Namely, to leak a handle to a named object.) </p>
<p> Okay, so maybe the expectation was that named objects persisted after all handles to them are closed, even if the handle is closed via the normal <code>CloseHandle</code> mechanism. But then how would you delete a named object? There is no <code>DeleteNamedEvent</code> function, after all. You could write a process that created 2&nbsp;billion named objects and then leaked them. Boom, now you can't clean up by killing the process; you have to restart the computer. </p>
<p> Kernel objects all follow the same lifetime rules, whether they are named or anonymous: The object is destroyed when the last reference to it is removed (when the handle is closed, noting also that running threads and processes keep a reference to the corresponding kernel object). </p>
<p> If you want something that survives after all its handles are closed, then use something with a persistence model, like a file. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-859003">
				<div id="div-comment-859003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859003">
			September 3, 2010 at 8:15 am</a>		</div>

		<p>Or the registry. &nbsp;Or write a service.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859013">
				<div id="div-comment-859013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wizou</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859013">
			September 3, 2010 at 8:44 am</a>		</div>

		<p>Or maybe use DuplicateHandle to keep a reference to the object in your other processes?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-859023">
				<div id="div-comment-859023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas Rejbrand</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859023">
			September 3, 2010 at 8:57 am</a>		</div>

		<p>Isn&#39;t this at the very heart of a modern operating system, not to let a single process damage the system?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859033">
				<div id="div-comment-859033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gigi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859033">
			September 3, 2010 at 10:01 am</a>		</div>

		<p>Linux does persist various objects after a process exits, like memory maps or semaphores. This can be a major pain in the ass, since you need to make sure the object does not exist anymore when starting your process again if you want to start from a clean object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-859043">
				<div id="div-comment-859043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Asa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859043">
			September 3, 2010 at 10:42 am</a>		</div>

		<p>I know that in kernel mode, kernel objects can be either permanent or temporary. The decision for such is made at device creation time, but a permanent device can be made temporary to remove it. ZwMakeTemporaryObject ( <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ff566477(v=VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ff566477(v=VS.85).aspx</a> ) would be the kernel mode method of doing that.</p>
<p>To make it stick around though you have to set OBJ_PERMANENT when performing InitializeObjectAttributes. The flag is described as &quot;This flag only applies to objects that are named within the object manager. By default, such objects are deleted when all open handles to them are closed.&quot; ( <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ff547804(v=VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ff547804(v=VS.85).aspx</a> )</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859103">
				<div id="div-comment-859103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Archer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859103">
			September 4, 2010 at 6:59 am</a>		</div>

		<p>I am sorry but I was a little confused&#8230;Do you mean that a named kernel object would be deleted even the process who had created it exits without calling the CloseHandle? Thanks for an advanced explanation~</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-859113">
				<div id="div-comment-859113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Rose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859113">
			September 4, 2010 at 7:06 am</a>		</div>

		<p>In linux/unix typically named objects are treated like files in that they exist until deleted. &nbsp; Sometimes this is extremely handy, like when you want persistence but a file doesn&#39;t exactly fit the bill. &nbsp; The issue of having the objects pile up and having to restart the system is really no different than if a Windows app were to create billions of files and not delete them. &nbsp;In linux you can delete the named object just like you can delete a file.</p>
<p>The Windows and unix ways are simply different, and there are advantages and downsides to both. &nbsp;When writing a native application for either, I rarely have trouble. &nbsp; When trying to port an application that uses named objects from one to the other, it can be a pain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859123">
				<div id="div-comment-859123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859123">
			September 4, 2010 at 7:55 am</a>		</div>

		<p>A good OS should close handles to all objects when a process crash. Sloppy OS don&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-859133">
				<div id="div-comment-859133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859133">
			September 4, 2010 at 9:04 am</a>		</div>

		<p>@Archer:</p>
<p>Let me repeat that for you:</p>
<p>&quot;When the last handle to a named kernel object (such as a named semaphore or a named shared memory block) is closed, the object itself is destroyed. Doesn&#39;t matter whether you explicitly closed the handle by calling CloseHandle or the kernel closed the handle for you when it cleaned up the mess you left behind.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859143">
				<div id="div-comment-859143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859143">
			September 4, 2010 at 12:35 pm</a>		</div>

		<p>Not just closed, but also released (mutex). It wasn&#39;t so obvious to me at first.</p>
<div class="post">[<i>Um, if the object is destroyed, it doesn&#39;t have a released/not released state. (Or are you talking not about object destruction but merely handle closure at process termination? [I.e., are you changing the subject?] In which case the behavior you describe is a <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/09/12/463977.aspx" rel="nofollow">specific behavior for mutexes</a>, not a general property of kernel objects.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-859313">
				<div id="div-comment-859313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859313">
			September 6, 2010 at 9:23 pm</a>		</div>

		<p>Paul Rose: What objects in Linux are named but not files? I know there are named pipes, devices, and directories, but those aren&#39;t shared memory or semaphore. Perhaps you&#39;re talking about SYSV IPC primitives (shared memory, semaphores)? They stick around until explicitly deleted (or the system reboots), but they&#39;re not named.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859333">
				<div id="div-comment-859333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Rose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859333">
			September 7, 2010 at 6:59 am</a>		</div>

		<p>Gabe: we use shm_open with names in /dev/shm. &nbsp; We take advantage of the persistence to save time on process restarts, but we can always delete via rm if things go wrong. &nbsp;</p>
<p>On windows builds we use CreateFileMapping and do without the persistence.</p>
<p>The linux app typically restarts much faster, but once in a blue moon requires that we manually clean up. &nbsp; The winodws app restarts slower but is a little more bulletproof.</p>
<p>Again, no different than a file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-859393">
				<div id="div-comment-859393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859393">
			September 7, 2010 at 8:16 am</a>		</div>

		<p>Nitpick: your inline response to Gabest has the following mismatched parenthetical structure: {([])]</p>
<div class="post">[<i>I was hoping not to have to go back and re-edit for punctuation. I guess everything has to be perfect around here. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-859533">
				<div id="div-comment-859533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MikeCaron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100903-00/?p=12953#comment-859533">
			September 7, 2010 at 2:18 pm</a>		</div>

		<p>[I was hoping not to have to go back and re-edit for punctuation. I guess everything has to be perfect around here. -Raymond]</p>
<p>You should have added #pragma nipick(disable:4699)</p>
<p>On topic, this is one of those blog entries that make me &#8212; involuntarily, mind you &#8212; go &quot;Duh!&quot; Outstanding handles are closed when the process dies, and objects are destroyed when there aren&#39;t any more handles. Any further explanation is just fluff.</p>
<p>(note, this is not a criticism of your writing, but a criticism of someone who is unable or unwilling to think things through to their logical conclusion)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

