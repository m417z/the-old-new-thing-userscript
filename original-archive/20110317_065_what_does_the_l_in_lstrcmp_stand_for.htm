<html>
<head>
<title>What does the "l" in lstrcmp stand for?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What does the &quot;l&quot; in lstrcmp stand for?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 17, 2011 / year-entry #66</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If you ask Michael Kaplan, he'd probably say that it stands for lame. In his article, Michael presents a nice chart of the various L-functions and their sort-of counterparts. There are other L-functions not on his list, not because he missed them, but because they don't have anything to do with characters or encodings. On...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>If you ask <a href="http://blogs.msdn.com/michkap/"> Michael Kaplan</a>, he'd probably say that <a href="http://blogs.msdn.com/michkap/archive/2008/03/07/8086758.aspx"> it stands for <i>lame</i></a>.</p>
<p> In his article, Michael presents a nice chart of the various L-functions and their sort-of counterparts. There are other L-functions not on his list, not because he missed them, but because they don't have anything to do with characters or encodings. On the other hand, those other functions help shed light on the history of the L-functions. Those other functions are <i>lopen</i>, <i>lcreat</i>, <i>lread</i>, <i>lwrite</i>, <i>lclose</i>, and <i>llseek</i>. There are all L-version sort-of counterparts to <i>open</i>, <i>creat</i>, and <i>read</i>, <i>write</i>, <i>close</i>, and <i>lseek</i>. Note that we've already uncovered the answer to the unasked question "Why does llseek have two L's?" The first L is a prefix (whose meaning we will soon discover) and the second L comes from the function it's sort-of acting as the counterpart to. </p>
<p> But what does the L stand for? Once you find those other L-functions, you'll see next door the H-functions <i>hread</i> and <i>hwrite</i>. As we learned a while back, <a href="http://blogs.msdn.com/oldnewthing/archive/2008/12/12/9199378.aspx"> being lucky is simply observing things you weren't planning to observe</a>. We weren't expecting to find the H-functions, but there they were, and they blow the lid off the story. </p>
<p> The H prefix in <i>hread</i> and <i>hwrite</i> stands for <i>huge</i>. Those two functions operated on so-called <i>huge pointers</i>, which is 16-bit jargon for pointers to memory blocks larger than 64KB. To increment your average 16:16 pointer by one byte, you increment the bottom 16 bits. But when the bottom 16 bits contain the value 0xFFFF, the increment rolls over, and where do you put the carry? If the pointer is a huge pointer, the convention is that the byte that comes after <code>S:0xFFFF</code> is <code>(S+__AHINCR):0x0000</code>, where <code>__AHINCR</code> is a special value exported by the Windows kernel. If you allocate memory larger than 64KB, the <code>GlobalAlloc</code> function breaks your allocation into 64KB chunks and arranges them so that incrementing the selector by <code>__AHINCR</code> takes you from one chunk to the next. </p>
<p> Working backwards, then, the L prefix therefore stands for <i>long</i>. These functions explicitly accept far pointers, which makes them useful for 16-bit Windows programs since they are independent of the program's memory model. Unlike the L-functions, the standard library functions like <code>strcpy</code> and <code>read</code> operate on pointers whose size match the data model. If you write your program in the so-called <i>medium memory model</i>, then all data pointers default to <i>near</i> (i.e., they are 16-bit offsets into the default data segment), and all the C runtime functions operate on near pointers. This is a problem if you need to, say, read some data off the disk into a block of memory you allocated with <code>GlobalAlloc</code>: That memory is expressible only as a far pointer, but the <i>read</i> function accepts a near pointer. </p>
<p> To the rescue comes the <code>lread</code> function, which you can use to read from the disk into your far pointer. </p>
<p> How did Windows decide which C&nbsp;runtime functions should have corresponding L-functions? <a href="http://blogs.msdn.com/oldnewthing/archive/2007/07/10/3799014.aspx"> They were the functions that Windows itself used internally</a>, and which were exported as a courtesy. </p>
<p> Okay, now let's go back to the Lame part. Michael Kaplan notes that the <code>lstrcmp</code> and <code>lstrcmpi</code> functions actually are sort-of counterparts to <code>strcoll</code> and <code>strcolli</code>. So why weren't these functions called <code>lstrcoll</code> and <code>lstrcolli</code> instead? </p>
<p> Because back when <code>lstrcmp</code> and <code>lstrcmpi</code> were being named, the <code>strcoll</code> and <code>strcolli</code> functions hadn't been invented yet! It's like asking, "Why did the parents of General Sir Michael Jackson give him the same name as the pop singer?" or "<a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/01/19/10117410.aspx">Why didn't they use the Space Shuttle to rescue the Apollo 13 astronauts</a>?" </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-901923">
				<div id="div-comment-901923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ToddLa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-901923">
			March 17, 2011 at 8:11 am</a>		</div>

		<p>I don&#39;t think l is for long, it is for LARGE, as in LARGE pointer or model</p>
<div class="post">[<i>If you look at the Hungarian Notation documents, you&#39;ll see that &quot;lp&quot; officially stands for &quot;long pointer&quot;, not &quot;large pointer&quot;. Not that it really matters. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-901933">
				<div id="div-comment-901933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">E. Luten</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-901933">
			March 17, 2011 at 8:19 am</a>		</div>

		<p>@ToddLa: You mean LONG_PTR? There&#39;s no such thing as &quot;LARGE&quot; in the Win32 API AFAIK.</p>
<div class="post">[<i>Todd is going back to the <a href="http://en.wikipedia.org/wiki/Intel_Memory_Model" rel="nofollow">Intel memory models</a> which every 16-bit programmer had memorized. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-901973">
				<div id="div-comment-901973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-901973">
			March 17, 2011 at 11:18 am</a>		</div>

		<p>It is mildly amusing that I&#39;m used to llseek taking a 64 bit offset and returning a 64 bit position. Accidental name collision.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902003">
				<div id="div-comment-902003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JonPotter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-902003">
			March 17, 2011 at 1:20 pm</a>		</div>

		<p>So it&#39;s a courtesy now to export functions for applications to use? Funny, I thought that was kinda the whole point of an OS.</p>
<div class="post">[<i>Strange, the linux kernel doesn&#39;t provide strcmp. They leave that to the C runtime. <a href="http://blogs.msdn.com/b/oldnewthing/archive/2007/11/23/6475511.aspx" rel="nofollow">Courtesy functions have a tendency to become support burdens</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-901913">
				<div id="div-comment-901913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-901913">
			March 17, 2011 at 7:41 am</a>		</div>

		<p>Not to be confused with the _l suffix which appears on some functions (such as the *printf_l/*scanf_l families of functions), where the l stands for locale.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902023">
				<div id="div-comment-902023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jolyon Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-902023">
			March 17, 2011 at 5:31 pm</a>		</div>

		<p>&#8230; or &quot;Why did they build Windsor Castle so close to the motorway?&quot;</p>
<p>(my favourite overheard quote from an American tourist)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-901993">
				<div id="div-comment-901993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-901993">
			March 17, 2011 at 11:50 am</a>		</div>

		<p>Here I was thinking that the lstrcmp() was just a locale-sensitive version of strcmp() &#8212; which it appears to be, according to the documentation. &nbsp;I never looked at strcoll().</p>
<p>Of course, one of the positive things about the lstrcmp() function is that it is exported from KERNEL32.DLL. &nbsp;If you&#39;re making a program that, for some reason (*sheepish grin*), doesn&#39;t make use of the C Runtime Library, you can still have a strcmp() function without rolling your own. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902073">
				<div id="div-comment-902073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">free as in freeway</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-902073">
			March 18, 2011 at 5:42 am</a>		</div>

		<p>Unlikely, motorways are called freeways in US.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902083">
				<div id="div-comment-902083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-902083">
			March 18, 2011 at 5:53 am</a>		</div>

		<p>Those functions are nice, you can avoid C runtime and have SEH too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902113">
				<div id="div-comment-902113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Eshbach</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-902113">
			March 18, 2011 at 6:43 am</a>		</div>

		<p>Time to fire up your time machine again Raymond. &nbsp;(Can I borrow it after your done with it?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902263">
				<div id="div-comment-902263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-902263">
			March 18, 2011 at 10:28 am</a>		</div>

		<p>You could probably borrow it before he&#39;s done with it. You humans and your silly one-directional way of thinking about time &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902313">
				<div id="div-comment-902313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-902313">
			March 18, 2011 at 7:47 pm</a>		</div>

		<p>[Strange, the linux kernel doesn&#39;t provide strcmp. They leave that to the C runtime. Courtesy functions have a tendency to become support burdens. -Raymond]</p>
<p>Normally true. In this case, it&#39;s cheap to export stdlib library functions from kernel32.dll that kernel32.dll needs anyway. Linux knerel doesn&#39;t do the same as crossing a memory barrier to get to it makes it not worth it. kernel32 is userspace.</p>
<p>Note that I&#39;m saying that really only the l&#8230; and h&#8230; functions that already exist and wsprintf had any business being exported. Yes, lstrcmp and wsprintf are a little bit clunky, but wsprintf still has its uses even today. Had there been a few more that do exactly what the C standard says I&#39;d have argued for them as well. The only ones I know of are RtlCopyMemory and RtlMoveMemory in ntdll that should have been where memcpy and memmove were redirected to but were not. (If you try to call them without doing something funky you end up in memcpy and memmove thanks to a #define in windows.h).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902323">
				<div id="div-comment-902323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NativeCoder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-902323">
			March 19, 2011 at 2:49 am</a>		</div>

		<p>@Tihiy</p>
<p>&gt;&gt;&gt; Those functions are nice, you can avoid C runtime and have SEH too.</p>
<p>What is the advantage of not using the CRT?</p>
<p>I also noted that Raymond tends to use these l-functions (e.g. lstrcpyn) often in the code presented in this blog. What is the reason? Should we use these l-functions instead of ordinary CRT functions in our Windows apps written in native C/C++ code?</p>
<p>Thanks.</p>
<div class="post">[<i>My samples are written for brevity, and using the l-functions saves me a #include. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902333">
				<div id="div-comment-902333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-902333">
			March 20, 2011 at 11:18 am</a>		</div>

		<p>And there you go, the main reason other programming languages were invented outside Micro$oft backyard (like Pascal, Java, etc), to avoid the &quot;lame&quot; functions which only adds to the normal headache any serious application is generating.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902343">
				<div id="div-comment-902343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sonnycheah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110317-00/?p=11193#comment-902343">
			March 21, 2011 at 12:04 am</a>		</div>

		<p>I used to think they were &quot;High&quot; and &quot;Low&quot; as in most significant and least significant..</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

