<html>
<head>
<title>Can we continue to call FindNextFile() with the same handle that returned an error last time?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Can we continue to call FindNextFile() with the same handle that returned an error last time?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 12, 2014 / year-entry #145</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer wanted to know whether it was okay to call Find­Next­File with the same handle that returned an error last time. In other words, consider the following sequence of events: h = Find­First­File(...); succeeds Find­Next­File(h, ...); fails Find­Next­File(h, ...); ??? profit ??? The customer elaborated: Suppose that the directory contains four files, A, B,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer wanted to know whether it was okay to call <code>Find&shy;Next&shy;File</code> with the same handle that returned an error last time. In other words, consider the following sequence of events:</p>
<ol>
<li><code>h = Find&shy;First&shy;File(...);</code> succeeds </li>
<li><code>Find&shy;Next&shy;File(h, ...);</code> fails </li>
<li><code>Find&shy;Next&shy;File(h, ...);</code>     ??? <a href="http://www.southparkstudios.com/clips/151040/the-underpants-business">profit</a> ??? </li>
</ol>
<p> The customer elaborated: </p>
<blockquote class="q"><p>  Suppose that the directory contains four files, A, B, C, and D. We expect the following: </p>
<ul>
<li><code>Find&shy;First&shy;File</code> returns A </li>
<li><code>Find&shy;Next&shy;File</code> returns B </li>
<li><code>Find&shy;Next&shy;File</code> fails     (C is selected but an error occurred) </li>
<li><code>Find&shy;Next&shy;File</code> returns D &larr; is this expected? </li>
</ul>
<p> After <code>Find&shy;Next&shy;File</code> returns an error, can we continue to search with the same handle? Or should we close the handle and get a new one from <code>Find&shy;First&shy;File</code>? If it depends on the type of error that occurred, the customer would like to know more details about when the search can be continued and when it cannot. </p>
</blockquote>
<p> We asked the customer what problem they're encountering that is causing them to ask this strange question. The customer replied, "Sometimes we get the error <code>ERROR_<wbr>FILE_<wbr>CORRUPT</wbr></wbr></code> or <code>ERROR_<wbr>INVALID_<wbr>FUNCTION</wbr></wbr></code>, but we don't know what end-user configurations are causing those error codes. We would like to know whether we can continue to use <code>Find&shy;Next&shy;File</code> in these two cases." </p>
<p> The assumption "C is selected by an error occurred" is already wrong. The error might not have selected C. The error may have failed before C was selected. (For example, maybe the network cable was unplugged, so the server doesn't even know that we tried to select C.) Or the error may result in C and D both being skipped. Since an error occurred, any of these things may have happened. </p>
<p> There is no value in trying to continue to use a find handle that is in an error state because you cannot reason about it. Maybe it got stuck in a permanent error state (the user removed the USB drive). Maybe it is a transient error state (somebody finds the network cable and plugs it back in). It's like asking, "If something is broken, can I expect it to continue working?" </p>
<p> Even closing the handle and restarting the enumeration may not succeed. For example, as long as the drive or network cable remains unplugged, your enumeration will fail. And it might be a repeatable error state due to drive corruption which causes enumerations always to fail at the same place. </p>
<p> (My guess is that <code>ERROR_<wbr>FILE_<wbr>CORRUPT</wbr></wbr></code> is the case of drive corruption, and <code>ERROR_<wbr>INVALID_<wbr>FUNCTION</wbr></wbr></code> is some sort of device driver error state, perhaps because the device was unplugged.) </p>
<p> You should just accept that you cannot enumerate the contents and proceed accordingly. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1130543">
				<div id="div-comment-1130543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130543">
			June 12, 2014 at 7:20 am</a>		</div>

		<p>Punch the driver writer who decided ERROR_INVALID_FUNCTION for anything other than API not implemented for this device.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1130553">
				<div id="div-comment-1130553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130553">
			June 12, 2014 at 7:34 am</a>		</div>

		<p>@Joshua: Maybe he uses a function from another driver that is not implemented? (Well you still can punch him for using a function without checking if it is implemented. Or you can punch the other driver writer who returned ERROR_INVALID_FUNCTION without a possibility to check which methods are implemented)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1130563">
				<div id="div-comment-1130563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130563">
			June 12, 2014 at 7:47 am</a>		</div>

		<p>I find it hard to imagine the confusion of mind that would cause someone to expect that an error&#39;ed object can continue to be used.</p>
<p>(I may be misquoting Babbage).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1130573">
				<div id="div-comment-1130573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Long</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130573">
			June 12, 2014 at 7:55 am</a>		</div>

		<p>Unfortunately we don&#39;t know whether the customer tried the experiment, or what their results were. &nbsp;If the customer really saw errors of this type and yet file D was still returned, I think it would be a valid question to ask &#39;it looks like we can continue to use the handle, but should we?&#39;. &nbsp;If they saw errors of this type and subsequent calls to FindNextFile always returned errors, then they are silly customers and they were wasting the customer liaison&#39;s time.</p>
<p>Disclaimer: I don&#39;t know how FindNextFile behaves after an error and I haven&#39;t done the experiment either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1130583">
				<div id="div-comment-1130583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130583">
			June 12, 2014 at 8:12 am</a>		</div>

		<p>@Daniel: You still shouldn&#39;t only get here in error condition.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1130603">
				<div id="div-comment-1130603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130603">
			June 12, 2014 at 9:13 am</a>		</div>

		<p>I guess it&#39;s an issue of which file the ERROR_FILE_CORRUPT error is referring to.</p>
<p>If file &quot;C&quot; is corrupt, well, I suppose that that&#39;s useful information and I might use it to not bother trying to open C, but that shouldn&#39;t prevent me from continuing to enumerate the other non-corrupt files in the directory, should it?</p>
<p>However, if the directory file referenced by handle &quot;h&quot; is corrupt, then obviously we can&#39;t continue enumerating through h.</p>
<p>So, does ERROR_FILE_CORRUPT refer to &quot;C&quot; or &quot;h&quot;? Clearing that possible source of misunderstanding up might help reduce the customer&#39;s confusion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1130613">
				<div id="div-comment-1130613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130613">
			June 12, 2014 at 9:56 am</a>		</div>

		<p>Here you have to apply the &quot;fail fast&quot; principle: if you don&#39;t know what caused the call to fail, you have no option but abort (and perhaps tell the user so s/he can correct it and retry).</p>
<p>@Karellen: FindFirstFile/FindNextFile do directory enumeration. They don&#39;t open the files or otherwise look at their contents, so the call should success even if the file enumerated is physically corrupt. So I guess the ERROR_FILE_CORRUPT should refer to the directory itself (technically, a directory is just a special file that contains a list of other files).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1130623">
				<div id="div-comment-1130623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130623">
			June 12, 2014 at 10:18 am</a>		</div>

		<p>Maybe sometimes this century Microsoft API designers will discover exception safety guarantees and start documenting them for their product. What you describe above is the weak guarantee. The docs should just say so. </p>
<p>The fact that you use error codes to report exceptions rather than true language exceptions doesn&#39;t change the semantics or applicability of the general theory. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1130633">
				<div id="div-comment-1130633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tautvydas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130633">
			June 12, 2014 at 10:38 am</a>		</div>

		<p>Does this only apply for obscure errors like ERROR_FILE_CORRUPT? I mean, FindNextFile consistently fails with ERROR_ACCESS_DENIED sometimes, and subsequent queries work just fine. Here&#39;s a demo program that demonstrates it:</p>
<p><a rel="nofollow" target="_new" href="http://pastebin.com/gK3QQRdV">http://pastebin.com/gK3QQRdV</a></p>
<p>On my machine, it hits the breakpoint 6 times. On my phone, however, it hits the breakpoint so many times I can&#39;t even finish the search (probably has to do with Windows Phone app permissions). Isn&#39;t the right way to do it is to just ignore such errors and keep going at it until it returns ERROR_NO_MORE_FILES?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1130643">
				<div id="div-comment-1130643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130643">
			June 12, 2014 at 10:49 am</a>		</div>

		<p>The Babbage quote:</p>
<p>On two occasions I have been asked [by members of Parliament], &#39;Pray, Mr. Babbage, if you put into the machine wrong figures, will the right answers come out?&#39; I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1130653">
				<div id="div-comment-1130653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130653">
			June 12, 2014 at 11:33 am</a>		</div>

		<p>@Tautvydas</p>
<p>Is this ok: You call FindNextFile, then GetLastError without checking return of FindNextFile?</p>
<p>I always have the pattern in mind, GetLastError returns correct error only if previous API function signaled failure (by returning FALSE, or INVALID_HANDLE_VALUE, or NULL &#8230;)</p>
<p>On topic: Strange question indeed, I would also abandon if FindNextFile returns FALSE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1130663">
				<div id="div-comment-1130663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130663">
			June 12, 2014 at 11:47 am</a>		</div>

		<p>@Hans: No. There are API calls that don&#39;t reset GetLastError so you could potentially see an old error.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1130673">
				<div id="div-comment-1130673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tautvydas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130673">
			June 12, 2014 at 11:59 am</a>		</div>

		<p>@Hans: I believe you&#39;re right! Apparently, sometimes FindNextFile returns success and sets an error code in the same call. I should really get a habit of checking return values more thoroughly :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1130693">
				<div id="div-comment-1130693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tautvydas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130693">
			June 12, 2014 at 12:34 pm</a>		</div>

		<p>@Myria: That was my mistake. I wasn&#39;t checking for the return value of FindNextFile. FindNextFile isn&#39;t failing to return a file, but it sometimes sets the error code anyway &#8211; my guess is that it is failing to get some specific attributes of the file in question.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1130713">
				<div id="div-comment-1130713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130713">
			June 12, 2014 at 1:31 pm</a>		</div>

		<p>@Gabe:</p>
<p>Afair, GetLastError is undefined when the function returns success. These functions may call some internal functions that set the error code, or there are some functions which don&#39;t call SetLastError and set the system error code to 0 before it runs.</p>
<p>One other function which is perfect for seeing this in action is CreateProcess and trying to run a program with a space in the path, but have it unquoted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1130723">
				<div id="div-comment-1130723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130723">
			June 12, 2014 at 2:15 pm</a>		</div>

		<p>@Antonio: &quot;FindFirstFile/FindNextFile do directory enumeration. They don&#39;t open the files or otherwise look at their contents&#8230;&quot;</p>
<p>It&#39;s still not so unreasonable. You could have directory entry where portions of the entry are corrupt, but it looks like the rest is fine. Find{First/Next}File return information that, if it were on Unix, would require looking into the inode of the file; in Unix terms, the inode could be corrupt while the directory entry is fine. In that case, the desired behavior would be totally reasonable. Does NTFS store file information in something like inodes? I don&#39;t know, and I don&#39;t really think so &#8212; except that I know it supports hard links, and I&#39;m not sure how they would work otherwise.</p>
<p>In any case, I agree with Karellen: I think it&#39;s a pretty reasonable question, depending on what they looked at, what they were able to look at, and what the results of their looking were.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1130683">
				<div id="div-comment-1130683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130683">
			June 12, 2014 at 12:03 pm</a>		</div>

		<p>@Tautvydas: If this is correct, then yes, Raymond&#39;s article here is slightly incorrect. &nbsp;It seems like it should have a special case for ERROR_ACCESS_DENIED. &nbsp;FindFirstFileExW + FindNextFileW would be too limiting if ERROR_ACCESS_DENIED were considered a point at which undefined behavior started to occur and thus became unreliable afterward.</p>
<p>I am curious, though: Are you getting ERROR_ACCESS_DENIED for *some* files in a directory and not others, or is it all-or-nothing for a given directory?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1130703">
				<div id="div-comment-1130703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130703">
			June 12, 2014 at 12:55 pm</a>		</div>

		<p>Tautvydas: So it actually *succeeds* with ERROR_ACCESS_DENIED? How interesting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kirbyfcf2 even thread-even depth-1" id="comment-1130743">
				<div id="div-comment-1130743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Kirby+FC' rel='external nofollow' class='url'>Kirby FC</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130743">
			June 12, 2014 at 8:16 pm</a>		</div>

		<p>As in all things involving computers, the correct answer is: &nbsp;It depends.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1130753">
				<div id="div-comment-1130753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130753">
			June 12, 2014 at 9:45 pm</a>		</div>

		<p>Does FindNextFile go through the language-dependent filename substitution?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1130763">
				<div id="div-comment-1130763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130763">
			June 12, 2014 at 10:33 pm</a>		</div>

		<p>@Tautvydas: your program does NOT demonstrate what you claim. You never look for error_access_denoed and you wrongly check for FindNextFile failure (can&#39;t just use GetLastError). Your code is seriously wrong, really.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1130783">
				<div id="div-comment-1130783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130783">
			June 13, 2014 at 4:00 am</a>		</div>

		<p>@Evan:</p>
<p>NTFS stores metadata for files in directory entry, that&#39;s why getting them is cheap unlike on UNIX. Even small files can be stored directly there. IIRC all those links are implemented as special file entries. At least some are of type reparse points.</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa365006(v=vs.85).aspx">msdn.microsoft.com/&#8230;/aa365006(v=vs.85).aspx</a></p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa365460(v=vs.85).aspx">msdn.microsoft.com/&#8230;/aa365460(v=vs.85).aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1130923">
				<div id="div-comment-1130923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Marvin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130923">
			June 13, 2014 at 9:11 am</a>		</div>

		<p>Exception safety guarantees for a C interface? You are one confused kid.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm odd alt thread-odd thread-alt depth-1" id="comment-1130933">
				<div id="div-comment-1130933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1130933">
			June 13, 2014 at 9:40 am</a>		</div>

		<p>&quot;Exception safety guarantees for a C interface? You are one confused kid.&quot;</p>
<p>Did you miss this part?</p>
<p>The fact that you use error codes to report exceptions rather than true language exceptions doesn&#39;t change the semantics or applicability of the general theory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131043">
				<div id="div-comment-1131043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">immibis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140612-00/?p=753#comment-1131043">
			June 14, 2014 at 12:09 am</a>		</div>

		<p>@Rob: perfectly reasonable for several types of errors. The problem is you don&#39;t know whether the error is one that it&#39;s reasonable to continue from.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

