<html>
<head>
<title>Of what use is the RDW_INTERNALPAINT flag?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Of what use is the RDW_INTERNALPAINT flag?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 21, 2013 / year-entry #166</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130621-00/?p=4023</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">For motivational purposes, let's start with a program that displays a DWM thumbnail. Start with the scratch program and add the following: #include <dwmapi.h> HWND g_hwndThumbnail; HTHUMBNAIL g_hthumb; void UpdateThumbnail(HWND hwndFrame, HWND hwndTarget) { if (g_hwndThumbnail != hwndTarget) { g_hwndThumbnail = hwndTarget; if (g_hthumb != nullptr) { DwmUnregisterThumbnail(g_hthumb); g_hthumb = nullptr; } if (hwndTarget !=...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
For motivational purposes, let's start with
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/05/13/10417964.aspx">
a program that displays a DWM thumbnail</a>.
</p>
<p>
Start with
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/23/54576.aspx">
the scratch program</a>
and add the following:
</p>
<pre>
<font COLOR=blue>#include &lt;dwmapi.h&gt;

HWND g_hwndThumbnail;
HTHUMBNAIL g_hthumb;

void UpdateThumbnail(HWND hwndFrame, HWND hwndTarget)
{
 if (g_hwndThumbnail != hwndTarget) {
  g_hwndThumbnail = hwndTarget;
  if (g_hthumb != nullptr) {
   DwmUnregisterThumbnail(g_hthumb);
   g_hthumb = nullptr;
  }

  if (hwndTarget != nullptr) {
   RECT rcClient;
   GetClientRect(hwndFrame, &amp;rcClient);
   if (SUCCEEDED(DwmRegisterThumbnail(hwndFrame,
                         g_hwndThumbnail, &amp;g_hthumb))) {
    DWM_THUMBNAIL_PROPERTIES props = {};
    props.dwFlags = DWM_TNP_RECTDESTINATION | DWM_TNP_VISIBLE;
    props.rcDestination = rcClient;
    props.rcDestination.top += 50;
    props.fVisible = TRUE;
    DwmUpdateThumbnailProperties(g_hthumb, &amp;props);
   }
  }
 }
}</font>
</pre>
<p>
The <code>Update&shy;Thumbnail</code>
function positions a thumbnail of the target window
inside the frame window.
There's a small optimization in the case that the
target window is the same one that the thumbnail
is already viewing.
Overall, no big deal.
</p>
<pre>
void
OnDestroy(HWND hwnd)
{
 <font COLOR=blue>UpdateThumbnail(hwnd, nullptr);</font>
 PostQuitMessage(0);
}
</pre>
<p>
When our window is destroyed, we need to clean up the thumbnail,
which we do by updating it to a null pointer.
</p>
<p>
For the purpose of illustration,
let's say that pressing the <kbd>1</kbd> key changes
the thumbnail to a randomly-selected window.
</p>
<pre>
<font COLOR=blue>struct RANDOMWINDOWINFO
{
 HWND hwnd;
 int cWindows;
};

BOOL CALLBACK RandomEnumProc(HWND hwnd, LPARAM lParam)
{
 if (hwnd != g_hwndThumbnail &amp;&amp;
     IsWindowVisible(hwnd) &amp;&amp;
     (GetWindowStyle(hwnd) &amp; WS_CAPTION) == WS_CAPTION) {
  auto prwi = reinterpret_cast&lt;RANDOMWINDOWINFO *&gt;(lParam);
  prwi-&gt;cWindows++;
  if (rand() % prwi->cWindows == 0) {
   prwi->hwnd = hwnd;
  }
 }
 return TRUE;
}

void ChooseRandomWindow(HWND hwndFrame)
{
 RANDOMWINDOWINFO rwi = {};
 EnumWindows(RandomEnumProc, reinterpret_cast&lt;LPARAM&gt;(&rwi));
 UpdateThumbnail(hwndFrame, rwi.hwnd);
}

void OnChar(HWND hwnd, TCHAR ch, int cRepeat)
{
 switch (ch) {
 case TEXT('1'):
  ChooseRandomWindow(hwnd);
  break;
 }
}

 HANDLE_MESSAGE(hwnd, WM_CHAR, OnChar);</font>
</pre>
<p>
The random window selector selects among windows with
a caption which are visible and which are not already
being shown in the thumbnail.
(That last bit is so that when you press <kbd>1</kbd>,
it will always pick a <i>different</i> window.)
</p>
<p>
Run this program, and yippee, whenever you press the
<kbd>1</kbd> key, you get a new thumbnail.
</p>
<p>
Okay, but usually your program shows more than just a thumbnail.
It probably incorporates the thumbnail into its other content,
so let's draw some other content, too.
Say, a single-character random message.
</p>
<pre>
<font COLOR=blue>TCHAR g_chMessage = '?';</font>

void
PaintContent(HWND hwnd, PAINTSTRUCT *pps)
{
 <font COLOR=blue>if (!<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2006/03/27/561924.aspx">IsRectEmpty</a>(&amp;pps-&gt;rcPaint)) {
  RECT rcClient;
  GetClientRect(hwnd, &amp;rcClient);
  DrawText(pps-&gt;hdc, &amp;g_chMessage, 1, &amp;rcClient,
           DT_TOP | DT_CENTER);
 }</font>
}

<font COLOR=blue>void ChooseRandomMessage(HWND hwndFrame)
{
 g_chMessage = rand() % 26 + TEXT('A');
 InvalidateRect(hwndFrame, nullptr, TRUE);
}</font>

void OnChar(HWND hwnd, TCHAR ch, int cRepeat)
{
 switch (ch) {
 case TEXT('1'):
  ChooseRandomWindow(hwnd);
  break;
 <font COLOR=blue>case TEXT('2'):
  ChooseRandomMessage(hwnd);
  break;</font>
 }
}
</pre>
<p>
Now, if you press <kbd>2</kbd>,
we change the random message.
There is a small optimiztion in
<code>Paint&shy;Content</code> that skips the rendering
if the paint rectangle is empty.
Again, no big deal.
</p>
<p>
Okay, but sometimes there are times where your program
wants to update the thumbnail <i>and</i> the message
at the same time.
Like this:
</p>
<pre>
void OnChar(HWND hwnd, TCHAR ch, int cRepeat)
{
 switch (ch) {
 case TEXT('1'):
  ChooseRandomWindow(hwnd);
  break;
 case TEXT('2'):
  ChooseRandomMessage(hwnd);
  break;
 <font COLOR=blue>case TEXT('3'):
  ChooseRandomWindow(hwnd);
  ChooseRandomMessage(hwnd);
  break;</font>
 }
}
</pre>
<p>
Run this program and press <kbd>3</kbd>
and watch the thumbnail and message change simultaneously.
</p>
<p>
And now we have a problem.
</p>
<p>
You see, the
<code>Choose&shy;Random&shy;Window</code> function updates
the thumbnail immediately,
since the thumbnail is presented by DWM,
whereas the
<code>Choose&shy;Random&shy;Message</code> function updates
the message, but the new message doesn't appear on the screen
until the next paint cycle.
This means that there is a window of time where the new
thumbnail is on the screen, but you still have the old message.
Since painting is a low-priority activity,
the window manager is going to deliver other messages to your
window before it finally gets around to painting,
and the visual mismatch between the thumbnail and the message can
last for quite some time.
(You can exaggerate this in the sample program by inserting a
call to <code>Sleep</code>.)
What can we do to get rid of this visual glitch?
</p>
<p>
One solution would be to delay updating the thumbnail
until the next paint cycle.
At the paint cycle, we update the thumbnail <i>and</i>
render the new message.
Now both updates occur at the same time,
and you get rid of the glitch.
To trigger a paint cycle, we can invalidate
a dummy 1&times;1 pixel in the window.
</p>
<pre>
<font COLOR=blue>HWND g_hwndThumbnailWanted;</font>

void
PaintContent(HWND hwnd, PAINTSTRUCT *pps)
{
 <font COLOR=blue>UpdateThumbnail(hwnd, g_hwndThumbnailWanted);</font>

 if (!IsRectEmpty(&amp;pps-&gt;rcPaint)) {
  RECT rcClient;
  GetClientRect(hwnd, &amp;rcClient);
  DrawText(pps-&gt;hdc, &amp;g_chMessage, 1, &amp;rcClient,
           DT_TOP | DT_CENTER);
 }
}

void ChooseRandomWindow(HWND hwndFrame)
{
 RANDOMWINDOWINFO rwi = {};
 EnumWindows(RandomEnumProc, reinterpret_cast<lparam>(&rwi));
 <font COLOR=blue>g_hwndThumbnailWanted = rwi.hwnd;
 RECT rcDummy = { 0, 0, 1, 1 };
 InvalidateRect(hwndFrame, &amp;rcDummy, FALSE);</font>
}
</pre>
<p>
Now, when we want to change the thumbnail, we just
remember what thumbnail we want (the "logical" current
thumbnail)
and invalidate a dummy pixel in our window.
The invalid dummy pixel triggers a paint cycle,
and in our paint cycle, we call
<code>Update&shy;Thumbnail</code> to synchronize
the logical current thumbnail with the physical
current thumbnail.
And then we continue with our regular painting
(in case there is also painting to be done, too).
</p>
<p>
But it sure feels wasteful invalidating a pixel
and forcing the <code>Draw&shy;Text</code> to occur
even though we really didn't update anything.
Wouldn't it be great if we could just say,
"Could you fire up a paint cycle for me,
even though there's technically nothing to paint?
Because I actually do have stuff to paint,
it's just something outside your knowledge
since it is not rendered by GDI."
</p>
<p>
Enter the
<code>RDW_<wbr>INTERNAL&shy;PAINT</code> flag.
</p>
<p>
If you pass the
<code>RDW_<wbr>INTERNAL&shy;PAINT</code> flag
to <code>Redraw&shy;Window</code>,
that means,
"Set the 'Yo, there's painting to be done!' flag.
I know you think there's no actual painting to be done,
but trust me on this."
(<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/12/19/10249000.aspx">It's
not actually a flag, but you can think of it that way</a>.)
</p>
<p>
When the window manager then get around to deciding whether
there is any painting to be done,
before it concludes,
"Nope, this window is all valid,"
it checks if you made a special
<code>RDW_<wbr>INTERNAL&shy;PAINT</code> request,
and if so, then it will generate
a dummy <code>WM_<wbr>PAINT</code> message for you.
</p>
<p>
Using this new flag is simple:
</p>
<pre>
 g_hwndThumbnailWanted = rwi.hwnd;
 <font COLOR=red>// <strike>RECT rcDummy = { 0, 0, 1, 1 };</strike>
 // <strike>InvalidateRect(hwndFrame, &amp;rcDummy, FALSE);</strike></font>
 <font COLOR=blue>RedrawWindow(hwndFrame, nullptr, nullptr,
              RDW_INTERNALPAINT);</font>
</pre>
<p>
Now, when the program wants to update its thumbnail,
it just schedules a fake-paint message with the window manager.
These fake-paint messages coalesce with real-paint messages,
so if you do an internal paint and an invalidation,
only one actual paint message will be generated.
If the paint message is a fake-paint message,
the <code>rcPaint</code> will be empty,
and you can test for that in your
paint handler and skip your GDI painting.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1062533">
				<div id="div-comment-1062533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130621-00/?p=4023#comment-1062533">
			June 21, 2013 at 3:32 pm</a>		</div>

		<p>How does RDW_INTERNALPAINT interact with UpdateWindow? I hope MSDN just dropped the ball and internal paints are honored there too&#8230;</p>
<p>And is there a corresponding mechanism to Validate Rect for saying thanks, but I changed my mind? Could not find anything.</p>
<p>Thanks, and keep it up please.</p>
<div class="post">[<em><code>Update&shy;Window</code> respects <code>RDW_INTERNAL&shy;PAINT</code>. Basically, setting the internal paint flag means &quot;Act as if the update region is nonempty (even though it might actually be empty).&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1062543">
				<div id="div-comment-1062543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130621-00/?p=4023#comment-1062543">
			June 21, 2013 at 3:52 pm</a>		</div>

		<p>Sorry, withdrawing my 2nd question, just found a flag for RedrawWindow.</p>
<p>BTW: Could you enlighten me why Microsoft splintered the API reference, so there are separate and conflicting copies mostly focused for all those versions? That makes it quite easy to look at the wrong docs and not realizing that parts dont apply to you and which ones. It also burries the right docs under nefarious false friends.</p>
<div class="post">[<em>Can you point me to examples of multiple conflicting copies? I know the Windows CE team created their own copy since their OS is a Windows subset, but their docs are clearly labeled &quot;Windows CE.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1062573">
				<div id="div-comment-1062573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130621-00/?p=4023#comment-1062573">
			June 21, 2013 at 5:34 pm</a>		</div>

		<p>Well, haven&#39;t found two conflicting pages claiming the exact same systems yet. But taking RedrawWindow as an example, there are at least 6 pages, one each for: desktop, ce5, ce6, ce6.5, ce7compact, ce.net. All ce pages seem to contain the same basic info with few differences (dropped min versions/different ratings/possibility to add community content (not found any actual ommunity content for the ce pages)/sometimes linking to _one_ of the other pages/&#8230;). The only significant difference seems to be to the desktop page, which lists two more flags than the rest and has community contributions.</p>
<p>Are you sure if one of those pages is corrected for something, all the others will be done too? And how about missing the vital clue (hidden in community content on one of the pages you are not looking at just then), even if all the other content is completely reproduced? What i personally find most irritating is 1: having to hunt down the differences, complicated by the difficulty of moving from any page to corresponding pages in different sets, especially if porting/developing not only for Windows Y. and 2: Having my search for information on SomeApiFunctionOrFlag spammed by nearly right pages which might be dead wrong. Both parts lead to serious frustrations.</p>
<p>PS: Thanks for the answers you already gave.</p>
<div class="post">[<em>When the desktop pages are updated, the Windows CE pages are not, because that would be wrong. For example, suppose a new flag is added to Windows 8. It would be wrong to add that flag to the Windows CE 5 documentation because the flag is not supported in Windows CE 5. If you are not targeting Windows CE, then don&#39;t read the Windows CE documentation. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1062593">
				<div id="div-comment-1062593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130621-00/?p=4023#comment-1062593">
			June 21, 2013 at 7:53 pm</a>		</div>

		<p>I found RDW_INTERNALPAINT useful when rendering content on demand in WM_PAINT: Whenever the underlying content changes, I post an RDW_INTERNALPAINT message. Then, in WM_PAINT, I compute the updated layout and invalidate the regions affected by the changes before calling BeginPaint.</p>
<p>One thing I remember is that apparently you couldn&#39;t combine RDW_INTERNALPAINT with some other flags in a single call to RedrawWindow (possibly RDW_UPDATENOW, but I don&#39;t remember).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1062633">
				<div id="div-comment-1062633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lars</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130621-00/?p=4023#comment-1062633">
			June 22, 2013 at 4:58 am</a>		</div>

		<p>rs, I believe this is what Raymond is alluding to when he says &quot;It&#39;s not actually a flag, but you can think of it that way.&quot;</p>
<p>I can&#39;t be bothered to look it up in the header file, but perhaps it&#39;s a combination of flags which would conflict with yours, or it&#39;s a magic constant, or something.</p>
<div class="post">[<em>I meant that the thing that says &quot;This window needs a <code>WM_PAINT</code> message&quot; is not a flag. <code>RDW_INTERNAL&shy;PAINT</code> is a flag. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1062733">
				<div id="div-comment-1062733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">msdn libb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130621-00/?p=4023#comment-1062733">
			June 23, 2013 at 2:46 pm</a>		</div>

		<p>Often the first msdn online help page VS shows of API calls when selecting a WinApi function and pressing F1 is a 5-10 year old Windows CE page, even when developing straight win32 apps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1062743">
				<div id="div-comment-1062743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jolyon.smith_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jolyon.smith@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130621-00/?p=4023#comment-1062743">
			June 23, 2013 at 6:47 pm</a>		</div>

		<p>&quot;I meant that the thing that says &quot;This window needs a WM_PAINT message&quot; is not a flag. RDW_INTERNAL&shy;PAINT is a flag. -Raymond&quot;</p>
<p>I am sure I am not the only one that was initially confused both by the original wording in the article and this &quot;clarification&quot;, which merely repeats the mistake of the article text. &nbsp;When reading: &quot;The thing that says &quot;&#8230;&quot; etc&quot;, the &quot;thing&quot; I seem to be reading about is RDW_INTERNALPAINT. &nbsp;This creates an apparent contradiction when on the one hand you said &quot;The thing &#8230; is not a flag.&quot; and then immediately after &quot;[The thing] IS a flag&quot;.</p>
<p>I took me a couple of reads, both of the original and the clarification, to realise that what you were trying to say was:</p>
<p>Whilst RDW_INTERNALPAINT is a flag, the effect it has on the window manager is to trigger a message to be sent, not set a flag.</p>
<div class="post">[<em>Right. There are two flags in question here, the one you pass to <code>Redraw&shy;Window</code> and the one the window manager uses to remember that a paint message is needed. The second one is not actually a flag. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1062803">
				<div id="div-comment-1062803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130621-00/?p=4023#comment-1062803">
			June 24, 2013 at 7:35 am</a>		</div>

		<p>@msdn libb, yeah, it&#39;s a little annoying when you search Google or Bing and the first result is a CE hit, not a desktop hit. &nbsp;But they&#39;re getting better over time, and moving the desktop result up. &nbsp;I can&#39;t remember OTTOMH but there&#39;s slight differences in wordings in the summary you get on the search results page that lets you know whether it&#39;s desktop or CE versions of the function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1062863">
				<div id="div-comment-1062863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130621-00/?p=4023#comment-1062863">
			June 24, 2013 at 10:31 am</a>		</div>

		<p>In regard to searching: They start favoring the desktop pages over arbitrary ce pages? Good for &#39;desktop&#39; only developers, even though its not good enough until its reliable that you get the desktop page.</p>
<p>Still does not help anyone developing for ce-x.y or worse yet needing info from two or more split docs. In the last case you really want the differences highlighted.</p>
<p>@raymond: I intentionally said corrected not updated beecause updating could mean making things conform to an expanded new version of the api, while correcting only implies faulty docs (which might be duplicated inclusive any errors).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1062933">
				<div id="div-comment-1062933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jolyon.smith_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jolyon.smith@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130621-00/?p=4023#comment-1062933">
			June 24, 2013 at 5:26 pm</a>		</div>

		<p>Surely it&#39;s much easier and less confusing to just say &quot;There is only one flag. &nbsp;The mechanism it invokes doesn&#39;t involve a flag at all.&quot; ?</p>
<p>Unless you had tongue firmly inserted into cheek of course. &nbsp;:)</p>
<p>Not that is matters now. &nbsp;The ball has long since gone. &nbsp;:)</p>
<div class="post">[<em>It&#39;s convenient to think that each window has a &quot;Yo, there&#39;s painting to be done!&quot; flag, even if internally it is not implemented by a flag. That&#39;s all I&#39;m saying. Didn&#39;t realize that there would be so much confusion over that. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1062953">
				<div id="div-comment-1062953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZijingWu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130621-00/?p=4023#comment-1062953">
			June 24, 2013 at 8:06 pm</a>		</div>

		<p>Great! I always follow this blog. </p>
<p>I think it will be very helpful, If you can share the whole application code by an Zip file as an attachement. Investigate the runtime behavior will be very helpful to understanding the code.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

