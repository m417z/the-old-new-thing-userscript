<html>
<head>
<title>How to avoid accessing freed memory when canceling a thread pool callback</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How to avoid accessing freed memory when canceling a thread pool callback</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 2, 2018 / year-entry #102</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Making sure everybody is done before you free it.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The Windows thread pool is convenient,
but one tricky part is how to remove items from the thread pool.
</p>
<p>
This discussion applies to all the thread pool objects,
but I'll use thread pool timers for concreteness.
You start by calling
<code>Create&shy;Threadpool&shy;Timer</code>
to establish the callback function and its context.
Next, you call
<code>Set&shy;Threadpool&shy;Timer</code> to configure
the timer:
When the timer becomes due and
its optional periodicity.
</p>
<p>
At this point, the timer is live.
It will queue a callback (or callbacks, if periodic) to the
thread pool according to the schedule you specified.
</p>
<p>
At some future point, you decide that you are finished with the timer.
The timer may have elapsed by this point, or maybe you're cleaning up
the timer before it elapsed.
</p>
<p>
Now you have a few options.
</p>
<p>
The simplest way is just to call
<code>Close&shy;Threadpool&shy;Timer</code>.
If the callback is not running, then this frees the timer immediately.
Otherwise, it waits for the callback to complete before freeing the timer.
</p>
<p>
This "either/or" behavior makes
<code>Close&shy;Threadpool&shy;Timer</code>
basically useless for any callback with nontrivial context data,
because you don't know
when it's safe to free the context data.
If you free it as soon as
<code>Close&shy;Threadpool&shy;Timer</code> returns,
then you might free it out from under an active callback.
</p>
<p>
That would be bad.
</p>
<p>
If you make the callback itself responsible for freeing the context data,
you have the new problem of not knowing whether the callback is running,
so the thread trying to close the timer doesn't know whether it should
free the data or not.
You can't have the callback set a flag saying, "Hey, I've started!"
because there's still a race condition where the thread trying to close
the timer checks the flag just before the callback manages to set it.
You might try to fix this by making the context pointer be a pointer
to a control block that in turn contains the
data pointer, and having the callback and the main thread perform
an atomic exchange on the data pointer,
but you merely replaced the problem with an identical one:
How do you know when it's safe to free the control block?
</p>
<p>
Fortunately,
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682040(v=vs.85).aspx">
the documentation suggests an alternative</a>:
</p>
<ul>
<li>Call
<code>Set&shy;Threadpool&shy;Timer</code> to reconfigure the timer
so it never comes due.
This prevents new callbacks from occurring.
</li>
<li>Call
<code>Wait&shy;For&shy;Threadpool&shy;Timer&shy;Callbacks</code>
to wait for any outstanding callbacks to complete.
</li>
<li>Call
<code>Close&shy;Threadpool&shy;Timer</code>.
</li>
<li>Free the context data.
</li>
</ul>
<p>
When
<code>Wait&shy;For&shy;Threadpool&shy;Timer&shy;Callbacks</code>
returns, you know that there are no active callbacks,
and your prior call to
<code>Set&shy;Threadpool&shy;Timer</code> makes sure that
no new callbacks are scheduled.
This means that you can call
<code>Close&shy;Threadpool&shy;Timer</code>,
and it will always be in the "callback is not running" case,
so you can free the context data as soon as
<code>Close&shy;Threadpool&shy;Timer</code> returns.
</p>
<p>
Great, we solved the context data lifetime problem,
but we introduced a new problem: Deadlock.
</p>
<p>
Oh, look at the time. We'll continue this discussion next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20180502-00/?p=98655#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="https://blogs.msdn.microsoft.com/oldnewthing/wp-comments-post.php" method="post" id="commentform" class="comment-form">
				<p class="comment-form-comment"><textarea id="comment" name="comment" cols="45" rows="4" aria-required="true"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" aria-required='true' required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" aria-required='true' required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit btn btn-default" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='98655' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="c7b2efb846" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="119"/></p>			</form>
			</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1335415">
				<div id="div-comment-1335415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Giedrius</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335415">
			May 2, 2018 at 7:48 am</a>		</div>

		<p>Wouldn&#8217;t using three states like Nothing/Running/Wont run and atomically swapping them work?</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335415#respond' onclick='return addComment.moveForm( "div-comment-1335415", "1335415", "respond", "98655" )' aria-label='Reply to Giedrius'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1335485">
				<div id="div-comment-1335485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clockwork-Muse</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335485">
			May 2, 2018 at 9:27 am</a>		</div>

		<p>Okay, where did you store that state?  When is it safe to reuse that piece of memory?</p>
<p>It also doesn&#8217;t solve the problem of starvation:<br />
 1. Created as Nothing<br />
 2. Timer procs and sets as Running.<br />
 3. Main thread wants to close, but sees Running.  Setting the variable to Won&#8217;t Run doesn&#8217;t help, because it doesn&#8217;t tell you when the callback <b>finishes</b> (and is safe for free).  Loops for retry to set Won&#8217;t Run.<br />
 4. Timer finishes and sets Nothing.<br />
 5. Go back to 2</p>
<p>Attempting to add a fourth value &#8211; LastRun &#8211; doesn&#8217;t solve the problem (there&#8217;s a race condition when the main thread does the recovery between the two atomic sets).  Using two variables (one for &#8220;can start&#8221; and one for &#8220;running&#8221;) solves the issue, but doesn&#8217;t solve the &#8220;freeing the shared data&#8221; problem.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335485#respond' onclick='return addComment.moveForm( "div-comment-1335485", "1335485", "respond", "98655" )' aria-label='Reply to Clockwork-Muse'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1335575">
				<div id="div-comment-1335575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Giedrius</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335575">
			May 2, 2018 at 9:24 pm</a>		</div>

		<p>What&#8217;s “freeing the shared data” problem? Free the shared data when timers are finished and cancelled.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335575#respond' onclick='return addComment.moveForm( "div-comment-1335575", "1335575", "respond", "98655" )' aria-label='Reply to Giedrius'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1335585">
				<div id="div-comment-1335585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335585">
			May 2, 2018 at 11:54 pm</a>		</div>

		<p>And how do you know when the timers are finished and cancelled? They finish asynchronously, and there is no notification when they complete.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335585#respond' onclick='return addComment.moveForm( "div-comment-1335585", "1335585", "respond", "98655" )' aria-label='Reply to Raymond Chen - MSFT'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1335675">
				<div id="div-comment-1335675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clockwork-Muse</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335675">
			May 3, 2018 at 8:46 am</a>		</div>

		<p>Ah.  You&#8217;re thinking of something like this:<br />
 1. Created as Nothing<br />
 2. Timer procs and sets as Running<br />
 3. Main thread wants to close, so blanket sets Won&#8217;t Run<br />
 4. Timer finishes and sees Won&#8217;t Run, so the timer thread frees the shared data.</p>
<p>The problem is that this <b>requires</b> the timer to run, and (perhaps more importantly) that there be only one timer accessing the shared memory: this is a problem if your process takes longer to run than the timer proc interval, or was delayed, or a couple of other possibilities.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335675#respond' onclick='return addComment.moveForm( "div-comment-1335675", "1335675", "respond", "98655" )' aria-label='Reply to Clockwork-Muse'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1335425">
				<div id="div-comment-1335425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335425">
			May 2, 2018 at 8:07 am</a>		</div>

		<p>My solution: never use timers in threadpools. The most expediant way to create timers is to use WaitForMultipleObjects (or MsgWaitForMultipleObjects) in the master thread with the appropriate timeout.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335425#respond' onclick='return addComment.moveForm( "div-comment-1335425", "1335425", "respond", "98655" )' aria-label='Reply to Joshua'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1335445">
				<div id="div-comment-1335445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335445">
			May 2, 2018 at 8:36 am</a>		</div>

		<p>&#8220;If the callback is not running, then this frees the timer immediately. Otherwise, it waits for the callback to complete before freeing the timer.&#8221;</p>
<p>I read this and thought: isn&#8217;t this exactly what you want?</p>
<p>I had to reread it four times before I realised the problem: CloseThreadpoolTimer doesn&#8217;t wait for the callback to complete.  It returns immediately while something else waits for the callback to complete.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335445#respond' onclick='return addComment.moveForm( "div-comment-1335445", "1335445", "respond", "98655" )' aria-label='Reply to laonianren'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1335685">
				<div id="div-comment-1335685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335685">
			May 3, 2018 at 1:30 pm</a>		</div>

		<p>Agree. &#8220;It waits&#8221; reads like &#8220;CloseThreadpoolTimer waits&#8221;. Raymond, are you able to rephrase this to make it more clear?</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335685#respond' onclick='return addComment.moveForm( "div-comment-1335685", "1335685", "respond", "98655" )' aria-label='Reply to Jon'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1335455">
				<div id="div-comment-1335455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VinDuv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335455">
			May 2, 2018 at 8:53 am</a>		</div>

		<p>I was confused at first because I though “waits for the callback to complete before freeing the timer” meant that Close­Threadpool­Timer only return after callback completion. It isn’t; the documentation makes it clear that it frees the timer asynchronously, which is why the context data can not be immediately freed after its return.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335455#respond' onclick='return addComment.moveForm( "div-comment-1335455", "1335455", "respond", "98655" )' aria-label='Reply to VinDuv'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1335535">
				<div id="div-comment-1335535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JAS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335535">
			May 2, 2018 at 7:57 pm</a>		</div>

		<p>You have to support cancellation, meaning that every timer call should have a context/lock saying whether you acquired the timer or were cancelled. Whichever it was, gets to free any resources immediately and blocks off the opposite path. If a timer is cancelled this way, the timer callback might still fire late, but the cleanup code was already run on the canceller&#8217;s thread so nothing will run inside the callback. In C# this is absolutely trivial with try-catch/async-await and CancellationToken.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335535#respond' onclick='return addComment.moveForm( "div-comment-1335535", "1335535", "respond", "98655" )' aria-label='Reply to JAS'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1335625">
				<div id="div-comment-1335625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335625">
			May 3, 2018 at 2:01 am</a>		</div>

		<p>In C# this is only trivial because someone else already solved the problem for you. (The GC takes care of freeing the memory and the implementors of the C# wrapper around threadpool timers had to take care of any pinning problems and race conditions).</p>
<p>So yeah, easy if someone else solved the problem for you, but it doesn&#8217;t teach you how to solve it when you have to face it.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335625#respond' onclick='return addComment.moveForm( "div-comment-1335625", "1335625", "respond", "98655" )' aria-label='Reply to Zarat'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1335655">
				<div id="div-comment-1335655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">djingis1</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335655">
			May 3, 2018 at 6:58 am</a>		</div>

		<p>For certain definitions of &#8220;absolutely trivial&#8221;.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335655#respond' onclick='return addComment.moveForm( "div-comment-1335655", "1335655", "respond", "98655" )' aria-label='Reply to djingis1'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1335635">
				<div id="div-comment-1335635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655#comment-1335635">
			May 3, 2018 at 3:28 am</a>		</div>

		<p>What you want is a notification that the timer was freed. The question arises, how does CloseThreadpoolTimer get notified that it should free the timer? Maybe it just dispatches a task to the thread pool to wait for the callbacks to complete&#8230; in which case, you probably want to do that too instead of waiting on the calling thread.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180502-00/?p=98655&#038;replytocom=1335635#respond' onclick='return addComment.moveForm( "div-comment-1335635", "1335635", "respond", "98655" )' aria-label='Reply to Neil'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

