<html>
<head>
<title>Coroutines mean that the thing that looks like a stack variable may not technically be one</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Coroutines mean that the thing that looks like a stack variable may not technically be one</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 11, 2017 / year-entry #270</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171211-00/?p=97555</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Hoisted into the future.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Some time ago,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160728-00/?p=93975">
I pointed out the
<code>Get&shy;Current&shy;Thread&shy;Stack&shy;Limits</code>
function</a>
which lets you determine whether a 
pointer points into the stack.
</p>
<p>
Note, however, that if the local variable is captured by a coroutine,
<a HREF="https://blogs.msdn.microsoft.com/vcblog/2015/11/30/coroutines-in-visual-studio-2015-update-1/">
The introduction of coroutines into the C++ language</a>
means that what looks like a local variable may end up being
hoisted into a heap-allocated object representing the coroutine itself
(like, say, a <code>std::future</code>).
</p>
<p>
Something to bear in mind if you're going to be making decisions
based on whether a variable is on the stack.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-jan-ringos even thread-even depth-1 parent" id="comment-1317726">
				<div id="div-comment-1317726" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jan+Ringo%C5%A1' rel='external nofollow' class='url'>Jan Ringoš</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171211-00/?p=97555#comment-1317726">
			December 11, 2017 at 8:32 am</a>		</div>

		<p>I&#8217;d guess that coroutines would be implemented through fibers on Windows.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1317737">
				<div id="div-comment-1317737" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171211-00/?p=97555#comment-1317737">
			December 11, 2017 at 8:48 am</a>		</div>

		<p>Look up the emulator formerly called bsnes. The madman behind it tried using fibers for coroutines. Then he just went ahead and swapped ESP. Pretty sure that you get into all sorts of &#8220;fun situations&#8221; by doing that. Lets hope he never had to verify that every stack frame was in on the joke of exceptions&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1317745">
				<div id="div-comment-1317745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">creaothceann</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171211-00/?p=97555#comment-1317745">
			December 11, 2017 at 9:23 am</a>		</div>

		<p>It&#8217;s still called bsnes, but just the emulator core. (higan is the whole suite, and libco is the coroutine library.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1317746">
				<div id="div-comment-1317746" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JAS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171211-00/?p=97555#comment-1317746">
			December 12, 2017 at 1:02 am</a>		</div>

		<p>The correct answer is you don&#8217;t implement coroutines any particular way and just adapt the language&#8217;s coroutine builder pattern to your specific scenario. I&#8217;d be pretty pissed if I wanted to handle thread pools and found out that some yo yo forced coroutines to use fibers. Fibers are worthless. They&#8217;re a computer science experiment. We heard a fiber story about SQL Server but that story hasn&#8217;t quite propagated to other projects, wonder why.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-s-m-joshi-02 even depth-2 parent" id="comment-1317755">
				<div id="div-comment-1317755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171211-00/?p=97555#comment-1317755">
			December 12, 2017 at 2:30 am</a>		</div>

		<p>The coroutines ts refers to stackless coroutines. The compiler transforms the function into a state machine &#8211; when the coroutine suspends, it needs a place to store any local state that will be need after the courtine resumes. Unless the compiler can prove the coroutine will not be resumed after the frame in which it is first invoked, that state needs to be heap allocated.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-s-m-joshi-02 odd alt depth-3 parent" id="comment-1317765">
				<div id="div-comment-1317765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171211-00/?p=97555#comment-1317765">
			December 12, 2017 at 2:31 am</a>		</div>

		<p>Sorry, forgot to add &#8211; that means fibres aren&#8217;t the correct model. Coroutines run on whatever stack is handy.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-jan-ringos even depth-4" id="comment-1317795">
				<div id="div-comment-1317795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jan+Ringo%C5%A1' rel='external nofollow' class='url'>Jan Ringoš</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171211-00/?p=97555#comment-1317795">
			December 13, 2017 at 5:55 am</a>		</div>

		<p>Ah, that makes more sense now. Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1317727">
				<div id="div-comment-1317727" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171211-00/?p=97555#comment-1317727">
			December 11, 2017 at 8:33 am</a>		</div>

		<p>I&#8217;m afraid these things really have been hoisted into the future &#8211; Coroutines didn&#8217;t make the cut for inclusion in C++17</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

