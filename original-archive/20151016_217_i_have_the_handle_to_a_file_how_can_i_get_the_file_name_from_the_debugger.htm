<html>
<head>
<title>I have the handle to a file; how can I get the file name from the debugger?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>I have the handle to a file; how can I get the file name from the debugger?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 16, 2015 / year-entry #218</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Suppose you're debugging and you find yourself with the handle to a file, and you would like to know what file that handle corresponds to. Well, the way you would do this from code is to call Get­Final­Path­Name­By­Handle, but you're not in code; you're in the debugger. But you can simulate what code did from...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Suppose you're debugging and you find yourself with the handle to a file,
and you would like to know what file that handle corresponds to.
</p>
<p>
Well, the way you would do this from code is to
<a HREF="http://msdn.microsoft.com/library/aa366789">
call <code>Get&shy;Final&shy;Path&shy;Name&shy;By&shy;Handle</code></a>,
but you're not in code; you're in the debugger.
</p>
<p>
But you can simulate what code did from the debugger.
</p>
<p>
Now, if
<code>Get&shy;Final&shy;Path&shy;Name&shy;By&shy;Handle</code>
were a function you had written, you could just
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2007/04/27/2292037.aspx">
use the <code>.call</code> command</a> to ask the debugger
to build a call frame and call the function and then clean up.
But since you didn't write that function, you'll have to build the call
frame manually.
</p>
<p>
Let's say the handle you are interested is 0x5CC.
</p>
<pre>
0:000&gt; !handle 5cc f
Handle 5cc
  Type          File
  Attributes    0
  GrantedAccess 0x120089:
         ReadControl,Synch
         Read/List,ReadEA,ReadAttr
  HandleCount   2
  PointerCount  262145
  No Object Specific Information available
</pre>
<p>
Yup, it's a file. Let's see what file it is.
First, the x86 way.
We start by recording the contents of the volatile
registers so that we can restore
them afterwards.
</p>
<pre>
0:000&gt; r
eax=00000925 ebx=00000003 ecx=267ad2be edx=00000000 esi=00000000 edi=00b300e0
eip=00b36e1d esp=0089f7cc ebp=0089f838 iopl=0         nv up ei pl zr na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
contoso!CContoso::OnCommand+0x1a5:
00b36e1d 8bd1            mov     edx,ecx
</pre>
<p>
Next, we allocate some memory to hold the result.
</p>
<pre>
0:000&gt; .dvalloc 1000
Allocated 1000 bytes starting at 05740000
</pre>
<p>
Next, we build the function call.
Since this is x86, all parameters go on the stack,
and the stdcall calling convention pushes the last parameter first.
</p>
<pre>
; simulate "push dwFlags"
0:000&gt; r esp=esp-4;ed esp 0
; simulate "push cchFilePath"
0:000&gt; r esp=esp-4;ed esp 0x800
; simulate "push lpszFilePath"
0:000&gt; r esp=esp-4;ed esp 05740000
; simulate "push hFile"
0:000&gt; r esp=esp-4;ed esp 5cc
; simulate "call kernelbase!GetFinalPathNameByHandleW"
0:000&gt; r esp=esp-4;ed esp eip
0:000&gt; r eip=kernelbase!GetFinalPathNameByHandleW
; execute until the function returns
0:000&gt; g poi esp
eax=00000025 ebx=00000003 ecx=7715fb62 edx=00000046 esi=00000000 edi=00b300e0
eip=00b36e1d esp=0089f7cc ebp=0089f838 iopl=0         nv up ei pl zr na pe cy
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200247
contoso!CContoso::OnCommand+0x1a5:
00b36e1d 8bd1            mov     edx,ecx
</pre>
<p>
Okay, we've returned.
We see that <code>eax</code> is nonzero, so the call succeeded.
Let's look at the output buffer.
</p>
<pre>
0:000&gt; du 05740000
05740000  "\\?\C:\Users\Public\Documents\lo"
05740040  "g.txt"
</pre>
<p>
There's our path to the file, which looks like a log file.
</p>
<p>
Now we have to play Boy Scout and leave things the way we found them.
</p>
<pre>
; do not need to restore stack pointer since stdcall is callee-clean
0:000&gt; r eax=925
0:000&gt; r ecx=267ad2be
0:000&gt; r edx=0
0:000&gt; r efl=200246
0:000&gt; r
eax=00000925 ebx=00000003 ecx=267ad2be edx=00000000 esi=00000000 edi=00b300e0
eip=00b36e1d esp=0089f7cc ebp=0089f838 iopl=0         nv up ei pl zr na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
contoso!CContoso::OnCommand+0x1a5:
00b36e1d 8bd1            mov     edx,ecx
</pre>
<p>
Most of the registers are preserved by the function call, but we need
to restore the volatile registers
<code>eax</code>,
<code>ecx</code>,
<code>edx</code>,
and flags.
</p>
<p>
In practice, you may be able to get away with not restoring everything.
For example,
flags may not be meaningful at the point in the code you broke in.
And if you broke in immediately after a function call or immediately
on entry to a function, the values in the nonvolatile registers are
already trashed or trashable, so you don't need to restore them either.
</p>
<p>
Next up is x64.
This is harder because of the shadow space and many more registers.
Again,
we start by recording the contents of the volatile
registers so that we can restore
them afterwards.
</p>
<pre>
0:000&gt; r
rax=0000000000000a0c rbx=0000000000000000 rcx=230fe38816f90000
rdx=0000000000000000 rsi=0000000000000000 rdi=0000000080004005
rip=000007f709e471fc rsp=0000002e45a9f880 rbp=0000002e45a9f949
 r8=0000000000000000  r9=000007fbab8aabd0 r10=0000000000000003
r11=0000002e45a9f2a8 r12=0000000000000000 r13=0000000000000001
r14=ffffffffffffffff r15=0000000000000000
iopl=0         nv up ei pl nz na po cy
cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000207
contoso!CContoso::OnCommand+0x3b9:
000007f7`09e471fc 33c0            xor     eax,eax
</pre>
<p>
Next, we allocate some memory to hold the result.
</p>
<pre>
0:000&gt; .dvalloc 1000
Allocated 1000 bytes starting at 0000002e`475e0000
</pre>
<p>
Next, we build the function call.
On x64, the first four parameters go into registers
<code>rcx</code>,
<code>rdx</code>,
<code>r8</code>, and
<code>r9</code>,
and corresponding shadow space is reserved on the stack.
</p>
<pre>
; create shadow space
0:000&gt; r rsp=@rsp-20
; first parameter is hFile
0:000&gt; r rcx=5cc
; second parameter is lpszFilePath
0:000&gt; r rdx=0000002e`475e0000
; third parameter is cchFilePath
0:000&gt; r r8=800
; fourth parameter is dwFlags
0:000&gt; r r9=0
; simulate "call kernelbase!GetFinalPathNameByHandleW"
0:000&gt; r rsp=@rsp-8; ep rsp @rip
0:000&gt; r rip=kernelbase!GetFinalPathNameByHandleW
; execute until the function returns
0:000&gt; g poi @rsp
0:000&gt; r
rax=0000000000000025 rbx=0000000000000000 rcx=00000000ffffffff
rdx=0000000000008000 rsi=0000000000000000 rdi=0000000080004005
rip=000007f709e471fc rsp=0000002e45a9f860 rbp=0000002e45a9f949
 r8=0000002e4a159390  r9=000007fbab91a3a0 r10=0000000000000003
r11=0000002e45a9f3a8 r12=0000000000000000 r13=0000000000000001
r14=ffffffffffffffff r15=0000000000000000
iopl=0         nv up ei pl nz na po nc
cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206
contoso!CContoso::OnCommand+0x3b9:
000007f7`09e471fc 33c0            xor     eax,eax
</pre>
<p>
Again, we look at the result.
</p>
<pre>
0:000&gt; du 0000002e`475e0000
0000002e`475e0000  "\\?\C:\Users\raymondc\Desktop\lo"
0000002e`475e0040  "g.txt"
</pre>
<p>
And again, we need to undo everything we did so the application doesn't
freak out.
</p>
<pre>
0:000&gt; r rsp=@rsp+20
0:000&gt; r rax=0a0c
0:000&gt; r rcx=230fe38816f90000
0:000&gt; r rdx=0
0:000&gt; r r8=0
0:000&gt; r r9=7fbab8aabd0
0:000&gt; r r10=3
0:000&gt; r r11=2e45a9f2a8
0:000&gt; r efl=207
0:000&gt; r
rax=0000000000000a0c rbx=0000000000000000 rcx=230fe38816f90000
rdx=0000000000000000 rsi=0000000000000000 rdi=0000000080004005
rip=000007f709e471fc rsp=0000002e45a9f880 rbp=0000002e45a9f949
 r8=0000000000000000  r9=000007fbab8aabd0 r10=0000000000000003
r11=0000002e45a9f2a8 r12=0000000000000000 r13=0000000000000001
r14=ffffffffffffffff r15=0000000000000000
iopl=0         nv up ei pl nz na po cy
cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000207
contoso!CContoso::OnCommand+0x3b9:
000007f7`09e471fc 33c0            xor     eax,eax
</pre>
<p>
Again,
most of the registers are preserved by the function call, but we need
to restore the volatile registers
<code>eax</code>,
<code>ecx</code>,
<code>edx</code>,
<code>r8</code> through <code>r11</code>,
and flags.
</p>
<p>
<b>Exercise</b>:
I could've skipped restoring <code>rax</code> and flags.
Why?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1198101">
				<div id="div-comment-1198101" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1198101">
			October 16, 2015 at 7:12 am</a>		</div>

		<p>That&#39;s the hard way. OpenProcess() DuplicateHandleEx() GetFinalPathNabeByHandle() MessageBox()</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1198091">
				<div id="div-comment-1198091" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1198091">
			October 16, 2015 at 7:12 am</a>		</div>

		<p>Of course, by the time the world sees this post, the debugger team has already added the name resolving to the debugger. But it&#39;s the spirit of the problem that matters.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1198081">
				<div id="div-comment-1198081" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1198081">
			October 16, 2015 at 7:15 am</a>		</div>

		<p>What debugger is this? &nbsp;Why doesn&#39;t it have the ability to call functions as a standard feature, and why are we using it when there are plenty of debuggers that do? (Including the one in Visual Studio.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1198071">
				<div id="div-comment-1198071" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1198071">
			October 16, 2015 at 7:26 am</a>		</div>

		<p>@Mason Raymond is teaching us how stuff works. You are free to do it the easy way without needing to understand what&#39;s really going on if you want to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1198061">
				<div id="div-comment-1198061" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1198061">
			October 16, 2015 at 7:27 am</a>		</div>

		<p>Exercise answer: The code being debugged is about to execute the &quot;xor eax,eax&quot; instruction, which will trash rax and flags.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle odd alt thread-odd thread-alt depth-1" id="comment-1198051">
				<div id="div-comment-1198051" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1198051">
			October 16, 2015 at 7:27 am</a>		</div>

		<p>@Mason Wheeler: This is windbg, which is pretty much the only debugger you can use to debug in kernel space (drivers, minifilters, etc.). &nbsp;I think most sane application developers would avoid windbg as much as possible, though it is definitely a powerful tool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1198031">
				<div id="div-comment-1198031" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm100</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1198031">
			October 16, 2015 at 8:28 am</a>		</div>

		<p>&quot;Now, if GetÂ­FinalÂ­PathÂ­NameÂ­ByÂ­Handle were a function you had written,&quot;</p>
<p>Why does it matter who wrote the function? What the net technical difference between a function in my code vs something in a loaded DLL</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1198011">
				<div id="div-comment-1198011" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1198011">
			October 16, 2015 at 8:54 am</a>		</div>

		<p>@Joshua: sure, if you&#39;re writing code. Sometimes you want to call functions in the debugger, to do quick tests for things. I&#39;ve done it a number of times (not on Windows, but the point is the same).</p>
<p>@Mason, @pm100 &#8211; the debugger described *can* call functions. That&#39;s what Raymond told us: &quot;you could just use the .call command&quot;. But the debugger only knows how to set up a call frame for the functions that it has debugging information about, and most of the time that means &quot;your code only&quot;. And the debugger needs to know how to set up a stack frame, because all the world is not stdcall.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1198001">
				<div id="div-comment-1198001" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lars</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1198001">
			October 16, 2015 at 10:15 am</a>		</div>

		<p>@Pietro: Aha, so the situation would be different if one downloaded the symbols from the MS symbol server? That&#39;s not what I (and several others, it seems) took away from Raymond&#39;s exposition. I thought the core difference was the function living in a DLL vs. in the main executable. Otherwise Raymond would&#39;ve mentioned the symbol server.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197951">
				<div id="div-comment-1197951" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1197951">
			October 16, 2015 at 12:41 pm</a>		</div>

		<p>@Lars: The MS symbol server only has the public symbols, which do not contain enough information for .call to work (no info about function parameters, just the FPO).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197931">
				<div id="div-comment-1197931" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh Bowman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1197931">
			October 16, 2015 at 1:38 pm</a>		</div>

		<p>It&#39;s worth pointing out that any IT professional worth his salt should know his way around WinDbg, in order to be able to solve seemingly intractable problems directly on a customer&#39;s machine. This is yet another tool I&#39;ll stick in my bag. It&#39;s not just developers that need debuggers, though I did come to IT from development, so it&#39;s not as much of a mystery.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197921">
				<div id="div-comment-1197921" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Don't Go Trashing My Flags</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1197921">
			October 16, 2015 at 1:46 pm</a>		</div>

		<p>This trick only works on code that conforms to the ABI. The ABI is stupid. In order for a function to return a simple true/false &#8211; which, of course, the FLAGS register could do in a single bit &#8211; the ABI demands we use an entire 64-bit register&#8230; and, to add insult to injury, the compiler will use only the low 8 bits! That&#39;s wasting over 80% of the bits right there&#8230; but, since you really only need one bit, that&#39;s a 200% increase in bit-usage &#8211; PER YEAR &#8211; over the last three decades!! STOP THE MADNESS. &nbsp;RESPECT THE FLAGS.</p>
<div class="post">[<em>There&#39;s also 64 bits of unused space in the RCX, RDX, R8, R9, R10, R11, XMM0, XMM1, XMM2, XMM3, XMM4, and XMM5 registers, Plus the home space on the stack that could be used to return additional values. That&#39;s a total of 1472 bits wasted. WASTED! Plus in the flags register, you have C, P, A, Z, S, D, O flags available. Why not use them all? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197901">
				<div id="div-comment-1197901" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1197901">
			October 17, 2015 at 12:02 am</a>		</div>

		<p>@Don&#39;t Go Trashing My Flags: &nbsp;How would you call such a function from a language that doesn&#39;t _have_ a single bit type? &nbsp;In particular, how would you call such a function from C89 (which was pretty much the dominant language for this sort of thing when the x64 ABI was defined).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197891">
				<div id="div-comment-1197891" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carl Mess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1197891">
			October 17, 2015 at 9:47 am</a>		</div>

		<p>I think SoftIce, WinIce did this too. Anyways way to go Raymond I always find very interesting this kinds of analysis about functions, calling conventions and stack preparation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1197851">
				<div id="div-comment-1197851" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1197851">
			October 19, 2015 at 1:42 am</a>		</div>

		<p>Won&#39;t the first solution run into the desynch stack problem?</p>
<p><a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/12/16/317157.aspx" rel="nofollow" target="_new">blogs.msdn.com/&#8230;/317157.aspx</a></p>
<div class="post">[<em>The context switch out of the app into the debugger already broke the return address predictor. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197841">
				<div id="div-comment-1197841" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AlexShalimov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1197841">
			October 19, 2015 at 6:05 am</a>		</div>

		<p>How does this method (and GetÂ­FinalÂ­PathÂ­NameÂ­ByÂ­Handle) work with hardlinks? It basically means that a file has several equal names; which one is returned?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1197821">
				<div id="div-comment-1197821" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1197821">
			October 19, 2015 at 7:03 am</a>		</div>

		<p>@AlexShalimov: If it&#39;s done well, it will be the one that was used to open it, I&#39;d guess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1197731">
				<div id="div-comment-1197731" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1197731">
			October 20, 2015 at 3:53 am</a>		</div>

		<p>@Medinoc: You can also open files by their file id so in some instances it has to just pick one&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197631">
				<div id="div-comment-1197631" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1197631">
			October 20, 2015 at 2:22 pm</a>		</div>

		<p>Now I want to know how to do it in Itanium. ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197521">
				<div id="div-comment-1197521" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151016-00/?p=91341#comment-1197521">
			October 21, 2015 at 7:44 am</a>		</div>

		<p>ls -l /proc/&lt;PID&gt;/fd/&lt;handle&gt; &nbsp;</p>
<p>Ta Da!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

