<html>
<head>
<title>Homework assignment about window subclassing</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Homework assignment about window subclassing</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 10, 2003 / year-entry #123</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41893</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Window subclassing is trickier than you think. Consider this code sketch: // Subclass the window for a little while WNDPROC OldWndProc = SubclassWindow(hwnd, NewWndProc); ... do stuff ... // Okay all done, remove our subclass by // restoring the previous window procedure SubclassWindow(hwnd, OldWndProc); What could go wrong? We'll discuss it tomorrow.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Window subclassing is trickier than you think.
Consider this code sketch:
</p>
<pre>
// Subclass the window for a little while
WNDPROC OldWndProc = SubclassWindow(hwnd, NewWndProc);
... do stuff ...
// Okay all done, remove our subclass by
// restoring the previous window procedure
SubclassWindow(hwnd, OldWndProc);
</pre>
<p>What could go wrong?
<a href="http://blogs.msdn.com/oldnewthing/archive/2003/11/11/55653.aspx">
We'll discuss it tomorrow</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-131033">
				<div id="div-comment-131033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.geary.com/' rel='external nofollow' class='url'>Michael Geary</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41893#comment-131033">
			November 10, 2003 at 4:30 am</a>		</div>

		<p>Someone else can subclass the window while you have it subclassed. When you restore the original window function, you remove their subclass as well as your own.</p>
<p>Window hooks don&#8217;t have this problem, because Windows manages the hook chain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-131043">
				<div id="div-comment-131043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41893#comment-131043">
			November 10, 2003 at 4:54 am</a>		</div>

		<p>Doh. Didn&#8217;t think of that. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-131053">
				<div id="div-comment-131053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41893#comment-131053">
			November 10, 2003 at 6:04 am</a>		</div>

		<p>First of all, I recall the blessed DOS days, where you added functionality to the operating system by writing memory-resident programs and hooked interrupt vectors. And sooner or later someone would ask for a way to uninstall your TSR from memory, and you would free the memory and restore old interrupt vectors as they were essentially pointers into your code, and if you didn&#8217;t restore them, they would dangle, resulting Undefined Behavior. And if you set the vectors to their old values, all was well. Until someone tried installing your TSR, installing some J. Random Programmer’s TSR, and then removing your TSR. Suddenly, the other TSR would stop working, because, instead of deleting yourself from a chain (a singly-linked list, to be precise), you bit off a whole section of the chain. Several arcane mechanisms were invented so that programs could unload themselves in any order the user pleased, but the majority of TSRs just kept that pointer to the previous in chain. They just compared the current vector pointer to a pointer to themselves, and if not equal, they gave the user “So don’t do that”.</p>
<p>In short, the code shown above does not check if a window was subclassed by someone else on top of you. (That someone else would have to live in the same process as you and the window being subclassed, but you asked what *could* go wrong, and this certainly can.) </p>
<p>And if you live in another process than hwnd, then you would have to jump through several hoops of different sizes so as to inject your code into hwnd’s process’s address space, and then again guard for resubclassing.</p>
<p>And SubclassWindow is an undocumented macro which expands into a call to SetWindowLongPtr, which might mean that the name is deprecated. For the sake of code clarity, I think SetWindowLongPtr should have been used explicitly.</p>
<p>Speaking of which, if we peek into the documentation on SetWindowLongPtr, we will see that upon calling this function we may also want to call SetWindowPos as it flushes the cache which caches some window data.</p>
<p>And by the way, speaking of going wrong, usually it is not a question what *can* go wrong but how do we *know* that something went wrong. And usually we know that something went wrong when an API function returns zero. But zero is a valid return value for SetWindowLongPtr (although maybe not for GWLP_WNDPROC), and for extra protection we might probably want to explicitly implement the error checking procedure prescribed in the documentation:</p>
<p>if (!SetLastError(0)) /* sh!t happened */;<br />
WNDPROC OldWndProc = SetWindowLongPtr(hwnd, GWL_WNDPROC, NewWndProc);<br />
if (NULL == OldWndProc)<br />
{<br />
  DWORD lastError = GetLastError();<br />
  if (0 != lastError)<br />
  {<br />
    /* sh!t happened */<br />
  }<br />
}</p>
<p>And, of course, NewWndProc must be ready to work with hwnd, and CallWindowProc(OldWndProc, …) for everything it doesn’t know how to handle.</p>
<p>And if the hwnd’s message loop is in another thread, then it seems we have a race condition here, because SetWindowLongPtr will change the window proc for hwnd, then, before the return value of SetWindowLongPtr is copied into OldWndProc, the NewWndProc will get called, and will in turn call the thing pointed to by OldWndProc, which is not yet what it was supposed to call. So probably it would be safer to first GetWindowLongPtr(hwnd, GWLP_WNDPROC) into OldWndProc, and only then SetWindowLongPtr(hwnd, GWLP_WNDPROC, NewWndProc).</p>
<p>Am I being too paranoid? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-131063">
				<div id="div-comment-131063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ifeanyi Echeruo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41893#comment-131063">
			November 10, 2003 at 3:14 pm</a>		</div>

		<p>Eye opener. GJ.<br />
&lt;MockEpiphany&gt;So *that&#8217;s* why bug free software is SOOO hard to write the first time round&lt;/MockEpiphany&gt;<br />
Point this article to the next person that says &#8216;testing shmesting we dont need none of that&#8217;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-131073">
				<div id="div-comment-131073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Hanschen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41893#comment-131073">
			November 10, 2003 at 9:46 pm</a>		</div>

		<p>Specifically I&#8217;m sure you&#8217;re going to bring up the subclass chain and how one subclass on top of another with the removal of the other subclass could result in both subclasses in the chain being removed.</p>
<p>The usual fix when in other code is just to say if(GetWindowLong(hWnd, GWL_WNDPROC) != pfnMySubclassProc).. Don&#8217;t drop the subclass, just the functionality inside of your wndproc, and callwindowproc[a/w] the wndproc previously returned.</p>
<p>There are ways to maintain the subclass chain such that you can remove your subclass when another  subclass has been made after it, but that&#8217;s not something I&#8217;m able to discuss.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-407733">
				<div id="div-comment-407733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/08/10/694362.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41893#comment-407733">
			August 10, 2006 at 10:00 am</a>		</div>

		<p>Unhooking by hooking again.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

