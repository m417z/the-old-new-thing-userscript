<html>
<head>
<title>Excursions in composition: Sequential stream concatenation</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Excursions in composition: Sequential stream concatenation</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 22, 2007 / year-entry #102</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">As we've seen a few times already (when building context menus and exploring fiber-based enumeration), composition is an important concept in object-oriented programming. Today, we're going to compose two sequential streams by concatenation. There really isn't much to it. The idea is to take two streams and start by reading from the first one. When...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
As we've seen a few times already
(when
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/10/07/239197.aspx">
building context menus</a> and exploring
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/01/04/346274.aspx">
fiber-based enumeration</a>),
composition is an important concept in object-oriented programming.
Today, we're going to compose two sequential streams by concatenation.
</p>
<p>
There really isn't much to it.
The idea is to take two streams and start by reading
from the first one.
When that runs out, switch to reading from the second one.
Most of this is just typing.
(As usual, I am using plain C++;
in real life, you can save yourselves a lot of typing by
using a class library of your choosing.)
</p>
<p>
We'll start with a base class that does all the boring typing
related to implementing a read-only sequential stream.
</p>
<pre>
class CROSequentialStreamBase : public ISequentialStream
{
public:
 // *** IUnknown ***
 STDMETHODIMP QueryInterface(REFIID riid, void **ppv)
 {
  if (riid == IID_IUnknown || riid == IID_ISequentialStream) {
    *ppv = static_cast&lt;IUnknown*&gt;(this);
    AddRef();
    return S_OK;
  }
  *ppv = NULL;
  return E_NOINTERFACE;
 }

 STDMETHODIMP_(ULONG) AddRef()
 {
  return InterlockedIncrement(&amp;m_cRef);
 }

 STDMETHODIMP_(ULONG) Release()
 {
  LONG cRef = InterlockedDecrement(&amp;m_cRef);
  if (cRef == 0) delete this;
  return cRef;
 }

 // *** ISequentialStream ***
 STDMETHODIMP Write(const void *pv, ULONG cb, ULONG *pcbWritten)
 {
  if (pcbWritten) *pcbWritten = 0;
  return STG_E_ACCESSDENIED;
 }

protected:
 CROSequentialStreamBase() : m_cRef(1) { }
 virtual ~CROSequentialStreamBase() { }

 LONG m_cRef;
};
</pre>
<p>
There's nothing exciting here at all.
In addition to the boring <code>IUnknown</code> methods,
we also implement <code>ISequentialStream::Write</code>
by saying, "Sorry, you can't write to a read-only stream."
The <code>ISequentialStream::Read</code> method
is left unimplemented.
</p>
<p>
We can now cook up our
<code>CConcatStream</code> class:
</p>
<pre>
class CConcatStream : public CROSequentialStreamBase
{
public:
 CConcatStream(ISequentialStream *pstm1,
               ISequentialStream *pstm2);

 // *** ISequentialStream ***
 STDMETHODIMP Read(void *pv, ULONG cb, ULONG *pcbRead);

protected:
 ~CConcatStream();

 bool m_fFirst;
 ISequentialStream *m_pstm1;
 ISequentialStream *m_pstm2;
};

CConcatStream::CConcatStream(ISequentialStream *pstm1,
                             ISequentialStream *pstm2)
 : m_pstm1(pstm1), m_pstm2(pstm2), m_fFirst(true)
{
 assert(pstm1 != pstm2);
 m_pstm1-&gt;AddRef();
 m_pstm2-&gt;AddRef();
}

CConcatStream::~CConcatStream()
{
 m_pstm1-&gt;Release();
 m_pstm2-&gt;Release();
}
</pre>
<p>
Our <code>CConcatStream</code> takes two sequential streams
and saves them in member variables
<code>m_pstm1</code> and <code>m_pstm2</code>.
The real work happens in
<code>ISequentialStream::Read</code>
method:
</p>
<pre>
HRESULT CConcatStream::Read(void *pv, ULONG cb, ULONG *pcbRead)
{
 ULONG cbRead;
 HRESULT hr;
 if (m_fFirst) {
  hr = m_pstm1-&gt;Read(pv, cb, &amp;cbRead);
 } else {
  hr = m_pstm2-&gt;Read(pv, cb, &amp;cbRead);
 }
 if ((FAILED(hr) || cbRead == 0) &amp;&amp; m_fFirst) {
  m_fFirst = false;
  hr = m_pstm2-&gt;Read(pv, cb, &amp;cbRead);
 }
 if (pcbRead) *pcbRead = cbRead;
 return hr;
}
</pre>
<p>
If we are still reading the first stream, then read from the first
stream.
Otherwise, read from the second stream.
If the first stream reaches the end, then switch to the second stream.
(Checking whether the end of the stream has been reached is very
annoying since <code>ISequentialStream</code>
implementations are inconsistent in the way they report
the condition.
Some return <code>S_FALSE</code> on a
partial read;
others return <code>S_OK</code>;
still others return an error code.
We need to check for all of these possibilities.)
</p>
<p>
And that's all there is.
If you give this object two sequential streams, it will compose
those two streams and act like one giant stream that is the
concatenation of the two.
</p>
<p>
Let's illustrate with a simple program:
</p>
<pre>
#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
#include &lt;ole2.h&gt;
#include &lt;assert.h&gt;
#include &lt;shlwapi.h&gt;
#include &lt;tchar.h&gt;

... insert CConcatStream class here ...

void PrintStream(ISequentialStream *pstm)
{
 ULONG cb;
 BYTE buf[256];
 while (SUCCEEDED(pstm-&gt;Read(buf, 255, &amp;cb)) &amp;&amp; cb) {
  buf[cb] = 0;
  printf("%s", buf);
 }
}

int __cdecl _tmain(int argc, TCHAR **argv)
{
 if(SUCCEEDED(CoInitialize(NULL)) {
  IStream *pstm1;
  if (SUCCEEDED(SHCreateStreamOnFile(argv[1], STGM_READ, &amp;pstm1))) {
   IStream *pstm2;
   if (SUCCEEDED(SHCreateStreamOnFile(argv[2], STGM_READ, &amp;pstm2))) {
    CConcatStream *pstm = new CConcatStream(pstm1, pstm2);
    if (pstm) {
     PrintStream(pstm);
     pstm-&gt;Release();
    }
    pstm2-&gt;Release();
   }
   pstm1-&gt;Release();
  }
  CoUninitialize();
 }
 return 0;
}
</pre>
<p>
This program takes two file names on the command line and
creates a stream for each one,
then creates a <code>CConcatStream</code> out of them both,
resulting in a composite stream that produces the contents of
the first file, followed by the contents of the second file.
When you run this program, you should see both files printed
to the screen, one after the other.
</p>
<p>
Okay, there really wasn't much going on here,
but we'll use this as groundwork for next time.
</p>
<p>
Exercise: What is the significance of the assertion
in the constructor?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-484653">
				<div id="div-comment-484653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-484653">
			March 22, 2007 at 10:03 am</a>		</div>

		<p>There&#8217;s no rewind being performed on the streams (not that this is usually desired), so if you pass the same stream in twice you&#8217;re not going to get anything useful when concatenating. Stream2 will EOF as soon as you try to read from it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-484663">
				<div id="div-comment-484663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://forbidden-planet.blogspot.com' rel='external nofollow' class='url'>richard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-484663">
			March 22, 2007 at 11:17 am</a>		</div>

		<p>Never liked assert and other debug macros used during development. If it is important enough to check during development, it is important enough to check at runtime.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-484673">
				<div id="div-comment-484673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.tungware.com' rel='external nofollow' class='url'>Henry Skoglund</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-484673">
			March 22, 2007 at 11:35 am</a>		</div>

		<p>I think what Raymond is trying to uphold with the assertion in the constructor is concat semantics. An example:</p>
<ol>
<li>string c = string(&quot;a&quot;) + string(&quot;b&quot;);</li>
<li>
<p>string c = string(&quot;a&quot;) + string(&quot;a&quot;);</p>
</li>
</ol>
<p>In both cases you&#8217;d expect the string c to be two characters long.</p>
<p>So, if the assertion is not there, an attempt to concatenate two identical streams will not return twice the information.</p>
<p>Rgrds /Henry</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-484683">
				<div id="div-comment-484683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-484683">
			March 22, 2007 at 11:38 am</a>		</div>

		<p>Bob appears correct.. But all the comparison is doing is seeing if the two pointers are the same object (doubting someone overrode the != operator for the base class&#8230;)..</p>
<p>And given the reference counting, that should in theory prevent serious problems on release/use of a now-null obj.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-484723">
				<div id="div-comment-484723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-484723">
			March 22, 2007 at 11:43 am</a>		</div>

		<blockquote><p>
  prevent serious problems on release/use of a now-null obj
</p></blockquote>
<p>I don&#8217;t see that. &nbsp;If pstm1 and pstm2 are the same, there are two AddRef() calls on it and two Release() calls. &nbsp;No problem there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-484743">
				<div id="div-comment-484743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://ericanderson.us/' rel='external nofollow' class='url'>Eric Anderson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-484743">
			March 22, 2007 at 11:58 am</a>		</div>

		<p>Bob is correct.</p>
<p>If pstm1 == pstm2 then running read on the second one will immediately fail because you&#8217;ve already read to EOF on the first one (which is the second one). </p>
<p>&#8212;</p>
<p>Unrelated to the &#8220;challenge&#8221;</p>
<p>Raymond-</p>
<p>Just a quick question, your code will obviously work, but if each stream is 300bytes and I ask to read it in blocks of 255, I will get a read of 255, followed by a read of 45, followed by a read of 255, followed by a read of 45. This seems it would be unexpected behavior, any reason you didn&#8217;t write it to read the 45 from stream one and another 210 from stream two to create reads of: 255, 255, 90?</p>
<div class="post">[<i>You are free to add that feature if you want. It would have distracted from the point of the article. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-484763">
				<div id="div-comment-484763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-484763">
			March 22, 2007 at 12:58 pm</a>		</div>

		<p>I think that this does not fully follow the contract for ISequentialStream::Read</p>
<p>From MSDN:</p>
<p>The actual number of bytes read can be less than the number of bytes requested if an error occurs or if the end of the stream is reached during the read operation&#8230;</p>
<p>This implementation can also retrun less than the number of bytes requested in the middle creating a seam between the concatenated streams. &nbsp;</p>
<div class=post>[<i>&#8220;X if Y&#8221; is not the same as &#8220;X if and only if Y&#8221;. If you read further, you&#8217;ll also see the word &#8220;usually&#8221;. The documentation is just calling out some common cases for you. It&#8217;s trying to go beyond &#8220;just the facts ma&#8217;am&#8221; to also give some programming tips. Apparently people are misinterpreting the helpful tips&#8230; Maybe we should remove them. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-484783">
				<div id="div-comment-484783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">C Gomez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-484783">
			March 22, 2007 at 2:06 pm</a>		</div>

		<p>Please don&#8217;t. &nbsp;They are helpful.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-484703">
				<div id="div-comment-484703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-484703">
			March 22, 2007 at 11:41 am</a>		</div>

		<p>&gt; What is the significance of the assertion in the constructor?</p>
<p>You&#8217;re attempting to enforce the implicit contract that callers should not concatenate a stream with itself directly &#8212; although presumably they could concatenate indirectly via the following:</p>
<p>IStream *pOne = &#8230;;</p>
<p>IStream *pTwo = &#8230;;</p>
<p>CConcatStream *pOneTwo = new CConcatStream(pOne, pTwo); // fine</p>
<p>CConcatStream *pOneTwoOne = new CConcatStream(pOneTwo, pOne); // third stream will be EOF before it&#8217;s even read</p>
<p>Making pTwo be an empty string allows a caller to work around the assert if they really want to.</p>
<p>I have to agree with richard though that this makes a significant difference between runtime and debug checking. &nbsp;Why not check at runtime? &nbsp;Have the constructor set an HRESULT out parameter:</p>
<p>CConcatStream::CConcatStream(</p>
<p>/**/ ISequentialStream *pstm1,</p>
<p>/**/ ISequentialStream *pstm2,</p>
<p>/**/ HRESULT &amp;hr</p>
<p>)</p>
<p>: m_pstm1(pstm1), m_pstm2(pstm2), m_fFirst(true), m_bValid(true)</p>
<p>{</p>
<p>// assert(pstm1 != pstm2);</p>
<p>/**/ if (pstm1 == pstm2) {</p>
<p>/****/ hr = E_INVALIDARG;</p>
<p>/****/ m_bValid = false; &nbsp; </p>
<p>/**/ }</p>
<p>/**/ m_pstm1-&gt;AddRef();</p>
<p>/**/ m_pstm2-&gt;AddRef();</p>
<p>}</p>
<div class="post">[<i>You are free to use whatever error reporting mechanism you want. I didn&#8217;t want to wade into those dangerous waters since it was irrelevant to the article. Note also that the runtime error won&#8217;t catch the example you gave at the top of the comment. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-484753">
				<div id="div-comment-484753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-484753">
			March 22, 2007 at 12:27 pm</a>		</div>

		<p>This bit in QueryInterface() confused me a little:</p>
<p> &nbsp; &nbsp;*ppv = static_cast&lt;IUnknown*&gt;(this);</p>
<p>Since ppv is void **, the pointer returned by static_cast will be converted to void *. So why the intermediate cast to IUnknown *?</p>
<div class="post">[<i>This is a critical detail. See your favorite COM textbook for an explanation. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-484803">
				<div id="div-comment-484803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arlie Davis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-484803">
			March 22, 2007 at 2:43 pm</a>		</div>

		<p>Do people come here *just* to nitpick? &nbsp;Are you the same people who, in college, stuck up their hands at every chance, so they could &quot;correct&quot; the professor on some trivial point, ignoring the real subject?</p>
<p>Isn&#8217;t it obvious that this stream-concatenator is an *EXAMPLE* and not production code that Raymond dug out of SQL or somewhere and held up for your scrutiny? &nbsp;It&#8217;s there for RHETORICAL purposes &#8212; to demonstrate an idea, and to lay the groundwork for future posts.</p>
<p>As he said, this post is about composition &#8212; the fact that you can build a &quot;concatenator&quot; stream on top of 2 (or any number of) streams. &nbsp;It&#8217;s not a forum for you to flex your inner language lawyer, or just to prat on about some totally trivial, irrelevant point.</p>
<p>Just go back to Slashdot, already.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-484813">
				<div id="div-comment-484813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-484813">
			March 22, 2007 at 3:03 pm</a>		</div>

		<p>&gt; This bit in QueryInterface() confused me a </p>
<p>&gt;little:</p>
<p>&gt;</p>
<p>&gt; &nbsp; *ppv = static_cast&lt;IUnknown*&gt;(this);</p>
<p>&gt;</p>
<p>&gt;Since ppv is void **, the pointer returned by </p>
<p>&gt;static_cast will be converted to void *. So why </p>
<p>&gt;the intermediate cast to IUnknown *?</p>
<p>To get the right pointer, because generally</p>
<p>(void*)(static_cast&lt;IUnknown*&gt;(this)) != (void*) this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-484853">
				<div id="div-comment-484853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-484853">
			March 22, 2007 at 10:08 pm</a>		</div>

		<blockquote><p>
  Some return S_FALSE on a partial read; others</p>
<p>  return S_OK; still others return an error</p>
<p>  code.
</p></blockquote>
<p>Valuable information. &nbsp;It also triggered an old joke, &quot;Consistency is the last refuge of an uncreative person.&quot;</p>
<blockquote><p>
  &gt; but if each stream is 300bytes and I ask to</p>
<p>  &gt; read it in blocks of 255, I will get a read</p>
<p>  &gt; of 255, followed by a read of 45, followed</p>
<p>  &gt; by a read of 255, followed by a read of 45.</p>
<p>  &gt; This seems it would be unexpected behavior,
</p></blockquote>
<p>></p>
<blockquote><p>
  It would have distracted from the point of</p>
<p>  the article.
</p></blockquote>
<p>I think Mr. Anderson&#8217;s observation looks right on target, equally valuable. &nbsp;Consumers will have to experiment and/or reverse engineer, to figure out whether a short read is an error, etc.</p>
<p>Sorry if this looks like I knitted something, but the two strands really wanted to be concatenated to each other.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-485653">
				<div id="div-comment-485653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.rotd.org/' rel='external nofollow' class='url'>Andreas Magnusson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-485653">
			March 26, 2007 at 7:56 am</a>		</div>

		<p>Wow, it&#8217;s hardcore to use only one space of indentation! I thought I was tough only using two, but now I see I have a lot to learn!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-486343">
				<div id="div-comment-486343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Harris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-486343">
			March 27, 2007 at 4:31 pm</a>		</div>

		<p>It seems to me that if you attempt to read 0 bytes followed by 10 bytes, it will throw away the entire contents of the first stream and read 10 bytes from the second stream. There should be a test for cb != 0 somewhere. (Probably just after the test for cbRead == 0.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-486333">
				<div id="div-comment-486333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-486333">
			March 27, 2007 at 4:17 pm</a>		</div>

		<p>&#8220;Do people come here *just* to nitpick?&#8221;</p>
<p>Probably. Programmers have to have more than the usual concern for detail. Having said that, it would be nice if it could be switched off for social purposes.</p>
<p>But it can&#8217;t, so I&#8217;ll jump in anyway. The assertion doesn&#8217;t do what some have claimed. Techniques like tear-offs can mean that pstm1!=pstm2 even if both interfaces were torn-off the same object. If you want to test for identity, query for IUnknown first.</p>
<div class=post>[<i>Testing IUnknown still isn&#8217;t good enough. The streams could be connected through ways other than identity. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-487423">
				<div id="div-comment-487423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-487423">
			March 30, 2007 at 7:58 am</a>		</div>

		<p>Since ppv is void **, the pointer returned by static_cast will be converted to void *. So why the intermediate cast to IUnknown *?</p>
<p>[This is a critical detail. See your favorite COM textbook for an explanation. -Raymond]</p>
<p>Or derive the reason from your knowledge of C++ without needing to know anything about COM. &nbsp;The clue is that it&#8217;s static_cast, not reinterpret_cast which is what the implicit coversion would do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488143">
				<div id="div-comment-488143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070322-00/?p=27533#comment-488143">
			April 1, 2007 at 6:00 pm</a>		</div>

		<p>m_fFirst doesn&#8217;t change until after it&#8217;s been tested twice, so you can hoist the second test into the then branch of the first test like so:</p>
<p>HRESULT CConcatStream::Read(void *pv, ULONG cb, ULONG *pcbRead)</p>
<p>{</p>
<p> ULONG cbRead;</p>
<p> HRESULT hr;</p>
<p> if (m_fFirst) {</p>
<p> &nbsp;hr = m_pstm1-&gt;Read(pv, cb, &amp;cbRead);</p>
<p> &nbsp;if (FAILED(hr) || cbRead == 0) {</p>
<p> &nbsp; m_fFirst = false;</p>
<p> &nbsp; hr = m_pstm2-&gt;Read(pv, cb, &amp;cbRead);</p>
<p> &nbsp;}</p>
<p> }</p>
<p> else {</p>
<p> &nbsp;hr = m_pstm2-&gt;Read(pv, cb, &amp;cbRead);</p>
<p> }</p>
<p> if (pcbRead) *pcbRead = cbRead;</p>
<p> return hr;</p>
<p>}</p>
<p>A good optimising compiler will deal with the apparent redundancy, of course, but I still prefer this rewrite:</p>
<p>HRESULT CConcatStream::Read(void *pv, ULONG cb, ULONG *pcbRead)</p>
<p>{</p>
<p> if (m_fFirst) {</p>
<p> &nbsp;ULONG cbRead;</p>
<p> &nbsp;HRESULT hr = m_pstm1-&gt;Read(pv, cb, &amp;cbRead);</p>
<p> &nbsp;if (SUCCEEDED(hr) &amp;&amp; cbRead != 0) {</p>
<p> &nbsp; if (pcbRead) *pcbRead = cbRead;</p>
<p> &nbsp; return hr;</p>
<p> &nbsp;}</p>
<p> &nbsp;m_fFirst = false;</p>
<p> }</p>
<p> return m_pstm2-&gt;Read(pv, cb, pcbRead);</p>
<p>}</p>
<p>(not that I&#8217;ve tested or even compiled this&#8230;)</p>
<p>Then again, I&#8217;d probably reuse m_pstm1 as m_fFirst by setting it to null at EOF.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

