<html>
<head>
<title>It's fine to use fibers, but everybody has to be on board with the plan</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>It&#8217;s fine to use fibers, but everybody has to be on board with the plan</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 26, 2010 / year-entry #66</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We saw fibers a long time ago when I looked at how you can use fibers as a form of coroutines to simplify the writing of enumerators. A fiber is a handy tool, but it's a tool with very sharp edges. Since fibers are promiscuous with threads, you have to be careful when running code...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>We saw fibers a long time ago when I looked at how you can <a href="http://blogs.msdn.com/oldnewthing/archive/2004/12/31/344799.aspx"> use fibers as a form of coroutines to simplify the writing of enumerators</a>. A fiber is a handy tool, but it's a tool with very sharp edges.</p>
<p> Since <a href="http://blogs.msdn.com/oldnewthing/archive/2010/02/25/9969014.aspx"> fibers are promiscuous with threads</a>, you have to be careful when running code that cares about what thread it is running on, because that code may discover that its thread changed out from under it. </p>
<p> For example, critical sections and mutexes remember which thread owns them. If you enter a critical section on a fiber, and then you unschedule the fiber, then reschedule it onto a different thread, and then you leave the critical section, your critical section will end up corrupted because you broke the rule that says that a critical section must be exited on the same thread that entered it. </p>
<p> Actually, you were already in bad shape once you unscheduled the fiber while it owned a resource: An unscheduled fiber cannot release the resource. Unscheduling a fiber is like <a href="http://blogs.msdn.com/oldnewthing/archive/2003/12/09/55988.aspx"> suspending a thread</a>: Anybody who later waits for that fiber to do anything will be waiting for an awful long time, because the fiber isn't running at all. The difference, though, is that the fiber is unscheduled at controlled points in its execution, so you at least have a chance at suspending it at a safe time if you understand what the fiber is doing. </p>
<p> For example, suppose you enter a critical section on a fiber, and then unschedule the fiber. Some time later, a thread (either running as a plain thread or a thread which is hosting a fiber) tries to enter the critical section. One of two things can happen: </p>
<ol>
<li>The thread happens to be the same one     that was hosting the fiber that entered the critical section.     Since a thread is permitted to re-enter a critical section     it had previously acquired,     the attempt to enter the critical section succeeds.     You now have two chunks of code both running inside the     critical section,     which is exactly what your critical section was supposed     to prevent.     Havoc ensues. </li>
<li>The thread happens to be different from the one that was     hosting the fiber that entered the critical section.     That thread therefore blocks waiting for the critical     section to be released.     But in order for that to happen, you have to reschedule the     owning fiber on its original thread so it can exit its     protected region of code and release the critical section. </li>
</ol>
<p> More generally, if you use an object which has thread affinity on a fiber, you are pretty much committed to keeping that fiber on that thread until the affinity is broken. </p>
<p> This affinity can be subtle, because most code was not written with fibers in mind. Any code which calls <code>TlsGetValue</code> has thread affinity, because thread local storage is a per-thread value, not a per-fiber value. (This also applies to moral equivalents to <code>TlsGetValue</code>, like code which calls <code>GetCurrentThreadId</code> and uses it as a lookup key in a table.) You need to use <code>FlsGetValue</code> to get values which follow fibers around. But on the other hand, if the code is not running on a fiber, then you can't call <code>FlsGetValue</code> since there is no fiber to retrieve the value from. This dichotomy means that it's very hard if not impossible to write code that is both thread-safe and fiber-aware if it needs to store data externally on a per-thread/fiber basis. Even if you manage to detect whether you are running on a thread or a fiber and call the appropriate function, if somebody calls <code>ConvertThreadToFiber</code> or <code>ConvertFiberToThread</code>, then the correct location for storing your data changed behind your back. </p>
<p> If you are calling into code that you do not yourself control, then in the absence of documentation to the contrary, you don't really have enough information to know whether the function is safe to call on a fiber. For example, C runtime functions like <code>strcmp</code> have thread affinity (even though there's nothing obviously threadlike about comparing strings) because they rely on the current thread's locale. </p>
<p> Bottom line: (similar to the bottom line from <a href="http://blogs.msdn.com/oldnewthing/archive/2004/12/31/344799.aspx"> last time</a>): You have to understand the code that runs on your fiber, or you may end up accidentally stabbing yourself in the eyeball. </p>
<p> <b>Bonus chatter</b>: Structured exception handling is fiber-safe since it is stack-based rather than thread-based. Note, however, that when you call <code>ConvertThreadToFiber</code>, any active structured exception handling frames on the thread become part of the fiber. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-815333">
				<div id="div-comment-815333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815333">
			February 26, 2010 at 7:01 am</a>		</div>

		<p>And presumably all this is why UMS will replace fibers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815363">
				<div id="div-comment-815363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815363">
			February 26, 2010 at 7:20 am</a>		</div>

		<p>Maybe it&#8217;s just me, but I&#8217;ve never understood what a fiber is actually useful for. &nbsp;From the MSDN page it seems like it is just a mechanism to allow your application to keep track of and schedule its own quasi-threads of execution instead of using the built-in operating system threads. &nbsp;I&#8217;m not sure why I would ever want to do this. &nbsp;I heed all the dire warnings and just stay away from fibers entirely.</p>
<div class=post>[<i><a href="http://blogs.msdn.com/larryosterman/archive/2005/01/05/347314.aspx" rel="nofollow">As Larry Osterman explained in 2005</a>, fibers were created for customers like SQL Server (which calls it &#8220;<a href="http://support.microsoft.com/kb/319942" rel="nofollow">lightweight pooling</a>&#8220;.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815383">
				<div id="div-comment-815383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815383">
			February 26, 2010 at 7:37 am</a>		</div>

		<p>Should I honorably commit suicide for the good of humanity if I am a professional programmer for four years and I never heard of fibers?</p>
<div class=post>[<i>It&#8217;s okay. Fibers are a solution for a niche problem, and changes in techology in the meantime have weakened the advantage they provide. See Larry&#8217;s article I linked to in an earlier comment. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815393">
				<div id="div-comment-815393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815393">
			February 26, 2010 at 7:42 am</a>		</div>

		<p>I&#8217;m sorry to point out that the &#8220;fibers are promiscuous with threads&#8221; link in the article is displaying Apple-affinity and has changed its protocol to iHTTP.</p>
<div class=post>[<i>Fixed. iThanks. (In my mind, iX is an Intel thing. They were doing it long before Apple did. They even tried to trademark the letter &#8220;i&#8221;.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815463">
				<div id="div-comment-815463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815463">
			February 26, 2010 at 9:54 am</a>		</div>

		<blockquote><p>
  &nbsp;For example, C runtime functions like strcmp have thread affinity
</p></blockquote>
<p>Isn&#8217;t it &quot;like stricmp&quot;? strcmp is &quot;simpler&quot;:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/e0z9k731" rel="nofollow">http://msdn.microsoft.com/en-us/library/e0z9k731</a>(VS.80).aspx</p>
<p>&quot;The strcmp functions differ from the strcoll functions in that strcmp comparisons are not affected by locale, whereas the manner of strcoll comparisons is determined by the LC_COLLATE category of the current locale&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815493">
				<div id="div-comment-815493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815493">
			February 26, 2010 at 10:23 am</a>		</div>

		<p>John: Fibers are threads you schedule yourself. If you have lots of calculations that are best implemented with their own stack but don&#8217;t want the overhead of kernel threads, you would use fibers.</p>
<p>For example, let&#8217;s say that you&#8217;ve got some function that wants to enumerate so many elements of some complicated data structure. You could implement this with a function that recursively walks the data structure, yielding a new element at every step. Since it&#8217;s recursive, it needs its own stack, meaning it can&#8217;t be called as a function without running to completion. If you need to be able to consume its output before it finishes, you have to run it on a separate thread. Unfortunately that&#8217;s going to be slow because every time your consumer needs a new item, it will signal an event indicating that it&#8217;s ready for a new item and wait on an event that will indicate when the new item is available. That wait causes the kernel to schedule a new thread on that CPU, which is not necessarily the thread that is producing new items. It&#8217;s much simpler to just tell the CPU to switch stacks (and registers) to the producer function for the brief time required to produce the next item. You could probably do this hundreds of times in the amount of time you would otherwise spend waiting for your thread to be scheduled.</p>
<p>As Raymond said, it&#8217;s not common to be in this scenario. Personally, I prefer to get my fibers from popcorn (see <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2010/02/26/9969665.aspx#comments" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2010/02/26/9969665.aspx#comments</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815543">
				<div id="div-comment-815543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815543">
			February 26, 2010 at 11:55 am</a>		</div>

		<p>Aren&#8217;t fibers actually much simpler than threads? With multiple threads you have to be prepared that anything can happen at any time, but with fibers you can explicitely control when to pass access to shared objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815583">
				<div id="div-comment-815583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815583">
			February 26, 2010 at 6:42 pm</a>		</div>

		<p>re: &#8220;Actually, you were already in bad shape once you unscheduled the fiber while it owned a resource: An unscheduled fiber cannot release the resource. &#8220;</p>
<p>The concept of ownership is not well defined here.</p>
<p>My understanding is that fibers themselves do not own a resource. As you point out, those resources which have some thread affinity must be released on the same thread that acquired them, regardless of which fiber was used. For those resources that do not have affinity, presumably one can release them on an arbitrary thread or fiber.</p>
<p>Fiber resource ownership would have to be implemented by the fiber code itself, not the operating system or other external code. But even then, a sufficiently clever algorithm could set things up so that any fiber could release it even if the one that acquired it was unscheduled or terminated (hey, sounds like a garbage collector fiber).</p>
<div class=post>[<i>True, the &#8220;ownership&#8221; is unclear, but I was talking more informally, where you think of a resource being &#8220;owned&#8221; by the code that acquired it (and therefore needs to be released by some other part of that same code). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815593">
				<div id="div-comment-815593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Colascione</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815593">
			February 26, 2010 at 6:55 pm</a>		</div>

		<p>Of course, if you ensure that all fibers run to completion, and that a given fiber runs on exactly one thread, you&#8217;re in much safer territory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815643">
				<div id="div-comment-815643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815643">
			March 1, 2010 at 2:49 am</a>		</div>

		<p>@Daniel:</p>
<p>Doesn&#8217;t ensuring that a given fibre runs on exactly one thread give up all the advantages of useing fibres?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815663">
				<div id="div-comment-815663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815663">
			March 1, 2010 at 3:33 am</a>		</div>

		<p>@Joe:</p>
<p>Not at all, if you&#8217;re using them as an abstraction mechanism.</p>
<p>Fibres can still be useful on a single thread just as threads can still be useful on a single CPU.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815673">
				<div id="div-comment-815673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815673">
			March 1, 2010 at 7:36 am</a>		</div>

		<p>Few years back while debugging a out process COM server I have seen that my critical sections behaving strangely, that two thread in execution were able to acquire the same critical section, without one of them calling a LeaveCriticalSection, now I seem to think most probably the com server was using fibers to schedule those unit of execution &nbsp;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815693">
				<div id="div-comment-815693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100226-00/?p=14793#comment-815693">
			March 1, 2010 at 9:04 am</a>		</div>

		<p>@Leo: Do you mean running all fibres on a single thread and using them to take advantage of the seperate stacks, rather than taking advantage of the opportunities for concurrency?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

