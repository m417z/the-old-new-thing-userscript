<html>
<head>
<title>Why is the page size on ia64 8K?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why is the page size on ia64 8K?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 8, 2004 / year-entry #331</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>31</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">On x86 machines, Windows chooses a page size of 4K because that was the only page size supported by that architecture at the time the operating system was designed. (4MB pages were added to the CPU later, in the Pentium as I recall, but clearly that is too large for everyday use.) For the ia64,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>On x86 machines, Windows chooses a page size of 4K because that was the only page size supported by that architecture at the time the operating system was designed.  (4MB pages were added to the CPU later, in the Pentium as I recall, but clearly that is too large for everyday use.)</p>
<p> For the ia64, Windows chose a page size of 8K.  Why 8K? </p>
<p> It's a balance between two competing objectives. Large page sizes allow more efficient I/O since you are reading twice as much data at one go.  However large page sizes also increase the likelihood that the extra I/O you perform is wasted because of poor locality. </p>
<p> Experiments were run on the ia64 with various page sizes (even with 64K pages, which were seriously considered at one point), and 8K provided the best balance. </p>
<p> Note that changing the page size creates all sorts of problems for compatibility.  There are large numbers of programs out there that blindly assume that the page size is 4K. Boy are they in for a surprise. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-208333">
				<div id="div-comment-208333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208333">
			September 8, 2004 at 7:05 am</a>		</div>

		<p>IIRC, the page size on the 32 bit alpha port was also 8K.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208343">
				<div id="div-comment-208343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mschaef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208343">
			September 8, 2004 at 7:05 am</a>		</div>

		<p>&quot;There are large numbers of programs out there that blindly assume that the page size is 4K.&quot;</p>
<p>Can you provide an example of how the page size might matter to a program? (other than a debugger, or some kind of system tool, etc.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208353">
				<div id="div-comment-208353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas Allen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208353">
			September 8, 2004 at 7:54 am</a>		</div>

		<p>Yeah, the Alpha port had an 8K page size (like the x86 I think it was the only supported size for the platform).  The R4000 had an adjustable page size from 4K-64K.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208363">
				<div id="div-comment-208363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208363">
			September 8, 2004 at 8:14 am</a>		</div>

		<p>I&#8217;ve heard conflicting reports above whether the OS uses 4MB pages or not.  Some of the reports mention that Win2k will use 4mb pages for some OS structures and code if it is availabe.  Out of curiousity, is this true?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208373">
				<div id="div-comment-208373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208373">
			September 8, 2004 at 8:22 am</a>		</div>

		<p>mschaef: Consider the function in <a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/08/10/211890.aspx" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/08/10/211890.aspx</a> and how it could easily have been written to assume 4K pages.</p>
<p>(I don&#8217;t know the answer to the 4MB page question.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208393">
				<div id="div-comment-208393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.eph3mera.net' rel='external nofollow' class='url'>Matt Povey</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208393">
			September 8, 2004 at 8:25 am</a>		</div>

		<p>Nicholas,</p>
<p>re: the adjustable page size. Why only on the R4000? It strikes me (as a non-developer so excuse stupidity) that a run-time adjustable page size would make sense in terms of being able to configure for certain loads.</p>
<p>For example, would MSSQL, Oracle and Exchange benefit from an adjustable page size for different kinds of loads?</p>
<p>Also, out of interest, I guess the page size on AMD64 is still 4K for compatability? Or has it changed?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208403">
				<div id="div-comment-208403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Barry Tannenbaum</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208403">
			September 8, 2004 at 8:40 am</a>		</div>

		<p>re: run-time adjustable page size </p>
<p>Remember what the page size is used for.  The size of your page effects the number of page table entries that are maintained by the OS.  Since pages are a fixed size, the virtual memory system can make a simple calculation to convert from a virtual address to a physical address.</p>
<p>This isn&#8217;t something that can be changed on a per-process basis.</p>
<p>Unless we go back to segmented architectures, which require more complicated VM systems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208413">
				<div id="div-comment-208413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208413">
			September 8, 2004 at 8:44 am</a>		</div>

		<p>Raymond: That&#8217;s dependent on the allocation granularity, not the page size. The same applies, though, since allocation granularity is also at least theoretically variable from the normal 64KB.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208423">
				<div id="div-comment-208423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Povey</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208423">
			September 8, 2004 at 8:46 am</a>		</div>

		<p>Barry,</p>
<p>Sorry, by run-time, I meant the OS (i.e. configurable at OS startup). I wasn&#8217;t being at all clear there :).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208433">
				<div id="div-comment-208433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miles Archer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208433">
			September 8, 2004 at 8:49 am</a>		</div>

		<p>IIRC, VAX/VMS had an AutoGEN program that would run to determine all sorts of OS parameters such as working set size. I thought it had the page size as a boot time variable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208443">
				<div id="div-comment-208443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas Allen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208443">
			September 8, 2004 at 9:17 am</a>		</div>

		<p>Matt-</p>
<p>The OS is only one part of the equation in most modern virtual memory systems.  A lot of the actual work is done by the processor itself.  In this case, the page size is limited to the sizes the processor gives support for.  Multiple page sizes are not a high demand feature so processor manufacturers generally didn&#8217;t spend the silicon to support them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208463">
				<div id="div-comment-208463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas Allen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208463">
			September 8, 2004 at 9:32 am</a>		</div>

		<p>re: the 4 MB page question</p>
<p>I also don&#8217;t know the level of OS support for these.  But I believe the 4M page support actually started with the i860 and not the Pentium.  Given NT&#8217;s special connection there, anything is possible.  I don&#8217;t know if it was the original i860 (the N10) or the i860 XP (the N11) that debuted jumbo pages though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208483">
				<div id="div-comment-208483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Barry Tannenbaum</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208483">
			September 8, 2004 at 10:40 am</a>		</div>

		<p>re: VAX page size.</p>
<p>Nope.  The VAX had a fixed (anemic) 512 byte pagesize.  Even when the VAX was introduced in 1977 it was considered small.</p>
<p>It&#8217;s been a long time, but I vaguely remember that the OS would bring in a &quot;cluster&quot; of pages on a pagefault.  Perhaps that&#8217;s what you&#8217;re referring too.</p>
<p>There were lots of things that you could change with AUTOGEN which it was generally healthier to leave alone.  My favorite was the one which was specified in units of Furlongs Per Fortnight.  When asked why he specified such an odd unit, the developer replied &quot;If you have to ask, you shouldn&#8217;t be mucking with it.&quot;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208493">
				<div id="div-comment-208493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Filip</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208493">
			September 8, 2004 at 10:51 am</a>		</div>

		<p>Since W2K the OS really uses 4MB pages for the kernel if the computer has more then 127MB (IIRC) of the RAM. You can configure it with LargePageMinimum registry setting (Google for details) to force using it only with more RAM (you still can&#8217;t go under 127MB) or disabling it at all. In WinXP+ the minimum was raised to 255MB (IIRC).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208503">
				<div id="div-comment-208503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulf Vatter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208503">
			September 8, 2004 at 10:53 am</a>		</div>

		<p>Hmm, I guess one of the most important pro points for larger page sizes is still missing: the page table walks become faster and (most importantly) the TLB foot print becomes smaller. This can deliver surprising big speedups on some systems/workloads/etc.</p>
<p>To guess about the 4MB-Pages-in-Win-Question: Of any modern kernel on the i386 arch, I expect it to use superpages to map certain parts of  the kernel area of the virtual address spaces &#8212; it saves page tables, is faster installed than a comparable mapping using 4k pages, plus the advantages above. Since adding support for this is not difficult (uh, well, or at least should not really be difficult if your kernel is designed halfway sensible), I think it is almost safe to say that a modern Win2000 kernel uses superpages.</p>
<p>To use it to map the user area is more difficult and questionable. The idea to mix multiple page sizes is old (I heard a rumor, that already Multics did that and wasn&#8217;t happy with it) &#8212; but unfortunately many problems creep up. As an example: </p>
<p>Upon using a mapping (i.o.w. accessing memory), the cpu (well, most of them) set reference bits. These are evaluated by the OS to decide which page is least likely to be used in the future again. This will be the first page to be swapped out under memory pressure. If you use many large pages, the statistic might become very blurry &#8212; the wrong pages might get paged out, the overall performance of the system might get severely degraded.</p>
<p>I&#8217;m not aware of a OS actually using multiple page sizes for user space (well, since Multics anyway). However, recently this was published:<br />
<br /><a target="_new" href="http://www.cs.rice.edu/~druschel/publications/superpages.pdf" rel="nofollow">http://www.cs.rice.edu/~druschel/publications/superpages.pdf</a><br />
<br /> Didn&#8217;t read it, but was told it was good. Have fun.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208513">
				<div id="div-comment-208513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.valhallalegends.com/skywing' rel='external nofollow' class='url'>Skywing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208513">
			September 8, 2004 at 11:52 am</a>		</div>

		<p>Actually you can use large pages in user space with Windows Server 2003; pass in MEM_LARGE_PAGE for VirtualAlloc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208523">
				<div id="div-comment-208523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.kernelmustard.com' rel='external nofollow' class='url'>Steve Dispensa</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208523">
			September 8, 2004 at 12:31 pm</a>		</div>

		<p>One other consideration is that using large pages causes the OS to use up fewer PTEs.  This was the motivation for the 4MB page stuff AFAIK.</p>
<p>Also, the nonpaged pool is mapped out of large pages, in addition to the kernel and HAL, as filip said.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208533">
				<div id="div-comment-208533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas Allen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208533">
			September 8, 2004 at 1:18 pm</a>		</div>

		<p>Is there even such a thing as PTEs in the 4MB page world?  I thought the PDEs went straight to the page frames.  Page tables as such didn&#8217;t even exist.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208543">
				<div id="div-comment-208543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208543">
			September 8, 2004 at 1:37 pm</a>		</div>

		<p>Oh right that was allocation granularity. But you can easily imagine analogous code to do page computations for VirtualAlloc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208553">
				<div id="div-comment-208553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nikita</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208553">
			September 8, 2004 at 2:04 pm</a>		</div>

		<p>I don&#8217;t understand why file system IO unit has to coincide with the page. At the very least this would make transferring file system images between machines with different page sizes impossible.</p>
<p>In Linux, for example, page size is 4K on x86, but granularity of file system IO depends on a file system type, requests can be smaller or larger than page.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208563">
				<div id="div-comment-208563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208563">
			September 8, 2004 at 2:41 pm</a>		</div>

		<p>A few docs on MSDN still say 64k when they really mean SYSTEM_INFO::dwAllocationGranularity (take VirtualAlloc for instance). I reported it a while ago and it still hasn&#8217;t been fixed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208573">
				<div id="div-comment-208573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony Cox [MS]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208573">
			September 8, 2004 at 3:57 pm</a>		</div>

		<p>nikita: This isn&#8217;t about unbuffered file I/O, it&#8217;s about how hard page faults are serviced. When a page is hard-faulted in, that results in I/O &#8211; the OS has to go to the pagefile and bring in the data to physical memory so the application can work with it. Obviously the whole page has to be filled in such a case. So the page size sets a lower bound on the I/O size used for servicing page faults. Make sense?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208593">
				<div id="div-comment-208593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.kernelmustard.com' rel='external nofollow' class='url'>Steve Dispensa</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208593">
			September 8, 2004 at 6:53 pm</a>		</div>

		<p>The reason that page size tends to match I/O transfer size is because of the way the cache manager works.  Because it&#8217;s a virtual block cache (as opposed to the logical block cache setup used in most cache systems), images are swapped into and out of the cache in page size increments.  Also, when an executable image is loaded, it&#8217;s actually just mapped into the cache and faulted into memory page-by-page. </p>
<p>Not all I/O needs to be page-based, and in fact there is some work being done to make it work better (see a recent thread from Neal Christensen on NTFSD), but regardless, you can see why page size makes such an impact.</p>
<p>FWIW, this is also relevant to network redirectors &#8211; if you map a file over a redirector through the system cache, it&#8217;ll get faulted in and written out a page at a time.  4K, 8K, etc., might not be an optimal minimum transaction size on many networks.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208603">
				<div id="div-comment-208603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.blacksun.org.uk/' rel='external nofollow' class='url'>Paul Walker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208603">
			September 9, 2004 at 2:53 am</a>		</div>

		<blockquote><p>
  Note that changing the page size creates all sorts of<br />
  <br />&gt;problems for compatibility. There are large numbers of<br />
  <br />&gt;programs out there that blindly assume that the page<br />
  <br />&gt;size is 4K. Boy are they in for a surprise.</p>
<p>You mean you actually broke compatibility? Wow. :-) What happened to the bending-over-backwards previously done to make everything (including buggy apps) continue working?</p>
<p>(Not meant in a snarky way, I&#8217;m genuinely curious as to why this particular decision came out this way)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208613">
				<div id="div-comment-208613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208613">
			September 9, 2004 at 7:10 am</a>		</div>

		<p>Because we didn&#8217;t break compatibility.</p>
<p>x86 is still 4K pages.  That hasn&#8217;t changed.  But when you&#8217;re porting to a new processor architecture, lots of things change, among them the page size.</p>
<p>There are ALWAYS bugs found in applications when they are ported.  But the key word here is &quot;PORTED&quot;.  The app&#8217;s source code is cracked open for testing on the new platform, and bugs found are fixed in the application.</p>
<p>But for each platform, compatibility doesn&#8217;t change.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208633">
				<div id="div-comment-208633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208633">
			September 9, 2004 at 7:48 am</a>		</div>

		<p>Larry: x86 applications run on IA64 under emulation. Can the emulation layer simulate 4K pages for them?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208743">
				<div id="div-comment-208743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nikita</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208743">
			September 9, 2004 at 9:46 am</a>		</div>

		<blockquote><p>
  nikita: This isn&#8217;t about unbuffered file I/O,<br />
  <br />&gt; it&#8217;s about how hard page faults are serviced.<br />
  <br />&gt; When a page is hard-faulted in, that results in<br />
  <br />&gt; I/O &#8211; the OS has to go to the pagefile and bring<br />
  <br />&gt; in the data to physical memory so the application<br />
  <br />&gt; can work with it. Obviously the whole page has to<br />
  <br />&gt; be filled in such a case. So the page size sets a<br />
  <br />&gt; lower bound on the I/O size used for servicing<br />
  <br />&gt; page faults. Make sense? </p>
<p>A lot of. For page faults this makes perfect sense.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-208763">
				<div id="div-comment-208763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/carmencr' rel='external nofollow' class='url'>Carmen Crincoli</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208763">
			September 9, 2004 at 11:05 am</a>		</div>

		<p>The OS does use 4MB pages for mapping the kernel, but only when it&#8217;s sure there&#8217;s enough memory.  I think the cut-off is very low however, any more than 24MB or 32MB of memory ensures 4MB pages are used.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-208873">
				<div id="div-comment-208873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-208873">
			September 9, 2004 at 3:11 pm</a>		</div>

		<p>Ben: I believe so.  But I don&#8217;t know how the x86 emulation works on IA64.  I do know that for Alpha, there was a x86 VM emulation layer (WOW32) that emulated the x86 instruction set, including the 4K pages.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-209443">
				<div id="div-comment-209443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan Moore</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-209443">
			September 10, 2004 at 11:04 pm</a>		</div>

		<p>7-max will supposedly let you use 4mb pages on Windows XP/2000 for your user space apps.</p>
<p><a target="_new" href="http://www.7-max.com/" rel="nofollow">http://www.7-max.com/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-212643">
				<div id="div-comment-212643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.blender.org' rel='external nofollow' class='url'>jojo took CS in school</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040908-00/?p=37923#comment-212643">
			September 19, 2004 at 4:30 pm</a>		</div>

		<p>Large Page size increases internal frwagmentation. Variable block sizes, variable this and that (like variable speed drives, for the mac&#8217;s) just makes life harder.. The only reason pages exist is to allow for easier memory protection.. Note, I got this in CS courses, and I don&#8217;t do any systems programming..<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

