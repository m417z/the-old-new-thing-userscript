<html>
<head>
<title>The list of heaps returned by GetProcessHeaps is valid when it returns, but who knows what happens later</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The list of heaps returned by GetProcessHeaps is valid when it returns, but who knows what happens later</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 1, 2011 / year-entry #158</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110701-00/?p=10273</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer had a problem involving heap corruption. In our code, we call Get­Process­Heaps and then for each heap, we call Heap­Set­Information to enable the low fragmentation heap. However, the application crashes due to an invalid heap handle. HANDLE heaps[1025]; DWORD nHeaps = GetProcessHeaps(heaps, 1024); for (DWORD i = 0; i < nHeaps; i++) {...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had a problem involving heap corruption.
</p>
<blockquote CLASS=q>
<p>
In our code, we call
<code>Get&shy;Process&shy;Heaps</code>
and then for each heap, we call <code>Heap&shy;Set&shy;Information</code>
to enable the low fragmentation heap.
However, the application crashes due to an invalid heap handle.
</p>
<pre>
HANDLE heaps[1025];
DWORD nHeaps = GetProcessHeaps(heaps, 1024);
for (DWORD i = 0; i &lt; nHeaps; i++) {
 ULONG HeapFragValue = HEAP_LFH;
 HeapSetInformation(heaps[i], HeapCompatibilityInformation,
                    &amp;HeapFragValue, sizeof(HeapFragValue));
}
</pre>
<p>
My question is, why do we need to allocate an array of size 1025
even though we pass 1024 to <code>Get&shy;Process&shy;Heaps</code>?
</p>
</blockquote>
<p>
Ha, faked you out with that question, eh?
(It sure faked <i>me</i> out.)
</p>
<p>
It's not clear why the code under-reports the buffer size
to <code>Get&shy;Process&shy;Heaps</code>.
So let's ignore the customer's stated question and move on to
the more obvious question:
Why does this code crash due to an invalid heap handle?
</p>
<p>
Well, for one thing,
the code mishandles the case where there are more than 1024
heaps in the process.
But as it happens,
the value returned by <code>Get&shy;Process&shy;Heaps</code>
was well below 1024,
so that wasn't the reason for the crash.
</p>
<p>
Unlike kernel objects, heaps are just chunks of user-mode-managed
memory.
A heap handle is not reference-counted.
(Think about it: If it were, how would you release the reference count?
There is no <code>Heap&shy;Close&shy;Handle</code> function.)
When you destroy a heap, all existing handles to that heap
become invalid.
</p>
<p>
The consequence of this is that there is a race condition inherent
in the use of the <code>Get&shy;Process&shy;Heaps</code> function:
Even though the list of heaps is correct when it is returned to you,
another thread might sneak in and destroy one of those heaps out
from under you.
</p>
<p>
This didn't explain the reported crash, however.
"We execute this code during application startup,
before we create any worker threads,
so there should be no race condition."
</p>
<p>
While it may be true that the code is executed before the program
calls <code>Create&shy;Thread</code>,
a study of the crash dump reveals that some sneaky DLLs had paid
a visit to the process and had even unloaded themselves!
</p>
<pre>
0:001&gt; lm
start    end        module name
75b10000 75be8000   kernel32   (deferred)
77040000 7715e000   ntdll      (deferred)
...

Unloaded modules:
775e0000 775e6000   NSI.dll 
76080000 760ad000   WS2_32.dll
71380000 713a2000   COEC23~1.DLL
</pre>
<p>
"Well, that explains how a heap could have been destroyed from
behind our back.
That <code>COEC23~1.DLL</code> probably created a private heap
and destroyed it when it was unloaded.
But how did that DLL get injected into our process in the first place?"
</p>
<p>
Given the presence of some networking DLLs,
the customer guessed that <code>COEC23~1.DLL</code>
was injected by network firewall security software,
but given that these were Windows Error Reporting crash dumps,
there was no way to get information from the user's machine
about how that <code>COEC23~1.DLL</code> ended up loaded in
the process, and then spontaneously unloaded.
</p>
<p>
Even though we weren't able to find the root cause, we were still
able to make some suggestions to avoid the crash.
</p>
<p>
Instead of trying to convert every heap to a low fragmentation heap,
just convert the process heap.
The process heap remains valid for the lifetime of the process,
so you won't see it destroyed out from under you.
(Or if you do, then you have bigger problems than a crash in
<code>Heap&shy;Set&shy;Information</code>.)
</p>
<p>
In fact, you can remove the code entirely when running on Windows&nbsp;Vista
or higher,
because all heaps default to the low fragmentation heap
starting in Windows&nbsp;Vista.
</p>
<p>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/04/30/10004931.aspx">
Running around and changing settings on heaps you didn't create
is not a good idea</a>.
Somebody else owns that heap; who knows what they're going to do with it?
</p>
<p>
Okay, so if <code>Get&shy;Process&shy;Heaps</code> is so fragile, why does
it even exist?
</p>
<p>
Well, it's not really intended for general use.
It exists primarily for diagnostics.
You might be chasing down a memory corruption bug, so you sprinkle
into your code some calls to a helper function that calls
<code>Get&shy;Process&shy;Heaps</code>
to get all the heaps and then calls
<code>Heap&shy;Validate</code> on each one
to check for corruption.
Or maybe you're chasing down a memory leak in a particular scenario,
so you have a function which calls
<code>Get&shy;Process&shy;Heaps</code> and
<code>Heap&shy;Walk</code> once before
entering the scenario, and then again after the scenario completes,
and then compares the results looking for leaks.
In both cases, you're using the facility for debugging and diagnostic
purposes.
If there's a race condition that destroys a heap while you're studying
it, you'll just throw away the results of that run and try again.
</p>
<p>
<b>Bonus chatter</b>:
While writing up this story,
I went back and did some more Web searching for that mysterious
<code>COEC23~1.DLL</code>.
(Tracking it down is hard because all you really know about the file
name is that it begins with "CO"; the rest is a hashed short file name.)
And I found it:
It's not an antivirus program.
It's one of those "desktop enhancement" programs that injects itself
into every process with the assistance of
<code>App&shy;Init_<wbr>DLLs</code>, or as I prefer to call it
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2007/12/13/6648400.aspx">
<code>Deadlock_<wbr>Or_<wbr>Crash_<wbr>Randomly_<wbr>DLLs</code></a>.
(You may have noticed that I anonymized the program as "CO",
short for <i>Contoso</i>, a fictional company used throughout
Microsoft literature.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-922303">
				<div id="div-comment-922303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RobertWrayUK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110701-00/?p=10273#comment-922303">
			July 1, 2011 at 7:07 am</a>		</div>

		<blockquote><p>
  It&#39;s one of those &quot;desktop enhancement&quot; programs that injects itself into every process
</p></blockquote>
<p>When I see those programs, I tend to think &quot;infests&quot;, rather than &quot;injects&quot;, maybe that&#39;s just me though!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-922343">
				<div id="div-comment-922343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arlie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110701-00/?p=10273#comment-922343">
			July 1, 2011 at 3:47 pm</a>		</div>

		<p>This is bad API design. &nbsp;There should never have been a GetProcessHeaps() function. &nbsp;If you&#39;re trying to track down a problem in memory management, you need to be using a debugger, not using a function which is inherently unreliable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-922353">
				<div id="div-comment-922353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Arlie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110701-00/?p=10273#comment-922353">
			July 1, 2011 at 4:08 pm</a>		</div>

		<p>Yea, but then you may be debugging memory issues caused by a third party dll loaded into your program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-922363">
				<div id="div-comment-922363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GetProcessHeaps</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110701-00/?p=10273#comment-922363">
			July 1, 2011 at 4:12 pm</a>		</div>

		<p>The two arguments are swapped. Should be GetProcessHeaps(1024, heaps);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-922383">
				<div id="div-comment-922383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110701-00/?p=10273#comment-922383">
			July 2, 2011 at 8:01 am</a>		</div>

		<p>Arlie: &quot;[&#8230;] you need to be using a debugger, not using a function which is inherently unreliable.&quot;</p>
<p>There is nothing unreliable about the API. The problem the customer ran into was caused because they applied a single-threaded solution to a problem that was multi-threaded in nature. Your proposed solution to use a debugger instead is along the lines of: &quot;Hi, I&#39;m having issues using X to do Y.&quot; &#8211; &quot;Well, why don&#39;t you use A to do B instead?&quot; Even if the customer had wanted to do B, you are ignoring scenarios in which you cannot install a debugger (e.g. conducting a public beta test).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

