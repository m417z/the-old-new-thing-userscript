<html>
<head>
<title>If there is no 16-bit emulation layer in 64-bit Windows, how come certain 16-bit installers are allowed to run?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If there is no 16-bit emulation layer in 64-bit Windows, how come certain 16-bit installers are allowed to run?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 31, 2013 / year-entry #290</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>37</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Troy Martin is puzzled by the remark in this knowledge base article that says No 16-bit code can run, except for recognized InstallShield and Acme installers (these are hard-coded in Wow64 to allow them to work). I agree that the sentence is rather confusingly written. It says "No 16-bit code can run, except for this...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/07/20/10331787.aspx#10332195"> Troy Martin is puzzled</a> by the remark in  <a href="http://support.microsoft.com/kb/282423"> this knowledge base article</a> that says</p>
<blockquote class="q"><p> No 16-bit code can run, except for recognized InstallShield and Acme installers (these are hard-coded in Wow64 to allow them to work). </p>
</blockquote>
<p> I agree that the sentence is rather confusingly written. It says "No 16-bit code can run, except for this code that runs." </p>
<p> But that's not really what's going on. No 16-bit code running at all. </p>
<p> What the article is trying to say (as briefly as possible) is that Windows has specific knowledge about certain InstallShield and Acme installers that allows it to parse the installer's data files directly. That's what the article is trying to say with the word <i>recognized</i>: When you try to run a 16-bit program, the application compatibility layer looks at the program and says, "Gosh, I wonder if I recognize this program." And maybe the answer is, "Yes, it is InstallShield version 5.0, and I have been taught very specific information about the data files that are used by that version of InstallSheield to the point that I know how to install them <i>without actually invoking InstallShield itself</i>." In that case, instead of <a href="http://www.hark.com/clips/vcfhzqhncj-price-is-right-loser-horn-dot-mp3"> playing a sad sound</a>, the kernel hands the request to the application compatibility engine with the instructions, "You take care of this." </p>
<p> The application compatibility engine then substitutes a 32-bit custom installer that knows how to open, parse, and apply the InstallShield data files. Another way of looking at it is that somebody sat down and ported InstallShield to 32-bit Windows, so that when a user tries to run a 16-bit installer, the request is redirected to the 32-bit version. </p>
<p> You can see that installer in your <code>C:\<wbr>Windows\<wbr>SysWOW64\<wbr>Install&shy;Shield</wbr></wbr></wbr></code> directory. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (37)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1086383">
				<div id="div-comment-1086383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086383">
			October 31, 2013 at 8:11 am</a>		</div>

		<p>&quot;The application compatibility engine then substitutes a 32-bit custom installer that knows how to open, parse, and apply the InstallShield data files. Another way of looking at it is that somebody sat down and ported InstallShield to 32-bit Windows, so that when a user tries to run a 16-bit installer, the request is redirected to the 32-bit version.&quot;</p>
<p>WTF? Why not port InstallSheild to 64-bit Windows, and redirect to the 64-bit version, seeing as this program isn&#39;t even needed on 32-bit Windows?</p>
<p>Yo, dawg. I heard you like multiarch OS, so I put a 32-bit installer in your 64-bit OS, so you can extract your 16-bit Installshield while you load 3 different runtimes into memory and hope your disk stops thrashing before the complexity makes your brain melt out of your ears.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1086403">
				<div id="div-comment-1086403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VinDuv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086403">
			October 31, 2013 at 8:19 am</a>		</div>

		<p>I donâ€™t really understand why allowing a 16-bit installer to run is useful, since most of them will install useless 16-bit binaries&#8230; Or do some 16-bit installers detect that they are running on a 32-bit system and install 32-bit binaries in that case ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1086413">
				<div id="div-comment-1086413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086413">
			October 31, 2013 at 8:23 am</a>		</div>

		<p>@Karellen: Because the 16 bit installer is installing a 32 bit program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1086423">
				<div id="div-comment-1086423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086423">
			October 31, 2013 at 8:24 am</a>		</div>

		<p>Because the installer and target programs are actually 32-bit, but it&#39;s used a 16-bit bootstrapper forever (back in 1995, it would have been useful to say &quot;this program requires 32-bit Windows). MS or InstallShield have just done the work of finally getting rid of the 16-bit part, which is a good demonstration of why it&#39;s taken so long to remove the 16-bit subsystem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1086433">
				<div id="div-comment-1086433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086433">
			October 31, 2013 at 8:25 am</a>		</div>

		<p>One company I worked at (9 years ago) used InstallShield Express to install its (very 32-bit) application. Since this version of InstallShield was discontinued in the first 32-bit version, they used a 16-bit installer to install a 32-bit application.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1086443">
				<div id="div-comment-1086443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086443">
			October 31, 2013 at 10:24 am</a>		</div>

		<p>@Karellen: &quot;WTF? Why not port InstallSheild to 64-bit Windows,&#8230;.&quot;</p>
<p>Umm, because Installshield is not a MS product, so MS cannot port the application? That may be the reason. MS also does not control all the 3rd party vendors (many who have gone out of business over the years) to force them to re-release their older SW with an upgraded Installshield.</p>
<p>So, how else would MS provide a mechanism to allow install of older 32-bit programs (that run just fine on Windows still today) that were shipped with a 16-bit installer?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1086453">
				<div id="div-comment-1086453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086453">
			October 31, 2013 at 10:25 am</a>		</div>

		<p>@Joshua, Mark, others: &quot;The new installer is 32-bit because it&#39;s installing a 32-bit program&quot;</p>
<p>So? You&#39;re writing a program which will run exclusively on 64-bit systems. Surely it doesn&#39;t really matter what it&#39;s doing &#8211; why not build it to run natively on the OS it&#39;s designed for, along with everything else?</p>
<p>Yes, you might be stuck with some legacy 32-bit binaries that you just can&#39;t get rid of for now, but that&#39;s because they&#39;re legacy and you&#39;re stuck with them. Writing new 32-bit-only code is just daft (and has been for many many years now), and writing new 32-bit code for a 64-bit plaform boggles my mind.</p>
<p>(Why is this apparently not the &quot;obvious&quot; Right Thing(tm) to do? What am I missing?)</p>
<div class="post">[<em>The ported installer must be 32-bit so that registry and file system redirection kick in. Otherwise it would be writing 32-bit registry keys into the 64-bit registry and copying 32-bit files into the 64-bit system directory. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1086463">
				<div id="div-comment-1086463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086463">
			October 31, 2013 at 10:28 am</a>		</div>

		<p>@Brian_EE: Ah, my mistake. I though Raymond was saying that someone at MS reverse-engineered the 16-bit InstallShield data format and MS &quot;ported&quot; a new version as part of their AppCompatibility framework. I didn&#39;t realise it was InstallShield that did that.</p>
<p>That makes more sense, thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1086473">
				<div id="div-comment-1086473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mal DeMer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086473">
			October 31, 2013 at 10:38 am</a>		</div>

		<p>@Karellen</p>
<p>There are two programs: the installer and the program to be installed. They are independent of each other, except that the job of one is to install the other. Bit-edness of either probably doesn&#39;t come into play. The installer may not need to be a 64-bit program in order to do its work. In other words, it&#39;s not broke. So why must we fix it, if porting to 64-bits adds no functionality?</p>
<p>Aside from that, most people do not write brand new fresh installers just for fun, if at all. We get them from someone else, many times not as buildable source. If the 32-bit version works fine (and Microsoft takes some pains to make that so), then why switch, barring other circumstances?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1086493">
				<div id="div-comment-1086493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian G.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086493">
			October 31, 2013 at 12:01 pm</a>		</div>

		<p>My personal experience with this problem (it must not have been InstallShield, though) was a number of games from a particular developer/publisher known for a franchise of stellar combat stories. (A mouse just bought them). All of their games in the 32bit era were shipped with 16bit installers and the best way (that I&#39;ve found) to get the games installed now is to search for a fan-made 32bit installer program that does the same job.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1086513">
				<div id="div-comment-1086513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086513">
			October 31, 2013 at 12:10 pm</a>		</div>

		<p>Why can&#39;t you just run the 16-bit emulator from 32-bit Windows in the 32-bit emulator on 64-bit Windows?</p>
<div class="post">[<em>Because that emulator uses v86-mode, which is not supported by 64-bit processors. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1086533">
				<div id="div-comment-1086533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086533">
			October 31, 2013 at 1:59 pm</a>		</div>

		<p>In before &quot;Then why don&#39;t you just ship Windows with DOSBOX?&quot;.</p>
<p>Man, switching the architectures is so annoying! Even if it&#39;s they are basically the same architecture, just with different word size. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1086553">
				<div id="div-comment-1086553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086553">
			October 31, 2013 at 4:18 pm</a>		</div>

		<p>I can imagine some kind of DOS/Win16 emulator based on VirtualPC/Hyper-V technology with seamless integration, but I guess the correct answer is: just stay with x86 version of Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1086563">
				<div id="div-comment-1086563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Yates</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086563">
			October 31, 2013 at 4:35 pm</a>		</div>

		<p>I already knew this, which makes me suspect I learnt about it from this blog some years back (no one else writes about this sort of stuff much anymore). &nbsp;I suppose I could stop being lazy and search the archive myself :P</p>
<p>Still, I liked the discussion, particularly Raymond&#39;s response about why the installer wasn&#39;t ported all the way to 64-bit. &nbsp;I think Wow6432 redirection isn&#39;t all that well understood in the IT community, which is sad. &nbsp;Although I could just add that to the pile of lots of other things IT pros should know but don&#39;t (print queue management, how sessions work in TS, etc).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-1086573">
				<div id="div-comment-1086573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086573">
			October 31, 2013 at 5:42 pm</a>		</div>

		<p>&quot;Because the installer and target programs are actually 32-bit, but it&#39;s used a 16-bit bootstrapper forever (back in 1995, it would have been useful to say &quot;this program requires 32-bit Windows).&quot;</p>
<p>Also because non-x86 version of NT4 and older supported emulating 16-bit x86 applications using NTVDM but did not support emulating x86 Win32 apps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-ludlow odd alt thread-odd thread-alt depth-1" id="comment-1086583">
				<div id="div-comment-1086583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Ludlow' rel='external nofollow' class='url'>John Ludlow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086583">
			October 31, 2013 at 6:04 pm</a>		</div>

		<p>The installer has to be the lowest common denominator in terms of bitness. This is because it needs to be able to check whether the application can run on that system and give an intelligent &quot;um, you can&#39;t install Program X because your computer is 16-bit and doesn&#39;t &nbsp;support it&quot; message rather than falling over in a big heap.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1086603">
				<div id="div-comment-1086603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086603">
			October 31, 2013 at 7:36 pm</a>		</div>

		<p>I would argue that running a 64 bit installer to install a 32 bit app is needlessly complex. &nbsp;Why not have one bitness throughout the stack of an application&#39;s installation and operation?</p>
<p>64 bit apps can work around redirection, but why bother? &nbsp;That&#39;s the sort of inelegant complexity you&#39;re arguing against! &nbsp;You need to describe a concrete advantage of 64 bit, otherwise with just the registry redirection issue we&#39;ve shown that complexity is increased, not decreased, by writing it in 64 bits.</p>
<p>It&#39;s not like these are 64 bit programs with 16 bit installers (in fact, you might be able to come up with an argument that says that writing it in 32 bit helps prevent that horror from coming to pass). &nbsp;The problem can&#39;t repeat exactly at some future time when 32 bit support is deprecated (I anticipate different problems, but not literally the exact same problem such that there is a code re-use win). &nbsp;There is no scenario where this is at all useful without a fully-functional 32 bit system in place. &nbsp;This is inherently a bridging solution, not something that adds to technical debt and cruft.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1086543">
				<div id="div-comment-1086543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086543">
			October 31, 2013 at 2:15 pm</a>		</div>

		<p>Microsoft *could* have implemented NTVDM on Win64 if they wanted. &nbsp;It seems like it wasn&#39;t worthwhile, so they didn&#39;t. &nbsp;Running Win16 programs on x86-64 doesn&#39;t require V86 mode &#8211; 16-bit protected mode descriptors are allowed in a 64-bit LDT or GDT. &nbsp;Only DOS gives problems in that regard.</p>
<p>For DOS programs, which definitely would have required V86 mode, Microsoft could have written an 8086 emulator. &nbsp;If a DOS program switched to protected mode &#8211; say, a DOS/4GW program switched to 32-bit mode &#8211; NTVDM could switch to native execution mode. &nbsp;Returning to V86 mode would instead return to the emulator.</p>
<p>Supporting Win16 would have had a slight performance penalty on all XP64/2003 and Vista 64-bit versions, however, even when no Win16 programs were running. &nbsp;Without NTVDM, NT64 has no need for the LDT. &nbsp;The kernel therefore sets LDTR to 0 at startup and then never bothers to save or restore it during a context switch, saving a bit of time during context switches. &nbsp;If LDTs could be made, all context switches would need to switch out the LDTR value.</p>
<p>This changed in Windows 7, when the user-mode scheduler made the LDT necessary again in 64-bit mode. &nbsp;However, I don&#39;t know the details &#8211; it&#39;s not simply NtSetLdtEntries.</p>
<p>In case you&#39;re curious, this is also why Google&#39;s Native Client requires 64-bit executables in 64-bit Windows even when running 32-bit Chrome. &nbsp;Their security model uses the LDT, and Win64 doesn&#39;t allow that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1086593">
				<div id="div-comment-1086593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086593">
			October 31, 2013 at 7:01 pm</a>		</div>

		<p>@Mal: &quot;In other words, it&#39;s not broke. So why must we fix it?&quot;</p>
<p>It was broke &#8211; that&#39;s the point! The program needed porting; new code needed to be written, and tested, and deployed. It shouldn&#39;t be any harder to write 64-bit code than it is to write 32-bit code. Heck, it should be 99.99% *the same code*, just built with one different compiler option.</p>
<p>(Are Win64 apps not capable of reading/writing the redirected WOW64 keys at all? There is even this ulOptions parameter to RegOpenKeyEx() which has a few bits free&#8230;)</p>
<p>&quot;The installer may not need to be a 64-bit program in order to do its work. [&#8230; Why bother] if porting to 64-bits adds no functionality?&quot;</p>
<p>Because! Because you&#39;re running a 64-bit system, and running apps native to that system is just more elegant. Because complexity is what will be our undoing in the end, and reducing it whereever we can is always a win. Because we can&#39;t rewrite everything from scratch at once, but we can create clean new code one small piece at a time, preventing an increase to our technical debt where we have the opportunity to do so at negligible incremental cost to just piling on more cruft.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1086633">
				<div id="div-comment-1086633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086633">
			November 1, 2013 at 5:45 am</a>		</div>

		<p>@Ens: &quot;You need to describe a concrete advantage of 64 bit,&quot;</p>
<p>OK, this is where I&#39;m lost. How on earth do you come to that conclusion??</p>
<p>This is for code that will ship and only ever run on 64-bit systems. Surely, in that case, writing 64-bit apps should be the default position, and there ought to be a clear, significant, concrete advantage to justify writing and shipping new 32-bit code. (If not in that case, then when &#8211; of all cases &#8211; should 64-bit be the default position?)</p>
<p>&quot;It makes writing to the registry slightly easier&quot; is certainly an advantage in this case. I don&#39;t think that advantage is quite big enough in this case, but that&#39;s based on a flimsy hunch and I&#39;d certainly be willing to change my position given some data. But that&#39;s kind of the point &#8211; surely the burden of proof should be required for 32-bit? Shouldn&#39;t it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1086623">
				<div id="div-comment-1086623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086623">
			November 1, 2013 at 2:57 am</a>		</div>

		<p>Myria, running 16-bit Windows *programs* doesn&#39;t require v86 mode, but running 16-bit Windows probably does. So based on Raymond&#39;s answer, I wouldn&#39;t be surprised if the 16-bit emulator is secretly running a customized Windows 3.1 or something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com0003400182d76c6f odd alt thread-odd thread-alt depth-1" id="comment-1086793">
				<div id="div-comment-1086793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Richard+Russell' rel='external nofollow' class='url'>Richard Russell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086793">
			November 1, 2013 at 10:36 am</a>		</div>

		<p>@Karellen &quot;It shouldn&#39;t be any harder to write 64-bit code than it is to write 32-bit code&quot;. &nbsp;What about assembler code? &nbsp;That&#39;s potentially very difficult to port from 32 to 64 bits (not least because the ABI is so much more intrusive). &nbsp;I have applications that are partly assembler, and I simply wouldn&#39;t attempt it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1086803">
				<div id="div-comment-1086803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086803">
			November 1, 2013 at 10:42 am</a>		</div>

		<p>[Because that emulator uses v86-mode, which is not supported by 64-bit processors. -Raymond]</p>
<p>But the emulator used in NT4 Alpha doesn&#39;t use v86 mode.</p>
<p>The solution to the widening problem is to not assign windows 16 bit handles until they are enumerated. Very few 16 bit apps enumerate below top level of other processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1086843">
				<div id="div-comment-1086843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy77586</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086843">
			November 1, 2013 at 12:43 pm</a>		</div>

		<p>The advantages and disadvantages of 64 bit apps are here.</p>
<p><a rel="nofollow" target="_new" href="http://technet.microsoft.com/en-us/library/dd630755%28v=office.12%29.aspx">technet.microsoft.com/&#8230;/dd630755%28v=office.12%29.aspx</a></p>
<p>I don&#39;t think there are many apps that take advantage of a 64 bit system.</p>
<p>I have the hardware to support 64 bit apps.</p>
<p>I have a dual boot system Windows using XP 32 bit and Puppy Linux 64 bit.</p>
<p>Linux supports and uses all of my 4 Gb of RAM, while XP only uses about 3 &#8211; 3.5 Gb of the RAM.</p>
<p>I write 32 bit assembler programs and writing 64 bit programs is harder to write. </p>
<p>This is based on posts where programmers are asking help converting 32 bit programs to 64 bit.</p>
<p>Take care.</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Andy</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1086643">
				<div id="div-comment-1086643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086643">
			November 1, 2013 at 6:32 am</a>		</div>

		<p>Karellen: The point you&#39;re missing is that this code *already existed*. It&#39;s the 32-bit actual installer that lives alongside the 16-bit installer stub. The only reason Windows has to ship with it is to handle self-extracting single-file installers. Multi-file installers had the 32-bit installer alongside, just without an .EXE extension. In that case, I believe Windows loads the 32-bit installer part from the install source location, rather than from the WindowsSysWOW64_manufacturer_ folder.</p>
<p>The reason for the 16-bit stub&#39;s existence is solely so that, if run on 16-bit Windows, it can throw a message box saying &#39;You need 32-bit Windows for this application&#39;. This is the same rationale for Windows PE EXEs &#8211; 32-bit x86, x86-64, Itanium, ARM, whatever &#8211; all starting with a stub of 16-bit code that DOS would be able to execute, which simply outputs &quot;This program cannot be run in DOS mode&quot;. (The message is of course embedded in the EXE, so it&#39;s up to the compiler/linker author to decide what goes in there.) The same message is embedded in every .NET EXE and DLL as well.</p>
<p>I don&#39;t think it was possible to build a 32-bit PE executable that would be interpreted as a 16-bit NE-format executable by 16-bit Windows. Both formats use the same location for their signature, so a file cannot be both.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1086883">
				<div id="div-comment-1086883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086883">
			November 1, 2013 at 2:20 pm</a>		</div>

		<p>@Karellen: &quot;Writing new 32-bit-only code is just daft (and has been for many many years now)&quot;</p>
<p>Going from 16 to 32 bits was a huge improvement, a quantum leap in programming. Nobody wants to go back, but 20 years later there is still a lot of 16-bit code around.</p>
<p>In contrast, going from 32 to 64 bits yields most of the time absolutely no measurable improvement. Only a tiny fraction of real world applications needs more than 2/4 GB address space; that is why 32-bit code will still be around in 20 years from now. I&#39;ll bet it&#39;ll be around, and running fine, 50 years from now. There is just no compelling reason to waste time on 64-bit code, unless of course you work on satellite imagery and your client is the NASA&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1086943">
				<div id="div-comment-1086943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Edward M. Grant</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086943">
			November 1, 2013 at 11:17 pm</a>		</div>

		<p>&quot;There is just no compelling reason to waste time on 64-bit code&quot;</p>
<p>Exactly what time are you planning to waste on writing 64-bit code, beyond enabling it with a compiler flag?</p>
<p>I was porting code from 32-bit to 64-bit CPUs back in the mid 90s, and the only things we had to fix were in code which converted pointers to ints and back again (I should add that there were good reasons for the code to do that, it wasn&#39;t just for grins). Everything else just worked.</p>
<p>There is no reason I can see to ever write 32-bit x86 code any more unless you really believe people will be running your software on 32-bit machines. My laptop runs Linux and is 64-bit through and through, so it&#39;s kind of sad that my Windows machine is vastly more powerful, yet 90% of the software that runs on it can only use a tiny fraction of its RAM, and games crash due to running out of memory when there are 20+GB free outside that 32-bit straightjacket.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1086953">
				<div id="div-comment-1086953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1086953">
			November 2, 2013 at 1:13 am</a>		</div>

		<p>@Edward: &quot;yet 90% of the software that runs on it can only use a tiny fraction of its RAM, and games crash due to running out of memory&quot;</p>
<p>Yet 99% of the software never needs the full 4 GB of a 32-bit OS, and games crash due to horrible design flaws.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1087043">
				<div id="div-comment-1087043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1087043">
			November 2, 2013 at 8:09 pm</a>		</div>

		<p>&gt;But the emulator used in NT4 Alpha doesn&#39;t use v86 mode.</p>
<p>Yeah, I think if Microsoft thought there was money in it then they would support 16 bit apps in 64 bit operating systems. If you could hook in an exe that got called instead of message boxing to say that 16 bit software isn&#39;t supported, then someone would do it for them.</p>
<div class="post">[<em>There&#39;s more to running 16-bit applications than just writing a CPU emulator. You have all the cross-process interactions to deal with, and that&#39;s quite nontrivial. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1087083">
				<div id="div-comment-1087083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christopher Painter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1087083">
			November 3, 2013 at 9:57 am</a>		</div>

		<p>Nearly twenty year ago I was writing 16bit InstallShield 3.0 installers for Windows 3.1. &nbsp;I then moved on to InstallShield 5.0 and started targeting WFW 3.11 and NT 4.0 and eventually W2K only. &nbsp;I remember there was a workaround for a 32bit machine that had the 16bit NTVDM disabled. &nbsp;You ran the installer on a machine that ran 16bit code, grabed a file in the temp directory and renamed it to .EXE. &nbsp;You could then run this EXE on a 16bit disabled machine and it would work. &nbsp;It&#39;s been a good 12 years since I had to use that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1087113">
				<div id="div-comment-1087113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Semi Essessi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1087113">
			November 4, 2013 at 1:48 am</a>		</div>

		<p>Can&#39;t let this one go past without a comment&#8230;</p>
<p>&quot;Writing new 32-bit-only code is just daft (and has been for many many years now)&quot;</p>
<p>Have you seen the last couple of years worth of VS native tools for windows development? They default to this behaviour, you have to go and add x64 yourself&#8230; its a small effort, but imo another example of the VS guys picking absolutely the wrong defaults for something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1087123">
				<div id="div-comment-1087123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gerben Vos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1087123">
			November 4, 2013 at 3:11 am</a>		</div>

		<p>64-bit pointers are a waste of bits (and cache space, and therefore time) if you are writing a program that doesn&#39;t need much memory. See <a rel="nofollow" target="_new" href="http://www-cs-faculty.stanford.edu/~uno/news08.html">www-cs-faculty.stanford.edu/&#8230;/news08.html</a> , section &quot;A Flame About 64-bit Pointers&quot;. For this reason, Linux has introduced the x32 ABI in their 64-bit OS, so you can use all the new registers but can still use 32-bit pointers. So apparently there is a demand for this. I don&#39;t think Windows has an equivalent ABI yet.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1087133">
				<div id="div-comment-1087133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nugryhorace</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1087133">
			November 4, 2013 at 3:54 am</a>		</div>

		<p>&quot;The reason for the 16-bit stub&#39;s existence is solely so that, if run on 16-bit Windows, it can throw a message box saying &#39;You need 32-bit Windows for this application&#39;&quot;</p>
<p>Or launch the 16-bit version of the setup engine, if the program it&#39;s installing has a version for 16-bit Windows. Judging by the strings in SETUP.EXE, it also checks for MIPS, PPC and Alpha CPU types, and presumably can do the same for them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1087153">
				<div id="div-comment-1087153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1087153">
			November 4, 2013 at 5:13 am</a>		</div>

		<p>&gt; Linux supports and uses all of my 4 Gb of RAM, while XP only uses about 3 &#8211; 3.5 Gb of the RAM.</p>
<p>XP could use up to full 4GB of RAM before SP2 as well, but when DEP support was added in SP2 (which required PAE to be enabled), there were too many incorrectly written drivers (causing BSODs), which is why accessible memory was reduced to only what was mapped below the 4GB barrier.</p>
<p><a rel="nofollow" target="_new" href="http://eternallybored.org/imgs/xp4gb.png">eternallybored.org/&#8230;/xp4gb.png</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1087173">
				<div id="div-comment-1087173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1087173">
			November 4, 2013 at 5:53 am</a>		</div>

		<p>@Anonymous coward: &quot;&#8230;that is why 32-bit code will still be around in 20 years from now.&quot;</p>
<p>We might see 32-bit code forced out. &nbsp;Newer releases of Windows Server allow WoW64 to be uninstalled. &nbsp;Dell has already started releasing dual versions of their management tools to support this scenario.</p>
<p><a rel="nofollow" target="_new" href="http://en.community.dell.com/support-forums/servers/f/956/p/19494291/20311509.aspx#20311509">en.community.dell.com/&#8230;/20311509.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1087193">
				<div id="div-comment-1087193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1087193">
			November 4, 2013 at 6:16 am</a>		</div>

		<p>I am sad that 16bit is now in the past for one reason only. VBDos. Nostalgia perhaps; but it was a beautiful simple way to quickly generate a cmd line app with a nice GUI. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1087833">
				<div id="div-comment-1087833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RCL</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783#comment-1087833">
			November 6, 2013 at 8:36 am</a>		</div>

		<p>Nowadays the performance bottleneck is mostly memory access, and 64 bit has disadvantages in that regard (halved &#8211; at worst &#8211; cache utiliziation due to longer registers). For some platforms, e.g. PowerPC, where shortage of registers was never a problem, running 32-bit code makes perfect sense and is actually a better default option, unless your application is likely to use a lot of memory (or fragment its address space by doing multiple small allocations). For x86-64, 64-bit is normally better due to increased number of registers, but there are still cases when 32-bit code wins.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

