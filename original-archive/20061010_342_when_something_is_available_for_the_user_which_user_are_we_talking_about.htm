<html>
<head>
<title>When something is available for the user, which user are we talking about?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When something is available for the user, which user are we talking about?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 10, 2006 / year-entry #343</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Some people have taken issue with the term WM_USER for the name of the base of the message range that is the province of the window class implementor. (Refresher for those who forget which messages belong to whom.) The complaint is that the user can't use them since they belong to the window class. Aha,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Some people have taken issue with the term <code>WM_USER</code> for the name of the base of the message range that is the province of the window class implementor. (<a href="http://blogs.msdn.com/oldnewthing/archive/2003/12/02/55914.aspx">Refresher for those who forget which messages belong to whom</a>.) The complaint is that the user <strong>can't</strong> use them since they belong to the window class.</p>
<p> Aha, but the real question is, "Who is the user?" In other words, when we say "user-defined", who is the user that's doing the defining? There are four components involved here, and each one gets its own message range. </p>
<ul>
<li>The window manager gets the messages below <code>WM_USER</code>. </li>
<li>The class implementor gets the messages from <code>WM_USER</code>     to <code>WM_APP</code>-1. </li>
<li>The application (more specifically, the code that creates the window)     gets the messages from <code>WM_APP</code> to <code>MAXINTATOM-1</code>. </li>
<li>Everybody else gets the messages from <code>MAXINTATOM</code>     to <code>MAXWORD</code> (via <code>RegisterWindowMessage</code>). </li>
</ul>
<p> Who is the user? </p>
<p> It depends on your point of view. From the window manager's point of view, the class implementor is the user, since that's the code that is using the window manager. </p>
<p> From the class implementor's point of view, it is the application that creates the window that is the user, since that's the code that is using the window class. </p>
<p> And from the application's point of view, it's all that outside code that is the user, since that's the code that is using the application. </p>
<p> Conversely, you can look "up" the list and observe that from each component's point of view, the messages that belong to the components above it are "reserved". From the class implementor's point of view, the window manager messages are reserved. From the application's point of view, the class implementor's messages are reserved. And from the outsider's point of view, the application's messages are reserved. </p>
<p> Let's use one of those generic box diagrams. </p>
<table style="border: solid .75pt black" cellpadding="0" cellspacing="0">
<tr>
<td bgcolor="#E0A0A0" style="padding: 3pt">  Outsiders<br>  </p>
<table style="border: solid .75pt black" cellpadding="0" cellspacing="0">
<tr>
<td bgcolor="#A0A0E0" style="padding: 3pt">   Application<br>   </p>
<table style="border: solid .75pt black" cellpadding="0" cellspacing="0">
<tr>
<td bgcolor="#E0A0E0" style="padding: 3pt">    Class<br>    </p>
<table style="border: solid .75pt black" cellpadding="0" cellspacing="0">
<tr>
<td bgcolor="#E0E0A0" style="padding: 3pt">     Window<br>Manager    </td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
<p> Each box considers the messages that belong to its inner boxes as reserved; conversely, each inner box considers the next outer box as its "user". </p>
<p> Since the <code>winuser.h</code> header file was written by the window manager team, it's not surprising that they look at the world from the window manager's point of view. Therefore, everything outside the window manager is "user-defined" and everything inside the window manager is "reserved". </p>
<p> Of course, if you look at things from the point of view of the class implementor, then the context of the words "reserved" and "user" changes. You can see this, for example, in the dialog box constant <code>DWLP_USER</code>, which is the index of window bytes that can be used by the "user" of the dialog box; i.e., by the application's dialog procedure. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-429303">
				<div id="div-comment-429303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lewis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429303">
			October 10, 2006 at 11:27 am</a>		</div>

		<p>Probably a dumb question, but when creating an MFC CWnd-derived Cass, may we use the WM_USER range in that case? (My understanding is that all MFC windows share a set of common window classes, so it may be that MFC is using WM_USER for it&#8217;s own purposes&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-429323">
				<div id="div-comment-429323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429323">
			October 10, 2006 at 11:49 am</a>		</div>

		<p>Lewis: you have the MFC source code, find out. Look for uses of WM_USER.</p>
<p>Actually MFC sneakily uses messages in the range 0x0360 to 0x037F, which strictly are for the window manager. Reflected messages are up in the 0xBC00 range (the top end of the WM_USER range).</p>
<p>Raymond&#8217;s article doesn&#8217;t quite cover the dialog window procedure which uses a few messages in the WM_USER range, which is why a dialog author who wants to define a custom message needs to avoid the first few message numbers after WM_USER. In effect these should probably be below WM_USER but it&#8217;s too late to change them now since the values are compiled into every Windows program. You can&#8217;t change the definition of WM_USER either for the same reason.</p>
<p>Also, when subclassing a (non-USER) control, you need to know which WM_USER-range messages the control already defines.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-429343">
				<div id="div-comment-429343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429343">
			October 10, 2006 at 1:08 pm</a>		</div>

		<p>Do you know if WM_APP was tacked on at some later date or was it there since the beginning?</p>
<div class=post>[<i><code>WM_APP</code> was added in Windows 95. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-429403">
				<div id="div-comment-429403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlSo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429403">
			October 10, 2006 at 5:16 pm</a>		</div>

		<blockquote><p>
  Raymond&#8217;s article doesn&#8217;t quite cover the dialog window procedure which uses a few messages in the WM_USER range, which is why a dialog</p>
<p>  author who wants to define a custom message needs to avoid the first few message numbers after WM_USER.
</p></blockquote>
<p>Raymond&#8217;s article is relevant to the dialog manager. &nbsp;The dialog manager&#8217;s window proc (DefDlgProc) is associated with the predefined class definition for dialogs. &nbsp;Therefore, its messages are in the range WM_USER to WM_APP-1.</p>
<p>The application provides a DLGPROC callback (called back from within DefDlgProc) to handle dialog box messages. &nbsp;And this is where the confusion comes in. &nbsp;People mistakenly assume that a WNDPROC (associated with a window class) and a DLGPROC (not associated with a window class, but with a single instance of a dialog box) are the same thing. &nbsp;They are not. &nbsp;And if you are going to send/process your own defined messages within a DLGPROC, you better make sure they start at WM_APP.</p>
<p>Of course, you can create a custom class for a dialog box (see <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2003/11/13/55662.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2003/11/13/55662.aspx</a>), in which case you can define your own window proc for the dialog (in place of DefDlgProc). &nbsp;If you did that, then you can use WM_USER-based messages for your own. &nbsp;Just be careful&#8230; if your custom dialog window proc ends up calling DefDlgProc, you&#8217;ll have to make sure your custom window proc&#8217;s messages do not conflict with those that DefDlgProc uses.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-429483">
				<div id="div-comment-429483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429483">
			October 11, 2006 at 8:43 am</a>		</div>

		<p>&gt; Since the winuser.h header file was written by the window manager team</p>
<p>Yeah&#8230; but how can we know that??</p>
<div class="post">[<i>Um, who else would have written the header file for the window manager? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-429533">
				<div id="div-comment-429533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429533">
			October 11, 2006 at 11:17 am</a>		</div>

		<blockquote><p>
  Um, who else would have written the header file for the window manager? -Raymond
</p></blockquote>
<p>Of course&#8230; If I only had known there was a window manager team, who treated the dialog class as just a user&#8230;.</p>
<p>Anyway, your blog is really great, and thanks for your comment!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-429583">
				<div id="div-comment-429583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429583">
			October 11, 2006 at 12:38 pm</a>		</div>

		<p>&quot;From the window manager&#8217;s point of view, the class implementor is the user, since that&#8217;s the code that is using the window manager.&quot; &#8212; I think that cleared it up nicely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-429643">
				<div id="div-comment-429643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429643">
			October 11, 2006 at 8:18 pm</a>		</div>

		<p>[Um, who else would have written the header file for the window manager? -Raymond]</p>
<p>For reference, so we don&#8217;t appear stupid in future, what is the windows dev team structure? There&#8217;s nothing on Google I could find.</p>
<div class=post>[<i>Here are some tips: Header files for shell functions are written by the shell team. Header files for NLS functions are written by the NLS team. Header files for GDI functions are written by the GDI team. I hope you see the pattern. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-429653">
				<div id="div-comment-429653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bjorn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429653">
			October 11, 2006 at 11:09 pm</a>		</div>

		<p>I think the point steveg and Mak are trying to make is that it&#8217;s not obvious from the headers that, e.g, the dialog manager and window manager are run by separate teams and thus have different definitions of &quot;user.&quot; Do we go by file organization? In that case, comctl32 and shellapi would apparently be different organizations, and one &quot;mmsystem&quot; team must be responsible for both the joystick and audio interfaces.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-patriotb odd alt thread-odd thread-alt depth-1" id="comment-429683">
				<div id="div-comment-429683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PatriotB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429683">
			October 12, 2006 at 3:11 am</a>		</div>

		<p>I don&#8217;t believe that the window manager and dialog manager were necessarily &quot;seperate teams&quot;, but from a technology point of view, the dialog box mechanisms are definitely consumers of the window manager mechanisms.</p>
<p>Dialog box messages are an intersting subject. &nbsp;By today&#8217;s rules, the dialog box window procedure should have total control over all messages from WM_USER to WM_APP-1. &nbsp;Specialized dialogs themselves shouldn&#8217;t define any messages in this range.</p>
<p>However, many Windows dialog boxes have custom messges that fall within this range. &nbsp;Examples are the Common Dialogs (which defines some CDM_xxxx messages that start at WM_USER+100), and the Browse for Folder dialog box (which defines some BFFM_xxxx messages that also start at WM_USER+100).</p>
<p>So if a future version of the dialog manager, for some wacky reason, would want to define its own messages in that range (completely within its right), there would be compatibility problems.</p>
<p>Note that earlier I said &quot;by today&#8217;s rules.&quot; &nbsp;At the time the common dialogs were introduced, WM_APP didn&#8217;t yet exist (As Raymond stated, WM_APP wasn&#8217;t introduced until Windows 95). &nbsp;So, since the common dialog designers weren&#8217;t psychic, they introduced messages that technically violate today&#8217;s rules.</p>
<p>But since I doubt the dialog manager will ever see any new messages added (the last one was added for Windows 95 according to winuser.h), it doesn&#8217;t really matter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-429723">
				<div id="div-comment-429723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.explorewindows.com' rel='external nofollow' class='url'>Vipin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429723">
			October 12, 2006 at 10:54 am</a>		</div>

		<p>We all know that WM_APP + n is what should be used by programmers.The problem is that because of microsoft&#8217;s mistake the WM_USER topic seems to keep popping up again and again. It will be good if Microsoft removes the #define of WM_USER from winuser.h in future versions of sdk.</p>
<p>They could have done something like this early in the game, this could have prevented the existence of WM_USER constant and could have served as a warning for programmers.</p>
<p>#ifdef _WIN32_WINNT &lt; xxx</p>
<p>#define WM_USER 0x400</p>
<p>#endif</p>
<div class=post>[<i>And then you get &#8220;undefined symbol: WM_USER&#8221; errors when you include commctrl.h? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-429943">
				<div id="div-comment-429943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.explorewindows.com' rel='external nofollow' class='url'>Vipin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429943">
			October 12, 2006 at 4:40 pm</a>		</div>

		<p>One thing is that the message based architecture is not a scaleable solution. The best messaging solution would be to use RegisterWindowMessage(&#8230;) because that brings uniqueness to certain extent.</p>
<p>Coming back to WM_USER + x messages, these are meant for people who are writting the controls from scratch(without deriving from an existing controls).That will be a small segment of the entire programming community(5%??) who create and sell custom controls from scratch without using the existing controls that MS ships or building on top of the existing controls. Since MS messed with the WM_USER range, nobody knows what message will work when creating a subclassed control, so it is better off using WM_APP range all the time. well WM_APP range causes problem if somebody is going to derive from a control a third party vendor created and that is life,live with hit and trial.</p>
<p>So, I guess it is time to move on to property based programming as in wpf(.net 3.0) instead of sending around windows messages to trigger something to happen in a control, application, etc and hoping it won&#8217;t break.</p>
<div class=post>[<i>Less than 5% of the entire programming community uses the windows.h header file in the first place, so changes to winuser.h will miss 95% of the community anyway. Of the people that do use windows.h, I suspect more than 5% of them create their own custom controls. Look at any introductory Win32 programming book. They nearly all start with RegisterClass and WndProc. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-429883">
				<div id="div-comment-429883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.explorewindows.com' rel='external nofollow' class='url'>Vipin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429883">
			October 12, 2006 at 2:00 pm</a>		</div>

		<p>It will be better if commctrl.h is fixed by hardcoding it.</p>
<p>A quick </p>
<p>findstr /I /M WM_USER *.h* in the sdk include directory gave this:-</p>
<p>AclUI.h</p>
<p>AdsProp.h</p>
<p>CommCtrl.h</p>
<p>CommDlg.h</p>
<p>Cpl.h</p>
<p>Dispdib.h</p>
<p>FtsIface.h</p>
<p>inked.h</p>
<p>MAPIWz.h</p>
<p>msoeapi.h</p>
<p>OleCtl.h</p>
<p>PrSht.h</p>
<p>Richedit.h</p>
<p>ShellAPI.h</p>
<p>ShlObj.h</p>
<p>Smx.h</p>
<p>Tapi.h</p>
<p>Umx.h</p>
<p>Vfw.h</p>
<p>WFExt.h</p>
<p>WinUser.h</p>
<p>WinWlx.h</p>
<p>Fixing up a few header files is better than teaching millions of programmers &nbsp;and fixing subtle bugs for their mistakes. New programs using latest sdk headers will not be able to use the macro or may be there should be a DEPRECATE macro which should wrap up the WM_USER macro, so that already written programs can get compiled by specifying the bypass macro.</p>
<p>From:-</p>
<p>#define TB_ENABLEBUTTON &nbsp; &nbsp; &nbsp; &nbsp; (WM_USER + 1)</p>
<p>#define TB_CHECKBUTTON &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(WM_USER + 2)</p>
<p>#define TB_PRESSBUTTON &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(WM_USER + 3)</p>
<p>#define TB_HIDEBUTTON &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (WM_USER + 4)</p>
<p>To:-</p>
<p>#define TB_ENABLEBUTTON &nbsp; &nbsp; &nbsp; &nbsp; 0x401</p>
<p>#define TB_CHECKBUTTON &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0x402</p>
<p>#define TB_PRESSBUTTON &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0x403</p>
<p>#define TB_HIDEBUTTON &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0x404</p>
<div class=post>[<i>Okay, so you get rid of WM_USER. How should people define their custom messages? Should they just hard-code the number 0x0400? How does that fix anything? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-429933">
				<div id="div-comment-429933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429933">
			October 12, 2006 at 3:09 pm</a>		</div>

		<p>You must remember that before WM_APP was invented, WM_USER *was* for both applications and window classes. This however led to conflicts and so WM_APP was invented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-patriotb even thread-even depth-1" id="comment-429983">
				<div id="div-comment-429983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PatriotB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429983">
			October 13, 2006 at 1:44 am</a>		</div>

		<p>Vipin, WM_USER isn&#8217;t just for controls, it&#8217;s for any custom window classes that you own the WndProc for. &nbsp;An app&#8217;s &quot;main window&quot; class is a good example.</p>
<p>There&#8217;s nothing wrong with WM_USER and surely no need to deprecate it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-429993">
				<div id="div-comment-429993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cmil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-429993">
			October 13, 2006 at 2:25 am</a>		</div>

		<p>&quot;There&#8217;s nothing wrong with WM_USER and surely no need to deprecate it.&quot;</p>
<p>Agreed. In fact you can view the WM_APP range as being a subset of the WM_USER range &#8211; i.e. WM_APP is just a marker for the end of the range of messages reserved for Windows&#8217; own controls (which are themselves &#8216;users&#8217; of the window manager). If you&#8217;re not doing anything with the standard windows controls there is no reason not to use WM_USER.</p>
<p>It is also not the OS&#8217;s responsibility to decide which messages in the WM_USER &#8211; MAXINTATOM-1 range should be used for custom controls. The sensible approach is to always start at WM_USER and increment by one for every custom message you need. Then &#8216;reserve&#8217; a hundred or so more for future use, so that &#8216;users&#8217; of your control know which messages they can safely use for subclassing.</p>
<p>With a possible 48128 messages, scalability shouldn&#8217;t be an issue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-430073">
				<div id="div-comment-430073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.explorewindows.com' rel='external nofollow' class='url'>Vipin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-430073">
			October 13, 2006 at 9:59 am</a>		</div>

		<p>Patriot,</p>
<p> &nbsp; &nbsp; &nbsp; what if you/someone uses SendMessageToDescendants(&#8230;)?</p>
<p>That said, the same issue would arise had we *all* started used WM_APP + n messages, in which case controls from third party vendors could conflict as a result.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-430253">
				<div id="div-comment-430253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tossing Figures</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-430253">
			October 13, 2006 at 6:07 pm</a>		</div>

		<blockquote><p>
  Less than 5% of the entire programming community uses the windows.h header file
</p></blockquote>
<p>I would guess more than 95% of windows c/c++ programmers include windows.h, and 95% of the non c/c++ programmers don&#8217;t subclass.</p>
<p>How many programmeras are aware that a winclass derived from a winclass can result in message conflicts?</p>
<p>Btw, does this problem include subclassing from controls like STATIC, BUTTON and similar?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-430263">
				<div id="div-comment-430263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-430263">
			October 13, 2006 at 6:13 pm</a>		</div>

		<p>It seems to me that the Obvious Solution is to add WM_CLASS as a synonym for WM_USER and deprecate WM_USER. &nbsp;That way it would be clear which user the ranges are reserved for; below WM_CLASS is for the window manager, WM_CLASS to WM_APP is for the window class, WM_APP to MAXINTATOM is for the application that creates the window. &nbsp;(Are there problems with libraries and applications stepping on each others&#8217; toes in the WM_APP space? &nbsp;Does that need to be partitioned into WM_LIB and WM_APP? &nbsp;Though that could get messy if you end up with libraries stepping on each others&#8217; toes.)</p>
<p>This doesn&#8217;t handle creating a class as a subclass of another class, but that&#8217;s inherited from the current way of doing things, and it could be handled by having controls document a &quot;I don&#8217;t plan to use anything above this&quot; value in the WM_CLASS space. &nbsp;(Partitioning that one into WM_CLASS and WM_SUBCLASS would only work until somebody wants to subclass an already-subclassed one.)</p>
<p>Besides &quot;Once it&#8217;s there it&#8217;s impossible to get rid of it&quot;, is there any reason why something like this hasn&#8217;t been / couldn&#8217;t be done?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-430283">
				<div id="div-comment-430283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cmil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-430283">
			October 13, 2006 at 6:47 pm</a>		</div>

		<p>Adding a WM_CLASS and deprecating WM_USER would simply add yet another value for people to remember and be confused by. And how many developers are still using old headers and would simply continue to use WM_USER anyway?</p>
<p>The point is that if people had been sensible from the word go there would never have been any need for anything other than a single range of user messages, from WM_USER to MAXINTATOM-1. Provided everybody documents which ranges they use for controls / subclassing etc. there would never be any problem.</p>
<p>I suspect originally WM_APP really was just a declaration that microsoft would not use messages below that value for standard windows controls. The notion of a separate &quot;application&quot; range sounds to me more like an attempt to make life easier for developers who were already misusing WM_USER, although it does perhaps make more sense. But I wonder how many custom controls (that register their own classes) technically break the rules by using messages in the WM_APP range?</p>
<p>&quot;Btw, does this problem include subclassing from controls like STATIC, BUTTON and similar?&quot;</p>
<p>No, as long as you use WM_APP and greater you are guaranteed to be safe &#8211; unless somebody else has already subclassed the button you&#8217;re subclassing, in which case you have to know which messages they&#8217;ve already used. Or you could use RegisterWindowMessage().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-430293">
				<div id="div-comment-430293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cmil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-430293">
			October 13, 2006 at 6:53 pm</a>		</div>

		<p>Sorry, &quot;would not use messages below that value&quot; should have been &quot;would ONLY use messages below that value&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-patriotb odd alt thread-odd thread-alt depth-1" id="comment-430893">
				<div id="div-comment-430893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PatriotB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061010-06/?p=29433#comment-430893">
			October 17, 2006 at 2:12 am</a>		</div>

		<p>@Vipin: &quot;what if you/someone uses SendMessageToDescendants(&#8230;)?&quot;</p>
<p>I suspect that cases like this are what RegisterWindowMessage is for: you can&#8217;t use a WM_USER message because you aren&#8217;t the owner of the wndclass, and you can&#8217;t use a WM_APP message because you aren&#8217;t the creator of the window. &nbsp;For example, the &quot;TaskbarCreated&quot; message that the shell uses falls into this category.</p>
<p>@cmil: &quot;I suspect originally WM_APP really was just a declaration that microsoft would not use messages below that value for standard windows controls. The notion of a separate &quot;application&quot; range sounds to me more like an attempt to make life easier for developers who were already misusing WM_USER&quot;</p>
<p>I don&#8217;t quite agree here; I think WM_APP takes the place of having to use RegisterWindowMessage all over the place. &nbsp;I&#8217;ve primarily used WM_APP in one case: where I have a dialog box, and I need to send a message to the dialog box procedure. &nbsp;I&#8217;m not supposed to use a WM_USER message because those are reserved for the dialog class itself, so prior to WM_APP my only option would be to use RegisterWindowMessage.</p>
<p>The other place it makes sense to use WM_APP is when sending messages to windows you created, whose wndclass you don&#8217;t own, but that you have subclassed. &nbsp;In this case it&#8217;s usually perfectly safe to send a WM_APP because you will catch it during your subclassed wndproc; the window class&#8217;s original wndproc itself shouldn&#8217;t ever need to process anything in the WM_APP range.</p>
<p>(The only time that you might run into trouble, as the window creator, is if the window gets subclassed a second time without your knowledge. &nbsp;For example, a plugin that runs in your process that decides to subclass some of your controls.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

