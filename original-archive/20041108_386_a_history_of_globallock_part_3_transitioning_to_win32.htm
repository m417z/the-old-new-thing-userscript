<html>
<head>
<title>A history of GlobalLock, part 3: Transitioning to Win32</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A history of GlobalLock, part 3: Transitioning to Win32</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 8, 2004 / year-entry #387</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Now that you know how the 16-bit memory manager handled the global heap, it's time to see how this got transitioned to the new 32-bit world. The GlobalAlloc function continued to emulate all its previous moveability rules, but the return value of GlobalAlloc was no longer a selector since Win32 used the processor in "flat...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Now that you know how the 16-bit memory manager handled the global heap, it's time to see how this got transitioned to the new 32-bit world.</p>
<p> <a href="http://msdn.microsoft.com/library/en-us/memory/base/globalalloc.asp"> The <code>GlobalAlloc</code> function</a> continued to emulate all its previous moveability rules, but the return value of <code>GlobalAlloc</code> was no longer a selector since Win32 used the processor in "flat mode". </p>
<p> This means that the old trick of caching a selector and reallocating the memory out from under it no longer worked. </p>
<p> Moveability semantics were preserved.  Memory blocks still had a lock count, even though it didn't really accomplish anything since Win32 never compacted memory.  (Recall that the purpose of the lock count was to prevent memory from moving during a compaction.) </p>
<p> Moveable memory and locking could have been eliminated completely, if it weren't for <a href="http://msdn.microsoft.com/library/en-us/memory/base/globalflags.asp"> the <code>GlobalFlags</code> function</a>.  This function returns several strange bits of information&mdash;now entirely irrelevant&mdash;the most troubling of which is the lock count.  Consequently, the charade of locking must be maintained just in case there's some application that actually snoops at the lock count, or a program that expected <a href="http://msdn.microsoft.com/library/en-us/memory/base/globalrealloc.asp"> the <code>GlobalReAlloc</code> function</a> to fail on a locked block. </p>
<p> Aside from that, moveable memory gets you nothing aside from overhead. </p>
<p> <a href="http://msdn.microsoft.com/library/en-us/memory/base/localalloc.asp"> The <code>LocalAlloc</code> function</a> also carries the moveability overhead, but since local memory was never passed between DLLs in Win16, the local heap functions don't carry as much 16-bit compatibility overhead as the global heap functions. <code>LocalAlloc</code> is preferred over <code>GlobalAlloc</code> in Win32 for that reason.  (Of course, many functions require a specific type of memory allocation, in which case you don't have any choice. The clipboard, for example, requires moveable global handles, and COM requires use of the task allocator.) </p>
<p> <a href="http://blogs.msdn.com/oldnewthing/archive/2004/11/09/254441.aspx"> Next time</a>, an insight into how locking is implemented (even though it doesn't do anything). </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-223513">
				<div id="div-comment-223513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-223513">
			November 8, 2004 at 7:33 am</a>		</div>

		<p>QUOTE<br />
<br />Consequently, the charade of locking must be maintained just in case there&#8217;s some application that actually snoops at the lock count, or a program that expected the GlobalReAlloc function to fail on a locked block.<br />
<br />/QUOTE</p>
<p>Does that mean that the Win32 team tried to remove locks and found that it broke some applications, or did they decide to emulate them from the start.</p>
<p>How much of this stuff is determined in the design phase, and how much gets found in testing? Just curious really.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223573">
				<div id="div-comment-223573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-223573">
			November 8, 2004 at 9:30 am</a>		</div>

		<p>Why doesn&#8217;t Win32 compact memory? The application would be able to allocate and free big GMEM_MOVEABLE blocks and not worry about fragmentation of the address space.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223583">
				<div id="div-comment-223583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-223583">
			November 8, 2004 at 9:39 am</a>		</div>

		<p>I would imagine that, with rare exception, fragmentation isn&#8217;t an issue anymore. Each process has 4G, after all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223603">
				<div id="div-comment-223603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-223603">
			November 8, 2004 at 9:59 am</a>		</div>

		<p>If moveable memory is a thing of the past, what about the clipboard still requires the GMEM_MOVEABLE flag?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223613">
				<div id="div-comment-223613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-223613">
			November 8, 2004 at 10:21 am</a>		</div>

		<p>Because there are apps that crash if the memory isn&#8217;t moveable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223643">
				<div id="div-comment-223643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spacebunny.xepher.net/' rel='external nofollow' class='url'>KJK::Hyperion</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-223643">
			November 8, 2004 at 11:06 am</a>		</div>

		<p>The clipboard doesn&#8217;t use the global heap anymore &#8211; nowadays, it&#8217;s based on the much more mondane shared memory. I guess that, since shared memory requires a nearly identical allocate/lock sequence, there would have been no value in devising an alternate API</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223683">
				<div id="div-comment-223683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrei</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-223683">
			November 8, 2004 at 12:11 pm</a>		</div>

		<p>Cooney, </p>
<p>each Win32 user process has 4Gb only on AMD64 boxes when they are run in WOW64. Normally, they have 2Gb or 3Gb of addressable virtual memory depending on whether /3Gb switch was used or not.</p>
<p>Aside from that, fragmentation is an issue, you can have problems with fragmentation of the Win32 heap and fragmentation of virtual memory, depending on what memory manager you&#8217;re using.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223703">
				<div id="div-comment-223703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nate</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-223703">
			November 8, 2004 at 1:32 pm</a>		</div>

		<p>Dare I ask what about non movable memory crashes certain programs?  I cannot fathom what sort of practice would result in that, unless someone did something absurd like checking for the flags and deliberately crashing if they were not there.</p>
<p>Then again, I bet Raymond has seen it all by now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223713">
				<div id="div-comment-223713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-223713">
			November 8, 2004 at 1:49 pm</a>		</div>

		<p>Some programs make undocumented assumptions about how moveable memory happens to be implemented.  Here&#8217;s an MSDN article that describes the internals of the heap manager:</p>
<p><a target="_new" href="http://msdn.microsoft.com/library/en-us/dngenlib/html/msdn_heapmm.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/dngenlib/html/msdn_heapmm.asp</a></p>
<p>Instead of using the documented GlobalLock function, those bad apps reach in and dereference the global handle table directly.</p>
<p>You can see what goes wrong if the memory is not actually moveable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223593">
				<div id="div-comment-223593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-223593">
			November 8, 2004 at 9:54 am</a>		</div>

		<p>Ivo: You&#8217;d have to do more than that. You would have to make sure *every* allocation (especially the small ones) is allocated moveable so that a compaction will move it. Do you really want to go back to the world of locking all memory before using it (and remembering to unlock it when done)? </p>
<p>For one thing, it means no more &quot;new&quot; operator (since &quot;new&quot; allocates non-moveable memory). I doubt many programs would be willing to give up &quot;new&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223753">
				<div id="div-comment-223753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.winsper.org.uk' rel='external nofollow' class='url'>Darren Winsper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-223753">
			November 9, 2004 at 3:06 am</a>		</div>

		<p>Andrei: isn&#8217;t the 4GB addressable area going to cause backwards compatibility problems for Win32 processes?  The reason they&#8217;re not given 3GB by default in 32-bit is because programmers were always assuming a 2GB stack i.e. the highest bit being zero.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223763">
				<div id="div-comment-223763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-223763">
			November 9, 2004 at 3:28 am</a>		</div>

		<p>Darren</p>
<p>IIRC, only applications which are marked &quot;large address aware&quot; are give 4GB on AMD64.</p>
<p><a target="_new" href="http://www.amd.com/us-en/assets/content_type/DownloadableAssets/Expand_Memory_of_32-bit_App_-_Microsoft_4GT-_6204.pdf" rel="nofollow">http://www.amd.com/us-en/assets/content_type/DownloadableAssets/Expand_Memory_of_32-bit_App_-_Microsoft_4GT-_6204.pdf</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223783">
				<div id="div-comment-223783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chep</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-223783">
			November 9, 2004 at 6:54 am</a>		</div>

		<p>Cooney: let me tell you that CAD/CAM applications are certainly starting to feel some pressure from 2GB/4GB heap fragmentation issues.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-224383">
				<div id="div-comment-224383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.foxyshadis.com' rel='external nofollow' class='url'>foxyshadis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041108-00/?p=37363#comment-224383">
			November 10, 2004 at 9:42 pm</a>		</div>

		<p>Specialized apps like that should build their own memory manager. There&#8217;s no reason to mess with one that does the right thing in most circumstances unless there&#8217;s a major bug or it&#8217;s being redesigned from scratch. MS might work with them, but generally won&#8217;t rewrite its OS for one or two small segments of the population.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

