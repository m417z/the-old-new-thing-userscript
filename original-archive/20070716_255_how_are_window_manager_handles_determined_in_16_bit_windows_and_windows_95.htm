<html>
<head>
<title>How are window manager handles determined in 16-bit Windows and Windows 95?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How are window manager handles determined in 16-bit Windows and Windows 95?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 16, 2007 / year-entry #256</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">(Prefatory remark: The following information is of the "behind the scenes" nature and does not constitute formal documentation. Actually, nothing I write counts as formal documentation, so I shouldn't have needed to write that, but people sometimes intentionally play stupid and interpret all forms of the future tense as if I were making some sort...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>(Prefatory remark: The following information is of the "behind the scenes" nature and does not constitute formal documentation. Actually, <strong>nothing</strong> I write counts as formal documentation, so I shouldn't have needed to write that, but people sometimes <a href="http://blogs.msdn.com/oldnewthing/archive/2006/11/08/1035971.aspx#comments"> intentionally play stupid</a> and interpret all forms of the future tense as if I were making some sort of "guarantee" on behalf of Microsoft Corporation. I assure you that I have no such authority! It's times like that that I'm tempted to just give up writing.)</p>
<p> Let's start with 16-bit window handles. Those are simple: They are just pointers into the window manager's data segment, cast to the <code>HWND</code> data type. Since the window manager had a single 64KB data segment, all of these pointers were 16-bit values. </p>
<p> In Windows&nbsp;95, the window manager moved several categories of objects out of the default data segment into their own custom heaps. (And those were 32-bit heaps so they could be bigger than 64KB.) Window classes, menus, and windows each got their own "big" heap. There may have been other categories of objects that moved out of the default data segment, but those are the ones I remember. </p>
<p> But since Windows&nbsp;95 still had to support 16-bit programs, it needed a way to return 16-bit window handles back to those programs. To do this, the window manager allocated the memory in the 32-bit heap as "movable", which <a href="http://blogs.msdn.com/oldnewthing/archive/2004/11/08/253891.aspx"> as we learned some time ago</a> isn't actually movable. The purpose of allocating it as movable memory was to get that local memory handle, the <code>HLOCAL</code>. </p>
<p> No, wait, but that doesn't actually solve the problem, because a local handle in a 32-bit heap is still a 32-bit value. How do we get a 16-bit value out of that? </p>
<p> When the window manager created the 32-bit heap, it asked the 32-bit heap manager very nicely if it could give back 16-bit handles instead of 32-bit handles. The heap manager did this by pre-allocating a 64KB block of memory and allocating its handles out of that memory block, using the offset into the block as the handle. </p>
<p> Since each entry in the handle table is four bytes (a 32-bit pointer), the 64KB handle table can hold up to 16384 entries. This is why the documentation for <code>CreateWindowEx</code> includes the following remark: </p>
<blockquote class="q"><p> <b>Windows 95/98/Me</b>: The system can support a maximum of 16,384 window handles. </p>
</blockquote>
<p> Actually, it was a little bit less than that because some of the entries were lost to bookkeeping overhead. For example, the handle value of zero could not be used because that would be confused with <code>NULL</code>. </p>
<p> Now, you may have asked, "Well, if all the window handles are multiples of four, why not divide by four and then you can get the full range of 65535 window handles?" </p>
<p> Well, remember that <a href="http://blogs.msdn.com/oldnewthing/archive/2005/03/15/395866.aspx"> Windows&nbsp;3.1 could handle only around 700 windows</a>. Increasing this to 16,384 was enormous progress already. I mean, it's more than 23 times as much as what you had before. A hundred windows was already considered excessive at the time, so the window manager already could accommodate 163 abusive, badly-written programs. There's really no reason to bump that up to 655 badly-written programs. That'd just be encouraging programs to behave badly. </p>
<p> Both the 16-bit Windows technique and the Windows&nbsp;95 technique did suffer from the problem of handle re-use. When a window is destroyed, its memory is freed (as well as its handle on Windows&nbsp;95). When a new window is created, there's a good chance that the memory or handle will get re-used, and consequently the numerical value of the window handle once again becomes valid, but refers to a different window. </p>
<p> It so happens that boatloads of programs (and "boatloads" is a technical term) contain bugs where they use window handles after the window has been destroyed. When a window handle is re-used, that program sends a message to the window it thinks is still there, but instead it sends the message to a completely unrelated window. This doesn't bode well for the program, and it usually doesn't bode well for the new window that received the message by mistake either. </p>
<p> Next time, we'll look at how the Windows&nbsp;NT folks addressed this problem of window handle re-use. </p>
<p> <b>Nitpicker's corner</b> </p>
<p> "Boatloads" is not a technical term. That was a joke. </p>
<p> The initial version of this article accidentally omitted the word "not" from the opening sentence. Kudos to the people who were able to exercise their brain and figure this out from context instead of robotically taking everything at face value. There may be hope for the world yet. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-525723">
				<div id="div-comment-525723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Spike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525723">
			July 16, 2007 at 10:03 am</a>		</div>

		<p>I think there&#8217;s a &#8216;not&#8217; missing in the first line.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-525743">
				<div id="div-comment-525743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Humanoid....</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525743">
			July 16, 2007 at 10:20 am</a>		</div>

		<p>Nah, I reckon its overloaded by the &quot;Nothing&quot; in bold.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-525763">
				<div id="div-comment-525763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525763">
			July 16, 2007 at 10:52 am</a>		</div>

		<p>But that &quot;Nothing&quot; is in the second sentence. The first sentence says the exact opposite of the second.</p>
<p>Oh, am I nitpicking now, by pointing out a problem in an anti-nitpick paragraph?&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-525803">
				<div id="div-comment-525803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525803">
			July 16, 2007 at 11:53 am</a>		</div>

		<p>&gt; It&#8217;s times like that that I&#8217;m tempted to just give up writing.</p>
<p>Raymond, just put a disclaimer in the side bar.</p>
<div class="post">[<i>That won&#8217;t stop the people who intentionally play stupid. Besides, it&#8217;s a <u>blog</u>; you should already know the ground rules for blogs. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-525863">
				<div id="div-comment-525863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525863">
			July 16, 2007 at 1:46 pm</a>		</div>

		<p>Well, Raymond, I agree with you on the effect of idiots on one&#8217;s ability to tolerate it.</p>
<p>However, having just read your book from cover to cover, which is something I very rarely do with anything technical, there is a LOT of value in what you write. &nbsp;Thank you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-525873">
				<div id="div-comment-525873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Pietrek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525873">
			July 16, 2007 at 2:04 pm</a>		</div>

		<p>For what it&#8217;s worth, if anyone has an old copy of my &quot;Windows 95 System Programming Secrets&quot; book, the subject of window handles and the USER heaps is discused therein.</p>
<p>Wow, I wrote that chapter 13 years ago!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-525883">
				<div id="div-comment-525883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525883">
			July 16, 2007 at 2:32 pm</a>		</div>

		<p>Wow, 700 windows. I&#8217;ve got about 900 windows open on my system right now (so Spy++ tells me anyway) and most of those are inside background processes as I don&#8217;t have many &quot;applications&quot; (i.e. top-level windows I&#8217;m interacting with) open at the moment.</p>
<p>I would say that I&#8217;m glad the limit has increased since 3.11 but I guess people would have written things differently if the low limit was still there (e.g. not creating windows for background processes until they needed to be shown).</p>
<p>I&#8217;m looking forward to the next part about handle re-use. I have some ideas about how it might work but I&#8217;ll keep my mouth shut for now!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-525903">
				<div id="div-comment-525903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gwyn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525903">
			July 16, 2007 at 3:52 pm</a>		</div>

		<p>I tracked a problem on a Windows CE device recently to window handle reuse. A window was being destroyed but the handle was left dangling and then destroyed again which caused an Av in the process. The same code was running on Windows XP without issues for many years.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-525913">
				<div id="div-comment-525913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ajb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525913">
			July 16, 2007 at 7:57 pm</a>		</div>

		<p>Window handle reuse is a major operating system flaw. &nbsp;To get around it, I make sure to never close my handles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-525933">
				<div id="div-comment-525933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sonokie.net/' rel='external nofollow' class='url'>Daniel Ferguson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525933">
			July 16, 2007 at 9:26 pm</a>		</div>

		<p>Raymond, I read your blog because I&#8217;m fascinated by little Windows design details like this. &nbsp;(I had speculated that window handles were just memory pointers and interesting to have that confirmed.) &nbsp;I&#8217;m also really amused by your disclaimers, but I hope you&#8217;ll ignore the idiots and keep writing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-525943">
				<div id="div-comment-525943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525943">
			July 16, 2007 at 11:10 pm</a>		</div>

		<blockquote><p>
  Window handle reuse is a major operating system flaw.
</p></blockquote>
<p>I agree, in fact I would take it further: any numeric identifier that gets reused is a flaw. All window handles, kernel handles, memory pointers, file numbers, sockets and so on should represented by 512-bit numbers that we can safely gaurantee won&#8217;t be reused for the next 10,000 years. And if we need more than 10,000 years, we have plenty of time to switch to 1024-bit pointers&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-525953">
				<div id="div-comment-525953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525953">
			July 17, 2007 at 2:15 am</a>		</div>

		<p>&quot;any numeric identifier that gets reused is a flaw&quot;</p>
<p>Indeed it is. If a program tries to send message to a window and the handle is no longer valid because it destroyed it seconds ago it should crash and burn with a big red fat&#8217;n&#8217;ugly blinking exception.</p>
<p>Of course, if handle was refcounted on a per thread basis then it would be possible to detect reuse and crash the bastard. But I am sure Raymond will tell us how they fixed it. I can&#8217;t wait to hear the solution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-525963">
				<div id="div-comment-525963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525963">
			July 17, 2007 at 2:41 am</a>		</div>

		<blockquote><p>
  if handle was refcounted on a per thread basis then it would be possible to detect reuse
</p></blockquote>
<p>Er, how would that work exactly? How would you add a ref-count to the handle while still keeping it a 16-bit value?</p>
<p>Do you also propose that memory pointers returned from malloc() be ref-counted in the same way? What about inodes in a Posix-style filesystem? Or any of the other values which are represented by simple integers?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-525973">
				<div id="div-comment-525973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525973">
			July 17, 2007 at 5:34 am</a>		</div>

		<blockquote><p>
  if handle was refcounted on a per thread basis then it would be possible to detect reuse
</p></blockquote>
<p>Window handles aren&#8217;t scoped to threads or processes so I don&#8217;t think that would work on its own.</p>
<p>If thread A destroys handle H then, without some other protection mechanism, it&#8217;s possible and legal for thread B (which could be in another process) to create a new window that happens to also have handle H. B could then pass H to A and A could, legitimately, send messages to H.</p>
<p>Let&#8217;s wait to see what Raymond says is the real &nbsp;answer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-525993">
				<div id="div-comment-525993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-525993">
			July 17, 2007 at 8:08 am</a>		</div>

		<p>Um, Dean, inodes already are refcounted. &nbsp;That&#8217;s how hard-links work (two directory entries pointing to the same inode means the inode&#8217;s refcount (aka link count) is 2). &nbsp;And actually, processes with the file open bump the refcount too. &nbsp;(When you unlink the last link to a file, the inode number isn&#8217;t reused until the file is really removed from disk &#8212; i.e. when all processes close their handle(s) to it. &nbsp;Actually the number may not be reused at all, but I think it can be.)</p>
<p>Now it&#8217;s true that the inode *number* doesn&#8217;t have a refcount in it, but the inode structure does. &nbsp;I&#8217;m not sure on the internal details of window handles, etc., but it may be possible to do something similar with them.</p>
<p>Or it may cause all kinds of other headaches.</p>
<p>(And now that I re-read what was being discussed, I see that this doesn&#8217;t really even relate to the handle-reuse problem. &nbsp;I don&#8217;t think there are any, but if any syscalls operate on an inode number (as opposed to a file handle or pathname), then they&#8217;d be susceptible to the same type of &quot;process X gets an inode number, then the file gets deleted, then process X uses that number&quot; type of problem. &nbsp;So never mind.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-526593">
				<div id="div-comment-526593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-526593">
			July 17, 2007 at 6:26 pm</a>		</div>

		<p>Ok, maybe not exactly refcounting but something like this:</p>
<p>Assume you have process P with Thread A and Thread B.</p>
<p>Thread A creates window with handle 0x124. Thread B can send the messages to that window.</p>
<p>Then Thread A destroys the window and handle 0x124 is now free to be reused, but not for any thread that belongs to process P.</p>
<p>Handle is a void pointer so it points to some structure. In that structure you can have an entry where you store process ID of the last process which has used that particular handle.</p>
<p>Since process IDs are not reused but monotonically increasing, you can assume that all processes with ID &lt;= to that one should not be able to reuse the handle.</p>
<p>But I am sure that there are other smarter ways. This is just a 2 minute hack so don&#8217;t expect miracles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-526713">
				<div id="div-comment-526713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://parris.josh.com.au/' rel='external nofollow' class='url'>Josh Parris</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-526713">
			July 17, 2007 at 11:15 pm</a>		</div>

		<p>The correct technical term is, as you point out, not boatload. &nbsp;It&#8217;s shipload.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-526753">
				<div id="div-comment-526753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070716-00/?p=26003#comment-526753">
			July 18, 2007 at 1:01 am</a>		</div>

		<p>Igor, you are forgetting that HWNDs are like randomly assigned filenames. Any process in a desktop is allowed to send any message to any window on that desktop, just like any process can access any file owned by the uid of that process.</p>
<p>Just because Process P doesn&#8217;t need to use its own window 0x124 any longer doesn&#8217;t mean that P doesn&#8217;t have a legitimate need to talk to Process Q&#8217;s new window 0x124.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

