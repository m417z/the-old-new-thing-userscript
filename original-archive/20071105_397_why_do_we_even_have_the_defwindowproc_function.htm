<html>
<head>
<title>Why do we even have the DefWindowProc function?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why do we even have the DefWindowProc function?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 5, 2007 / year-entry #398</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20071105-00/?p=24583</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Some time ago, I looked at two ways of reimplementing the dialog procedure (method 1, method 2). Commenter "8" wondered why we have a DefWindowProc function at all. Couldn't window procedures have followed the dialog box model, where they simply return FALSE to indicate that they want default processing to occur? Then there would be no need...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Some time ago, I looked at two ways of reimplementing
the dialog procedure
(<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/11/12/55659.aspx"
>method&nbsp;1</a>,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/11/13/55662.aspx">
method&nbsp;2</a>).
Commenter "8" wondered
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/04/25/583093.aspx#584521">
why we have a <code>DefWindowProc</code> function at all</a>.
Couldn't window procedures have followed the dialog box model,
where they simply return <code>FALSE</code> to indicate that
they want default processing to occur?
Then there would be no need to export the <code>DefWindowProc</code>
function.
</p>
<p>
This overlooks one key pattern for derived classes:
Using the base class as a subroutine.
That pattern is what prompted people to ask for
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/11/12/55659.aspx">
dialog procedures that acted like window procedures</a>.
If you use the "Return <code>FALSE</code> to get default behavior"
pattern,
window procedures would go something like this:
</p>
<pre>
BOOL DialogLikeWndProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 switch (uMsg) {
 ... handle messages and return TRUE ...
 }
 // We didn't have any special processing; do the default thing
 return FALSE;
}
</pre>
<p>
Similarly, subclassing in this hypothetical world would go like this:
</p>
<pre>
BOOL DialogLikeSubclass(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 switch (uMsg) {
 ... handle messages and return TRUE ...
 }
 // We didn't have any special processing; let the base class try
 CallDialogLikeWindowProc(PrevDialogLikeWndProc, hwnd, uMsg, wParam, lParam);
}
</pre>
<p>
This works as long as what you want to do is override the base class
behavior entirely.
But what if you just want to augment it?
Calling the previous window procedure is analogous to calling the
base class implementation from a derived class,
and doing so is quite common in object-oriented programming,
where you want the derived class to behave "mostly" like the
base class.
Consider, for example, the case where we want to allow the user
to drag a window by grabbing anywhere in the client area:
</p>
<pre>
LRESULT CALLBACK CaptionDragWndProc(
    HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 LRESULT lres;

 switch (uMsg) {
 case WM_NCHITTEST:
  lres = DefWindowProc(hwnd, uMsg, wParam, lParam);
  if (lres == HTCLIENT) lres = HTCAPTION;
  return lres;
 ...
 }
 return DefWindowProc(hwnd, uMsg, wParam, lParam);
}
</pre>
<p>
We want our hit-testing to behave just like normal,
with the only exception that clicks in the client area
should be treated as clicks on the caption.
With the <code>DefWindowProc</code> model,
we can do this by calling <code>DefWindowProc</code> to
do the default processing, and then modifying
the result on the back end.
If we had use the dialog-box-like model,
there would have been no way to call the "default handler"
as a subroutine in order to make it to the heavy lifting.
We would be forced to do all the work or none of it.
</p>
<p>
Another avenue that an explicit <code>DefWindowProc</code>
function opens up is <strong>modifying</strong> messages
before they reach the default handler.
For example, suppose you have a read-only edit control,
but you want it to look like a normal edit control instead
of getting the static look.
You can do this by modifying the message that you pass
to <code>DefWindowProc</code>:
</p>
<pre>
...
 case WM_CTLCOLORSTATIC:
  if (GET_WM_CTLCOLOR_HWND(wParam, lParam) == m_hwndEdit)
  {
   // give it the "edit" look
   return DefWindowProc(hwnd, WM_CTLCOLOREDIT, wParam, lParam);
  }
  ...
</pre>
<p>
Another common operation is changing one color attribute of an
edit control while leaving the others intact.
For this, you can use <code>DefWindowProc</code> as a subroutine
and then tweak the one attribute you want to customize.
</p>
<pre>
 case WM_CTLCOLORSTATIC:
  if (GET_WM_CTLCOLOR_HWND(wParam, lParam) == m_hwndDanger)
  {
   // Start with the default color attributes
   LRESULT lres = DefWindowProc(hwnd, uMsg, wParam, lParam);
   // Change text color to red; leave everything else the same
   SetTextColor(GET_WM_CTLCOLOR_HDC(wParam, lParam), RGB(255,0,0));
   return lres;
  }
  ...
</pre>
<p>
Getting these types of operations to work with the dialog box
model would be a significantly trickier undertaking.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-565383">
				<div id="div-comment-565383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071105-00/?p=24583#comment-565383">
			November 5, 2007 at 3:21 pm</a>		</div>

		<p>Sounds reasonable. So why don&#8217;t dialog procedures behave the same way? I know that it&#8217;s possible to subclass the dialog class and call DefDlgProc, but I think it&#8217;s confusing (you then have two procedures, the window procedure and the dialog procedure, and both could process messages like WM_COMMAND). It could be simpler, couldn&#8217;t it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565393">
				<div id="div-comment-565393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071105-00/?p=24583#comment-565393">
			November 5, 2007 at 5:33 pm</a>		</div>

		<p>I am guessing that the way dialogs work (i.e. the &quot;return false to do default processing&quot; mechanism) dates back to the early days when dialog boxes were first implemented. Why it was done that way I dont know (but wish I did)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565403">
				<div id="div-comment-565403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bugreport</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071105-00/?p=24583#comment-565403">
			November 5, 2007 at 7:24 pm</a>		</div>

		<p>I&#8217;ve found a bug on this blog: the search results sometimes contain bad links. &nbsp;</p>
<p>Repro:</p>
<p>In the Search box at the top right of The Old New Thing, type &quot;WM_QUIT&quot;. &nbsp;</p>
<p>Result:</p>
<p>The header of the first and third results (for example) link to &quot;<a rel="nofollow" target="_new" href="http://weblogs.asp.net/...&quot;" rel="nofollow"></a><a href="http://weblogs.asp.net/" rel="nofollow">http://weblogs.asp.net/</a>&#8230;&quot; which is a bad link. &nbsp;The comment link for these blog entries, however, is correct (&quot;<a rel="nofollow" target="_new" href="http://blogs.msdn.com/...&quot;" rel="nofollow"></a><a href="http://blogs.msdn.com/" rel="nofollow">http://blogs.msdn.com/</a>&#8230;&quot;).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565433">
				<div id="div-comment-565433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lauren Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071105-00/?p=24583#comment-565433">
			November 5, 2007 at 10:44 pm</a>		</div>

		<p>Was this a conscious decision to support this usage pattern, or is this a post-hoc justification of an early implementation detail? Not that it really makes a difference in the end&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565443">
				<div id="div-comment-565443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071105-00/?p=24583#comment-565443">
			November 6, 2007 at 1:57 am</a>		</div>

		<blockquote><p>
  &gt;&gt; Why it was done that way I dont know (but wish I did)
</p></blockquote>
<p>Because you will have to create a custom class dialog for every dialog &#8211; how would you point which dialog function to use otherwise? Alternative is to subclass every created dialog &#8211; I guess at that time subclassing wasn&#8217;t invented yet.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-565463">
				<div id="div-comment-565463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Raymond II</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071105-00/?p=24583#comment-565463">
			November 6, 2007 at 11:04 am</a>		</div>

		<p>I know, Dean, and if I reply it will only get worse off-topic; I forcefully tried to wedge it in as &quot;related.&quot; &nbsp;Now other people like me, who do a search for WM_NCCREATE and window title, *may* get some feedback on how it (mis)behaves. &nbsp;I planned on getting this issue through the suggestion box, but it&#8217;s been closed each time I&#8217;ve tried, so today, before I left for work, I just crammed it in.&#8211;The information does more good than bad, even if it is slightly off-topic, at least in my view. &nbsp;Mr. Chen is free to delete any post, especially one of mine, since I have a habit of drifting off-topic. blablabla</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-565753">
				<div id="div-comment-565753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hummer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071105-00/?p=24583#comment-565753">
			November 7, 2007 at 6:19 am</a>		</div>

		<p>From my own experience I&#8217;d say that it would have been much easier, and perhaps less complicated if the dialog box scheme had followed the window scheme, i.e. if dialog had inherited window, or vice versa.</p>
<p>For me, I wrote a custom frame, from which all my window clases are derived. As I attacked the dialog problem I found myself having to consider ditching all of the dialog resource tools, in order to achieve a dialog that had a consistent look and feel, between frames and dialogs.</p>
<p>Admittedly I could have implemented a solution that repeated the &quot;window&quot; code in the &quot;dialog&quot; code, but given the difficulty of getting it to work &quot;just&quot; right, it wasn&#8217;t something I wanted to have to repeat, or maintain as some quite intricate bugs/problems surfaced.</p>
<p>Fortunately I decided not to use the windows dialog scheme. It was just luck in the end, and the additional effort of implementing a usable resource toolset paid off.</p>
<p>What I didn&#8217;t know at the time was that I would have significant problems moving to a threaded environment, because of things that were happening in windows modal loops. I&#8217;m not suggesting that they couldn&#8217;t have been made to work, merely that I couldn&#8217;t figure out what happens inside them.</p>
<p>Not using the windows dialog scheme meant that I didn&#8217;t have to reimplement dialogs these problems started surfacing. Implementing a popup menu capability was the last of windows modal loops for me! I find it a distinct advantage to own all of my modal loops. I wouldn&#8217;t say that it saves me time, but I have confidence that I know what is happening, and that means my code can be simple and unambiguous.</p>
<p>If I use a windows common dialog, and I do, it gets it&#8217;s own thread!</p>
<p>All I can hope now is that the operating system doesn&#8217;t start posting private message id&#8217;s to my main UI thread!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-568033">
				<div id="div-comment-568033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.shugye.com/2007/11/why-do-we-even-have-the-defwindowproc-function-%e4%b8%ba%e4%bb%80%e4%b9%88%e6%88%91%e4%bb%ac%e9%9c%80%e8%a6%81defwindowproc-%e5%87%bd%e6%95%b0-48.html' rel='external nofollow' class='url'>Why do we even have the DefWindowProc function? ä¸ºä»ä¹æä»¬éè¦DefWindowProc å½æ° &laquo; Cloudsun&#8217;s Daily Review</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071105-00/?p=24583#comment-568033">
			November 17, 2007 at 10:04 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.shugye.com/2007/11/why-do-we-even-have-the-defwindowproc-function-%e4%b8%ba%e4%bb%80%e4%b9%88%e6%88%91%e4%bb%ac%e9%9c%80%e8%a6%81defwindowproc-%e5%87%bd%e6%95%b0-48.html" rel="nofollow">http://www.shugye.com/2007/11/why-do-we-even-have-the-defwindowproc-function-%e4%b8%ba%e4%bb%80%e4%b9%88%e6%88%91%e4%bb%ac%e9%9c%80%e8%a6%81defwindowproc-%e5%87%bd%e6%95%b0-48.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

