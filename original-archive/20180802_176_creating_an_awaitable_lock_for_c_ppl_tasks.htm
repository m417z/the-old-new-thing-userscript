<html>
<head>
<title>Creating an awaitable lock for C++ PPL tasks</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Creating an awaitable lock for C++ PPL tasks</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 2, 2018 / year-entry #176</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180802-00/?p=99395</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Rolling our own.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The C# language (well, more accurately, the BCL)
has
<a HREF="https://msdn.microsoft.com/en-us/library/system.threading.semaphoreslim(v=vs.110).aspx">
the
<code>Reader&shy;Writer&shy;Lock&shy;Slim</code>
class</a>
which has
<a HREF="https://msdn.microsoft.com/en-us/library/system.threading.semaphoreslim(v=vs.110).aspx">
a
<code>Wait&shy;Async</code>
method</a>
which returns a task that completes
asynchronously when the lock has been acquired.
I needed an equivalent for the
Parallel Patterns Library (PPL),
and since I couldn't find one, I ended up writing one.
(If you can find one, please let me know!)
</p>
<pre>
// AsyncUILock is a nonrecursive lock that can be waited on
// asynchronously from a UI thread.
class AsyncUILock
{
public:
  Concurrency::task&lt;void&gt; WaitAsync()
  {
    std::lock_guard&lt;std::mutex&gt; guard(mutex);
    if (!locked) {
      // Lock is available. Acquire it.
      locked = true;
      return <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180801-00/?p=99385">completed_apartment_aware_task</a>();
    }

    // Lock is not available.
    return completed_apartment_aware_task()
      .then([captured_completion = completion] {
      // Wait for it to become available.
      return Concurrency::create_task(captured_completion);
    }).then([this] {
      // Then try again.
      return WaitAsync();
    });
  }

  void Release()
  {
    std::lock_guard&lt;std::mutex&gt; guard(mutex);
    locked = false;
    auto previousCompletion = completion;
    completion = Concurrency::task_completion_event&lt;void&gt;();
    previousCompletion.set();
  }

private:
  std::mutex mutex;
  bool locked = false;
  Concurrency::task_completion_event&lt;void&gt; completion;
};
</pre>
<p>
The object consists of a <code>std::mutex</code> which protects
the internal state,
a flag that indicates whether the object has been claimed,
and a task completion event that we use to signal
anybody waiting on the lock that they should check again.
</p>
<p>
I could have used an <code>SRWLock</code> instead of a
<code>std::mutex</code>,
but I was lazy and wanted to take advantage of the existing
<code>std::lock_guard</code>.
</p>
<p>
You can perform async waits on this object in the usual manner.
For example:
</p>
<pre>
AsyncUILock lock;

void DoSomething()
{
  lock.WaitAsync().then([]{
    // do something with the lock held.
    lock.Release();
  });
}
</pre>
<p>
or if you prefer <code>co_await</code> (and you probably do):
</p>
<pre>
AsyncUILock lock;

void DoSomething()
{
  co_await lock.WaitAsync();
  // do something with the lock held.
  lock.Release();
}
</pre>
<p>
At this point, you might decide to return an RAII type
to ensure that the lock doesn't leak.
I'll leave that as an exercise.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1355185">
				<div id="div-comment-1355185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://stephencleary.com' rel='external nofollow' class='url'>Stephen Cleary</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180802-00/?p=99395#comment-1355185">
			August 2, 2018 at 9:50 am</a>		</div>

		<p>It&#8217;s SemaphoreSlim that has the WaitAsync method, not ReaderWriterLockSlim.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1355415">
				<div id="div-comment-1355415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Yates</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180802-00/?p=99395#comment-1355415">
			August 3, 2018 at 2:34 pm</a>		</div>

		<p>Interesting that Raymond linked to the right class &amp; method but accidentally typed the wrong name for the link text.  Well not &#8220;interesting&#8221;, but it&#8217;s nice to know the gods make mistakes like us mere mortals too :)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-practicalvb even thread-odd thread-alt depth-1 parent" id="comment-1355195">
				<div id="div-comment-1355195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Rising' rel='external nofollow' class='url'>Rising</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180802-00/?p=99395#comment-1355195">
			August 2, 2018 at 11:11 am</a>		</div>

		<p>Raymond, the last closing PRE tag in your post is malformed.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1355205">
				<div id="div-comment-1355205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180802-00/?p=99395#comment-1355205">
			August 2, 2018 at 11:21 am</a>		</div>

		<p>&#8230; which means Raymond is almost certainly using a text editor to create his markup, not some WYSI(almost)WYG editor.  Why am I not surprised?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

