<html>
<head>
<title>When hyperthreading is enabled, all the processors are virtual</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When hyperthreading is enabled, all the processors are virtual</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 16, 2005 / year-entry #389</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A common problem when answering technical questions is that people sometimes ask a question that can't or shouldn't be answered because it is based upon a misunderstanding. What's particularly frustrating is when they insist that you answer their question as posed, even when you try to explain to them that their question is itself flawed....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A common problem when answering technical questions is that people sometimes ask a question that can't or shouldn't be answered because it is based upon a misunderstanding. What's particularly frustrating is when they <strong>insist</strong> that you answer their question as posed, even when you try to explain to them that their question is itself flawed.</p>
<p> It's as if somebody asked you the question, "Do I have to use the remote control to lock my kangaroo?" You could answer the question literally ("No"), but the person asking the question would walk away with the wrong conclusion ("Wow, kangaroos are self-locking!"). <a href="http://blogs.msdn.com/rflaming/"> Robert Flaming</a> recalls <a href="http://blogs.msdn.com/rflaming/archive/2005/10/01/476154.aspx"> a similar analogy I made with balsa wood and nails</a>. </p>
<p> Here's an example of a question that betrays misunderstanding. </p>
<blockquote class="m"><p> I just enabled hyperthreading on my dual-Xenon machine, and Task Manager now shows four processors instead of two. Which of them are the physical processors and which are the virtual ones? </p>
</blockquote>
<p> When you turn on hyperthreading, each individual physical processor acts as if it were two virtual processors. From Task Manager's point of view, the computer has four virtual processors. The two virtual processors associated with each physical processor are completely equivalent. It's not like one is physical and one is virtual. They are both virtual and compete equally for a share of the one physical CPU. When you set processor affinities, you set them to virtual processors. </p>
<p> To find out which virtual processors are associated with the same physical processor, you can call <a href="http://msdn.microsoft.com/library/en-us/dllproc/base/getlogicalprocessorinformation.asp"> the <code>GetLogicalProcessorInformation</code> function</a>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-330983">
				<div id="div-comment-330983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">vince</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-330983">
			December 16, 2005 at 10:14 am</a>		</div>

		<p>But of course in many cases turning on Hyperthreading reduces your performance due to Intel&#8217;s botched implementation.</p>
<p>For the heavy simulation workload we do, I did extensive benchmarks and we actually got poorer performance when HT turned on, especially because users would treat it like a 4-way rather than 2-way machine.</p>
<p>You are much better off if you somehow can communicate to the users &quot;yes it says 4 cpus, but only use 2&quot;.  If you treat it as a 4 way machine often tasks would take longer to run in the end.</p>
<p>So maybe you should have told them &quot;don&#8217;t turn it on at all&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-331003">
				<div id="div-comment-331003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331003">
			December 16, 2005 at 10:46 am</a>		</div>

		<p>The correct answer to such a question is &#8216;mu&#8217;. See <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Mu_%28Japanese_word%29" rel="nofollow">http://en.wikipedia.org/wiki/Mu_%28Japanese_word%29</a>.</p>
<p>(Just happy to be able to provide a useful comment once, even if it&#8217;s not technical :) )</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-331013">
				<div id="div-comment-331013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331013">
			December 16, 2005 at 10:51 am</a>		</div>

		<p>&quot;you can call the GetLogicalProcessorInformation function&quot;</p>
<p>The documentation says that function requires Windows Vista, Windows XP Professional x64 Edition, Windows Server &quot;Longhorn&quot; or Windows Server 2003. So I can &quot;try to call&quot; or in five years &quot;will be able to call&quot; with decent success, but in today&#8217;s Windows installed base it will be rare that I &quot;can call&quot; GetLogicalProcessorInformation.</p>
<p>I&#8217;m glad that future generations will have this function though. It&#8217;s pretty darned hard to scope out HT processors right now. Intel has some ugly code that plays with SetProcessorAffinityMask in order to divine whether the &quot;processors&quot; are real or HT, but it would have been nice if they had added a CPUID function to just tell us whether HT was enabled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-331033">
				<div id="div-comment-331033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331033">
			December 16, 2005 at 11:07 am</a>		</div>

		<p>vince: We see the same thing with the 3D CAD program that we use.  When HT is on, it runs slower.</p>
<p>Of course, it&#8217;s also single-threaded, so maybe that has something to do with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-331063">
				<div id="div-comment-331063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331063">
			December 16, 2005 at 11:48 am</a>		</div>

		<p>Vince: I already covered that topic last year <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2004/09/13/228780.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2004/09/13/228780.aspx</a> for</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-331083">
				<div id="div-comment-331083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331083">
			December 16, 2005 at 12:18 pm</a>		</div>

		<p>You can always answer &quot;yain&quot; (which is a German word meaning &#8216;ya&#8217; and &#8216;nein&#8217;, &quot;yes and no&quot;, at the same time.)</p>
<p>Or you can start with &quot;the standard expert answer&quot; which is &quot;well, it depends &#8230;&quot;</p>
<p>:-)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-331113">
				<div id="div-comment-331113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331113">
			December 16, 2005 at 2:08 pm</a>		</div>

		<p>Raymond: I&#8217;m not sure about vince, but our 3D CAD software slowdown happens on both 2K Pro+SP4 and XP Pro+SP2.  According to your earlier post, XP understands HT and can schedule processes appropriately.</p>
<p>Our issue doesn&#8217;t appear to be related to scheduling, just something strange that happens in the CPU when HT is on and it&#8217;s getting used heavily by one thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-331133">
				<div id="div-comment-331133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lamb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331133">
			December 16, 2005 at 3:28 pm</a>		</div>

		<p>&quot;Our issue doesn&#8217;t appear to be related to scheduling, just something strange that happens in the CPU when HT is on and it&#8217;s getting used heavily by one thread.&quot;</p>
<p>Caches are very important, and HT has to share one cache between two virtual processors.</p>
<p>Normally, when something else must run briefly on your UP (uni-processor) machine, the CAD thread is stopped, the other thread is started, it finishes, and then the CAD thread starts again. Each time this happens, the code &amp; data for the CAD thread is (likely to be) flushed from the cache, and the cache warms up again when the CAD thread is re-started.</p>
<p>Now, on the HT system, the OS knows it should prefer an empty physical CPU to one with a thread on it, but it can&#8217;t find such a CPU, so it starts the short-lived thread on another virtual processor sharing with your CAD thread. The CAD thread isn&#8217;t stopped, but it is sharing its cache with the other thread. This causes a lot more misses than normal, and in highly optimised inner loops (which your engineers may have used in heavy calculations) this makes things many times slower.</p>
<p>(For example, suppose your code does millions of &quot;random&quot; accesses in a 400&#215;400 array of int32s. With 1MB data cache such an algorithm can be tuned to fit in the cache and run very fast. However if half the cache is being used by another thread, half your accesses go back to RAM, which is an order of magntiude slower. The code will run very slowly until that other thread goes away and you get all of the cache back.)</p>
<p>The OS can&#8217;t really detect this, so the only thing to do about it is to turn of HT. The same can happen on a real multi-processor machine, and on any system where some resources are shared. But it&#8217;s annoyingly common on HT, which is why the technology hasn&#8217;t been as a big a money-spinner as Intel hoped.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-331173">
				<div id="div-comment-331173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331173">
			December 16, 2005 at 5:37 pm</a>		</div>

		<blockquote><p>
  The OS can&#8217;t really detect this, so the only thing to do about it is to turn of HT. The same can happen on a real multi-processor machine, and on any system where some resources are shared. But it&#8217;s annoyingly common on HT, which is why the technology hasn&#8217;t been as a big a money-spinner as Intel hoped.</p>
<p>I don&#8217;t see why this would be the case &#8211; most OSes use thread affinity to keep a thread on the same cpu, and most cpus (not the fakie HT ones) have their own cache. The dual core amd chips seem to be an exception, but they can share a larger cache at full speed, right?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-331183">
				<div id="div-comment-331183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VAS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331183">
			December 16, 2005 at 5:45 pm</a>		</div>

		<p>If the hamburger came from Hamburg, where the heck is CHEESEBURG?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-331213">
				<div id="div-comment-331213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.brentdax.com' rel='external nofollow' class='url'>Brent Dax</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331213">
			December 16, 2005 at 7:01 pm</a>		</div>

		<p>Incidentally, the classic Unix version of this question is something like &quot;I can use stat() to tell a soft link from a file.  How can I tell a hard link from a file?&quot;  (You can&#8217;t; every entry pointing to a file, including the original one, is a hard link.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-331023">
				<div id="div-comment-331023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Heffernan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331023">
			December 16, 2005 at 11:04 am</a>		</div>

		<p>Intel did add to CPUID to check whether HT is available on the processor.  The problem is that it might be on the processor but disabled by the BIOS or the OS.</p>
<p>So the code on Intel&#8217;s site is what you need.  It just so happens that I was porting this code to my app this week.  This is what I came up with:</p>
<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
<br />function AvailableProcessorCount: DWORD;<br />
<br />//returns total number of processors available to system including logical hyperthreaded processors<br />
<br />var<br />
<br />  i: Integer;<br />
<br />  ProcessAffinityMask, SystemAffinityMask: DWORD;<br />
<br />  Mask: DWORD;<br />
<br />begin<br />
<br />  if GetProcessAffinityMask(GetCurrentProcess, ProcessAffinityMask, SystemAffinityMask) then begin<br />
<br />    Result := 0;<br />
<br />    for i := 0 to 31 do begin<br />
<br />      Mask := 1 shl i;<br />
<br />      if (ProcessAffinityMask and Mask)&lt;&gt;0 then begin<br />
<br />        inc(Result);<br />
<br />      end;<br />
<br />    end;<br />
<br />  end else begin<br />
<br />    //can&#8217;t get the affinity mask so we just report the total number of processors<br />
<br />    Result := OperatingSystemInfo.ProcessorCount;<br />
<br />  end;<br />
<br />end; (* AvailableProcessorCount *)</p>
<p>function AvailableProcessorCoreCount: DWORD;<br />
<br />(* Returns total number of processors available to system excluding logical hyperthreaded processors.<br />
<br />   We only have to do significant work for Intel processors since they are the only ones which implement<br />
<br />   hyperthreading.</p>
<p>   It&#8217;s not 100% clear whether the hyperthreading bit (CPUID(1) -&gt; EDX[28]) will be set for processors<br />
<br />   with multiple cores but without hyperthreading.  My reading of the documentation is that it will be<br />
<br />   set but the code is conservative and performs the APIC ID decoding if either:</p>
<p>     1.  The hyperthreading bit is set, or<br />
<br />     2.  The processor reports &gt;1 cores on the physical package.</p>
<p>   If either of these conditions hold then we proceed to read the APIC ID for each logical processor<br />
<br />   recognised by the OS.  This ID can be decoded to the form (PACKAGE_ID, CORE_ID, LOGICAL_ID) where<br />
<br />   PACKAGE_ID identifies the physical processor package, CORE_ID identifies a physical core on that<br />
<br />   package and LOGICAL_ID identifies a hyperthreaded processor on that core.</p>
<p>   The job of this routine is therefore to count the number of unique cores, that is the number of<br />
<br />   unique pairs (PACKAGE_ID, CORE_ID).</p>
<p>   If the chip is not an Intel processor, or if it is Intel but doesn&#8217;t have multiple logical processors<br />
<br />   on a physical package then the routine simply returns AvailableProcessorCount. *)</p>
<p>  function GetMaxBasicCPUIDLeaf: DWORD;<br />
<br />  begin<br />
<br />    asm<br />
<br />      PUSH   EBX<br />
<br />      MOV    EAX,0<br />
<br />      CPUID<br />
<br />      MOV    Result,EAX<br />
<br />      POP    EBX<br />
<br />    end;<br />
<br />  end; (* GetMaxBasicCPUIDLeaf *)</p>
<p>  function ProcessorPackageSupportsLogicalProcessors: Boolean;<br />
<br />  const<br />
<br />    HT_BIT        = $10000000;<br />
<br />    FAMILY_ID     = $00000F00;<br />
<br />    EXT_FAMILY_ID = $00F00000;<br />
<br />    PENTIUM4_ID   = $00000F00;<br />
<br />  var<br />
<br />    VendorID: array [1..12] of char;<br />
<br />    RegEDX: DWORD;<br />
<br />    ProcessorSupportsHT: Boolean;<br />
<br />  begin<br />
<br />    ZeroMemory(@VendorID, SizeOf(VendorID));<br />
<br />    RegEDX := 0;</p>
<p>    Result := False;//may be overwritten later<br />
<br />    asm<br />
<br />      PUSH   EBX</p>
<p>      //call CPUID with EAX=0 and record the result in VendorID<br />
<br />      MOV    EAX,0<br />
<br />      CPUID</p>
<p>      //test the maximum basic CPUID leaf and quit if it&#8217;s less than 1 which we need below<br />
<br />      CMP    EAX,1<br />
<br />      JL     @@quit</p>
<p>      //record Vendor ID<br />
<br />      MOV    [DWORD PTR VendorID+0],EBX<br />
<br />      MOV    [DWORD PTR VendorID+4],EDX<br />
<br />      MOV    [DWORD PTR VendorID+8],ECX</p>
<p>      //call CPUID with EAX=1 and record the EDX register<br />
<br />      MOV    EAX,1<br />
<br />      CPUID<br />
<br />      MOV    RegEDX,EDX</p>
<p>@@quit:<br />
<br />      POP    EBX<br />
<br />    end;</p>
<p>    if VendorID=&#8217;GenuineIntel&#8217; then begin<br />
<br />      if (RegEDX and HT_BIT)&lt;&gt;0 then begin<br />
<br />        Result := True;<br />
<br />      end;<br />
<br />    end;<br />
<br />  end; (* ProcessorPackageSupportsLogicalProcessors *)</p>
<p>  function GetLogicalProcessorCountPerPackage: DWORD;<br />
<br />  const<br />
<br />    NUM_LOGICAL_BITS = $00FF0000;<br />
<br />  var<br />
<br />    RegEBX: DWORD;<br />
<br />  begin<br />
<br />    asm<br />
<br />      PUSH   EBX<br />
<br />      MOV    EAX,1<br />
<br />      CPUID<br />
<br />      MOV    RegEBX,EBX<br />
<br />      POP    EBX<br />
<br />    end;<br />
<br />    Result := ((RegEBX and NUM_LOGICAL_BITS) shr 16);<br />
<br />  end; (* GetLogicalProcessorCountPerPackage *)</p>
<p>  function GetMaxCoresPerPackage: DWORD;<br />
<br />  var<br />
<br />    RegEAX: DWORD;<br />
<br />  begin<br />
<br />    if GetMaxBasicCPUIDLeaf&gt;=4 then begin<br />
<br />      asm<br />
<br />        PUSH   EBX<br />
<br />        MOV    EAX,4<br />
<br />        MOV    ECX,0<br />
<br />        CPUID<br />
<br />        MOV    RegEAX,EAX<br />
<br />        POP    EBX<br />
<br />      end;<br />
<br />      Result := (RegEAX shr 26) + 1;<br />
<br />    end else begin<br />
<br />      Result := 1;<br />
<br />    end;<br />
<br />  end; (* GetMaxCoresPerPackage *)</p>
<p>  function GetAPIC_ID: DWORD;<br />
<br />  var<br />
<br />    RegEBX: DWORD;<br />
<br />  begin<br />
<br />    asm<br />
<br />      PUSH   EBX<br />
<br />      MOV    EAX,1<br />
<br />      CPUID<br />
<br />      MOV    RegEBX,EBX<br />
<br />      POP    EBX<br />
<br />    end;<br />
<br />    Result := RegEBX shr 24;<br />
<br />  end; (* GetAPIC_ID *)</p>
<p>var<br />
<br />  i: Integer;<br />
<br />  PackCoreList: TIntegerList;<br />
<br />  ThreadHandle: THandle;<br />
<br />  LogicalProcessorCountPerPackage, MaxCoresPerPackage, LogicalPerCore,<br />
<br />  APIC_ID, PACKAGE_ID, CORE_ID, LOGICAL_ID, PACKAGE_CORE_ID,<br />
<br />  CORE_ID_MASK, CORE_ID_SHIFT, LOGICAL_ID_MASK, LOGICAL_ID_SHIFT,<br />
<br />  ProcessAffinityMask, SystemAffinityMask, ThreadAffinityMask, Mask: DWORD;</p>
<p>begin<br />
<br />  Result := 0;</p>
<p>  Try<br />
<br />    //see Intel documentation (Y:IntelIA32_manuals) for details on logical processor topology<br />
<br />    if OperatingSystemInfo.PlatformID=VER_PLATFORM_WIN32_NT then begin<br />
<br />      MaxCoresPerPackage := GetMaxCoresPerPackage;<br />
<br />      if ProcessorPackageSupportsLogicalProcessors or (MaxCoresPerPackage&gt;1) then begin<br />
<br />        LogicalProcessorCountPerPackage := GetLogicalProcessorCountPerPackage;<br />
<br />        LogicalPerCore := LogicalProcessorCountPerPackage div MaxCoresPerPackage;</p>
<p>        LOGICAL_ID_MASK := $FF;<br />
<br />        LOGICAL_ID_SHIFT := 0;<br />
<br />        i := 1;<br />
<br />        while i&lt;LogicalPerCore do begin<br />
<br />          i := i*2;<br />
<br />          LOGICAL_ID_MASK := LOGICAL_ID_MASK shl 1;<br />
<br />          inc(LOGICAL_ID_SHIFT);<br />
<br />        end;</p>
<p>        CORE_ID_SHIFT := 0;<br />
<br />        if MaxCoresPerPackage&gt;1 then begin<br />
<br />          CORE_ID_MASK := LOGICAL_ID_MASK;<br />
<br />          i := 1;<br />
<br />          while i&lt;MaxCoresPerPackage do begin<br />
<br />            i := i*2;<br />
<br />            CORE_ID_MASK := CORE_ID_MASK shl 1;<br />
<br />            inc(CORE_ID_SHIFT);<br />
<br />          end;<br />
<br />        end else begin<br />
<br />          CORE_ID_MASK := $FF;<br />
<br />        end;</p>
<p>        LOGICAL_ID_MASK := not LOGICAL_ID_MASK;<br />
<br />        CORE_ID_MASK := not CORE_ID_MASK;</p>
<p>        if GetProcessAffinityMask(GetCurrentProcess, ProcessAffinityMask, SystemAffinityMask) then begin<br />
<br />          ThreadHandle := GetCurrentThread;<br />
<br />          ThreadAffinityMask := SetThreadAffinityMask(ThreadHandle, ProcessAffinityMask);//get the current thread affinity<br />
<br />          if ThreadAffinityMask&lt;&gt;0 then begin<br />
<br />            Try<br />
<br />              PackCoreList := TIntegerList.Create;<br />
<br />              Try<br />
<br />                for i := 0 to 31 do begin<br />
<br />                  Mask := 1 shl i;<br />
<br />                  if (ProcessAffinityMask and Mask)&lt;&gt;0 then begin<br />
<br />                    if SetThreadAffinityMask(ThreadHandle, Mask)&lt;&gt;0 then begin<br />
<br />                      Sleep(0);//allow OS to reschedule thread onto the selected processor<br />
<br />                      APIC_ID := GetAPIC_ID;<br />
<br />                      LOGICAL_ID := APIC_ID and LOGICAL_ID_MASK;<br />
<br />                      CORE_ID := (APIC_ID and CORE_ID_MASK) shr LOGICAL_ID_SHIFT;<br />
<br />                      PACKAGE_ID := APIC_ID shr (LOGICAL_ID_SHIFT + CORE_ID_SHIFT);</p>
<p>                      PACKAGE_CORE_ID := APIC_ID and (not LOGICAL_ID_MASK);//mask out LOGICAL_ID<br />
<br />                      //identifies the processor core &#8211; it&#8217;s not a value defined by Intel, rather it&#8217;s defined by us!</p>
<p>                      if PackCoreList.IndexOf(PACKAGE_CORE_ID)=-1 then begin<br />
<br />                        //count the number of unique processor cores<br />
<br />                        PackCoreList.Add(PACKAGE_CORE_ID)<br />
<br />                      end;<br />
<br />                    end;<br />
<br />                  end;<br />
<br />                end;<br />
<br />                Result := PackCoreList.Count;<br />
<br />              Finally<br />
<br />                FreeAndNil(PackCoreList);<br />
<br />              End;<br />
<br />            Finally<br />
<br />              //restore thread affinity<br />
<br />              SetThreadAffinityMask(ThreadHandle, ThreadAffinityMask);<br />
<br />            End;<br />
<br />          end;<br />
<br />        end;<br />
<br />      end;<br />
<br />    end;<br />
<br />  Except<br />
<br />    ;//some processors don&#8217;t support CPUID and so will raise exceptions when it is called<br />
<br />  End;</p>
<p>  if Result=0 then begin<br />
<br />    //if we haven&#8217;t modified Result above, then assume that all logical processors are true physical processor cores<br />
<br />    Result := AvailableProcessorCount;<br />
<br />  end;<br />
<br />end; (* AvailableProcessorCoreCount *)<br />
<br />&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</p>
<p>It works (I think) but what a pain in the backside!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-331043">
				<div id="div-comment-331043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">C. Calculus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331043">
			December 16, 2005 at 11:20 am</a>		</div>

		<p>Dual-*Xenon* machine? Dude, quit hogging the XBox 360s and sell one of those on EBay!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-331223">
				<div id="div-comment-331223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.0xCAFEBABE.com/' rel='external nofollow' class='url'>RevMike</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331223">
			December 16, 2005 at 7:57 pm</a>		</div>

		<p>&lt;blockquote&gt;Incidentally, the classic Unix version of this question is something like &quot;I can use stat() to tell a soft link from a file. How can I tell a hard link from a file?&quot; (You can&#8217;t; every entry pointing to a file, including the original one, is a hard link.)&lt;/blockquote&gt;</p>
<p>The Unix way is very powerful, but it takes a little time to wrap one&#8217;s head around it.  &quot;Every attribute of a file EXCEPT its name and path are associated directly with the file through the inode?  But the thing I care about most often &#8211; the file name &#8211; is dereferenced?  WTF!&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-331233">
				<div id="div-comment-331233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dekaydmedia.com' rel='external nofollow' class='url'>bluestix</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331233">
			December 16, 2005 at 11:19 pm</a>		</div>

		<p>One word dude: Opteron</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-331243">
				<div id="div-comment-331243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.joehuffman.org' rel='external nofollow' class='url'>Joe Huffman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331243">
			December 17, 2005 at 7:31 am</a>		</div>

		<p>&quot;mu&quot; is good answer for people who know the definition.  The lawyers (and I, even though I&#8217;m not a lawyer) use, &quot;The question presumes facts not in evidence.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-331253">
				<div id="div-comment-331253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuliy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331253">
			December 17, 2005 at 8:32 pm</a>		</div>

		<p>&quot;Every attribute of a file EXCEPT its name and path are associated directly with the file through the inode? But the thing I care about most often &#8211; the file name &#8211; is dereferenced? WTF!&quot;</p>
<p>Path &amp; Name have a *:1 relationship to inodes. Inodes are constant size, hence you can&#8217;t store all of the paths to a file in its inode.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-331293">
				<div id="div-comment-331293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fei Liu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331293">
			December 18, 2005 at 9:11 pm</a>		</div>

		<p>The wikipedia HT page has an excellent illustration of the HT performance problem. It comes down to the false assumption by the HT pipeline that all data are immediately available accessible in L1 cache. When the cache is shared and data access is delayed, the HT pipeline stalls in a disastrous way without retiring any u-ops.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-331303">
				<div id="div-comment-331303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331303">
			December 18, 2005 at 11:22 pm</a>		</div>

		<p>This type of questions is called &quot;Karlsson&#8217;s questions&quot;. In the book by Astrid Lindgren, Swedish fabler, Karlsson asked Freken Bok: &quot;Have you stopped from drinking brandy in the morning?&quot; If she answers &quot;Yes, I do!&quot;, you can tell she drinked brandy before. And if Freken Bok answers no, this evidently means she is drunk now. This is not a yes/no question; you should explain the person that his statement is incorrect.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-331313">
				<div id="div-comment-331313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.google.com/search?hl=en&#038;q=kaeseburg&#038;meta=' rel='external nofollow' class='url'>Not today, Josephine</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331313">
			December 19, 2005 at 6:27 am</a>		</div>

		<p>VAS &#8211; since the German word for cheese is kaese or k&#228;se, the place that my &quot;name&quot; will take you to should help.</p>
<p>Not that I know what this has to do with hyperthreading, but what the heck.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-331403">
				<div id="div-comment-331403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331403">
			December 19, 2005 at 4:23 pm</a>		</div>

		<p>@Peter:</p>
<p>The canonical example in the US of the question you posed is &quot;Have you stopped beating your wife yet?&quot;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-331433">
				<div id="div-comment-331433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331433">
			December 19, 2005 at 8:31 pm</a>		</div>

		<p>All this talk of dual-core machines reminds me: any explanation on why QueryPerformanceCounter is horribly horribly b0rken on multicore machines?  Even though the docs claim otherwise?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-331443">
				<div id="div-comment-331443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-331443">
			December 19, 2005 at 8:40 pm</a>		</div>

		<p>I already covered that topic earlier this year. <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2005/09/02/459952.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2005/09/02/459952.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-332983">
				<div id="div-comment-332983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.yanivpessach.com' rel='external nofollow' class='url'>Yaniv</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-332983">
			December 25, 2005 at 4:18 pm</a>		</div>

		<p>Additional consideration as to hyperthreadign performance can be found on <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/msdnmag/issues/05/06/HyperThreading/default.aspx" rel="nofollow">http://msdn.microsoft.com/msdnmag/issues/05/06/HyperThreading/default.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-552223">
				<div id="div-comment-552223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/gcerbone/archive/2007/09/21/how-long-is-a-piece-of-string.aspx' rel='external nofollow' class='url'>George Cerbone's blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051216-10/?p=32943#comment-552223">
			September 21, 2007 at 8:33 am</a>		</div>

		<p>A raging email thread on one of our internal aliases led me to an old blog entry about self-locking kangaroos</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

