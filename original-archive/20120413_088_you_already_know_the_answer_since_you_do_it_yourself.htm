<html>
<head>
<title>You already know the answer since you do it yourself</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>You already know the answer since you do it yourself</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 13, 2012 / year-entry #89</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer was writing a program that performed virtual drag/drop. They were using the IStream technique but found that many applications don't support drag/drop of virtual content. They support only CF_HDROP. What's more, often these applications query for CF_HDROP on DragEnter not because they want to access the file, but just because they want to...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer was writing a program that performed virtual drag/drop. They were using <a href="http://blogs.msdn.com/b/oldnewthing/archive/2008/03/19/8080215.aspx"> the <code>IStream</code> technique</a> but found that many applications don't support drag/drop of virtual content. They support only <code>CF_HDROP</code>. What's more, often these applications query for <code>CF_HDROP</code> on <code>DragEnter</code> not because they want to access the file, but just because they want to get the file names (for example, because they want to put up the no-entry cursor if the file types are not ones the application supports).</p>
<blockquote class="q"><p> Given that we want to be able to drop content onto applications which do not support drag/drop of virtual content, we have the problem of knowing exactly when to generate the content into a temporary file. If we generate the content too soon, then we may end up going to a lot of effort of creating a file that won't actually be used; if we generate it too late, then the application will try to open the file and find that it isn't there. When is the correct moment to generate the content? Is there some set of rules by which applications which do not support virtual drag/drop indicate whether they are obtaining the <code>CF_HDROP</code> just to see the names of the files, and whether they are obtaining it because they want to go open the files? </p>
</blockquote>
<p> If you think about it, you already know the answer to this question because you already do it yourself when you write code that operates the client side of the drag/drop contract. When you write your program that accepts <code>CF_HDROP</code> content, do you use any special signal to tell the data object, "Hey, I'm asking for <code>CF_HDROP</code> just because I want the file names, but I promise not to try to open the files yet"? No, you don't, so why would you expect any other application to? Even if there were rules surrounding this signaling protocol, the fact that they are widely ignored (because <i>even you yourself ignore them</i>) means that you can't rely on the client performing them anyway. </p>
<p> The rule for <code>CF_HDROP</code> is that at the moment you offer <code>CF_HDROP</code> content, the files must already exist. The <code>CF_HDROP</code> clipboard format was created by File Manager in Windows&nbsp;3.1, and File Manager did not support virtual content. The only thing it knew how to drag and drop was files, and the only thing it could drag was files that already existed. </p>
<p> In a sense, the rules around <code>CF_HDROP</code> were not so much codified by rule as codified by circumstance. Since the only things you could drag were files that already existed, those became the <i>de facto</i> rules for <code>CF_HDROP</code>. </p>
<p> Sorry. </p>
<p> Note that there is a little you can do: If an application calls <code>QueryGetData</code> for <code>CF_HDROP</code>, that does not force you to create the file content yet, because <code>QueryGetData</code> is just a yes/no query as to whether you could produce <code>CF_HDROP</code> if asked. You're not being asked to do so, so you can just say "Why yes, I have files" even though you don't yet. It's only at the <code>GetData</code> that you have to return a list of file names and therefore must create the files. </p>
<p> Most applications are kind enough to use <code>QueryGetData</code> when they are not interested in the files yet but only in the potential for files, but there are some which use <code>GetData</code> on the <code>DragEnter</code>, and those applications will force you to commit to creating the content even if the user ultimately abandons the operation without dropping. (You could try deferring the creation until your <code>IDropSource::QueryContinueDrag</code> returns <code>DRAGDROP_S_DROP</code>, but programs which sniff the file contents during <code>DragEnter</code> will not find the file there, and they probably won't like that. It also doesn't work if the transfer is done via copy/paste rather than drag/drop&mdash;and you need copy/paste support for accessibility&mdash;since your drop source is not active during a copy/paste.) </p>
<p> <b>Exercise</b>: How do you know when it's safe to delete the temporary files? </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-978173">
				<div id="div-comment-978173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978173">
			April 13, 2012 at 7:50 am</a>		</div>

		<p>I don&#39;t know enough about dragging and dropping to answer the Exercise, but I&#39;m going to take an educated guess and say you DON&#39;T know. &nbsp;The best solution may be to store them in %TEMP% and let Disk Cleanup clear it away at some point (or check yourself periodically and clear away any temporary files you made older than the last boot, which IMO is a reasonable metric).</p>
<p>The logic I&#39;m using is the same logic that web browsers use when you tell them to &quot;Open&quot; a file rather than save it (at least, last I checked this is what they do?). &nbsp;You can&#39;t really know for sure when the file isn&#39;t going to be used anymore. &nbsp;You could wait to see when the invoked application closes the file handle, but then maybe it&#39;s poorly coded and will reopen it a few seconds later. &nbsp;Perhaps you wait until the application closes, but what if the associated program is simply a stub that launches the real application that handles the file? &nbsp;And then of course maybe the user completely closes the file/app, changes their mind and tries to reopen it using an MRU list.</p>
<p>Since there is no standard mechanism to say &quot;OK I really am done with this file now&quot; to a web browser or source of a virtual drop (AFAIK) I would say there IS no way to know. &nbsp;However if a file goes for a &quot;reasonable&quot; period of time without access it&#39;s probably safe then, and a reboot is a pretty good way to be absolutely certain the application is completely closed and done with the file.</p>
<p>Of course if the user dropped a music clip onto a media player app and then tried to add a reference to the temporary file to their media library, they would then expect it to persist between reboots&#8230; there&#39;s always an edge case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-978193">
				<div id="div-comment-978193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978193">
			April 13, 2012 at 8:14 am</a>		</div>

		<p>Universal clipboard is a mess. Just sayin&#39;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-978203">
				<div id="div-comment-978203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978203">
			April 13, 2012 at 10:37 am</a>		</div>

		<p>MSDN says: &quot;A window registers as a clipboard format listener by calling the AddClipboardFormatListener function. When the contents of the clipboard change, the window is posted a WM_CLIPBOARDUPDATE message.&quot;</p>
<p>So you can detect when the user replaces your clipboard content with a new cut/copy, and then you can delete the temporary files.</p>
<p>Some applications also call EmptyClipboard if they still have data on the clipboard when they exit, allowing the files to go away also.</p>
<div class="post">[<em>Not necessarily. The destination app may still be using the file at the point the user copies something else to the clipboard. For example, a program accepts the drop and starts a long-running Import operation. To stay responsive, the app declares a successful drop and returns to its message loop, while continuing the Import in the background. You have no idea when that Import is complete. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jader3rd odd alt thread-odd thread-alt depth-1" id="comment-978223">
				<div id="div-comment-978223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jader3rd' rel='external nofollow' class='url'>jader3rd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978223">
			April 13, 2012 at 10:59 am</a>		</div>

		<p>If files had a SafeToDeleteOnDate attribute, it&#39;d be possible to know when it&#39;s safe to clean them up.</p>
<div class="post">[<i>Awesome. What date should you put on your temporary files? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-978233">
				<div id="div-comment-978233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978233">
			April 13, 2012 at 12:02 pm</a>		</div>

		<p>[Awesome. What date should you put on your temporary files? -Raymond]</p>
<p>In this case, about now + 10 minutes. Of course there&#39;s always that odd program that doesn&#39;t know it&#39;s a temporary file and decides to keep a reference to it. Since that case isn&#39;t solvable, I refuse to worry about it.</p>
<p>Incidentally, I&#39;ve wished for such a thing quite a few times where a file would simply go away after a few minutes. I just can&#39;t be bothered enough to throw kernel into test mode for a device driver [to make files go away while they&#39;re still opened] (not enough $$$$ for driver signing).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-978243">
				<div id="div-comment-978243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam V</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978243">
			April 13, 2012 at 12:27 pm</a>		</div>

		<p>@Joshua: I&#39;m just going to leave this here&#8230;</p>
<p><a rel="nofollow" target="_new" href="http://thedailywtf.com/Articles/The-Bug-That-Shut-Down-Computers-WorldWide.aspx" rel="nofollow">thedailywtf.com/&#8230;/The-Bug-That-Shut-Down-Computers-WorldWide.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-978253">
				<div id="div-comment-978253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978253">
			April 13, 2012 at 12:41 pm</a>		</div>

		<p>Joshua: If you want a file to go away when you&#39;re done with it, just mark it &quot;delete on close&quot; and forget about it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-978263">
				<div id="div-comment-978263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978263">
			April 13, 2012 at 12:54 pm</a>		</div>

		<p>@Gabe: That&#39;s what I&#39;m doing now, but Acrobat Reader is a bit too touchy about it.</p>
<p>@Adam V: Nice link.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-978183">
				<div id="div-comment-978183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978183">
			April 13, 2012 at 7:55 am</a>		</div>

		<p>Regarding the exercise: &nbsp;You don&#39;t. &nbsp;Keep them around for a few minutes or more &#8211; however long you think they need to be around before it will *probably* be safe to delete (there are no guarantees!). &nbsp;Depending on the application, you might even want to never delete the files. &nbsp;The receiving app might not even touch them until after the drag/drop operation has finished. &nbsp;The file could be very large and if the receiving app synchronously reads the file during the drag/drop operation, it will hang the sending app too &#8211; because the drag/drop API seems to require that the sending app synchronously wait for the drop target to finish. &nbsp;Nobody wants to see the *sending* app get hung too on a file open, so a simple solution as a drag/drop target is to PostMessage a custom message indicating that some files were dropped and need to be opened, and then immediately return from the drop target. &nbsp;(This is how I solved the problem, anyway. &nbsp;I&#39;m guessing Windows Explorer does something similar, seeing as how it doesn&#39;t hang the sending app either when you drag/drop files for a big file copy operation &#8211; it looks like it kicks off an asynchronous file copy and then immediately returns.) &nbsp;End result? &nbsp;The sending app has no clue when it is safe to delete.</p>
<p>I had to write some drag/drop related code (also clipboard, since the new clipboard uses IDataObject too) for a program that organized images. &nbsp;This turned into a massive pain in the rear. &nbsp;I had to write support for multiple image formats in multiple types of storage, and write support for file drag/drop as well in multiple types of storage, and test compatibility with several different pieces of software (including Microsoft&#39;s software) whose developers did not go to the lengths I did for ensuring drag/drop compatibility.</p>
<p>In my opinion, the API got *waaaay* too complicated for its own good. &nbsp;Too many different formats, and too many different ways of storing the data. &nbsp;And each sending/receiving app has to have code written to support them all if they want good compatibility. &nbsp;It&#39;s all nice-sounding in a pie-in-the-sky sort of sense &#8211; every app can transfer data in the best format/storage appropriate for the situation. &nbsp;This is a perfect world for a sending app, and the worst nightmare for a receiving app. &nbsp;Back to reality, not everyone provides all that support, which means we end up with today&#39;s situation where you can&#39;t drag/drop to/from some apps. &nbsp;(One of my annoyances: the refusal of some software, like instant messaging clients, to accept file attachments from Outlook. &nbsp;Sending a file attachment to a friend involves saving the image to a temporary file and then drag/dropping that.)</p>
<p>What the API really needed was a standard Microsoft-provided interface for translating IDataObject data formats &amp; storages from one type to another. &nbsp;For example, if the sending app provided a filename but the receiving app expected an IStream, then the proposed interface would create an IStream that wraps the file. &nbsp;It could do things like translate between image formats &amp; storages too (e.g. device dependent bitmap to device independent bitmap, and vice versa). &nbsp;Solid support for drag/dropping all the different format and storage combinations in the .NET Framework would have greatly helped, too.</p>
<p>Even the .NET Framework and MS Office teams can&#39;t get it right. &nbsp;Data objects can have either device dependent bitmaps, or device independent bitmaps (DIB), or both. &nbsp;The .NET Framework only supplies device dependent bitmaps &#8211; not DIBs. &nbsp; But MS Word and OneNote only accept DIBs &#8211; not device dependent bitmaps! &nbsp;End result: you can&#39;t drag/drop an image from a .NET Framework app into MS Office. &nbsp;I filed a report here: <a rel="nofollow" target="_new" href="http://connect.microsoft.com/VisualStudio/feedback/details/652248/" rel="nofollow">connect.microsoft.com/&#8230;/652248</a> but apparently it&#39;s by design and I&#39;m guessing the probability of a fix is low. &nbsp;Talk about right hand not talking to left in a big organization&#8230; &nbsp;The NETFX team probably thinks &quot;not my problem, it&#39;s Office&#39;s problem!&quot; &nbsp;And the reverse for the MS Office team (for whom I could only provide feedback via the anonymous black-hole webform which was probably ignored). &nbsp;Attitudes like this help kill the big picture of having MS software being integrated into a nice package / ecosystem.</p>
<p>If Microsoft can&#39;t get drag/drop working between their own products, there&#39;s *no way* most 3rd-party developers are going to get it right. &nbsp;(For a .NET developer to do it right would involve rewriting some significant portions of the .NET Framework, seeing as how the framework maintainers aren&#39;t going to do anything about it anytime soon despite the fact they are up to version 4.0 of the framework now.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-978273">
				<div id="div-comment-978273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978273">
			April 13, 2012 at 5:03 pm</a>		</div>

		<p>Oh, drag and drop. I hope DDE is not part of it.</p>
<p>Just a couple days ago, I had IE hanging when trying to open favorites, and WinZip hang while executing shell commands. Turned out the &quot;music player and music store access program&quot; was hanging. Welcome to wonderful world of DDE (un)cooperation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-978283">
				<div id="div-comment-978283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978283">
			April 13, 2012 at 5:06 pm</a>		</div>

		<p>@Gabe:</p>
<p>DELETE_ON_CLOSE requires that drop targets opened the files with FILE_SHARE_DELETE, which few apps do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-978293">
				<div id="div-comment-978293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978293">
			April 13, 2012 at 5:47 pm</a>		</div>

		<p>I suppose it should be possible to write a file system filter driver that allows applications to access virtual content by path. But personally, I consider software that doesn&#39;t support virtual drops ‘broken’ (at least where drag &amp; drop is concerned) and wouldn&#39;t go out of my way to write involved and (as discussed above, and possibly except for the filter driver) inherently buggy workarounds.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-978323">
				<div id="div-comment-978323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">FNunes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978323">
			April 13, 2012 at 8:43 pm</a>		</div>

		<p>At the next boot of the OS, when you application starts of if you want to be &quot;aggressive&quot; when you application closes ?</p>
<div class="post">[<i>That may be too soon. The application you dropped the file onto may have embedded a link. You can&#39;t delete the file as long as that link still exists. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-978363">
				<div id="div-comment-978363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978363">
			April 16, 2012 at 12:28 am</a>		</div>

		<p>So without perfect_knowledge_TM you can never remove those files? Memory leak heaven!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-978383">
				<div id="div-comment-978383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978383">
			April 16, 2012 at 7:53 am</a>		</div>

		<p>@Ben: &quot;So you can detect when the user replaces your clipboard content with a new cut/copy, and then you can delete the temporary files.</p>
<p>Some applications also call EmptyClipboard if they still have data on the clipboard when they exit, allowing the files to go away also.&quot;</p>
<p>No. &nbsp;Here&#39;s why:</p>
<ol>
<li>&nbsp;Copy some big data to temporary files / clipboard using your app.</li>
<li>
<p>&nbsp;User pastes your files into Windows Explorer.</p>
</li>
<li>
<p>&nbsp;Windows Explorer kicks off a background thread to do the asynchronous file copy.</p>
</li>
<li>
<p>&nbsp;Now the user copies something else.</p>
</li>
<li>
<p>&nbsp;As you propose, your app tries to delete temporary files, thinking that the user has copied something else and that the files aren&#39;t needed. &nbsp;But the files are still in use.</p>
</li>
<li>
<p>&nbsp;Your app might fail, since Windows Explorer would have a file open and locked so it can be copied.</p>
</li>
<li>
<p>&nbsp;Windows Explorer would fail, since you probably successfully deleted some files that it had enumerated for copying.</p>
</li>
</ol>
<p>For smaller files, the file paste might be fast enough that the user couldn&#39;t copy something else fast enough. &nbsp;So you might get away with it most of the time. &nbsp;But it&#39;s still a race condition.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-978663">
				<div id="div-comment-978663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120413-00/?p=7863#comment-978663">
			April 18, 2012 at 8:27 am</a>		</div>

		<p>Can you just leave the files in (a subdirectory of) %TEMP%? &nbsp;If the receiving app leaves them there it shouldn&#39;t be too surprised that they eventually vanish. &nbsp;But on the other hand, a lot of app developers are stupid, so sooner or later this would result in data loss.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

