<html>
<head>
<title>Scrollbars part 12: Applying WM_NCCALCSIZE to our scrollbar sample</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Scrollbars part 12: Applying WM_NCCALCSIZE to our scrollbar sample</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 17, 2003 / year-entry #66</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20030917-00/?p=42463</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>2</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Now that we have learned about the intricacies of the WM_NCCALCSIZE message, we can use it to get rid of the flicker in our resizing code. We just take the trick we used above and apply it to the scroll program. First, we need to get rid of the bad flickery resize, so return the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
        Now that we have learned about the intricacies of the <code>WM_NCCALCSIZE</code> message,
        we can use it to get rid of the flicker in our resizing code. We just take the trick
        we used above and apply it to the scroll program. 
    </p>
<p>
        First, we need to get rid of the bad flickery resize, so return the <i>OnWindowPosChanging</i> function
        to the version before we tried doing metaphor work: 
    </p>
<pre>BOOL OnWindowPosChanging(HWND hwnd, LPWINDOWPOS pwp)
{
    if (!(pwp-&gt;flags &amp; SWP_NOSIZE)) {
        RECT rc = { 0, 0, pwp-&gt;cx, pwp-&gt;cy };
        AdjustSizeRectangle(hwnd, WMSZ_BOTTOM, &amp;rc);
        pwp-&gt;cy = rc.bottom;
    }
    return 0;
}
</pre>
<p>
        Instead, our work will happen in the <code>WM_NCCALCSIZE</code> handler. 
    </p>
<pre>UINT OnNcCalcSize(HWND hwnd, BOOL fCalcValidRects,
                  NCCALCSIZE_PARAMS *pcsp)
{
    UINT uRc = (UINT)FORWARD_WM_NCCALCSIZE(hwnd,
                        fCalcValidRects, pcsp, DefWindowProc);

    if (fCalcValidRects) {
        //  Give names to these things
        RECT *prcClientNew = &amp;pcsp-&gt;rgrc[0];
        RECT *prcValidDst  = &amp;pcsp-&gt;rgrc[1];
        RECT *prcValidSrc  = &amp;pcsp-&gt;rgrc[2];
        int dpos;
        int pos;

        // Did we drag the top edge enough to scroll?
        if (prcClientNew-&gt;bottom == prcValidSrc-&gt;bottom &amp;&amp;
            g_cyLine &amp;&amp;
            (dpos = (prcClientNew-&gt;top - prcValidSrc-&gt;top)
                                            / g_cyLine) != 0 &amp;&amp;
            (pos = ClampScrollPos(g_yOrigin + dpos)) != g_yOrigin) {

            *prcValidDst = *prcClientNew;
            ScrollTo(hwnd, pos, FALSE);
            prcValidDst-&gt;top -= dpos * g_cyLine;

            uRc = WVR_VALIDRECTS;
        }

    }
    return uRc;
}

    /* Add to WndProc */
    HANDLE_MSG(hwnd, WM_NCCALCSIZE, OnNcCalcSize);
</pre>
<p>
        This uses a new helper function which we extracted from the <i>ScrollTo</i> function.
        (If I had planned this better, this would have been factored out when we first wrote <i>ScrollTo</i>.) 
    </p>
<pre>int ClampScrollPos(int pos)
{
    /*
     *  Keep the value in the range 0 .. (g_cItems - g_cyPage).
     */
    pos = max(pos, 0);
    pos = min(pos, g_cItems - g_cyPage);
    return pos;
}
</pre>
<p>
        I am not entirely happy with this code, however. It is my personal opinion that the <code>WM_NCCALCSIZE</code> handler
        should be stateless. Notice that this one modifies state (by calling <i>ScrollTo</i>).
        If I had more time (sorry, I'm rushed now - you'll learn why soon), I would have put
        the state modification into the <code>WM_WINDOWPOSCHANGING</code> message. So I will
        leave that as another exercise. 
    </p>
<p>        <b>Exercise</b>: Keep the <code>WM_NCCALCSIZE</code> message stateless. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-196333">
				<div id="div-comment-196333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030917-00/?p=42463#comment-196333">
			July 19, 2004 at 12:26 pm</a>		</div>

		<p>ClampScrollPos() has a bug.  (I recently made the same mistake in one of my apps.)  If the window is large enough that the window doesn&#8217;t need a scroll bar, then ClampScrollPos will return a negative value (because g_cItems &#8211; g_cyPage will be less than zero).  The simple fix is to swap the two lines.</p>
<p>In my apps, I&#8217;ve always tracked scrolling by pixels rather than lines.  It simplifies many of the calculations, and smooth scrolling becomes a possibility.  You just need a multiplier in the scroll-by-line functions that tells you the (average) pixels per line.</p>
<p>Great series, though.  I thought I knew everything there was about getting scrolling just right, but I&#8217;ve already learned a couple new bits.  In a sense it&#8217;s a shame that it&#8217;s this much work to get scrolling right.  That could explain all the custom controls out there that don&#8217;t do it right.</p>
<p>ANIMATED SCROLLING</p>
<p>I like animated scrolling to help the eye follow along.  In addition to keeping track of the current scroll position, you also track the current *target* position.  All of your scroll commands then compute a new target position.</p>
<p>I make it a user selectable option (using SPI_GETLISTBOXSMOOTHSCROLLING as a default).  If animated scrolling is disabled, then iPos = iTarget and proceed as usual.</p>
<p>But if it&#8217;s enabled, send yourself a custom &quot;animate&quot; message instead.  The handler for this message moves the current position closer to the target position and calls ScrollWindow().  At the end of OnPaint, you post another &quot;animate&quot; message if the current position hasn&#8217;t caught up with the target.  Since WM_PAINT messages are low priority (only dispatched when cue is empty), you can still accumulate additional scrolling commands from the mouse or keyboard and move the target as the animation proceeds.</p>
<p>What we want is snappy animation (so you can still jump to the top or bottom of a long document quickly) while giving enough motion for the eye to track and land.  So what I do is:</p>
<p>int delta = iTarget &#8211; iPos;<br />
<br />if (-3 &lt; delta || delta &lt; 3)<br />
<br />    iPos += delta / 3;<br />
<br />else<br />
<br />    iPos = iTarget</p>
<p>Thus, if you have a long way to scroll, we whizz by.  But as we get to the target location, the rate slows nicely.  Really slick if you track things in pixels rather than items.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196343">
				<div id="div-comment-196343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030917-00/?p=42463#comment-196343">
			July 19, 2004 at 12:30 pm</a>		</div>

		<p>Oops, I got the comparison wrong at the end of my last post.  Should be:</p>
<p>if (-3 &lt; delta &amp;&amp; delta &lt; 3)<br />
<br />    iPos = iTarget;<br />
<br />else<br />
<br />    iPos += delta/3;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

