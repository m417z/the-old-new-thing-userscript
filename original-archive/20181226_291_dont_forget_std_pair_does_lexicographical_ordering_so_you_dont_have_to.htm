<html>
<head>
<title>Don't forget: std::pair does lexicographical ordering, so you don't have to</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Don&#8217;t forget: std::pair does lexicographical ordering, so you don&#8217;t have to</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 26, 2018 / year-entry #291</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20181226-00/?p=100565</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Let it do the comparing.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A feature perhaps not as widely known as I thought
is that the <code>std::pair</code> type performs lexicographical
ordering, so you don't have to.
</p>
<pre>
// Suppose we record versions as std::pair&lt;int, int&gt;
// where the first is the major version
// and the second is the minor version.

std::map&lt;ComponentId, std::pair&lt;int, int&gt;&gt; requiredVersions;

bool IsSupported(ComponentId id, std::pair&lt;int, int&gt; actualVersion)
{
 auto item = requiredVersions.find(id);
 if (item == requiredVersions.end()) {
  return true;
 }

 auto&amp; requiredVersion = item-&gt;second;

 if (actualVersion.first &gt; requiredVersion.first ||
     (actualVersion.first == requiredVersion.first &amp;&amp;
      actualVersion.second &gt;= requiredVersion.second)) {
  return true;
 }

 return false;
}
</pre>
<p>
First, we try to find the component in our list of required versions.
If it's not found, then the component has no version requirements,
and we say, "Sure, it's supported!"
(This is just an example. Maybe you want to say that if it's not
on the list, then it's not supported at all.)
</p>
<p>
Otherwise, we check the actual version number against the
required version.
If the major version is greater, or if the major version is equal
but the minor version is greater or equal,
then we decide that we have met the minimum requirements.
</p>
<p>
Writing the comparison of major and minor versions is
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040213-00/?p=40633">
easy to get wrong</a>,
</p>
<p>
So don't write the code that's easy to get wrong.
Let the standard library do it.
</p>
<pre>
bool IsSupported(ComponentId id, std::pair&lt;int, int&gt; actualVersion)
{
  auto item = requiredVersions.find(id);
 if (item == requiredVersions.end()) {
  return true;
 }

 auto&amp; requiredVersion = item-&gt;second;

 <font COLOR="blue">return actualVersion &gt;= requiredVersion;</font>
}
</pre>
<p>
<b>Bonus chatter</b>:
I saw this mistake in some code that used the
<code>std::pair</code> as the key in a map.
</p>
<pre>
std::map&lt;std::pair&lt;int, int&gt;, CoolThing&gt; sortedThings;
</pre>
<p>
The idea is that the cool things would be sorted by a
sort key that behaved like major/minor.
The code compared the keys manually, presumably because the
author didn't think that
<code>std::pair</code> supported the relational operators.
</p>
<p>
But of course
<code>std::pair</code> supports the relational operators
bcause that's one of the prerequisites for being the key of
a <code>std::map</code>.
(Okay, technically, <code>std::map</code> requires only
<code>operator&lt;</code>, but once you have
<code>operator&lt;</code>, you can synthesize the rest.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20181226-00/?p=100565#respond" style="display:none;">Cancel reply</a></small></h3><p class="must-log-in">You must be <a href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20181226-00%2F%3Fp%3D100565">logged in</a> to post a comment.</p>	</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-joker150491 even thread-even depth-1" id="comment-1374635">
				<div id="div-comment-1374635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joker_vD' rel='external nofollow' class='url'>Joker_vD</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181226-00/?p=100565#comment-1374635">
			December 26, 2018 at 1:21 pm</a>		</div>

		<p>Yep, it&#8217;s a pretty nice thing, and really helps to write your own relational operators, if you okay with them being lexicographical: throw in a std::tie around the fields, and compare the resulting tuples.</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20181226-00%2F%3Fp%3D100565">Log in to Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-odd thread-alt depth-1 parent" id="comment-1374685">
				<div id="div-comment-1374685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181226-00/?p=100565#comment-1374685">
			December 27, 2018 at 5:56 am</a>		</div>

		<p>I think this is the only redeeming quality of <code>std::pair</code> and <code>std::tuple</code>; whenever you need to store &#8220;just&#8221; a pair of values, you&#8217;ll soon discover that on every other aspect you&#8217;ll be better served by a (possibly local) structure with aptly named fields. The code that uses it will be way clearer (using semantically correct names over the verbose and semantically empty &#8220;first&#8221; and &#8220;second&#8221; &#8211; every time I iterate over a <code>std::map</code> I wish the members were called <code>key</code> and <code>value</code>), and in the entirely possible situation where you&#8217;ll need to add an extra member or change the type of one of the two it&#8217;ll be as easy as updating the structure definition &#8211; as opposed to going around fixing all those <code>std::pair&lt;blah, blah&gt;</code>.</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20181226-00%2F%3Fp%3D100565">Log in to Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wswiktor even depth-2 parent" id="comment-1374705">
				<div id="div-comment-1374705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Azarien' rel='external nofollow' class='url'>Azarien</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181226-00/?p=100565#comment-1374705">
			December 28, 2018 at 9:57 am</a>		</div>

		<p>That&#8217;s why it is usually better to have appropriate `typedef` or `using`, instead of all those std::map&lt;std::pair&gt; all over the code.</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20181226-00%2F%3Fp%3D100565">Log in to Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-matteo odd alt depth-3" id="comment-1374715">
				<div id="div-comment-1374715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181226-00/?p=100565#comment-1374715">
			December 28, 2018 at 1:18 pm</a>		</div>

		<p>That only fixes half of the problem, ugly names remain :-(</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20181226-00%2F%3Fp%3D100565">Log in to Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

