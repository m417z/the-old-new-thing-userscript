<html>
<head>
<title>The management of memory for resources in 16-bit Windows, redux</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The management of memory for resources in 16-bit Windows, redux</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 1, 2013 / year-entry #262</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131001-00/?p=3063</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Some time ago, I briefly ran down how 16-bit Windows managed memory for resources. But there's a detail that I neglected to mention: Ownership. As we saw, a resource handle HRSRC was really a pointer to the resource directory entry of the resource from the corresponding module. This could be done with a 16-bit pointer...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Some time ago, I briefly ran down <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/02/66159.aspx"> how 16-bit Windows managed memory for resources</a>. But there's a detail that I neglected to mention: Ownership.</p>
<p> As we saw, a resource handle <code>HRSRC</code> was really a pointer to the resource directory entry of the resource from the corresponding module. This could be done with a 16-bit pointer because the segment portion of the pointer could be inferred from the module the resource belonged to. In fact, since modules could be relocated in memory at run time due to compaction, you had better not try to remember the segment portion of the pointer since it could change! </p>
<p> The <code>Find&shy;Resource</code> function located the resource directory entry. The <code>Load&shy;Resource</code> function allocated memory for the resource and loaded it from disk. The <code>Lock&shy;Resource</code> function locked the memory so you could access it. If two people tried to load the same resource, the memory for the resource was re-used so there was only one copy in memory, and if both people free the resource, the resource is cached in case somebody asks for it again soon. </p>
<p> Now things get interesting: When does the resource get removed from the cache? What actually controls the lifetime of the resource? </p>
<p> Answer: The resource lifetime is tied to the module it came from. When the module is unloaded, all its resources are unloaded along with it. (Note that even if a resource is cached, its contents can get discarded if it is tagged as <code>DISCARDABLE</code>.) </p>
<p> In Win32, modules are directly mapped into memory, and along with it, the resources. Therefore, accessing the resources of a module is a simple matter of figuring out where they got mapped (<code>Find&shy;Resource</code> and friends will tell you), and then reading the memory directly. So despite the radical change to resources work, the basic rules haven't changed: The resources are good as long as the module is still in memory. </p>
<p> But there are resources and then there are resources. So far, we've been talking about resources in the sense of <code>Find&shy;Resource</code>, which I will call <i>module resources</i> for lack of a better term. But people often work with objects like icons and bitmaps which are not literally resources but which are derived from resources. Next time, we'll look at the relationship between module resources and resource-derived objects in 16-bit Windows. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1080783">
				<div id="div-comment-1080783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131001-00/?p=3063#comment-1080783">
			October 1, 2013 at 9:40 am</a>		</div>

		<p>It occurred to me awhile back that anybody who designed a system in 16 bit Windows that depended on the DATA segment of a DLL being shared by all processes that loaded that DLL would be in a world of hurt in porting to 32 bit Windows.</p>
<div class="post">[<em>Actually, it worked out mostly okay. Each DLL thinks that it is being used by only one process in the system. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1080803">
				<div id="div-comment-1080803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131001-00/?p=3063#comment-1080803">
			October 1, 2013 at 10:11 am</a>		</div>

		<p>[Actually, it worked out mostly okay. Each DLL thinks that it is being used by only one process in the system. -Raymond]</p>
<p>Not if two processes were using the shared DLL for shared state.</p>
<div class="post">[<em>Each DLL then thought that it was being used by only one process. The other process using the DLL was invisible. (It was running in another VM, you might say.) The shared state was not shared because there was nobody to share it with. In general, this worked out okay. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1080823">
				<div id="div-comment-1080823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131001-00/?p=3063#comment-1080823">
			October 2, 2013 at 3:16 am</a>		</div>

		<p>And in 32-bit land, hPrevInstance was always NULL. Each process then thought that it was the first instance. In general, this worked out okay.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm odd alt thread-odd thread-alt depth-1" id="comment-1080843">
				<div id="div-comment-1080843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131001-00/?p=3063#comment-1080843">
			October 2, 2013 at 7:00 am</a>		</div>

		<p>Raymond, I think Joshua was just saying that anyone that depended on the sharing to happen would have to completely replace that way of communicating when porting to Win32, not that something bad would happen when the programs ran. &nbsp;So the world of hurt is during development, not at runtime.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1080853">
				<div id="div-comment-1080853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131001-00/?p=3063#comment-1080853">
			October 2, 2013 at 7:35 am</a>		</div>

		<p>@GregM: Win32 supports shared data sections in DLLs, so you wouldn&#39;t have to completely replace the functionality. &nbsp;Of course, that creates a synchronisation problem, but you could probably fix that by attaching the input of your processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1080873">
				<div id="div-comment-1080873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131001-00/?p=3063#comment-1080873">
			October 2, 2013 at 12:14 pm</a>		</div>

		<p>@laonianren:</p>
<p>You know that&#39;s not a &quot;Get out of Jail&quot; but a &quot;Let&#39;s merge those Jails (so noone feels responsible for anything)&quot; card?</p>
<p>Raymond had a few posts about the evils of attached Input queues. The treatment is worse than the disease.</p>
<p>Just accept you have to redesign your IPC.</p>
<p>&quot;In general, this worked out okay.&quot; That&#39;s true, in general, this feature was not used, though sometimes it might be used as a shortcut, and the few remaining cases can be ignored.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1080923">
				<div id="div-comment-1080923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131001-00/?p=3063#comment-1080923">
			October 3, 2013 at 7:08 am</a>		</div>

		<p>I&#39;ve just spent two months remediating a suite of 16-bit programs that massively shared data using DLLs between programs. &nbsp;Pointers to blocks of storage were shared in INI files so that small VB3 programs could be used as common dialogs to other VB3 programs. &nbsp;It&#39;s been a journey as they say, mostly solved by using an ActiveX singleton EXE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1080963">
				<div id="div-comment-1080963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131001-00/?p=3063#comment-1080963">
			October 3, 2013 at 9:01 am</a>		</div>

		<p>@Deduplicator: We&#39;re talking about porting 16-bit apps, so they already expect to have their input queues attached. &nbsp;This isn&#39;t a great long-term solution, but sometimes a legitimate goal is to get your app ported as quickly as possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1081103">
				<div id="div-comment-1081103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131001-00/?p=3063#comment-1081103">
			October 5, 2013 at 12:41 pm</a>		</div>

		<p>@Chris: Wow, somebody actually *did* it. I saw a database engine proposed that way sooo many years ago but I never thought one would see the light of day.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081133">
				<div id="div-comment-1081133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/chris.reynolds_4000_chrisrey.demon.co.uk/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>chris.reynolds@chrisrey.demon.co.uk</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131001-00/?p=3063#comment-1081133">
			October 7, 2013 at 1:07 am</a>		</div>

		<p>It sort of happened. &nbsp;An object oriented data framework was written in C, nicely supporting aggregation, inheritance and implementation hiding. &nbsp;The handles to the objects were returned to the caller (VB3 typically) as longs which were actually pointers to the meta-data for the object instance. &nbsp;One of the teams using the framework noticed this and then used it as an IPC mechanism. &nbsp;For VB3 on old Win 3.1. machines it probably worked well as it avoided costly refresh trips to the mainframe (through HLLAPI back then). </p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

