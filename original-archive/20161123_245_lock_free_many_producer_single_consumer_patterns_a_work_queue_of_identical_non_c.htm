<html>
<head>
<title>Lock free many-producer/single-consumer patterns: A work queue of identical non-coalescable events</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Lock free many-producer/single-consumer patterns: A work queue of identical non-coalescable events</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 23, 2016 / year-entry #246</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">They're all the same, but each one counts.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Onward with our miniseries on lock-free
many-producer/single-consumer patterns.
Today,
we're going to look at the case where you
have a work queue where there can be
multiple work items,
and you need to perform them all,
but each item is identical.
</p>
<p>
For example, you may have a <i>Buy It</i> button.
Each time the user clicks the button, you want
to run a transaction.
But each button press is equivalent;
all that's important is the number of times the
user pushed the button.
</p>
<p>
Okay, that's not a very good example,
but it'll have to do.
</p>
<p>
One way of doing this is with a semaphore,
where the number of tokens in the semaphore
is the number of work items left to be done.
But let's stick with our current pattern
where the producers need to manually wake
the consumer,
say with a message,
and we want to minimize the number of times
we need to perform the wake ritual.
</p>
<pre>
LONG WorkCount;

void RequestWork()
{
 if (InterlockedIncrement(&amp;WorkCount) == 1) {
  // You provide the WakeConsumer() function.
  WakeConsumer();
 }
}

// You call this function when the consumer receives the
// signal raised by WakeConsumer().
void ConsumeWork()
{
 while (InterlockedDecrementToZero(&amp;WorkCount)) {
  DoSomeWork();
 }
}

bool InterlockedDecrementToZero(LONG volatile* value)
{
 LONG original, result;
 do {
  original = *value;
  if (original == 0) return false;
  result = original - 1;
 } while (InterlockedCompareExchange(value, result,
                               original) != original);
 return true;
}
</pre>
<p>
The <code>Interlocked&shy;Decrement&shy;To&shy;Zero</code>
function follows
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863">
the pattern for building complex interlocked operations</a>,
in this case,
decrementing a number, but not decrementing it below zero.
We check if the value is zero; if so, then stop
and return <code>false</code>.
Otherwise, try to swap it with the value one less than
the current value.
If that fails, then it means that another thread
changed the <code>WorkCount</code> while we were busy thinking,
so we start
over.
If we successfully decremented, then return <code>true</code>.
</p>
<p>
The <code>Work&shy;Count</code> variable remembers
how much work there is for the consumer to do.
When the first piece of work arrives,
we wake the consumer,
and the consumer keeps draining the work until it's
all done.
</p>
<p>
Remember, there is only one consumer,
so if <code>Wake&shy;Consumer</code> is called
while <code>Consume&shy;Work</code> is still
running, the wake will not start a new consumer
immediately.
It will wait for the existing
<code>Consume&shy;Work</code> to complete
before starting a new
<code>Consume&shy;Work</code>.
</p>
<p>
Although this specific pattern may not be all that interesting,
it can be viewed as a building block
on top of which other patterns are built.
We'll look at one such next time.
</p>
<p>
<b>Exercise</b>:
Why couldn't the
<code>Interlocked&shy;Decrement&shy;To&shy;Zero</code>
function have been written like this?
</p>
<pre>
<i>// Code in italics is wrong.
LONG InterlockedDecrementToZero(LONG volatile* value)
{
 LONG original = *value;
 if (original == 0) return false;
 InterlockedDecrement(value);
 return true;
}</i>
</pre>
<p>
<b>Bonus chatter</b>:
We could have avoided having to write
the <code>Interlocked&shy;Decrement&shy;To&shy;Zero</code>
by writing this instead:
void ConsumeWork()
{
 LONG count = InterlockedExchange(&amp;WorkCount);
 for (LONG i = 0; i &lt; count; i++) {
  DoSomeWork();
 }
}</p>
<p>
Discuss.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1274735">
				<div id="div-comment-1274735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274735">
			November 23, 2016 at 7:41 am</a>		</div>

		<p>Exercise: is the answer because if two threads call (the bad version of) InterlockedDecrementToZero() at the same time, you could &#8216;skip&#8217; 0: if value is currently 1, both threads skip through the vs 0 check, then both threads call InterlockedDecrement() =&gt; you end up with value being -1.<br />
The correct implementation avoids this with the loop &amp; guard &#8211; &#8216;only apply the decrement if it will result in one less than the value when I started my thinking.&#8217;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1274745">
				<div id="div-comment-1274745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274745">
			November 23, 2016 at 7:48 am</a>		</div>

		<p>For the exercise, the write is atomic, but the read &amp; decrement are not an atomic unit. This leaves the possibility that thread A and thread B both read 1 into &#8220;original&#8221; , so the &#8220;return false&#8221; is skipped, and both execute the decrement, leaving -1 in *value.</p>
<p>Side note &#8211; shouldn&#8217;t the InterlockedExchange call in the bonus chatter be:<br />
LONG count = InterlockedExchange(&amp;WorkCount, 0);</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-petseral even depth-2 parent" id="comment-1274765">
				<div id="div-comment-1274765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/PetSerAl' rel='external nofollow' class='url'>PetSerAl</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274765">
			November 23, 2016 at 8:56 am</a>		</div>

		<p>I am agree with you about general purpose InterlockedDecrementToZero. But in given example we have only one consumer. So, function InterlockedDecrementToZero invoked only in one thread at time.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3" id="comment-1274945">
				<div id="div-comment-1274945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274945">
			November 24, 2016 at 3:19 pm</a>		</div>

		<p>I was writing a general purpose InterlockedDecrementToZero, because somebody is going to take this function and use it in a general-purpose way, unaware that there is an implicit assumption that there is only one consumer.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1274746">
				<div id="div-comment-1274746" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274746">
			November 23, 2016 at 8:05 am</a>		</div>

		<p>As far as the alternative is concerned, the main difference depends on how long doing one work takes vs how long a sleep/wake up cycle takes. (I&#8217;m assuming that the exchange functions are extremely fast comapred to those two, as they should.) If the work is short, then there is only a small probability that another work item gets queued, so fetching all the counts at once makes sense. If the work is longer, it might be better to decrement the value one by one so that if a producer comes in during the work, the worker will see the new work immediately, avoiding a sleep/wake (or post/get message).</p>
<p>(OTOH, I find the second version simpler, which given how hard multi-threaded code is, is a net win in my opinion. That DecrementToZero function is easy to get wrong.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1274815">
				<div id="div-comment-1274815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274815">
			November 23, 2016 at 7:47 pm</a>		</div>

		<p>I think you could avoid the redundant sleep/wake cycle by having a second interlocked variable using the &#8220;refresh&#8221; model.  But the overhead of doing the multiple decrements is probably trivial in almost all cases, so the added complexity would only be worth it if you can combine multiple operations together, e.g., a `DoSomeWork(n)` function which is faster than calling `DoSomeWork(1)` n times.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-shindohyun00 even thread-odd thread-alt depth-1" id="comment-1274757">
				<div id="div-comment-1274757" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DohyunShin' rel='external nofollow' class='url'>DohyunShin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274757">
			November 23, 2016 at 8:40 am</a>		</div>

		<p>Hi Chen,<br />
I have read your post &#8220;Querying information from an Explorer window&#8221; and it was helpful for me. Thank you.</p>
<p>I want to ask a question to you but I couldn&#8217;t write a comment at the post &#8220;Querying information from an Explorer window&#8221; because the comments are closed.<br />
Furthermore, I couldn&#8217;t find your e-mail address. So I writing this comment at this post. Sorry.</p>
<p>Anyway, My question is How can i get the full paths of selected (of focused) files by user&#8217;s click or keyboard in all currently open File Open Dialogs?<br />
This is the same as the content of the post &#8220;Querying information from an Explorer windows&#8221;. Difference is that the subject is File Open Dialog instead explorer windows.<br />
What should i do for this? </p>
<p>I&#8217;m trying to implement.<br />
Currently, I got the window handles of all currently open File Open Dialogs using EnumWindows().<br />
I plan to get the Item ListView handle of File Open Dialog using EnumChildWindows().<br />
And then I&#8217;ll get the name of selected (or focused) file using ListView macro (like ListView_GetItemText or ListView_GetSelectedCount).<br />
But My plan have a problem that can get not the full path but just name of file.</p>
<p>Do you have other solutions for this??</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1274775">
				<div id="div-comment-1274775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Max</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274775">
			November 23, 2016 at 9:19 am</a>		</div>

		<p>Could it have been written like this ?</p>
<p>if(InterlockedDecrement(value) == 0) return false;<br />
else return true;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1274785">
				<div id="div-comment-1274785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274785">
			November 23, 2016 at 9:50 am</a>		</div>

		<p>If there&#8217;s only one consumer, how can WorkCount be decremented by two threads simultaneously?</p>
<p>Also, the consumer may see the WorkCount as zero because the read isn&#8217;t synchronized, so the work won&#8217;t get done.  The variable is volatile but the meaning of that depends on the language (C or C++, which version?), the compiler and even the compiler options!</p>
<p><a href="https://msdn.microsoft.com/en-us/library/jj204392.aspx" rel="nofollow">https://msdn.microsoft.com/en-us/library/jj204392.aspx</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1274795">
				<div id="div-comment-1274795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274795">
			November 23, 2016 at 10:05 am</a>		</div>

		<p>Typo. Should be &#8220;if another thread changed the WorkCount while we were busy thinking.&#8221; Fixed.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1274796">
				<div id="div-comment-1274796" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274796">
			November 23, 2016 at 10:25 am</a>		</div>

		<p>&gt;Each time the user clicks the button, you want to run a transaction</p>
<p>&#8220;Customer service! I wanted to only buy one piece, but double-clicked the button by mistake, and it charged me for two!&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1274825">
				<div id="div-comment-1274825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274825">
			November 23, 2016 at 7:50 pm</a>		</div>

		<p>Since there is only a single consumer, I don&#8217;t see why you couldn&#8217;t use a more efficient decrement-to-zero function:</p>
<p>LONG SingleConsumerInterlockedDecrementToZero(LONG volatile* value)<br />
{<br />
 LONG original = *value;<br />
 if (original == 0) return false;<br />
 return (InterlockedDecrement(value) == 0);<br />
}</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1274875">
				<div id="div-comment-1274875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274875">
			November 24, 2016 at 2:35 am</a>		</div>

		<p>I can&#8217;t see how InterlockedDecrement can return zero &#8211; you just checked for it, and nothing else decrements it. (But then that reduces to the case which Raymond says is wrong, so I&#8217;m none the wiser.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1274925">
				<div id="div-comment-1274925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274925">
			November 24, 2016 at 3:01 pm</a>		</div>

		<p>InterlockedDecrement returns the new value, not the original value, so it will return zero if the counter started out as one and doesn&#8217;t get incremented in the meantime.  Of course, checking the new value is logically incorrect, so my version of the code is wrong &#8211; not because of a threading issue, it just does the wrong thing, skipping one work item every sleep/wake cycle.</p>
<p>If I understand Raymond&#8217;s latest comment correctly, the code posted as wrong is only wrong because it was intended to be a general-purpose InterlockedDecrementToZero.  It will work perfectly in the single-consumer case.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1274885">
				<div id="div-comment-1274885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274885">
			November 24, 2016 at 5:31 am</a>		</div>

		<p>This won&#8217;t work because (InterlockedDecrement(value) == 0) returns false when the value is larger than one.</p>
<p>However, Raymond&#8217;s InterlockedDecrementToZero with InterlockedDecrement should work correctly, if there is a guarantee that there exists only one consumer and WakeConsumer() just signals the existing consumer. The consumer is the only thread to decrement the value and it knows that the value is larger than zero so it can safely do atomic decrement. It does not matter that the read and decrement are separate because there is no one else to decrement the value and the decrement itself is atomic and does not use the original value that was read. The code would be wrong if the decrementation were done by writing &#8220;value = (original &#8211; 1);&#8221;, because the original value may have been incremented after it was read.</p>
<p>The first InterlockedDecrementToZero with InterlockedCompareExchange is needed when there are more than one consumer.</p>
<p>I would write ConsumeWork() a bit differently, though. In ConsumeWork() I would ensure that the WorkCount is not zero (although it should never be) and then I would first DoSomeWork() and then decrement the WorkCount. If there were any work left (i.e. WorkCount &gt; 0 after decrementation), I would loop back to DoSomeWork() again. In InterlockedDecrementToZero() I would check the value after the decrementation and return true if the value were non-zero.</p>
<p>void ConsumeWork()<br />
{<br />
    if (InterlockedCompareExchange(&amp;WorkCount, 0, 0) &gt; 0) {<br />
        do {<br />
            DoSomeWork();<br />
        } while (InterlockedDecrement(&amp;WorkCount) &gt; 0);<br />
    }<br />
}</p>
<p>This implementation decreases the number of unneeded WakeConsumer() calls, because the WorkCount is always non-zero when a consumer is running and doing work. The consumer decrements the WorkCount to zero just before it is about to exit so even if WakeConsumer() were to start a new consumer thread there would be no more than one active consumer running at a time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1274895">
				<div id="div-comment-1274895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274895">
			November 24, 2016 at 7:26 am</a>		</div>

		<p>True, we can simplify if there is a single consumer, but I was looking at a generalized InterlockedDecrementToZero function.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1274905">
				<div id="div-comment-1274905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274905">
			November 24, 2016 at 8:03 am</a>		</div>

		<p>Ah, <em>that&#8217;s</em> why I couldn&#8217;t figure out the exercise! That was really bugging me. Thanks for clarifying.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1274955">
				<div id="div-comment-1274955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274955">
			November 25, 2016 at 6:34 am</a>		</div>

		<p>Actually, I thought the bug was that reading a variable without a read/write barrier is not guaranteed to be correct? The Interlocked functions act as the barriers and prevent weird things happening between multiple processors with incoherent caches.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1274845">
				<div id="div-comment-1274845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ismo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274845">
			November 23, 2016 at 9:09 pm</a>		</div>

		<p>Why limit consumers to one ? I would limit them to number of cores ( or one smaller) if performance is wanted. Or monitor cpu load and aim for near 100%. But that would complicated things and perhaps this would use threadpool.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1274855">
				<div id="div-comment-1274855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274855">
			November 23, 2016 at 9:54 pm</a>		</div>

		<p>I believe Raymond is assuming a scenario where multi-threading the consumer doesn&#8217;t make sense.  For example, the consumer might be updating the GUI, which is something you pretty much never want to multi-thread; if the consumer deals with a memory structure that needs to be kept consistent, and does not require a lot of CPU, single-threading can often be more efficient than multi-threading; or perhaps the consumer communicates with a remote service which only allows you a single connection (for whatever reason).</p>
<p>In at least some cases, the whole point of using the producer-consumer pattern is to interface between a task that is naturally multi-threaded and a task that is naturally single-threaded.  Often, if the consumer could sensibly be multi-threaded, there&#8217;d be no need for the queue in the first place &#8211; you could just consume the data in the same thread that produced it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1274935">
				<div id="div-comment-1274935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161123-00/?p=94766#comment-1274935">
			November 24, 2016 at 3:07 pm</a>		</div>

		<p>I&#8217;m tempting fate here after yesterday&#8217;s blunder, but I think this even simpler approach would also work:</p>
<p>void ConsumeWork()<br />
{<br />
  if (WorkCount &gt; 0) do<br />
  {<br />
     DoSomeWork();<br />
  } while (InterlockedDecrement(&amp;WorkCount) &gt; 0);<br />
}</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

