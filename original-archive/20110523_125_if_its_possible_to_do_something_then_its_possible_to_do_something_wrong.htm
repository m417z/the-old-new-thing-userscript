<html>
<head>
<title>If it's possible to do something, then it's possible to do something WRONG</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If it&#8217;s possible to do something, then it&#8217;s possible to do something WRONG</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 23, 2011 / year-entry #126</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Once you make it possible to do something, you have to accept that you also made it possible to do something wrong. When the window manager was originally designed, it made it possible for programs to override many standard behaviors. They could handle the WM_NC­HIT­TEST message so a window can be dragged by grabbing any...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Once you make it possible to do something,
you have to accept that you also made it possible to do something <i>wrong</i>.
</p>
<p>
When the window manager was originally designed,
it made it possible for programs to override many standard behaviors.
They could handle the <code>WM_<wbr>NC&shy;HIT&shy;TEST</code> message
<a HREF="http://support.microsoft.com/kb/320687">
so a window can be dragged by grabbing any part of the window,
not just the caption bar</a>.
They could handle the <code>WM_<wbr>NC&shy;PAINT</code> message
to draw custom title bars.
The theory was that making all of these things possible
permitted smart people to do clever things.
</p>
<p>
The downside is that it also permits stupid people to do dumb things.
</p>
<p>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/01/24/7213752.aspx#7225416">
Changing the window procedure model from
<i>call <code>Def&shy;Window&shy;Proc</code> to get default behavior</i>
to
<i>return whether you handled the message</i></a>
wouldn't have helped.
First of all, the handled/not-handled model is too restrictive:
It requires you to do <i>everything</i> (handled)
or <i>nothing</i> (not handled).
There is no option to do <i>a little bit</i>.
(Imagine if C++ didn't let you call the base class implementation
of an overridden method.)
</p>
<p>
Doing <i>a little bit</i> is a very common pattern.
The <code>WM_<wbr>NC&shy;HITTEST</code> technique mentioned above,
for example, uses the default hit-testing implementation,
and then tweaks the result slightly:
</p>
<pre>
case WM_NCHITTEST:
 // call base class first
 lres = DefWindowProc(hwnd, uMsg, wParam, lParam);
 // tweak the result
 if (lres == HTCLIENT) lres = HTCAPTION;
 return lres;
</pre>
<p>
How would you do this with the handled/not-handled model?
</p>
<pre>
case WM_NCHITTEST:
 if (not handling this message would have resulted in HTCLIENT) {
  lres = HTCAPTION;
  handled = TRUE;
 } else {
  handled = FALSE;
 }
 break;
</pre>
<p>
The trick about that bit in parentheses is that it requires
the research department to finish the final details on that
time machine they've been working on.
It's basically saying, "Return <i>not handled</i>,
then follow the message until handling is complete
and if the final result is <code>HTCLIENT</code>,
then fire up the time machine and rewind to this point
so I can change my mind and return <i>handled</i> instead."
</p>
<p>
And even if the research department comes through with that
time machine,
the handled/not-handled model doesn't even solve the original problem!
</p>
<p>
The original problem was people failing to call
<code>Def&shy;Window&shy;Proc</code>
when they decided that they didn't want to handle a message.
In the handled/not-handled model, the equivalent problem would be
people returning <code>handled = TRUE</code> unconditionally.
</p>
<pre>
BOOL NewStyleWindowProc(HWND hwnd, UINT uMsg,
 WPARAM wParam, LPARAM lParam, LRESULT&amp; lres)
{
 BOOL handled = TRUE;
 switch (uMsg) {
 case WM_THIS: ...; break;
 case WM_THAT: ...; break;
 // no "default: handled = FALSE; break;"
 }
 return handled;
}
</pre>
<p>
(Side note: The dialog manager uses the handled/not-handled model,
and
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/11/07/55619.aspx#55623">
some people would prefer that it use the
<code>Def&shy;Xxx&shy;Proc</code> model</a>,
so you might say "We tried that, and some people didn't like it.")
</p>
<p>
This topic raises another one of those "No matter what you do,
somebody will call you an idiot" dilemmas.
On the one side, there's the
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/01/24/7213752.aspx#7230191">
<i>Windows should perform extra testing at runtime to
detect bad applications</i></a> school,
and on the other side, there's the
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2007/07/17/3903614.aspx#3918131">
<i>Windows should get rid of all the code whose sole purpose
in life is to detect bad applications</i></a> school.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-914523">
				<div id="div-comment-914523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914523">
			May 23, 2011 at 7:30 am</a>		</div>

		<p>I was not specifically calling for the removal of that code; all I was saying is that at some point the cost of maintaining backward compatibility outweighs the benefit. &nbsp;The larger point is that if you continue to allow people to do something wrong, they will continue to do it wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914533">
				<div id="div-comment-914533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914533">
			May 23, 2011 at 8:20 am</a>		</div>

		<p>That quote should be the first thing every developer learns.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914563">
				<div id="div-comment-914563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914563">
			May 23, 2011 at 9:21 am</a>		</div>

		<p>With good docs &amp; apis the probability for wrongness decreases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914573">
				<div id="div-comment-914573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914573">
			May 23, 2011 at 10:08 am</a>		</div>

		<p>&lt;quote name=&quot;640k&quot;&gt;</p>
<p>With good docs &amp; apis the probability for wrongness decreases.</p>
<p>&lt;/quote&gt;</p>
<p>No, nothing can help the ignorant. &nbsp;They will always blindly find the one way of misusing your API for something that you never intended, then demand that your &quot;feature&quot; be supported.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914583">
				<div id="div-comment-914583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914583">
			May 23, 2011 at 10:09 am</a>		</div>

		<p>@640k: The probability that someone will not read them remains, unfortunately, fairly static.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914593">
				<div id="div-comment-914593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul M. Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914593">
			May 23, 2011 at 10:10 am</a>		</div>

		<p>ACK! 640 did not post the comment about people not reading documentation, I did. I didn&#39;t read the documentation above the &quot;Name&quot; text box. Sorry, 640k.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914603">
				<div id="div-comment-914603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914603">
			May 23, 2011 at 11:00 am</a>		</div>

		<p>&gt; &quot;Return not handled, then follow the message until handling is complete and if the final result is HTCLIENT, then fire up the time machine and rewind to this point so I can change my mind and return handled instead.&quot;</p>
<p>I think the time machine you are talking about already exists, and is called &quot;call/cc&quot;. You just have to return a continuation, and have the message handling call it with the final result when it is finished. The control flow will magically rewind to the correct place, and now you know the final result. Easy, right?</p>
<p>(Note: of course I am joking. Implementing call/cc in C would be insane. And I am not responsible if anyone decides to google &quot;call/cc&quot; and ends up with a headache.)</p>
<div class="post">[<i>call/cc is not a time machine. In this case, it&#39;s a &quot;back-end hook&quot;, which logically brings us back to where we started. (Code running before and after the default behavior.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914623">
				<div id="div-comment-914623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Caron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914623">
			May 23, 2011 at 11:22 am</a>		</div>

		<p>@Cesar: Bringing it back to the original problem, how does this help the &quot;always return handled&quot; case?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914633">
				<div id="div-comment-914633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Burak KALAYCI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914633">
			May 23, 2011 at 12:09 pm</a>		</div>

		<p>&gt; (Imagine if C++ didn&#39;t let you call the base class implementation of an overridden method.)</p>
<p>It makes no difference&#8230; to me&#8230;</p>
<p>Because I don&#39;t use C++. </p>
<p>I proudly use Delphi. </p>
<p>And if Delphi didn&#39;t let me call the base class implementation of an overridden method, OMG! I get it now.</p>
<p>I tend to forget the official language of this blog is C/C++&#8230;</p>
<div class="post">[<i>I choose a language that most of my readers are likely to understand. Sorry it&#39;s not your preferred language. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914643">
				<div id="div-comment-914643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914643">
			May 23, 2011 at 12:48 pm</a>		</div>

		<p>@Mike Caron:</p>
<blockquote><p>
  how does this help the &quot;always return handled&quot; case?
</p></blockquote>
<p>It doesn&#39;t. It, however, either satisfies both sides (we have BOTH the Def*Proc and the &quot;return handled&quot; options!) or annoys both sides (if they think being able to do it the other way is wrong). It is a democratic option ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914653">
				<div id="div-comment-914653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Burak KALAYCI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914653">
			May 23, 2011 at 1:21 pm</a>		</div>

		<p>[I choose a language that most of my readers are likely to understand. Sorry it&#39;s not your preferred language. -Raymond]</p>
<p>Dear Raymond, as you probably are aware, my post was to illustrate the C/C++ bias in your posts. You did not have to specify any language at all, because the concept applies to all languages which provide OOP, but you did say C++ and I bet you did it just to eliminate C there (as if no other language existed).</p>
<p>And I&#39;m sorry Delphi isn&#39;t your preferred language :)</p>
<div class="post">[<i>I did it to pre-empty nitpickers who would say &quot;Your sentence is wrong because not all languages have the concept of base classes.&quot; Even if I had written &quot;in a language which provides OOP&quot;, the nitpick would be &quot;Your sentence is wrong because programming language X is OOP but does not provide for explicit invoke of the base class.&quot; I specifically said &quot;C++&quot; so that the statement would be correct. This is not mathematical research, where the you want to maximally weaken the assumptions in order to make the conclusion as strong as possible. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914663">
				<div id="div-comment-914663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914663">
			May 23, 2011 at 1:55 pm</a>		</div>

		<p>IntelliTrace can run code backwards. There&#39;s you time machine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914673">
				<div id="div-comment-914673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914673">
			May 23, 2011 at 1:58 pm</a>		</div>

		<p>Dave Mendlen, Senior Director at Microsoft, refers to IntelliTrace as a &ldquo;time machine.&rdquo;</p>
<p><a target="_new" href="http://msdn.microsoft.com/en-us/gg512834.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/gg512834.aspx</a></p>
<div class="post">[<i>Yeah, but it&#39;s a read-only time machine. You can&#39;t go back in time, change a variable, and then resume execution from that point with the new value. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914683">
				<div id="div-comment-914683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914683">
			May 23, 2011 at 2:48 pm</a>		</div>

		<p>I&#39;m sure it&#39;s just a small matter of coding to turn a read-only time machine into a read-write version. Right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914693">
				<div id="div-comment-914693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914693">
			May 23, 2011 at 4:45 pm</a>		</div>

		<p>We are in possession of a time machine. At this time we have dared not activate it yet because we don&#39;t know how to control it and don&#39;t want to end up on Camezotz.</p>
<p>We have already determined it cannot be controlled roboticly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914703">
				<div id="div-comment-914703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914703">
			May 23, 2011 at 4:47 pm</a>		</div>

		<p>A new item to add to my collection of &quot;life rules&quot;:</p>
<p>&nbsp;&#8211; Chen&#39;s Theorem of Ultimate Optimization: You can do nothing really fast</p>
<p>&nbsp;&#8211; Chen&#39;s Law of Provable Correctness: &nbsp; &nbsp; &nbsp;If you don&#39;t do anything, you can&#39;t do it wrong</p>
<p>&nbsp;&#8211; Chen&#39;s Inverse Correctness Corollary: &nbsp; &nbsp;If it&#39;s possible to do something, then it&#39;s possible to do something WRONG</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914613">
				<div id="div-comment-914613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914613">
			May 23, 2011 at 11:11 am</a>		</div>

		<p>As an aside: I think you could easily combine the Def*Proc model with the &quot;return handled&quot; model.</p>
<p>Just call the Def*Proc if the program returned &quot;not handled&quot;. You could still call it by hand and return &quot;handled&quot; if you wanted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914713">
				<div id="div-comment-914713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914713">
			May 23, 2011 at 8:49 pm</a>		</div>

		<p>@mikeb: That&#39;s extension to Murphy&#39;s law that every programmer ought to take into account whenever designing software.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914743">
				<div id="div-comment-914743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Humus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914743">
			May 24, 2011 at 8:00 am</a>		</div>

		<blockquote><p>
  On the one side, there&#39;s the Windows should perform extra testing at runtime to detect</p>
<p>  bad applications school, and on the other side, there&#39;s the Windows should get rid of</p>
<p>  all the code whose sole purpose in life is to detect bad applications school.
</p></blockquote>
<p>Let&#39;s do both!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914823">
				<div id="div-comment-914823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ooh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914823">
			May 24, 2011 at 10:34 am</a>		</div>

		<p>@Humus: LOL! Too good to be true :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-914853">
				<div id="div-comment-914853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914853">
			May 24, 2011 at 12:36 pm</a>		</div>

		<p>@Cheong: I see. &nbsp;I&#39;ll have to start reading this guy Murphy&#39;s blog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914963">
				<div id="div-comment-914963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110523-00/?p=10593#comment-914963">
			May 24, 2011 at 11:07 pm</a>		</div>

		<p>@MikeB: Your theorems have made it onto the office wall :)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

