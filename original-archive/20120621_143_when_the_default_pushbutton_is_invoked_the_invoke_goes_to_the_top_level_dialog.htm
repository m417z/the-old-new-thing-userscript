<html>
<head>
<title>When the default pushbutton is invoked, the invoke goes to the top-level dialog</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When the default pushbutton is invoked, the invoke goes to the top-level dialog</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 21, 2012 / year-entry #144</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120621-00/?p=7313</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One quirk of nested dialogs lies in what happens when the user presses Enter to invoke the default pushbutton: The resulting WM_COMMAND message goes to the top-level dialog, even if the default pushbutton belongs to a sub-dialog. Why doesn't it send the WM_COMMAND to the parent of the default pushbutton? I mean, the dialog manager...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One quirk of nested dialogs lies in what happens when the user
presses Enter to invoke the default pushbutton:
The resulting
<code>WM_<wbr>COMMAND</code> message
<i>goes to the top-level dialog</i>,
even if the default pushbutton belongs to a sub-dialog.
</p>
<p>
Why doesn't it send the <code>WM_<wbr>COMMAND</code> to the parent
of the default pushbutton?
I mean, the dialog manager knows the handle of the button,
so it can send the message to the button's parent, right?
</p>
<p>
Well, the dialog manager knows the handle of <i>a</i> button.
But not necessarily <i>the</i> button.
Recall that if focus is not on a pushbutton,
then the dialog manager sets the default pushbutton
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/06/19/10321772.aspx">
based on the control ID returned
by the <code>DM_<wbr>GET&shy;DEF&shy;ID</code> message</a>,
and it does this by just searching the dialog for a control with that ID.
If you have two controls with the same ID, it picks one of them
arbitrarily.
So far so bad.
</p>
<p>
It's like having two John Smiths living in your house,
one in the second bedroom and one living in the guest
room.
The post office is very strict and won't let you
write
"John Smith, Second Bedroom, 1 Main Street"
and
"John Smith, Guest Room, 1 Main Street."
All you're allowed to write is a name and an address.
Therefore, all the mail addressed to
"John Smith, 1 Main Street" ends up in a single mailbox
labeled
"1 Main Street" and now you have to figure out who gets each
piece of mail.
</p>
<p>
Okay, so we saw that when converting an ID to a window,
and there are multiple windows with the same ID,
the dialog manager will just pick one  arbitrarily.
And if it picks the wrong one,
it would have sent the <code>WM_<wbr>COMMAND</code> to the wrong
dialog procedure entirely!
At least by sending it to the top-level dialog, it says,
"Dude, I think it's this window but I'm not sure, so if you have
some really clever way of telling which is which, you can try to sort it out."
And now that the <code>WM_<wbr>COMMAND</code> <i>sometimes</i>
goes to the top-level dialog,
you're pretty much stuck having it <i>always</i> go to the top-level
dialog for consistency.
It's better to be consistently wrong in a predictable manner
(so people can work around it reliably)
than to be mostly-right and occasionally-completely-wrong.
</p>
<p>
Third rationale:
Because you're asking for code to be written to handle a case
that people shouldn't have gotten into in the first place.
(Namely, duplicate control IDs.)
</p>
<p>
Whatever the reason, it's something you need to be on the lookout for.
If you did everything right and avoided control ID duplication,
then the workaround in your
<code>WM_<wbr>COMMAND</code> handler is straightforward:
</p>
<pre>
void OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify)
{
    if (hwndCtl != nullptr)
    {
        HWND hwndCtlParent = GetParent(hwndCtl);
        if (hwndCtlParent != nullptr &amp;&amp;
            hwndCtlParent != hwnd &amp;&amp;
            IsChild(hwnd, hwndCtlParent))
        {
           FORWARD_WM_COMMAND(hwndCtlParent, id,
                              hwndCtl, codeNotify, SendMessage);
           return;
        }
    }
    ... the message was for me after all, so let's handle it...
    switch (id)
    {
    ...
    }
}
</pre>
<p>
When we get the <code>WM_<wbr>COMMAND</code> message,
we first check that it really came from one of our direct
children.
If not, then we forward the message on to the control's
actual parent.
(The window that should have gotten the message in the first place
in an ideal world.)
</p>
<p>
<b>Exercise</b>:
Under what circumstances can the above workaround fail?
(Not counting the scenario we've spent the past three days discussing.)
</p>
<p>
Anyway, back to the question from last time:
How does the property sheet manager deal with multiple property sheets
pages having conflicting control IDs?
In addition to what we previously discussed,
another mitigating factor is that the property sheet manager
keeps only one child dialog visible at a time.
This takes the hidden child dialogs out of the running for most
dialog-related activities, such as dialog navigation,
since invisible controls cannot be targets of dialog navigation.
Furthermore, hidden child dialogs are skipped when searching
for keyboard accelerators,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2008/06/02/8568490.aspx">
thereby avoiding the problem of hidden accelerators</a>.
So as long as the property sheet manager makes sure that focus
doesn't stay on a hidden control after a page change,
there shouldn't be any notifications coming from a hidden child dialog.
The only conflicts it needs to worry about are conflicts
between the page and the frame.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-993043">
				<div id="div-comment-993043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120621-00/?p=7313#comment-993043">
			June 21, 2012 at 7:25 am</a>		</div>

		<p>By the way, Raymond, I don&#39;t think it&#39;s appropriate to compare HWND to nullptr. It&#39;s not a real pointer. Compare it to NULL, because all APIs have C conventions, not C++.</p>
<div class="post">[<i>nullptr and NULL (in pointer context) are both null pointer constants, so it doesn&#39;t matter which one you pick. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-993053">
				<div id="div-comment-993053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120621-00/?p=7313#comment-993053">
			June 21, 2012 at 7:48 am</a>		</div>

		<p>nullptr is valid C++11, but I don&#39;t see any mention of it in C11 Wikipedia page&#8230; &nbsp;I guess it&#39;s not in C yet (if it ever will be).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-993063">
				<div id="div-comment-993063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120621-00/?p=7313#comment-993063">
			June 21, 2012 at 8:10 am</a>		</div>

		<p>@JamesJohnston: It won&#39;t be. No need in C.</p>
<p>The workaround code doesn&#39;t work if the two controls have the same parent.</p>
<p>The workaround code doesn&#39;t work if the OK button is inside a group box (or its moral equivalent).</p>
<div class="post">[<i>If the two controls have the same parent, then that common parent receives the notification, just like you expect. And if it&#39;s inside another window, then the notification is delivered to the control&#39;s immediate parent, just like it does for all other notifications.&nbsp;Try again.&nbsp;-Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-993073">
				<div id="div-comment-993073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120621-00/?p=7313#comment-993073">
			June 21, 2012 at 8:19 am</a>		</div>

		<p>nullptr is not in C, but that doesn&#39;t entirely matter since Raymond&#39;s scratch program on which this snippet is build is written in C++, not C (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2005/04/22/410773.aspx" rel="nofollow">blogs.msdn.com/&#8230;/410773.aspx</a>). &nbsp;If someone wants to convert it to C, they should be smart enough to handle replacing nullptr with NULL.</p>
<p>It looks like Raymond&#39;s been using nullptr since around April or so, according to a search for &quot;nullptr oldnewthing site:blogs.msdn.com&quot;. &nbsp;But this is the first time I actually noticed it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-993083">
				<div id="div-comment-993083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120621-00/?p=7313#comment-993083">
			June 21, 2012 at 8:34 am</a>		</div>

		<p>[And if it&#39;s inside another window, then the notification is delivered to the control&#39;s immediate parent]</p>
<p>Infinite recursion. The group box will forward to its parent. If that is _you_ you&#39;ll forward to group box again.</p>
<div class="post">[<i>Right, if the control&#39;s parent forwards to the grandparent, you&#39;ll get stuck in a loop.&nbsp;The parent window needs to know that &quot;Oh, this one&#39;s mine, thanks.&quot;&nbsp;-Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-993093">
				<div id="div-comment-993093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120621-00/?p=7313#comment-993093">
			June 21, 2012 at 9:43 am</a>		</div>

		<p>Is the IsChild check really required? It will protect you from a stray message where the hwndCtl is not part of the tree at all but the normal switch does not have this check. Does it serve any other purpose that I&#39;m missing? Some kind of infinite loop perhaps?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-993103">
				<div id="div-comment-993103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120621-00/?p=7313#comment-993103">
			June 21, 2012 at 10:47 am</a>		</div>

		<p>@WndSks: You know you can get WM_COMMAND message from outside controls on specific request right?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

