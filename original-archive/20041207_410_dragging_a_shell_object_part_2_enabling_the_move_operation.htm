<html>
<head>
<title>Dragging a shell object, part 2: Enabling the Move operation</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Dragging a shell object, part 2: Enabling the Move operation</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 7, 2004 / year-entry #411</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Let's say that we did want to support Move in our drag/drop program, for whatever reason. Let's do it with some scratch file instead of clock.avi, though. Create a file somewhere that you don't mind losing; let's say it's C:\throwaway.txt. Change the function OnLButtonDown as follows: void OnLButtonDown(HWND hwnd, BOOL fDoubleClick, int x, int y,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Let's say that we did want to support Move in our
drag/drop program, for whatever reason.
Let's do it with some scratch file instead
of <code>clock.avi</code>, though.  Create a file somewhere
that you don't mind losing; let's say it's <code>C:\throwaway.txt</code>.
Change the function <code>OnLButtonDown</code> as follows:
</p>
<pre>
void OnLButtonDown(HWND hwnd, BOOL fDoubleClick,
                   int x, int y, UINT keyFlags)
{
  IDataObject *pdto;
  if (SUCCEEDED(GetUIObjectOfFile(hwnd,
                    <font COLOR=blue>L"C:\\throwaway.txt"</font>,
                    IID_IDataObject, (void**)&amp;pdto))) {
    IDropSource *pds = new CDropSource();
    if (pds) {
      DWORD dwEffect;
      <font COLOR=blue>if (DoDragDrop(pdto, pds,
                 DROPEFFECT_COPY | DROPEFFECT_LINK | DROPEFFECT_MOVE,
                 &amp;dwEffect) == DRAGDROP_S_DROP) {
        if (dwEffect &amp; DROPEFFECT_MOVE) {
          DeleteFile(TEXT("C:\\throwaway.txt"));
        }
      }</font>
      pds-&gt;Release();
    }
    pdto-&gt;Release();
  }
}
</pre>
<p>
Oh wait, there are people out there who think I'm advocating hard-coded
paths, so let me change the program to operate on a path passed on the
command line.
This is code that is purely a distraction from the point of this
article, which is why I avoided it originally.
Personally I dislike it when somebody hands me a sample program
that is 90% unrelated to the technology the program is trying to demonstrate.
I have to go
digging through the code hunting for the 10% of stuff that matters.
</p>
<pre>
<font COLOR=blue>#include &lt;shellapi.h&gt;

LPWSTR *g_argv;
LPCWSTR g_pszTarget;</font>

void OnLButtonDown(HWND hwnd, BOOL fDoubleClick,
                   int x, int y, UINT keyFlags)
{
  IDataObject *pdto;
  if (SUCCEEDED(GetUIObjectOfFile(hwnd,
                    <font COLOR=blue>g_pszTarget</font>,
                    IID_IDataObject, (void**)&amp;pdto))) {
  ...
          DeleteFile<font COLOR=blue>W(g_pszTarget</font>);
  ...
}

BOOL
InitApp(void)
{
  <font COLOR=blue>int argc;
  g_argv = CommandLineToArgvW(GetCommandLineW(), &amp;argc);
  if (!g_argv || argc != 2) return FALSE;
  g_pszTarget = g_argv[1];
  if (PathIsRelative(g_pszTarget)) return FALSE;</font>
  ...
}
</pre>
<p>
Woo-hoo, eight distracting lines of code that have nothing to do
with the subject of dragging shell objects around.  I hope you're
happy.
</p>
<p>
Where was I?  Oh right, explaining the first batch of blue code
that by now has scrolled off your screen thanks to the intervening
meaningless drivel.
</p>
<p>
Now that we allow move, we need to check whether the resulting effect
was <code>DROPEFFECT_MOVE</code>, which tells us,
"The drop target wanted to perform a move operation, but it only
got as far as copying the object; please finish the move operation
by deleting the original."
</p>
<p>
Notice that <code>DROPEFFECT_MOVE</code> does <strong>not</strong>
mean, "The drop target performed a move."
Rather, it tells you that the drop target wants you to delete
the original.
If the drop target was able to delete the original (or move it
directly), then you will not get
<code>DROPEFFECT_MOVE</code> back.
</p>
<p>
(One case where <code>DROPEFFECT_MOVE</code> doesn't even mean
that a Move operation occurred at all is if the user dragged
the object to an "Incinerator" icon, the purpose of which is
to destroy whatever is dropped onto it.  In this case the
Incinerator would return <code>DROPEFFECT_MOVE</code> without
even making a copy. Result: The object is deleted.
A better name for <code>DROPEFFECT_MOVE</code> would have been
<code>DROPEFFECT_DELETEORIGINAL</code>.)
</p>
<p>
If the data object represents a file, then the shell is pretty
good at figuring out how to move the file to the destination
instead of copying it and asking you to delete the original.
You will typically get <code>DROPEFFECT_MOVE</code> back only
if the data object represents a non-file, since in that case
the shell doesn't know how to delete the original.
</p>
<p>
But what if you want to know whether the operation was a move,
regardless of whether the operation was optimized by the drop
target?
We'll look at that next time.
</p>
<p>
(By the way, if you execute a Move of the throwaway file,
don't forget to move it back so you can run the scratch
program again!)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-232913">
				<div id="div-comment-232913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-232913">
			December 7, 2004 at 7:24 am</a>		</div>

		<p>Oh well, sorry for the bad formatting&#8230; I don&#8217;t know how to make this appear correctly..</p>
<p>Regards,</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-232943">
				<div id="div-comment-232943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-232943">
			December 7, 2004 at 7:35 am</a>		</div>

		<p>Anonymous,<br />
<br />  Then you wouldn&#8217;t be able to compile the example and run it &#8211; the point of the series is that you can try these examples yourself because they&#8217;re full examples.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-232963">
				<div id="div-comment-232963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mschaef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-232963">
			December 7, 2004 at 7:47 am</a>		</div>

		<p>&quot;Voila, everybody wins !! &quot;</p>
<p>Raymond is doing the community a service with his posts (which are done on his own time, IIRC). Rather than looking for a solution in which &quot;everybody wins&quot;, maybe we should just be thankful that Raymond bothers with this at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-232983">
				<div id="div-comment-232983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eugene</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-232983">
			December 7, 2004 at 8:04 am</a>		</div>

		<p>He didn&#8217;t have to do it in such a condescending way just to prove a point, IMHO. He preferred to stick the command line work inline, defer explanations of the actual point of interest until he did it, and then complained how irrelevant part obscurs the relevant &#8211; when he could have moved the comand line-related code into a function and called it in place of the hard-coded path instead, just to prove a meaningless point.</p>
<p>Well, the code doesn&#8217;t obscur anything in this case &#8211; the programmer does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-233003">
				<div id="div-comment-233003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233003">
			December 7, 2004 at 8:22 am</a>		</div>

		<p>Moving the command line code into a function and calling it when I needed the path would have created a potential security hole. Though not the case for command lines, a general function would permit the opportunity for the function to return a different path each time, resulting in the wrong file being deleted. It also would have opened the issue of &quot;who frees the memory&quot; which I also wanted to avoid.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-233023">
				<div id="div-comment-233023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jasmusic.com' rel='external nofollow' class='url'>Joshua Schaeffer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233023">
			December 7, 2004 at 8:57 am</a>		</div>

		<p>Don&#8217;t worry kids, mommy has your bottle.</p>
<p>In the meantime, I&#8217;m glad I&#8217;m finally getting a simple primer on dragging shell objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-233033">
				<div id="div-comment-233033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mschaef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233033">
			December 7, 2004 at 9:20 am</a>		</div>

		<p>&quot;I&#8217;m glad I&#8217;m finally getting a simple primer on dragging shell objects. &quot;</p>
<p>Likewise.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-233043">
				<div id="div-comment-233043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://kreiger.linuxgods.com/' rel='external nofollow' class='url'>Christoffer &quot;Kreiger&quot; Hammarstr&#246;m</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233043">
			December 7, 2004 at 9:23 am</a>		</div>

		<p>Raymond: I&#8217;m sorry to say that you sound rather childish when bitching about having to write proper code. I&#8217;m rather disappointed in you.</p>
<p>Next time, just call a non-existent pretend method GetFilenameOrWhatever() {&#8230;} and leave its implementation up to the audience. I know, they won&#8217;t be able to copy-paste-run the example. Big deal.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-233063">
				<div id="div-comment-233063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233063">
			December 7, 2004 at 9:28 am</a>		</div>

		<p>Copy/paste/run is important because I often will talk about behavior you encounter while running the program, and if we&#8217;re not all running the same program, the discussion will be harder to follow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-233083">
				<div id="div-comment-233083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ac</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233083">
			December 7, 2004 at 9:50 am</a>		</div>

		<blockquote><p>
  &gt; Personally I dislike it when somebody hands me a sample program that is 90% unrelated to the technology the program is trying to demonstrate. I have to go digging through the code hunting for the 10% of stuff that matters. &lt;&lt;</p>
<p>Hey, I think this (almost) everytime I visit CodeProject. Unfortunately, the people who do the right thing by posting a simple console program get criticised for it. Many people must like sifting through hundreds of lines of irrelevant GUI code to find the dozen or so lines that implement the target functionality.</p>
<p>Please keep your tactic of limiting the irrelevant code to the bare minimum.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-233103">
				<div id="div-comment-233103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Bruyere</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233103">
			December 7, 2004 at 10:26 am</a>		</div>

		<p>I agree w/ac &amp; mschaef:<br />
<br />Raymond is doing us ALL a favour and personally I am smart enought to understand that C:WindowsClock.avi is and example for &quot;Any darn file you want&quot;. </p>
<p>I would rather Raymond use that example to create a running example than include a whole bunch of meaningless GUI code (like ac said) that might or migth not compile because of some weird library the orignal programmer is using. </p>
<p>Thank you Raymond for your great articles. I have more respect for Windows and MS developers after reading your articles and I really appreciate your efforts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-233113">
				<div id="div-comment-233113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fat Agnus and Denise</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233113">
			December 7, 2004 at 10:30 am</a>		</div>

		<p>Anybody claiming that GetFilenameOrWhatever (with implementation left to the user) is actually better than hardcoded path is out of frikkin mind. Time to deflate your egos.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-233153">
				<div id="div-comment-233153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">camillo vezzoli</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233153">
			December 7, 2004 at 10:55 am</a>		</div>

		<p>Rayomond, you&#8217;re a lot of fun!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-233163">
				<div id="div-comment-233163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233163">
			December 7, 2004 at 11:05 am</a>		</div>

		<p>OT: Might want to drop a note to the SDK team that the documentation for CommandLineToArgvW is incorrect. It claims GlobalFree should be used to free the returned pointer, when actually LocalFree should be used, as the function allocates the memory with LocalAlloc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-233183">
				<div id="div-comment-233183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Heffernan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233183">
			December 7, 2004 at 12:22 pm</a>		</div>

		<p>The point of an example is to demonstrate and illustrate an idea.  What you do with an example is examine it until you &lt;em&gt;understand&lt;/em&gt; it.</p>
<p>Bearing this in mind it is clear that the original post with clock.avi and no clutter is the best way to illustrate the idea.</p>
<p>I think it&#8217;s time the whole sorry saga was forgotten and for the people who complain to leave quietly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-233223">
				<div id="div-comment-233223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.bigbeardy.co.uk' rel='external nofollow' class='url'>Mat Hall</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233223">
			December 7, 2004 at 1:35 pm</a>		</div>

		<p>For the last time, I WASN&#8217;T COMPLAINING!  Jeez, some people are waaaaay too sensitive, or have a humour deficiency&#8230;  I just thought it was a quick comedy dig that Raymond is always telling us about the developers who have caused Windows to be filled with bizarre workarounds because they&#8217;d made assumptions and lo and behold there was just such an assumption.</p>
<p>I think I&#8217;ll just go away until everyone has calmed down&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-233253">
				<div id="div-comment-233253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eep</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233253">
			December 7, 2004 at 2:54 pm</a>		</div>

		<p>Mat, I think it&#8217;s reasonably obvious you were tongue in cheek with your posts the other day, but it sparked off some others who seemed to think it was a serious issue that people might take Raymond&#8217;s code and plug it straight into their own apps.  I think anyone who does something like that deserves what they get &#8211; you use examples for learning, not for solving your problem without bothering to learn.  I don&#8217;t think Raymond needed to sound quite so pissy about it, but it&#8217;s his journal, and I think I would be a bit ticked off with people like that as well ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-233273">
				<div id="div-comment-233273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Candy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233273">
			December 7, 2004 at 3:15 pm</a>		</div>

		<p>I start all programs with hard coded paths. Hard coded everything. As the program starts to work I go back and change hard coded things. I know how to find paths et al (and will probably cut and paste previous written code in to do it) but for the part that does work I wnat to make that work first and without other factors needing to be fixed.</p>
<p>If I&#8217;m my own customer then I&#8217;ll leave hard coded paths in and edit the source for each execution of the program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-232903">
				<div id="div-comment-232903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-232903">
			December 7, 2004 at 7:23 am</a>		</div>

		<p>I don&#8217;t think you need to be so pedantic to be correct. Use a variable name instead of a hard-coded path, and a small comment to explain why you use it. For example:</p>
<p>&lt;pre&gt;<br />
<br />// &#8216;the_file_path&#8217; points to a wide string holding the path to your file.<br />
<br />// don&#8217;t forget to build it appropriately. hard-coded paths are pure evil !!<br />
<br />if (SUCCEEDED(GetUIObjectOfFile(hwnd,<br />
<br />                    the_file_path,<br />
<br />                    IID_IDataObject, (void**)&amp;pdto))) {<br />
<br />&lt;/pre&gt;</p>
<p>Voila, everybody wins !!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-233283">
				<div id="div-comment-233283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bill Kidder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233283">
			December 7, 2004 at 5:50 pm</a>		</div>

		<p>Great article, but what if I want to<br />
<br />move c:windowsclock.avi?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-233343">
				<div id="div-comment-233343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.divil.co.uk/net' rel='external nofollow' class='url'>Tim Dawson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233343">
			December 8, 2004 at 1:12 am</a>		</div>

		<p>This code is top-notch and very informative, as always. The insights and demonstrations given here will always not only be worth a read, but even improve the lives of the developers reading it.</p>
<p>However, lately your tone has been condescending and verging on elitist, which is a huge shame.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-233353">
				<div id="div-comment-233353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233353">
			December 8, 2004 at 2:28 am</a>		</div>

		<p>Guys, stop looking the gift horse in the mouth, or it might just wander off.</p>
<p>Seriously, if I was getting this much grief for something I did for free I would start to consider whether it is something still worth doing. </p>
<p>The only thing I have to say about hard coded paths and example files etc is that when I write proof of concept apps to operate on COM controls I always end up using the polygon ATL example control. It&#8217;s my clock.avi :)</p>
<p>Will other parts of this series be looking at implementing IDropTarget and IDataObject, because implementing IDataObject for some custom COM object has always seemed quite intimidating to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-233553">
				<div id="div-comment-233553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J&#246;rgen Sigvardsson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-233553">
			December 8, 2004 at 3:40 pm</a>		</div>

		<p>Some of you guys are pretty silly bitching about Raymond&#8217;s hardcoded paths. If you can&#8217;t see past hardcoded paths in *sample code* demonstrating anything but *file handling*, then perhaps you should get another job. Maybe &quot;Grumpy old [wo]man&quot; pays well. :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-236953">
				<div id="div-comment-236953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">emmenjay@zip.com.au</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041207-00/?p=37123#comment-236953">
			December 24, 2004 at 3:56 am</a>		</div>

		<p>Hi Raymond</p>
<p>I understand your point about avoiding clutter in a demonstration program.  However I have some sympathy for the person who complained about the hard-coded path.  The fact is that so many programmers make that mistake and ship broken software.  Some programming concetps are too ugly and dangerous to live: for example you wouldn&#8217;t publish an example with &quot;goto&quot; spagetti in it.  I agree that the command-line stuff is overkill, but a quick call to GetWindowsDirectory() might be appropriate.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

