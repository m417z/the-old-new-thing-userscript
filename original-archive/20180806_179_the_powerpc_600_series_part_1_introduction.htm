<html>
<head>
<title>The PowerPC 600 series, part 1: Introduction</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The PowerPC 600 series, part 1: Introduction</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 6, 2018 / year-entry #179</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Here we go again.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The PowerPC is a RISC processor architecture which grew out of IBM's
<a HREF="https://en.wikipedia.org/wiki/IBM_POWER_Instruction_Set_Architecture">POWER</a>
architecture.
Windows NT support was introduced in Windows NT 3.51,
and it didn't last long;
the last version to support it was Windows NT 4.0.
Despite not being supported by the flagship operating system,
it continued to be supported by Windows CE,
and a later version of the PowerPC was
chosen as the processor for the Xbox 360.
</p>
<p>
As with all the processor retrospective series,
I'm going to focus on how Windows NT used the PowerPC
in user mode because the original audience for all of these
discussions was user-mode developers trying to get up to speed debugging
their programs on PowerPC.
</p>
<p>
The PowerPC 600 series started out as a 32-bit processor,
with 64-bit support arriving in the 620.
The earliest record I can find (not that I looked very hard)
shows Windows NT supporting the 603 and 604 processors.
I guess this makes sense, because Wikipedia says that the 603
was
<a HREF="https://en.wikipedia.org/wiki/PowerPC_600#PowerPC_603">
the first processor to support the full PowerPC instruction set</a>.
The 603 could complete a maximum of two instructions per cycle;
the 604 could do up to four.
The 603 did not have a dynamic branch predictor, but the 604 did.
Both could forward arithmetic operations into the next arithmetic
operation,
so consecutive integer arithmetic operations did not stall,
even if the second depended on the result of the first.
</p>
<p>
The PowerPC 600 series
processors are natively big-endian, with an option for
little-endian operation.
Windows NT uses the processor in 32-bit little-endian mode.&sup1;
Even though the processor can be put into little-endian mode,
this affects only how bytes are swapped when they are read from
or written to memory;
the instructions themselves still operate in a big-endian way,
Among other things,
the bits in a register are numbered from most-significant
to least-significant:
Bit 0 is the high-order bit, and bit 31 is the low-order bit.
</p>
<p>
The PowerPC has 32 integer registers, each 32 bits wide.
They are
officially named <var>GPR0</var> through <var>GPR31</var>,
but the assembler just calls them <var>0</var> through <var>31</var>.
This is ridiculously confusing,&sup2; so nobody uses the purely numeric names.
People call them <var>r0</var> through <var>r31</var>.
(Some assemblers call them <var>r.0</var> through <var>r.31</var>.)
</p>
<table BORDER=1 BORDERCOLOR=black CELLSPACING=0 CELLPADDING=3
    CLASS="cp3"
    STYLE="border: solid 1px black; border-collapse: collapse">
<tr>
<th>Register</th>
<th>Mnemonic</th>
<th>Meaning</th>
<th>Preserved?</th>
<th>Notes</th>
</tr>
<tr>
<td><var>gpr0</var></td>
<td><var>r0</var></td>
<td></td>
<td>No</td>
<td>Of limited use</td>
</tr>
<tr>
<td><var>gpr1</var></td>
<td><var>r1</var></td>
<td>stack pointer</td>
<td>Yes</td>
<td>Includes 232-byte negative red zone</td>
</tr>
<tr>
<td><var>gpr2</var></td>
<td><var>r2</var></td>
<td>table of contents</td>
<td>Yes, mostly</td>
<td>Access to global variables</td>
</tr>
<tr>
<td><var>gpr3</var>&hellip;<var>gpr10</var></td>
<td><var>r3</var>&hellip;<var>r10</var></td>
<td>argument</td>
<td>No</td>
<td>On function entry, contains function parameters</td>
</tr>
<tr>
<td><var>gpr11</var></var></td>
<td><var>r11</var></td>
<td>temporary</td>
<td>No</td>
<td>For function glue</td>
</tr>
<tr>
<td><var>gpr12</var></td>
<td><var>r12</var></td>
<td>temporary</td>
<td>No</td>
<td>prologue and epilogue helper</td>
</tr>
<tr>
<td><var>gpr13</var></td>
<td>r13</td>
<td>read-only</td>
<td>Yes</td>
<td>TEB</td>
</tr>
<tr>
<td><var>gpr14</var>&hellip;<var>gpr31</var></td>
<td><var>r14</var>&hellip;<var>r31</var></td>
<td>saved</td>
<td>Yes</td>
<td></td>
</tr>
</table>
<p>
Note that this does not exactly line up with the PowerPC
register conventions for other platforms.
(Many other platforms assign special meanings to
<var>gpr11</var> through <var>gpr13</var>.)
</p>
<p>
The stack must be kept on an 8-byte boundary.
There is a large red zone of 232 bytes at negative offsets
from the stack pointer.
We'll see the importance of this when we look at function
prologues.
</p>
<p>
The function return value is placed in <var>r3</var>.
</p>
<p>
The <var>r0</var> register is of limited use because many
instructions cannot use a source of <var>r0</var>.
We'll see more about that later.
</p>
<p>
We'll learn about the table of contents, function glue,
and epilogue/prologue helpers later when we
cover Windows NT software conventions.
</p>
<p>
In addition to the general-purpose integer registers,
there are a number of special-purpose 32-bit integer registers.
There are only nineteen of these special-purpose registers,
but the numbers range from <var>spr1</var> to <var>spr1013</var>.
(The number space is very sparsely populated, but I guess they
reserved room for adding more registers in the future.)
These are the ones you're likely to see in user-mode code:
</p>
<table BORDER=1 BORDERCOLOR=black CELLSPACING=0 CELLPADDING=3
    CLASS="cp3"
    STYLE="border: solid 1px black; border-collapse: collapse">
<tr>
<th>Register</th>
<th>Mnemonic</th>
<th>Meaning</th>
<th>Preserved?</th>
<th>Notes</th>
</tr>
<tr>
<td><var>spr1</var></td>
<td><var>xer</var></td>
<td>Status bits</td>
<td>No</td>
<td>Integer exception register</td>
</tr>
<tr>
<td><var>spr8</var></td>
<td><var>lr</var></td>
<td>link register</td>
<td>No</td>
<td>On function entry, contains return address</td>
</tr>
<tr>
<td><var>spr9</var></td>
<td><var>ctr</var></td>
<td>counter</td>
<td>No</td>
<td>Dedicated counter or jump target</td>
</tr>
<tr>
<td><var>fpscr</var></td>
<td><var>fpscr</var></td>
<td>Status bits</td>
<td>?</td>
<td>Floating point status and control register</td>
</tr>
</table>
<p>
I've never had to deal with floating point on the PowerPC,
so I don't know what parts of <var>fpscr</var> need
to be preserved and what parts don't.
</p>
<p>
We'll learn more about the other special registers as the need arises.
</p>
<p>
Remember how the Itanium, MIPS, and Alpha don't have a flags register?
Well, the PowerPC scoffs at them.
"Flags register? You say you want a flags register?
I've got your flags register right here.
In fact, I've got <i>eight sets</i> of flags registers."
They are named <var>cr0</var> through <var>cr7</var>,
each four bits wide.
(The "cr" stands for <i>condition register</i>.)
The pseudo-register <var>cr</var> can be used to treat
them as one giant 32-bit register.&sup3;
Remember that the PowerPC is a big-endian processor,
so <var>cr0</var> occupies the most significant bits of <var>cr</var>,
and
so <var>cr7</var> occupies the least significant bits.
</p>
<p>
Condition register <var>cr0</var> is the implicit
target of integer operations,
and
condition register <var>cr1</var> is the implicit
target of floating point operations.
I don't know which condition registers must be preserved across
calls, because I've never found any code that needed to.
</p>
<p>
The PowerPC also has 32 floating-point double-precision registers,
officially named <var>FPR0</var> through <var>FPR31</var>.
</p>
<table BORDER=1 BORDERCOLOR=black CELLSPACING=0 CELLPADDING=3
    CLASS="cp3"
    STYLE="border: solid 1px black; border-collapse: collapse">
<tr>
<th>Register</th>
<th>Mnemonic</th>
<th>Preserved?</th>
<th>Notes</th>
</tr>
<tr>
<td><var>fpr0</var></td>
<td><var>f0</var></td>
<td>No</td>
<td>temporary</td>
</tr>
<tr>
<td><var>fpr1</var>&hellip;<var>fpr13</var></td>
<td><var>f1</var>&hellip;<var>f13</var></td>
<td>No</td>
<td>Function parameters</td>
</tr>
<tr>
<td><var>fpr14</var>&hellip;<var>fpr31</var></td>
<td><var>f14</var>&hellip;<var>f31</var></td>
<td>Yes</td>
<td></td>
</tr>
</table>
<p>
As for instruction encoding,
each instruction is 32 bits wide and must be aligned on
a four-byte boundary.
The instruction whose encoding is <code>0x00000000</code>
is reserved as an invalid instruction,
so trying to execute a page of zeros will instantly fault.
</p>
<p>
The general syntax for multi-operand opcodes is
</p>
<pre>
    opcode  destination, source1, source2, source3...
</pre>
<p>
with the notable exception of store instructions,
which put the source register on the left and the address
destination on the right.
</p>
<p>
The architectural terms for operand sizes are
<i>byte</i>, <i>halfword</i> (2 bytes),
<i>word</i> (4 bytes),
<i>doubleword</i> (8 bytes),
and
<i>quadword</i> (16 bytes).
In 32-bit operation, the largest unit that can be operated
on directly is the word.
</p>
<p>
In opcode names, the word <i>arithmetic</i> is used to emphasize
that the operands are treated as signed (usually abbreviated <code>a</code>),
and the words <i>logical</i> (<code>l</code>)
and <i>unsigned</i> (<code>u</code>)
or sometimes
<i>zero-extended</i> (<code>z</code>)
are used to emphasize that the operands are treated as unsigned.
I guess they couldn't make up their mind what to call it
unsigned operations, so they chose one at random each time they needed one.
Note further that these conventions are not uniformly applied,
so stay alert.
</p>
<p>
The processor maintains the fiction that
every instruction is retired
completely before the next one starts.
Consequently, there are no architectural
branch delay slots or load delay slots.
It also means that when an exception is raised,
all instructions preceding the exception have run to completion,
and no instructions after the exception will appear to have started.
</p>
<p>
Internally, the processor may perform operations out of order
or in parallel or speculatively,
and it may introduce stalls if your dependencies are too close together,
but the processor does its best to hide this
from the code being executed.
</p>
<p>
There are two
notable exceptions to the principle of sequential operation:
</p>
<ul>
<li>Floating point exceptions in imprecise mode
    can be delayed beyond the instruction that triggered the exception.
</li>
<li>Self-modifying code requires special instructions
    to evict the old instructions out of the I-cache.
</li>
</ul>
<p>
Both reads and writes to memory
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/ee418650(v=vs.85).aspx">
can be reordered</a>,
and
reads can be speculated.
Storing a value may partly succeed before raising an exception.
(For example, an unaligned store that crosses into an invalid page
may write to the valid page and then take an exception on the invalid
page.)
</p>
<p>
Okay, that's enough background.
We'll pick up
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180807-00/?p=99435">
next time</a>
by taking a closer look at those
condition registers.
</p>
<p>
&sup1;
When the processor is in 32-bit mode, you can still execute
64-bit instructions.
However, since Windows NT did not require
a 64-bit capable version of the PowerPC processor,
PowerPC programs for Windows NT had to perform runtime detection
of 64-bit support and run either a 32-bit friendly version of
the code or a 64-bit version of the code.
In practice, nobody did this.
They just stuck to 32-bit code.
(Even though you could use 64-bit instructions in 32-bit mode,
the ABI preserves only the least-significant 32 bits of saved registers.)
</p>
<p>
&sup2;
The designers of the PowerPC assembly language appear to be dedicated
to making their instruction set as confusing as possible
by making the assembly language be just barely more readable
than machine code.
For example, to say "Decrement the counter, and branch
if the result is zero and the <var>eq</var> flag is set in <var>cr3</var>",
they want you to write
</p>
<pre>
    bc  2, 14, destination
</pre>
<p>
Because obviously 2 means "decrement counter and branch if the
result is zero and the specific flag is set",
and naturally 14 means "the <var>eq</var> flag in <var>cr3</var>."
</p>
<p>
The Windows disassembler substitutes names for some (but not all) of
these magic numbers at disassembly so you don't have to remember
all the codes.
</p>
<p>
&sup3;
You might think,
"Who's to say which is the real register and which is the pseudo-register?
You could equivalently think of <var>cr</var> as the real register,
and the <var>cr#</var> registers as pseudo-registers!"
Perhaps so,
but the processor can execute operations on
different <var>cr#</var> registers in parallel.
If <var>cr</var> were the real register, then you would expect
multiple operations on different <var>cr#</var> registers
to be dependent on each other since they are all operating on
<var>cr</var>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1355575">
				<div id="div-comment-1355575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355575">
			August 6, 2018 at 7:41 am</a>		</div>

		<p>Looking forward to the rest of this series!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1355585">
				<div id="div-comment-1355585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355585">
			August 6, 2018 at 7:41 am</a>		</div>

		<p>&#8220;Integer exception register&#8221;?  It&#8217;s alway &#8220;fixed point exception register&#8221; in the IBM docs.  Also &#8220;fixed point unit&#8221; rather than &#8220;integer unit&#8221;, etc.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1355625">
				<div id="div-comment-1355625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355625">
			August 6, 2018 at 10:43 am</a>		</div>

		<p>The column is called &#8220;Notes&#8221;, not &#8220;Official name&#8221;. The purpose of these notes is to provide just enough information so you can debug problems, not to provide official documentation. If I called it &#8220;Fixed point exception register&#8221; it would be less obvious what that means.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-3 parent" id="comment-1355635">
				<div id="div-comment-1355635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355635">
			August 6, 2018 at 10:57 am</a>		</div>

		<p>Fixed point normally implies decimal numbers which are not whole, which use a format that does not let the decimal point move. For example a 32:32 format, where 32 bits are used for the portion left of the decimal point, and 32 bits are used for the portion right of the decimal point.<br />
While you can see integer numbers as a special case of fixed point numbers where 0 bits are used for the portion right of the decimal point. Fixed point doesn&#8217;t normally imply integer.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle even depth-4" id="comment-1355665">
				<div id="div-comment-1355665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355665">
			August 6, 2018 at 1:30 pm</a>		</div>

		<p>While true, the terminology is so rarely used that it would take most people a few minutes for that to click (I know when I read Vas&#8217; comment I initially read it as &#8216;floating point&#8217;, and even then didn&#8217;t make the connection until I read yours, thinking it was some kind of instruction-level IBM-specific term).  Integer is a term everyone uses and is immediately obvious, and that&#8217;s ideal for blogs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1355685">
				<div id="div-comment-1355685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355685">
			August 6, 2018 at 4:02 pm</a>		</div>

		<p>Well, the &#8220;fixed point unit&#8221; expression has an historical root. Back in the early 50s, all computations were made in integer units, using integer binary arithmetic. As most of these computers were oriented to scientific applications, they needed to manipulate real numbers in some way, so they used integers scaled by a constant factor. Note that these were binary integers, not decimal ones.</p>
<p>When IBM introduced their first computer with floating point unit (the IBM 704) in 1954, the integer unit was called &#8220;fixed point unit&#8221;, in contrast to the newer &#8220;floating point unit&#8221;. That denomination was carried all along IBM&#8217;s mainframe family until the POWER architecture, from where it was inherited by the PowerPC.</p>
<p>Now, this blog is called The Old New Thing. So don&#8217;t sue me for telling stories older than most readers (including myself!).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1355735">
				<div id="div-comment-1355735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Julien Oster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355735">
			August 6, 2018 at 10:13 pm</a>		</div>

		<p>A bit off topic, but maybe still interesting (it kind of fits the theme of this blog): The notation I usually deal with would be 64:32 for what you mean, i.e. 64bit word size, 32bit of that as fraction size. This notation allows for seemingly counter-intuitive things of a fraction size bigger than the (total!) word size, or even negative fraction sizes.</p>
<p>Fraction sizes bigger than the word size itself are useful when the magnitude of the numbers you want to be able to represent are smaller than 1, e.g. if you only want to represent numbers from 0 to 0.125 (not including), then the first three fractional bits (0.5, 0.25, 0.125) are always zero, and you can e.g. use 16:19 for 16bit precision of numbers between 0 and 0.125.</p>
<p>Negative fraction sizes are useful when you have big numbers that you don&#8217;t care about the full precision that the usually necessary integer word size would give you, e.g. 8:-1 allows you to represent numbers between 0 and 512 instead of 0 to 256 that 8bit would usually give you, but only the even numbers. With 8:-2, you&#8217;re up to 0-1024, but you lose the distinction between the first two lower bits.</p>
<p>MATLAB uses this fixed point notation, and at least some FPGA environments use it as well when constructing e.g. fixed point filters.</p>
<p>In that notation, 32:32 would allow representation of 2^32 different numbers between 0 and 1 (exclusive).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1355615">
				<div id="div-comment-1355615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355615">
			August 6, 2018 at 10:23 am</a>		</div>

		<p>Sweet, another ISA series!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1355655">
				<div id="div-comment-1355655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355655">
			August 6, 2018 at 12:34 pm</a>		</div>

		<p>Which SPR number is fpscr?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1355725">
				<div id="div-comment-1355725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355725">
			August 6, 2018 at 7:57 pm</a>		</div>

		<p>Trick question. fpscr is not a SPR at all!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1355675">
				<div id="div-comment-1355675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355675">
			August 6, 2018 at 1:37 pm</a>		</div>

		<p>&#8220;Here we go again&#8221;.  A reference to a recent movie, perhaps?  :-)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-bboorman odd alt depth-2" id="comment-1355835">
				<div id="div-comment-1355835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355835">
			August 7, 2018 at 2:25 pm</a>		</div>

		<p>Or perhaps a Whitesnake song from the late 1980&#8217;s.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1 parent" id="comment-1355715">
				<div id="div-comment-1355715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355715">
			August 6, 2018 at 6:20 pm</a>		</div>

		<p>I wonder, since there is a Mac development division inside Microsoft (I still remember running IE5 on old iMac), did you heard anyone trying to run NT4 on pre-OSX Mac?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1355745">
				<div id="div-comment-1355745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355745">
			August 6, 2018 at 11:36 pm</a>		</div>

		<p>Won&#8217;t work.  On traditional PowerPC (including the 600 series and 7400 series) you can&#8217;t run a big endian OS on a little endian motherboard and vice versa.  WinNT and Solaris for PowerPC run little endian, MacOS runs big endian, and AIX is available for either.</p>
<p>The reason is that traditional PowerPC in little endian mode doesn&#8217;t actually do little endian memory access within (64-bit) doublewords.  It just twiddles the low three bits of the address so that as long as you only do aligned accesses for anything bigger than bytes (halfword/word/doubleword) you&#8217;ll see little endian semantics (incidentally the MAME emulator uses the same trick when emulating a little endian guest on a big endian host and vice versa).  On a little endian motherboard, you wire the 64-bit data bus with the byte order inverted, and as long as software keeps accesses aligned, it all works.</p>
<p>I say &#8220;traditional&#8221; because some 750 derivatives and the newer POWER chips that implement PPC64LE can actually run in a true little endian mode.  But that happen until long after Windows NT stopped running on PowerPC.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1355755">
				<div id="div-comment-1355755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Sutherland</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355755">
			August 7, 2018 at 3:48 am</a>		</div>

		<p>I don&#8217;t know about NT4, but I seem to recall the Xbox OS is NT-based, so it definitely ran on PowerMac G5s for a while &#8211; they were the first developer kits! <a href="https://www.journaldulapin.com/2015/01/25/this-power-mac-g5-is-almost-a-xbox-360/" rel="nofollow">https://www.journaldulapin.com/2015/01/25/this-power-mac-g5-is-almost-a-xbox-360/</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1355765">
				<div id="div-comment-1355765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355765">
			August 7, 2018 at 7:17 am</a>		</div>

		<p>Raymond wrote &#8220;Among other things, the bits in a register are numbered from most-significant to least-significant: Bit 0 is the high-order bit, and bit 31 is the low-order bit. &#8221;</p>
<p>Is this for real??? At the assemby/machinecode level? How on earth did this get handled at the &#8216;C&#8217; level? Once RAM (a 32-bit word) is moved into the CPU, I would have expected bit 0 to BE bit 0 (2^0) and bit 31 to BE bit 31 (2^31). Anything else would be nuts. To then reverse bit ordering in bytes seems just plain insane! Please elaborate.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1355775">
				<div id="div-comment-1355775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355775">
			August 7, 2018 at 8:02 am</a>		</div>

		<p>You can&#8217;t address individual bits in C.  Taking the address of a bitfield is illegal.</p>
<p>Bit ordering only matters for certain assembly instructions, where the processor docs say that this instruction performs operation X on bits Y-Z.  It&#8217;s the compiler&#8217;s job to understand the CPU&#8217;s bit ordering and translate the C code to the instructions with the correct bit numbers in them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1355985">
				<div id="div-comment-1355985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1355985">
			August 8, 2018 at 1:41 pm</a>		</div>

		<p>I believe bit numbering in C is an implementation defined behavior.</p>
<p>Is bit 0 the left-most bit or the right-most bit?  Little endian says bit 0 is the right most bit, while big endian says bit 0 is the left most bit.</p>
<p>Which &#8220;endianness&#8221; is better may depend on what you have been exposed to.  All PC (Intel/AMD) processors are little endian.  But it hasn&#8217;t always been that way.  Most of the systems I used when I started programming (at the time, in assembly) were big endian.</p>
<p>See &#8220;https://en.wikipedia.org/wiki/Endianness&#8221;.</p>
<p>Usless trivia &#8212; network byte order is big endian!  So when your PC sends a TCP packet to another PC, the multi-byte fields in the headers get flipped on the sending computer, then get flipped again on the receiveing computer.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1356065">
				<div id="div-comment-1356065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180806-00/?p=99425#comment-1356065">
			August 9, 2018 at 4:20 am</a>		</div>

		<p>Endianness generally refers to byte ordering for multi-byte values in RAM.  Numbering of bits within a value is separate.  The Motorola 68000 family uses big endian byte ordering (address of a word is address of its most significant byte, more significant bytes at lower memory addresses), but it numbers bits within a value starting at 0 for least significant bit and increasing towards more significant bits.  It doesn&#8217;t really make a difference for C since bit instructions can&#8217;t be generated directly.  The compiler can generate them when you test against a one-bit mask, set/clear/invert an individual bit, etc. and it knows how the target CPU numbers bits.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

