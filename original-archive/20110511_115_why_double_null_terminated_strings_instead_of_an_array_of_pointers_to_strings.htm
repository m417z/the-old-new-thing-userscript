<html>
<head>
<title>Why double-null-terminated strings instead of an array of pointers to strings?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why double-null-terminated strings instead of an array of pointers to strings?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 11, 2011 / year-entry #116</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I mentioned this in passing in my description of the format of double-null-terminated strings, but I think it deserves calling out. Double-null-terminated strings may be difficult to create and modify, but they are very easy to serialize: You just write out the bytes as a blob. This property is very convenient when you have to...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>I mentioned this in passing in my description of <a href="http://blogs.msdn.com/oldnewthing/archive/2009/10/08/9904646.aspx"> the format of double-null-terminated strings</a>, but I think it deserves calling out.</p>
<p> Double-null-terminated strings may be difficult to create and modify, but they are very easy to serialize: You just write out the bytes as a blob. This property is very convenient when you have to copy around the list of strings: Transferring the strings is a simple matter of transferring the memory block as-is. No conversion is necessary. This makes it easy to do things like wrap the memory inside another container that supports only flat blobs of memory. </p>
<p> As it turns out, a flat blob of memory is convenient in many ways. You can copy it around with memcpy. (This is important when capturing values across security boundaries.) You can save it to a file or into the registry as-is. It marshals very easily. It becomes possible to store it in an <code>IData&shy;Object</code>. It can be freed with a single call. And in the cases where you can't allocate any memory at all (<i>e.g.</i>, you're filling a buffer provided by the caller), it's one of the few options available. This is also why <a href="http://msdn.microsoft.com/aa374807.aspx"> self-relative security descriptors</a> are so popular in Windows: Unlike absolute security descriptors, self-relative security descriptors can be passed around as binary blobs, which makes them easy to marshal, especially if you need to pass one from kernel mode to user mode. </p>
<p> <a href="http://blogs.msdn.com/oldnewthing/archive/2009/10/08/9904646.aspx#9905474"> A single memory block with an array of integers containing offsets would also work</a>, but as the commenter noted, it's even more cumbersome than double-null-terminated strings. </p>
<p> Mind you, if you don't need to marshal the list of strings (because it never crosses a security boundary and never needs to be serialized), then an array of string pointers works just fine. If you look around Win32, you'll find that most cases where double-null terminated strings exist are for the most part either inherited from 16-bit Windows or are one of the cases where marshalling is necessary. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-912773">
				<div id="div-comment-912773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912773">
			May 11, 2011 at 7:14 am</a>		</div>

		<p>Gotta love those double-null terminated strings! &nbsp;Personally, they never caused me any trouble and always made perfect sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912783">
				<div id="div-comment-912783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912783">
			May 11, 2011 at 7:23 am</a>		</div>

		<p>This falls under the category of marshaling, but I think it&#39;s worth calling out that they&#39;re also useful if you have the data in shared memory. &nbsp;You can just share the double-null-terminated strings straight up between processes with no gotchas. &nbsp;If you used an array of pointers instead, that wouldn&#39;t work because the processes have different address spaces. &nbsp;And like you said, you could use an array of integer offsets instead of pointers, but that&#39;s even more cumbersome.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-912823">
				<div id="div-comment-912823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912823">
			May 11, 2011 at 8:53 am</a>		</div>

		<p>As mentioned in the other discussion, it&#39;s a perfectly simple paradigm as long as you approach it as &quot;list of strings terminated by an empty string&quot; and don&#39;t subscribe to the double-null voodoo misdescription.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912863">
				<div id="div-comment-912863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912863">
			May 11, 2011 at 9:24 am</a>		</div>

		<p>Sometimes I triple null terminate my strings just to be safe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-912873">
				<div id="div-comment-912873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912873">
			May 11, 2011 at 9:45 am</a>		</div>

		<p>Wow. Just when I thought C strings couldn&#39;t get any worse, I run across this article, and the earlier one behind the first link!</p>
<p>How many of the problems with double-null-terminated strings (including the problem of including a blank string in the middle of the array) would vanish instantly if the string-array type was based on Pascal strings instead? (Or some variant on the basic concept that can handle strings longer than 255 bytes?)</p>
<div class="post">[<i>Great, change it to &quot;array of counted strings, terminated by a zero-length string.&quot; You still have the problem of including a blank string in the middle of the array. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912883">
				<div id="div-comment-912883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912883">
			May 11, 2011 at 10:20 am</a>		</div>

		<p>&gt; [Great, change it to &quot;array of counted strings, terminated by a zero-length string.&quot; You still have the problem of including a blank string in the middle of the array. -Raymond]</p>
<p>He did not go far enough with his change of the concept. How about a counted array of counted strings? (That is, the array begins with a size_t giving the number of strings, and each string is prefixed with a size_t giving the string&#39;s size.)</p>
<div class="post">[<i>Sure, you could do that too. But a counted array of null-terminated strings works just as well; the pascal-ness was a red herring. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-912893">
				<div id="div-comment-912893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912893">
			May 11, 2011 at 10:47 am</a>		</div>

		<p>&gt; [Sure, you could do that too. But a counted array of null-terminated strings works just as well; the pascal-ness was a red herring. -Raymond]</p>
<p>No, c strings doesn&#39;t works just as well, pascal strings can contain null chars.</p>
<div class="post">[<i>But that has nothing to do with the representation of a collection of strings. (I&#39;m not arguing for/against C-style vs. pascal-style strings. I&#39;m just pointing out that &quot;switch to pascal style&quot; doesn&#39;t address the original problem.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912903">
				<div id="div-comment-912903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EvanED</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912903">
			May 11, 2011 at 11:00 am</a>		</div>

		<p>nil: That&#39;s still a red herring in the sense that moving from a single string to a list of strings (be it counted or terminated by an empty string) doesn&#39;t introduce any issues that weren&#39;t already around if you have just a single null-terminated string.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-912913">
				<div id="div-comment-912913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912913">
			May 11, 2011 at 1:20 pm</a>		</div>

		<p>It would&#39;ve been much healthier if the total size were stored in the begginning of this blob, like ole strings or pascal strings. Nowadays, there is no simple (i.e. without a loop) way to find that third parameter for memcpy. No analog of strlen(). Maybe this is whyFor this very reason %PATH% uses ; and $path uses :</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912923">
				<div id="div-comment-912923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">davep</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912923">
			May 11, 2011 at 2:01 pm</a>		</div>

		<p>Mason Wheeler: &quot;Wow. Just when I thought C strings couldn&#39;t get any worse, I run across this article, and the earlier one behind the first link.&quot;</p>
<p>The double-null-terminated strings are not very common. Don&#39;t panic. It&#39;s unlikely that they will cause your children to drop out of school and become hippies.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-912833">
				<div id="div-comment-912833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912833">
			May 11, 2011 at 9:07 am</a>		</div>

		<p>I actually *like* the double null terminated strings.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912933">
				<div id="div-comment-912933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912933">
			May 11, 2011 at 6:31 pm</a>		</div>

		<p>Just want to ask: Since there are fixed char size Unicode strings (such as UCS-2/UTF-32) that can contain null bytes, is there any established method for handling nulls for them in null terminated strings (or double null terminated ones)? Or should we just seek other possible methods like passing offsets when we need to pass the strings through the boundaries?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-912963">
				<div id="div-comment-912963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912963">
			May 12, 2011 at 2:40 am</a>		</div>

		<p>I hardly had any problem with double-null terminated strings.</p>
<p>It gets tricky when you start having TRIPLE-null terminated strings, such as OPENFILENAME&#39;s filter list (actually a list of pairs of strings, terminated by a pair of empty strings).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912953">
				<div id="div-comment-912953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-912953">
			May 12, 2011 at 12:55 am</a>		</div>

		<p>@Cheong:</p>
<p>This is not a problem because UCS-2 &quot;double-null-terminated strings&quot; are terminated by two null UCS-2 *characters* (not bytes).</p>
<p>Like Raymond said, the easier and more consistent way of describing this concept is: The list of null-terminated strings is terminated by the first empty string. (Therefore, in case of UCS-2, you have four null bytes at the end. But if the entires list is empty, only two null bytes are there.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913063">
				<div id="div-comment-913063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-913063">
			May 12, 2011 at 1:31 pm</a>		</div>

		<p>Yes, I meant a counted array of counted strings, like Cesar said. &nbsp;I suppose I didn&#39;t explain it well enough. &nbsp;That would allow for empty strings in the middle of the list. &nbsp;And making the individual strings Pascal (counted) strings instead of C strings has a definite advantage if this is used for marshalling: if you know the length up front, you can copy the bytes around much faster because you don&#39;t have to do it one byte at a time testing each one for null.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com0003400182d76c6f odd alt thread-odd thread-alt depth-1" id="comment-913183">
				<div id="div-comment-913183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Richard+Russell' rel='external nofollow' class='url'>Richard Russell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110511-00/?p=10693#comment-913183">
			May 13, 2011 at 2:52 pm</a>		</div>

		<p>@Medinoc: &quot;It gets tricky when you start having TRIPLE-null terminated strings, such as OPENFILENAME&#39;s filter list&quot;</p>
<p>I don&#39;t think that requires a triple-null terminated string. &nbsp;The docs only say &#39;The last string in the buffer must be terminated by two NULL characters&#39;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

