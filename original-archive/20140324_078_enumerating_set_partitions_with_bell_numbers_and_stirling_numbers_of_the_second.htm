<html>
<head>
<title>Enumerating set partitions with Bell numbers and Stirling numbers of the second kind</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Enumerating set partitions with Bell numbers and Stirling numbers of the second kind</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 24, 2014 / year-entry #79</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Just for fun, today's Little Program is going to generate set partitions. (Why? Because back in 2005, somebody asked about it on an informal mailing list, suggesting it would be an interesting puzzle, and now I finally got around to solving it.) The person who asked the question said, Below we show the partitions of...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Just for fun,
today's Little Program is going to
generate set partitions.
(Why?
Because back in 2005,
somebody asked about it on an informal mailing list, suggesting it
would be an interesting puzzle,
and now I finally got around to solving it.)
</p>
<p>
The person who asked the question said,
</p>
<blockquote CLASS=q STYLE="font-family: Times New Roman, serif">
<p>
Below we show the partitions of [4].  
The periods separate the individual sets so that, for example, 
  1.23.4 is the partition {{1},{2,3},{4}}.
</p>
<p><center></p>
<table BORDER=0 STYLE="font-family: Times New Roman, serif">
<tr>
<td>1 blocks: </p>
<td>1234 <br></p>
<tr>
<td>2 blocks: </p>
<td>123.4,&nbsp; </p>
<td>124.3,&nbsp; </p>
<td>134.2,&nbsp; </p>
<td>1.234,&nbsp; </p>
<td>12.34,&nbsp; </p>
<td>13.24,&nbsp; </p>
<td>14.23 <br></p>
<tr>
<td>3 blocks: </p>
<td>1.2.34,&nbsp; </p>
<td>1.24.3,&nbsp; </p>
<td>1.23.4,&nbsp; </p>
<td>14.2.3,&nbsp; </p>
<td>13.2.4,&nbsp; </p>
<td>12.3.4 <br></p>
<tr>
<td>4 blocks: </p>
<td>1.2.3.4 <br>
</table>
<p></center>
</p>
</blockquote>
<p>
I replied with a hint, saying,
"<a HREF="http://www.theory.csc.uvic.ca/~cos/inf/setp/SetPartitions.html"
>This page</a> explains what you need
to do, once you reinterpret the Stirling recurrence as an enumeration."
Only now, writing up this post,
did I realize that I linked to
<i>the same page they were quoting from</i>.
</p>
<p>
The key is in the sentence,
"They satisfy the following recurrence relation,
<i>which forms
the basis of recursive algorithms for generating them</i>."
Let's reinterpret the Stirling recurrence combinatorially.
No wait, we don't need to.
<a HREF="http://en.wikipedia.org/wiki/Stirling_numbers_of_the_second_kind#Recurrence_relation">
Wikipedia did it for us</a>.
Go read that first.
If you didn't follow Wikipedia's explanation, here's another angle:
</p>
<p>
Suppose you have a set of <var>n</var> elements,
and you want to generate all the partitions into
<var>k</var> blocks.
Well, let's look at element <var>n</var>.
What happens when you delete it from the partition?
</p>
<p>
One possibility is that
<var>n</var> was in a block all by itself.
After you remove it,
you are left with a partition of <nobr><var>n</var> &minus; 1</nobr>
elements into
<nobr><var>k</var> &minus; 1</nobr> blocks.
Therefore, to generate the partitions where
<var>n</var> is in a block all by itself,
you generate all the partitions of
<nobr><var>n</var> &minus; 1</nobr>
elements into
<nobr><var>k</var> &minus; 1</nobr> blocks,
and then tack on a
single block consisting of just element
<var>n</var>.
</p>
<p>
On the other hand, if element <var>n</var> was not in a block by itself,
then removing it leaves a partition of
<nobr><var>n</var> &minus; 1</nobr>
elements into
<var>k</var> blocks.
(Removing
<var>n</var>
did not decrease the number of blocks because there are still other
numbers keeping that block alive.)
Now, element
<var>n</var> could have belonged to any of the
<var>k</var> blocks,
so you have
<var>k</var> possible places where you could reinsert element
<var>n</var>.
</p>
<p>
Therefore, our algorithm goes like this:
</p>
<ul>
<li>Handle base cases.
<li>Otherwise,
<ul>
<li>Recursively call
    <nobr><var>S</var>(<var>n</var> &minus; 1,</nobr>
    <nobr><var>k</var>)</nobr> and add
    element <var>n</var> separately into each of the <var>k</var> blocks.</p>
<li>Recursively call
    <nobr><var>S</var>(<var>n</var> &minus; 1,</nobr>
    <nobr><var>k</var> &minus; 1)</nobr> and add
    a single block consisting of just
    <var>n</var>.
</ul>
</ul>
<p>
Now that we spelled out what we're going to do,
actually doing it is a bit anticlimactic.
</p>
<pre>
function Stirling(n, k, f) {
 if (n == 0 &amp;&amp; k == 0) { f([]); return; }
 if (n == 0 || k == 0) { return; }
 Stirling(n-1, k-1, function(s) {
  f(s.concat([[n]])); // append [n] to the array
 });
 Stirling(n-1, k, function(s) {
  for (var i = 0; i &lt; k; i++) {
   f(s.map(function(t, j) { // append n to the i'th subarray
    return t.concat(i == j ? n : []);
   }));
  }
 });
}
</pre>
<p>
You can test out this function by logging
the results to the console.
</p>
<pre>
function logToConsole(s) {
  console.log(JSON.stringify(s));
}

Stirling(4, 2, logToConsole);
</pre>
<p>
Let's walk through the function.
The first test catches the vacuous base
case where you say,
"Please show me all the ways of breaking
up nothing into zero blocks."
The answer is, "There is exactly one way
of doing this, which is to break it into
zero blocks."
Math is cute that way.
</p>
<p>
The second test catches the other base cases
where you say,
"Please show me all the ways of breaking up
<code>n</code> elements into zero blocks"
(can't be done if <code>n &gt; 0</code>, because you will always
have elements left over),
or you say,
"Please show me all the ways of breaking up
0 elements into <code>k</code> blocks"
(which also can't be done if <code>k &gt; 0</code>
because
there are no elements to put in the
first block).
</p>
<p>
After disposing of the base cases,
we get to the meat of the recurrence.
First, we ask for all the ways of
breaking
<code>n - 1</code> elements
into
<code>k - 1</code> blocks,
and for each of them, we add
a single block consisting of just <code>n</code>.
</p>
<p>
Next, we ask for all the ways of breaking
<code>n - 1</code> elements
into
<code>k</code> blocks,
and for each of them, we go into a loop
adding <code>n</code> to each block.
The goofy <code>map</code> creates a deep copy of the
array and adds <code>n</code> to the <code>i</code>th block.
</p>
<p>
Here's a walkthrough of the goofy <code>map</code>:
</p>
<ul>
<li>The <code>concat</code> method creates a new array consisting
    of the starting array with the <code>concat</code> parameters
    added at the end.
    If a parameter is an array, then its elements are added;
    otherwise the parameter itself is added.
    For example,
    <code>[1].concat(2, [3, 4])</code> returns
    <code>[1, 2, 3, 4]</code>.
    The <code>concat</code> method creates a new array,
    and a common idiom is
    <code>s.concat()</code> to make a shallow copy of an array.</p>
<li>The <code>map</code> method calls the provided callback once
    for each element of the array <code>s</code>.
    The return values from all the callbacks are collected to
    form a new array, which is returned.
    For example, <code>[1,2,3].map(function (v) { return v * 2; })</code>
    returns the new array <code>[2, 4, 6]</code>.</p>
<li>The <code>map</code> callback is called with the subarray
    as the first parameter and the index as the second parameter.
    (There is also a third parameter, which we don't use.)</p>
<li>Therefore, if all we want to do was
    create a deep copy of <code>s</code>,
    we could write
    <code>s.map(function (t, j) { return t.concat(); })</code>.</p>
<li>But we don't want a perfect deep copy.
    We want to change the <code>i</code>th element.
    Therefore, we check the index, and if it is equal to the <code>i</code>,
    then we append <code>n</code>.
    Otherwise, we append <code>[]</code> which appends nothing.</p>
<li>After building the array (with modifications),
    we pass it to the callback function <code>f</code>.
</ul>
<p>
This pattern is common enough that maybe we should pull it into
a helper function.
</p>
<pre>
function copyArrayOfArrays(array, indexToEdit, editor) {
 return array.map(function(e, i) {
  return i === indexToEdit ? editor(e) : e.concat();
 });
}

function Stirling(n, k, f) {
 if (n == 0 &amp;&amp; k == 0) { f([]); return; }
 if (n == 0 || k == 0) { return; }
 Stirling(n-1, k-1, function(s) {
  f(s.concat([[n]])); // append [n] to the array
 });
 Stirling(n-1, k, function(s) {
  for (var i = 0; i &lt; k; i++) {
   f(copyArrayOfArrays(s, i, function(e) { return e.concat(n); }));
  }
 });
}
</pre>
<p>
The <code>copy&shy;Array&shy;Of&shy;Arrays</code>
function abstracts the goofy <code>map</code>:
You give it an array of arrays,
and optionally an index to edit and the function that
does the editing.
It copies the array of arrays and calls your editor on the
element you want to edit.
</p>
<p>
To reduce the number of memory allocations,
the recursion could also be done destructively.
You're then counting on the callback not modifying the result,
since you're going to use it again.
</p>
<pre>
function Stirling(n, k, f) {
 if (n == 0 &amp;&amp; k == 0) { f([]); return; }
 if (n == 0 || k == 0) { return; }
 Stirling(n-1, k, function(s) {
  for (var i = 0; i &lt; k; i++) {
   <font COLOR=blue>s[i].push(n);
   f(s);
   s[i].pop();</font>
  }
 });
 Stirling(n-1, k-1, function(s) {
  <font COLOR=blue>s.push([n]);
  f(s);
  s.pop();</font>
 });
}
</pre>
</p>
<p>
The original question was about enumerating all partitions
(Bell numbers),
and that's easy to put together from the Stirling numbers.
</p>
<pre>
function Bell(n, f) {
 for (var i = 1; i &lt;= n; i++) {
  Stirling(n, i, f);
 }
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1115363">
				<div id="div-comment-1115363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115363">
			March 24, 2014 at 8:35 am</a>		</div>

		<p>Maybe now they can update the link at the bottom of their page for the C program to link to this article. <a rel="nofollow" target="_new" href="http://theory.cs.uvic.ca/dis/distribute.pl.cgi?package=">theory.cs.uvic.ca/&#8230;/distribute.pl.cgi</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1115423">
				<div id="div-comment-1115423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115423">
			March 24, 2014 at 1:16 pm</a>		</div>

		<p>The link to A000110 (from the &quot;Info about Set Partitions&quot; page) is broken: here&#39;s the correct link</p>
<p><a rel="nofollow" target="_new" href="http://oeis.org/search?q=A000110">oeis.org/search</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1115433">
				<div id="div-comment-1115433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115433">
			March 24, 2014 at 1:17 pm</a>		</div>

		<p>Or better, <a rel="nofollow" target="_new" href="http://oeis.org/A000110">http://oeis.org/A000110</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1115443">
				<div id="div-comment-1115443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115443">
			March 24, 2014 at 2:41 pm</a>		</div>

		<p>Nitpick: your Bell() function&#39;s for loop should start at i = 0 rather than i = 1, to catch the Stirling(0, 0, f) case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115523">
				<div id="div-comment-1115523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115523">
			March 25, 2014 at 1:28 am</a>		</div>

		<p>There&#39;s something about that algorithm that screams &quot;Write me in lisp&quot;!</p>
<p>(Note to young people: lisp is what Haskell will look like when it eventually evolves into a useful programming language)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115533">
				<div id="div-comment-1115533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">silly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115533">
			March 25, 2014 at 1:51 am</a>		</div>

		<p>(((Note) (to young people)): (lisp ((((is what Haskell) (will look like) (when it eventually evolves) (into a useful programming language))))))</p>
<p>FTFY <a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/234075/what-is-your-best-programmer-joke/235790#235790">stackoverflow.com/&#8230;/235790</a> :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115543">
				<div id="div-comment-1115543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115543">
			March 25, 2014 at 2:35 am</a>		</div>

		<p>&gt;lisp</p>
<p>&gt;look like</p>
<p>&gt;useful programming language</p>
<p>I like functional programming like the next of you, but seriously, the single worst thing about lisp is how it LOOKS (or reads).</p>
<p>&gt;Lisp=Lotsa insignificant Stupid Parentheses</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115563">
				<div id="div-comment-1115563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115563">
			March 25, 2014 at 4:15 am</a>		</div>

		<p>I noticed some potential optimisations:</p>
<p>n &lt; k (no results)</p>
<p>n == k (n blocks each with one element)</p>
<p>Having dealt with all of the n == 0 cases you can also cover:</p>
<p>k == 0 (no results)</p>
<p>k == 1 (one block with all n elements)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115573">
				<div id="div-comment-1115573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arakula</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115573">
			March 25, 2014 at 5:09 am</a>		</div>

		<p>&quot;Back in 2005&quot;?</p>
<p>Well, I&#39;m a firm believer in procrastination, too, but I don&#39;t think I got anything on my backlog that&#39;s been sleeping there for 9 years&#8230; I bow my head in admiration :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115603">
				<div id="div-comment-1115603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115603">
			March 25, 2014 at 5:37 am</a>		</div>

		<p>@AC Fair point &#8211; although I meant &quot;look&quot; somewhat more figuratively than literally. i.e. &quot;Lisp has developed a balance between the imperative and the functional which Haskell will probably eventually emulate.&quot; [I do appreciate there is no one thing called &quot;lisp&quot;, and that each sub-lisp has itself struck this balance in a difference place] </p>
<p>See also <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule">en.wikipedia.org/&#8230;/Greenspun%27s_tenth_rule</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115613">
				<div id="div-comment-1115613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115613">
			March 25, 2014 at 5:41 am</a>		</div>

		<p>Wow Raymond uses JS to present Haskell-like programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115653">
				<div id="div-comment-1115653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115653">
			March 25, 2014 at 9:00 am</a>		</div>

		<p>Turns out JavaScript is actually a pretty cool language that lets you do some pretty neat things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher even thread-even depth-1" id="comment-1115673">
				<div id="div-comment-1115673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115673">
			March 25, 2014 at 9:21 am</a>		</div>

		<p>That JavaScript doesn&#39;t pass coding standards because it is comprehensible. &nbsp;</p>
<p>First, run each word in the routine names through a thesaurus and pick the best and most incomprehensible synonym. &nbsp;Then, remove such minor letters as e. &nbsp;After that, introduce at least three spelling errors in each word. &nbsp;To be cool, also replace all c&#39;s with k&#39;s, and all k&#39;s with c&#39;s. &nbsp;If there&#39;s an f, that becomes ph and so forth.</p>
<p>Instead of using separate functions &#8212; use one function, pass it a parameter that indicates which work to do. &nbsp;Don&#39;t make the mistake of doing all the related work together, instead intermix the lines with an if statement checking which work to do on a line by line basis. &nbsp;The JavaScript console is for the weak, so instead use jQuery and post to Google Docs or Office Online. &nbsp;In addition be cautious to avoid the error of using asynchronous requests, because nothing signals fantastic JavaScript like the browser hanging while it is running.</p>
<p>If possible, name your function $ as that is sure not to collide with anything else on the page.</p>
<p>Now you have proper JavaScript code.</p>
<p>All kidding aside, it&#39;s an elegant solution to the problem though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1115763">
				<div id="div-comment-1115763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115763">
			March 25, 2014 at 7:38 pm</a>		</div>

		<p>Nick: Raymond&#39;s JS code is actually pretty straightforward to translate into C#. Just add some types, change the spelling of &quot;concat&quot; to &quot;Concat&quot; and &quot;map&quot; to &quot;Select&quot;, and change the &quot;function&quot; syntax, and it works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1115783">
				<div id="div-comment-1115783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ralph</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140324-00/?p=1413#comment-1115783">
			March 26, 2014 at 6:46 am</a>		</div>

		<p>I like the use of javascript here, opening a fresh tab in my browser and bringing up its console is a very quick way of writing/testing a quick function like this one.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

