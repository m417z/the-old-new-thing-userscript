<html>
<head>
<title>Finding the leaked object reference by scanning memory: Example</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Finding the leaked object reference by scanning memory: Example</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 9, 2015 / year-entry #7</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">An assertion failure was hit in some code. // There should be no additional references to the object at this point assert(m_cRef == 1); But the reference count was 2. That's not good. Where is that extra reference and who took it? This was not code I was at all familiar with, so I went...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
An assertion failure was hit in some code.
</p>
<pre>
    // There should be no additional references to the object at this point
    assert(m_cRef == 1);
</pre>
<p>
But the reference count was 2.
That's not good.
Where is that extra reference and who took it?
</p>
<p>
This was not code I was at all familiar with, so I went back to first principles:
Let's hope that the reference was not leaked
but rather that the reference was taken and not released.
And let's hope that the memory hasn't been paged out.
(Because
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2007/04/26/2277346.aspx">
debugging is an exercise in optimism</a>.)
</p>
<pre>
1: kd&gt; s 0 0fffffff 00 86 ec 00
04effacc  00 86 ec 00 c0 85 ec 00-00 00 00 00 00 00 00 00  ................ // us
0532c318  00 86 ec 00 28 05 00 00-80 6d 32 05 03 00 00 00  ....(....m2..... // rogue
</pre>
<p>
The first hit is the reference to the object from the code raising the assertion.
The second hit is the interesting one.
That's probably the rogue reference.
But who is it?
</p>
<pre>
1: kd&gt; ln 532c318
1: kd&gt;
</pre>
<p>
It does not report as belong to any module, so it's not a global variable.
</p>
<p>
Is it a reference from a stack variable?
If so, then a stack trace of the thread with the active reference may tell us
who is holding the reference and why.
</p>
<pre>
1: kd&gt; !process -1 4
PROCESS 907ef980  SessionId: 2  Cid: 06cc    Peb: 7f4df000  ParentCid: 0298
    DirBase: 9e983000  ObjectTable: a576f560  HandleCount: 330.
    Image: contoso.exe

        THREAD 8e840080  Cid 06cc.0b78  Teb: 7f4de000 Win32Thread: 9d04b3e0 WAIT
        THREAD 91e24080  Cid 06cc.08d8  Teb: 7f4dd000 Win32Thread: 00000000 WAIT
        THREAD 8e9a3580  Cid 06cc.09f8  Teb: 7f4dc000 Win32Thread: 9d102cc8 WAIT
        THREAD 8e2be080  Cid 06cc.0878  Teb: 7f4db000 Win32Thread: 9d129978 WAIT
        THREAD 82c08080  Cid 06cc.0480  Teb: 7f4da000 Win32Thread: 00000000 WAIT
        THREAD 90552400  Cid 06cc.0f5c  Teb: 7f4d9000 Win32Thread: 9d129628 WAIT
        THREAD 912c9080  Cid 06cc.02ec  Teb: 7f4d8000 Win32Thread: 00000000 WAIT
        THREAD 8e9e8680  Cid 06cc.0130  Teb: 7f4d7000 Win32Thread: 9d129cc8 READY on processor 0
        THREAD 914b8b80  Cid 06cc.02e8  Teb: 7f4d6000 Win32Thread: 9d12d568 WAIT
        THREAD 9054ab00  Cid 06cc.0294  Teb: 7f4d5000 Win32Thread: 9d12fac0 WAIT
        THREAD 909a2b80  Cid 06cc.0b54  Teb: 7f4d4000 Win32Thread: 00000000 WAIT
        THREAD 90866b80  Cid 06cc.0784  Teb: 7f4d3000 Win32Thread: 93dbb4e0 RUNNING on processor 1
        THREAD 90cfcb80  Cid 06cc.08c4  Teb: 7f3af000 Win32Thread: 93de0cc8 WAIT
        THREAD 90c39a00  Cid 06cc.0914  Teb: 7f3ae000 Win32Thread: 00000000 WAIT
        THREAD 90629480  Cid 06cc.0bc8  Teb: 7f3ad000 Win32Thread: 00000000 WAIT
</pre>
<p>
Now I have to dump the stack boundaries to see whether the address in question
lies within the stack range.
</p>
<pre>
1: kd&gt; dd 7f4de000 l3
7f4de000  ffffffff 00de0000 00dd0000
1: kd&gt; dd 7f4dd000 l3
7f4dd000  ffffffff 01070000 01060000
...
1: kd&gt; dd 7f4d7000 l3
7f4d7000  ffffffff 04e00000 04df0000 // our stack
...
</pre>
<p>
The rogue reference did not land in any of the stack ranges,
so it's probably on the heap.
Fortunately, since it's on the heap,
it's probably part of some larger object.
And let's hope (see: optimism) that it's an object with virtual methods.
</p>
<pre>
0532c298  73617453
0532c29c  74654d68
0532c2a0  74616461
0532c2a4  446e4961
0532c2a8  00007865
0532c2ac  00000000
0532c2b0  76726553 USER32!_NULL_IMPORT_DESCRIPTOR <perf> (USER32+0xb6553)
0532c2b4  44497265
0532c2b8  45646e49
0532c2bc  41745378 contoso!CMumble::CMumble+0x4c
0532c2c0  00006873
0532c2c4  00000000
0532c2c8  4e616843
0532c2cc  79546567
0532c2d0  4e496570
0532c2d4  00786564
0532c2d8  2856662a
0532c2dc  080a9b87
0532c2e0  00f59fa0
0532c2e4  05326538
0532c2e8  00000000
0532c2ec  00000000
0532c2f0  0000029c
0532c2f4  00000001
0532c2f8  00000230
0532c2fc  fdfdfdfd
0532c300  45ea1370 contoso!CFrumble::`vftable'
0532c304  45ea134c contoso!CFrumble::`vftable'
0532c308  00000000
0532c30c  05b9a040
0532c310  00000002
0532c314  00000001
0532c318  00ec8600
</pre>
<p>
Hooray, there is a vtable a few bytes before the pointer,
and the contents of the memory do appear to match a
<code>CFrumble</code> object,
so I think we found our culprit.
</p>
<p>
I was able to hand off the next stage of the investigation
(why is a Frumble being created with a reference to the object?)
to another team member with more expertise with Frumbles.
</p>
<p>
(In case anybody cared, the conclusion was that this was a
variation of a known bug.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1170723">
				<div id="div-comment-1170723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Query</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170723">
			January 9, 2015 at 8:12 am</a>		</div>

		<p>How would you have done if the reference count instead was too small then?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170733">
				<div id="div-comment-1170733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170733">
			January 9, 2015 at 8:19 am</a>		</div>

		<p>It sounds so easy and obvious when you do it, but I&#39;ll admit: I wouldn&#39;t have thought of that &#8211; good tool in my repertoire though, although I hope I won&#39;t need to debug things like this often.. or ever ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1170743">
				<div id="div-comment-1170743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170743">
			January 9, 2015 at 9:03 am</a>		</div>

		<p>If the reference count is too small, that usually means the object gets deleted early, and then some poor client of the object tries to use it after it was deleted; this typically results in a crash.</p>
<p>I&#39;ve had good luck using the Time Travel Tracing diagnostic to go back in time and dump all the stacks when the m_cRef memory was written to, then matching up AddRef and Release&#39;s in pairs until I find the guilty culprit that called Release more times than AddRef.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170753">
				<div id="div-comment-1170753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170753">
			January 9, 2015 at 10:10 am</a>		</div>

		<p>That looks like mainframe VM debugging, which I did many years ago&#8230; sometimes from printouts of a memory dump&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170763">
				<div id="div-comment-1170763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170763">
			January 9, 2015 at 11:26 am</a>		</div>

		<p>@Maurits</p>
<p>Unfortunately, us normals still don&#39;t have access to iDNA.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1170793">
				<div id="div-comment-1170793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170793">
			January 9, 2015 at 1:06 pm</a>		</div>

		<p>You can get much the same effect without Time Travel Tracing by setting breakpoints on AddRef and Release which dump the stack and continue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hardon even thread-even depth-1" id="comment-1170813">
				<div id="div-comment-1170813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/gdalsnes' rel='external nofollow' class='url'>gdalsnes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170813">
			January 9, 2015 at 3:50 pm</a>		</div>

		<p>Try to google iDNA: Internationalizing Domain Names in Applications? I would strongly suggest stop using iDNA when its impossible to google. Just confusing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170823">
				<div id="div-comment-1170823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170823">
			January 9, 2015 at 5:08 pm</a>		</div>

		<p>Do not be discouraged by the low comments. This is an example of a good blog post all the same.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170833">
				<div id="div-comment-1170833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob_C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170833">
			January 9, 2015 at 5:23 pm</a>		</div>

		<p>@arghhhhhhhhhhh: Just Google &quot;iDNA time&quot;. It&#39;s there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170843">
				<div id="div-comment-1170843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170843">
			January 10, 2015 at 9:25 am</a>		</div>

		<p>Hey Raymond, I have a question but can&#39;t find an answer.</p>
<p>I have a piece of code (assembler) that references the function pointer</p>
<p>push offset function_x</p>
<p>push x</p>
<p>&#8230;</p>
<p>call y</p>
<p>..</p>
<p>function_x proc uses esi edi ebx&#8230;</p>
<p>but when I compile it in debug mode (using MASM) this code is changed to</p>
<p>push offset function_x_thunk</p>
<p>push x</p>
<p>&#8230;</p>
<p>call y</p>
<p>function_x_thunk offset function_x</p>
<p>and my code fails in debug mode.</p>
<p>How to avoid that (creating those thunks for referenced functions) :)</p>
<p>Thank you</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170853">
				<div id="div-comment-1170853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170853">
			January 10, 2015 at 10:03 am</a>		</div>

		<p>I lllllove these posts!! Very insightful.</p>
<p>Thanks. It means a lot to us.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170873">
				<div id="div-comment-1170873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170873">
			January 11, 2015 at 9:24 am</a>		</div>

		<p>@B: Read the documentation for your linker.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170883">
				<div id="div-comment-1170883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170883">
			January 12, 2015 at 11:33 am</a>		</div>

		<p>@arghhhhhhhhhhh: @Bob_C: &nbsp;</p>
<p>Or, search using Bing. Its first two links returned from searching for &#39;iDNA&#39; are relevant. I&#39;m not meaning to imply anything about general search quality, but perhaps Bing does a better job of finding Microsoft-related information. Or maybe more people use it when specifically searching for Microsoft-related information, so it ranks those sources higher in the results.</p>
<p>(I am not associated with Microsoft other than as a Windows user&#8230;and probably owning stock through index funds.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170933">
				<div id="div-comment-1170933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ama</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170933">
			January 13, 2015 at 1:28 am</a>		</div>

		<p>how did you dump the heap? i don&#39;t understand that part&#8230;&#8230;</p>
<p>also for the stack&#8230;..you dump the entire stack of each thread?</p>
<p>Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170943">
				<div id="div-comment-1170943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">1/2 full!!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170943">
			January 13, 2015 at 4:13 am</a>		</div>

		<p>@Bob. &quot;I&#39;m not meaning to imply anything about general search quality, but &#8230;??&quot;</p>
<p>Good. Because once upon a time there was a blog entry somewhere about those sort of assumptions.(<a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2011/02/10/10127054.aspx">blogs.msdn.com/&#8230;/10127054.aspx</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170953">
				<div id="div-comment-1170953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150109-00/?p=43183#comment-1170953">
			January 13, 2015 at 7:09 am</a>		</div>

		<p>Ama: that&#39;s just a dump of the symbols leading up to the address of the pointer, something like &quot;ddS 532c318-80 L80&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

