<html>
<head>
<title>Building a dialog template at run-time</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Building a dialog template at run-time</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 29, 2005 / year-entry #109</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We've spent quite a bit of time over the past year learning about dialog templates and the dialog manager. Now we're going to put the pieces together to do something interesting: Building a dialog template on the fly. What we're going to write is an extremely lame version of the MessageBox function. Why bother writing...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We've spent quite a bit of time over the past year
learning about dialog templates and the dialog manager.
Now we're going to put the pieces together to do something interesting:
Building a dialog template on the fly.
</p>
<p>
What we're going to write is an extremely lame version of
<a HREF="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/dialogboxes/dialogboxreference/dialogboxfunctions/messagebox.asp">
the <code>MessageBox</code> function</a>.
Why bother writing a bad version of something that Windows already does?
Because you can use it as a starting point for further enhancements.
For example, once you learn how to generate a template dynamically,
you can dynamically add buttons beyond the boring "OK" button,
or you can add additional controls like a "Repeat this answer for all
future occurrences of this dialog" checkbox or maybe insert
an animation control.
</p>
<p>
I'm going to start with a highly inefficient dialog template class.
This is not production-quality, but it's good enough for didactic
purposes.
</p>
<pre>
#include &lt;vector&gt;
class DialogTemplate {
public:
 LPCDLGTEMPLATE Template() { return (LPCDLGTEMPLATE)&amp;v[0]; }
 void AlignToDword()
  { if (v.size() % 4) Write(NULL, 4 - (v.size() % 4)); }
 void Write(LPCVOID pvWrite, DWORD cbWrite) {
  v.insert(v.end(), cbWrite, 0);
  if (pvWrite) CopyMemory(&amp;v[v.size() - cbWrite], pvWrite, cbWrite);
 }
 template&lt;typename T&gt; void Write(T t) { Write(&amp;t, sizeof(T)); }
 void WriteString(LPCWSTR psz)
  { Write(psz, (lstrlenW(psz) + 1) * sizeof(WCHAR)); }

private:
 vector&lt;BYTE&gt; v;
};
</pre>
<p>
I didn't spend much time making this class look pretty because
it's not the focus of this article.  The <code>DialogTemplate</code>
class babysits a <code>vector</code> of bytes
to which you can <code>Write</code> data.
There is also a little <code>AlignToDword</code> method that
pads the buffer to the next <code>DWORD</code> boundary.
This'll come in handy, too.
</p>
<p>
Our message box will need a dialog procedure
which ends the dialog when the <code>IDCANCEL</code> button is pressed.
If we had made any enhancements to the dialog template, we would handle
them here as well.
</p>
<pre>
INT_PTR CALLBACK DlgProc(HWND hwnd, UINT wm, WPARAM wParam, LPARAM lParam)
{
 switch (wm) {
 case WM_INITDIALOG: return TRUE;
 case WM_COMMAND:
  if (GET_WM_COMMAND_ID(wParam, lParam) == IDCANCEL) EndDialog(hwnd, 0);
  break;
 }
 return FALSE;
}
</pre>
<p>
Finally, we build the template.  This is not hard, just tedious.
Out of sheer laziness, we make the message box a fixed size.
If this were for a real program, we would have measured the text
(using <code>ncm.lfCaptionFont</code>
and <code>ncm.lfMessageFont</code>) to determine the
best size for the message box.
</p>
<pre>
BOOL FakeMessageBox(HWND hwnd, LPCWSTR pszMessage, LPCWSTR pszTitle)
{
 BOOL fSuccess = FALSE;
 HDC hdc = GetDC(NULL);
 if (hdc) {
  NONCLIENTMETRICSW ncm = { sizeof(ncm) };
  if (SystemParametersInfoW(SPI_GETNONCLIENTMETRICS, 0, &amp;ncm, 0)) {
   DialogTemplate tmp;

   // Write out the extended dialog template header
   tmp.Write&lt;WORD&gt;(1); // dialog version
   tmp.Write&lt;WORD&gt;(0xFFFF); // extended dialog template
   tmp.Write&lt;DWORD&gt;(0); // help ID
   tmp.Write&lt;DWORD&gt;(0); // extended style
   tmp.Write&lt;DWORD&gt;(WS_CAPTION | WS_SYSMENU | DS_SETFONT | DS_MODALFRAME);
   tmp.Write&lt;WORD&gt;(2); // number of controls
   tmp.Write&lt;WORD&gt;(32); // X
   tmp.Write&lt;WORD&gt;(32); // Y
   tmp.Write&lt;WORD&gt;(200); // width
   tmp.Write&lt;WORD&gt;(80); // height
   tmp.WriteString(L""); // no menu
   tmp.WriteString(L""); // default dialog class
   tmp.WriteString(pszTitle); // title

   // Next comes the font description.
   // See text for discussion of fancy formula.
   if (ncm.lfMessageFont.lfHeight &lt; 0) {
     ncm.lfMessageFont.lfHeight = -MulDiv(ncm.lfMessageFont.lfHeight,
              72, GetDeviceCaps(hdc, LOGPIXELSY));
   }
   tmp.Write&lt;WORD&gt;((WORD)ncm.lfMessageFont.lfHeight); // point
   tmp.Write&lt;WORD&gt;((WORD)ncm.lfMessageFont.lfWeight); // weight
   tmp.Write&lt;BYTE&gt;(ncm.lfMessageFont.lfItalic); // Italic
   tmp.Write&lt;BYTE&gt;(ncm.lfMessageFont.lfCharSet); // CharSet
   tmp.WriteString(ncm.lfMessageFont.lfFaceName);

   // Then come the two controls.  First is the static text.
   tmp.AlignToDword();
   tmp.Write&lt;DWORD&gt;(0); // help id
   tmp.Write&lt;DWORD&gt;(0); // window extended style
   tmp.Write&lt;DWORD&gt;(WS_CHILD | WS_VISIBLE); // style
   tmp.Write&lt;WORD&gt;(7); // x
   tmp.Write&lt;WORD&gt;(7); // y
   tmp.Write&lt;WORD&gt;(200-14); // width
   tmp.Write&lt;WORD&gt;(80-7-14-7); // height
   tmp.Write&lt;DWORD&gt;(-1); // control ID
   tmp.Write&lt;DWORD&gt;(0x0082FFFF); // static
   tmp.WriteString(pszMessage); // text
   tmp.Write&lt;WORD&gt;(0); // no extra data

   // Second control is the OK button.
   tmp.AlignToDword();
   tmp.Write&lt;DWORD&gt;(0); // help id
   tmp.Write&lt;DWORD&gt;(0); // window extended style
   tmp.Write&lt;DWORD&gt;(WS_CHILD | WS_VISIBLE |
                    WS_GROUP | WS_TABSTOP | BS_DEFPUSHBUTTON); // style
   tmp.Write&lt;WORD&gt;(75); // x
   tmp.Write&lt;WORD&gt;(80-7-14); // y
   tmp.Write&lt;WORD&gt;(50); // width
   tmp.Write&lt;WORD&gt;(14); // height
   tmp.Write&lt;DWORD&gt;(IDCANCEL); // control ID
   tmp.Write&lt;DWORD&gt;(0x0080FFFF); // static
   tmp.WriteString(L"OK"); // text
   tmp.Write&lt;WORD&gt;(0); // no extra data

   // Template is ready - go display it.
   fSuccess = DialogBoxIndirect(g_hinst, tmp.Template(),
                                hwnd, DlgProc) &gt;= 0;
  }
  ReleaseDC(NULL, hdc); // fixed 11 May
 }
 return fSuccess;
}
</pre>
<p>
The fancy formula for determining the font point size is not that fancy
after all.  The dialog manager converts the font height from point to
pixels via
<a HREF="http://msdn.microsoft.com/library/en-us/gdi/fontext_1wmq.asp">
the standard formula</a>:
</p>
<blockquote CLASS=m><p>
<code>fontHeight = -MulDiv(pointSize, GetDeviceCaps(hdc, LOGPIXELSY), 72);</code>
</p>
</blockquote>
<p>Therefore, to get the original pixel value back,
we need to solve this formula for <code>pointSize</code>
so that when it is sent through the formula again, we get the
original value back.
</p>
<p>
The template itself follows
<a href="http://blogs.msdn.com/oldnewthing/archive/2004/06/23/163596.aspx">
the format we discussed earlier</a>, no surprises.
</p>
<p>
One subtlety is that the control identifier for our OK button
is <code>IDCANCEL</code> instead of the <code>IDOK</code> you might
have expected.  That's because this message box has only one button,
so we want to
<a href="http://blogs.msdn.com/oldnewthing/archive/2004/12/14/300204.aspx">
let the user hit the ESC key to dismiss it</a>.
</p>
<p>
Now all that's left to do is take this function for a little spin.
</p>
<pre>
void OnChar(HWND hwnd, TCHAR ch, int cRepeat)
{
 if (ch == TEXT(' ')) {
  FakeMessageBox(hwnd,
   L"This is the text of a dynamically-generated dialog template. "
   L"If Raymond had more time, this dialog would have looked prettier.",
   L"Title of message box");
 }
}

    // add to window procedure
    HANDLE_MSG(hwnd, WM_CHAR, OnChar);
</pre>
<p>
Fire it up, hit the space bar, and observe the faux message box.
</p>
<p>
Okay, so it's not very exciting visually, but that wasn't the point.
The point is that you now know how to build a dialog template at
run-time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-273223">
				<div id="div-comment-273223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273223">
			April 29, 2005 at 9:04 am</a>		</div>

		<p>I ran into this a while ago when I used this technique to build a custom error dialog for my app: there does not seem to be a way to retrieve the localised strings for &quot;OK&quot;, &quot;Cancel&quot;, &quot;Apply&quot; etc. from the system. Is there?</p>
<p>That said, people do get confused when they see something like:<br />
<br />&quot;You have unsaved changes. Are you sure you want to quit?&quot; [Ja] [Nee] [Annuleren]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-273233">
				<div id="div-comment-273233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Boris Zakharin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273233">
			April 29, 2005 at 9:47 am</a>		</div>

		<p>Don&#8217;t you need a &quot;using namespace std&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cornedbee even thread-even depth-1" id="comment-273273">
				<div id="div-comment-273273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CornedBee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273273">
			April 29, 2005 at 2:48 pm</a>		</div>

		<p>Either that or (far better) fully qualify std::vector.</p>
<p>The problem with importing the complete std namespace is that it&#8217;s huge, and contains things like &quot;min&quot; and &quot;copy&quot;, which you wouldn&#8217;t want in the global namespace.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-universalis odd alt thread-odd thread-alt depth-1" id="comment-273293">
				<div id="div-comment-273293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Universalis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273293">
			April 30, 2005 at 3:03 am</a>		</div>

		<p>I hope this series will include, somewhere, suggestions for how to size the message box and position its buttons in order to make it look like a real Windows message box.<br />
<br />This information is essential if you actually want the result to look just like any other message box, only with an extra &quot;Don&#8217;t show me again&quot; button (or whatever other modification you&#8217;re making) and as far as I know it is documented nowhere.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000300008195987d even thread-even depth-1" id="comment-273303">
				<div id="div-comment-273303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Spire' rel='external nofollow' class='url'>Spire</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273303">
			April 30, 2005 at 12:16 pm</a>		</div>

		<p>Universalis: For the specific modification you mentioned, you could just use the SHMessageBoxCheck() function:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/shlwapi/others/SHMessageBoxCheck.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/shlwapi/others/SHMessageBoxCheck.asp</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-273313">
				<div id="div-comment-273313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273313">
			April 30, 2005 at 12:28 pm</a>		</div>

		<p>Quote<br />
<br />Universalis: For the specific modification you mentioned, you could just use the SHMessageBoxCheck() function:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/shlwapi/others/SHMessageBoxCheck.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/shlwapi/others/SHMessageBoxCheck.asp</a></p>
<p>From the article </p>
<p>Security Alert:  Do not take any dangerous actions if the function returns either -1 or iDefault. If an error occurs when attempting to display the message box SHMessageBoxCheck returns -1 or, in some cases, iDefault. Such errors can be caused, for example, by insufficient memory or resources. If you get one of these return values, you should be aware that the user did not necessarily see the dialog box and consequently did not positively agree to any action.</p>
<p>Note  Do not confuse &quot;Do not show this dialog box&quot; with &quot;Remember this answer&quot;. SHMessageBoxCheck does not provide &quot;Remember this answer&quot; functionality. If the user opts to suppress the message box again, the function does not preserve which button they clicked. Instead, subsequent invocations of SHMessageBoxCheck simply return the value specified by iDefault. Consider the following example.</p>
<p>Yikes! Those two together pretty much convince me to write my own.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-273323">
				<div id="div-comment-273323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273323">
			April 30, 2005 at 2:28 pm</a>		</div>

		<p>I&#8217;m not exactly a chatty guy, but I&#8217;ve been following this blog for some time now, enjoying most of what I read.</p>
<p>Related to what steven said, I&#8217;d really like to know if there&#8217;s any way to get hold of default system dialog templates, like the one that MessageBox() uses. With knowledge gained in this series of articles it should be pretty straightforward to perform small modifications (translating buttons for one) and passing the template along its merry way to DialogBoxIndirect().</p>
<p>Of course, if MessageBox() itself builds the template on the fly, then this is out of the question.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-273333">
				<div id="div-comment-273333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Kane</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273333">
			May 1, 2005 at 5:17 pm</a>		</div>

		<p>One of the possible uses for this is modifying the Open file standard dialog.  If I create a template in memory in a hglobal and pass it in the openfilename structure in the hInstance member using the OFN_ENABLETEMPLATEHANDLE flag, who is responsible for freeing the global memory? I dont see a comment in msdn either way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-273353">
				<div id="div-comment-273353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273353">
			May 1, 2005 at 11:02 pm</a>		</div>

		<p>Jim Kane: Remember, the GetOpenFileName function is not psychic.  Since the memory block passed as the template is just a block of memory, clearly it cannot free it since it doesn&#8217;t know how it was allocated &#8211; if it was even allocated at all. It might have (and indeed probably did) come from a resource, which is just a static block of memory.</p>
<p>Alex: MessageBox builds the template on the fly. Notice that the size of the dialog changes depending on how much text you pass?</p>
<p>Dean Harding: But what if the user accepts the default? For example, suppose it&#8217;s a Yes/No question with a default of Yes, and the user selected No last time. The user selects Yes this time, which happens to be the default, and your algorithm will change it to a No!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-273343">
				<div id="div-comment-273343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273343">
			May 1, 2005 at 6:41 pm</a>		</div>

		<p>&gt; Those two together pretty much convince me to write my own.</p>
<p>The second problem just means that you need to store the &#8216;last&#8217; value that the user specified so that when you get the default back, you assume the last value.</p>
<p>The first problem is more tricky, but in general I don&#8217;t think you should allow the user to suppress *any* security-related dialog.  It should only be used for more mundane things like &#8216;This is not the default xyz application, do you want to set it now?&#8217;&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-273363">
				<div id="div-comment-273363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273363">
			May 2, 2005 at 1:06 am</a>		</div>

		<p>Oh, I meant if the iDefault value is returned.  The SHMessageBoxCheck function returns the value specified in the iDefault parameter if the user has, in the past, checked the &quot;supress this dialog&quot; option.  Supposedly you&#8217;d set this to some value that&#8217;s different to what would be returned if they just hit enter to select the default *button*.</p>
<p>I think the documentation for SHMessageBoxCheck is a bit confusing in this respect: there&#8217;s two defaults, the default button and the default-value-that&#8217;s-returned-if-the-dialog-wasn&#8217;t-shown.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-273373">
				<div id="div-comment-273373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273373">
			May 2, 2005 at 1:14 am</a>		</div>

		<p>Hmm.  OK, I admit I&#8217;ve never actually used SHMessageBoxCheck myself, so my comments before were just based on my reading the documentation.  But I just read it again, and it&#8217;s got this note at the bottom:</p>
<p>&quot;Note: The default button displayed by the message box should agree with your iDefault value. The lack of support for the MB_DEFBUTTON2 flag means that iDefault should be set to IDOK if you have specified the MB_OK or MB_OKCANCEL flag. The iDefault value should be set to IDYES if you have set the MB_YESNO flag.&quot;</p>
<p>Which tells me that SHMessageBoxCheck is expecting iDefault to be the ID of one of the buttons displayed.  I had just assumed that it could be any old integer that I could used to work out if I need to used the saved value or not.</p>
<p>So if it *is* the case that iDefault has to be the ID of one of the buttons, then it seems making your own message box to add that functionaly makes sense.  I don&#8217;t know why it *would* work like that, though&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000300008195987d even thread-even depth-1" id="comment-273383">
				<div id="div-comment-273383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Spire' rel='external nofollow' class='url'>Spire</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273383">
			May 2, 2005 at 10:32 am</a>		</div>

		<p>I too have never actually used SHMessageBoxCheck() myself. I was curious enough about its behavior that I tried to write a quick test app last night so I could see exactly how iDefault is used in various situations.</p>
<p>Thing is, I could find neither a version of of shlwapi.h that declared the function, nor a version of shlwapi.lib or (shlwapi.dll) that exported it. I looked in several places, including the Microsoft Windows Server 2003 SP1 Platform SDK &#8211; April 2005 Edition.</p>
<p>Is the MSDN documentation in error as to where this function is defined? If so, where can I find it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-273563">
				<div id="div-comment-273563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273563">
			May 2, 2005 at 10:35 pm</a>		</div>

		<p>OK, here&#8217;s what I can gather about SHMessageBoxCheckEx.  It&#8217;s signature looks like this:</p>
<p>int WINAPI SHMessageBoxCheckExW(HWND, HINSTANCE, LPCWSTR, DLGPROC, LPARAM, int, LPCWSTR)</p>
<p>It basically just lets you specify your own dialog resource to use as the message box, and your own dialog procedure.  SHMessageBoxCheck, therefore, is just a wrapper around SHMessageBoxCheckEx which passes in a dialog resource from shlwapi.dll (#4608) and a default dlgproc.</p>
<p>So while it looks like SHMessageBoxCheck is probably pretty neat, there&#8217;s still a good reason to write your own MessageBoxWithCheck function to get the proper window size, better handling of the case when the checkbox is checked, and all that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000300008195987d even thread-even depth-1" id="comment-273543">
				<div id="div-comment-273543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Spire' rel='external nofollow' class='url'>Spire</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-273543">
			May 2, 2005 at 7:03 pm</a>		</div>

		<p>To answer my own question: SHMessageBoxCheck() is exported by shlwapi.dll, but only by ordinal (185 for ASCII, 191 for Unicode).</p>
<p>I played around with it, and have come to the conclusion that it&#8217;s best to let iDefault be some value that doesn&#8217;t coincide with any button command ID, or with the -1 error code. For example, -2 seems to work well. This is contrary to the second &quot;Note&quot; in the documentation, which appears to have been written by someone confused about the purpose of iDefault.</p>
<p>With that in mind, there are two ways to approach using this function sensibly:</p>
<p>The first way is as Dean Harding suggested: always cache the return code of the call whenever it corresponds to a valid command ID. When the function starts returning -2 (my suggested iDefault), it means that the user requested a &quot;don&#8217;t show again&quot; on the *previous* call; when this happens, use the cached value of the return code instead. Because the function does not inform you of the user&#8217;s &quot;don&#8217;t show again&quot; request until the next call, the return code must be cached every time. Furthermore, this cached value must be made to persist as well, in case the user exits the application before the function has a chance to be called again (and return -2).</p>
<p>The second way is to call the function, and then immediately check each time to see if the appropriate &quot;DontShowMeThisDialogAgain&quot; registry value has been created. (This may be ugly, but it should be a reliable thing to check, since it&#8217;s documented.) If it has, cache the *current* return code of the function, and be sure to make it persist for next time. When the function starts returning -2, use that cached return code instead. Actually, once you&#8217;ve seen that the registry value has been created, you can always just skip over the SHMessageBoxCheck() call entirely, and go straight to the cached return code.</p>
<p>As for the cosmetic appearance of the dialog, it doesn&#8217;t really look much like MessageBox(). Here are the differences I&#8217;ve noticed:</p>
<p> &#8211; The margins are smaller.<br />
<br /> &#8211; The dialog is narrow and appears to be fixed-width; only the height changes to accommodate long text.<br />
<br /> &#8211; The buttons are right-aligned instead of centered.<br />
<br /> &#8211; The dialog makes no sound at all, regardless of the icon being displayed.</p>
<p>There is also a fancier SHMessageBoxCheckEx() function (291 ASCII, 292 Unicode), but it isn&#8217;t officially documented as far as I can tell, so I haven&#8217;t bothered playing with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000300008195987d odd alt thread-odd thread-alt depth-1" id="comment-274453">
				<div id="div-comment-274453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Spire' rel='external nofollow' class='url'>Spire</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-274453">
			May 5, 2005 at 3:22 pm</a>		</div>

		<p>I&#8217;ve just remembered another MessageBox() feature that, sure enough, SHMessageBoxCheck() also fails to implement:</p>
<p> &#8211; The dialog caption and text are not copied to the clipboard when the user presses Ctrl+Insert or Ctrl+C.</p>
<p>(I realize that this whole SHMessageBoxCheck() sidetrack is a somewhat off-topic, but I figure that this might serve as a useful feature checklist for those looking to reimplement MessageBox() with extra functionality.)</p>
<p>While we&#8217;re on the subject of SHMessageBoxCheck(), here&#8217;s another thought for those still interested in using it despite all its shortcomings:</p>
<p>It has occurred to me that the first approach to using the function (i.e., Dean Harding&#8217;s) can be streamlined by simply passing the previous return code value as iDefault. Of course, this still means that the return code must be cached and made persistent, but it greatly simplifies the logic surrounding the function call. No more need to use an arbitrary iDefault like -2; you can just use the return code as-is &#8212; unless of course it&#8217;s -1, in which case you should fall back to MessageBox().</p>
<p>Nice and clean. In fact, it makes so much sense (finally) that I suspect that this is actually how SHMessageBoxCheck() was designed to be used &#8212; the MSDN documentation notwithstanding.</p>
<p>How does one suggest a documentation correction to MSDN? If this actually is the way SHMessageBoxCheck() and iDefault were designed to be used, it would be nice to see it documented correctly. It would also be nice to see the true location of this and other shlwapi.dll functions documented (i.e., exported only by ordinal), and the bogus references to shlwapi.h deleted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-275543">
				<div id="div-comment-275543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">binaryc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-275543">
			May 11, 2005 at 3:48 pm</a>		</div>

		<p>Shouldn&#8217;t you pass NULL as the hwnd to ReleaseDC since you have the DC for the entire screen rather than for a specific window?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-275573">
				<div id="div-comment-275573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Kane</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-275573">
			May 11, 2005 at 9:20 pm</a>		</div>

		<p>Dear OldNewThing Guy:<br />
<br />When I asked about disposal of the template I had not yet gotten my code running.  You are correct that in retrospect my question was silly.  To save someone else the trouble I went thru the docs of OFN structure for hinstance says:<br />
<br />If the OFN_ENABLETEMPLATEHANDLE flag is set in the Flags member, hInstance is a handle to a memory object containing a dialog box template.</p>
<p>Which is incorrect &#8211; you pass the address of the memory block not a handle!  I was trying to pass an hglobal for the longest time but it is the address that worked.</p>
<p>Jim Kane</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-289813">
				<div id="div-comment-289813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/07/08/436815.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-289813">
			July 8, 2005 at 10:00 am</a>		</div>

		<p>You can&#8217;t. It&#8217;s gone.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-647973">
				<div id="div-comment-647973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/07/21/8760127.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-647973">
			July 21, 2008 at 11:16 am</a>		</div>

		<p>You can&#8217;t think of everything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-701993">
				<div id="div-comment-701993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.keyongtech.com/2359717-create-multiple-dialogs-at-runtime' rel='external nofollow' class='url'>Create multiple dialogs at runtime | keyongtech</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743#comment-701993">
			January 18, 2009 at 11:46 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.keyongtech.com/2359717-create-multiple-dialogs-at-runtime" rel="nofollow">http://www.keyongtech.com/2359717-create-multiple-dialogs-at-runtime</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

