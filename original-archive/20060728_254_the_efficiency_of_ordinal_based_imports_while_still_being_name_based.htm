<html>
<head>
<title>The efficiency of ordinal-based imports while still being name-based</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The efficiency of ordinal-based imports while still being name-based</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 28, 2006 / year-entry #255</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060728-00/?p=30313</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Reader Tom brought up the interesting point that ordinal-based imports are slightly faster than name-based, though not by much. But if even that tiny fraction of a percentage bothers you, you can still get the benefits of ordinal-based imports while still being name-based. People are more familiar with the first half of the "rebase and...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><a href="http://blogs.msdn.com/oldnewthing/archive/2006/07/18/669668.aspx#669832"> Reader Tom brought up the interesting point that ordinal-based imports are slightly faster than name-based</a>, though not by much. But if even that tiny fraction of a percentage bothers you, you can still get the benefits of ordinal-based imports while still being name-based.</p>
<p> People are more familiar with the first half of the "rebase and bind" duo than the second. But it's binding that speeds up import table resolution. When a DLL is "bound" to another DLL, information about the target DLL is cached in the original DLL. Specifically, the timestamp of the target (so that the loader can detect whether the cache is valid), the ordinal corresponding to the name (the "hint"), and the address of the ultimate function. For example, if I had a DLL that linked to <code>kernel32!LocalAlloc</code> the entry in the DLL would go something like this: </p>
<p> "Hello. I would like to link to these functions in <code>kernel32</code>. Oh, and by the way, all the hints I'm about to give you are based on the Aug 04 00:56:36 2004 version of <code>KERNEL32.DLL</code>. As for the function <code>LocalAlloc</code>, I believe that the function resides at address 0x7C8099BD, and that you'll find it in <code>kernel32</code>'s named export table in position 247." </p>
<p> When the loader goes to resolve the import, it checks the timestamp of the target file on the computer with the one cached in the DLL. If they match, then it doesn't need to do any look-ups at all; it justs uses the cached value (0x7C8099BD). If they don't match (for example, maybe there was a <code>kernel32</code> hot-fix), it can still use the look-up hint: Before doing the binary search for <code>LocalAlloc</code>, it looks directly at slot 247 to see if <code>LocalAlloc</code> is there. If so, then the cost of the binary search has been avoided, and the overhead of the look-up over a pure ordinal import is just one string comparison. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-404323">
				<div id="div-comment-404323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sebastian Redl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060728-00/?p=30313#comment-404323">
			July 28, 2006 at 11:10 am</a>		</div>

		<p>How does it know that slot 247 actually IS LocalAlloc? Does it save the names along with the ordinal? I thought those were two separate tables, one matching names to ordinals and one matching ordinals to addresses.</p>
<div CLASS=post>[<i>Sorry, I wasn&#8217;t clear enough. I&#8217;ve updated the entry. It&#8217;s slot 247 in the <b>name</b> table (the table that maps names to ordinals). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-404363">
				<div id="div-comment-404363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060728-00/?p=30313#comment-404363">
			July 28, 2006 at 12:34 pm</a>		</div>

		<p>..and a timestamp comparison.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-404373">
				<div id="div-comment-404373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060728-00/?p=30313#comment-404373">
			July 28, 2006 at 12:35 pm</a>		</div>

		<p>Actually, I think it was me what pointed that out. &nbsp;:) And I&#8217;m sorry for the bad link in that post. &nbsp;It should be <a href="http://msdn.microsoft.com/msdnmag/issues/0500/hood/" target=_new rel=nofollow rel="nofollow">http://msdn.microsoft.com/msdnmag/issues/0500/hood/</a> without the trailing angle bracket. (Whoever wrote the link detection in the blog software should really fix that bug). </p>
<p>The &#8216;bind&#8217; utility that performs the DLL binding is part of the Platform SDK. &nbsp;Some documentation on it is available at <a href="http://windowssdk.msdn.microsoft.com/en-us/library/ms726407.aspx" target=_new rel=nofollow rel="nofollow">http://windowssdk.msdn.microsoft.com/en-us/library/ms726407.aspx</a></p>
<div CLASS=post>[<i>Oops, sorry about the attribution. (I don&#8217;t think the people who write the blog software read my blog comments.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-404443">
				<div id="div-comment-404443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060728-00/?p=30313#comment-404443">
			July 28, 2006 at 1:34 pm</a>		</div>

		<p>What happens if the file timestamp matches, but kernel32 (or whatever DLL &#8212; this isn&#8217;t very likely with kernel32) can&#8217;t be loaded at its preferred base address? &nbsp;The cached address (0x7C8099BD) would be wrong in that case, right? &nbsp;(If that&#8217;s actually a memory address, and not an RVA or something, then it would be.) </p>
<p>I assume there&#8217;s code in the loader to handle this case properly (i.e. fall back to either the ordinal hint or the name)?</p>
<div CLASS=post>[<i>Obviously. The purpose of this entry was not to provide the algorithm in excruciating detail. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-404473">
				<div id="div-comment-404473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://drv.nu/' rel='external nofollow' class='url'>Daniel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060728-00/?p=30313#comment-404473">
			July 28, 2006 at 2:51 pm</a>		</div>

		<p>BryanK: &nbsp;That would just require a simple subtraction of the preferred base and addition of the actual base to the cached value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-404493">
				<div id="div-comment-404493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">microbe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060728-00/?p=30313#comment-404493">
			July 28, 2006 at 2:59 pm</a>		</div>

		<p>: it justs uses the cached value (0x7C8099BD). If they don&#8217;t match (for example, maybe there was a kernel32 hot-fix)&#8230; </p>
<p>How does it know they don&#8217;t match? I assume this value is just the entry address of the function. What other information could be obtained easily from this address to verify?</p>
<div CLASS=post>[<i>The &#8220;they&#8221; that match/don&#8217;t match are the cached timestamp and the actual timestamp on the file. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-404543">
				<div id="div-comment-404543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060728-00/?p=30313#comment-404543">
			July 28, 2006 at 6:11 pm</a>		</div>

		<p>So what happens if somehow the timestamps match, but the .dlls are different?</p>
<div CLASS=post>[<i>I think you have a pretty good idea what happens. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-404633">
				<div id="div-comment-404633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060728-00/?p=30313#comment-404633">
			July 30, 2006 at 8:53 pm</a>		</div>

		<p>Wouldn&#8217;t it be better if the checksum field in the PE header was actually populated by default, and it matched on that rather than the timestamp? &nbsp;That seems like a more reliable means of detecting a matching DLL.</p>
<div CLASS=post>[<i>Consider the cost of enforcing the checksum. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-404683">
				<div id="div-comment-404683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060728-00/?p=30313#comment-404683">
			July 31, 2006 at 9:01 am</a>		</div>

		<p>Raymond commented <br />&gt;Consider the cost of enforcing the checksum </p>
<p>If you were using it, you wouldn&#8217;t need to recalculate the checksum, it would just be one more 32 bit word you check to see if the DLL matches. It would only be calcuated by the linker when the DLL was built. </p>
<p>/I once worked on an embedded system which this information to compare module versions. </p>
<p>uint32 Checksum; &nbsp; // Just a sum of bytes <br />uint16 FileLength; <br />uint8 &nbsp;VersionNumber; </p>
<p>If any of these did not match, a new version would be downloaded. Unfortunately, the checksum was just an arithmetic sum of bytes, not a CRC, and there were some very small files where the order of bytes could change but nothing else. E.g. </p>
<p>0x01, 0x02, 0x03 has the same sum as <br />0x02, 0x01, 0x03 </p>
<p>The one byte version number was added to handle this. When you built new software, you checked for the file contents changing without altering the byte sum, and handled it by bumping the version byte manually. </p>
<p>There were date and time fields too, but the module comparer had been hacked to ignore them, since otherwise &#8216;rebuilding from the same label would cause loads of unnecessary downloads&#8217;. Sheesh.</p>
<div CLASS=post>[<i>But who verifies that the checksum is correct? What would prevent a linker from setting all checksums to zero like they do today? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-404873">
				<div id="div-comment-404873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060728-00/?p=30313#comment-404873">
			July 31, 2006 at 1:03 pm</a>		</div>

		<p>Well, you could refuse to load any DLLs that didn&#8217;t have the checksum set, but that would break every DLL ever shipped. The kernel does enforce the checksum for kernel mode &#8211; when I first installed Virtual PC on Windows 2000 from an MSDN download, the ISO had (silently) burned incorrectly and the VPC network driver was corrupted, so driver wouldn&#8217;t load. This caused Windows 2000 to bugcheck. On Windows XP it merely caused the network stack to stop working. </p>
<p>At this point I obtained ISOBuster and extracted the contents of the ISO to my hard disk, and installed from there. Much better.</p>
<div CLASS=post>[<i>As I understand it, the original question was a hypothetical: &#8220;What if we required the checksum from day 1&#8230;&#8221; The first point is that without enforcement you haven&#8217;t gained anything. The second point is that enforcement in user-mode means you lose demand-paging. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

