<html>
<head>
<title>Customizing item enumeration with IShellItem, the old-fashioned way</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Customizing item enumeration with IShellItem, the old-fashioned way</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 2, 2015 / year-entry #24</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150202-00/?p=44773</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If you are targeting Windows 8 or higher, you can use STR_ENUM_ITEMS_FLAGS to customize how shell items are enumerated. But what if you need to run on older systems, too? In that case, you will need to drop to the lower-level IShell­Folder::Enum­Objects function, like we did before, and then reconstructe shell items from the low-level IShell­Folder...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If you are targeting Windows&nbsp;8 or higher,
you can
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/01/26/10588645.aspx">
use
<code>STR_<wbr>ENUM_<wbr>ITEMS_<wbr>FLAGS</code></a>
to customize how shell items are enumerated.
But what if you need to run on older systems, too?
</p>
<p>
In that case, you will need to drop to the lower-level
<code>IShell&shy;Folder::<wbr>Enum&shy;Objects</code> function,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/03/17/10508309.aspx">
like we did before</a>,
and then reconstructe shell items from the low-level
<code>IShell&shy;Folder</code>
and
<code>ITEMID_<wbr>CHILD</code>.
(Note that the term "low-level" is used here only in a relative
sense; it's lower level than <code>IShell&shy;Item</code>.)
</p>
<p>
We can wrap that inside a helper class.
</p>
<pre>
#define UNICODE
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/12/71851.aspx">_UNICODE</a>
#define STRICT
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/01/24/10387757.aspx">STRICT_TYPED_ITEMIDS</a>
#include &lt;windows.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;atlbase.h&gt;
CComModule _Module;
#include &lt;atlcom.h&gt;
#include &lt;atlalloc.h&gt;
#include &lt;stdio.h&gt;
#include &lt;tchar.h&gt;

class CEnumItemsWithSHCONTF :
    public CComObjectRoot,
    public IEnumShellItems
{
public:
  BEGIN_COM_MAP(CEnumItemsWithSHCONTF)
    COM_INTERFACE_ENTRY(IEnumShellItems)
  END_COM_MAP()

  static HRESULT Create(HWND hwnd, SHCONTF shcontf,
                 IShellItem *psiFolder, REFIID riid, void **ppv);

  STDMETHOD(Next)(ULONG celt, IShellItem **ppsi, ULONG *pceltFetched);
  STDMETHOD(Skip)(ULONG celt);
  STDMETHOD(Reset)();
  STDMETHOD(Clone)(IEnumShellItems **ppesiClone);

private:
  static HRESULT CreateRef1(CComObject&lt;CEnumItemsWithSHCONTF&gt; **ppObj);
  HRESULT Initialize(HWND hwnd, SHCONTF shcontf, IShellItem *psiFolder);
  HRESULT CloneFrom(CEnumItemsWithSHCONTF *pSource);
private:
  CComPtr&lt;IShellFolder&gt; m_spsfParent;
  CComPtr&lt;IEnumIDList&gt; m_speidl;
};

HRESULT CEnumItemsWithSHCONTF::CreateRef1(
    CComObject&lt;CEnumItemsWithSHCONTF&gt; **ppObj)
{
  CComObject&lt;CEnumItemsWithSHCONTF&gt; *pObj;
  HRESULT hr = CComObject&lt;CEnumItemsWithSHCONTF&gt;::
                       CreateInstance(&amp;pObj);
  *ppObj = CComPtr&lt;CComObject&lt;CEnumItemsWithSHCONTF&gt;&nbsp;&gt;(pObj).Detach();
  return hr;
}

HRESULT CEnumItemsWithSHCONTF::Initialize(
  HWND hwnd, SHCONTF shcontf, IShellItem *psiFolder)
{
  HRESULT hr = psiFolder-&gt;BindToHandler(
    nullptr, BHID_SFObject, IID_PPV_ARGS(&amp;m_spsfParent));
  if (SUCCEEDED(hr)) {
    hr = m_spsfParent-&gt;EnumObjects(hwnd, shcontf, &amp;m_speidl);
  }
  return hr;
}

HRESULT CEnumItemsWithSHCONTF::CloneFrom(
    CEnumItemsWithSHCONTF *pSource)
{
  HRESULT hr = pSource-&gt;m_speidl-&gt;Clone(&amp;m_speidl);
  if (SUCCEEDED(hr)) {
    m_spsfParent = pSource-&gt;m_spsfParent;
  }
  return hr;
}

HRESULT CEnumItemsWithSHCONTF::Create(
    HWND hwnd, SHCONTF shcontf,
    IShellItem *psiFolder, REFIID riid, void **ppv)
{
  *ppv = nullptr;

  CComPtr&lt;CComObject&lt;CEnumItemsWithSHCONTF&gt;&gt; spObj;
  HRESULT hr = CreateRef1(&amp;spObj);

  if (SUCCEEDED(hr)) {
    hr = spObj-&gt;Initialize(hwnd, shcontf, psiFolder);
    if (SUCCEEDED(hr)) {
      hr = spObj-&gt;QueryInterface(riid, ppv);
    }
  }
  return hr;
}

HRESULT CEnumItemsWithSHCONTF::Next(
    ULONG celt, IShellItem **ppsi, ULONG *pceltFetched)
{
  if (celt != 1 &amp;&amp; pceltFetched == nullptr) {
    return E_INVALIDARG;
  }

  for (ULONG i = 0; i &lt; celt; i++) ppsi[i] = nullptr;

  ULONG celtFetched = 0;
  HRESULT hr = S_OK;
  while (hr == S_OK &amp;&amp; celtFetched &lt; celt) {
    CComHeapPtr&lt;ITEMID_CHILD&gt; spidlChild;
    hr = m_speidl-&gt;Next(1, &amp;spidlChild, nullptr);
    if (hr == S_OK) {
      hr = SHCreateItemWithParent(nullptr, m_spsfParent,
        spidlChild, IID_PPV_ARGS(&amp;ppsi[celtFetched]));
      if (SUCCEEDED(hr)) celtFetched++;
    }
  }

  if (pceltFetched != nullptr) *pceltFetched = celtFetched;
  if (SUCCEEDED(hr)) {
    hr = (celtFetched == celt) ? S_OK : S_FALSE;
  }
  return hr;
}

HRESULT CEnumItemsWithSHCONTF::Skip(ULONG celt)
{
  return m_speidl-&gt;Skip(celt);
}

HRESULT CEnumItemsWithSHCONTF::Reset()
{
  return m_speidl-&gt;Reset();
}

HRESULT CEnumItemsWithSHCONTF::Clone(
    IEnumShellItems **ppesiClone)
{
  *ppesiClone = nullptr;

  CComPtr&lt;CComObject&lt;CEnumItemsWithSHCONTF&gt;&gt; spClone;
  HRESULT hr = CreateRef1(&amp;spClone);

  if (SUCCEEDED(hr)) {
    hr = spClone-&gt;CloneFrom(this);
    if (SUCCEEDED(hr)) {
        *ppesiClone = spClone.Detach();
    }
  }
  return hr;
}
</pre>
<p>
The <code>CEnum&shy;Items&shy;With&shy;SHCONTF</code> class
does the work of enumerating child items the old-fashioned way,
then constructing shell items from the result.
Most of this code is boilerplate
(including the
part to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/09/29/475298.aspx">
avoid having a live COM object with reference count zero</a>).
</p>
<p>
The object has two members, the source folder from which the items
are being enumerated and the low-level enumerator itself.
We initialize the object by asking for the low-level
<code>IEnum&shy;ID&shy;List</code> handler and calling
<code>IEnum&shy;ID&shy;List::<wbr>Enum&shy;Objects</code> with the
specific flags we want.
When it is time to generate items, we ask the inner enumerator
for the next ID list, and construct a shell item around it
by comining the ID list with the parent folder.
</p>
<p>
The rest is bookkeeping:
We keep track of the number of elements fetched so far
in order to return it to the caller if requested,
and also in order to decide
what the return value should be.
If all items were retrieved successfully, then return
<code>S_OK</code>.
If we ran out of items, then return
<code>S_FALSE</code>.
If something went wrong, we return the error code,
possibly with partially-fetched results.
</p>
<p>
The other enumerator operations like <code>Reset</code> and
<code>Clone</code> are delegated to the inner enumerator.
Cloning is a little tricky because we also have to clone ourselves!
</p>
<p>
Now we can adapt
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/01/26/10588645.aspx">
our program from last time</a>
to use this class instead of
<code>BHID_<wbr>Enum&shy;Items</code>.
</p>
<pre>
int __cdecl wmain(int argc, wchar_t **argv)
{
 <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/20/135841.aspx">CCoInitialize</a> init;

 if (argc &lt; 2) return 0;
 CComPtr&lt;IShellItem&gt; spsiFolder;
 SHCreateItemFromParsingName(argv[1], nullptr,
                             IID_PPV_ARGS(&amp;spsiFolder));

 CComPtr&lt;IEnumShellItems&gt; spesi;
 <font COLOR=blue>CEnumItemsWithSHCONTF::Create(nullptr, SHCONTF_FOLDERS,
    spsiFolder, IID_PPV_ARGS(&amp;spesi));</font>
 for (CComPtr&lt;IShellItem&gt; spsi;
      spesi-&gt;Next(1, &amp;spsi, nullptr) == S_OK;
      spsi.Release()) {
  <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/08/30/10202076.aspx">PrintDisplayName</a>(spsi, SIGDN_NORMALDISPLAY, L"Display Name");
  PrintDisplayName(spsi, SIGDN_FILESYSPATH, L"File system path");
  wprintf(L"\n");
 }
 return 0;
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1174033">
				<div id="div-comment-1174033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150202-00/?p=44773#comment-1174033">
			February 2, 2015 at 9:00 am</a>		</div>

		<p>No, both are residents of Hungary ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1174023">
				<div id="div-comment-1174023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm100</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150202-00/?p=44773#comment-1174023">
			February 2, 2015 at 8:56 am</a>		</div>

		<p> STDMETHOD(Clone)(IEnumShellItems **ppesiClone);</p>
<p>is Ckoe a pepsiClone?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1174153">
				<div id="div-comment-1174153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150202-00/?p=44773#comment-1174153">
			February 3, 2015 at 3:03 am</a>		</div>

		<p>I&#39;m not familiar with this API, so I hope CreateInstance is required to set the outparam to nullptr if it fails. (If only the API required addrefed outparams, then you wouldn&#39;t need to jump through these hoops.)</p>
<div class="post">[<em>If all else fails, read <a href="https://msdn.microsoft.com/en-us/library/vstudio/9e31say1(v=vs.110).aspx">the documentation</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

