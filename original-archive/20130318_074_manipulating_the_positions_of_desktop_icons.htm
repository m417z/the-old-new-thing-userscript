<html>
<head>
<title>Manipulating the positions of desktop icons</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Manipulating the positions of desktop icons</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 18, 2013 / year-entry #75</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130318-00/?p=4933</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's little program demonstrates how you can manipulate the positions of desktop icons. The entire program is just scaffolding to get us far enough that we can call IFolder­View::Get­Item­Position and IFolder­View::Select­And­Position­Items. First, we adapt the code we saw some time ago that extracts the IFolder­View from a window. Reminder: These "Little Programs" do no error...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's little program demonstrates how you can manipulate
the positions of desktop icons.
</p>
<p>
The entire program is just scaffolding to get us far
enough that we can call
<a HREF="http://msdn.microsoft.com/library/bb775600.aspx">
<code>IFolder&shy;View::<wbr>Get&shy;Item&shy;Position</code></a>
and
<a HREF="http://msdn.microsoft.com/library/bb775614.aspx">
<code>IFolder&shy;View::<wbr>Select&shy;And&shy;Position&shy;Items</code></a>.
</p>
<p>
First, we adapt the code
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/07/20/188696.aspx">
we saw some time ago</a>
that extracts the <code>IFolder&shy;View</code> from a window.
</p>
<p>
<b>Reminder</b>: These "Little Programs" do no error checking
because they are intended as demonstrations, not production-ready
applications.
</p>
<pre>
void FindDesktopFolderView(REFIID riid, void **ppv)
{
 CComPtr&lt;IShellWindows&gt; spShellWindows;
 spShellWindows.CoCreateInstance(CLSID_ShellWindows);

 CComVariant vtLoc(CSIDL_DESKTOP);
 CComVariant vtEmpty;
 long lhwnd;
 CComPtr&lt;IDispatch&gt; spdisp;
 spShellWindows-&gt;FindWindowSW(
     &amp;vtLoc, &amp;vtEmpty,
     SWC_DESKTOP, &amp;lhwnd, SWFO_NEEDDISPATCH, &amp;spdisp);

 CComPtr&lt;IShellBrowser&gt; spBrowser;
 CComQIPtr&lt;IServiceProvider&gt;(spdisp)-&gt;
     QueryService(SID_STopLevelBrowser,
                  IID_PPV_ARGS(&amp;spBrowser));

 CComPtr&lt;IShellView&gt; spView;
 spBrowser-&gt;QueryActiveShellView(&amp;spView);

 spView-&gt;QueryInterface(riid, ppv);
}
</pre>
<p>
The
<code>Find&shy;Desktop&shy;Folder&shy;View</code>
function takes the code from that earlier article
and uses it to extract the shell view for the desktop.
Everything here should look familiar
(just in a different costume),
aside from the call to
<code>Find&shy;Window&shy;SW</code>,
because we are looking for a specific window by location
rather than just enumerating through all of them.
</p>
<p>
The first parameter to
<code>Find&shy;Window&shy;SW</code>.
is the folder we are looking for.
In our case, we are looking for the desktop.
</p>
<p>
The second parameter is reserved and must be <code>VT_EMPTY</code>.
</p>
<p>
The third parameter describes
<a HREF="http://msdn.microsoft.com/library/cc836581.aspx">
the types of windows we are looking for</a>.
We use the special
<code>SWC_<wbr>DESKTOP</code> flag
(available starting in Windows Vista)
to say,
"Hey, I know the desktop isn't the sort of thing
people think of when they go looking for Explorer
windows, but I know what I'm talking about,
so let me have it."
</p>
<p>
The fourth parameter receives the window handle,
which is of no interest to us, but the parameter is mandatory,
so we have to give it something.
</p>
<p>
The fifth parameter specifies the
<a HREF="http://msdn.microsoft.com/librarycc836580.aspx">
search options</a>.
We use
<code>SWFO_<wbr>NEED&shy;DISPATCH</code> to say,
"Please return the <code>IDispatch</code> in the sixth parameter."
And the sixth parameter is where we want the
<code>IDispatch</code> to be returned.
</p>
<p>
Okay, we already have enough to be able to enumerate
all the desktop icons and print their names and locations.
</p>
<pre>
#define UNICODE
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/12/71851.aspx">_UNICODE</a>
#include &lt;windows.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;exdisp.h&gt;
#include &lt;shlwapi.h&gt;
#include &lt;atlbase.h&gt;
#include &lt;atlalloc.h&gt;
#include &lt;stdio.h&gt;

// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/20/135841.aspx">CCoInitialize</a> incorporated by reference

int __cdecl wmain(int argc, wchar_t **argv)
{
 CCoInitialize init;
 CComPtr&lt;IFolderView&gt; spView;
 FindDesktopFolderView(IID_PPV_ARGS(&amp;spView));
 CComPtr&lt;IShellFolder&gt; spFolder;
 spView-&gt;GetFolder(IID_PPV_ARGS(&amp;spFolder));

 CComPtr&lt;IEnumIDList&gt; spEnum;
 spView-&gt;Items(SVGIO_ALLVIEW, IID_PPV_ARGS(&amp;spEnum));
 for (CComHeapPtr&lt;ITEMID_CHILD&gt; spidl;
      spEnum-&gt;Next(1, &amp;spidl, nullptr) == S_OK;
      spidl.Free()) {
  <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/08/23/218837.aspx">STRRET</a> str;
  spFolder-&gt;GetDisplayNameOf(spidl, SHGDN_NORMAL, &amp;str);
  CComHeapPtr&lt;wchar_t&gt; spszName;
  <a HREF="http://msdn.microsoft.com/library/bb773427.aspx">StrRetToStr</a>(&amp;str, spidl, &amp;spszName);

  POINT pt;
  spView-&gt;GetItemPosition(spidl, &amp;pt);
  
  wprintf(L"At %4d,%4d is %ls\n", pt.x, pt.y, spszName);
 }
 return 0;
}
</pre>
<p>
After getting the <code>IFolder&shy;View</code>,
we also ask for the corresponding
<code>IShell&shy;Folder</code>.
This isn't actually necessary for enumerating the icons,
but it lets us print their names.
</p>
<p>
We ask the view for its <code>Items</code> enumeration,
then proceed to enumerate each of the items.
For each item, we ask the
<code>IShell&shy;Folder</code> for its name,
and we ask the
<code>IFolder&shy;View</code> for its position.
Then we print the results.
</p>
<p>
Okay, that was neat, but you can do more than just query
the positions.
You can also modify them.
</p>
<pre>
int __cdecl wmain(int argc, wchar_t **argv)
{
 CCoInitialize init;
 CComPtr&lt;IFolderView&gt; spView;
 FindDesktopFolderView(IID_PPV_ARGS(&amp;spView));

 CComPtr&lt;IEnumIDList&gt; spEnum;
 spView-&gt;Items(SVGIO_ALLVIEW, IID_PPV_ARGS(&amp;spEnum));
 for (CComHeapPtr&lt;ITEMID_CHILD&gt; spidl;
      spEnum-&gt;Next(1, &amp;spidl, nullptr) == S_OK;
      spidl.Free()) {
  POINT pt;
  spView-&gt;GetItemPosition(spidl, &amp;pt);
  pt.x += (rand() % 5) - 2;
  pt.y += (rand() % 5) - 2;

 PCITEMID_CHILD apidl[1] = { spidl };
 spView-&gt;SelectAndPositionItems(
     1, apidl, &amp;pt, SVSI_POSITIONITEM);
 }
 return 0;
}
</pre>
<p>
This time, instead of printing the item's name and position,
we jiggle the icon position by a few pixels randomly,
then set the jiggled coordinates as the new position.
</p>
<p>
Turn off
<i>Auto arrange icons</i> and
<i>Align icons to grid</i> on the desktop,
and then run this program.
Hey, look, your icons shifted randomly by a few pixels.
</p>
<p>
For extra hijinx,
drop a call to
<code>spView-&gt;<wbr>Set&shy;Current&shy;Folder&shy;Flags(<wbr
>FWF_<wbr>AUTO&shy;ARRANGE | FWF_<wbr>SNAP&shy;TO&shy;GRID, 0)</code>
before you enter the loop
(to programmatically turn off auto-arrange and snap-to-grid),
then
put this program in a loop,
and slip it onto a friend's
(or enemy's) computer.
</p>
<p>
More seriously,
we can we put the two pieces together to make
a program that saves and restores desktop icon positions.
</p>
<p>
<p>
<b>Second reminder</b>: These "Little Programs" do no error checking
because they are intended as demonstrations, not production-ready
applications.
</p>
<pre>
void SavePositions(IFolderView *pView, PCWSTR pszFile)
{
 CComPtr&lt;IStream&gt; spStream;
 SHCreateStreamOnFileEx(pszFile, STGM_CREATE | STGM_WRITE,
     FILE_ATTRIBUTE_NORMAL, TRUE, nullptr, &amp;spStream);
 CComPtr&lt;IEnumIDList&gt; spEnum;
 pView-&gt;Items(SVGIO_ALLVIEW, IID_PPV_ARGS(&amp;spEnum));
 for (CComHeapPtr&lt;ITEMID_CHILD&gt; spidl;
      spEnum-&gt;Next(1, &amp;spidl, nullptr) == S_OK;
      spidl.Free()) {
  IStream_WritePidl(spStream, spidl);
  POINT pt;
  pView-&gt;GetItemPosition(spidl, &amp;pt);
  IStream_Write(spStream, &amp;pt, sizeof(pt));
 }
}
</pre>
<p>
The <code>Save&shy;Positions</code> function
enumerates all the icons in a view and writes their identities
and positions to a file.
</p>
<pre>
void RestorePositions(IFolderView *pView, PCWSTR pszFile)
{
 CComPtr&lt;IStream&gt; spStream;
 SHCreateStreamOnFileEx(pszFile, STGM_READ,
     FILE_ATTRIBUTE_NORMAL, FALSE, nullptr, &amp;spStream);
 POINT pt;
 for (CComHeapPtr&lt;ITEMID_CHILD&gt; spidl;
      SUCCEEDED(IStream_ReadPidl(spStream, &amp;spidl)) &amp;&amp;
      SUCCEEDED(IStream_Read(spStream, &amp;pt, sizeof(pt)));
      spidl.Free()) {
  PCITEMID_CHILD apidl[1] = { spidl };
  pView-&gt;SelectAndPositionItems(1, apidl, &amp;pt, SVSI_POSITIONITEM);
 }
}
</pre>
<p>
The <code>Restore&shy;Positions</code> function does the reverse.
It reads the identities and positions from the file
and calls
<code>IFolder&shy;View::<wbr>Select&shy;And&shy;Position&shy;Items</code>
to move the item to its previously-saved position.
</p>
<pre>
int __cdecl wmain(int argc, wchar_t **argv)
{
 if (argc != 3) {
  wprintf(L"Usage: %ls save filename\n"
          L"       %ls restore filename\n", argv[0], argv[0]);
  return 0;
 }
 CCoInitialize init;

 CComPtr&lt;IFolderView&gt; spView;
 FindDesktopFolderView(IID_PPV_ARGS(&amp;spView));

 if (wcscmp(argv[1], L"save") == 0) {
  SavePositions(spView, argv[2]);
 } else if (wcscmp(argv[1], L"restore") == 0) {
  RestorePositions(spView, argv[2]);
 }
 return 0;
}
</pre>
<p>
And all that's left is to write the main program that calls
either the <code>Save&shy;Positions</code> or
<code>Restore&shy;Positions</code> function
based on the command line parameters.
</p>
<p>
<b>Exercise</b>:
Discuss what happens if you rename an item on the desktop,
and then try to restore its position.
What could be done to address this?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1045523">
				<div id="div-comment-1045523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130318-00/?p=4933#comment-1045523">
			March 18, 2013 at 7:39 am</a>		</div>

		<p>Presumably you&#39;d use something less likely to change than the name of the shortcut, such as the target&#39;s full path (minus command line parameters), or some other field (do shortcuts get an internal unique ID? &nbsp;I don&#39;t know much about these things).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1045533">
				<div id="div-comment-1045533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130318-00/?p=4933#comment-1045533">
			March 18, 2013 at 7:41 am</a>		</div>

		<p>Alternatively, depending on what use case this tool is for, you may also want to extend your program to backup the entire contents of the user&#39;s Desktop folder (and perhaps the shared Desktop folder) elsewhere along with the icon position information, and restore it later. &nbsp;In which case renamed shortcuts aren&#39;t a problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1045613">
				<div id="div-comment-1045613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeffrey Bosboom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130318-00/?p=4933#comment-1045613">
			March 18, 2013 at 10:50 am</a>		</div>

		<p>I&#39;m surprised programmatic access to desktop icon arrangement is supported, given the potential for evil applications to insist their icon appear in a particular location. &nbsp;Though I guess programs would try to move files off the desktop, create their icon, then (hopefully) move the files back to the desktop &#8212; so perhaps just letting them move their icon is a harm reduction strategy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1045623">
				<div id="div-comment-1045623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">C1</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130318-00/?p=4933#comment-1045623">
			March 18, 2013 at 11:31 am</a>		</div>

		<p>For those trying to mess with their coworkers, spView-&gt;SetCurrentFolderFlags(FWF_AUTOARRANGE | FWF_SNAPTOGRID, 0); requires IFolderView2 only available on Vista or later.</p>
<p>Funny that this doesn&#39;t require elevation to mess with the desktop.</p>
<div class="post">[<em>Non-issue because <code>SWC_DESKTOP</code> already requires Vista or higher. And this doesn&#39;t require elevation because non-administrators are allowed to customize their desktop icon positions. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1045633">
				<div id="div-comment-1045633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130318-00/?p=4933#comment-1045633">
			March 18, 2013 at 12:11 pm</a>		</div>

		<p>@C1: I would think that the &quot;airtight hatchway&quot; rule applies to desktop icon positioning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1045663">
				<div id="div-comment-1045663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RE: desktop icon position</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130318-00/?p=4933#comment-1045663">
			March 18, 2013 at 3:31 pm</a>		</div>

		<p>I wished for something like this in the XP days, so that icons could be properly restored after resolution changes. At one point when I attempted my multiple desktops app, I thought of this to allow different icon layout per desktop&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1045693">
				<div id="div-comment-1045693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130318-00/?p=4933#comment-1045693">
			March 18, 2013 at 11:24 pm</a>		</div>

		<p>I&#39;ll suggest to put the &quot;reminder&quot; thing inside the code as comment. So if the code somehow ends in some production code, the people following the code can have a chance to know what should be done with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1045713">
				<div id="div-comment-1045713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130318-00/?p=4933#comment-1045713">
			March 19, 2013 at 4:19 am</a>		</div>

		<p>The solution to the exercise is to create and serialise shortcuts to all of the desktop items. The shell will then track the shortcuts&#39; targets for you. More information is available in a handy blog post from 24th February, 2011.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-1046013">
				<div id="div-comment-1046013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130318-00/?p=4933#comment-1046013">
			March 19, 2013 at 8:01 pm</a>		</div>

		<p>&quot;More seriously, we can we put the two pieces together to make a program that saves and restores desktop icon positions.&quot;</p>
<p>I was very happy when I got to this sentence. &nbsp;This was exactly what I thought of when I read the article title.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1046233">
				<div id="div-comment-1046233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130318-00/?p=4933#comment-1046233">
			March 20, 2013 at 12:33 pm</a>		</div>

		<p>&quot;Non-issue because SWC_DESKTOP already requires Vista or higher. And this doesn&#39;t require elevation because non-administrators are allowed to customize their desktop icon positions.&quot;</p>
<p>But annoyingly, they can&#39;t remove shared desktop icons. &nbsp;Which makes sense from a security standpoint (no access to remove the shortcut) but not a UX standpoint (imo Explorer should simply hide the file if it can&#39;t remove it because of that type of issue).</p>
<div class="post">[<em>True, but then you have the problem of where to store this &quot;files that have been hidden&quot; state and what to do about it when the profile roams. (Since the shared desktop does not roam, but the user desktop does.) It&#39;s bad enough when icon positions are reset when your profile roams, imagine if files magically unhid too. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis even thread-even depth-1" id="comment-1046313">
				<div id="div-comment-1046313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130318-00/?p=4933#comment-1046313">
			March 20, 2013 at 8:39 pm</a>		</div>

		<p>This post reminds me of the time years ago when a customer requested that we build a custom solution that would ensure that the organization&#39;s logo in their mandated desktop wallpaper would never be obscured by an icon. &nbsp;If a new icon were created or a user moved an existing icon such that it obscured part of the logo, desktop monitoring software would move it someplace else. &nbsp;That still ranks as the single dumbest customer request I can remember ever receiving. &nbsp;(And that&#39;s saying something.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1046363">
				<div id="div-comment-1046363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130318-00/?p=4933#comment-1046363">
			March 21, 2013 at 7:13 am</a>		</div>

		<p>Wait, you can use CSIDLs in place of PIDLs? I always thought they only worked with SHGet[Special]FolderLocation/Path&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

