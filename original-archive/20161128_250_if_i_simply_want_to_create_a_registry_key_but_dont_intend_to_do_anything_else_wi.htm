<html>
<head>
<title>If I simply want to create a registry key but don't intend to do anything else with it, what security access mask should I ask for?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If I simply want to create a registry key but don&#8217;t intend to do anything else with it, what security access mask should I ask for?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 28, 2016 / year-entry #251</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161128-00/?p=94815</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If you need nothing, then ask for nothing.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to create a registry key if it didn't already exist,
but they weren't interested in writing anything to the key yet.
They just wanted to ensure that it existed.
Now, we know that the
<code>Reg&shy;Create&shy;Key&shy;Ex</code> function
will either open a key (if it exists) or create a key
(if it doesn't already exist).
That seems to fit the bill perfectly,
so we have this so far:
</p>
<pre>
HKEY subKey;
LONG result = RegCreateKeyEx(
    parentKey, subkeyName, 0, nullptr,
    0, ????, nullptr, &amp;subKey, nullptr);
if (result == ERROR_SUCCESS) {
    RegCloseKey(subKey);
}
</pre>
<p>
Now, we know that the <code>parentKey</code>
must have been opened with
<code>KEY_<wbr>CREATE_<wbr>SUB_<wbr>KEY</code>
access in order for us to be able to create
a subkey.
But what goes into the question marks,
which specify the access mask for the subkey?
Should we say <code>KEY_<wbr>WRITE</code>
because we are creating the key?
Or do we say <code>0</code> because we aren't
intending to do anything at all with the new key?
</p>
<p>
In this case, saying <code>0</code> is just fine.
The program doesn't do anything with the subkey
aside from close the handle,
and closing a handle doesn't require any special
permissions.
If you planned to use the <code>subKey</code>
to perform any operations on the subkey,
then you need to request an access mask that
is compatible with the operations you intend
to perform.
</p>
<p>
But if you don't intend to perform any operations,
then you don't need to request any access.
Passing <code>0</code> is just fine.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1275135">
				<div id="div-comment-1275135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161128-00/?p=94815#comment-1275135">
			November 28, 2016 at 10:05 am</a>		</div>

		<p>I hope they plan to do something with the key eventually &#8212; otherwise, they don&#8217;t need to create it.</p>
<p>Why can&#8217;t they create the key when they want to write to it or add subkeys?  I don&#8217;t understand&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1275145">
				<div id="div-comment-1275145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161128-00/?p=94815#comment-1275145">
			November 28, 2016 at 10:49 am</a>		</div>

		<p>Probably because they are interacting with a component that triggers on key existence, where the value is not relevant.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1275846">
				<div id="div-comment-1275846" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161128-00/?p=94815#comment-1275846">
			December 6, 2016 at 6:45 am</a>		</div>

		<p>Ah, thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1275155">
				<div id="div-comment-1275155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161128-00/?p=94815#comment-1275155">
			November 28, 2016 at 11:08 am</a>		</div>

		<p>Before the UAC days, passing MAXIMUM_ALLOWED in contexts like this was sane. But then again, 0 is sane either way.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1275165">
				<div id="div-comment-1275165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161128-00/?p=94815#comment-1275165">
			November 29, 2016 at 1:02 am</a>		</div>

		<p>Is passing 0 guaranteed to be future-proof?  What if a future version of the API, performing more rigorous checking, decides that passing 0 doesn&#8217;t make sense since you won&#8217;t be able to use the key you&#8217;ve just created, and returns an error?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1275175">
				<div id="div-comment-1275175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161128-00/?p=94815#comment-1275175">
			November 29, 2016 at 7:00 am</a>		</div>

		<p>As I understand it, the access is for the handle returned, not for the operation of the function call. So if this (key creation unrelated to returned handle use) remains in the future, and you still don&#8217;t want to use the handle returned (apart from close which requires no special permissions) passing 0 will always be valid.</p>
<p>That is, the function is designed for a use case whereby the handle returned is not used (except to close). That case is the creation of a key. If this use case is valid in the future then passing 0 will be valid.</p>
<p>Notes:</p>
<p>From the documentation (and the name of the function) it does not appear that this &#8216;just create a key&#8217; is a side effect, that could be &#8216;dropped&#8217;.</p>
<p>In the future, maybe you will have to have non-zero access permissions on handles (why?), which would break this use, however best practice is to use the minimum permissions required. Therefore if the above use case is required, best practice would dictate that  should be supported.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1275185">
				<div id="div-comment-1275185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161128-00/?p=94815#comment-1275185">
			November 29, 2016 at 7:03 am</a>		</div>

		<p>&#8230; that {nothing} should be supported &#8230; (angle brackets not good)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt depth-3" id="comment-1275255">
				<div id="div-comment-1275255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161128-00/?p=94815#comment-1275255">
			November 29, 2016 at 9:39 am</a>		</div>

		<p>Well, there is a use for opening a file or key with no access to it already. So while there is a reason for it then it isn&#8217;t going away.<br />
Checking for the existence is one very valid reason, and you don&#8217;t need the access mask to have anything other than 0 for that. Pre-emptively creating a file or a key is also another very valid reason, and again a 0 for the access mask will do just fine.<br />
Another thing that is called out in the documentation is that some actions don&#8217;t actually check the access mask, they check the key&#8217;s ACL instead. So an example of this is if you create a key, specifying that the key has a 0 access mask, you can still use the handle obtained from that to use as a parent key for another call to RegCreateKeyEx. This is mentioned in the remarks section for RegOpenKeyEx. (<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724897(v=vs.85)" rel="nofollow">https://msdn.microsoft.com/en-us/library/windows/desktop/ms724897(v=vs.85)</a>.aspx).<br />
So no, the access mask being 0 is not going away because it is quite future proof and also quite useful.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1275295">
				<div id="div-comment-1275295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kirill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161128-00/?p=94815#comment-1275295">
			November 30, 2016 at 5:26 am</a>		</div>

		<p>Passing MAXIMUM_ALLOWED has never been sane. It worked, sure, but it wasn&#8217;t sane.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

