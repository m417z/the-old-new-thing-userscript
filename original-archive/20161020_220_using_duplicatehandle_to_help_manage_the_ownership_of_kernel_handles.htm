<html>
<head>
<title>Using DuplicateHandle to help manage the ownership of kernel handles</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Using DuplicateHandle to help manage the ownership of kernel handles</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 20, 2016 / year-entry #221</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161020-00/?p=94555</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">That one's mine.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was using a third party I/O library that also gave you
access to the underlying <code>HANDLE</code>,
in case you needed it.
The customer needed that underlying
<code>HANDLE</code> so it could pass it to
<a HREF="https://msdn.microsoft.com/en-us/library/bdts1c9x.aspx">
<code>_open_osfhandle()</code></a>
and get a C runtime
file descriptor,
which could then be used by other C runtime functions
to operate on the I/O object.
</p>
<p>
Everything was great until it came time to close the I/O object,
because both the I/O library and the C runtime tried to close
the handle.
and that resulted in assertion failures due to invalid handles.
</p>
<p>
The problem here is that both the I/O library
and the C runtime think that they are responsible for
closing the handle.
The I/O library wants to close the handle because
it created the handle in the first place, and the
special method to obtain that underlying <code>HANDLE</code>
wasn't transferring ownership of the handle to you;
it merely gave you a handle that you could borrow.
On the other hand, the
<code>_open_osfhandle()</code> function will close
the handle when the file descriptor is closed,
because the function assumes that you're giving
it not only the handle, but also the responsibility to close
the handle.
</p>
<p>
Neither library has a way to change the handle semantics.
There isn't a way to tell the I/O library or the C runtime,
"Hey, don't close that handle."
</p>
<p>
The solution here is to use the
<code>Duplicate&shy;Handle</code> function
to create a brand new handle that refers to the same
underlying kernel object.
You can then pass the duplicate to
<code>_open_osfhandle()</code>.
Both the I/O library and the C runtime library
will close their respective handles.
Since each handle is closed exactly once,
balance is restored to the universe.
</p>
<p>
<b>Exercise</b> (easy):
Suppose you have a C runtime file descriptor,
and you want to take the underlying kernel handle
and give it to another library,
which will close the handle you give it.
How do you manage this without running
into a double-close bug?
</p>
<p>
<b>Exercise</b> (slightly harder):
Suppose your program needs more than 2048
C runtime file descriptors,
which is more than
<a HREF="https://msdn.microsoft.com/en-us/library/6e3b887c.aspx">
<code>_setmaxstdio</code></a>
accepts.
Fortunately, your program doesn't actively
use all of the descriptors at the same time,
so you're thinking that you can
virtualize the file descriptors by
"paging them in" and "paging them out"
from underlying kernel handles.
How would you do this?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1270485">
				<div id="div-comment-1270485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161020-00/?p=94555#comment-1270485">
			October 20, 2016 at 7:38 am</a>		</div>

		<p>Easy Excercise: use _get_osfhandle(&#8230;) to get a HANDLE from a file descriptor, the DuplicateHandle() it and pass the duplicate to the library.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jeremytais odd alt thread-odd thread-alt depth-1 parent" id="comment-1270495">
				<div id="div-comment-1270495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161020-00/?p=94555#comment-1270495">
			October 20, 2016 at 8:12 am</a>		</div>

		<p>To the harder question &#8212; This feels a lot like when someone asks why they cannot have more than 10000 GDI objects open at the same time.  To which the answer is almost always:  You are doing it wrong.  Sure you could use DuplicateHandle with some of the machinery in the stdio library to get the underlying OS handle, but it still feels very wrong.  If you don&#8217;t need 2048 simultaneous file descriptors, then close them when you don&#8217;t need them.  If you do need 2048 simultaneous file descriptors, redesign your program.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle even depth-2 parent" id="comment-1270535">
				<div id="div-comment-1270535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161020-00/?p=94555#comment-1270535">
			October 20, 2016 at 11:50 am</a>		</div>

		<p>What if you&#8217;re designing a file server or CDN?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1270585">
				<div id="div-comment-1270585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161020-00/?p=94555#comment-1270585">
			October 20, 2016 at 2:47 pm</a>		</div>

		<p>If the main point of your design is doing heavy lifting in some specific area, then you probably will not get away with one-liner. Standard libraries are designed for convenience in the first place, not for some extreme edge cases.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1270565">
				<div id="div-comment-1270565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161020-00/?p=94555#comment-1270565">
			October 20, 2016 at 12:34 pm</a>		</div>

		<p>I first though &#8220;if you have to asks the limit, you are doing it wrong&#8221;. Then I remembered cases like file servers, database servers, etc. Even with caching, it&#8217;s reasonable to have hundreds or thousands of files opened at the same time in those cases. It&#8217;s not the 80s anymore, and Windows is used as a server OS, so its API and C runtime have to support those scenarios.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt thread-even depth-1 parent" id="comment-1270505">
				<div id="div-comment-1270505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161020-00/?p=94555#comment-1270505">
			October 20, 2016 at 8:22 am</a>		</div>

		<p>For the harder one, I would say that you keep a table of your Windows handles and permissions and ask for a C runtime file handle based on that Windows handle. You can then duplicate the handle and use _open_osfhandle to get the file handle.<br />
Once the handle has been used, you can then close the C runtime file handle. This allows reuse of the C runtime while keeping everything open.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1270526">
				<div id="div-comment-1270526" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161020-00/?p=94555#comment-1270526">
			October 20, 2016 at 11:22 am</a>		</div>

		<p>I don&#8217;t think there&#8217;s better answer. (Well, I though I might get my answer before other&#8230; :D )</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1270515">
				<div id="div-comment-1270515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florian S.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161020-00/?p=94555#comment-1270515">
			October 20, 2016 at 9:37 am</a>		</div>

		<p>Correct me if I&#8217;m wrong, but wouldn&#8217;t it be better if the third-party library created a duplicate of the handle before it actually returns it to the caller? I mean, if you were to implement it&#8230; :)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1270545">
				<div id="div-comment-1270545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161020-00/?p=94555#comment-1270545">
			October 20, 2016 at 11:52 am</a>		</div>

		<p>Nope. Almost never does the callee need to hang on to the handle. Usually stuff like this exists for calling DeviceIoControl.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1270555">
				<div id="div-comment-1270555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161020-00/?p=94555#comment-1270555">
			October 20, 2016 at 12:29 pm</a>		</div>

		<p>As Joshua says, it&#8217;s reasonable that the library provides the original handle: if you need it for short-term use, you use it directly. And if you need to make longer use, it&#8217;s your responsibility to duplicate and close it. As long as it is documented, it&#8217;s perfectly logical and valid.</p>
<p>In any case, it&#8217;s futile discussing whether the library should duplicate the handle or not. It&#8217;s a third party library, and you can&#8217;t modify it. All you can do is to use it or to work around its bugs or design problems.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1270685">
				<div id="div-comment-1270685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Josh B</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161020-00/?p=94555#comment-1270685">
			October 21, 2016 at 11:50 pm</a>		</div>

		<p>I&#8217;m hoping Raymond comes in to give his answer to the hard one before comments close, rather than sticking it on the queue for 2020. That sounds like something that might come in handy someday.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1270695">
				<div id="div-comment-1270695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161020-00/?p=94555#comment-1270695">
			October 22, 2016 at 3:14 pm</a>		</div>

		<p>It&#8217;s not really hard and most of tools are already present. The only missing piece is _get_osfhandle.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

