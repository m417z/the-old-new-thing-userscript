<html>
<head>
<title>Don't forget, the fourth parameter to ReadFile and WriteFile is sometimes mandatory</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Don&#8217;t forget, the fourth parameter to ReadFile and WriteFile is sometimes mandatory</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 4, 2013 / year-entry #93</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130404-00/?p=4753</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The Read­File and Write­File functions have a parameter called lp­Number­Of­Byte­Read, which is documented as __out_opt LPDWORD lpNumberOfBytesRead, // or __out_opt LPDWORD lpNumberOfBytesWritten, "Cool," you think. "That parameter is optional, and I can safely pass NULL." My program runs fine if standard output is a console, but if I redirect standard output, then it crashes on...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>Read&shy;File</code>
and
<code>Write&shy;File</code>
functions have a parameter called
<code>lp&shy;Number&shy;Of&shy;Byte&shy;Read</code>,
which is documented as
</p>
<pre>
  __out_opt LPDWORD lpNumberOfBytesRead,
// or
  __out_opt LPDWORD lpNumberOfBytesWritten,
</pre>
<p>
"Cool," you think.
"That parameter is optional, and I can safely pass <code>NULL</code>."
</p>
<blockquote CLASS=q>
<p>
My program runs fine if standard output is a console,
but if I redirect standard output, then it crashes
on the <code>Write&shy;File</code> call.
I verified that the handle is valid.
</p>
<pre>
int __cdecl main(int, char **)
{
  // error checking removed for expository purposes
  HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
  WriteFile(hStdOut, "hello", 5, NULL, NULL);
  return 0;
}
</pre>
<p>
The crash occurs inside the <code>Write&shy;File</code> function
trying to write to a null pointer.
</p>
</blockquote>
<p>
But you need to read further in the documentation for
<code>Write&shy;File</code>:
</p>
<blockquote CLASS=q>
<dl>
<dt><i>lp&shy;Number&shy;Of&shy;Bytes&shy;Written</i> [out, optional] </p>
<dd>
<p>
    A pointer to the variable that receives the number of bytes written
    when using a synchronous <i>hFile</i> parameter.
    <b>Write&shy;File</b> sets this value to zero
    before doing any work or error checking.
    Use <b>NULL</b> for this parameter if this is an asynchronous operation
    to avoid potentially erroneous results.
</p>
<p>
    This parameter can be <b>NULL</b>
    only when the <i>lp&shy;Over&shy;lapped</i> parameter is not <b>NULL</b>.
</p>
</dl>
</blockquote>
<p>
That second paragraph is the catch:
The parameter is sometimes optional and sometimes mandatory.
The annotation language used in the function head is not
expressive enough to say,
"Sometimes optional, sometimes mandatory,"
so it chooses the weakest annotation ("optional")
so as not to generate false positives when run through
<a HREF="http://msdn.microsoft.com/en-us/library/bb385907.aspx">
static code analysis tools</a>.
</p>
<p>
With the benefit of hindsight, the functions probably should have
been split into pairs, one for use with an <code>OVERLAPPED</code>
structure and one without.
That way, one version of the function would have a mandatory
<code>lp&shy;Number&shy;Of&shy;Bytes&shy;Written</code>
parameter and no
<code>lp&shy;Over&shy;lapped</code> parameter at all;
the other would have a mandatory
<code>lp&shy;Over&shy;lapped</code> parameter and no
<code>lp&shy;Number&shy;Of&shy;Bytes&shy;Written</code>
parameter at all.
</p>
<p>
The crash trying to write to a null pointer is consistent with the
remark in the documentation that
the
<code>lp&shy;Number&shy;Of&shy;Bytes&shy;Written</code>
is set to zero before any work is performed.
As for why the code runs okay if output is not redirected:
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/09/29/10217910.aspx">
Appearing to succeed is a valid form of undefined behavior</a>.
It appears that when the output handle is a console,
the rule about
<code>lp&shy;Number&shy;Of&shy;Bytes&shy;Written</code>
is not consistently enforced.
</p>
<p>
At least for now.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1048793">
				<div id="div-comment-1048793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130404-00/?p=4753#comment-1048793">
			April 4, 2013 at 7:05 am</a>		</div>

		<p>But why read the documentation when you can randomly ask strangers for help?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1048803">
				<div id="div-comment-1048803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130404-00/?p=4753#comment-1048803">
			April 4, 2013 at 7:13 am</a>		</div>

		<p>If the Read/Write functions were split you could not use the &quot;overlapped with synchronous handle&quot; trick so I guess it&#39;s a good thing the design stayed this way. People just need to RTFM.</p>
<p>Read/WriteFile have a special check for console handles and they take a different code-path ending with IPC to csrss/conhost, I&#39;m guessing there is a null pointer check in there somewhere&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1048813">
				<div id="div-comment-1048813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130404-00/?p=4753#comment-1048813">
			April 4, 2013 at 8:26 am</a>		</div>

		<p>A slightly less elegant alternative to having two functions would have been to have WriteFile call SetLastError(ERROR_INVALID_PARAMETER) and return FALSE, if lpÂ­NumberÂ­OfÂ­BytesÂ­Written and lpOverlapped are both NULL, or both non-NULL. But it&#39;s probably too late for that as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1048823">
				<div id="div-comment-1048823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130404-00/?p=4753#comment-1048823">
			April 4, 2013 at 8:36 am</a>		</div>

		<p>@Maurits: Both non-NULL is legal&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1048833">
				<div id="div-comment-1048833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jpa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130404-00/?p=4753#comment-1048833">
			April 4, 2013 at 9:06 am</a>		</div>

		<p>It would be easy to make the parameter truly optional. A simple</p>
<p>DWORD dummy;</p>
<p>if (!lpNumberOfBytesRead) lpNumberOfBytesRead = &dummy;</p>
<p>in the function would suffice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1048853">
				<div id="div-comment-1048853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130404-00/?p=4753#comment-1048853">
			April 4, 2013 at 10:57 am</a>		</div>

		<p>The difference in behavior with consoles is because ReadFile and WriteFile have a total hack for console I/O. &nbsp;Consoles are assigned fake HANDLE values that WriteFile specifically recognizes, and redirects such requests into LPCs to csrss.exe or conhost.exe. &nbsp;This ends up being why a lot of Windows features don&#39;t work properly with console handles &#8211; they&#39;re not true kernel handles at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx even thread-even depth-1" id="comment-1048863">
				<div id="div-comment-1048863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130404-00/?p=4753#comment-1048863">
			April 4, 2013 at 12:33 pm</a>		</div>

		<p>@jpa: I think it is better that it crash. Otherwise it will lead to problems I find in Posix programs all the time. If the programmer ignores the bytes value from read() or write(), and assumes that because they specified 4096 bytes to write, 4096 bytes were written, well, bad things happen. Especially since it works most of the time, except for when it doesn&#39;t. In Posix world a signal can interrupt a read or write. Or the file, pipe or socket may not contain the expected 4096 bytes because of an error or timing issue. In Windows Read and WriteFile have similar issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1048873">
				<div id="div-comment-1048873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130404-00/?p=4753#comment-1048873">
			April 4, 2013 at 1:19 pm</a>		</div>

		<p>@jpa:</p>
<p>&quot;&#8230;until the second man questions him.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1048883">
				<div id="div-comment-1048883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130404-00/?p=4753#comment-1048883">
			April 4, 2013 at 2:31 pm</a>		</div>

		<p>@Zan Lynx&#39;:</p>
<p>Or the simple case of being at the end of file and the file not being an exact multiple of the size you specified to read.</p>
<p>@Myria:</p>
<p>That isn&#39;t quite right, the handles are actually recognised by the Windows Object Manager. However, these are special handles that are redirected to the process specific handles there. This isn&#39;t a hack in ReadFile or WriteFile, but a kernel mode redirect for some special handles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1048943">
				<div id="div-comment-1048943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130404-00/?p=4753#comment-1048943">
			April 5, 2013 at 11:05 am</a>		</div>

		<blockquote><p>
  In practice all synchronous buffered ReadFile operations that target a block device (i.e. a disk) will return the amount of data you asked for.
</p></blockquote>
<p>I&#39;ve seen it not do that. Now WriteFile on the other hand seems to always write it all unless it hits an error.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1048903">
				<div id="div-comment-1048903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130404-00/?p=4753#comment-1048903">
			April 5, 2013 at 7:13 am</a>		</div>

		<p>@WndSks: &#39;just need to RTFM&#39; &#8211; the trouble is that busy developers don&#39;t read the manual, or don&#39;t read it thoroughly enough, particularly for functions they &#39;know&#39; how to use. The trouble with ReadFile is that it looks deceptively simple.</p>
<p>In theory, any ReadFile operation could return fewer bytes than were requested: therefore Windows has to be able to tell you how much of your buffer is valid. In the case of overlapped operations, this is stored in the OVERLAPPED structure; for non-overlapped it&#39;s the parameter you passed. In practice all synchronous buffered ReadFile operations that target a block device (i.e. a disk) will return the amount of data you asked for.</p>
<p>I wouldn&#39;t say that ReadFile and WriteFile have special checks for console handles. They have checks for the type of device they&#39;re talking to &#8211; remember that ReadFile can read from serial ports, consoles, raw devices, etc. *nix goes further: *everything* is modelled as a file (but again the file handle can reference a file that&#39;s part of a file system, a block device, a character device, etc).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

