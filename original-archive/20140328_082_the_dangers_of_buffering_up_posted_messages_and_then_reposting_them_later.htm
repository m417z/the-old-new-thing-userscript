<html>
<head>
<title>The dangers of buffering up posted messages and then reposting them later</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The dangers of buffering up posted messages and then reposting them later</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 28, 2014 / year-entry #83</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer wanted to check that their idea for solving a re-entrancy problem doesn't have any hidden gotchas. We have a window which processes incoming work. One of our work items enters a modal loop, and if new work gets posted to the window while the modal loop is running, our work manager gets re-entered,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to check that their idea for solving a re-entrancy
problem doesn't have any hidden gotchas.
</p>
<blockquote CLASS=q>
<p>
We have a window which processes incoming work.
One of our work items enters a modal loop,
and if new work gets posted to the window while the modal loop is
running, our work manager gets re-entered,
and Bad Things happen.
</p>
<p>
Our proposed solution is to alter the modal loop so that
it buffers up all messages destined for the worker window.
(Messages for any other window are dispatched normally.)
When the modal loop completes, we re-post all the messages
from the buffer, thereby allowing the worker window to resume
processing.
</p>
</blockquote>
<p>
The danger here is that reposting messages can result in messages
being processed out of order.
Depending on how your worker window is designed, this might or might
not be a problem.
For example, suppose that during the modal operation,
somebody posts the
<code>WWM_<wbr>FOO&shy;STARTED</code> message to the worker window.
You buffer it up.
When your modal operation is complete, you are about to post the
message back into the queue, but another thread races against you
and posts the
<code>WWM_<wbr>FOO&shy;COMPLETED</code> message
before you can post your buffered messages back into the queue.
Result: The worker window receives the
<code>WWM_<wbr>FOO&shy;COMPLETED</code> message
before it receives the
<code>WWM_<wbr>FOO&shy;STARTED</code> message.
This will probably lead to confusion.
</p>
<p>
The place to solve this problem is in the window itself.
That gets rid of the race condition.
</p>
<pre>
LRESULT CALLBACK WorkerWindow::WndProc(
    HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 if (uMsg is a work message) {
  if (m_cBusy) {
   // Now is a bad time to process the work message.
   // Queue it up for later.
   m_queue.Append(uMsg, wParam, lParam);
  } else {
   m_cBusy++; // prevent re-entrancy
   do {
    ProcessWorkMessage(uMsg, wParam, lParam);
   } while (m_queue.RemoveFirst(&amp;uMsg, &amp;wParam, &amp;lParam));
   m_cBusy--; // re-entrancy no longer a problem
  }
  return 0;
 }
 ...  // handle the other messages
}
</pre>
<p>
By queueing up the work inside the window itself,
you ensure that the messages are processed in the same order
they were received.
</p>
<p>
This technique can be extended to, say, have the worker window
do some degree of work throttling.
For example, you might keep track of how long you've been
processing work,
and if it's been a long time,
then stop to pump messages for a while in case any system messages
came in,
and somebody is waiting for your answer.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1116193">
				<div id="div-comment-1116193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116193">
			March 28, 2014 at 7:23 am</a>		</div>

		<p>for a minute I thought this is a fun article about your scheduled batched posts auto-posting to this blog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116203">
				<div id="div-comment-1116203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116203">
			March 28, 2014 at 8:12 am</a>		</div>

		<p>&nbsp; do {</p>
<p>&nbsp; &nbsp;ProcessWorkMessage(uMsg, wParam, lParam);</p>
<p>&nbsp; } while (m_queue.RemoveFirst(&amp;uMsg, &amp;wParam, &amp;lParam));</p>
<p>Doesn&#39;t this process the last message first?</p>
<div class="post">[<em>The last message is also the first message. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116213">
				<div id="div-comment-1116213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116213">
			March 28, 2014 at 8:22 am</a>		</div>

		<p>@Robert: The first in queue is the first that was added in the queue (First In First Out).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116223">
				<div id="div-comment-1116223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sean</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116223">
			March 28, 2014 at 8:52 am</a>		</div>

		<p>@acq no, I think he&#39;s right. The first iteration will process the message that was just received, and after that the loop will process all the messages in the queue, in FIFO order.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116233">
				<div id="div-comment-1116233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116233">
			March 28, 2014 at 9:43 am</a>		</div>

		<p>@Sean: I&#39;ve stumbled here as well at first. But as you can see, the whole idea of this code is to &quot;block&quot; processing further messages until the current message has been worked off:</p>
<p>1. critical message is received</p>
<p>2. Start blocking message processing</p>
<p>3. Process the received (critical) message</p>
<p>4. After this message has been processed, work off the queue (FIFO)</p>
<p>5. Once we worked off the queue we unblock message processing again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116263">
				<div id="div-comment-1116263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A.C.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116263">
			March 28, 2014 at 12:27 pm</a>		</div>

		<p>@Daniel. In spirit I think this is what should happen, but what prevents the following race conditions?</p>
<p>1. Two callers of this function check m_cBusy and decide it is 0.</p>
<p>&nbsp; Maybe this can&#39;t happen because ProcessWorkMessage() has to pump the additional messages that would lead to WndProc() being called again?</p>
<p>2. Queue is empty so loop stops, but someone is just about ready to insert message into queue. Next time messages will be processed out of order with uMsg first and then queued message. This might be what Robert/Sean were seeing.</p>
<p>&nbsp; Is there something that prevents this from happening?</p>
<div class="post">[<em>Windows are single-threaded objects. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116273">
				<div id="div-comment-1116273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116273">
			March 28, 2014 at 12:27 pm</a>		</div>

		<p>Or to explain Raymond&#39;s cryptic response, the last message is the first message because you can only enter the processing loop when the queue is empty.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116283">
				<div id="div-comment-1116283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116283">
			March 28, 2014 at 12:31 pm</a>		</div>

		<p>A.C.: that can only occur if two threads are trying to run the WndProc, in which case all sorts of badness happens.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116243">
				<div id="div-comment-1116243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116243">
			March 28, 2014 at 10:32 am</a>		</div>

		<p>When I first looked at this I thought you were talking about buffering *blog posts*. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm odd alt thread-odd thread-alt depth-1" id="comment-1116253">
				<div id="div-comment-1116253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116253">
			March 28, 2014 at 11:39 am</a>		</div>

		<p>&quot;for a minute I thought this is a fun article about your scheduled batched posts auto-posting to this blog.&quot;</p>
<p>&quot;When I first looked at this I thought you were talking about buffering *blog posts*. :)&quot;</p>
<p>Well, at least I wasn&#39;t the only one. &nbsp;:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116293">
				<div id="div-comment-1116293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116293">
			March 28, 2014 at 8:20 pm</a>		</div>

		<p>Does that single-threadedness still hold if we attach input queues? I thought all hell would break loose&#8230;</p>
<div class="post">[<em>The input queues are attached but each window still belongs to its respective thread, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/06/10424006.aspx">as we saw earlier</a>. Imagine the havoc if you had <a href="http://blogs.msdn.com/b/oldnewthing/archive/2008/08/01/8795860.aspx">cross-process input queue attachment</a> &#8211; would this mean that window procedures started running in another process? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116313">
				<div id="div-comment-1116313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116313">
			March 29, 2014 at 12:52 pm</a>		</div>

		<p>Another interesting problem you can get with reposting messages that I once saw happen in an MFC application is that horrible things might happen when the number of messages you might have to repost knows no bound.</p>
<p>What I observed was that after exiting the guarded code, which was sometimes entered after processing a reposted message, the application eventually spent most of its time processing and reposting messages, degrading user input responsiveness until it eventually locked up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116323">
				<div id="div-comment-1116323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116323">
			March 30, 2014 at 8:58 am</a>		</div>

		<p>Amazing how a basic lack of understanding can come to a conclusion that this horrendous kludge can solve the problem, and end up almost solving the problem so you don&#39;t know it&#39;s wrong until too late.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116333">
				<div id="div-comment-1116333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116333">
			March 31, 2014 at 4:03 am</a>		</div>

		<p>So Sean and Robert point something: the do while first processes the msg from the arguments of WndProc and only then all from the queue. The response from Raymond is &quot;The last message is also the first message&quot; and Mark explains &quot;the last message is the first message because you can only enter the processing loop when the queue is empty.&quot;</p>
<p>Now I still don&#39;t get it why it&#39;s OK to process the msg from the arguments of WndProc before all the messages from the queue. Anybody has a bit clearer explanation than those cited?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116343">
				<div id="div-comment-1116343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116343">
			March 31, 2014 at 4:25 am</a>		</div>

		<p>@acq</p>
<p>Let&#39;s say the queue is empty. We get a work message. We set our status to busy and process the message. If new work messages are posted during this time, since our status is busy, they are added to the queue. Only when the queue is completely empty, do we set our status to not busy. The next time a message is received, it is processed immediately, which is fine because the queue is empty.</p>
<p>Whenever entering that part of the code, &quot;the last message is also the first message&quot;, because when there is only one item in a queue, that one item is both the first and last message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116363">
				<div id="div-comment-1116363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116363">
			March 31, 2014 at 6:48 am</a>		</div>

		<p>Thanks Bart and Mark, I was confused by the mention of &quot;a modal loop&quot; and the &quot;another thread races&quot; etc. I understand what the wndproc code assumes now, only the whole context is still a bit blurry: Is the existence of other threads important or would the whole story be a non-issue if all the messages come from the single thread? Ditto for the modal loop. Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1116353">
				<div id="div-comment-1116353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116353">
			March 31, 2014 at 5:24 am</a>		</div>

		<p>acq: you need to process the msg from the arguments before everything in the queue because the queue is by definition empty (m_cBusy == 0). Messages only start queueing up once you&#39;ve incremented m_cBusy (safe because we&#39;re single-threaded), and so all of them arrived *after* the one we&#39;re processing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1116373">
				<div id="div-comment-1116373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140328-00/?p=1373#comment-1116373">
			March 31, 2014 at 7:23 am</a>		</div>

		<p>acq: the WndProc will only be called by the owning thread, but that doesn&#39;t mean it&#39;s the only thread *posting* messages. The thread race is down to the fact that they were trying to re-post the message, at which point they&#39;re working with a multi-threaded object (the window&#39;s queue).</p>
<p>As for the modal loop, there can always be re-entrancy if ProcessWorkMessage results in a call to SendMessage for the very same window. The window manager will realise we&#39;re in the right thread and simply call the WndProc again (so you&#39;ll see it twice in a stack trace).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

