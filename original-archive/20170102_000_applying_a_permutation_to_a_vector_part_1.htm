<html>
<head>
<title>Applying a permutation to a vector, part 1</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Applying a permutation to a vector, part 1</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 2, 2017 / year-entry #1</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>26</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Tinkering with an algorithm.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Suppose you have a vector <code>indices</code>
of <var>N</var> integers
that is a permutation of the numbers 0 through <var>N</var> &minus; 1.
Suppose you also have a vector <code>v</code>
of <var>N</var> objects.
The mission is to apply the permutation to the vector.
If we let <code>v2</code> represent the contents of the vector
at the end of the operation, the requirement is that
<code>v2[i] = v[indices[i]]</code> for all <code>i</code>.
</p>
<p>
For example, if the objects are strings, and the vector of
objects is <code>{ "A", "B", "C" }</code> and the vector of
integers is <code>{ 1, 2, 0 }</code>, then this means
the output vector is <code>{ "B", "C", "A" }</code>.
</p>
<p>
This sounds like something that would be in the standard library,
but I couldn't find it,
so I guess we'll have to write it ourselves.
(If you find it in the standard library, let me know!)
</p>
<p>
Let's start with the easy version:
You don't update the vector in place.
Instead, you produce a new vector.
Solving this version is fairly straightforward,
because all you have to do is write the problem statement!
</p>
<pre>
template&lt;typename T&gt;
std::vector&lt;T&gt;
apply_permutation(
    const std::vector&lt;T&gt;&amp; v,
    const std::vector&lt;int&gt;&amp; indices)
{
 std::vector&lt;T&gt; v2(v.size());
 for (size_t i = 0; i &lt; v.size(); i++) {
  v2[i] = v[indices[i]];
 }
 return v2;
}
</pre>
<p>
Now we get to the analysis, which is where the fun is.
</p>
<p>
The above algorithm assumes that <code>T</code> is
default-constructible, because we create a vector <code>v2</code>
of default-constructed <code>T</code> objects,
and then replace them one by one with copies of the real <code>T</code> objects
from <code>v</code>.
I wrote it that way to make the solution match the problem statement,
making its correctness easy to verify by inspection.
You can even write a unit test for this function,
so that you can verify that the transformations we are going to
perform don't break the fundamental algorithm.
</p>
<p>
First, let's get rid of the requirement that there be a default
constructor for <code>T</code>.
All we'll require is that <code>T</code> be copy-constructible.
</p>
<pre>
template&lt;typename T&gt;
std::vector&lt;T&gt;
apply_permutation(
    const std::vector&lt;T&gt;&amp; v,
    const std::vector&lt;int&gt;&amp; indices)
{
 std::vector&lt;T&gt; v2;
 v2.reserve(v.size());
 for (size_t i = 0; i &lt; v.size(); i++) {
  v2.push_back(v[indices[i]]);
 }
 return v2;
}
</pre>
<p>
But still, we're copying the elements around.
Let's refine the problem statement so that instead of
returning a new vector, we mutate the vector in place.
That way, it'll work with movable objects, too.&sup1;
</p>
<pre>
template&lt;typename T&gt;
void
apply_permutation(
    std::vector&lt;T&gt;&amp; v,
    const std::vector&lt;int&gt;&amp; indices)
{
 std::vector&lt;T&gt; v2;
 v2.reserve(v.size());
 for (size_t i = 0; i &lt; v.size(); i++) {
  v2.push_back(std::move(v[indices[i]]));
 }
 v = std::move(v2);
}
</pre>
<p>
This version is basically the same thing as before,
except that we move the objects around instead of copying
them.
But this kind of misses the point of the exercise:
We didn't really update the vector in place.
We created a second vector and then swapped it in.
Can we do it without having to create a second vector?
After all, that vector might be large (either because
<code>T</code> is large or <var>N</var> is large, or both).
Actually, let's go even further:
Can we do it in <var>O</var>(1) space?
</p>
<p>
At this point, I needed to pull out a piece of paper
and do some sketching.
My first idea&sup2; led nowhere,
but eventually I found something that worked:
The idea is that we look at <code>indices[0]</code> to see
what item should be moved into position zero.
We move that item in, but we save the item that was
originally there.
Then we look at what item should be moved into the place
that was just vacated, and move that item into that place.
Repeat until the item that was originally in position zero
is the one that gets placed.
</p>
<p>
This completes one cycle, but there could be multiple
cycles in the permutation, so we need to look for the
next slot that hasn't yet been processed.
We'll have to find a place to keep track of which slots
have already been processed,
and we cannot allocate a vector for it, because that would
be <var>O</var>(<var>N</var>) in space.
</p>
<p>
So we pull a trick: We use the indices vector to keep track of itself.
</p>
<pre>
template&lt;typename T&gt;
void
apply_permutation(
    std::vector&lt;T&gt;&amp; v,
    std::vector&lt;int&gt;&amp; indices)
{
 for (size_t i = 0; i &lt; indices.size(); i++) {
  T t{std::move(v[i])};
  auto current = i;
  while (i != indices[current]) {
   auto next = indices[current];
   v[current] = std::move(v[next]);
   indices[current] = current;
   current = next;
  }
  v[current] = std::move(t);
  indices[current] = current;
 }
}
</pre>
<p>
Okay, what just happened here?
</p>
<p>
We start by "picking up" the <code>i</code>'th element
(into a temporary variable <code>t</code>)
so we can create a hole into which the next item will
be moved.
Then we walk along the cycle using <code>current</code>
to keep track of where the hole is,
and <code>next</code> to keep track of the item that
will move into the hole.
If the next item is not the one in our hand,
then move it in, and update <code>current</code>
because the hole has moved to where the next item was.
When we finally cycle back and discover that the hole
should be filled with the item in our hand,
we put it there.
</p>
<p>
The way we remember that this slot has been filled with
its final item is by setting its index to a sentinel value.
One option would be to use &minus;1, since that is an
invalid index, and we can filter it out in our loop.
</p>
<p>
But instead, I set the index to itself.
That makes the item look like a single-element cycle,
and processing a single-element cycle has no effect,
since nothing moves anywhere.
This avoids having an explicit sentinel test.
We merely chose our sentinel to be a value that already
does nothing.
</p>
<p>
Now, one thing about this algorithm is that processing
a single-element cycle does require us to pick up the
element, and then put it back down.
That's two move operations that could be avoided.
Fixing that is easy:
Don't pick up the item until we know that we will need
to vacate the space.
</p>
<pre>
template&lt;typename T&gt;
void
apply_permutation(
    std::vector&lt;T&gt;&amp; v,
    std::vector&lt;int&gt;&amp; indices)
{
 for (size_t i = 0; i &lt; indices.size(); i++) {
  if (i != indices[current]) {
   T t{std::move(v[i])};
   auto current = i;
   while (i != indices[current]) {
    auto next = indices[current];
    v[current] = std::move(v[next]);
    indices[current] = current;
    current = next;
   }
   v[current] = std::move(t);
   indices[current] = current;
  }
 }
}
</pre>
<p>
Another trick we can use to avoid having to
have a temporary item <code>t</code> is realizing
that instead of holding the item in your hand,
you can just put the item <i>in the hole</i>.
</p>
<pre>
template&lt;typename T&gt;
void
apply_permutation(
    std::vector&lt;T&gt;&amp; v,
    std::vector&lt;int&gt;&amp; indices)
{
 using std::swap; // to permit Koenig lookup
 for (size_t i = 0; i &lt; indices.size(); i++) {
  auto current = i;
  while (i != indices[current]) {
   auto next = indices[current];
   swap(v[current], v[next]);
   indices[current] = current;
   current = next;
  }
  indices[current] = current;
 }
}
</pre>
<p>
Note that since the item that used to be in our hand
is now in the hole, we don't need the manual last step
of moving the item from our hand to the hole.
It's already in the hole!
</p>
<p>
Okay, so is it better to move or to swap?
This is an interesting question.
We'll pick this up next time.
</p>
<p>
&sup1;
Note that by making this operate on movable objects,
we lose the ability to operate on objects which
are not
<a HREF="http://en.cppreference.com/w/cpp/concept/MoveAssignable">
MoveAssignable</a>.
This is not a significant loss of amenity, however,
because most of the algorithms in the standard library
which rearrange elements within a container already
require
<a HREF="http://en.cppreference.com/w/cpp/concept/MoveAssignable">
Move&shy;Assignable</a>,
and many of them also require
<a HREF="http://en.cppreference.com/w/cpp/concept/Swappable">
Swappable</a>.
</p>
<p>
&sup2;
My first idea was to start with the first position,
swap the correct item into that first position,
and update the indices so that what remained was
a permutation of the remaining items that preserved
the intended final result.
I could then repeat the process with each subsequent position,
and when I had finished walking through the entire vector,
every item would be in the correct final position.
I figured I could use the last position as a sort of scratchpad,
similar to the "hole" we ended up using in our final algorithm.
I struggled for a while trying to find the correct
cleverly-chosen two-way or three-way swap among the current
position, the last position, and <i>somebody</i> that would
get me to the desired exit condition.
I got hung up on this line of investigation and had to walk
away from the problem for a little while, and then come back
to it with a fresh mind.
</p>
<p>
I mention this because
a lot of the time, these articles which explain how to solve a problem
don't talk much about
the attempted solutions that didn't work.
Instead, they give the impression that
the author got it right the first time.
In reality, the author got it wrong the first few times, too.
The reason you don't see a lot of writing about the failures
is that the usual order of operations is
(1)&nbsp;find solution,
(2)&nbsp;write about it.
You usually find the solution first,
and only then do you start writing about it.
As a result, you don't have very good documentation for your failures.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1278825">
				<div id="div-comment-1278825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ionel POP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278825">
			January 2, 2017 at 8:16 am</a>		</div>

		<p>It is worth noting that when the vector is updated in place (2nd part of the post), you dropped the const-ness on indices. It may not be the expected behavior for the caller.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-s-m-joshi-02 odd alt depth-2" id="comment-1278836">
				<div id="div-comment-1278836" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278836">
			January 2, 2017 at 8:30 am</a>		</div>

		<p>You could drop the reference as well as the const to copy the indices parameter (or make a copy in the body of the function if you can&#8217;t change the signature). Technically, the time to copy the index vector would depend on n but if we assume that the objects in v are more heavy weight than ints that is a small cost.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1278835">
				<div id="div-comment-1278835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tramboi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278835">
			January 2, 2017 at 8:16 am</a>		</div>

		<p>If you want to do proper modern C++, the indices should be vector::size_type.<br />
Of course proper modern C++ is boring and too verbose, so I&#8217;d settle for a size_t :)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1278905">
				<div id="div-comment-1278905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278905">
			January 2, 2017 at 11:34 am</a>		</div>

		<p>If you haven&#8217;t customized the allocator then size_type must be size_t, since that&#8217;s what the default type for allocator_traits&lt;A&gt;::size_type.</p>
<p>That said I think the purpose of this example was assuming the set of indices to use came from some other data source that speaks ints &#8212; as long as you know that all of the ints will be in the valid range of the vector using size_t instead here buys you nothing. Note that the loop that iterates over the vector itself is already (correctly) using size_t.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1279025">
				<div id="div-comment-1279025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tramboi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279025">
			January 3, 2017 at 1:35 am</a>		</div>

		<p>That was just a comment about how convoluted and verbose the standard library is :)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1278885">
				<div id="div-comment-1278885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278885">
			January 2, 2017 at 11:32 am</a>		</div>

		<p>As far as I am aware there is no standard library facility for this &#8212; if you squint the proposed algorithm looks like selection sort. You could write something like a zip iterator and a predicate that orders the resulting pair by the indices vector and feed that to std::sort. On the other hand, I suspect on real data apply_permutation, despite being technically O(n²) worst case, will perform better.</p>
<p>(As an aside, this is a classic time/memory tradeoff &#8212; if you have O(n) extra memory you can have an O(n) algorithm, which is optimal)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1278915">
				<div id="div-comment-1278915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278915">
			January 2, 2017 at 11:47 am</a>		</div>

		<p>The function looks O(n²) at first glance, but it is O(n) because each item moves at most once.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1278945">
				<div id="div-comment-1278945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278945">
			January 2, 2017 at 11:58 am</a>		</div>

		<p>Oh derp, that&#8217;s right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3 parent" id="comment-1279235">
				<div id="div-comment-1279235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marco</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279235">
			January 4, 2017 at 4:31 am</a>		</div>

		<p>Ok, it&#8217;s O(n) regarding moves/copies, but it&#8217;s O(n2) for the index searching stuff. Right?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1279305">
				<div id="div-comment-1279305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279305">
			January 5, 2017 at 6:04 am</a>		</div>

		<p>Probably not, it should be O(n) as claimed, but the argument for it will be more complicated. The point is that the inner loop modifies itself on the first iteration. When the outer loop visits an already processed slot there will be no inner loop (just a constant number of checks to determine the fact), so the algorithm should be O(n) and not O(n²)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1278935">
				<div id="div-comment-1278935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278935">
			January 2, 2017 at 11:54 am</a>		</div>

		<p>I suppose you could also build a divide and conquer algorithm out of std::rotate:<br />
1. Find middle of the resulting vector. O(1)<br />
2. Search indices vector for element that goes there O(n)<br />
3. std::rotate that element into the middle == 2 O(n) (one O(n) for the elements, one O(n) for the indices array)<br />
4. Recursively do the same on left and right sides.</p>
<p>This produces an algorithm which takes T(n) = 2T(n/2) + O(3n + 1) = 2T(n/2) + O(n), master theorem says O(n lg n). But again, probably worse constant factors than apply_permutation, and this is substantially more complex to code up :)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1278895">
				<div id="div-comment-1278895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://stephencleary.com' rel='external nofollow' class='url'>Stephen Cleary</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278895">
			January 2, 2017 at 11:33 am</a>		</div>

		<p>There&#8217;s a permutation_iterator in Boost, which permits creating an iterator pair over the permuted items, which can either be used directly or used to reify the collection into a new vector.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1278925">
				<div id="div-comment-1278925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.partow.net' rel='external nofollow' class='url'>Arash Partow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278925">
			January 2, 2017 at 11:49 am</a>		</div>

		<p>Out of curiosity what happens when ‘v.size() &gt; indices.size()’ ?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1278975">
				<div id="div-comment-1278975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278975">
			January 2, 2017 at 4:01 pm</a>		</div>

		<p>Even if just out of curiosity, asking for the behavior of an algorithm outside its specification isn&#8217;t very insightful. The rules are simple: Don&#8217;t operate the algorithm outside its designated limits.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1279045">
				<div id="div-comment-1279045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">French Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279045">
			January 3, 2017 at 4:36 am</a>		</div>

		<p>v.size() &gt; indices.size() doesn&#8217;t cause problems (because the algorithm iterates over indices): the elements from 0 to indices.size() &#8211; 1 will be moved (according to indices), and the remaining elements will stay in place (as if indices[i] was i for all i from indices.size() to v.size() &#8211; 1).</p>
<p>The real problem scenario is if indices.size() &gt; v.size(): that will cause out-of-bounds accesses. If you&#8217;re lucky (the language you&#8217;re using checks for them), such accesses will cause exceptions. If you&#8217;re not, expect nasal demons.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1278985">
				<div id="div-comment-1278985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cmon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278985">
			January 2, 2017 at 5:30 pm</a>		</div>

		<p><a href="http://www.cplusplus.com/reference/algorithm/next_permutation/" rel="nofollow">http://www.cplusplus.com/reference/algorithm/next_permutation/</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1279146">
				<div id="div-comment-1279146" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279146">
			January 3, 2017 at 10:05 am</a>		</div>

		<p>Not sure what you&#8217;re trying to say. <code>next_permutation</code> solves a different problem.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1278995">
				<div id="div-comment-1278995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudonym</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1278995">
			January 2, 2017 at 9:47 pm</a>		</div>

		<p>Well that&#8217;s nice, but what I&#8217;d really like is:</p>
<p>template void apply_permutation(std::vector&amp; v, const std::vector&amp; indices);</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1279005">
				<div id="div-comment-1279005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudonym</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279005">
			January 2, 2017 at 9:49 pm</a>		</div>

		<p>Curse you HTML markup. What I meant, of course, is that &#8220;indices&#8221; should be const.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1279275">
				<div id="div-comment-1279275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kme</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279275">
			January 4, 2017 at 8:06 pm</a>		</div>

		<p>So just copy &#8216;indices&#8217; at the start then.  It&#8217;s still O(n).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1279015">
				<div id="div-comment-1279015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Micha</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279015">
			January 3, 2017 at 12:59 am</a>		</div>

		<p>In your last iteration you swap the element to the whole, but than, manually swap the indices, how about using swap twice:</p>
<p>    while (i != indices[current]) {<br />
      std::swap(x[i], x[indices[current]]);<br />
      std::swap(indices[i], indices[indices[current]]);<br />
      current = indices[current];<br />
    }</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1279105">
				<div id="div-comment-1279105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279105">
			January 3, 2017 at 8:35 am</a>		</div>

		<p>It&#8217;s spending time on things like the second half of this post and then sitting back, looking at this function or this entire source file and thinking &#8220;wow, look at me go with this ingenious code, I&#8217;m so great&#8221; that makes programming and computer science so fun. Bonus points if you then think to yourself &#8220;&#8230;but I wonder if other people will get it; heck I wonder if *I* will get it six months from now, even with the best comments in the world&#8221; =P</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1279315">
				<div id="div-comment-1279315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279315">
			January 5, 2017 at 6:07 am</a>		</div>

		<p>Bonus points are only applied if you actually add the comments and not only think about them.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1279135">
				<div id="div-comment-1279135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279135">
			January 3, 2017 at 9:42 am</a>		</div>

		<p>It is easier to permute an array given the inverse permutation.  The couple of times I faced your problem it was simpler to change the source function to produce an inverse permutation, rather than trying to apply the normal permutation it was producing.  Obviously this isn&#8217;t always an option.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1279485">
				<div id="div-comment-1279485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xix</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279485">
			January 7, 2017 at 2:08 pm</a>		</div>

		<p>Almost anything can be attacked as a loss of amenity, and almost anything can be defended as not a significant loss of amenity, which seems to signify that one should appreciate the significance of significant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1279635">
				<div id="div-comment-1279635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Taylor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095#comment-1279635">
			January 11, 2017 at 4:00 am</a>		</div>

		<p>There is a compromise position between having const indices (the ideal) and destroying the contents of indices (the given implementation) without sacrificing the O(1) space requirement. Since we know that the indices will be non-negative, we can use the bitwise negation operator (~) to generate sentinels, and then do a post-permutation pass through indices to apply ~ a second time and restore the original values. It&#8217;s not thread-safe, but you can&#8217;t have everything.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

