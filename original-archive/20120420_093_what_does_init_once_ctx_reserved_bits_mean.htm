<html>
<head>
<title>What does INIT_ONCE_CTX_RESERVED_BITS mean?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What does INIT_ONCE_CTX_RESERVED_BITS mean?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 20, 2012 / year-entry #94</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Windows Vista adds the One-Time Initialization family of functions which address a common coding pattern: I want a specific chunk of code to run exactly once, even in the face of multiple calls from different threads. There are many implementations of this pattern, such as the infamous double-checked lock. The double-checked lock is very easy...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Windows Vista adds the
<a HREF="http://msdn.microsoft.com/en-us/library/aa363808(v=VS.85).aspx">
One-Time Initialization</a>
family of functions
which address a common coding pattern:
I want a specific chunk of code to run exactly once,
even in the face of multiple calls from different threads.
There are many implementations of this pattern,
such as the infamous
<a HREF="http://en.wikipedia.org/wiki/Double-checked_locking">
double-checked lock</a>.
The double-checked lock is very easy to get wrong,
due to memory ordering and race conditions,
so
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/04/17/10294294.aspx">
the kernel folks</a>
decided to write it for you.
</p>
<p>
The straightforward way of using a one-time-initialization
object is to have it protect the initialization of some other
object.
For example, you might have it protect a static object:
</p>
<pre>
INIT_ONCE GizmoInitOnce = INIT_ONCE_STATIC_INIT;
Gizmo ProtectedGizmo;

BOOL CALLBACK InitGizmoOnce(
    PINIT_ONCE InitOnce,
    PVOID Parameter,
    PVOID *Context)
{
    Gizmo *pGizmo = reinterpret_cast&lt;Gizmo*&gt;(Parameter);
    pGizmo-&gt;Initialize();
    return TRUE;
}

SomeFunction(...)
{
    // Initialize ProtectedGizmo if not already initialized
    InitOnceExecuteOnce(&amp;GizmoInitOnce,
                        InitGizmoOnce,
                        &amp;ProtectedGizmo,
                        NULL);

    // At this point, ProtectedGizmo has been initialized
    ProtectedGizmo.Something();
    ...
}
</pre>
<p>
Or you might have it protect a dynamic object:
</p>
<pre>
class Widget
{
    Widget()
    {
        InitOnceInitialize(&amp;m_InitOnce);
    }

    void Initialize();

    ...

    static BOOL CALLBACK InitWidgetOnce(
        PINIT_ONCE InitOnce,
        PVOID Parameter,
        PVOID *Context)
    {
        Widget *pWidget = reinterpret_cast&lt;Widget*&gt;(Parameter);
        pWidget-&gt;Initialize();
        return TRUE;
    }

    SomeMethod(...)
    {
        // Initialize ourselves if not already initialized
        InitOnceExecuteOnce(&amp;InitWidgetOnce,
                            this,
                            NULL);

        // At this point, we have been initialized
        ... some other stuff ...
    }
}
</pre>
<p>
But it so happens that you can also have the <code>INIT_ONCE</code>
object protect <i>itself</i>.
</p>
<p>
You see, once the <code>INIT_ONCE</code> object has entered the
"initialization complete" state, the one-time initialization code
only needs a few bits of state.
The other bits are unused, so the kernel folks figured,
"Well, since we're not using them, maybe the application wants to use them."
</p>
<p>
That's where <code>INIT_ONCE_CTX_RESERVED_BITS</code> comes in.
The
<code>INIT_ONCE_CTX_RESERVED_BITS</code> value is the number of bits
that the one-time initialization code uses after initialization is complete;
the other bits are free for you to use yourself.
The value of
<code>INIT_ONCE_CTX_RESERVED_BITS</code> is 2,
which means that you can store any value that's a multiple of 4.
If it's a pointer, then the pointer must be <code>DWORD</code>-aligned
or better.
This requirement is usually easy to meet because heap-allocated objects
satisfy it, and the pointer you want to store is usually a pointer
to a heap-allocated object.
As noted some time ago,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/01/21/358109.aspx">
kernel object handles are also multiples of four</a>,
so those can also be safely stored inside the <code>INIT_ONCE</code>
object.
(On the other hand, USER and GDI handles are <i>not</i> guaranteed
to be multiples of four, so you cannot use this trick to store those
types of handles.)
</p>
<p>
Here's an example.
First, the code which uses the traditional method of having the
<code>INIT_ONCE</code> structure protect another variable:
</p>
<pre>
// using the static object pattern for simplicity

INIT_ONCE PathInitOnce = INIT_ONCE_STATIC_INIT;
LPWSTR PathToDatabase = NULL;

BOOL CALLBACK InitPathOnce(
    PINIT_ONCE InitOnce,
    PVOID Parameter,
    PVOID *Context)
{
    LPWSTR Path = (LPWSTR)LocalAlloc(LMEM_FIXED, ...);
    if (Path == NULL) return FALSE;
    ... get the path in Path...
    PathToDatabase = Path;
    return TRUE;
}

SomeFunction(...)
{
    // Get the database path (initializing if necessary)
    if (!InitOnceExecuteOnce(&amp;PathInitOnce,
                             InitPathOnce,
                             NULL,
                             NULL)) {
        return FALSE; // couldn't get the path for some reason
    }

    // The "PathToDatabase" variable now contains the path
    // computed by InitPathOnce.

    OtherFunction(PathToDatabase);
    ...
}
</pre>
<p>
Since the object being protected is pointer-sized and satisfies
the necessary alignment constraints,
we can merge it into the <code>INIT_ONCE</code> structure.
</p>
<pre>
INIT_ONCE PathInitOnce = INIT_ONCE_STATIC_INIT;

BOOL CALLBACK InitPathOnce(
    PINIT_ONCE InitOnce,
    PVOID Parameter,
    PVOID *Context)
{
    LPWSTR Path = (LPWSTR)LocalAlloc(LMEM_FIXED, ...);
    if (Path == NULL) return FALSE;
    ... get the path in Path...
    *Context = Path;
    return TRUE;
}

SomeFunction(...)
{
    LPWSTR PathToDatabase;
    // Get the database path (initializing if necessary)
    if (!InitOnceExecuteOnce(&amp;PathInitOnce,
                             InitPathOnce,
                             NULL,
                             &amp;PathToDatabase)) {
        return FALSE; // couldn't get the path for some reason
    }

    // The "PathToDatabase" variable now contains the path
    // computed by InitPathOnce.

    OtherFunction(PathToDatabase);
    ...
}
</pre>
<p>
This may seem like a bunch of extra work to save four bytes
(or eight bytes on 64-bit Windows),
but
if you use the asynchronous initialization model,
then you have no choice but to use context-based initialization,
as we learned when we tried to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/07/10150728.aspx">
write our own lock-free one-time initialization code</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-979233">
				<div id="div-comment-979233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979233">
			April 20, 2012 at 12:02 pm</a>		</div>

		<p>Is it guaranteed that new&#39;d pointers are multiples of four?</p>
<div class="post">[<i>Depends on what kind of pointer, right? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-979273">
				<div id="div-comment-979273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979273">
			April 20, 2012 at 3:38 pm</a>		</div>

		<p>[This is difficult when your code doesn&#39;t control the thread creation. -Raymond]</p>
<p>Static instance of class in C++. Problem solved.</p>
<div class="post">[<i>&quot;Hey, let&#39;s do complicated stuff in DLL_PROCESS_ATTACH. What could possibly go wrong?&quot; Also, remember the super secret evil trick for making your program start up faster. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-979283">
				<div id="div-comment-979283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979283">
			April 20, 2012 at 8:21 pm</a>		</div>

		<p>Static instance of class in C++. Problem solved.</p>
<p>[&quot;Hey, let&#39;s do complicated stuff in DLL_PROCESS_ATTACH. What could possibly go wrong?&quot; -Raymond]</p>
<p>In case you might doubt what Raymond is saying here, I just spent months trying to get a third-party component supplier to fix an intermittent hang that happened only on the machines at one customer site. &nbsp;It happened because a static initializer called a function that led through a chain of 5 dlls and 20 calls, including several system calls, and then it caused the load of another dll, and bang, deadlock, because the loader lock is already held. &nbsp;This was NOT FUN.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-979263">
				<div id="div-comment-979263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979263">
			April 20, 2012 at 2:14 pm</a>		</div>

		<p>I&#39;ve never understood the point of this pattern in the first place. &nbsp;If you know you&#39;re going to need exactly one of something that&#39;s going to be used by multiple threads, the smart thing to do is to create it exactly once *before you spawn the multiple threads that are going to need it*. &nbsp;No possibility of race conditions that way, and no weird, bug-prone complexity at getting the just-in-time initialization to work right.</p>
<div class="post">[<i>This is difficult when your code doesn&#39;t control the thread creation. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-979293">
				<div id="div-comment-979293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roisin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979293">
			April 21, 2012 at 8:48 am</a>		</div>

		<p>Agreed that 1) Homemade one-time initialization in the face of multi-threading is easy to get wrong. 2) Static initialization of non POD C++ objects is dangerous.</p>
<p>But.. Isn&#39;t it a sign of an underlying weakness of the architecture of a given program / framework if there isn&#39;t a well-defined / clean / safe method of doing &quot;complex&quot; initialization / termination?</p>
<div class="post">[<i>Win32 isn&#39;t a framework. It&#39;s a bunch of building blocks. The CLR is a framework, and it handles this nicely via static class constructors. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-979303">
				<div id="div-comment-979303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mathieu Garstecki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979303">
			April 21, 2012 at 8:57 am</a>		</div>

		<p>@Roisin: it&#39;s a sign of a language that was designed before multi-thread was the norm. Any progress on that time machine yet ?</p>
<p>I believe current/future evolutions of C++ try to remedy that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-979313">
				<div id="div-comment-979313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clovis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979313">
			April 21, 2012 at 10:01 am</a>		</div>

		<p>INIT_ONCE_CTX_RESERVED_BITS &#8211; ooh, bad encapsulation leakage &#8211; I foresee a world of compatibility pain in Windows 8+n (where n &gt;= 0) when the kernel folks want some of those bits back, but app writers have taken the lot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-979323">
				<div id="div-comment-979323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979323">
			April 21, 2012 at 12:23 pm</a>		</div>

		<p>Clovis: The kernel folks can never have those bits back. How would that even work? If your application was using all of the unreserved bits and the kernel wanted some of them back, what would you expect to happen? Would everybody have to write their applications to check the number of reserved bits and then allocate additional space if it wasn&#39;t enough?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-979343">
				<div id="div-comment-979343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-979343">
			April 21, 2012 at 2:27 pm</a>		</div>

		<p>&quot;Also, remember the super secret evil trick for making your program start up faster. -Raymond&quot;</p>
<p>AppInit_Dlls to eagerly load everything into memory, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-980043">
				<div id="div-comment-980043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-980043">
			April 24, 2012 at 11:03 pm</a>		</div>

		<p>Is the internal data masked by INIT_ONCE_CTX_RESERVED_BITS guaranteed to be 0 after initonce or do you have to mask them off every time you use the pointer?</p>
<div class="post">[<em>As it says in the documentation, the Context contains &quot;data stored with the one-time initialization structure.&quot; It returns the data you stored. Since the data you stored set the INIT_ONCE_CTX_RESERVED_BITS to zero, the value returned will have those bits set to zero. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-980393">
				<div id="div-comment-980393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Freek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120420-00/?p=7813#comment-980393">
			April 26, 2012 at 7:01 am</a>		</div>

		<p>Thanks for the reference to the double checked lock.</p>
<p>While reading it I remembered seeing code like that within our software. I immediately wrote a regex to find this double checked lock and I found 5 occurrences&#8230;</p>
<p>Thanks!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

