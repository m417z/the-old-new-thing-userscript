<html>
<head>
<title>The history of calling conventions, part 1</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The history of calling conventions, part 1</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 2, 2004 / year-entry #2</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>27</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The great thing about calling conventions on the x86 platform is that there are so many to choose from! In the 16-bit world, part of the calling convention was fixed by the instruction set: The BP register defaults to the SS selector, whereas the other registers default to the DS selector. So the BP register...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The great thing about calling conventions on the x86 platform is that there are so many to choose from!</p>
<p> In the 16-bit world, part of the calling convention was fixed by the instruction set: The BP register defaults to the SS selector, whereas the other registers default to the DS selector. So the BP register was necessarily the register used for accessing stack-based parameters. </p>
<p> The registers for return values were also chosen automatically by the instruction set. The AX register acted as the accumulator and therefore was the obvious choice for passing the return value. The 8086 instruction set also has special instructions which treat the DX:AX pair as a single 32-bit value, so that was the obvious choice to be the register pair used to return 32-bit values. </p>
<p> That left SI, DI, BX and CX. </p>
<p> (Terminology note: Registers that do not need to be preserved across a function call are often called "scratch".) </p>
<p> When deciding which registers should be preserved by a calling convention, you need to balance the needs of the caller against the needs of the callee. The caller would prefer that all registers be preserved, since that removes the need for the caller to worry about saving/restoring the value across a call. The callee would prefer that no registers be preserved, since that removes the need to save the value on entry and restore it on exit. </p>
<p> If you require too few registers to be preserved, then callers become filled with register save/restore code. But if you require too many registers to be preserved, then callees become obligated to save and restore registers that the caller might not have really cared about. This is particularly important for leaf functions (functions that do not call any other functions). </p>
<p> The non-uniformity of the x86 instruction set was also a contributing factor. The CX register could not be used to access memory, so you wanted to have some register other than CX be scratch, so that a leaf function can at least access memory without having to preserve any registers. So BX was chosen to be scratch, leaving SI and DI as preserved. </p>
<p> So here's the rundown of 16-bit calling conventions: </p>
<dl>
<dt>All</dt>
<dd> All calling conventions in the 16-bit world preserve registers BP, SI, DI (others scratch) and put the return value in DX:AX or AX, as appropriate for size.  </dd>
<dt>C (__cdecl)</dt>
<dd> Functions with a variable number of parameters constrain the C calling convention considerably. It pretty much requires that the stack be caller-cleaned and that the parameters be pushed right to left, so that the first parameter is at a fixed position relative to the top of the stack. The classic (pre-prototype) C language allowed you to call functions without telling the compiler what parameters the function requested, and it was common practice to pass the wrong number of parameters to a function if you "knew" that the called function wouldn't mind. (See "open" for a classic example of this. The third parameter is optional if the second parameter does not specify that a file should be created.) </p>
<p> In summary: Caller cleans the stack, parameters pushed right to left. </p>
<p> Function name decoration consists of a leading underscore. My guess is that the leading underscore prevented a function name from accidentally colliding with an assembler reserved word. (Imagine, for example, if you had a function called "call".) </p>
</dd>
<dt>Pascal (__pascal)</dt>
<dd> Pascal does not support functions with a variable number of parameters, so it can use the callee-clean convention. Parameters are pushed from left to right, because, well, it seemed the natural thing to do. Function name decoration consists of conversion to uppercase. This is necessary because Pascal is not a case-sensitive language. </p>
<p> Nearly all Win16 functions are exported as Pascal calling convention. The callee-clean convention saves three bytes at each call point, with a fixed overhead of two bytes per function. So if a function is called ten times, you save 3*10 = 30 bytes for the call points, and pay 2 bytes in the function itself, for a net savings of 28 bytes. It was also fractionally faster. On Win16, saving a few hundred bytes and a few cycles was a big deal. </p>
</dd>
<dt>Fortran (__fortran)</dt>
<dd> The Fortran calling convention is the same as the Pascal calling convention. It got a separate name probably because Fortran has strange pass-by-reference behavior.  </dd>
<dt>Fastcall (__fastcall)</dt>
<dd> The Fastcall calling convention passes the first parameter in the DX register and the second in the CX register (I think). Whether this was actually faster depended on your call usage. It was generally faster since parameters passed in registers do not need to be spilled to the stack, then reloaded by the callee. On the other hand, if significant computation occurs between the computation of the first and second parameters, the caller has to spill it anyway. To add insult to injury, the called function often spilled the register into memory because it needed to spare the register for something else, which in the "significant computation between the first two parameters" case means that you get a double-spill. Ouch! </p>
<p> Consequently, __fastcall was typically faster only for short leaf functions, <a href="http://www.bridgespublishing.com/articles/issues/0004/When_to_use___fastcall.htm">and even then it might not be</a>. </p>
</dd>
</dl>
<p> Okay, those are the 16-bit calling conventions I remember. Part 2 will discuss 32-bit calling conventions, if I ever get around to writing it. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-119383">
				<div id="div-comment-119383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve Sheppard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-119383">
			January 2, 2004 at 9:08 am</a>		</div>

		<p>Just curious, you did this off the top of your head? I have a sheet pinned on the wall of my cube because I soemtime need to do manual stack walks in WinDBG and it&#8217;s handy but I can&#8217;t ever remember it exactly for more than a week&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-119393">
				<div id="div-comment-119393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://russ.uk.net' rel='external nofollow' class='url'>Russ C.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-119393">
			January 2, 2004 at 10:31 am</a>		</div>

		<p>I just realised exactly how long it&#8217;s been since I wrote in Assembler !</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-119403">
				<div id="div-comment-119403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric WIlson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-119403">
			January 2, 2004 at 11:03 am</a>		</div>

		<p>x86 (to be really fair I should say IA-32 / IA-16) show once again why it SHOULD have been regulated to the scrap heap long ago:)  3 or 4 open registers is not enough for a high level language to use to do much of anything without some stack walking.  Cache of course helps here (it helps a lot actually, since the stack probably displays more locality of reference than most anything in your application), but the performance would be better with more registers.</p>
<p>Most CPUs developed these days have at least 32 registers (MIPS and SPARC have 32; Itaninums have 128, etc.)</p>
<p>Luckly, AMD has upped the number of registers in their x86-64 assembler (I think they add 8 or 16 off the top of my head).  Would that help to make __fastcall live up to its name?</p>
<p>Does/will visual studio support x86-64?  If so, does it take advantage of the larger number of registers?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-119413">
				<div id="div-comment-119413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Lund/firefly@diku.dk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-119413">
			January 2, 2004 at 5:20 pm</a>		</div>

		<p>Weren&#8217;t there also some fun stuff with the stack pointer sometimes being odd and sometimes even in WIN16?</p>
<p>Does the AMD64 windows calling conventions use a red zone?<br />
</p>
<div class="post"><a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/13/58199.aspx" rel="nofollow">The history of calling conventions, part 4: ia64</a></div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-119423">
				<div id="div-comment-119423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Lund/firefly@diku.dk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-119423">
			January 2, 2004 at 5:24 pm</a>		</div>

		<p>register spills didn&#8217;t have to be expensive on WIN16 on old CPUs, did they?  Couldn&#8217;t you occassionally use a segment register to spill to?  (At least in real mode&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-119433">
				<div id="div-comment-119433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-119433">
			January 2, 2004 at 9:08 pm</a>		</div>

		<p>Steve: Yes, this was from memory. (And I may have remembered __fastcall incorrectly but the basic idea is sound.)</p>
<p>Eric: I will talk about the ia64 and amd64 calling conventions in a future entry. They are quite interesting.</p>
<p>Peter: Egads I thought everybody had forgotten the odd/even rule.  I&#8217;ll make another blog entry on that piece of Windows trivia.  I don&#8217;t know what you mean by a &quot;red zone&quot; though.  And although you could spill to a segment register, that was legal only in real mode, which was woefully ancient even in Windows 3.1 days.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-119443">
				<div id="div-comment-119443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Lund/firefly@diku.dk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-119443">
			January 3, 2004 at 12:48 am</a>		</div>

		<p><a target="_new" href="http://www.x86-64.org/lists/discuss/msg00122.html" rel="nofollow">http://www.x86-64.org/lists/discuss/msg00122.html</a></p>
<p>it is an area &quot;above&quot; the stack pointer that the hardware/os/run-time library promise not to touch so leaf functions can store stuff there without having to adjust the stack pointer.</p>
<p>It is hinted at (not by name) in the section &quot;A five-per-cent Digression&quot; of &quot;Computer Science Technical Report No. 102: The C Calling Sequence&quot; by Johnson and Ritchie, Bell Labs, Sep. 1981.</p>
<p>I don&#8217;t know when or how it got the name &quot;red zone&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-119463">
				<div id="div-comment-119463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AlisdairM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-119463">
			January 3, 2004 at 4:46 am</a>		</div>

		<p>Note that MS __fastcall and the Borland __fastcall are also different conventions that by some twist of history share the same name.  (The quoted article refers to Borland __fastcall, BTW)</p>
<p>I&#8217;m not familiar enough with the history of MS compilers to know where that convention came from, but for Borland __fastcall was born as &#8216;the register calling convention&#8217; that is the standard convention used by the Delphi language (their object-oriented Pascal variant)  This used 3 registers to pass the first 3 register-sized values (integers, pointers, etc)  Your return value also counts as one of these 3, as does the implicit &#8216;self&#8217; pointer for object method calls.  The big advantage was supposed to be for functions passing entirely in registers ( &lt;= 3 params, all register sized) where the traditional prolog/epilog would be omitted.</p>
<p>When Borland introduced a C++ mapping to their Delphi class library with C++Builder, they needed a keyword for this convention and as register was already taken by the language they chose __fastcall.</p>
<p>Just to make things more fun for the poor Borland user, after MS introduced __fastcall they had to have some way to maintain compatibility with code exporting this convention out of DLLs, and as they already used __fastcall themselves, __msfastcall was introduced!  This might also mean doctoring yuor supplied headers to use the correct spelling for fastcall &lt;g&gt;</p>
<p>This all occurred in the Win32 era though</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-119483">
				<div id="div-comment-119483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-119483">
			January 3, 2004 at 5:08 am</a>		</div>

		<p>The Borland __fastcall convention always seemed more logical and more efficient to me than the MS fastcall. It uses eax, edx, and ecx to pass parameters, where the MS convention only uses two of these (forgotten which ones). All other registers are always preserved. This applies to Win32.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-119493">
				<div id="div-comment-119493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Hearn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-119493">
			January 3, 2004 at 8:39 am</a>		</div>

		<p>Hi Raymond, more questions :D Is is true that Win16 used pascal calling convention because it was actually written in pascal?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-119503">
				<div id="div-comment-119503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-119503">
			January 3, 2004 at 8:48 am</a>		</div>

		<p>Mike: No, the reason Win16 used the pascal calling convention was the reason I stated in my entry. Win16 was written in a mix of assembly and C.  (KERNEL was almost entirely assembly; GDI was largely assembly, and USER was mostly C.)</p>
<p>Remember that Pascal doesn&#8217;t support casting, which would have made things like WndProcs pretty close to impossible to write in Pascal.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-119523">
				<div id="div-comment-119523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Lund/firefly@diku.dk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-119523">
			January 3, 2004 at 9:24 am</a>		</div>

		<p>Many Pascal dialects do/did support casting.  All the ones I have used did.  It is pretty easy to add to the language so that excuse doesn&#8217;t count ;)</p>
<p>Mike, I think you are thinking of the Macintosh.  As far as I know the toolbox ROMs were mostly written in assembler but they did choose Pascal as their systems programming language (for non-ROM stuff).  The original Inside the Macintosh shows Pascal &quot;prototypes&quot; for (almost?) everything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-119623">
				<div id="div-comment-119623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.souumalesmabrasileira.com.br' rel='external nofollow' class='url'>Lesma</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-119623">
			January 5, 2004 at 5:22 am</a>		</div>

		<p>Very cool 8)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-120103">
				<div id="div-comment-120103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-120103">
			January 6, 2004 at 8:50 pm</a>		</div>

		<p>I believe fastcall uses cx for the first and dx for the 2nd. At least that makes sense since 32 bit is ecx and edx for the 1st and 2nd respectively.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-120233">
				<div id="div-comment-120233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.honestillusion.com' rel='external nofollow' class='url'>James Curran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-120233">
			January 7, 2004 at 8:00 am</a>		</div>

		<p>I was told (I believe by Charles Petzold) that Win16 used the Pascal calling convention because it allowed Windows 1.0 to ship using one fewer install floppies. (Which, back then, was a big deal)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-120403">
				<div id="div-comment-120403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">keithmo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-120403">
			January 7, 2004 at 12:51 pm</a>		</div>

		<p>While reading these 16-bit details, I suddenly had a &quot;flash back&quot; to the old Win16 days &#8212; MakeProcInstance(), movable memory, shared DLLs, and other horrors. Ack! Pfft!!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-120563">
				<div id="div-comment-120563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://samgentile.com/blog/archive/2004/01/08/11103.aspx' rel='external nofollow' class='url'>Sam Gentile's Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-120563">
			January 8, 2004 at 8:49 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-120583">
				<div id="div-comment-120583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/01/08/48616.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-120583">
			January 8, 2004 at 10:03 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-120823">
				<div id="div-comment-120823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/0001/01/01/48616.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-120823">
			January 8, 2004 at 1:22 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-121063">
				<div id="div-comment-121063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://samgentile.com/blog/archive/0001/01/01/11103.aspx' rel='external nofollow' class='url'>Sam Gentile's Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-121063">
			January 8, 2004 at 8:02 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-135863">
				<div id="div-comment-135863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://baby.homeip.net/patrick/archives/000142.php' rel='external nofollow' class='url'>Simply Patrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-135863">
			January 13, 2004 at 1:19 pm</a>		</div>

		<p>??????,??????????? ?????????? calling convention: The history of calling conventions, part 1 The history of calling conventions, part 2 The history of calling conventions, part 3 The history of calling conventions, part 4: ia64 Why do member functions need to be&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-150503">
				<div id="div-comment-150503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-150503">
			March 4, 2004 at 4:39 pm</a>		</div>

		<p>Any chance of explaining AMD64 fastcall convention sported in windows server 2003 ddk compiler? I have checked a listing and it seems to pass first 2 integers in ecx/edx then first 2 floats/doubles in xmm2/xmm3 and then the rest on stack above [rsp + 32]. Can anyone confirm this or point me to some docs?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-150513">
				<div id="div-comment-150513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-150513">
			March 4, 2004 at 4:41 pm</a>		</div>

		<p>Um, I already did: <a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/01/14/58579.aspx" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/01/14/58579.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-183793">
				<div id="div-comment-183793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/06/15/156294.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-183793">
			June 15, 2004 at 1:30 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-191903">
				<div id="div-comment-191903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cnblogs.com/flier/archive/2004/07/08/22346.aspx' rel='external nofollow' class='url'>Flier's Sky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-191903">
			July 7, 2004 at 11:03 pm</a>		</div>

		<p>The history of calling conventions</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-381503">
				<div id="div-comment-381503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.escoria.org/PermaLink,guid,a5ab12d7-a40d-4f47-b07d-f38ef05e903a.aspx' rel='external nofollow' class='url'>Anuncie Aqui!</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-381503">
			May 17, 2006 at 8:44 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-518813">
				<div id="div-comment-518813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.hamo.cn/2007/06/dive-into-passcal-call/419.html' rel='external nofollow' class='url'>Hamo&#8217;s World &raquo; Dive into PASSCAL call</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040102-00/?p=41213#comment-518813">
			June 25, 2007 at 4:37 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.hamo.cn/2007/06/dive-into-passcal-call/419.html" rel="nofollow">http://www.hamo.cn/2007/06/dive-into-passcal-call/419.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

