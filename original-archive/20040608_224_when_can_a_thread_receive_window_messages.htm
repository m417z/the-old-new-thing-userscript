<html>
<head>
<title>When can a thread receive window messages?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When can a thread receive window messages?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 8, 2004 / year-entry #225</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Everybody who has messed with window messaging knows that GetMessage and PeekMessage retrieve queued messages, which are dispatched to windows via DispatchMessage. Most people also know that GetMessage and PeekMessage will also dispatch nonqueued messages. (All pending nonqueued messages are dispatched, then the first queued message is returned.) But apparently not many people realize that...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Everybody who has messed with window messaging knows  that GetMessage and PeekMessage retrieve queued messages,  which are dispatched to windows via DispatchMessage.</p>
<p>  Most people also know that GetMessage and PeekMessage  will also dispatch nonqueued messages.  (All pending nonqueued messages are dispatched, then  the first queued message is returned.)  </p>
<p>  But apparently not many people realize that  SendMessage will also dispatch messages!  </p>
<p>  If one thread T1 send a message to a window that belongs to another  thread T2, the sending thread T1 is put to sleep until the  receiving thread replies to the message.  But if somebody else sends a message to thread T1, thread T1  <strong>is woken to process the message</strong>,  then is returned to sleep.  </p>
<p>  Why is that?  </p>
<p>  Well, when two threads T1 and T2 are working together,  it's common that thread T1 may send a message to thread T2,  and while handling the message, thread T2 will send messages  back to thread T1 before it returns to T1.  Therefore, thread T1 must be ready to accept incoming sent messages.  </p>
<p>  For example, thread T1 may send a message saying, "Tell me  about all the X's that you know."  Thread T2 will then send one message back to thread T1  saying, "Here's an X", and then another message to say  "Here's another X", and so on, until it has finished  telling thread T1 about all the X's, at which point it  returns.  </p>
<p>  Thread T1 now knows, when the original message returns,  that it has received the entire list of X's  from thread 2.  </p>
<p>  This back-and-forth is  <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/dataexchange/dynamicdataexchange.asp">  how DDE service discovery works</a>.  </p>
<p>  Another case is that thread T1 sends a message to thread T2,  and thread T2 needs to ask thread T1 for help before it can  finish the operation.  This isn't as strange as it sounds.  You do something similar all the time without realizing  it when you respond to a WM_NOTIFY message by sending messages  back to the control that sent the notification.  (For example, you may respond to a LVN_ITEMACTIVATE by sending  back a LVM_GETITEM to get information about the item that was activated.)  </p>
<p>  So remember:  Any time you send a message, there is a potential for re-entrancy.  </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-181753">
				<div id="div-comment-181753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-181753">
			June 8, 2004 at 7:47 am</a>		</div>

		<p>Here&#8217;s a dumb question I just thought about.  What happens when you thread 1 sends a message to thread 2, and thread 2, in the handler, decides to terminate itself?  Or same with sending a process that terminates itself?</p>
<p>What&#8217;s the return value of SendMessage to the caller?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-181763">
				<div id="div-comment-181763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-181763">
			June 8, 2004 at 7:50 am</a>		</div>

		<p>Just one of the reasons why GUI code and multi-threaded applications is hard.</p>
<p>It is amusing when you break in the debugger and see your code in the call stack 3 or 4 times, with Win32 code interspersed between them.  Can make for some real entertaining bugs&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-181773">
				<div id="div-comment-181773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-181773">
			June 8, 2004 at 7:59 am</a>		</div>

		<p>This is also one of the reasons why MsgWaitForMultipleObjects() is not particularly useful.  You really cannot control what happens on your thread.  Dialogs are one of the places that you can&#8217;t get into the Message Queue processing.</p>
<p>Is there a way to get control of the Sleep that SendMessage puts the thread into?  At least then you could process other events while you are waiting on the other thread&#8230;.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-181783">
				<div id="div-comment-181783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-181783">
			June 8, 2004 at 9:09 am</a>		</div>

		<p>LRESULT BlockingSendMessage(HWND hwnd, UINT msg, WPARAM wp, LPARAM lp)<br />
<br />{<br />
<br />    LRESULT ret;<br />
<br />    SendMessageTimeout(hwnd, msg, wp, lp, SMTO_BLOCK, INFINITE, &amp;ret);<br />
<br />    return ret;<br />
<br />}</p>
<p>Doug: you can poll SendMessageTimeout in a PeekMessage style message loop to do what you want.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-181793">
				<div id="div-comment-181793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-181793">
			June 8, 2004 at 9:16 am</a>		</div>

		<p>Doug:<br />
<br />1. MsgWaitForMultipleObjects isn&#8217;t really for GUI programming. It&#8217;s great if you have worker threads that you want to drive using a message pump though. </p>
<p>2. Controlling the Sleep? Sure! You have three options that I can think of:<br />
<br />a. Use PostMessage instead of SendMessage, then you won&#8217;t sleep at all.<br />
<br />b. Use SendMessageTimeout so that you can expire if you&#8217;re waiting too long.<br />
<br />c. Use SendReply from the thread you&#8217;re responding to the SendMessage call in, so you can wake up your other thread as soon as possible, and still continue running if you need to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-181813">
				<div id="div-comment-181813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Seth McCarus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-181813">
			June 8, 2004 at 11:21 am</a>		</div>

		<p>Simon, do you mean ReplyMessage in item c?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-181823">
				<div id="div-comment-181823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-181823">
			June 8, 2004 at 11:45 am</a>		</div>

		<p>Seth: Yep, thanks for catching that one. :) That&#8217;s what I get for replying before I get my latte :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-181873">
				<div id="div-comment-181873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-181873">
			June 9, 2004 at 1:55 am</a>		</div>

		<blockquote><p>
  a. Use PostMessage instead of SendMessage, then<br />
  <br />&gt; you won&#8217;t sleep at all.</p>
<p>But then, if you want your message answered, you have to invent another way to get your reply than the message return value, for example, by having the other thread post the reply to you.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-181943">
				<div id="div-comment-181943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-181943">
			June 9, 2004 at 8:26 am</a>		</div>

		<p>Centaur:<br />
<br />Sure, but if you don&#8217;t want to sleep at all, that means that you want to be completely asynchronous anyway. So you&#8217;d need something like that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-181953">
				<div id="div-comment-181953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-181953">
			June 9, 2004 at 8:29 am</a>		</div>

		<p>SendMessageCallback.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-182893">
				<div id="div-comment-182893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jasondoucette.com/' rel='external nofollow' class='url'>Jason Doucette</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-182893">
			June 11, 2004 at 4:32 pm</a>		</div>

		<p>Raymond,</p>
<p>Is this similar to the reason why, when you call MessageBox(), the program continues to run (i.e. other messages, such as WM_PAINT and WM_TIMER, are handled while the user is still reading the dialog box)?</p>
<p>When I first starting Windows programming, this caught me off guard &#8211; since, even though I knew Windows was a multitasking / multithreading environment, my sample application only had one thread, and the code that appears immediately after the call to MessageBox() is not run until it returns &#8211; yet other parts of my program were running.  Then, they were causing this same code to be run, calling MessageBox() multiple times, displaying hundreds of dialogs, until the application finally crashed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-182913">
				<div id="div-comment-182913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-182913">
			June 11, 2004 at 5:29 pm</a>		</div>

		<p>No that is another issue entirely &#8211; the modal message loop. Clearly messages are dispatched while the dialog box is up &#8211; you rely on it every time you yourself call DialogBox!</p>
<p>(Tearing apart dialog boxes is a month-long subject that I hope to cover in little pieces. It took me three months just to write the first week&#8217;s worth!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-190293">
				<div id="div-comment-190293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-190293">
			July 3, 2004 at 10:39 am</a>		</div>

		<p>Commenting on this entry has been closed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227973">
				<div id="div-comment-227973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/11/19/266806.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-227973">
			November 19, 2004 at 11:52 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-372573">
				<div id="div-comment-372573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cppblog.com/flyingxu/archive/2006/04/22/6088.html' rel='external nofollow' class='url'>flyingxu</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-372573">
			April 22, 2006 at 11:26 am</a>		</div>

		<p>TrackBack From:<a rel="nofollow" target="_new" href="http://www.cppblog.com/flyingxu/archive/2006/04/22/6088.html" rel="nofollow">http://www.cppblog.com/flyingxu/archive/2006/04/22/6088.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-372583">
				<div id="div-comment-372583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cppblog.com/flyingxu/archive/0001/01/01/6088.html' rel='external nofollow' class='url'>flyingxu</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040608-00/?p=38983#comment-372583">
			April 22, 2006 at 11:28 am</a>		</div>

		<p>TrackBack From:<a rel="nofollow" target="_new" href="http://www.cppblog.com/flyingxu/archive/0001/01/01/6088.html" rel="nofollow">http://www.cppblog.com/flyingxu/archive/0001/01/01/6088.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

