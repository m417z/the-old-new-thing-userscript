<html>
<head>
<title>What does it mean when I get an access violation at a very low address when entering a critical section?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What does it mean when I get an access violation at a very low address when entering a critical section?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 22, 2017 / year-entry #213</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170922-00/?p=97065</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It probably means that you're entering a critical section that is not initialized.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<b>Warning</b>:
This article talks about implementation details which can change
at any time.
The information provided is for debugging and diagnostic purposes only.
</p>
<p>
A customer found that
their server program occasionally crashes in the internal function
<code>Rtlp&shy;Wait&shy;On&shy;Critical&shy;Section</code>
trying to dereference the address <code>0x00000014</code>.
</p>
<pre>
7789dde3 ff4014          inc     dword ptr [eax+14h]
</pre>
<p>
The dereference was due to a null pointer in the <code>EAX</code>
register.
This was particularly difficult to debug because the problem
usually didn't surface until the program had been running
continuously for a week or more.
</p>
<p>
The customer chased the null pointer backwards and found that it
came from the <code>Debug&shy;Info</code> field of the
<code>RTL_</code><code>CRITICAL_</code><code>SECTION</code>
structure.
</p>
<pre>
typedef struct _RTL_CRITICAL_SECTION
{
                                             // value in memory:
     PRTL_CRITICAL_SECTION_DEBUG DebugInfo;  // 0x00000000
     LONG LockCount;                         // 0xFFFFFFFC
     LONG RecursionCount;                    // 0x00000000
     PVOID OwningThread;                     // 0x00000000
     PVOID LockSemaphore;                    // 0x00005CDC
     ULONG SpinCount;                        // 0x00000000
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;
</pre>
<p>
The customer confirmed that, yes,
the <code>Debug&shy;Info</code> of the critical section
they were trying to enter was indeed null.
</p>
<p>
Although the customer didn't do it in their application
(at least not knowingly),
they did try a test application which passed the
<code>CRITICAL_</code><code>SECTION_</code><code>NO_</code><code>DEBUG_</code><code>INFO</code>
flag to the
<code>Initialize&shy;Critical&shy;Section&shy;Ex</code>
function,
in the hopes of inducing a null pointer for the
<code>Debug&shy;Info</code>,
but it didn't work.
When initialized in that way, the
<code>Debug&shy;Info</code> was set to <code>0xFFFFFFFF</code>.
</p>
<p>
Is it possible that this is a critical section that was initialized
with the traditional
<code>Initialize&shy;Critical&shy;Section</code>
function,
but the attempt to allocate the debug info failed, so the kernel
left it null?
</p>
<p>
No, that's not why the the <code>Debug&shy;Info</code> is null.
If a critical section has no debug info (either explicitly requested
as such with the
<code>CRITICAL_</code><code>SECTION_</code><code>NO_</code><code>DEBUG_</code><code>INFO</code>
flag,
or because the system couldn't allocate any debug info),
then the <code>Debug&shy;Info</code> is set to the special value
<code>0xFFFFFFFF</code>.
The <code>Debug&shy;Info</code> for a valid initialized critical
section is never null.
</p>
<p>
So what does it mean when the
<code>Debug&shy;Info</code> is null?
The most likely reason is that you are using an uninitialized
critical section.
Either you never initialized it,
or you deleted an initialized critical section (which resets it
back to the uninitialized state).
</p>
<p>
Other evidence that you have an uninitialized critical section is
that the critical section is locked, yet has no owner.
Furthermore, the spin count is zero,
which occurs only on uniprocessor systems.
I suspect the server they are running the program on has more than one core.
(Heck, my <i>phone</i> has more than one core.)
</p>
<p>
<b>Bonus reading</b>:
<a HREF="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/displaying-a-critical-section">
Displaying a critical section in the debugger</a>.
</p>
<p>
<b>Related</b>:
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20050701-11/?p=35123">
I hope you werent using those undocumented critical section fields</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1310186">
				<div id="div-comment-1310186" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170922-00/?p=97065#comment-1310186">
			September 22, 2017 at 12:19 pm</a>		</div>

		<p>Well, without knowing the internals of a critical section and just by reading the article&#8217;s title (not even the subtitle), my psychic powers told me it was due to a null pointer, possibly because they were accessing an uninitialized critical section, or maybe because of memory corruption. Anyway, debugging is necessary to find the final cause. But if it only happens after running for a week, good luck with that. Another of those fun bugs where you end up reading code in hope of finding something that could cause the observed problem (and you fix some unrelated bugs in the way).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1310235">
				<div id="div-comment-1310235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170922-00/?p=97065#comment-1310235">
			September 24, 2017 at 2:12 am</a>		</div>

		<p>The physical hardware they were running on was *vanishingly* unlikely to be uniprocessor &#8211; but the VM they were running in might have been.  </p>
<p>I suspect a *lot* of servers these days are running inside VMs &#8211; and if you don&#8217;t need multi-threaded throughput, a uniprocessor machine eliminates quite a lot of potential problems.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-2 parent" id="comment-1310237">
				<div id="div-comment-1310237" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170922-00/?p=97065#comment-1310237">
			September 24, 2017 at 4:03 am</a>		</div>

		<p>That depends on the meaning of &#8220;uniprocessor systems&#8221;. Its been a while since we had special uniprocessor kernel builds. A modern system might support hot swappable CPUs so the core count is not fixed at boot.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1310265">
				<div id="div-comment-1310265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170922-00/?p=97065#comment-1310265">
			September 24, 2017 at 7:52 am</a>		</div>

		<p>I discovered a long time ago the uniprocessor kernel has a deadlock bug the multiprocessor bug doesn&#8217;t. If you try to read a handle from one thread and close it from another it will deadlock until the read finishes (which could be never). The multiprocessor kernel won&#8217;t deadlock on this.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1310305">
				<div id="div-comment-1310305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170922-00/?p=97065#comment-1310305">
			September 25, 2017 at 8:30 am</a>		</div>

		<p>Basically, uniprocessor kernels make a good number of optimizations based on the fact that there are only a processor, and thus, you can make some assumptions, like &#8220;read-modify-store instructions are always atomic&#8221;, or &#8220;there can&#8217;t be race conditions without context switches&#8221;. This allows you to save some instructions, and in some cases, even avoid switching to/from kernel mode. Which improves performance. But, as with every optimization, you risk introducing new bugs.</p>
<p>Anyway, the Windows kernel should be the most tested piece of software of history. Are you sure it really was a bug, and not a side effect of some documented behavior?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1310405">
				<div id="div-comment-1310405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170922-00/?p=97065#comment-1310405">
			September 26, 2017 at 6:00 pm</a>		</div>

		<p>If you can get a thread into an uninterruptible sleep it&#8217;s a security bug. I don&#8217;t remember trying terminate process to try to unwedge it but that thread was stuck in kernel.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

