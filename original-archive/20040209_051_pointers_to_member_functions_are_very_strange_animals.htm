<html>
<head>
<title>Pointers to member functions are very strange animals</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Pointers to member functions are very strange animals</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 9, 2004 / year-entry #52</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Pointers to member functions are very strange animals. Warning: The discussion that follows is specific to the way pointers to member functions are implemented by the Microsoft Visual C++ compiler. Other compilers may do things differently. Well, okay, if you only use single inheritance, then pointers to member functions are just a pointer to the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Pointers to member functions are very strange animals.</p>
<p>
<b>Warning</b>: The discussion that follows is specific to
the way pointers to member functions are implemented by the
Microsoft Visual C++ compiler.  Other compilers may do things
differently.
</p>
<p>
Well, okay, if you only use single inheritance, then
pointers to member functions are just a pointer to the
start of the function, since all the base classes
share the same "this" pointer:
</p>
<pre>
class Simple { int s; void SimpleMethod(); };
class Simple2 : public Simple
  { int s2; void Simple2Method(); };
class Simple3 : public Simple2
  { int s3; Simple3Method(); };
</pre>
<table BORDER=0>
<col SPAN=3 ALIGN=center>
<tr>
<td valign=top>p</td>
<td valign=top>&rarr;</td>
<td STYLE="border: solid 1px buttonshadow; width: 10em">
<div STYLE="border: solid 1px buttonshadow; margin: .5ex">
<div STYLE="border: solid 1px buttonshadow; margin: .5ex">
       Simple::s
     </div>
<p>       Simple2::s2
   </p>
</div>
<p>    Simple3::s3
</td>
</tr>
</table>
<p>
Since they all use the same "this" pointer (p), a pointer to
a member function of Base can be used as if it were a pointer
to a member function of Derived2 without any adjustment
necessary.
</p>
<blockquote CLASS=m><p>
The size of a pointer-to-member-function of a class that
uses only single inheritance is just the size of a pointer.
</p>
</blockquote>
<p>
But if you have multiple base classes, then things get interesting.</p>
<pre>
class Base1 { int b1; void Base1Method(); };
class Base2 { int b2; void Base2Method(); };
class Derived : public Base1, Base2
  { int d; void DerivedMethod(); };
</pre>
<table BORDER=0 CELLSPACING=0>
<col SPAN=3 ALIGN=center>
<tr>
<td valign=top>p</td>
<td valign=top>&rarr;</td>
<td STYLE="border: solid 1px buttonshadow; border-bottom: none; width: 10em">
<div STYLE="border: solid 1px buttonshadow; margin: .5ex">
       Base1::b1
     </div>
</td>
</tr>
<tr>
<td valign=top>q</td>
<td valign=top>&rarr;</td>
<td STYLE="border: solid 1px buttonshadow; border-top: none; width: 10em">
<div STYLE="border: solid 1px buttonshadow; margin: .5ex">
       Base2::b2
     </div>
<p>       Derived::d
    </td>
</tr>
</table>
<p>
There are now two possible "this" pointers.  The first (p) is used
by both Derived and Base1, but the second (q) is used by Base2.
</p>
<p>
A pointer to a member function of Base1 can be used as a pointer
to a member function of Derived, since they both use the same "this"
pointer.  But a pointer to a member function of Base2 cannot be
used as-is as a pointer to a member function of Derived, since the
"this" pointer needs to be adjusted.
</p>
<p>
There are many ways of solving this.
Here's how the Visual Studio compiler decides to handle it:
</p>
<p>
A pointer to a member function of a multiply-inherited class
is really a structure.
</p>
<table BORDER=0>
<col ALIGN=center>
<tr>
<td STYLE="border: solid 1px buttonshadow; width: 10em">
    Address of function
    </td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow; width: 10em">
       Adjustor
    </td>
</tr>
</table>
<blockquote CLASS=m><p>
The size of a pointer-to-member-function of a class that
uses multiple inheritance is the size of a pointer plus the
size of a size_t.
</p>
</blockquote>
<p>
Compare this to the case of a class that uses only single inheritance.
</p>
<blockquote CLASS=m><p>
The size of a pointer-to-member-function can change depending on
the class!
</p>
</blockquote>
<p>
Aside: Sadly, this means that Rich Hickey's wonderful technique of
<a HREF=http://www.tutok.sk/fastgl/callback.html>Callbacks
in C++ Using Template Functors</a> cannot be used as-is.
You have to fix the place where he writes the comment</p>
<pre>
// Note: this code depends on all ptr-to-mem-funcs being same size
</pre>
</p>
<p>
Okay, back to our story.
</p>
<p>To call through a pointer to a member function, the "this"
pointer is adjusted by the Adjustor, and then the function
provided is called.  A call through 
a function pointer might be compiled like this:
</p>
<pre>
void (Derived::*pfn)();
Derived d;

(d.*pfn)();

  lea  ecx, d       ; ecx = "this"
  add  ecx, pfn[4]  ; add adjustor
  call pfn[0]       ; call
</pre>
<p>
When would an adjustor be nonzero?  Consider the case above.
The function Derived::Base2Method() is really Base2::Base2Method()
and therefore expects to receive "q" as its "this" pointer.
In order to convert a "p" to a "q", the adjustor must have the
value sizeof(Base1), so that when the first line of Base2::Base2Method()
executes, it receives the expected "q" as its "this" pointer.
</p>
<p>
"But why not just use a thunk instead of manually adding the adjustor?"
In other words, why not just use a simple pointer to a thunk that
goes like this:
</p>
<pre>
Derived::Base2Method thunk:
    add ecx, sizeof(Base1)  ; convert "p" to "q"
    jmp Base2::Base2Method  ; continue
</pre>
<p>
and use that thunk as the function pointer?
</p>
<p>
The reason: Function pointer casts.
</p>
<p>
Consider the following code:</p>
<pre>
void (Base2::*pfnBase2)();
void (Derived::*pfnDerived)();

pfnDerived = pfnBase2;

  mov  ecx, pfnBase2            ; ecx = address
  mov  pfnDerived[0], ecx

  mov  pfnDerived[4], sizeof(Base1) ; adjustor!
</pre>
<p>
We start with a pointer to a member function of Base2,
which is a class that uses only single inheritance, so it
consists of just a pointer to the code.
To assign it to a pointer to a member function
of Derived, which uses multiple inheritance, we can re-use
the function address, but we now need an adjustor so that
the pointer "p" can properly be converted to a "q".
</p>
<p>
Notice that the code doesn't know what function pfnBase2
points to, so it can't just replace it with the matching thunk.
It would have to generate a thunk at runtime and somehow
use its psychic powers to decide when the memory can safely
be freed.  (This is C++.  No garbage collector here.)
</p>
<p>
Notice also that when pfnBase2
got cast to a pointer to member function of Derived, its size changed,
since it went from a pointer to a function in a class that uses only single
inheritance to a pointer to a function in a class
that uses multiple inheritance.
</p>
<blockquote CLASS=m><p>
Casting a function pointer can change its size!
</p>
</blockquote>
<p>
I bet that you didn't know that before reading this entry.
</p>
<p>
There's still an awful lot more to this topic,
but I'm going to stop here before everybody's head explodes.
</p>
<p>
<b>Exercise</b>:
Consider the class</p>
<pre>
class Base3 { int b3; void Base3Method(); };
class Derived2 : public Base3, public Derived { };
</pre>
<p>How would the following code be compiled?</p>
<pre>
void (Derived::*pfnDerived)();
void (Derived2::*pfnDerived2();

pfnDerived2 = pfnDerived;
</pre>
<p>
Answer to appear tomorrow.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-141633">
				<div id="div-comment-141633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141633">
			February 9, 2004 at 7:24 am</a>		</div>

		<p>&#8216;Casting a function pointer can change its size!&#8217;</p>
<p> Bu..bu.. bu &#8230; my head hurts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141653">
				<div id="div-comment-141653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lonnie McCullough</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141653">
			February 9, 2004 at 7:44 am</a>		</div>

		<p>I was just wondering about this very subject and was going to post a comment asking you to discuss it.  Wow!  Thanks again, I always wondered why my pointers to member functions had a sizeof() == 8 sometimes and 4 other times.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141663">
				<div id="div-comment-141663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.whirlingdervishes.com' rel='external nofollow' class='url'>Henk Devos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141663">
			February 9, 2004 at 8:02 am</a>		</div>

		<p>Long ago, when trying to cast a member function pointer to a DWORD, i couldn&#8217;t believe that the compiler gave me a size mismatch pointer&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141673">
				<div id="div-comment-141673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.amotif.com' rel='external nofollow' class='url'>Curt</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141673">
			February 9, 2004 at 8:15 am</a>		</div>

		<blockquote><p>
  The size of a pointer-to-member-function can change depending on the class!</p>
<p>As if Mondays aren&#8217;t hard enough!  I&#8217;m going back to bed. :)<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141683">
				<div id="div-comment-141683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan O'Connor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141683">
			February 9, 2004 at 8:55 am</a>		</div>

		<p>My friend and former colleague, Martin O&#8217;Riordain came up with the idea of using thunks for ptr-to-member-fn about 1990. He wouldn&#8217;t tell us about them then, because he wanted to use this for his interview with Microsoft. Its funny to see that they aren&#8217;t used anymore. But then I guess, C++ has moved on a bit since then.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141693">
				<div id="div-comment-141693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141693">
			February 9, 2004 at 10:22 am</a>		</div>

		<p>The size of a pointer-to-member should not vary as you describe. The C++ standard says it&#8217;s OK to cast a pointer-to-member-of-derived to pointer-to-member-of-base (though it must be a non-virtual base) so long as you only use the result with pointers-to-base that really point to instances of the derived class. So the &quot;optimisation&quot; of dropping the adjustment field where it&#8217;s apparently not necessary is actually a bug. The compiler admits:<br />
<br />&quot;warning C4407: cast between different pointer to member representations, compiler may generate incorrect code&quot;. Thankfully there is an option that fixes this: &quot;/vmg&quot;. However, the documentation for C4407 and for &quot;/vmg&quot; fails to acknowledge that this behaviour is a bug and basically blames the programmer for finding the edge cases where this &quot;optimisation&quot; doesn&#8217;t work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141703">
				<div id="div-comment-141703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141703">
			February 9, 2004 at 1:58 pm</a>		</div>

		<p>Actually, Ben, if you&#8217;re referring to 4.11.2 (pointer to member conversions) the standard actually says the opposite. You can convert pointer-to-base-member into pointer-to-derived-member without loss of fidelity. And that&#8217;s what we&#8217;re doing here.</p>
<p>I can&#8217;t find a place in the standard where it says that you can safely cast pointer-to-derived-member to pointer-to-base-member.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141723">
				<div id="div-comment-141723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Woon Kiat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141723">
			February 9, 2004 at 4:44 pm</a>		</div>

		<p>Hi Raymond, this is a very interesting topic. Is there any book or material you would recommend for further understanding on this topic?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141733">
				<div id="div-comment-141733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141733">
			February 9, 2004 at 4:53 pm</a>		</div>

		<p>This is all undocumented implementation details, so I doubt there&#8217;d be a book on it. You can read Ellis/Stroustrup &quot;The Annotated C++ Reference Manual&quot; to see the design of a completely different way of doing pointers to functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141743">
				<div id="div-comment-141743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Woon Kiat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141743">
			February 9, 2004 at 5:42 pm</a>		</div>

		<p>What about reference on multiple inheritance? Is there any book you would recommend? Most books just touch the surface and never go deep into it. The concept of MI always confuse me when it comes to the vtable layout and implementation. And the architect of C# decide not to have MI in C#. Do you think MI is a good topic to blog on?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141753">
				<div id="div-comment-141753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141753">
			February 9, 2004 at 6:20 pm</a>		</div>

		<p>I&#8217;m not sure what there is to write about on the subject of multiple inheritance. It&#8217;s a language feature. The language specification leaves a lot of the details to the implementation, so you shouldn&#8217;t expect to find a book that details implementation since that&#8217;s all undocumented and subject to change at any time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141793">
				<div id="div-comment-141793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141793">
			February 9, 2004 at 10:35 pm</a>		</div>

		<p>There is an article in MSDN about this:</p>
<p>&quot;C++: Under the Hood&quot;, Jan Gray, March 1994</p>
<p><a target="_new" href="http://msdn.microsoft.com/archive/default.asp?url=/archive/en-us/dnarvc/html/jangrayhood.asp" rel="nofollow">http://msdn.microsoft.com/archive/default.asp?url=/archive/en-us/dnarvc/html/jangrayhood.asp</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-141843">
				<div id="div-comment-141843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/02/10/70638.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141843">
			February 10, 2004 at 10:00 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-141963">
				<div id="div-comment-141963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-141963">
			February 10, 2004 at 1:51 pm</a>		</div>

		<p>Raymond, I&#8217;m talking about explicit conversions (aka casts) which are specified in 5.4/7. 4.11/2 is about standard conversions which can be done implicitly (because they&#8217;re generally safe).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-142013">
				<div id="div-comment-142013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-142013">
			February 10, 2004 at 4:20 pm</a>		</div>

		<p>Ben: Okay I read 5.4/7 and I think you&#8217;re right. Then again, I&#8217;m not a real language lawyer; I just play one on the Internet.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-144643">
				<div id="div-comment-144643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Giovanni Bajo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-144643">
			February 16, 2004 at 12:52 pm</a>		</div>

		<p>Why anybody should care about Rich Hickey&#8217;s ten-years-old techniques when we have boost::bind and boost::function which works wonderfully as generalized binders and callbacks?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-267123">
				<div id="div-comment-267123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/03/24/401490.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-267123">
			March 24, 2005 at 9:03 am</a>		</div>

		<p>Two confusing features that explode when you combine them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-449463">
				<div id="div-comment-449463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.qooiii.com/blog/?p=27' rel='external nofollow' class='url'>Qooiii.com blog &raquo; Blog Archive &raquo; Hardly Anybody</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-449463">
			December 5, 2006 at 11:31 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.qooiii.com/blog/?p=27" rel="nofollow">http://www.qooiii.com/blog/?p=27</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-650163">
				<div id="div-comment-650163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.peousware.com/?p=11' rel='external nofollow' class='url'>PeousWare - At last, sharing ! &raquo; Blog Archive &raquo; Member function pointer size in Visual C++</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040209-00/?p=40713#comment-650163">
			July 28, 2008 at 7:33 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.peousware.com/?p=11" rel="nofollow">http://www.peousware.com/?p=11</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

