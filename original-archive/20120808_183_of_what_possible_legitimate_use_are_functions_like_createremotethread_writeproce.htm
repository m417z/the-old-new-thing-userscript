<html>
<head>
<title>Of what possible legitimate use are functions like CreateRemoteThread, WriteProcessMemory, and VirtualProtectEx?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Of what possible legitimate use are functions like CreateRemoteThread, WriteProcessMemory, and VirtualProtectEx?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 8, 2012 / year-entry #184</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>26</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There are a bunch of functions that allow you to manipulate the address space of other processes, like Write­Process­Memory and Virtual­Alloc­Ex. Of what possible legitimate use could they be? Why would one process need to go digging around inside the address space of another process, unless it was up to no good? These functions exist...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>There are a bunch of functions that allow you to manipulate the address space of other processes, like <code>Write&shy;Process&shy;Memory</code> and <code>Virtual&shy;Alloc&shy;Ex</code>. Of what possible legitimate use could they be? Why would one process need to go digging around inside the address space of another process, unless it was up to no good?</p>
<p> These functions exist for debuggers. For example, when you ask the debugger to inspect the memory of the process being debugged, it uses <code>Read&shy;Process&shy;Memory</code> to do it. Similarly, when you ask the debugger to update the value of a variable in your process, it uses <code>Write&shy;Process&shy;Memory</code> to do it. And when you ask the debugger to set a breakpoint, it uses the <code>Virtual&shy;Protect&shy;Ex</code> function to change your code pages from read-execute to read-write-execute so that it can patch an <code>int&nbsp;3</code> into your program. </p>
<p> If you ask the debugger to break into a process, it can use the <code>Create&shy;Remote&shy;Thread</code> function to inject a thread into the process that immediately calls <code>Debug&shy;Break</code>. (The <a href="http://msdn.microsoft.com/library/ms679298.aspx"> <code>Debug&shy;Break&shy;Process</code></a> was subsequently added to make this simpler.) </p>
<p> But for general-purpose programming, these functions don't really have much valid use. They tend to be used for nefarious purposes like DLL injection and cheating at video games. </p>
<p> [Raymond is currently away; this message was pre-recorded.] </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1003933">
				<div id="div-comment-1003933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skyborne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1003933">
			August 8, 2012 at 7:17 am</a>		</div>

		<p>And the arms race between debuggers and anti-debug techniques begins&#8230;.</p>
<p>Back in the day, parts of AmigaOS would crash the system if the 68000&#39;s trace bit was set, to get in the way of you understanding how it did &quot;privileged&quot; operations in a system without an MMU.</p>
<p>IIRC, it actually worked like this: the OS causes an exception, the vector points to a handler in the OS, and the exception frame indicates the faulting address. &nbsp;If the handler recognizes that address (both sides of this game are fixed in ROM) then it performs the operation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1003943">
				<div id="div-comment-1003943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mmm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1003943">
			August 8, 2012 at 7:19 am</a>		</div>

		<p>Define good and nefarious.</p>
<p>&gt;&gt; nefarious purposes like DLL injection and cheating at video games</p>
<p>If I&#39;m the user of the PC and I want to do it, it&#39;s not nefarious. It&#39;s good.</p>
<div class="post">[<i>My definition here is &quot;supported, adhering to sound engineering practices.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1003953">
				<div id="div-comment-1003953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1003953">
			August 8, 2012 at 7:29 am</a>		</div>

		<p>Just out of curiosity, are there any numbers related to the number of exploits that use these functions vs. other means? &nbsp;I&#39;m mostly curious if it would be worthwhile for UAC or similar to monitor calls to these functions so that if they were called on my grandmother&#39;s computer, it would pop up an alert, but on mine I could disable said warnings since I would be using debuggers and such.</p>
<p>Of course, I am assuming that my grandmother is capable of understanding the UAC warning, which seems highly unlikely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1003963">
				<div id="div-comment-1003963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1003963">
			August 8, 2012 at 7:30 am</a>		</div>

		<p>Well you could start an arms race to make these functions more difficult to abuse, but I don&#39;t think that&#39;d help much. &nbsp;You could, say, make those functions only succeed on processes being actively debugged by the current process (malware/cheaters would just initiate a fake debugging session). &nbsp;You could then only allow a process to debug another process under more restricted conditions, but I can&#39;t think of anything that wouldn&#39;t result in either &quot;Why do I have to be an administrator to debug another process?&quot; or &quot;Why do I have to buy a code-signing certificate from Microsoft to run my awesome homemade debugger?&quot; etc.</p>
<p>End result: just skip the arms race and hope that code uses these functions for good and not for evil.</p>
<p>Unix has the same problem. &nbsp;If a process can debug another with ptrace(2), it can just as easily write data into the other process with PTRACE_POKETEXT. &nbsp;Doing a CreateRemoteThread or VirtualProtectEx is a little harder, but it can be done by breaking the debuggee, setting up a fake stack frame that calls pthread_create(3) or mmap(2) and a return address of the current IP, and switching the current IP to one of those functions with PTRACE_SETREGS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1003973">
				<div id="div-comment-1003973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1003973">
			August 8, 2012 at 7:45 am</a>		</div>

		<p>@Adam Last I checked users have to be in the Debugger Users group to use a debugger. &nbsp;I don&#39;t know if it&#39;s tied to these APIs, but it is most certainly tied to being able to cross a security boundary by debugging an elevated process.</p>
<p>So Limited Users should be somewhat safe by default I would hope.</p>
<div class="post">[<i>&quot;Debugger Users&quot; is not a standard group. It was probably added by your IDE. You can debug any process you own; the <a href="http://blogs.msdn.com/b/oldnewthing/archive/2008/03/14/8080140.aspx" rel="nofollow">SeDebugPrivilege</a> is for debugging processes you don&#39;t own. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1003993">
				<div id="div-comment-1003993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mmm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1003993">
			August 8, 2012 at 8:14 am</a>		</div>

		<blockquote><p>
  &gt; My definition here is &quot;supported, adhering to sound engineering practices.&quot; -Raymond
</p></blockquote>
<p>Under that definition it totally makes sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004003">
				<div id="div-comment-1004003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004003">
			August 8, 2012 at 8:19 am</a>		</div>

		<p>Back in NT 3.x, I&#39;m pretty sure that CSRSS sometimes used Read&shy;/WriteProcess&shy;Memory to access buffers in the client processes, rather than passing the data over LPC. &nbsp;Was that &quot;nefarious&quot;? :-)</p>
<div class="post">[<i>You made me stop my vacation so I could go back and check: Yup, I wrote &quot;tend to&quot;. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004013">
				<div id="div-comment-1004013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004013">
			August 8, 2012 at 8:30 am</a>		</div>

		<p>Why are you even checking blog comments on your vacation? Go enjoy a recital.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004023">
				<div id="div-comment-1004023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004023">
			August 8, 2012 at 8:55 am</a>		</div>

		<p>Can we be clear that &quot;debuggers&quot; doesn&#39;t just include traditional &quot;disassembling&quot; debuggers like WinDbg and OllyDbg. It also includes tools like SysInternal&#39;s VmMap, invasive heap viewers and so on.</p>
<p>These functions are also only as &quot;evil&quot; as detouring functions &#8211; another technique often used by malware but also used by Microsoft to perform app-compat of doddery old programs.</p>
<p>And also, not only are these functions useful for malware &#8211; they&#39;re also useful for beating malware. If you want to scan another process to see what modules it has loaded in its process (to see if it loaded malware.dll), you&#39;re probably going to have to use ReadProcessMemory or install a kernel mode driver to do so. (EnumProcessModules is a nice wrapper for ReadProcessMemory in this specific example).</p>
<p>These functions are integrity-level protected and require VM_READ/VM_WRITE permission to execute. If you&#39;re allowed to call CreateRemoteThread or VirtualAllocEx or Read/WriteProcessMemory on a foreign process, that foreign process is part of your current &quot;owned&quot; set of programs. Malware only uses these functions once it&#39;s already owned your system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004043">
				<div id="div-comment-1004043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004043">
			August 8, 2012 at 9:04 am</a>		</div>

		<p>The cases you state in the 2nd paragraph seem straight forward enough:</p>
<p>Using ReadÂ­ProcessÂ­Memory doesn&#39;t affect the debugee, the patched int 3 is undone by the debugger and the changed memory by WriteÂ­ProcessÂ­Memory was a result of the user wanting to do exactly that.</p>
<p>But the other scenario seems more complex. Creating a remote thread to call DebugBreak? Doesn&#39;t that change the underlying process in non-obvious manners, such that the application might behave differently under a debugger?! I would have guessed the debugger would just suspend all of the process&#39;s threads, like process explorer does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004053">
				<div id="div-comment-1004053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004053">
			August 8, 2012 at 9:12 am</a>		</div>

		<p>Oh and another class of program that use it: Crash dump programs like watson.exe use ReadProcessMemory to take a mini dump.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004063">
				<div id="div-comment-1004063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004063">
			August 8, 2012 at 9:56 am</a>		</div>

		<p>Matt has hit upon the reason that even your grandmother&#39;s PC has reason to be running these potentially nefarious APIs. Since even Windows Error Reporting needs to use them, you can&#39;t just restrict their use by people who aren&#39;t developers, for example.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004073">
				<div id="div-comment-1004073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004073">
			August 8, 2012 at 10:15 am</a>		</div>

		<p>@Gabe: Watson.exe is a rather different case from MySuperAwesomeDebugger.exe&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004083">
				<div id="div-comment-1004083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004083">
			August 8, 2012 at 11:00 am</a>		</div>

		<p>@Chris B: I&#39;d be surprised that these functions cause any exploits. The thing is, whoever is doing it, has to have quite a bit of privileges first. That is the root problem, the rest is mechanics.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jader3rd even thread-even depth-1" id="comment-1004093">
				<div id="div-comment-1004093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jader3rd' rel='external nofollow' class='url'>jader3rd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004093">
			August 8, 2012 at 11:27 am</a>		</div>

		<p>While I certainly wouldn&#39;t want a UAC prompt every time I spun up a debugger I could see there being something beneficial with having to register debuggers. At install time, prompt that this debugging executable is being added to the special list of programs that are allowed to use nefarious api&#39;s. Sure, it&#39;ll be annoying for debugger devs, but it seems like an overall positive action that would help the Windows ecosystem overall.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004103">
				<div id="div-comment-1004103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004103">
			August 8, 2012 at 12:07 pm</a>		</div>

		<p>The concept that &quot;only program X can use API Y&quot; does not currently exist in Windows, and adding a new security mechanism is not something to undertake lightly.</p>
<p>How is &quot;program X&quot; to be securely identified? What happens when program X is updated? Does this preclude using these APIs from DLLs?</p>
<p>I&#39;m pretty sure that Raymond has written prior articles on the folly of security-by-restricting-my-callers&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004123">
				<div id="div-comment-1004123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Remus Rusanu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004123">
			August 8, 2012 at 1:18 pm</a>		</div>

		<p>LSA also uses read/write into process memory as a means to bypass large block transfers over LPC</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004133">
				<div id="div-comment-1004133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/andreas.reiff_4000_hotmail.de/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>andreas.reiff@hotmail.de</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004133">
			August 8, 2012 at 2:09 pm</a>		</div>

		<p>I used a few of those functions in an automation scenario, where UIAutomation was not enough and I had to rely on SendMessage and other WinSDK functions that &#8211; as I found out &#8211; only work on memory from within the process for non-marshalled data. (Which makes a lot of sense. Afterwards.)</p>
<p>Still, I thought about some fun applications, like enabling buttons that are disabled, changing text and the like.. so going back to the original post, yes, you can do some things with it that probably no one thought of.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004143">
				<div id="div-comment-1004143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004143">
			August 8, 2012 at 2:19 pm</a>		</div>

		<p>I&#39;ve used such functions in cases where you have two processes that communicate and need to do it quickly. &nbsp;It&#39;s not just debuggers that they&#39;re useful for.</p>
<p>I would have qualified CreateRemoteThread: when Win7 added extended parameters for creating threads, only one API was added, CreateRemoteThreadEx. &nbsp;If you want to use these settings, you have to use CreateRemoteThreadEx, even when you are creating the thread in your current process.</p>
<p>It&#39;s kind of sad that Apple went the path of requiring administrator privileges to call the equivalent of OpenProcess (task_for_pid) even on processes of the same privilege level.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004183">
				<div id="div-comment-1004183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SpecLad</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004183">
			August 8, 2012 at 3:52 pm</a>		</div>

		<p>I remember when Winamp had an API where you sent it a window message and got back an address for an object in Winamp&#39;s address space, so you had to use ReadProcessMemory to get it. IIRC, the documentation outright told you to do that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004113">
				<div id="div-comment-1004113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004113">
			August 8, 2012 at 12:21 pm</a>		</div>

		<p>Why should a user need admin privileges to debug their own process? &nbsp;Some comments from Raymond about airtight hatchways are in order, although I can&#39;t recall how he puts it. &nbsp;Debugging might make the steps for doing something &quot;malicious&quot; slightly easier, but an attack is probably still possible somehow. &nbsp;Start by considering, for example, that you can SendMessage to another process&#39;s message pump &#8211; and you can probably make the process crash or do other bad things by doing this. &nbsp;Maybe even (*gasp*) arbitrary code execution. &nbsp;I think this is by design, because the processes on a user&#39;s desktop are not isolated from each other from a security perspective. &nbsp;If this is a problem, start reading up on UIPI. &nbsp;I don&#39;t know much about UIPI, but I would imagine there are restrictions in place to prevent lower processes from debugging higher ones.</p>
<p>Consider that you need to elevate to admin in order to debug services, another user&#39;s stuff, or your own elevated programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004203">
				<div id="div-comment-1004203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004203">
			August 9, 2012 at 2:45 am</a>		</div>

		<p>I once used these to fix a compatability issue. Since I could always get in early enough, I used something that I wrote myself to patch the IAT of an application. This was to replace a broken function with a fixed one in an application that would never get updated.</p>
<p>Other than that, I&#39;ve used it a couple of times for nefarious purposes and once to do something but later found a better way of doing it. The nefarious things were just me playing around though, mainly along the lines of &quot;let&#39;s see if I can do this&quot;. Nothing big ever came out of it though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004283">
				<div id="div-comment-1004283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004283">
			August 9, 2012 at 10:46 am</a>		</div>

		<blockquote><p>
  &gt; The concept that &quot;only program X can use API Y&quot; does not currently exist in Windows
</p></blockquote>
<p>It used to &#8211; for .NET applications &#8211; with CAS (Code Access Security). &nbsp;CAS has been replaced/simplified by a sandboxing model: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/magazine/ee677170.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ee677170.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004333">
				<div id="div-comment-1004333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random User 9237462</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004333">
			August 9, 2012 at 1:49 pm</a>		</div>

		<p>[Cody: It used to &#8211; for .NET applications &#8211; with CAS (Code Access Security).]</p>
<p>And, if my experience is at all representative, it went away precisely because most developers effectively ignored it. I can&#39;t count the number of times I&#39;ve seen instruction for adding FullTrust using CasPol in a FAQ or KB article.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1004643">
				<div id="div-comment-1004643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004643">
			August 11, 2012 at 6:27 am</a>		</div>

		<p>As already mentioned, you can only send window messages to another process with pointer parameters if you allocate/read/write their address space. I&#39;m surprised that this most obvious usage is not the first one to come into people&#39;s mind when hearing about these functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1004793">
				<div id="div-comment-1004793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dashesy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913#comment-1004793">
			August 13, 2012 at 11:41 am</a>		</div>

		<p>I am an avid fan of &quot;Win7 Taskbar Tweaker&quot; that fixes some of the design problems with Win7 taskbar, using those dll injections I suppose. Only because of this application I can use my PC nowadays.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

