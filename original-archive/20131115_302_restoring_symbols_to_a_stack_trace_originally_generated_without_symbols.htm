<html>
<head>
<title>Restoring symbols to a stack trace originally generated without symbols</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Restoring symbols to a stack trace originally generated without symbols</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 15, 2013 / year-entry #303</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131115-00/?p=2653</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Has this ever happened to you? litware!Ordinal3+0x6042 litware!DllInstall+0x4c90 litware!DllInstall+0x4b9e contoso!DllGetClassObject+0x93c3 contoso!DllGetClassObject+0x97a9 contoso!DllGetClassObject+0x967c contoso!DllGetClassObject+0x94d7 contoso!DllGetClassObject+0x25ce contoso!DllGetClassObject+0x2f7b contoso!DllGetClassObject+0xad55 contoso!DllGetClassObject+0xaec7 contoso!DllGetClassObject+0xadf7 contoso!DllGetClassObject+0x3c00 contoso!DllGetClassObject+0x3b2a contoso!DllGetClassObject+0x462b USER32!UserCallWinProcCheckWow+0x13a USER32!DispatchMessageWorker+0x1a7 contoso!DllCanUnloadNow+0x19b6 contoso!DllGetClassObject+0xeaf2 contoso+0x1d6c litware!LitImportReportProfile+0x11c4 litware!LitImportReportProfile+0x1897 litware!LitImportReportProfile+0x1a3b KERNEL32!BaseThreadInitThunk+0x18 ntdll!RtlUserThreadStart+0x1d Ugh. A stack trace taken without working symbols. (There's no way that Dll­Get­Class­Object is a deeply recursive 60KB function. Just by casual inspection, you...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="https://www.youtube.com/watch?v=08xQLGWTSag">
Has this ever happened to you</a>?
</p>
<pre>
litware!Ordinal3+0x6042
litware!DllInstall+0x4c90
litware!DllInstall+0x4b9e
contoso!DllGetClassObject+0x93c3
contoso!DllGetClassObject+0x97a9
contoso!DllGetClassObject+0x967c
contoso!DllGetClassObject+0x94d7
contoso!DllGetClassObject+0x25ce
contoso!DllGetClassObject+0x2f7b
contoso!DllGetClassObject+0xad55
contoso!DllGetClassObject+0xaec7
contoso!DllGetClassObject+0xadf7
contoso!DllGetClassObject+0x3c00
contoso!DllGetClassObject+0x3b2a
contoso!DllGetClassObject+0x462b
USER32!UserCallWinProcCheckWow+0x13a
USER32!DispatchMessageWorker+0x1a7
contoso!DllCanUnloadNow+0x19b6
contoso!DllGetClassObject+0xeaf2
contoso+0x1d6c
litware!LitImportReportProfile+0x11c4
litware!LitImportReportProfile+0x1897
litware!LitImportReportProfile+0x1a3b
KERNEL32!BaseThreadInitThunk+0x18
ntdll!RtlUserThreadStart+0x1d
</pre>
<p>
Ugh.
A stack trace taken without working symbols.
(There's no way that
<code>Dll&shy;Get&shy;Class&shy;Object</code>
is a deeply recursive 60KB function.
Just by casual inspection, you know that the symbols are wrong.)
</p>
<p>
To see how to fix this, you just have to understand what the
debugger does when it has no symbols to work from:
It uses the symbols from the exported function table.
For every address it wants to resolve,
it looks for the nearest exported function whose address is
<a HREF="https://www.youtube.com/watch?v=1ytCEuuW2_A">
less than or equal to</a> the target value.
</p>
<p>
For example, suppose <code>CONTOSO.DLL</code>
has the following exported symbols:
</p>
<table BORDER=0>
<tr>
<th>Symbol</th>
<th>Offset</th>
</tr>
<tr>
<td><code>Dll&shy;Get&shy;Class&shy;Object</code></td>
<td ALIGN=right><code>0x5132</code></td>
</tr>
<tr>
<td><code>Dll&shy;Can&shy;Unload&shy;Now</code></td>
<td ALIGN=right><code>0xFB0B</code></td>
</tr>
</table>
<p>
Look at it this way:
The debugger is given the following information about your module:
(Diagram not to scale.)
</p>
<table BORDER=0 STYLE="border-collapse: collapse" TITLE="An empty horizontal box with the label DllGetClassObject at approximately 20% and the label DllCanUnloadNow at approximately 60%.">
<tr>
<td COLSPAN=5 STYLE="border: solid black .75pt; xborder-right: none">&nbsp;</td>
</tr>
<tr>
<td STYLE="width: 2em">&nbsp;</td>
<td STYLE="width: 1em; position: relative; left: -.5em" ALIGN=center>&uarr;</td>
<td STYLE="padding-right: 4em; position: relative; left: -.5ex">Dll&shy;Get&shy;Class&shy;Object</td>
<td STYLE="width: 1em; position: relative; left: -.5em" ALIGN=center>&uarr;</td>
<td STYLE="padding-right: 8em; position: relative; left: -.5ex">Dll&shy;Can&shy;Unload&shy;Now</td>
</tr>
</table>
<p>
It needs to assign a function to every byte in the module.
In the absence of any better information, it does it like this:
</p>
<table BORDER=0 STYLE="border-collapse: collapse" TITLE="A horizontal box in three parts. From 0% to 20% is labeled with question marks. From 20% to 60% is labeled DllGetClassObject. From 60% to 100% is labeled DllCanUnloadNow.">
<tr>
<td STYLE="border: solid black .75pt; width: 2em; background-color: #FFC0C0" ALIGN=center>???</td>
<td STYLE="border: solid black .75pt; padding-right: 5em; background-color: #C0FFFF" ALIGN=right ALIGN=center>Dll&shy;Get&shy;Class&shy;Object</td>
<td STYLE="border: solid black .75pt; padding-right: 9em; background-color: #FFC0FF">Dll&shy;Can&shy;Unload&shy;Now</td>
</tr>
</table>
<p>
In words, it assumes that every function begins at the location specified
by the export table,
and it ends one byte before the start of the next function.
The debugger is trying to make the best of a bad situation.
</p>
<p>
Suppose your DLL was loaded at
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/12/27/10380848.aspx">
<code>0x10000000</code></a>,
and the debugger needs to generate a symbolic name for the address
<code>0x1000E4F5</code>.
</p>
<p>
First, it converts the address into a relative virtual address
by subtracting the DLL base address,
leaving <code>0xE4F5</code>.
</p>
<p>
Next, it looks to see what function "contains" that address.
From the algorithm described above,
the debugger concludes that the address <code>0xE4F5</code> is
"part of" the
<code>Dll&shy;Get&shy;Class&shy;Object</code> function,
which began at
begins at <code>0x5132</code>.
The offset into the function is therefore
<code>0xE4F5 - 0x5132 = 0x93C3</code>,
and it is reported in the debugger as
<code>contoso!<wbr>Dll&shy;Get&shy;Class&shy;Object+<wbr>0x93c3</code>.
</p>
<p>
Repeat this exercise for each address that the debugger needs to resolve,
and you get the stack trace above.
</p>
<p>
Fine, now that you know how the bad symbols were generated,
how do you fix it?
</p>
<p>
You fix it by undoing what the debugger did, and then redoing it
with better symbols.
</p>
<p>
You need to find the better symbols.
This is not too difficult if you still have a matching binary
and symbol file,
because you can just load up the binary into the debugger
<a HREF="http://blogs.msdn.com/b/doronh/archive/2006/03/20/556053.aspx">
in the style of a dump file</a>.
Like Doron, you can then let the debugger do the hard work.
</p>
<pre>
C:&gt; ntsd -z contoso.dll

ModLoad: 10000000 10030000   contoso.dll
</pre>
<p>
Now you just ask the debugger,
"Could you disassemble this function for me?"
You give it the broken symbol+offset above.
The debugger looks up the symbol,
applies the offset,
and then <i>looks up the correct symbol</i> when disassembling.
</p>
<pre>
0:000&gt; u contoso!DllGetClassObject+0x93c3
<font COLOR=red>contoso!CReportViewer::ActivateReport+0xe9</font>:
10000e4f5 eb05            jmp     contoso!CReportViewer::ActivateReport+0xf0
</pre>
<p>
Repeat for each broken symbol in the stack trace,
and you have yourself a repaired stack trace.
</p>
<pre>
litware!Ordinal3+0x6042 <font COLOR=red>&larr; oops</font>
litware!CViewFrame::SetInitialKeyboardFocus+0x58
litware!CViewFrame::ActivateViewInFrame+0xf2
contoso!CReportViewer::ActivateReport+0xe9
contoso!CReportViewer::LoadReport+0x12c
contoso!CReportViewer::OnConnectionCreated+0x13f
contoso!CViewer::OnConnectionEvent+0x7f
contoso!CConnectionManager::OnConnectionCreated+0x85
contoso!CReportFactory::BeginCreateConnection+0x87
contoso!CReportViewer::CreateConnectionForReport+0x20d
contoso!CViewer::CreateNewConnection+0x87
contoso!CReportViewer::CreateNewReport+0x213
contoso!CViewer::OnChangeView+0xec
contoso!CReportViewer::WndProc+0x9a7
contoso!CView::s_WndProc+0xf1
USER32!UserCallWinProcCheckWow+0x13a
USER32!DispatchMessageWorker+0x1a7
contoso!CViewer::MessageLoop+0x24e
contoso!CViewReportTask::RunViewer+0x12
contoso+0x1d6c <font COLOR=red>&larr; oops</font>
litware!CThreadTask::Run+0x40
litware!CThread::ThreadProc+0xe5
litware!CThread::s_ThreadProc+0x42
KERNEL32!BaseThreadInitThunk+0x18
ntdll!RtlUserThreadStart+0x1d
</pre>
<p>
Oops, our trick doesn't work for that first entry in the stack trace,
the one with <code>Ordinal3</code>.
What's up with that?
There is no function called <code>Ordinal3</code>!
</p>
<p>
If your module exports functions by ordinal without a name,
then the debugger doesn't know what name to print for the function
(since the name was stripped from the module),
so it just prints the ordinal number.
You will have to go back to your DLL's <code>DEF</code> file
to convert the ordinal back to a function name.
Or you can
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/05/13/10164020.aspx">
dump the exports from the DLL
to see what functions match up with what ordinals</a>.
(Of course, for that trick to work, you need to have a matching PDB file
in the symbol search path.)
</p>
<p>
In our example, suppose <code>litware.dll</code> ordinal&nbsp;3
corresponds to the function
<code>Lit&shy;Debug&shy;Report&shy;Profile</code>.
We would then ask the debugger
</p>
<pre>
0:001&gt; u litware!LitDebugReportProfile+0x6042
<font COLOR=red>litware!CViewFrame::FindInitialFocusControl+0x66</font>:
1000084f5 33db            xor     ebx,ebx
</pre>
<p>
Okay, that takes care of our first oops.
What about the second one?
</p>
<p>
In the second case, the address the debugger was asked to
generate a symbol for came before the first symbol in the module.
In our diagram above, it was in the area marked with question marks.
The debugger has absolutely nothing to work with, so it just
disassembles as relative to the start of the module.
</p>
<p>
To resolve this symbol, you take the offset and add it to the
base of the module as it was loaded into the debugger,
which was reported in the <code>ModLoad</code> output:
</p>
<pre>
ModLoad: <font COLOR=red>10000000</font> 10030000   contoso.dll
</pre>
<p>
If that output scrolled off the screen, you can ask the debugger
to show it again with the help of the <code>lmm</code> command.
</p>
<pre>
0:001&gt;lmm contoso*
start    end        module name
10000000 10030000   contoso    (export symbols)       contoso.dll
</pre>
<p>
Once you have the base address, you
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2007/04/25/2265923.aspx">
add the offset back</a>
and ask the debugger what's there:
</p>
<pre>
0:001&gt; u 0x10000000+0x1d6c
<font COLOR=red>contoso!CViewReportTask::Run+0x102</font>:
100001d6c 50              push    eax
</pre>
<p>
Okay, now that we patched up all our oopses,
we have the full stack trace with symbols:
</p>
<pre>
litware!CViewFrame::FindInitialFocusControl+0x66
litware!CViewFrame::SetInitialKeyboardFocus+0x58
litware!CViewFrame::ActivateViewInFrame+0xf2
contoso!CReportViewer::ActivateReport+0xe9
contoso!CReportViewer::LoadReport+0x12c
contoso!CReportViewer::OnConnectionCreated+0x13f
contoso!CViewer::OnConnectionEvent+0x7f
contoso!CConnectionManager::OnConnectionCreated+0x85
contoso!CReportFactory::BeginCreateConnection+0x87
contoso!CReportViewer::CreateConnectionForReport+0x20d
contoso!CViewer::CreateNewConnection+0x87
contoso!CReportViewer::CreateNewReport+0x213
contoso!CViewer::OnChangeView+0xec
contoso!CReportViewer::WndProc+0x9a7
contoso!CView::s_WndProc+0xf1
USER32!UserCallWinProcCheckWow+0x13a
USER32!DispatchMessageWorker+0x1a7
contoso!CViewer::MessageLoop+0x24e
contoso!CViewReportTask::RunViewer+0x12
contoso!CViewReportTask::Run+0x102
litware!CThreadTask::Run+0x40
litware!CThread::ThreadProc+0xe5
litware!CThread::s_ThreadProc+0x42
KERNEL32!BaseThreadInitThunk+0x18
ntdll!RtlUserThreadStart+0x1d
</pre>
<p>
Now the fun actually starts:
Figuring out why there was a break in
<code>CView&shy;Frame::<wbr>Find&shy;Initial&shy;Focus&shy;Control</code>.
Happy debugging!
</p>
<p>
<b>Bonus tip</b>:
By default,
<code>ntsd</code> does not include line numbers when resolving symbols.
Type <code>.lines</code> to toggle line number support.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1089013">
				<div id="div-comment-1089013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131115-00/?p=2653#comment-1089013">
			November 15, 2013 at 7:47 am</a>		</div>

		<p>Instead of &#39;u&#39;</p>
<p>&nbsp; 0:000&gt; u contoso!DllGetClassObject+0x93c3</p>
<p>I&#39;d use &#39;ln&#39;</p>
<p>&nbsp; 0:000&gt; ln contoso!DllGetClassObject+0x93c3</p>
<p>There&#39;s less output to deal with.</p>
<div class="post">[<em>I usually append &quot;L1&quot; to limit to one line of disassembly, so the output is not huge. Also, &quot;LN&quot; puts the information after the address, which makes it harder to spot at a glance, and it increases the likelihood that there will be a line break in the middle of the symbol, making it harder to read and copy/paste. But that&#39;s just my preference. Your preference is also valid. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1089033">
				<div id="div-comment-1089033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131115-00/?p=2653#comment-1089033">
			November 15, 2013 at 8:21 am</a>		</div>

		<p>&quot;began at begins at&quot;</p>
<p>&quot;lm m contoso*&quot; also works; there isn&#39;t an &quot;lmm&quot; command per se, rather an &quot;m &lt;pattern&gt;&quot; option to the &quot;lm&quot; command.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1089063">
				<div id="div-comment-1089063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131115-00/?p=2653#comment-1089063">
			November 16, 2013 at 2:44 am</a>		</div>

		<p>I wondered what was going on at first but then it dawned on me that you were in fact trying to help someone who had only provided a stack trace formatted without symbols.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-odd thread-alt depth-1" id="comment-1089083">
				<div id="div-comment-1089083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131115-00/?p=2653#comment-1089083">
			November 16, 2013 at 5:29 am</a>		</div>

		<p>Hi. Won&#39;t ASLR make this whole thing impossible?</p>
<div class="post">[<em>The debugger knows where Contoso.DLL was loaded. That&#39;s how it got the half-hearted symbols in the first place. (If you didn&#39;t let debuggers know where DLLs got loaded, it&#39;s going to be hard for the debugger to accomplish much of anything.) There is no requirement that Contoso.DLL be loaded at its preferred base address. (Indeed, it wasn&#39;t.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1089093">
				<div id="div-comment-1089093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anyfoo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131115-00/?p=2653#comment-1089093">
			November 16, 2013 at 6:58 am</a>		</div>

		<p>@Fleet Command: when debugging you usually know what exists at which virtual address, even if that virtual address is random. With that knowledge you can translate the addresses into offsets into the DLL/executable/whatever you are interested in.</p>
<p>Not a security problem, because, as Raymond would put it, to get that information you have to already be on the other side of the airtight hatch. Unless there are bugs or oversights which permit you to get the mapping without proper privileges.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1089103">
				<div id="div-comment-1089103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131115-00/?p=2653#comment-1089103">
			November 16, 2013 at 4:19 pm</a>		</div>

		<p>Why would you even care where a DLL got loaded? If the addresses were all absolute, you&#39;d definitely have to know. But the addresses are all offsets relative to the DLL base address (contoso+0x1d6c), so the base address isn&#39;t used anywhere in the computation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1089123">
				<div id="div-comment-1089123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131115-00/?p=2653#comment-1089123">
			November 17, 2013 at 9:02 am</a>		</div>

		<p>Why can&#39;t debuggers do this work year 2013?</p>
<div class="post">[<em>Debuggers have been fully capable of doing this for decades if they have access to symbols. The issue is &quot;What if the debugger doesn&#39;t have access to symbols?&quot; Or are you asking, &quot;Why can&#39;t debuggers be smart enough to find symbols anywhere in the universe?&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1089133">
				<div id="div-comment-1089133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anyfoo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131115-00/?p=2653#comment-1089133">
			November 17, 2013 at 9:18 am</a>		</div>

		<p>@Gabe: well, the debugger has to know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1090063">
				<div id="div-comment-1090063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Escaper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131115-00/?p=2653#comment-1090063">
			November 19, 2013 at 2:07 pm</a>		</div>

		<p>&quot;It uses the symbols from the exported function table. For every address it wants to resolve, it looks for the nearest exported function whose address is less than or equal to the target value.&quot;</p>
<p>This sounds like a good example of a situation where it is better not to do anything than do something. Because using the above described algorithm is plainly misleading as it provides user with wrong function names. I see no value in that compared to just seeing offsets for unrecognized functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1090713">
				<div id="div-comment-1090713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131115-00/?p=2653#comment-1090713">
			November 21, 2013 at 12:05 pm</a>		</div>

		<p>@Escaper: How would you suggest the debugger know that the exported symbols + offset are wrong? What if the exception occurred in an exported function and the entire call chain was only exported functions? Wouldn&#39;t you then complain that the debugger didn&#39;t give you a correct stack trace?</p>
<p>Or would you prefer that the debugger try to reverse engineer the DLL looking for jmp and ret instructions and somehow piece together function boundaries? What if that process doesn&#39;t work all the time?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

