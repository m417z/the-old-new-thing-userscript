<html>
<head>
<title>Posted messages are processed ahead of input messages, even if they were posted later</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Posted messages are processed ahead of input messages, even if they were posted later</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 31, 2013 / year-entry #148</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130531-00/?p=4203</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Regardless of which interpretation you use, it remains the case that posted messages are processed ahead of input messages. Under the MSDN interpretation, posted messages and input messages all go into the message queue, but posted messages are pulled from the queue before input messages. Under the Raymond interpretation, posted messages and input messages are...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Regardless of 
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/05/30/10422199.aspx">
which interpretation you use</a>,
it remains the case that posted messages
are processed ahead of input messages.
Under the MSDN interpretation,
posted messages and input messages all go into the <i>message queue</i>,
but
<a HREF="http://msdn.microsoft.com/library/ms644936">
posted messages are pulled from the queue before input messages</a>.
Under the Raymond interpretation,
posted messages and input messages are kept in separate queues,
and the message retrieval functions will look first in the posted
message queue before looking in the input queue.
</p>
<p>
Let's run an experiment to see posted messages get processed
ahead of input messages.
Start with the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/04/22/410773.aspx">
new scratch program</a>
and make these changes:
</p>
<pre>
<font COLOR=blue>#include &lt;strsafe.h&gt;</font>

class RootWindow : public Window
{
public:
 virtual LPCTSTR ClassName() { return TEXT("Scratch"); }
 static RootWindow *Create();

 <font COLOR=blue>void AppendText(LPCTSTR psz)
 {
    ListBox_SetCurSel(m_hwndChild,
                      ListBox_AddString(m_hwndChild, psz));
 }

 void AppendFormat(LPCTSTR pszFormat, ...)
 {
  va_list ap;
  va_start(ap, pszFormat);
  TCHAR szMsg[256];
  StringCchVPrintf(szMsg, ARRAYSIZE(szMsg), pszFormat, ap);
  AppendText(szMsg);
  va_end(ap);
 }

 void LogMessage(const MSG *pmsg)
 {
   AppendFormat(TEXT("%d\t%04x\t%p\t%p"),
                pmsg-&gt;time,
                pmsg-&gt;message,
                pmsg-&gt;wParam,
                pmsg-&gt;lParam);
 }</font>

 ...
};

LRESULT RootWindow::OnCreate()
{
 <font COLOR=blue>m_hwndChild = CreateWindow(
      TEXT("listbox"), NULL,
      LBS_HASSTRINGS | LBS_USETABSTOPS |
      WS_CHILD | WS_VISIBLE | WS_TABSTOP | WS_VSCROLL,
      0, 0, 0,0, GetHWND(), (HMENU)1, g_hinst, 0);</font></font>
 return 0;
}

int WINAPI WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
                   LPSTR lpCmdLine, int nShowCmd)
{
   ...
   while (GetMessage(&amp;msg, NULL, 0, 0)) {

    <font COLOR=blue>switch (msg.message) {
    case WM_KEYDOWN:
     prw-&gt;AppendText(TEXT("Sleeping"));
     UpdateWindow(prw-&gt;GetHWND());
     Sleep(1000);
     prw-&gt;AppendText(TEXT("Posting"));
     PostMessage(prw-&gt;GetHWND(), WM_USER, 0, 0);
     break;
    case WM_KEYUP:
    case WM_USER:
     prw-&gt;LogMessage(&amp;msg);
     break;
    }</font>

    TranslateMessage(&amp;msg);
    DispatchMessage(&amp;msg);
   ...
}
</pre>
<p>
This program creates a list box so we can display some output.
In the message loop, it sniffs at all the queued messages and
does the following:
</p>
<ul>
<li>If the message is <code>WM_<wbr>KEY&shy;UP</code> or
    <code>WM_<wbr>USER</code>, then it logs the message timestamp
    and some parameters.</p>
<li>If the message is <code>WM_<wbr>KEY&shy;DOWN</code>,
    then it sleeps without processing messages for one second,
    and then posts a <code>WM_<wbr>USER</code> message
    to the main window (which ignores it).
</ul>
<p>
Run this program, and then tap the shift key.
</p>
<p>
The window gets a <code>WM_<wbr>KEY&shy;DOWN</code>
for the shift key.
It sleeps for one second (plenty of time for you to release
the shift key),
and then posts a <code>WM_<wbr>USER</code> message.
</p>
<p>
The <code>WM_<wbr>USER</code> and <code>WM_<wbr>KEY&shy;UP</code>
messages arrive, and observe via the log window
that they arrive <i>out of order</i>.
<code>WM_<wbr>USER</code> message arrived first!
</p>
<p>
That's because of the rule that says that
posted messages are processed ahead of input messages.
(Depending on how you want to look at it, you might say
that posted messages are "called out for preferential treatment"
in the queue,
or you might say that posted messages are placed in a different
queue from input messages, and the posted message queue has
higher priority.)
</p>
<p>
Observe also that the timestamp on the <code>WM_<wbr>USER</code>
message is <i>greater than</i> the timestamp on the
<code>WM_<wbr>KEY&shy;UP</code> message,
because the key went up before the <code>WM_<wbr>USER</code>
message was posted.
<i>Time has gone backward</i>.
</p>
<p>
Make the following change to our program:
Change the message we post from
<code>WM_<wbr>USER</code> to
<code>WM_<wbr>KEY&shy;UP</code>:
</p>
<pre>
      PostMessage(hwnd, <font COLOR=blue>WM_KEYUP</font>, 0, 0);
</pre>
<p>
Run the program again, and again tap the shift key.
Observe that the posted <code>WM_<wbr>KEY&shy;UP</code> message
is processed ahead of the <code>WM_<wbr>KEY&shy;UP</code> input message.
(You can see the difference because we posted the
<code>WM_<wbr>KEY&shy;UP</code> message with <code>wParam</code>
and <code>lParam</code> both zero,
whereas the
<code>WM_<wbr>KEY&shy;UP</code> input message has information in
those parameters.)
</p>
<p>
This little demonstration also reinforces some other things we already knew.
For example, it once again shows that the input manager
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/05/24/10421022.aspx">
does not wiretap your posted messages</a>.
If you post a
<code>WM_<wbr>KEY&shy;UP</code> message,
it is treated like a posted message not an input message.
We saw earlier that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/05/30/423202.aspx">
posting a keyboard message does not update internal input states</a>.
The keyboard shift states are not updated to match your prank call message.
If somebody calls <code>Get&shy;Queue&shy;Status</code>,
they will not be told that there is input waiting.
It will not wake a
<code>Msg&shy;Wait&shy;For&shy;Multiple&shy;Objects</code> function
that is waiting for <code>QS_<wbr>INPUT</code>.
And as we saw here today,
the message gets processed out of order.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-joshuaganes even thread-even depth-1" id="comment-1059193">
				<div id="div-comment-1059193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130531-00/?p=4203#comment-1059193">
			May 31, 2013 at 9:16 am</a>		</div>

		<p>I like your dual-queue explanation better than the MSDN pseudo-priority-queue explanation. I find it simpler to conceptualize and I find that it is more intuitive when it comes to posted messages disguised as input messages. Otherwise I would think that the false input messages might follow the same rules as true input messages.</p>
<p><!-- p>Typo: processed ahead of input msesages
</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1059213">
				<div id="div-comment-1059213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130531-00/?p=4203#comment-1059213">
			May 31, 2013 at 10:22 am</a>		</div>

		<p>&quot;Time has gone backward.&quot;</p>
<p>Either that or these are indications to Microsoft Research&#39;s time machine that Raymond hints is being developed. Where are the conspiracy theorists when you need them?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1059223">
				<div id="div-comment-1059223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">D-Coder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130531-00/?p=4203#comment-1059223">
			May 31, 2013 at 11:39 am</a>		</div>

		<p>&quot;Where are the conspiracy theorists when you need them?&quot;</p>
<p>Go to CNN.com and read the comments. &nbsp;At least an aleph-zero of them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1059233">
				<div id="div-comment-1059233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130531-00/?p=4203#comment-1059233">
			May 31, 2013 at 4:40 pm</a>		</div>

		<p>I found this piece of library code we obtained from a third party who does not deserve to be named who was doing SendMessage(&#8230;, WM_MOUSEDOWN, &#8230;) to a system control. I was able to slightly reduce the undocumented and unspecified behavior by following it with WM_MOUSEUP. It&#39;s still a bad idea I couldn&#39;t easily remove. (Trying to defer-create textbox until it is needed sounds like a good idea until you realize it can&#39;t get the WM_MOUSEDOWN that caused it to exist.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00034001a5381f07 even thread-even depth-1" id="comment-1059243">
				<div id="div-comment-1059243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Georg_Rottensteiner' rel='external nofollow' class='url'>Georg_Rottensteiner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130531-00/?p=4203#comment-1059243">
			May 31, 2013 at 10:56 pm</a>		</div>

		<p>This is missing the &quot;takeway&quot; or &quot;learnings&quot; :)</p>
<p>Do NOT post input messages, it will not do what you might think it does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1059253">
				<div id="div-comment-1059253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130531-00/?p=4203#comment-1059253">
			May 31, 2013 at 11:54 pm</a>		</div>

		<p>Out of curiosity: How is the message queue actually implemented: Preferential queue, or 2 separate queues? My money is on the latter.</p>
<p><!-- p>Typo: s/new/knew/
</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1059263">
				<div id="div-comment-1059263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alois Kraus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130531-00/?p=4203#comment-1059263">
			June 1, 2013 at 1:44 am</a>		</div>

		<p>You said that for simulating keyboard input we should use SendInput. You also said there are still many issues left with this solution. Is there any guidance available which documents the other issues with proposed workarounds? I am sure there are millions UI interaction tests running each day and thousands of them are failing sporadically. It is a very tedious undertaking to find issues others had as well. UI automation tests are still necessary even with all these nice isolated unit tests with mocked interfaces and behaviour testing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1059273">
				<div id="div-comment-1059273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130531-00/?p=4203#comment-1059273">
			June 1, 2013 at 3:37 am</a>		</div>

		<p>As I recall, old versions of the Flash plugin used to post itself messages all over the shop, which was really annoying because Netscape 7 wanted to process input messages by preference. They ended up peeking keyboard, ime and mouse messages in order to subvert the priority system: <a rel="nofollow" target="_new" href="http://mxr.mozilla.org/mozilla1.7/source/widget/src/windows/nsAppShell.cpp#123" rel="nofollow">mxr.mozilla.org/&#8230;/nsAppShell.cpp</a> although Firefox 23 (!) will revert to mostly the default message order (except apparently for certain mouse wheel messages).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1059313">
				<div id="div-comment-1059313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sirin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130531-00/?p=4203#comment-1059313">
			June 3, 2013 at 4:30 am</a>		</div>

		<p>Is there a way to post a low priority message with the same priority as an input message?</p>
<div class="post">[<em>All posted messages are treated like posted messages. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

