<html>
<head>
<title>Alternatives to using the #error directive to check whether the compiler even sees you</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Alternatives to using the #error directive to check whether the compiler even sees you</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 29, 2009 / year-entry #155</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In response to my description of how you can use the #error directive to check whether the compiler even sees you, some commenters proposed alternatives. I never claimed that my technique was the only one, just that it was another option available to you. Here are some other options. scott suggested merely typing asdasdasd into...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In response to my description of how you can
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/04/09/8370479.aspx">
use the <code>#error</code> directive to check
whether the compiler even sees you</a>,
some commenters proposed alternatives.
I never claimed that my technique was the only one,
just that it was another option available to you.
Here are some other options.
</p>
<p><a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/04/09/8370479.aspx#8372429">
scott suggested merely typing <code>asdasdasd</code> into the header file</a>
and seeing if you get an error.
This usually works, but it can be problematic if the code does not
already compile.
And <i>of course</i> it doesn't compile,
because the reason why you're doing this investigation in the first
place is that
<i>you can't get your code to compile and you're trying to figure out why</i>.
Consequently, it's not always clear whether any particular error
was due to your <code>asdasdasd</code>
or due to the fact that, well, your code doesn't compile.
For example after adding your <code>asdadsads</code> to line 41 of
file <code>problem.h</code>, you get the error
<code>Error: Semicolon expected at line 412 of file unrelated.h</code>.
Was that caused by your <code>asdasdad</code>?
Doesn't seem that way, but it actually was,
because the preprocessed output looked like this:
</p>
<pre>
asdasdasd
int GlobalVariable;
</pre>
<p>
After your <code>asdasdasd</code>, all that was generated were a bunch
of <code>#define</code>s, <code>#if</code>s, <code>#endif</code>s,
and <code>#include</code>s.
None of them generate output, so the compiler proper doesn't see anything;
the preprocessor ate it all.
Finally, at <code>unrelated.h</code> line 412, a header file finally
tried to do something other than just define a macro,
and it's only then that the error is detected.
</p>
<p>
But if you can pick the new error out of the error spew, then go for it.
(There are also obscure cases where an extra <code>asdasdasd</code>
doesn't introduce a new error.)
</p>
<p>
Since the string <code>#error</code> is shorter than <code>asdasdasd</code>,
and it works in more places, I just go with <code>#error</code>.
</p>
<p>
Another suggestion came from
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/04/09/8370479.aspx#8372768">
Miguel Duarte who
suggested generating the preprocessed file and studying it</a>.
That helps, but the preprocessor output tends to be huge, and,
as I noted in the base article,
<code>#define</code> directives don't show up, so it can be hard for you
to find your place.
I also noted in the base article that
if you use Visual Studio's
precompiled header files,
the contents of the preprocessed output may not match what the compiler sees.
In fact, that's the most common reason I've found for a line being ignored:
You put the <code>#include</code> directive in a place that the
preprocessor sees but which the compiler doesn't see
because you violated one of the
<a HREF="http://msdn2.microsoft.com/en-us/library/syth7b6s.aspx">
precompiled header consistency rules</a>,
usually the
<a HREF="http://msdn2.microsoft.com/en-us/library/21khx4ke.aspx">
source file consistency rule</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-740323">
				<div id="div-comment-740323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740323">
			May 29, 2009 at 10:17 am</a>		</div>

		<p>I suppose that, for very large projects at least, pre-compiled headers can be useful to reduce compile times. &nbsp;Most of my projects are not that large, however; and I have usually found that using the pre-compiled headers sometimes leads to subtle compile or even link errors that I spend far too much time trying to track down. &nbsp;Naturally, the solution is to &quot;Rebuild All&quot; whenever one of these problem arises, but that certainly seems to make using pre-compiled headers kind of pointless, doesn&#8217;t it?</p>
<p>Thanks for the link to the pre-compiled header consistency rules. &nbsp;I never knew about that stuff, and it goes some way to explaining how I introduced all those subtle compile and link errors into my own code. ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-740453">
				<div id="div-comment-740453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740453">
			May 29, 2009 at 2:35 pm</a>		</div>

		<p>This reminds me of the time I joined a project with 500+ source files. &nbsp;The OBJ directory had compile dates spread across 5 months. &nbsp;And when I asked the &quot;lead&quot; if I could do a clean compile, he asked &quot;why?&quot;. &nbsp; The only good thing about that response was it allowed me to assign the correct assessment level of his skills&#8230;.</p>
<p>#error is usually the best way of detecting compile errors, for at least as many reasons as Raymond pointed out. &nbsp;Probably the only reason not to is if you have a compiler that doesn&#8217;t support it&#8230; &nbsp;Or does that date me too well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-740473">
				<div id="div-comment-740473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisMcB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740473">
			May 29, 2009 at 5:40 pm</a>		</div>

		<p>@doug I&#8217;m curious what will happen if the compiler doesn&#8217;t support #error? Does it just ignore a preprocessor command it doesn&#8217;t understand?</p>
<p>And what answer did you give your lead? And what was your assessment of his skills?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-740483">
				<div id="div-comment-740483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisMcB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740483">
			May 29, 2009 at 5:40 pm</a>		</div>

		<p>@doug I&#8217;m curious what will happen if the compiler doesn&#8217;t support #error? Does it just ignore a preprocessor command it doesn&#8217;t understand?</p>
<p>And what answer did you give your lead? And what was your assessment of his skills?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-740523">
				<div id="div-comment-740523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.vacant-nebula.com' rel='external nofollow' class='url'>kip</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740523">
			May 29, 2009 at 10:23 pm</a>		</div>

		<p>You could always add:</p>
<p>asdasdasd++;</p>
<p>then the error will clearly say something along the lines of &quot;unrecognized symbol: asdasdasd&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-740543">
				<div id="div-comment-740543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740543">
			May 30, 2009 at 1:04 am</a>		</div>

		<p>I understand the reasoning behind precompiled headers, but it seems like the most frustrating problems I run into are precompiled headers.</p>
<p>The easiest are ones to which the compiler barfs and identifies a precompiled header as the cause, but I&#8217;ve had obscure build errors that I fixed by disabling precompiled headers.</p>
<p>Most annoying yet is when I get fresh source code, build it, and get a precompiled header error &#8211; it&#8217;s a frickin&#8217; clean build and the precompiled header is already out of date?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-740613">
				<div id="div-comment-740613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">#error asdasdasd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740613">
			May 30, 2009 at 2:18 pm</a>		</div>

		<p>@doug</p>
<p>So, let&#8217;s say it takes the rebuild like 10 hours and the old obj files are perfectly ok.</p>
<p>Why do a rebuild ? It&#8217;s not that older obj files rot or rust over time. Unless there is a compiler or build options change, there is no reason to rebuild all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-740563">
				<div id="div-comment-740563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740563">
			May 30, 2009 at 7:52 am</a>		</div>

		<p>&quot;the reason why you&#8217;re doing this investigation in the first place is that you can&#8217;t get your code to compile and you&#8217;re trying to figure out why&quot;</p>
<p>I&#8217;m not arguing against #error, but sometimes I go the &quot;asdasdasd&quot; route if the project is compiling but the changes I&#8217;m making don&#8217;t seem to have any effect and I want to prove that the file/part I&#8217;m editing is actually used.</p>
<p>(There are a few ways to fall into that situation but a simple one is using Find In Files to find some code which turns out to be in an &quot;old/unused code backup&quot; file that&#8217;s no longer in the project, with the real code elsewhere.)</p>
<p>#error definitely generates a clearer error message, and works in more situations, but it also takes slightly more thought*/effort to type than mashing the keyboard in frustration and hitting F7. :-D</p>
<p>Sometimes I write a little message to the compiler, like &quot;Hello!? Are you seeing this!??&quot; which takes much longer to write, and produces very spurious error messages, but has a pleasant venting effect on the programmer. :)</p>
<p>(*The main reason is habit, really. I didn&#8217;t learn about #error until after I was used to mashing, so I still instinctively mash.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-740623">
				<div id="div-comment-740623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740623">
			May 30, 2009 at 4:41 pm</a>		</div>

		<p>I&#8217;d have to agree with Raymond that #error is generally the easiest way. However, I&#8217;ve met situations where #error didn&#8217;t seem to help and I worked my way around the generated source, which was tedious but, mostly thanks to the preprocessor inserting #line directives and such so you don&#8217;t lose your way, doable. In both cases it turned out the #error was reached both in the good version and in the bad version, but in a different way. But most of the time it works, and it&#8217;s certainly the easiest so that makes it the first thing I try in such situations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-740633">
				<div id="div-comment-740633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ATZ Man</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740633">
			May 30, 2009 at 6:43 pm</a>		</div>

		<p>@error asdasdasd</p>
<p>There could be latent binary incompatiblities between the old OBJs and the ones that have recompiled.</p>
<p>A header:</p>
<p>struct old_school {</p>
<p>&nbsp;int field1;</p>
<p>&nbsp;int field2_was_short_previously;</p>
<p>&nbsp;int field3;</p>
<p>};</p>
<p>void useful(struct old_school*);</p>
<p>Source to five-month-old OBJ</p>
<p>void i_never_change()</p>
<p>{</p>
<p>&nbsp; struct old_school x;</p>
<p>&nbsp; x.field3 = 1;</p>
<p>&nbsp; useful(&amp;x);</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-740653">
				<div id="div-comment-740653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740653">
			May 31, 2009 at 9:31 am</a>		</div>

		<p>I know of one piece of software that does some hacks with #include</p>
<p>What it does in one file called lets say abc.c:</p>
<p>#ifndef x</p>
<p>#define x</p>
<p>#define abc(x) &lt;blah&gt;</p>
<p>#include &quot;abc.c&quot;</p>
<p>#undef abc</p>
<p>#define abc(x) &lt;blah 2&gt;</p>
<p>#include &quot;abc.c&quot;</p>
<p>#else</p>
<p>abc(&quot;123&quot;)</p>
<p>abc(&quot;456&quot;)</p>
<p>abc(&quot;789&quot;)</p>
<p>&#8230;</p>
<p>#endif</p>
<p>If there was ever a wierd hack, this is it&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-740673">
				<div id="div-comment-740673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740673">
			May 31, 2009 at 8:47 pm</a>		</div>

		<p>I have experienced many times on some of my projects (all of which are stock Visual C++ 2008 projects with no special build stuff set up) when I have a bug showing up which disappears when I do a &quot;rebuild all&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-740663">
				<div id="div-comment-740663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katie Lucas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740663">
			May 31, 2009 at 3:50 pm</a>		</div>

		<p>&quot;when I asked the &quot;lead&quot; if I could do a clean compile, he asked &quot;why?&quot;&#8230; it allowed me to assign the correct assessment level of his skills&#8230;.&quot;</p>
<p>You&#8217;d likely get me asking why as well; for two reasons; 1 &#8211; I believe my build system works properly. And hence 2 &#8211; If you think it doesn&#8217;t I&#8217;d like to know *why* you do, so I can find out if it&#8217;s a problem which needs fixing.</p>
<p>Clean builds are a solution to a symptom, not the actual underlying problem.</p>
<p>Please don&#8217;t turn &quot;why&quot; questions into that sort of nerd pissing contest that means problems don&#8217;t get solved.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-740833">
				<div id="div-comment-740833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740833">
			June 1, 2009 at 1:49 pm</a>		</div>

		<p>@Jonathan Wilson: then you have a regular, common-or-garden, dependency bug, which you should track down and fix.</p>
<p>I will always do a rebuild all for an actual handover-to-someone-else release, but for development, an incremental build is fine.</p>
<p>Virtually any Windows program (that uses windows.h) will benefit from precompiled headers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-740933">
				<div id="div-comment-740933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://analyze-v.com/' rel='external nofollow' class='url'>scott</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740933">
			June 1, 2009 at 5:14 pm</a>		</div>

		<p>Hey, I remember that comment&#8230;Over a year later and I just found myself doing it again yesterday, so I guess I haven&#8217;t changed my ways much.</p>
<p>I often do it to make sure that I have the correct define (#ifdef AMD64 was the one I was looking for yesterday) and that I&#8217;m compiling what I think I&#8217;m compiling. In the case where the code isn&#8217;t compiling at all though I&#8217;d agree that #error makes more sense, why confuse the mess even further.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis odd alt thread-odd thread-alt depth-1" id="comment-740943">
				<div id="div-comment-740943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-740943">
			June 1, 2009 at 5:18 pm</a>		</div>

		<p>I always use</p>
<p>#pragma message(&quot;SOME TEXT&quot;)</p>
<p>which has the side effect of not breaking the build, and turns up for every file in which it gets included.</p>
<p>One way I use it is if I have some code I&#8217;ve included temporarily &#8212; e.g., some OutputDebugString calls. &nbsp;I add some #pragma message stuff in all-caps so that I can see in the build output to remember to remove it when I&#8217;m done testing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-741023">
				<div id="div-comment-741023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christian Kaiser</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-741023">
			June 2, 2009 at 1:58 am</a>		</div>

		<p>There&#8217;s a small but nice compiler switch &quot;/showIncludes&quot;. Guess what it does.</p>
<p>This is useful if you don&#8217;t know from WHERE an include file was included, for example.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-741043">
				<div id="div-comment-741043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Harris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-741043">
			June 2, 2009 at 7:34 am</a>		</div>

		<p>@Mike Dimmick: one cause of dependency problems is Resource.h, which in VC++ is excluded from dependency tracking by default. If you remove a #define from it, code that relies on the #define will no longer compile, and will probably crash when run, but if you don&#8217;t rebuild all manually you may not notice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-741273">
				<div id="div-comment-741273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-741273">
			June 2, 2009 at 5:36 pm</a>		</div>

		<p>My reasons for having a clean build:</p>
<p>VC itself has some holes in the dependency check (e.g. #pragma comment lib, handling resource files). </p>
<p>Also, a clean build will turn up some dependency / build order bugs that can go unnoticed for a long time. </p>
<p>A clean build process is a de-facto documentation *how* to build your sources, in case that&#8217;s left is the source code repository.</p>
<p>It also makes Joel happy. </p>
<p>Still, incremental build should work in the general case &#8211; waiting for full rebuilds is no fun. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-741733">
				<div id="div-comment-741733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-741733">
			June 3, 2009 at 2:38 pm</a>		</div>

		<p>&quot;one cause of dependency problems is Resource.h, which in VC++ is excluded from dependency tracking by default.&quot;</p>
<p>For anyone who hasn&#8217;t run into this before, that is because of this line at the top:</p>
<p>//{{NO_DEPENDENCIES}}</p>
<p>which you can add to your own files to get the same behavior. &nbsp;There&#8217;s nothing magical about the name resource.h. &nbsp;(See TechNote TN035.)</p>
<p>I&#8217;ve done that for a similar header file full of function IDs that is automatically generated and then included everywhere. &nbsp;The existing IDs are stable, but new ones can be added.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-741813">
				<div id="div-comment-741813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ruoldnewthing/archive/2009/05/29/error.aspx' rel='external nofollow' class='url'>Блог Рэймонда Чена (перевод)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090529-00/?p=18103#comment-741813">
			June 3, 2009 at 5:38 pm</a>		</div>

		<p>В ответ на мое описание того, как вы можете использовать директиву #error , чтобы проверить, что компилятор</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

