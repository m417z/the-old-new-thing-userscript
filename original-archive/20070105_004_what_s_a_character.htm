<html>
<head>
<title>What('s) a character!</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What(&#8216;s) a character!</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 5, 2007 / year-entry #5</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>53</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Norman Diamond seems to have made a side career of harping on this topic on a fairly regular basis, although he never comes out and says that this is what he's complaining about. He just assumes everybody knows. (This usually leads to confusion, as you can see from the follow-ups.) Back in the ANSI days,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Norman Diamond seems to have made a side career of harping on this topic <a href="http://blogs.msdn.com/larryosterman/archive/2006/01/12/512115.aspx#512320"> on</a> <a href="http://blogs.msdn.com/junfeng/archive/2006/02/20/535875.aspx#536564"> a</a> <a href="http://blogs.msdn.com/chrsmith/archive/2006/05/08/What-would-you-like-to-see-from-Visual-Studio-and-Indigo.aspx#597659"> fairly</a> <a href="http://blogs.msdn.com/oldnewthing/archive/2006/10/17/834921.aspx#841924"> regular</a> <a href="http://blogs.msdn.com/oldnewthing/archive/2006/12/13/1275990.aspx#1280280"> basis</a>, although he never comes out and says that this is what he's complaining about. He just assumes everybody knows. (This usually leads to confusion, as you can see from the follow-ups.)</p>
<p> Back in the ANSI days, terminology was simpler. Windows operated on <code>CHAR</code>s, which are one byte in size. Buffer sizes were documented as specified in bytes, even for textual information. For example, here's a snippet from the 16-bit documentation for the <code>GetWindowTextLength</code> function: </p>
<blockquote class="q"><p> The return value specifies the text length, in bytes, not including any null terminating character, if the function is successful. Otherwise, it is zero.  </p>
</blockquote>
<p> The use of the term <i>byte</i> throughout permitted the term <i>character</i> to be used for other purposes, and in 16-bit Windows, the term was repurposed to represent "one or bytes which together represent one (what I will call) linguistic character." For single-byte character sets, a linguistic character was the same as a byte, but for multi-byte character sets, a linguistic character could be one or two bytes. </p>
<p> Documentation for functions that operated on linguistic characters said <i>characters</i>, and functions that operated on <code>CHAR</code>s, said <i>bytes</i>, and everybody knew what the story was. (Mind you, even in this nostalgic era, documentation would occasionally mess up and say <i>character</i> when they really meant <i>byte</i>, but the convention was adhered to with some degree of consistentcy.) </p>
<p> With the introduction of Unicode, things got ugly. </p>
<p> All documentation that previously used <i>byte</i> to describe the size of textual data had to be changed to read "the size of the buffer in bytes if calling the ANSI version of the function or in <code>WCHAR</code>s if calling the Unicode version of the function." A few years ago the Platform SDK team accepted my suggestion to adopt the less cumbersome "the size of the buffer in <code>TCHAR</code>s." Newer documentation from the core topics of the Platform SDK tends to use this alternate formulation. </p>
<p> Unfortunately, most documentation writers (and 99% of software developers, who provide the raw materials for the documentation writers) aren't familiar with the definition of <i>character</i> that was set down back in 1983, and they tend to use the term to mean <i>storage character</i>, which is a term I invented just now to mean "a unit of storage sufficient to hold a single <code>TCHAR</code>." (The Platform SDK uses what I consider to be the fantastically awkward term <a href="http://msdn.microsoft.com/library/en-us/intl/unicode_90hf.asp"> <i>normal character widths</i></a>.) For example, the <code>lstrlen</code> function returns the length of the string in storage characters, not linguistic characters. And any function that accepts a sized output buffer obviously specifies the size in storage characters because the alternative is nonsense: How could you pass a buffer and say "Please fill this buffer with data. Its size is five linguistic characters"? You don't know what is going into the buffer, and a linguistic character is variable-sized, so how can you say how many linguistic characters will fit? <a href="http://blogs.msdn.com/michkap"> Michael Kaplan</a> enjoys making rather outrageous strings which result in equally outrageous sort keys. I remember one entry a while ago where he <a href="http://blogs.msdn.com/michkap/archive/2006/02/17/533929.aspx"> piled over a dozen accent marks over a single "a"</a>. That "a" plus the combining diacritics all equal one giant linguistic character. (There is a less extreme example <a href="http://blogs.msdn.com/michkap/archive/2006/06/25/646769.aspx"> here</a>, wherein he uses an "e" plus two combining diacritics to form one linguistic character.) If you wanted your buffer to really be able to hold five of these extreme linguistic characters, you certainly would need it to be bigger than <code>WCHAR buffer[5]</code>. </p>
<p> As a result, my recommendation to you, dear reader, is to enter every page of documentation with a bias towards <i>storage character</i> whenever you see the word <i>character</i>. Only if the function operates on the textual data linguistically should you even consider the possibility that the author actually meant <i>linguistic character</i>. The only functions I can think of off-hand that operate on linguistic characters are <code>CharNext</code> and <code>CharPrev</code>, <a href="http://blogs.msdn.com/michkap/archive/2005/01/30/363420.aspx"> and even then they don't quite get it right</a>, although they at least try. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (53)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-459203">
				<div id="div-comment-459203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459203">
			January 5, 2007 at 10:49 am</a>		</div>

		<p>CharNext ? We all know real men and women use ++ ;)</p>
<p>Anyway, it&#8217;s all just ones and zeros, you just want to get them in the right order.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459213">
				<div id="div-comment-459213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459213">
			January 5, 2007 at 10:59 am</a>		</div>

		<p>As an &quot;ugly American programmer&quot; with a few decades of experience, I&#8217;ve grown used to handling characters with ASCII. (If it was good enough to represent every character in the US Constitution, it&#8217;s good enough for me.) The whole mess with character sets and their type representations, especially in C++, drives me crazy. I&#8217;m not blaming anyone, and I know it&#8217;s needed. I&#8217;m just expressing complete frustration with the complicated mess that exists and annoyance at the need to become an expert in international glyphs as well as programming.</p>
<p>Let&#8217;s go back to the good old days and party like it&#8217;s 1999. What was the name of the guy who sang that? Oh yeah, I can&#8217;t type it in ASCII.</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Image:Prince_symbol.svg" rel="nofollow">http://en.wikipedia.org/wiki/Image:Prince_symbol.svg</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459223">
				<div id="div-comment-459223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">oidon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459223">
			January 5, 2007 at 11:48 am</a>		</div>

		<p>@Dave</p>
<p>The US Constitution, in it&#8217;s original form, can not be fully expressed in ASCII. Neither can the Bill of Rights. Here is an example of U+017F (long s) in the Bill of Rights:</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Long_s" rel="nofollow">http://en.wikipedia.org/wiki/Long_s</a></p>
<p>You may want to move that that party to the 1980s. By 1999 much of the world was long down the Unicode road.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459233">
				<div id="div-comment-459233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459233">
			January 5, 2007 at 12:21 pm</a>		</div>

		<p>Um, Raymond, I think you left out a word there.</p>
<p>You say &quot;the term was repurposed to represent &quot;one or bytes&quot;&quot;&#8230;..</p>
<p>One or two maybe? &nbsp;One or more?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459243">
				<div id="div-comment-459243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459243">
			January 5, 2007 at 1:25 pm</a>		</div>

		<p>There is no need to invent a new term (storage character). There is already something defined by Unicode, named &quot;code unit&quot; (<a rel="nofollow" target="_new" href="http://unicode.org/glossary/#code_unit" rel="nofollow">http://unicode.org/glossary/#code_unit</a>).</p>
<p>We might understand each other better if we would use the same (standard) terminology.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459263">
				<div id="div-comment-459263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">just me</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459263">
			January 5, 2007 at 2:13 pm</a>		</div>

		<p>Interestingly, though, that in kernel mode, a the count of a UNICODE_STRING is not in (storage) characters, but in bytes. Thus, you have to read the WDK and the SDK differently.</p>
<p>I am in kernel mode more often than in user space. I find the convention in kernel better: Every size, whatever it is, is measured in the smallest possible unit (sizeof(char)==1), so you do not have to remember if this or that function uses this or that convention. Easy, isn&#8217;t it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459283">
				<div id="div-comment-459283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sillygloop.spaces.live.com' rel='external nofollow' class='url'>Vijay</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459283">
			January 5, 2007 at 3:44 pm</a>		</div>

		<p>English we knew was a funny language. But English and Computers together? I guess we&#8217;re set for a riot :)</p>
<p>We definitely need top notch technical writers to rise to the occassion. What a character, indeed!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459293">
				<div id="div-comment-459293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ed</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459293">
			January 5, 2007 at 9:58 pm</a>		</div>

		<p>repurposed? &nbsp;There is already a perfecly cromulent word known as &quot;redefined&quot;</p>
<p>Repurposed sounds to me like &quot;the chair was repurposed to block the door&quot; or &quot;the book was repurposed to level the table.</p>
<p>/nerd</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459303">
				<div id="div-comment-459303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.encyclopediadramatica.com/index.php/Image:Inspirational_poster_-_BAN.jpg' rel='external nofollow' class='url'>Demotivator</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459303">
			January 5, 2007 at 10:46 pm</a>		</div>

		<p>&quot;Norman Diamond seems to have made a side career of harping on this topic on a fairly regular basis. although he never comes out and says that this is what he&#8217;s complaining about. He just assumes everybody knows. (This usually leads to confusion, as you can see from the follow-ups.)&quot;</p>
<p><a rel="nofollow" target="_new" href="http://www.encyclopediadramatica.com/index.php/Image:Inspirational_poster_-_BAN.jpg" rel="nofollow">http://www.encyclopediadramatica.com/index.php/Image:Inspirational_poster_-_BAN.jpg</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459313">
				<div id="div-comment-459313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arno</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459313">
			January 6, 2007 at 7:55 am</a>		</div>

		<p>I think there are basically two ways a &quot;storage unit&quot; and a character are not the same, one being diacritics, the other character sets with variable-length encoding. In MBCS, I suppose both may happen. But in Unicode, does Windows support characters outside the Basic Multilingual Plane (which are encoded in &gt;2 bytes)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459323">
				<div id="div-comment-459323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codesnipers.com/?q=blog/3' rel='external nofollow' class='url'>Ben Bryant</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459323">
			January 6, 2007 at 3:16 pm</a>		</div>

		<blockquote><p>
  fantastically awkward term normal character widths
</p></blockquote>
<p>Why? That is the term that is most immediately understood. To me &quot;storage character&quot; comes in second, and &quot;code unit&quot; (why does MS never look to the Unicode standard before choosing terminology?) comes in third. To make things more confusing, the msdn article you referenced actually also has a typo:</p>
<p>&quot;count of characters&quot;. However, this term is strictly correct because&#8230;</p>
<p>should be:</p>
<p>NOT strictly correct</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459343">
				<div id="div-comment-459343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Abhi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459343">
			January 6, 2007 at 6:52 pm</a>		</div>

		<p>Having worked with Unicode library I know how UTF8 and other encoding standards make the code look like an intimidating thingy. UTF16 is so pretty :-). Well its better to think in terms of Byte rather than linguistic character. When in confusion use (char*) but well I ain&#8217;t that talented and a novice programmer &nbsp;and I like to keep things simple :-).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459353">
				<div id="div-comment-459353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codeka.com/blogs/' rel='external nofollow' class='url'>Dean</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459353">
			January 6, 2007 at 9:27 pm</a>		</div>

		<p>Arno: windows has had support for surrogate characters since Windows 2000. though it depends on your definition of &quot;support&quot; &#8211; NT could have displayed them with proper fonts, but that&#8217;s about all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459363">
				<div id="div-comment-459363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459363">
			January 7, 2007 at 7:24 am</a>		</div>

		<p>&gt; Norman Diamond seems to have made a side</p>
<p>&gt; career of harping on this topic</p>
<p>Surely you know the reason. &nbsp;Since I&#8217;ve had to do Windows programming for several years now, I&#8217;ve been forced to have a side career as well: &nbsp;After reading MSDN pages I have to experiment to see which uses of &#8220;character&#8221; mean character, which uses mean byte, and which uses mean TCHAR. &nbsp;It got tiring the first month, and yet it never stops.</p>
<p>&gt; He just assumes everybody knows.</p>
<p>That&#8217;s because it&#8217;s perfectly obvious. &nbsp;In order to see _why_ it&#8217;s obvious (or _how_ or something like that?), take a look at the answer comment in the comment at:</p>
<p><a href="http://blogs.msdn.com/oldnewthing/archive/2007/01/04/1411080.aspx#1414348" target="_new" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/01/04/1411080.aspx#1414348</a></p>
<p>Microsoft still has employees asserting that in an ANSI string every character fits in a single byte. &nbsp;One even posted that assertion in a followup to my posting about breakage in StringCchPrintf or something similar.</p>
<p>The fact that an ANSI character might require one or two bytes is not only at least as obvious as the &#8220;fact&#8221; that every ANSI character fits in a single byte, it also happens to be more true.</p>
<p>Well, now I will give some good news, but please notice they still show why fixes are important.</p>
<p>One of the exceptional cases where Microsoft decided to fix a bug I reported during Visual Studio 2005 betas was where the runtime was corrupting customers&#8217; data files because it didn&#8217;t properly figure out how long a string was. &nbsp;I am glad it was decided to be fixed. &nbsp;(I haven&#8217;t checked if it was actually fixed, because: &nbsp;a colleague&#8217;s product had to be shipped while VS2005 was still in beta, so the product was coded using VB6, and we already had workarounds for miscalculations or misdocumentation in VB6 runtime.)</p>
<p>I think that MSDN pages for .Net Framework 1.1 were written around year 2002, yet they still included false statements about the meaning of TCHARs. &nbsp;Taking a look now, I think they&#8217;ve been fixed. &nbsp;I&#8217;m glad they were fixed.</p>
<div class="post">[<i>It is true that every (storage) character in an ANSI string occupies one byte. The count of characters in StringCchPrintf is clearly storage characters not linguistic characters, and that is the context in which the term &#8220;character&#8221; is being used. This is precisely an example of your taking a hyperliteral interpretation instead of adjusting with context. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459383">
				<div id="div-comment-459383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.unicode.org/glossary/#G' rel='external nofollow' class='url'>Leif Arne Storset</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459383">
			January 7, 2007 at 11:39 am</a>		</div>

		<p>For the record, there exists a term for &#8216;linguistic character&#8217;. The term is &#8216;grapheme&#8217;, and it is used by the linguistic community as well as by the Unicode project.</p>
<p>You could object, of course, that people are less familiar with &quot;grapheme&quot; than &quot;linguistic character&quot; and get scared and run away.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman odd alt thread-odd thread-alt depth-1" id="comment-459393">
				<div id="div-comment-459393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459393">
			January 7, 2007 at 12:36 pm</a>		</div>

		<p>Personally I use the term &quot;glyph&quot; when referring to &quot;a character on the screen&quot;. &nbsp;A glyph may be composed of multiple characters (in both ANSI and Unicode).</p>
<p>Grapheme works too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459423">
				<div id="div-comment-459423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459423">
			January 7, 2007 at 5:24 pm</a>		</div>

		<p>&lt;&lt;Personally I use the term &quot;glyph&quot; when referring to &quot;a character on the screen&quot;. &nbsp;A glyph may be composed of multiple characters (in both ANSI and Unicode).</p>
<p>Grapheme works too.&gt;&gt;</p>
<p>According the Unicode definitions &quot;glyph&quot; and &quot;grapheme&quot; are different beasts. The grapheme is &quot;what a user thinks of as a character&quot; and the relation between the two is many-to-many.</p>
<ul>
<li>the &quot;fi&quot; ligature (U+FB00) in a font is one glyph, represents 2 graphemes, but one code unit</li>
<li>
<p>the fi ligature in notepad, created by typing &#8216;f&#8217; and &#8216;i&#8217; is still one glyph, but 2 graphemes and 2 code units. the same value in wordpad, who does not know about ligatures, is 2 glyphs (but still 2 graphemes and 2 code units)</p>
</li>
<li>
<p>a + combining acute (&lt;0061 0301&gt;) are two glyphs, form one grapheme, and has 2 code units</p>
</li>
<li>
<p>Arabic shaping has several glyphs for the same &quot;linguistic character&quot; and which one use depends on the context</p>
</li>
</ul>
<p>Now, there is also a &quot;grapheme cluster&quot; :-)</p>
<p>I fully agree that the Unicode glossary is not very clear, but it is clear that glyph and grapheme is not the same thing.</p>
<p>It is a full mess there, between</p>
<p>glyph/glyph code/glyph identifier/glyph image/grapheme/grapheme cluster/graphic character, but I am not sure creating our own definitions is the way to fix it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459433">
				<div id="div-comment-459433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459433">
			January 7, 2007 at 5:25 pm</a>		</div>

		<p>@Norman</p>
<p>&lt;&lt;.Net Framework 1.1 were written around year 2002, yet they still included false statements about the meaning of TCHARs&gt;&gt;</p>
<p>I am quite sure the .NET Framework (no matter version) does not deal with TCHARs</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459403">
				<div id="div-comment-459403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459403">
			January 7, 2007 at 1:46 pm</a>		</div>

		<p>Norman, I tend to be a stickler for precise meanings myself, but as Raymond points out, to interpret &#8216;characters&#8217; in that context as having any meaning other than the number of TCHARs which fit in that buffer is nonsensical. If you found yourself paying for rope by the foot, would you take your shoes off to measure with *your* feet, or use the same units everyone else would? How could you possibly be expected to measure the size of your buffer in variable-size units?!</p>
<p>I do often find infuriating omissions in the documentation, but I don&#8217;t think I&#8217;ve ever hit the problem you describe; from the posts I&#8217;ve seen here, they seem to be specific to you. Unless you&#8217;re doing something involving fonts (or otherwise actually drawing a string somewhere), why would &#8216;characters&#8217; (or glyphs, or whatever else you like to call them) matter to anyone?</p>
<p>I&#8217;m curious about how a bug in Visual Studio corrupted your customers&#8217; files, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459493">
				<div id="div-comment-459493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thriol</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459493">
			January 8, 2007 at 12:01 pm</a>		</div>

		<p>The character by Michael Kaplan looks as described on Office 2007, but it gives some strange effects. See picture here: <a rel="nofollow" target="_new" href="http://thomasolsson.spaces.live.com/blog/cns" rel="nofollow">http://thomasolsson.spaces.live.com/blog/cns</a>!1EB93731488C4EA3!302.entry</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion even thread-even depth-1" id="comment-459563">
				<div id="div-comment-459563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459563">
			January 8, 2007 at 5:41 pm</a>		</div>

		<p>&quot;just me&quot;, that&#8217;s because UNICODE_STRING, ANSI_STRING, OEM_STRING and STRING must be freely convertible among one another through a bitwise copy. The idea is that low-level components are supposed NOT to worry with linguistics and just pass strings around as immutable binary buffers. String equivalence is very bare, and not 100% correct linguistically (not to mention subtly inconsistent with the CRT &#8211; CRT case insensitivity lowercases, RTL uppercases, which can cause issues with Hungarian filenames)</p>
<p>Arno: it does, since Windows 2000. As linguistic support for Windows got better, UTF32 support got better with it (in Windows 2000 being basically limited to support in text rendering functions)</p>
<p>Norman Diamond: shut up. The use is consistent throughout, I can only remember ONE function not acting as documented, and it was an obscure PSAPI routine. Everyone gets it. You are the problem. You don&#8217;t encounter (and need not worry with) graphemes well into raw Uniscribe, and I somehow doubt you are reimplementing a rich text control</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459573">
				<div id="div-comment-459573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459573">
			January 8, 2007 at 10:41 pm</a>		</div>

		<p>I would really like to see how can you convert between UNICODE_STRING, ANSI_STRING, OEM_STRING through a bitwise copy :-D</p>
<p>And Windows has only primitive UTF32 support (basically converting to/from it to UTF16, where the real work is done). UTF16 support improved, true.</p>
<p>And Norman Diamond said nothing about graphemes, I did (nothing to do with the article, but with the terminology in LarryOsterman&#8217;s post).</p>
<p>So, you got 0 points out of 3 :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459583">
				<div id="div-comment-459583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459583">
			January 8, 2007 at 11:07 pm</a>		</div>

		<p>&gt; It is true that every (storage) character in</p>
<p>&gt; an ANSI string occupies one byte.</p>
<p>In that kind of sentence you need to delete the parentheses from around the word &quot;storage&quot;, and you should give some thought to skipping it entirely and just using the word TCHAR (which you and SOME of your colleagues often use correctly).</p>
<p>&gt; The count of characters in StringCchPrintf is</p>
<p>&gt; clearly storage characters not linguistic</p>
<p>&gt; characters,</p>
<p>Clear to you. &nbsp;SOMETIMES clear to me, but sometimes not, because: &nbsp;SOME MSDN pages really count linguistic characters the way they say instead of counting TCHARs the way that some programmers learn to interpret it. &nbsp;Clear to </p>
<p>SOME of your colleagues. &nbsp;However, SOME of your colleagues still end up thinking that storage characters are linguistic characters, they still end up posting falsities in newsgroups or e-mail, and they still end up writing defective code which we victims have to workaround.</p>
<p>&gt; This is precisely an example of your taking</p>
<p>&gt; a hyperliteral interpretation instead of</p>
<p>&gt; adjusting with context.</p>
<p>Compare that to the results when some of your colleagues guess wrong about interpretations or maybe didn&#8217;t get the training they need to do the interpretations.</p>
<p>It sounds like you&#8217;re agreeing with a recent posting by Larry Osterman saying that part of the contract between caller and callee is implicit (the callee&#8217;s code determines what the contract is) instead of explicit (the documentation). &nbsp;My answer is that publication of the contract is overdue.</p>
<p>Sunday, January 07, 2007 1:46 PM by James</p>
<p>&gt; I&#8217;m curious about how a bug in Visual Studio</p>
<p>&gt; corrupted your customers&#8217; files, though.</p>
<p>I think it was a bug in the .Net Framework version 2-beta-something runtime rather than in Visual Studio 2005 beta-something itself. &nbsp;It WOULD have corrupted customers&#8217; files if we hadn&#8217;t discovered it and if we hadn&#8217;t decided to stick with VB6 where we knew workarounds (as already stated). &nbsp;Where a library call was supposed to write a record of some length in bytes, it wrote more bytes than it was supposed to, corrupting the adjacent record which wasn&#8217;t supposed to be touched.</p>
<p>Sunday, January 07, 2007 5:25 PM by Mihai </p>
<p>&gt; I am quite sure the .NET Framework (no matter</p>
<p>&gt; version) does not deal with TCHARs</p>
<p><a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/system.runtime.interopservices.unmanagedtype.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/system.runtime.interopservices.unmanagedtype.aspx</a></p>
<p>I think that page is one which used to say that ByValTStr counted characters not bytes. &nbsp;The fact was that by default (in Visual Studio 2003 the default was ANSI) it counted bytes not characters. &nbsp;As far as I can tell that page is fine now.</p>
<p>Monday, January 08, 2007 5:41 PM by KJK::Hyperion </p>
<p>&gt; that&#8217;s because UNICODE_STRING, ANSI_STRING,</p>
<p>&gt; OEM_STRING and STRING must be freely</p>
<p>&gt; convertible among one another through a</p>
<p>&gt; bitwise copy</p>
<p>Converting between UNICODE_STRING and ANSI_STRING by doing bitwise copies instead of conversion tables? &nbsp;Sounds like there are even more broken APIs than I knew about.</p>
<p>Regarding James&#8217; tangent:</p>
<p>&gt; If you found yourself paying for rope by the</p>
<p>&gt; foot, would you take your shoes off to measure</p>
<p>&gt; with *your* feet, or use the same units</p>
<p>&gt; everyone else would?</p>
<p>Excellent example, thank you. &nbsp;Prior to adoption of the metric system units like &quot;foot&quot; varied by country. &nbsp;Besides using the same units everyone else would, you also had to figure out which everyone elses were today&#8217;s everyone elses.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459613">
				<div id="div-comment-459613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/sw/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459613">
			January 9, 2007 at 10:00 am</a>		</div>

		<p>Norman, it only appears to you as a &#8216;tangent&#8217; because you missed the point. Asked for a distance in feet, I consider it blatantly obvious that someone is meaning 0.3048 metres, because it&#8217;s the only rational interpretation available. The analogy with StringCchPrintf should now be obvious.</p>
<p>Similarly, can you give an example where any &quot;confusion&quot; could actually exist? StringCchPrintf clearly isn&#8217;t one: there is only one possibility, as I explained (measuring in &#8216;linguistic characters&#8217; simply cannot work). Was your .Net problem to do with expecting an I/O function call to be trying to count the latter when it wasn&#8217;t?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459683">
				<div id="div-comment-459683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stegus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459683">
			January 9, 2007 at 11:30 am</a>		</div>

		<p>Norman, do you not agree that as long as you interpret the word &#8216;character&#8217; as almost always meaning &#8216;storage character&#8217; in the MSDN documentation, everything is quite clear.</p>
<p>It is only when you are stubbornly interpreting the word &#8216;character&#8217; as meaning &#8216;lexical character&#8217; that there are any confusions.</p>
<p>I believe that must of the arguments you have had on various forums about these kinds of issues boils down to you insisting that the word character must be interpreted as &#8216;linguistic character&#8217;, while everybody else thinks that &#8216;character&#8217; means &#8216;storage character&#8217;</p>
<p>Of course, you could continue to claim that everybody else should change, or maybe you could consider actually listening to what people are saying and adjust your own thinking a little bit?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459743">
				<div id="div-comment-459743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459743">
			January 9, 2007 at 12:21 pm</a>		</div>

		<p>&lt;&lt;<a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/system.runtime.interopservices.unmanagedtype.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/system.runtime.interopservices.unmanagedtype.aspx</a></p>
<p>I think that page is one which used to say that ByValTStr counted characters not bytes. &nbsp;The fact was that by default (in Visual Studio 2003 the default was ANSI) it counted bytes not characters. &nbsp;As far as I can tell that page is fine now.&gt;&gt;</p>
<p>That has nothing to do with TCHAR, the selection of the names is most unfortunate, and it only ads to the confusion.</p>
<p>LPTStr, TBStr = platform-dependent: ANSI on Windows 98 and Unicode on Windows NT and Windows XP.</p>
<p>ByValTStr = The character type is determined by the System.Runtime.InteropServices.CharSet</p>
<p>Although the idea is clear (emulate the generic text data types used in non-managed code), they are affected by completely different things. They are not technically TCHAR, they are &quot;TCHAR-like,&quot; this is what I objected.</p>
<p>But I see your point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459783">
				<div id="div-comment-459783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stegus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459783">
			January 9, 2007 at 2:38 pm</a>		</div>

		<p>Mihai:</p>
<p>you say that most programmers think char (meaning byte) when reading character.</p>
<p>Norman obviously thinks linguistic character when he reads character.</p>
<p>The correct interpretation is instead to almost always think TCHAR when you read character.</p>
<p>Of course it had been clearer if MSDN had used TCHAR everywhere, but I really do not think that the current situation is so bad.</p>
<p>As you say, the documentation is not incorrect, but it could be clearer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459833">
				<div id="div-comment-459833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459833">
			January 9, 2007 at 4:46 pm</a>		</div>

		<p>&lt;&lt;The correct interpretation is instead to almost always think TCHAR when you read character.&gt;&gt;</p>
<p>Well, that &quot;almost&quot; in there is the problem :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459853">
				<div id="div-comment-459853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459853">
			January 9, 2007 at 5:25 pm</a>		</div>

		<p>Mihai, I&#8217;ll pretend I&#8217;m being nice to you, so Raymond will let my comment through. Not my fault you sign yourself with an ambiguous nickname, is it?</p>
<p>First, &quot;isomorphism&quot;. Look it up. Preferrably with &quot;grep&quot; on PSDK headers. One point for me, because what I did not say cannot be wrong</p>
<p>Second, with &quot;UTF32&quot; I&#8217;m obviously referring to characters outside of the BMP, also quite obviously referring to sort keys and Uniscribe. Two points for me, because nobody likes a nitpicker, an anonymous coward at it</p>
<p>Third, no dear, I&#8217;m not talking with you. Sorry. Here, I baked you a cheesecake to make up for it. See, that Norman in his deep knowledge of linguistics did not use the term &quot;grapheme&quot; when referring to his confusion on StringCchPrintf is surely an unfortunate accident. Nevertheless I was speaking to him. That makes it three points for me, because smileys in serious conversation will earn you no respect. Raymond never used smileys in his articles, did he?</p>
<p>In closing, since nobody in his right mind would try to win an internet argument with logic reasoning, I&#8217;ll that I despise you and your hypocritical double-speak that makes you worse than a Nazi. By Godwin&#8217;s law, I win with a final score of Hitler-0: <a rel="nofollow" target="_new" href="http://wendykaveney.com/uploads/deluxe/borderless/0005/0612061109361special_olympics_18_puffed_up__l.jpg" rel="nofollow">http://wendykaveney.com/uploads/deluxe/borderless/0005/0612061109361special_olympics_18_puffed_up__l.jpg</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459863">
				<div id="div-comment-459863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stegus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459863">
			January 9, 2007 at 5:44 pm</a>		</div>

		<p>First of all, I believe that the problem is in reality very small.</p>
<p>I could formulate the rule like this:</p>
<p>The word &#8216;character&#8217; should always be interpreted as &#8216;storage character&#8217; unless it is plainly obvious from context that it is refering to linguistic characters.</p>
<p>As a matter of fact, even using TCHAR is not entirely correct, since the size of TCHAR is entirely controlled by the UNICODE constant.</p>
<p>When you are calling an A-function a storage character is one byte, and when you are calling a W-function, the storage character is 2 bytes.</p>
<p>You can call either version manually regardless of the UNICODE macro.</p>
<p>So, Raymond has described the situation perfectly as usual. Documenting the behavior in very precise terms leads to extremely long and wordy descriptions, and the current conventions work well enough in practice.</p>
<p>As a simple improvement suggestion, maybe MSDN should have a link to a page describing the interpretation of &#8216;character&#8217; in detail on every page that talks about string functions. This should clear up any possible confusion.</p>
<p>The real problem is actually that Norman Diamond refuses to accept that the word &#8216;character&#8217; can ever be interpreted as anything other than &#8216;linguistic character&#8217;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459913">
				<div id="div-comment-459913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stegus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459913">
			January 9, 2007 at 7:06 pm</a>		</div>

		<p>Hmm</p>
<p>When you start thinking about the mbcs-functions, things start to get really interesting.</p>
<p>Look at this page for example:</p>
<p><a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-gb/library/5dae5d43" rel="nofollow">http://msdn2.microsoft.com/en-gb/library/5dae5d43</a>(VS.80).aspx</p>
<p>How should the parameters to _mbsncpy_s be interpreted, and why ?</p>
<p>Saying that everything is perfectly clear might be a slight exaggeration&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459923">
				<div id="div-comment-459923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://mvp.support.microsoft.com/default.aspx/profile=FA049700-6927-4F02-8F91-6552781C7407' rel='external nofollow' class='url'>Mihai</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459923">
			January 9, 2007 at 7:08 pm</a>		</div>

		<p>&lt;&lt;Not my fault you sign yourself with an ambiguous nickname, is it?&gt;&gt;</p>
<p>For regulars of internationalization blogs/newsgroups, and for regulars of this blog, I did not think is ambiguous.</p>
<p>But ok, here it is &quot;Mihai Nita, i18n MVP&quot;:</p>
<p>&nbsp;<a rel="nofollow" target="_new" href="http://www.mihai-nita.net" rel="nofollow">http://www.mihai-nita.net</a></p>
<p>&nbsp;<a rel="nofollow" target="_new" href="https://mvp.support.microsoft.com/default.aspx/profile=FA049700-6927-4F02-8F91-6552781C7407" rel="nofollow">https://mvp.support.microsoft.com/default.aspx/profile=FA049700-6927-4F02-8F91-6552781C7407</a></p>
<p>&lt;&lt;First, &quot;isomorphism&quot;. Look it up.&gt;&gt;</p>
<p>&quot;Isomorphism&quot; and &quot;bitwise copy&quot; is not the same beast. Sorry.</p>
<p>&lt;&lt;Second, with &quot;UTF32&quot; I&#8217;m obviously referring to characters outside of the BMP&gt;&gt;</p>
<p>You obviously have no clue about the Unicode terminology. UTF-8, UTF-16, UTF-32 are 100% equivalent, in that they can address the full Unicode space (0-10FFFF). Since UTF-32 has almost no supported in Windows, and a UTF-32 code unit is enough to store any Unicode code point, there is no need to improve anything. The improvement in Windows was in the surrogate support. Surrogates are a mechanism unique to UTF-16. So Windows moved from UCS2 to UTF16.</p>
<p>&lt;&lt;Norman in his deep knowledge of linguistics did not use the term &quot;grapheme&quot; when referring to his confusion on StringCchPrintf is surely an unfortunate accident. Nevertheless I was speaking to him.&gt;&gt;</p>
<p>Yes. And even if I mentioned UNICODE_STRING, and UTF32, I was not referring to your post, but I was speaking to Norman ;-)</p>
<p>And there is nothing to win here, because I was not arguing. Just trying to teach you some basic things. I did not realize that you, in your &quot;deep knowledge,&quot; need no such thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459933">
				<div id="div-comment-459933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stegus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459933">
			January 9, 2007 at 7:10 pm</a>		</div>

		<p>Hmm</p>
<p>When you start thinking about the mbcs-functions, things start to get really interesting.</p>
<p>Look at this page for example:</p>
<p><a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-gb/library/5dae5d43" rel="nofollow">http://msdn2.microsoft.com/en-gb/library/5dae5d43</a>(VS.80).aspx</p>
<p>How should the parameters to _mbsncpy_s be interpreted, and why ?</p>
<p>Saying that everything is perfectly clear might be a slight exaggeration&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459763">
				<div id="div-comment-459763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459763">
			January 9, 2007 at 12:37 pm</a>		</div>

		<p>@stegus</p>
<p>&lt;&lt;as long as you interpret the word &#8216;character&#8217; as almost always meaning &#8216;storage character&#8217; in the MSDN documentation, everything is quite clear.&gt;&gt;</p>
<p>Except in the situations where character *does* mean char, sometimes &#8216;linguistic character&#8217;, or, even wint_t.</p>
<p>I am not arguing that it can be clear when you think about every specific situation. But it is not &quot;automatically&quot; clear, you really have to think about it.</p>
<p>As a programmer I deal with char, CHAR, WCHAR, TCHAR. As a human being, I deal with (linguistic) characters.</p>
<p>Using layman terminology (character) to mean programmer concepts (char/WCHAR/TCHAR) is making things more difficult that they have to be. And the problem is that most programmers think char when you say character.</p>
<p>Read Converting a Project to Unicode: Part 5 (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/michkap/archive/2007/12/01/1391798.aspx" rel="nofollow">http://blogs.msdn.com/michkap/archive/2007/12/01/1391798.aspx</a>) and you will see size expressed as sizeof(buffer) instead of sizeof(buffer)/sizeof(TCHAR) or sizeof(buffer)/sizeof(buffer[0]).</p>
<p>This is because of that automatic use of something, without thinking.</p>
<p>So, in this respect, is the MSDN documentation incorrect? I would say no. Is it clear? Not quite. It would benefit from some improvement. Just use TCHAR when talking about &#8216;storage characters&#8217;, we will all know what that means without thinking twice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-459943">
				<div id="div-comment-459943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459943">
			January 9, 2007 at 10:34 pm</a>		</div>

		<p>Tuesday, January 09, 2007 10:00 AM by James</p>
<blockquote><p>
  Norman, it only appears to you as a &#8216;tangent&#8217;</p>
<p>  because you missed the point. Asked for a</p>
<p>  distance in feet, I consider it blatantly</p>
<p>  obvious that someone is meaning 0.3048 metres,</p>
<p>  because it&#8217;s the only rational interpretation</p>
<p>  available.
</p></blockquote>
<p>Thereby proving that you missed the point: &nbsp;you&#8217;re in country X, and it&#8217;s blatantly obvious that there&#8217;s only one rational interpretation available in country Y, therefore country X must bow down to country Y&#8217;s interpretation &#8212; this fails when country X is sufficiently powerful or independent. &nbsp;The invention of the metric system had more goals than just getting rid of one king&#8217;s foot.</p>
<blockquote><p>
  Was your .Net problem to do with expecting an</p>
<p>  I/O function call to be trying to count the</p>
<p>  latter when it wasn&#8217;t?
</p></blockquote>
<p>There was an I/O function which was supposed to write some number bytes, but it wrote more bytes than it was supposed to. &nbsp;One of the arguments to the function was a Unicode string and the function had to convert to ANSI (because the file&#8217;s contents are ANSI). &nbsp;Now all I can do about the internals is guess, but my guess is that the function&#8217;s implementor thought that the length of the ANSI string in bytes would be equal to the length of the original string in wchars and thought they could just write the result without doing any actual length checking on the result. &nbsp;We have seen some Microsoft employees write in English that they think this way and I think I saw one MSDN article in Japanese that depended on the same thinking. &nbsp;These people need training.</p>
<p>Tuesday, January 09, 2007 11:30 AM by stegus</p>
<blockquote><p>
  Norman, do you not agree that as long as you</p>
<p>  interpret the word &#8216;character&#8217; as almost</p>
<p>  always meaning &#8216;storage character&#8217; in the</p>
<p>  MSDN documentation, everything is quite clear.
</p></blockquote>
<p>Clear but not accurate. &nbsp;For a while I did interpret most MSDN pages exactly that way, but it turned out that I was equally wrong. &nbsp;There are more cases than I thought there were, where even the ANSI version of an API really counts characters as documented instead of counting bytes. &nbsp;One is CreateFileA, and some others related to the contents of edit controls (how many characters in a line or how much room they occupied or something like that, it&#8217;s been a while).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-459963">
				<div id="div-comment-459963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459963">
			January 9, 2007 at 10:49 pm</a>		</div>

		<p>I wish code would stop using TCHAR. &nbsp;Now that almost nobody cares about Win9x compatibility, code should use WCHAR and the W versions of functions exclusively. &nbsp;It annoys me to see code written recently that still uses the A versions.</p>
<p>Even if Win9x compatibility is important to you, use unicows&#8230;</p>
<p>Melissa</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-459973">
				<div id="div-comment-459973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459973">
			January 9, 2007 at 11:13 pm</a>		</div>

		<blockquote><p>
  One is CreateFileA
</p></blockquote>
<p>A little bit of thought can set the reason for that straight. Clearly, the person who implemented CreateFileA simply did a MultiByteToWideChar on the passed-in string, and presumably they had a fixed MAX_PATH buffer of WCHARs to hold the result. Then they used that buffer to call the &quot;real&quot; CreateFileW.</p>
<p>But I don&#8217;t think this is an exception. This is a &quot;length of the string&quot; use of the term, which as I mentioned above is the correct usage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-459873">
				<div id="div-comment-459873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-459873">
			January 9, 2007 at 6:14 pm</a>		</div>

		<p>As far as I know in MSDN, there are only two(*) different uses of the word &quot;character&quot;.</p>
<p>The first, when you&#8217;re talking about buffer sizes (as in, &quot;how big is the buffer you&#8217;re supplying?&quot;) is where &quot;characters&quot; == &quot;TCHARs&quot;</p>
<p>The second, when you&#8217;re talking about string lengths (as in, &quot;what is the length of this string e.g. strlen, mbcslen, etc&quot;) is where &quot;characters&quot; == &quot;code points&quot; (for want of a better term &#8212; it&#8217;s still not talking about &quot;linguistic characters&quot;, because it will return &quot;2&quot; for a denormalized &#225; for example)</p>
<p>Which is which should be perfectly clear from the context. And I would argue this is the correct way to do it. There&#8217;s no need to introduce two new words to &quot;disambiguate&quot; something that is not ambiguous to start with.</p>
<p>(*) the possible exception here is CharNext and CharPrev, but in my opinion, those are two rather under-documented functions anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-460013">
				<div id="div-comment-460013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stegus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-460013">
			January 10, 2007 at 2:39 am</a>		</div>

		<p>Norman:</p>
<p>&lt;&lt; There was an I/O function which was supposed to write some number bytes, but it wrote more bytes than it was supposed to. &nbsp;One of the arguments to the function was a Unicode string and the function had to convert to ANSI &gt;&gt;</p>
<p>It would be really interesting to know more details about this. Exactly which function are you talking about ? Most .net-functions are very explicit about encoding issues &#8211; When you are writing strings you always specify the number of characters to write. The number of resulting bytes always depends on the selected encoding.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-460023">
				<div id="div-comment-460023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stegus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-460023">
			January 10, 2007 at 2:44 am</a>		</div>

		<p>Dean:</p>
<p>&lt;&lt;A little bit of thought can set the reason for that straight. Clearly, the person who implemented CreateFileA simply did a MultiByteToWideChar on the passed-in string, and presumably they had a fixed MAX_PATH buffer of WCHARs to hold the result. Then they used that buffer to call the &quot;real&quot; CreateFileW.</p>
<p>But I don&#8217;t think this is an exception. This is a &quot;length of the string&quot; use of the term, which as I mentioned above is the correct usage.</p>
<blockquote><p>
  &gt;
</p></blockquote>
<p>But how are you supposed to know that in this particular case &#8216;length of a string&#8217; means the number of multi-byte characters ?</p>
<p>The normal rule is that &#8216;length of a string&#8217; in the ANSI functions means the number of bytes. (since the storage character for these functions is a byte)</p>
<p>CreateFileA is an ANSI-function, yet when the documentation talks about MAX_PATH characters, it is really talking about the number of WCHARs after MultiByteToWideChar conversion.</p>
<p>How is the reader of the documentation supposed to know this ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-460063">
				<div id="div-comment-460063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stegus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-460063">
			January 10, 2007 at 7:36 am</a>		</div>

		<p>James:</p>
<p>I see your point, I agree that this particular issue is unlikely to cause any problems.</p>
<p>However, look at _mbsncpy_s &#8211; as far as I can understand the numberOfElements parameter is measured in bytes, and the count parameter refers to the number of multibyte-characters (linguistic characters) to copy.</p>
<p>This is a very strange combination of parameters, and this is not spelled out in the documenation at all.</p>
<p>The documentation even talks about how you can specify count=size-1 in order to truncate the string. This is obviously nonsense if count and size are measured in different units.</p>
<p>The mbcs-functions desperately need improved documentation. It would be enough with a general note that described that numberOfElements is always measured in bytes and count always refers to the number of multibyte characters.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-460053">
				<div id="div-comment-460053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/sw/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-460053">
			January 10, 2007 at 5:51 am</a>		</div>

		<p>OK, technically there may still be countries using &#8216;foot&#8217; to mean something other than the standard agreed decades ago by the US and Commonwealth countries, 0.3048m, just as in theory a byte could be something other than 8 bits in size &#8211; but in both cases, I can use them without fear of being misunderstood in good faith.</p>
<p>The point remains that it is impossible to use &quot;linguistic characters&quot; as the unit of measurement for a buffer passed to StringCchPrintf.</p>
<p>It isn&#8217;t a case of CreateFileA being limited to &quot;MAX_PATH linguistic characters&quot;, either. *Some implementations* (those on NT derived operating systems) of CreateFileA transcribe the buffer into WCHAR buffer[MAX_PATH] in order to call NtCreateFile, giving a limitation of MAX_CHAR WCHARs (not &#8216;linguistic&#8217; anythings) on the input, but you can only rely on support for MAX_PATH bytes safely.</p>
<p>Stegus, the reader can safely interpret it as intended: you can pass in up to MAX_PATH bytes as the filename. Depending on the platform and the specific bytes you&#8217;re passing, you may in fact be able to get away with longer strings some of the time, just as I&#8217;m sure other functions will sometimes accept values the documentation doesn&#8217;t guarantee will work, but &quot;CreateFileA has a limit of MAX_PATH characters&quot; (characters==bytes here) is sufficient: the limit just isn&#8217;t rigidly enforced.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-460173">
				<div id="div-comment-460173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-460173">
			January 10, 2007 at 9:30 pm</a>		</div>

		<p>Wednesday, January 10, 2007 2:39 AM by stegus</p>
<blockquote><p>
  Norman:</p>
<p>  &gt; There was an I/O function which was supposed</p>
<p>  &gt; to write some number bytes, but it wrote more</p>
<p>  &gt; bytes than it was supposed to. &nbsp;One of the</p>
<p>  &gt; arguments to the function was a Unicode</p>
<p>  &gt; string and the function had to convert to</p>
<p>  &gt; ANSI
</p></blockquote>
<p>></p>
<blockquote><p>
  It would be really interesting to know more</p>
<p>  details about this. Exactly which function</p>
<p>  are you talking about ?
</p></blockquote>
<p>It took a little bit of searching to find these details again. &nbsp;The FilePut function (including a record number) wrote more bytes than the record length that had been set in calling the FileOpen function. &nbsp;To repeat in the interests of fairness, this was a beta, and I&#8217;m very glad that this was one of the rare cases where Microsoft decided to fix it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-460163">
				<div id="div-comment-460163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-460163">
			January 10, 2007 at 4:50 pm</a>		</div>

		<p>stegus: I mentioned my &quot;rule&quot; in my second-to-last post. &quot;buffer size&quot; parameters are bytes (for *A functions; WCHARs for *W functions) &quot;length-of-string&quot; parameters are &quot;multi-byte units&quot; (if you know what I mean).</p>
<p>In the case of _mbsncpy_s, numberOfElements is the size of the &quot;strDest&quot; buffer while &quot;count&quot; is the maximum length of the string to copy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-460203">
				<div id="div-comment-460203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stegus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-460203">
			January 11, 2007 at 4:27 am</a>		</div>

		<p>Dean: Your rule shows that you have a deep insight into these issues.</p>
<p>I do not think that all developers are quite so insightful.</p>
<p>The problem is that in almost all other cases, buffer size and string lengh parameters are measured in the same unit (what Raymond called storage characters)</p>
<p>The big exception is the mbcs-functions where string length is measured in multi-byte characters, and buffer sizes are measured in bytes.</p>
<p>The mbcs functions are extremely dangerous &#8211; for example if you have a 10-byte buffer and you copy a 8-character string (as measured by _mbslen) into the buffer you risk a buffer overflow.</p>
<p>I believe that there should be a clear warning about this in the documentation for all the mbcs-functions.</p>
<p>Note also that if you define _MBCS, sizeof(TCHAR) is still 1, but for example _tcslen() is suddenly mapped to _mbslen() which means that you suddenly have to handle the mixed personality of the mbcs functions.</p>
<p>A programmer who is used to normal string handling in C will definitely create lots of dangerous bugs in a _MBCS-enabled program.</p>
<p>Of course, the individual developer is responsible for any bugs he creates, but confusing documentation does not help.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-460213">
				<div id="div-comment-460213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stegus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-460213">
			January 11, 2007 at 4:47 am</a>		</div>

		<p>Norman: OK, so the error was in FilePut which only exists for backwards compatibilty with VB6. Since it is meant for backwards compatibility, it kind of makes sense that it should emulate VB6 behavior as much as possible even if the behavior contradicts the documentation.</p>
<p>You might be interested to know that if you are using VB.NET FilePut on a BINARY(not random) file, it will still write the number of bytes that results from converting unicode to mbcs even if the documentation specifies that it should write the same number of bytes as the number of characters in the string. So if you have a 10-character japanese string, FilePut might write anything from 10-20 bytes to the file. Horrible!</p>
<p>Unfortunately the problem is in VB6 where the conversion from unicode-ANSI is seriously broken. If we had a time machine we could go back and fix this in VB6, but right now it can not be fixed for backcompat reasons.</p>
<p>As a general rule you should try to avoid the VB6 compatibility functions in a .net program &#8211; use the functions in the System.IO namespace directly instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-460223">
				<div id="div-comment-460223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harvey Pengwyn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-460223">
			January 11, 2007 at 9:50 am</a>		</div>

		<p>Ah but which foot? :-) There is the U.S. Survey Foot to consider (this is a real issue not just some bizarre archaic unit no-one users) <a rel="nofollow" target="_new" href="http://www.vterrain.org/Projections/sp_feet.html" rel="nofollow">http://www.vterrain.org/Projections/sp_feet.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-460313">
				<div id="div-comment-460313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-460313">
			January 11, 2007 at 7:47 pm</a>		</div>

		<p>Thursday, January 11, 2007 4:47 AM by stegus</p>
<blockquote><p>
  Norman: OK, so the error was in FilePut which</p>
<p>  only exists for backwards compatibilty with</p>
<p>  VB6.
</p></blockquote>
<p>Huh!? &nbsp;As mentioned, we knew of some workarounds for some VB6 problems, plus VB6 wasn&#8217;t in beta so my boss shipped VB6 code. &nbsp;But we weren&#8217;t aware of FilePut in VB6 causing this same corruption to customers&#8217; files. &nbsp;When I have time to look at VB stuff again I&#8217;ll have to take another look at this. &nbsp;Thanks for the heads-up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-460443">
				<div id="div-comment-460443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/sw/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-460443">
			January 12, 2007 at 4:56 am</a>		</div>

		<p>Harvey: The difference is just 610 nm &#8211; and the term is &#8216;survey foot&#8217; as opposed to &#8216;foot&#8217;, making it a different unit, just as a &quot;baker&#8217;s dozen&quot; is 13 (as opposed to a regular dozen being 12) and a &#8216;nautical mile&#8217;, which isn&#8217;t the same thing as a &#8216;mile&#8217;.</p>
<p>Moreover, it&#8217;s used in specific circumstances, so the context helps: it shouldn&#8217;t confuse people in usage, any more than I&#8217;d be surprised at CreateWindow not installing panes of glass in my home.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-461013">
				<div id="div-comment-461013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-461013">
			January 16, 2007 at 12:43 am</a>		</div>

		<p>This whole discussion is why I heartily wish that *all* WinAPIs, without exception, exclusively used a count of bytes and not characters or storage characters or whatever.</p>
<p>I know, I know, no time machines. &nbsp;Doesn&#8217;t stop me grumbling about it though :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-464513">
				<div id="div-comment-464513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/archive/2007/01/24/1520227.aspx' rel='external nofollow' class='url'>Sorting It All Out</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-464513">
			January 24, 2007 at 3:01 am</a>		</div>

		<p>Yesterday in response to When is a character not a character? , reader Bart commented : Maybe you should</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-464573">
				<div id="div-comment-464573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/archive/2007/01/24/1520365.aspx' rel='external nofollow' class='url'>Sorting It All Out</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-464573">
			January 24, 2007 at 6:10 am</a>		</div>

		<p>In response to Raymond&#8217;s What(&#8216;s) a character! , Miral commented: This whole discussion is why I heartily</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-665453">
				<div id="div-comment-665453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/archive/2008/09/08/8931641.aspx' rel='external nofollow' class='url'>Sorting it all Out</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070105-00/?p=28503#comment-665453">
			September 8, 2008 at 3:05 am</a>		</div>

		<p>Previous blogs in this series of blogs on this Blog: Part 0: The intro, sans content By the end of this</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

