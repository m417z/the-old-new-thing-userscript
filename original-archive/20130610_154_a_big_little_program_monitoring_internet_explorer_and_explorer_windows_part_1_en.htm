<html>
<head>
<title>A big little program: Monitoring Internet Explorer and Explorer windows, part 1: Enumeration</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A big little program: Monitoring Internet Explorer and Explorer windows, part 1: Enumeration</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 10, 2013 / year-entry #155</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Normally, Monday is the day for Little Programs, but this time I'm going to spend a few days on a single Little Program. Now, this might very well disqualify it from the name Little Program, but the concepts are still little; all I'm doing is snapping blocks together. (Plus, it's my Web site, so you...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Normally, Monday is the day for Little Programs,
but this time I'm going to spend a few days
on a single Little Program.
Now, this might very well disqualify it from the name <i>Little Program</i>,
but the concepts are still little;
all I'm doing is
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/08/04/9856634.aspx">
snapping blocks together</a>.
(Plus, it's my Web site, so you can just suck it.)
</p>
<p>
The goal of our Little Program is to monitor Internet Explorer
and Explorer windows as they are created, navigate to new locations,
and are destroyed.
(In principle, other Web browsers can participate in this protocol,
but I don't know of any that do, so I'll assume that only Explorer
and Internet Explorer
register with the <code>Shell&shy;Windows</code> object.)
</p>
<p>
The key to all this is the
<code>Shell&shy;Windows</code> object,
which we've
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/04/22/10412906.aspx">
spent time</a>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/03/18/10403054.aspx">
playing with</a>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/07/05/435657.aspx">
in the past</a>.
</p>
<p>
Today we're going to write a helper function that takes an object
returned by the 
<code>Shell&shy;Windows</code> object
and extract the window handle and current location.
This is the guts of our Little Program,
so I'm basically doing the cool stuff up front,
and then leaving the annoying bits for later.
</p>
<pre>
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/07/15/184076.aspx">UNICODE</a>
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/12/71851.aspx">_UNICODE</a>
#define STRICT
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/01/24/10387757.aspx">STRICT_TYPED_ITEMIDS</a>
#include &lt;windows.h&gt;
#include &lt;ole2.h&gt;
#include &lt;iostream&gt;

#include &lt;shlobj.h&gt;
#include &lt;atlbase.h&gt;
#include &lt;atlalloc.h&gt;
</pre>
<p>
Now that we got the preliminary header file goop out of the way,
we can write the exciting function.
</p>
<pre>
HRESULT GetBrowserInfo(IUnknown *punk, HWND *phwnd,
                       PWSTR *ppszLocation)
{
 HRESULT hr;

 CComPtr&lt;IShellBrowser&gt; spsb;
 hr = IUnknown_QueryService(punk, SID_STopLevelBrowser,
                            IID_PPV_ARGS(&amp;spsb));
 if (FAILED(hr)) return hr;

 hr = spsb-&gt;GetWindow(phwnd);
 if (FAILED(hr)) return hr;

 hr = GetLocationFromView(spsb, ppszLocation);
 if (SUCCEEDED(hr)) return hr;

 return GetLocationFromBrowser(punk, ppszLocation);
}
</pre>
<p>
Awfully short for what purported to be an exciting function,
but that's because I hid the exciting parts in helper functions.
</p>
<p>
First, we take the object and ask to locate the top-level browser,
since that's where some of the interesting information hangs out.
We ask for the <code>IShell&shy;Browser</code> so we can get the
window handle via the base class method
<code>IOle&shy;Window::<wbr>Get&shy;Window</code>.
That's the easy part.
</p>
<p>
Getting the current location is tricky,
because Explorer windows do it one way,
and Internet Explorer does it another way.
That's because Explorer windows browse the shell namespace,
whereas Internet Explorer windows browse the Internet.
Shell namespace locations are represented by pidls,
whereas Internet locations are represented by URLs.
</p>
<p>
First, the Explorer way:
</p>
<pre>
HRESULT GetLocationFromView(IShellBrowser *psb,
                            PWSTR *ppszLocation)
{
 HRESULT hr;

 *ppszLocation = nullptr;

 CComPtr&lt;IShellView&gt; spsv;
 hr = psb-&gt;QueryActiveShellView(&amp;spsv);
 if (FAILED(hr)) return hr;

 CComQIPtr&lt;IPersistIDList&gt; sppidl(spsv);
 if (!sppidl) return E_FAIL;

 CComHeapPtr&lt;ITEMIDLIST_ABSOLUTE&gt; spidl;
 hr = sppidl-&gt;GetIDList(&amp;spidl);
 if (FAILED(hr)) return hr;

 CComPtr&lt;IShellItem&gt; spsi;
 hr = SHCreateItemFromIDList(spidl, IID_PPV_ARGS(&amp;spsi));
 if (FAILED(hr)) return hr;

 hr = spsi-&gt;GetDisplayName(SIGDN_DESKTOPABSOLUTEPARSING,
                           ppszLocation);
 return hr;
}
</pre>
<p>
The maze we navigate here is to start from the
<code>IShell&shy;Browser</code> and get to the
<code>IShell&shy;View</code> by calling
<code>IShell&shy;Browser::<wbr>Query&shy;Active&shy;Shell&shy;View</code>.
It's rather annoying that the
<code>IShell&shy;Browser::<wbr>Query&shy;Active&shy;Shell&shy;View</code>
method always returns you an
<code>IShell&shy;View</code> rather than being forward-looking and
letting you pass a <code>riid</code>/<code>ppv</code> pair.
(The shell has for the most part learned this lesson, and new
object creation or retrieval functions tend to take the
<code>riid</code>/<code>ppv</code> pair so you can specify
your ring size when you place the order instead of always getting
a size&nbsp;6 ring and then having to resize it.)
Since
<code>IShell&shy;Browser::<wbr>Query&shy;Active&shy;Shell&shy;View</code>
doesn't let us specify the desired interface, we have to
do the <code>Query&shy;Interface</code> ourselves
to convert the <code>IShell&shy;View</code> into what we really
want: The <code>IPersist&shy;ID&shy;List</code>.
</p>
<p>
From the <code>IPersist&shy;ID&shy;List</code> we ask for the pidl,
which now tells us what the Explorer window is looking at.
For display purposes, we convert it into a string by
converting the pidl into an <code>IShell&shy;Item</code>
(notice the handy
<code>riid</code>/<code>ppv</code> pair produced by the
type-checking
<code>IID_<wbr>PPV_<wbr>ARGS</code> macro)
and then asking the shell item for its parsing name.
</p>
<p>
(We saw techniques similar to this
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/07/20/188696.aspx">
a few years ago</a>.)
</p>
<p>
If it turns out we don't have an Explorer window, then we try
again using the Web browser interfaces:
</p>
<pre>
HRESULT GetLocationFromBrowser(IUnknown *punk,
                               PWSTR *ppszLocation)
{
 HRESULT hr;

 CComQIPtr&lt;IWebBrowser2&gt; spwb2(punk);
 if (!spwb2) return E_FAIL;

 CComBSTR sbsLocation;
 hr = spwb2-&gt;get_LocationURL(&amp;sbsLocation);
 if (FAILED(hr)) return hr;

 return SHStrDupW(sbsLocation, ppszLocation);
}
</pre>
<p>
We turn the object into an <code>IWeb&shy;Browser2</code> and ask
for the <code>Location&shy;URL</code> property.
The annoyance here is that
<code>IWeb&shy;Browser2</code> is an automation interface,
so it uses <code>BSTR</code> for passing strings around,
which is different from
<code>IShell&shy;Item::<wbr>Get&shy;Display&shy;Name</code>
which uses <code>Co&shy;Task&shy;Mem&shy;Alloc</code>,
since that is the convention for non-dispatch COM interfaces.
We therefore have to convert the <code>BSTR</code>
to a task-allocated
<code>PWSTR</code> before returning,
so that the return value is consistent with
<code>Get&shy;Location&shy;From&shy;View</code>.
</p>
<p>
Finally, we call the function in a loop to test that it actually works:
</p>
<pre>
CComPtr&lt;IShellWindows&gt; g_spWindows;

HRESULT DumpWindows()
{
 CComPtr&lt;IUnknown&gt; spunkEnum;
 HRESULT hr = g_spWindows-&gt;_NewEnum(&amp;spunkEnum);
 if (FAILED(hr)) return hr;

 CComQIPtr&lt;IEnumVARIANT&gt; spev(spunkEnum);
 for (CComVariant svar;
      spev->Next(1, &svar, nullptr) == S_OK;
      svar.Clear()) {
  if (svar.vt != VT_DISPATCH) continue;

  HWND hwnd;
  CComHeapPtr&lt;WCHAR&gt; spszLocation;
  if (FAILED(GetBrowserInfo(svar.pdispVal, &amp;hwnd,
                            &amp;spszLocation))) continue;

   std::wcout &lt;&lt; hwnd
              &lt;&lt; L" "
              &lt;&lt; static_cast&lt;PCWSTR&gt;(spszLocation)
              &lt;&lt; std::endl;
 }
 return S_OK;
}

int __cdecl wmain(int, PWSTR argv[])
{
 <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/20/135841.aspx">CCoInitialize</a> init;
 g_spWindows.CoCreateInstance(CLSID_ShellWindows);
 DumpWindows();
 g_spWindows.<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/20/135841.aspx">Release()</a>;

 return 0;
}
</pre>
<p>
Yes, I stupidly made <code>g_spWindows</code>
a global variable, but it'll come in handy later.
(It's still stupid, but at least there's a reason for
the stupidity.)
</p>
<p>
Okay, we can take this program for a spin.
When you run it, it should print the window handles and
locations of all your Explorer and Internet Explorer windows.
</p>
<p>
Before we can start hooking up events to keep this list up to date,
we need to learn a bit about connection points and using
dispatch interfaces as connection point interfaces.
We'll spend a few days on those topics,
then return to our program.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1060413">
				<div id="div-comment-1060413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060413">
			June 10, 2013 at 8:32 am</a>		</div>

		<p>I know this is a Little Program (or is it?) but the cleanup semantics for GetBrowserInfo are a little confusing&#8230; it seems like in some code paths, it can return a successful HRESULT, but still hand a chunk of memory back to its caller which it expects its caller to deallocate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1060423">
				<div id="div-comment-1060423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060423">
			June 10, 2013 at 8:34 am</a>		</div>

		<p>&gt; if (SUCCEEDED(hr)) return hr;</p>
<p>OH! Never mind. Ignore my previous comment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060503">
				<div id="div-comment-1060503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pcooper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060503">
			June 10, 2013 at 1:31 pm</a>		</div>

		<p>I&#39;m curious about your parenthetical remark that Shell&shy;Windows could be a place for other web browsers to register themselves, and thus somehow become integrated into the shell. Was this something that was a design goal and just never caught on? What advantages would there be for the user if other browsers did that?</p>
<div class="post">[<em>I don&#39;t know whether that was the intent, but it&#39;s there if they want it. It would allow the user to be able to control browser windows via script, which is something people seem really keen on doing to IE windows, so I assume they&#39;re keen on doing it with other browser windows too. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060563">
				<div id="div-comment-1060563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060563">
			June 10, 2013 at 3:02 pm</a>		</div>

		<p>While we all appreciate your detailed and helpful articles about Windows programming, we could also do without being told to suck your dick. I’m not sure what you’re trying to accomplish by making such statements, but I hope you can find a less offensive way to do it in the future.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060573">
				<div id="div-comment-1060573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060573">
			June 10, 2013 at 3:51 pm</a>		</div>

		<p>@Andrew: That was uncalled for. I&#39;d appreciate it if you&#39;d clean your mouth.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060583">
				<div id="div-comment-1060583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060583">
			June 10, 2013 at 3:57 pm</a>		</div>

		<p>@Andrew:</p>
<p>Wasn&#39;t he actually saying to suck his website?</p>
<p>All he said was to suck it, which is more likely short for suck it up, a USA informal way of saying put up with something difficult. It was you who managed to put two and two together and ended up so far away from four.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060593">
				<div id="div-comment-1060593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060593">
			June 10, 2013 at 4:02 pm</a>		</div>

		<p>I assume he&#39;s no native speaker and misread &quot;suck it&quot; as being offensive. But maybe he&#39;d better be quiet about things instead of running on assumptions.</p>
<p>(Ok, I&#39;m no native speaker myself. But I&#39;m pretty sure it doesn&#39;t fit Raymond&#39;s style of writing to say what Andrew accused him of)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060603">
				<div id="div-comment-1060603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ajgelado_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>ajgelado@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060603">
			June 10, 2013 at 4:03 pm</a>		</div>

		<p>@Andrew: same could be said about you &#8211; your comment could have been a lot more polite. And Raymond, at least, is at his own house, and can do whatever he wants. But we&#39;re just guests.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060613">
				<div id="div-comment-1060613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060613">
			June 10, 2013 at 5:46 pm</a>		</div>

		<p>@Everyone: Is it only me who took Andrew&#39;s remark as sarcastic/humorous/not serious? LOL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060623">
				<div id="div-comment-1060623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060623">
			June 10, 2013 at 10:12 pm</a>		</div>

		<p>@Nick: doesn&#39;t strike me as humourous at all, really. And, as a non-native, I also know what Raymond meant and took no offense.</p>
<p>On topic: interesting!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060663">
				<div id="div-comment-1060663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060663">
			June 11, 2013 at 3:42 am</a>		</div>

		<p>So, which is more efficient, PWSTR or BSTR?</p>
<p>Also, other browsers probably only implement MSAA.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060703">
				<div id="div-comment-1060703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060703">
			June 11, 2013 at 5:27 am</a>		</div>

		<p>More efficient in what respect? While they both encode strings as UTF-16 character sequences and are NUL-terminated they differ in the following aspects:</p>
<p>BSTR&#39;s have an explicit length field, PWSTR&#39;s do not.</p>
<p>BSTR&#39;s can have embedded NUL characters, PWSTR&#39;s cannot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060713">
				<div id="div-comment-1060713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060713">
			June 11, 2013 at 6:38 am</a>		</div>

		<p>Actually, &quot;suck it&quot; isn&#39;t without a really, really bad connotation. No matter what &quot;it&quot; is.</p>
<p><a rel="nofollow" target="_new" href="http://en.wiktionary.org/wiki/suck_it">en.wiktionary.org/&#8230;/suck_it</a></p>
<p>&quot;Suck it up&quot; would be much, much more appropriate.</p>
<p><a rel="nofollow" target="_new" href="http://en.wiktionary.org/wiki/suck_it_up">en.wiktionary.org/&#8230;/suck_it_up</a></p>
<p>Better yet, don&#39;t use &quot;suck&quot; in it.</p>
<p>@Neil, whatever you want, really. If you have to translate from/to one of them, that&#39;s the least efficient one. Pick the one you&#39;ll need to translate the least.</p>
<p>Or, put up some code that actually tests e.g. the allocation and freeing functions, although I think you won&#39;t find out anything spectacular there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060723">
				<div id="div-comment-1060723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060723">
			June 11, 2013 at 6:48 am</a>		</div>

		<p>Obviously it was meant tongue in cheek here, but the phrase &quot;suck it&quot; has a pretty well understood meaning. &nbsp;Some developer was fired over a stupid joke about dongles (and the ensuing attention it received) so it&#39;s always good advice to watch what you say.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060873">
				<div id="div-comment-1060873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060873">
			June 12, 2013 at 6:52 am</a>		</div>

		<p>@voo: &nbsp;Sorry, but offense is in the eye of the beholder. &nbsp;That it doesn&#39;t offend you or me doesn&#39;t mean it doesn&#39;t offend someone else. &nbsp;Yes, this brings the threshold down to the lowest common denominator, but that&#39;s just the PC world we live in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060833">
				<div id="div-comment-1060833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1060833">
			June 12, 2013 at 3:58 am</a>		</div>

		<p>Wow some people really have a thin hide.. and interpret way too much into rather informal sayings.</p>
<p>And the &quot;not a native speaker&quot; excuse is rather weak, because I bet several people here aren&#39;t either (wait, I *know* that for a fact, because English certainly isn&#39;t my first language) and didn&#39;t get offended without doing at least a bit of research over a phrase they&#39;re apparently unfamiliar with. Although I assume getting offended by things one doesn&#39;t understand is pretty basic human nature.</p>
<div class="post">[<em>I wonder if these people are also offended by &quot;How&#39;s it hangin?&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1061093">
				<div id="div-comment-1061093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Boyce</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1061093">
			June 13, 2013 at 8:05 pm</a>		</div>

		<p>@John: Maybe the lowest common denominator should just &quot;suck it&quot;? ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1061273">
				<div id="div-comment-1061273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/chazste_4000_yahoo.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>chazste@yahoo.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130610-00/?p=4133#comment-1061273">
			June 16, 2013 at 4:37 pm</a>		</div>

		<p>So is it just me? This program hangs in the call to Next() on Windows 8. It seems to execute just fine on Windows 7. [test of two :) ]</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

