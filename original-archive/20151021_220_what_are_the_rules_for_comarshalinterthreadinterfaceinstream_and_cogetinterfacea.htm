<html>
<head>
<title>What are the rules for CoMarshalInterThreadInterfaceInStream and CoGetInterfaceAndReleaseStream?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What are the rules for CoMarshalInterThreadInterfaceInStream and CoGetInterfaceAndReleaseStream?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 21, 2015 / year-entry #221</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we looked at the recommended ways of marshaling objects between apartments or between processes, but what if those mechanisms are not available to you? (Or if you're simply curious about the lower-level constructions that make the recommended ways possible.) How do I share an object in one apartment with another apartment in the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time,
<a href="http://blogs.msdn.com/b/oldnewthing/archive/2015/10/20/10648886.aspx">
we looked at the recommended ways of marshaling objects between
apartments or between processes</a>,
but what if those mechanisms are not available to you?
(Or if you're simply curious about the lower-level constructions
that make the recommended ways possible.)</p>
<p>
<b>How do I share
an object in one apartment with another
apartment in the same process?</b>
(Assuming that the
<code>Ro&shy;Get&shy;Agile&shy;Reference</code> function
is not available.)
</p>
<p>
This is the most common case.
You have an interface pointer that is valid in one apartment,
and you want to use that interface pointer in another apartment.
The pattern for this is
</p>
<ul>
<li>On the originating apartment, call
<code>Co&shy;Marshal&shy;Inter&shy;Thread&shy;Interface&shy;In&shy;Stream</code>.
(What a mouthful.)
This takes the object
and generates a bunch of bookkeeping
that allows the object reference to be used on a second apartment.
The mental model for this is that you took the object,
did an <code>Add&shy;Ref</code>,
and <i>stored the reference count in a stream</i>.
The stream that it returns is safe for multi-threaded use.
</li>
<li>Transmit the stream to the second apartment by whatever means you wish.
    Since the source and destination apartments are in the same process,
    you can just copy the <code>IStream*</code> pointer across.
</li>
<li>The second apartment calls
<code>Co&shy;Get&shy;Interface&shy;And&shy;Release&shy;Stream</code>.
This reconstitutes the object from the stream
in a form that can be used by the second apartment,
transferring the reference count from the stream to the reconstituted
object,
and releases the stream.
(This last clause is such a nasty gotcha, I'm going to devote
a special day to it.)
</li>
<li>The second apartment happily accesses the object.
</li>
</ul>
<p>
Behind the scenes,
different things happens depending on the nature of the object
you marshaled.
</p>
<p>
If the object being marshaled is apartment-threaded,
then it expects that all its methods are called only on the
original apartment.
In this case, unmarshaling creates a proxy object.
</p>
<p>
(Obvious special case: If the apartment-threaded object
is unmarshaled in the same apartment
as it was marshaled, then no proxy is needed.
But if you're going do that, why bother with marshaling
in the first place?)
</p>
<p>
If the object being marshaled is free-threaded,
then it is safe to call from any thread.
In that case, unmarshaling the object
just gives you a direct pointer to the original object.
</p>
<p>
Objects can provide custom marshaling behavior.
For example, if an object is immutable,
it may choose to marshal by value rather than by reference.
In that case, unmarshaling creates a clone of the original.
</p>
<p>
<b>What does the second apartment do when it is finished with the object?</b>
</p>
<p>
The second apartment calls <code>Release()</code> just like a reference
to any other COM object.
If the second apartment got a proxy, this releases the proxy,
and the proxy will notify the original object that there is one
fewer outstanding reference.
</p>
<p>
<b>What if I change my mind after calling
<code>Co&shy;Marshal&shy;Inter&shy;Thread&shy;Interface&shy;In&shy;Stream</code>
and decide that I don't want
to share the object with a second apartment after all?</b>
</p>
<p>
In that case, you call
<code>Co&shy;Release&shy;Marshal&shy;Data</code>
from the originating apartment.
This tells COM,
"Hi, um, yeah,
sorry about that."
COM undoes its bookkeeping and releases the original object,
thereby restoring the reference count.
</p>
<p>
<b>What happens when all of the threads associated with the
originating apartment release their last references to the object,
while the second apartment
still has an outstanding reference via a proxy?</b>
</p>
<p>
The object is not yet destroyed
because there is
still an outstanding reference from the second apartment.
The object gets destroyed only when all outstanding references are released. 
</p>
<p>
<b>What happens if the threads associated with the
originating apartment exit
while the second apartment
still has an outstanding reference to the object via a proxy?</b>
</p>
<p>
When the original apartment uninitializes COM,
any outstanding proxies are disconnected from the underlying object.
(When the proxies disconnect, they release their references,
which causes the underlying object to be destroyed because there
are no longer any references to it.)
If somebody tries to use the proxy to talk to the object,
the call fails with
<code>RPC_<wbr>E_<wbr>SERVER_<wbr>DIED_<wbr>DNE</wbr></wbr></wbr></wbr></code>.
The "DNE" stands for "did not execute".
(If somebody was talking to the proxy <i>while it was being destroyed</i>,
then they will get
<code>RPC_<wbr>E_<wbr>SERVER_<wbr>DIED</wbr></wbr></wbr></code>.
The missing DNE means that the call may have started executing
before the proxy was disconnected.)
</p>
<p>
<b>What if I want to unmarshal more than once?</b>
</p>
<p>
Oh, hey, look at the time. We'll pick up this question next time.
</p>
<p>
<b>Bonus chatter</b>:
The need for marshaling comes from two principles:
</p>
<ol>
<li>Don't force objects to support multi-threading.
</li>
</ol>
<p>
If you declare your object as apartment model,
then you can assume that all accesses to your object will occur from
a single thread.
This simplifies most objects tremendously,
since multi-threading is <i>hard</i>.
And it seems rather mean to force an object to support multi-threading
if the person writing it has no intention of using it from multiple threads.
</p>
<p>
You can also look at this as a compatibility constraint:
Windows 3.1 didn't support multi-threading,
so all COM objects back in Windows 3.1 were implicitly single-threaded.
The apartment threading model allows this code to be ported
in a relatively straightforward manner.
</p>
<ol start="2">
<li>
    <!-- backref: Marshaling won't get in your way if it isn't needed -->
    Let objects have direct pointers to each other whenever possible.
</li>
</ol>
<p>
If two objects are in the same apartment and they
want to talk to each other,
each gets a pointer to the other
with no proxy object in between.
People writing high-performance code insist on this principle.
"I don't want COM getting in my way and slowing down my business logic."
</p>
<p>
Marshaling reconciles the above two rules.
</p>
<p>
An alternative design would be that
creating an object
always created a free-threaded proxy, and all communication with the
object would be done through the proxy.
When a method is invoked on that proxy,
it either would perform
a direct call to the underlying object if the method is
being invoked on the same thread that the object expects,
or it would marshal the call to the correct thread if not.
This would allow COM objects to be transmitted freely within a process
without the need for explicit marshaling.
However, it also violates rule&nbsp;2.
</p>
<p>
When C++ added support for threading in C++11, it
went a different way:
All objects must support being created on any thread,
any method can be called from any thread,
and
<a href="http://herbsutter.com/2013/01/01/video-you-dont-know-const-and-mutable/">
some methods are thread-safe, and some aren't</a>,
and it is the caller's responsibility to
ensure that a previous not-thread-safe method call has
completed before it makes a new not-thread-safe method call.
This creates a burden on the implementor
compared to the apartment model
because the object needs to support being called from any thread,
and it is responsible for its own marshaling
if it needs to access resources that have hard thread affinity.
It also creates a burden on the caller compared to using marshaling
because the caller needs to keep in mind which methods are
thread-safe and which aren't,
and it needs to make sure that all threads which are sharing an object
work together to ensure that only one not-thread-safe method call is
active at a time.&sup2;
</p>
<p>
On the other hand, it means that there is no marshaling
for in-process objects.
</p>
<p>
(C++ doesn't try to address cross-process access to objects,
not does it particularly care about making C++ objects consumable
from other languages,
and it's okay with forcing all consumers of an object to recompile
if the object's implementation changes.)
</p>
<p>
&sup1;
Profound confusion has resulted from the fact that one of the object
threading models is called <i>apartment</i> model,
thereby overloading the word <i>apartment</i>.
I don't know what they were thinking.
It means you can have apartment model objects that aren't compatible
with your apartment.
(Apartment model objects are compatible with single-threaded apartments,
but not multi-threaded apartments.)
</p>
<p>
&sup2;
You also have to figure out how to solve problems like this:
</p>
<ul>
<li>Object A creates an object X.
</li>
<li>Object A shares object X with object B.
</li>
<li>Object A registers a callback with object X.
</li>
<li>Object B calls into object X from thread 1.
</li>
<li>While object X is processing the request,
    object A on thread 2 decide that it also wants to call into object X.
</li>
<li>Object A must wait until object X has completed the request
    from object B.
</li>
<li>The request from object B requires object X to invoke the callback
    registered by object A.
</li>
<li>But object X cannot invoke the callback because object A
    is being used by thread 2 right now.
</li>
</ul>
<p>
How do you avoid a deadlock?
</p></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1197531">
				<div id="div-comment-1197531" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197531">
			October 21, 2015 at 7:34 am</a>		</div>

		<p>While waiting for the next part, there is no rule that you can&#39;t just create a brand new stream a second time and unmarshal that.</p>
<div class="post">[<em>This assumes that you have a way to communicate with the original thread to say &quot;Hey, can you marshal the object for me again?&quot; But if you had that connection, you wouldn&#39;t need to be messing with explicit marshaling anyway! You would just have a method called <code>GiveMeTheObjectAgain(IObject** result)</code> and let the standard marshaler do the work. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197491">
				<div id="div-comment-1197491" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;amp;#39;Grijan&amp;amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197491">
			October 21, 2015 at 8:38 am</a>		</div>

		<p>Footnote 1 isn&#39;t referenced anywhere in the article. I assume that it should be referenced near the end of the answer to the first question, but I may be wrong.</p>
<div class="post">[<em>Footnote 1 is actually a dangling reference from <a href="http://blogs.msdn.com/b/oldnewthing/archive/2015/10/20/10648886.aspx">the previous article</a>. This series was originally one giant article, and then I decided to break it up, and what you&#39;re seeing is a remnant that didn&#39;t get cleaned up properly. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197471">
				<div id="div-comment-1197471" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197471">
			October 21, 2015 at 9:12 am</a>		</div>

		<p>I feel like these articles are muddling the difference between multi-threaded objects (which can be called from the MTA) and free-threaded objects (which can be called from any apartment). Multi-threaded objects are very common; free-threaded objects are rare and tricky to create.</p>
<div class="post">[<em>You&#39;re right. I&#39;m being sloppy. Multi-threaded objects and free-threaded objects are not the same thing. (Free-threaded objects should more properly be called &quot;free-marshalled objects&quot; since they marshal for free.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197461">
				<div id="div-comment-1197461" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">T</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197461">
			October 21, 2015 at 9:16 am</a>		</div>

		<p>&gt; How do you avoid a deadlock? </p>
<p>If I interpreted my callstacks correctly, COM knows other threads call into your thread while you&#39;re waiting, similarly to how QueueUserAPC works. So instead of your thread just waiting, it instead executes whatever other threads want it to do while it waits.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197451">
				<div id="div-comment-1197451" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197451">
			October 21, 2015 at 9:19 am</a>		</div>

		<p>@Ben: Shouldn&#39;t multithreaded objects work as neutral/free threaded objects as long as they don&#39;t internally store and use COM pointers to other objects?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197441">
				<div id="div-comment-1197441" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197441">
			October 21, 2015 at 9:23 am</a>		</div>

		<p>@T: Or you get RPC_E_CANTCALLOUT_ININPUTSYNCCALL</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197421">
				<div id="div-comment-1197421" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197421">
			October 21, 2015 at 9:51 am</a>		</div>

		<p>@SI: Yes, a multi-threaded object becomes free-threaded by aggregating the free-threaded marshaler and making sure it doesn&#39;t store any pointers to other COM objects.</p>
<p>I&#39;m just saying that free-threaded objects are a very special case, and let&#39;s not confuse them with the more common case of vanilla multi-threaded objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197411">
				<div id="div-comment-1197411" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197411">
			October 21, 2015 at 10:26 am</a>		</div>

		<p>@Ben, @SI,</p>
<p>You&#39;re confusing things just like Raymond explained.</p>
<p>An object declares the types of apartment it supports with the ThreadingModel configuration:</p>
<p>&lt;none&gt;: main STA</p>
<p>Apartment: any STA</p>
<p>Free: MTA</p>
<p>Both: any STA, MTA or NA (yes, both three!)</p>
<p>Neutral: NA</p>
<p>What you are probably talking about is the hack that was common before the neutral apartment, which consists of setting the TheadingModel to Both and aggregating the free-threaded marshaler.</p>
<p>The major drawback of the FTM is that you must, manually (read that again), marshal or pass through the global interface table every interface pointer you get on or return from the FTMed object.</p>
<p>Another drawback is that the FTMed object&#39;s lifetime is still bound to the apartment where it was created.</p>
<p>The neutral apartment solves both these problems with lightweight proxy/stubs that avoid full marshaling for the object itself and performing only apartment bookkeeping. &nbsp;Since it&#39;s an apartment, objects created in other apartments passed to or returned from the NA will be marshaled as usual with the optimizations Raymond just mentioned in this blog post according to the underlying thread&#39;s current apartment. &nbsp;However, a thread only ever runs in the NA temporarily, either through activation (class object) or through neutral object method calls.</p>
<p>You can hack your way into having an NA thread by entering an STA or the MTA and calling a method on a ThreadingModel = Neutral object that performs whatever you want indefinitely. &nbsp;You can just as well achieve this with registration-free COM to achieve e.g. a CoInitializeEx2 that can make a thread belong to a NA-over-[STA|MTA]. &nbsp;However, since this is only useful in practice to activate ThreadingModel = Both objects in the NA, you might as well have a TheardingModel = Neutral object that simply calls CoGetClassObject or CoCreateInstance[Ex] for you.</p>
<p>Since there are much more documented sources of aggregating the FTM and so few about the NA, we&#39;ll live in the dark COM ages forever. &nbsp;Even Windows Store Apps simply added an extension to the STA (ASTA, or Application STA) that blocks unrelated (i.e. top-level re-entrancy) calls (probably, what the STA should have been from the start).</p>
<p>@Raymond, why is the neutral apartment taboo outside COM+? &nbsp;In COM&#39;s base documentation, the only mention of NA is in the CoInitialize[Ex], CoGetCallerTID, CoFreeUnusedLibrariesEx, APTTYPE, APTTYPEQUALIFIER and InprocServer32 articles, none of which develops any further about it.</p>
<div class="post">[<em>The neutral apartment was added after the other apartments became well-established, so everybody forgets to invite him to the party. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197401">
				<div id="div-comment-1197401" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197401">
			October 21, 2015 at 10:33 am</a>		</div>

		<p>Raymond, is there a reason to have already two articles about marshaling, but no mention of the Global Interface Table?</p>
<div class="post">[<em>Simple. I use marshaling a lot. I don&#39;t use the Global Interface Table, so I don&#39;t feel qualified to write about it. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197371">
				<div id="div-comment-1197371" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197371">
			October 21, 2015 at 11:39 am</a>		</div>

		<p>@Raymond, I understand that, but the documentation has had 15 years to catch up with the implementation of the neutral apartment. &nbsp;Not 15 days, 15 weeks or even 15 months.</p>
<p>On the same vein, ASTA already had 3 years for documentation to catch up. &nbsp;We mostly only see mentions like the neutral apartment, and the most complete documentation is titled in such a way that it seems to be solely about DirectX.</p>
<p>Someone who hasn&#39;t known Windows almost like since ever will have both a hard time understanding apartments correctly and a hard time catching up with what the ASTA is.</p>
<p>I guess these are actual instances where the old thing is still new.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197361">
				<div id="div-comment-1197361" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197361">
			October 21, 2015 at 11:43 am</a>		</div>

		<p>@Raymond, I was expecting you&#39;d use the GIT a lot, since it recognizes objects marked with IAgileObject.</p>
<p>For what cases do you use marshaling the most, if I may ask?</p>
<div class="post">[<em>Getting an object from one thread to another as a one-time operation. The GIT is overkill for that sort of thing. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197351">
				<div id="div-comment-1197351" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197351">
			October 21, 2015 at 2:30 pm</a>		</div>

		<p>[(Free-threaded objects should more properly be called &quot;free-marshalled objects&quot; since they marshal for free.) -Raymond]</p>
<p>I really hope this doesn&#39;t mean a Free-threaded object can&#39;t be marshaled across processes.</p>
<div class="post">[<em>Okay, so they really should be called &quot;free-inproc-marshalled objects&quot; since they marshal within a process for free (the C++ model). They still need help from COM for out-of-process marshaling. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197331">
				<div id="div-comment-1197331" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197331">
			October 21, 2015 at 4:10 pm</a>		</div>

		<p>So marking utility COM objects which don&#39;t have any internal state as free threaded to avoid (in-process) marshaling is perfectly fine. So is having free threaded more complex COM objects with internal state, which are thread safe, and are used by STA / MTA objects. They just need to marshal any and all remote interfaces before using them.</p>
<p>Since COM events are just COM calls to remote interfaces, I&#39;ve been assuming that any marshaling issues for free threaded -&gt; specific source event object also needs to be dealt with to send events, is this the case?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197321">
				<div id="div-comment-1197321" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197321">
			October 21, 2015 at 4:39 pm</a>		</div>

		<p>Raymond, does your answer to &quot;What happens if the threads associated with the originating apartment exit while the second apartment still has an outstanding reference to the object via a proxy?&quot; apply in the case where the object is out-of-proc? So say ClientProcessThreadA creates ServerProcessObject, marshals it to ClientProcessThreadB, and then ClientProcessThreadA dies. Will ClientProcessThreadB still be able to use the unmarshaled interface, or will it get RPC_E_SERVER_DIED_DNE? I would expect the former, not the latter. Thank you.</p>
<div class="post">[<em>When ClientProcessThreadA creates ServerProcessObject, the originating apartment is in the server. ClientProcessThreadA merely has a proxy to the server object. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197311">
				<div id="div-comment-1197311" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197311">
			October 21, 2015 at 4:43 pm</a>		</div>

		<p>There&#39;s something I really don&#39;t get. So unmarshalling an apartment-threaded object from a different thread creates a proxy that forwards all calls to the original thread.</p>
<p>But how does it do that? That original thread could be doing arbitrary things. How does the proxy coerce it into doing the method call?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197301">
				<div id="div-comment-1197301" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew w. </cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197301">
			October 21, 2015 at 6:27 pm</a>		</div>

		<p>@Roman, </p>
<p>That&#39;s why STAs are required to pump messages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197261">
				<div id="div-comment-1197261" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197261">
			October 22, 2015 at 10:04 am</a>		</div>

		<p>@SI, yes.</p>
<p>&quot;They just need to marshal any and all remote interfaces before using them.&quot;</p>
<p>That&#39;s a really big &quot;just&quot;. &nbsp;Every method of an FTMed object must marshal interface pointers it stores immediately to make sure the marshaling is done in the correct apartment, or that the proxy is running in the correct apartment to call the object&#39;s marshaler, and it must unmarshal stored interface pointers it uses or returns.</p>
<p>Manual marshaling due to aggregating the FTM is &quot;just&quot; that. &nbsp;On the other hand, you only need one mistake to generate a miserable debugging session to someone in the future, perhaps yourself. &nbsp;Of Course™, you should be able to identify the HRESULT in a blink.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197251">
				<div id="div-comment-1197251" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197251">
			October 22, 2015 at 10:04 am</a>		</div>

		<p>@Roman, the proxy to an STA object usually posts messages (as if through PostMessage) to the COM window in the object&#39;s STA thread. &nbsp;If the method is marked as input_sync (good luck finding documentation), the message is instead sent (as if through SendMessage in an MTA thread or as if through SendMessageCallback or SendNotifyMessage in an STA). &nbsp;Note that within the same STA, you don&#39;t even have a proxy, so calls are direct.</p>
<p>Read carefully, there&#39;s a real difference between posted messaged and sent messages.</p>
<p>The STA thread must pump messages with a minimum of GetMessage (or PeekMessage with PM_REMOVE) and DispatchMessage.</p>
<p>Taking messages from the queue as soon and fast as possible makes desktop Windows happy about application responsiveness and processes messages sent from other threads, while DispatchMessage will pass posted messaged along to the destination window&#39;s WindowProc.</p>
<p>In turn, the WindowProc of the COM window will unmarshal the object and the method&#39;s in arguments, invoke the method by vtable position, marshal the result and out arguments and finally notify the caller.</p>
<p>If the message was posted, the STA is allowed to make inter-apartment calls, processing messages until the out-of-apartment call returns. &nbsp;This is the cause of the dreaded STA reentrancy. &nbsp;Since Windows 8, there&#39;s the ASTA (application STA), only available in store apps, which rejects top-level reentrant calls. &nbsp;You can pretty much do the same in STA with an IMessageFilter that rejects CALLTYPE_TOPLEVEL_CALLPENDING in HandleInComingCall.</p>
<p>If the message was sent, the STA is not allowed to make inter-apartment calls. &nbsp;This is indirectly imposed by Win32, see (Message Deadlocks) <a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644927(v=vs.85).aspx#deadlocks">msdn.microsoft.com/&#8230;/ms644927(v=vs.85).aspx</a> &nbsp;In essence, an input_async callee should not have a message loop risking a deadlock otherwise, so COM will fail remote calls (as if it checked IsSendMessage[Ex]).</p>
<p>Exercise: what happens if an input_sync callee performs an in-process, but inter-apartment input_sync call?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197191">
				<div id="div-comment-1197191" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151021-00/?p=91311#comment-1197191">
			October 23, 2015 at 11:31 am</a>		</div>

		<p>One correction: even in an STA, a standard marshaler (a proxy/stub from MIDL) will use SendMessage for input_sync methods.</p>
<p>On the other hand, the type library marshaler (00020424-0000-0000-C000-000000000046) won&#39;t, because like many other MIDL attributes, there&#39;s no equivalent in type libraries.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

