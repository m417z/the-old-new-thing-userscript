<html>
<head>
<title>Even if you have code to handle a message, you're allowed to call DefWindowProc, because you were doing that anyway after all</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Even if you have code to handle a message, you&#8217;re allowed to call DefWindowProc, because you were doing that anyway after all</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 5, 2009 / year-entry #5</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Just because you write case WM_SOMETHING: doesn't mean that you have to handle all possible parameters for the WM_SOMETHING message. You're still allowed to call the DefWindowProc function. After all, that's what you did when you didn't have a case WM_SOMETHING: statement in the first place. switch (uMsg) { case WM_CHAR: OnChar(...); return 0; default:...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Just because you write <code>case WM_SOMETHING:</code> doesn't mean
that you have to handle all possible parameters for the
<code>WM_SOMETHING</code> message.
You're still allowed to call the <code>DefWindowProc</code> function.
After all, that's what you did when you didn't have a
<code>case WM_SOMETHING:</code> statement in the first place.
</p>
<pre>
switch (uMsg) {
case WM_CHAR:
    OnChar(...);
    return 0;

default:
    return DefWindowProc(...);
}
</pre>
<p>
The above code fragment doesn't handle the <code>WM_SOMETHING</code>
message at all.
Suppose the <code>WM_SOMETHING</code> message uses the <code>wParam</code>
parameter to specify what type of something occurred, and you
only want to override the default processing
in the case where <code>wParam</code> has the value of 4.
What do you do with the other values?
</p>
<pre>
switch (uMsg) {
case WM_CHAR:
    OnChar(...);
    return 0;

<font COLOR=blue>case WM_SOMETHING:
    if (wParam == 4) { DoSomething4(...); }
    else ... ????? ...
    return 0;</font>

default:
    return DefWindowProc(...);
}
</pre>
<p>
If the value is 4, then you do your special "something 4" processing,
but what about all the other values? How do you handle them?
</p>
<p>
Well, think about it: How did you handle them before?
The original code, before you added a <code>WM_SOMETHING</code>
handler, was equivalent to this:
</p>
<pre>
switch (uMsg) {
case WM_CHAR:
    OnChar(...);
    return 0;

<font COLOR=blue>case WM_SOMETHING:
    return DefWindowProc(...);</font>

default:
    return DefWindowProc(...);
}
</pre>
<p>
In the original code, since there was no explicit handler for
the <code>WM_SOMETHING</code> message, control is transferred to
the <code>default</code> case handler, which just calls the
<code>DefWindowProc</code> function.
If you really want to, you can expand the case out a bit more:
</p>
<pre>
switch (uMsg) {
case WM_CHAR:
    OnChar(...);
    return 0;

case WM_SOMETHING:
    <font COLOR=blue>if (wParam == 4) return DefWindowProc(...);
    else return DefWindowProc(...);</font>

default:
    return DefWindowProc(...);
}
</pre>
<p>
Because if the <code>wParam</code> is 4, the original code just
called <code>DefWindowProc</code>.
And if the <code>wParam</code> was something other than 4,
the original code still just
called <code>DefWindowProc</code>.
</p>
<p>
Of course, I expanded the block in precisely this way so it matches
up with the case we started writing when we decided to handle the
<code>WM_SOMETHING</code> method.
Written out this way, it becomes obvious
what to write for the question marks.
</p>
<pre>
switch (uMsg) {
case WM_CHAR:
    OnChar(...);
    return 0;

case WM_SOMETHING:
    if (wParam == 4) { DoSomething4(...); }
    else <font COLOR=blue>return DefWindowProc(...);</font>
    return 0;

default:
    return DefWindowProc(...);
}
</pre>
<p>
Just because you have a <code>case WM_SOMETHING</code> statement
doesn't mean you have to handle all the cases;
you can still call <code>DefWindowProc</code> for the cases
you don't want to handle.
</p>
<p>
Armed with this information, you can help
<a HREF="http://blogs.msdn.com/oldnewthing/articles/407234.aspx#533895">
commenter Norman Diamond</a>
handle the <code>VK_F10</code> key in his <code>WM_SYSKEYDOWN</code>
message handler without having to
"start handling a bunch of keys that really are system keys,
that I didn't want to bother with."</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-697953">
				<div id="div-comment-697953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-697953">
			January 5, 2009 at 11:27 am</a>		</div>

		<p>I thought this was obvious. &nbsp;I guess I was wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-697963">
				<div id="div-comment-697963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-697963">
			January 5, 2009 at 11:56 am</a>		</div>

		<p>But for custom messages &gt;=WM_APP (or WM_USER if its your class) just returning 0 is fine, DefWndProc has no idea what to do with it anyway</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-698013">
				<div id="div-comment-698013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.trikaliotis.net/' rel='external nofollow' class='url'>strik</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698013">
			January 5, 2009 at 2:21 pm</a>		</div>

		<p>In most cases, I would still use &quot;break;&quot; instead of calling DefWindowProc() myself. This way, I do not have to check if there is some subtle difference in the call to DefWindowProc(). For example, the parameters might be changed in some non-obvious way.</p>
<p>But that&#8217;s more &quot;personal style&quot; than anything else.</p>
<p>And: Yes, I am surprised that it is not obvious, too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-698093">
				<div id="div-comment-698093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chrismcb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698093">
			January 5, 2009 at 3:55 pm</a>		</div>

		<p>@asf sure, but Raymond&#8217;s point still stands. If you weren&#8217;t processing the WM_USER message before, and passing it on to DefWindowProc, you can still pass it off to DefWindowProc</p>
<p>@strik. I know what you mean, except if you use break, then you end up doing nothing. Of course Raymond only gave us the code for the switch statement, so we don&#8217;t really know what happens outside the switch. We do know in the original case we fell into the default and returned DefWindowProc. Now you want to break, and do who knows what?</p>
<p>Of course personally I like to not have the default: and have the call to DefWindowProc outside the switch. Saves us from writing the call to DefWindowProc multiple times.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-698103">
				<div id="div-comment-698103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SRS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698103">
			January 5, 2009 at 3:58 pm</a>		</div>

		<p>Does DefWindowProc still have the I_cant_believe_I_used_a_goto label in the source?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-698153">
				<div id="div-comment-698153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brisvan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698153">
			January 5, 2009 at 5:55 pm</a>		</div>

		<p>Obviously Raymond has nothing to do these days, so he is wasting his time (and our time) on sooo basic things.</p>
<p>Better let the clueless go back to school and study the ABC of programming. Damn it!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-698233">
				<div id="div-comment-698233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698233">
			January 6, 2009 at 2:44 am</a>		</div>

		<p>Brisvan: Only if (non MS-Exam) schools teaches you how to code on Win32&#8230; I heard most of them switched to teach on higher level programming languages like C#, VB.NET, Java, etc&#8230;</p>
<p>Agreed it&#8217;s basic but for some people, you just have to spell the rules out for them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-698253">
				<div id="div-comment-698253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.georg-rottensteiner.de' rel='external nofollow' class='url'>Georg Rottensteiner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698253">
			January 6, 2009 at 4:05 am</a>		</div>

		<p>Do you really advocate using DefWindowProc as default case? IMHO exactly this increases the chance that later added handlers bypass DefWindowProc completely.</p>
<p>Personally i always put the return DefWindowProc after the switch/case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-698273">
				<div id="div-comment-698273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698273">
			January 6, 2009 at 5:15 am</a>		</div>

		<p>case WM_SOMETHING:</p>
<p>&nbsp; &nbsp;if (wParam == 4) { DoSomething4(&#8230;); }</p>
<p>&nbsp; &nbsp;else return DefWindowProc(&#8230;);</p>
<p>&nbsp; &nbsp;return 0;</p>
<p>Is it me or is that flow of control confusing?</p>
<p>if (wParam != 4)</p>
<p>&nbsp; &nbsp;return DefWindowProc(&#8230;);</p>
<p>DoSomething4(&#8230;);</p>
<p>return 0;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-698283">
				<div id="div-comment-698283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698283">
			January 6, 2009 at 5:39 am</a>		</div>

		<p>@strik: well, you might want to break; if you know that this window procedure subclasses another window proc, and you actually want to have the class&#8217;s standard window proc do its thing rather than bypass all the way down to DefWindowProc.</p>
<p>Subclassing doesn&#8217;t add much to this scenario, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-698513">
				<div id="div-comment-698513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://brandonlive.com' rel='external nofollow' class='url'>Brandon Paddock</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698513">
			January 6, 2009 at 6:19 pm</a>		</div>

		<p>Neil &#8211;</p>
<p>I&#8217;m actually surprised Raymond wrote it that way, I thought our coding guidelines said not to use early returns :) &nbsp;Basically for the same reasons you&#8217;d avoid gotos.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-698533">
				<div id="div-comment-698533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698533">
			January 6, 2009 at 6:32 pm</a>		</div>

		<p>Obviously Raymond has nothing to do these days, so he is wasting his time (and our time) on sooo basic things.</p>
<p>Better let the clueless go back to school and study the ABC of programming. Damn it!&#8221;</p>
<p>Indeed Raymond posted that there is some basic ground rules for programming you should already know:</p>
<p><a href="http://blogs.msdn.com/oldnewthing/archive/2006/03/20/555511.aspx" target=_new rel=nofollow rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/03/20/555511.aspx</a></p>
<div class=post>[<i>I&#8217;ve learned that <a href="http://blogs.msdn.com/oldnewthing/archive/2006/03/02/542115.aspx" rel="nofollow">what I consider basic</a> <a href="http://blogs.msdn.com/oldnewthing/archive/2007/07/11/3805135.aspx" rel="nofollow">others consider totally non-obvious</a>, so I don&#8217;t immediately reject topics just because they &#8220;sound basic to me&#8221;. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-698583">
				<div id="div-comment-698583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698583">
			January 7, 2009 at 12:29 am</a>		</div>

		<p>Isn&#8217;t this obvious?</p>
<p>And what&#8217;s wrong with the break statement?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-698733">
				<div id="div-comment-698733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698733">
			January 7, 2009 at 11:06 am</a>		</div>

		<p>You can also call DefWindowProc BEFORE or AFTER your own code if you want to use the default message handling alongside some custom code! &nbsp;Genius!</p>
<p>&lt;/sarcasm&gt;</p>
<p>But yeah, I was surprised some people couldn&#8217;t figure this out on their own. &nbsp;I suppose if you don&#8217;t know exactly what DefWindowProc does and you&#8217;re just copy/pasting a template for your own WndProc you might not know you can put more DefWindowProc calls in safely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-698763">
				<div id="div-comment-698763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gloomyandy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698763">
			January 7, 2009 at 11:36 am</a>		</div>

		<p>I assume there are also a few gotchas with doing this as well, some messages come in pairs (or more complex sequences), and only passing some part of the sequence may be asking for trouble&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-698813">
				<div id="div-comment-698813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.trikaliotis.net/' rel='external nofollow' class='url'>strik</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090105-00/?p=19603#comment-698813">
			January 7, 2009 at 2:34 pm</a>		</div>

		<p>@chrismcb: Good catch regarding my error. Exactly that type of error I was doing here is the reason why I have my own style and stick to it.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

