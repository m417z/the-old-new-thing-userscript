<html>
<head>
<title>The Itanium processor, part 6: Calculating conditionals</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The Itanium processor, part 6: Calculating conditionals</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 3, 2015 / year-entry #161</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150803-00/?p=91191</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The Itanium does not have a flags register. A flags register creates implicit dependencies between instructions, which runs contrary to the highly parallel model the Itanium was designed for. Instead of implicitly setting a register after computations, the Itanium has explicit comparison operations that put the comparison result into dedicated predicate registers. Here's a simple...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The Itanium does not have a flags register.
A flags register creates implicit
dependencies between instructions,
which runs contrary to the highly parallel
model the Itanium was designed for.
Instead of implicitly setting a register
after computations,
the Itanium has explicit comparison operations
that put the comparison result into dedicated
predicate registers.
</p>
<p>
Here's a simple fragment that performs
some operation if two registers are equal.
</p>
<pre>
        cmp.eq p6, p7 = r32, r33 ;;
(p6)    something
</pre>
<p>
The <var>cmp</var> instruction compares
two values and
sets the two specified predicate registers as follows:
</p>
<ul>
<li><var>p6</var> is <var>true</var> if the
    values satisfy the condition, or <var>false</var>
    if they do not satisfy the condition.</p>
<li><var>p7</var> is set to the opposite of <var>p6</var>
</ul>
<p>
The comparison operation generates two results,
one which holds the nominal result and one which
holds the opposite. This lets you conditionalize
both sides of a branch.
</p>
<pre>
        cmp.eq p6, p7 = r32, r33 ;;
(p6)    something // executes if they are equal
(p7)    something // executes if they are not equal
</pre>
<p>
There is also a <var>cmp4</var> instruction which compares
two 32-bit values,
in which case only
the least-significant 32 bits participate in the comparison.
</p>
<p>
The comparands can be either two registers or an
immediate and a register.
The immediate is an 8-bit sign-extended value,
though the final value may be interpreted as unsigned
depending on the comparison type.
</p>
<p>
There are three comparison types:
</p>
<table BORDER=1 BORDERCOLOR=black CELLSPACING=0 CELLPADDING=3
    STYLE="border-collapse: collapse">
<tr>
<th>type</th>
<th>meaning</th>
</tr>
<tr>
<td>eq</td>
<td>equality</td>
</tr>
<tr>
<td>lt</td>
<td>signed less than</td>
</tr>
<tr>
<td>ltu</td>
<td>unsigned less than</td>
</tr>
</table>
<p>
The first destination predicate register receives
result of the test,
and the second gets the opposite of the result.
</p>
<p>
These are the only comparisons you will see
in disassembly,
but the compiler can manufacture other types of comparisons.
For example,
if the compiler wants to perform
a <var>ge</var> comparison,
it can just do a <var>lt</var> comparison and flip
the order of the two predicates.
</p>
<p>
More generally, the compiler can synthesize the other
integer comparisons as follows:
</p>
<table BORDER=1 BORDERCOLOR=black CELLSPACING=0 CELLPADDING=3
    STYLE="border-collapse: collapse">
<tr>
<th>imaginary opcode</th>
<th>meaning</th>
<th COLSPAN=2>synthesized as</th>
</tr>
<tr>
<td><var>cmp.ne p, q = a, b</var></td>
<td>not equal</td>
<td COLSPAN=2><var>cmp.eq q, p = a, b</var></td>
</tr>
<tr>
<td><var>cmp.ge p, q = a, b</var></td>
<td>signed greater than or equal</td>
<td COLSPAN=2><var>cmp.lt q, p = a, b</var></td>
</tr>
<tr>
<td ROWSPAN=2><var>cmp.gt p, q = a, b</var></td>
<td ROWSPAN=2>signed greater than</td>
<td><var>cmp.lt p, q = b, a</var></td>
<td>if <var>a</var> is a register</td>
</tr>
<tr>
<td><var>cmp.lt q, p = a &minus; 1, b</var></td>
<td>if <var>a</var> is an immediate</td>
</tr>
<tr>
<td ROWSPAN=2><var>cmp.le p, q = a, b</var></td>
<td ROWSPAN=2>signed less than or equal</td>
<td><var>cmp.lt q, p = b, a</var></td>
<td>if <var>a</var> is a register</td>
</tr>
<tr>
<td><var>cmp.lt p, q = a &minus; 1, b</var></td>
<td>if <var>a</var> is an immediate</td>
</tr>
<tr>
<td><var>cmp.geu p, q = a, b</var></td>
<td>unsigned greater than or equal</td>
<td COLSPAN=2><var>cmp.ltu q, p = a, b</var></td>
</tr>
<tr>
<td ROWSPAN=2><var>cmp.gtu p, q = a, b</var></td>
<td ROWSPAN=2>unsigned greater than</td>
<td><var>cmp.ltu p, q = b, a</var></td>
<td>if <var>a</var> is a register</td>
</tr>
<tr>
<td><var>cmp.ltu q, p = a &minus; 1, b</var></td>
<td>if <var>a</var> is an immediate</td>
</tr>
<tr>
<td ROWSPAN=2><var>cmp.leu p, q = a, b</var></td>
<td ROWSPAN=2>unsigned less than or equal</td>
<td><var>cmp.ltu q, p = b, a</var></td>
<td>if <var>a</var> is a register</td>
</tr>
<tr>
<td><var>cmp.ltu p, q = a &minus; 1, b</var></td>
<td>if <var>a</var> is an immediate</td>
</tr>
</table>
<p>
These syntheses rely on the identities
</p>
<table BORDER=0 CELLSPACING=0 CELLPADDING=3
    STYLE="border-collapse: collapse">
<tr>
<td><var>x</var> &gt; <var>y</var></td>
<td>&nbsp;&hArr;&nbsp;</td>
<td><var>y</var> &lt; <var>x</var></td>
</tr>
<tr>
<td><var>x</var> &le; <var>y</var></td>
<td>&nbsp;&hArr;&nbsp;</td>
<td>&not;(<var>x</var> &gt; <var>y</var>)</td>
</tr>
<tr>
<td><var>x</var> &le; <var>y</var></td>
<td>&nbsp;&hArr;&nbsp;</td>
<td><var>x</var> &minus; 1 &lt; <var>y</var></td>
<td>for integers <var>x</var> and <var>y</var>, assuming no overflow</td>
</tr>
<tr>
<td><var>x</var> &ge; <var>y</var></td>
<td>&nbsp;&hArr;&nbsp;</td>
<td><var>y</var> &le; <var>x</var></td>
</tr>
</table>
<p>
The next level of complexity is the parallel comparisons.
These perform a comparison and combine the result with the
values already in the destination predicates.
</p>
<table BORDER=1 BORDERCOLOR=black CELLSPACING=0 CELLPADDING=3
    STYLE="border-collapse: collapse">
<tr>
<th>opcode</th>
<th>meaning</th>
<th>really</th>
</tr>
<tr>
<td><var>cmp.xx.or p, q = a, b</var></td>
<td><var>p</var> = <var>p</var> || (<var>a</var> xx <var>b</var>)<br>
        <var>q</var> = <var>q</var> || (<var>a</var> xx <var>b</var>)</td>
<td>if (<var>a</var> xx <var>b</var>) then
        <var>p</var> = <var>q</var> = <var>true</var></td>
</tr>
<tr>
<td><var>cmp.xx.orcm p, q = a, b</var></td>
<td><var>p</var> = <var>p</var> || &not;(<var>a</var> xx <var>b</var>)<br>
        <var>q</var> = <var>q</var> || &not;(<var>a</var> xx <var>b</var>)</td>
<td>if &not;(<var>a</var> xx <var>b</var>) then
        <var>p</var> = <var>q</var> = <var>true</var></td>
</tr>
<tr>
<td><var>cmp.xx.and p, q = a, b</var></td>
<td><var>p</var> = <var>p</var> &amp;&amp; (<var>a</var> xx <var>b</var>)<br>
        <var>q</var> = <var>q</var> &amp;&amp; (<var>a</var> xx <var>b</var>)</td>
<td>if &not;(<var>a</var> xx <var>b</var>) then
        <var>p</var> = <var>q</var> = <var>false</var></td>
</tr>
<tr>
<td><var>cmp.xx.andcm p, q = a, b</var></td>
<td><var>p</var> = <var>p</var> &amp;&amp; &not;(<var>a</var> xx <var>b</var>)<br>
        <var>q</var> = <var>q</var> &amp;&amp; &not;(<var>a</var> xx <var>b</var>)</td>
<td>if (<var>a</var> xx <var>b</var>) then
        <var>p</var> = <var>q</var> = <var>false</var></td>
</tr>
<tr>
<td><var>cmp.xx.or.andcm p, q = a, b</var></td>
<td><var>p</var> = <var>p</var> || (<var>a</var> xx <var>b</var>)<br>
        <var>q</var> = <var>q</var> &amp;&amp; &not;(<var>a</var> xx <var>b</var>)</td>
<td>if (<var>a</var> xx <var>b</var>) then
        <var>p</var> = <var>true</var>,
        <var>q</var> = <var>false</var></td>
</tr>
<tr>
<td><var>cmp.xx.and.orcm p, q = a, b</var></td>
<td><var>p</var> = <var>p</var> &amp;&amp; (<var>a</var> xx <var>b</var>)<br>
        <var>q</var> = <var>q</var> || &not;(<var>a</var> xx <var>b</var>)</td>
<td>if &not;(<var>a</var> xx <var>b</var>) then
        <var>p</var> = <var>false</var>,
        <var>q</var> = <var>true</var></td>
</tr>
</table>
<p>
The <i>meaning</i> column describes how it is convenient to think
of the operations,
but the <i>really</i> column describes how they actually work.
</p>
<p>
The <code>orcm</code> and <code>andcm</code> versions take the
complement of the comparison,
which is handy because some of the synthesized comparisons involve
taking the opposite of the specified result.
</p>
<p>
These parallel comparisons get their name because they are
designed to have multiple copies executed in parallel.
Consequently, they are
an exception to the general rule that you can write to a register
only once per instruction group.
If all writes to a predicate register are AND-like
(i.e., <code>and</code> or <code>andcm</code>)
or all writes are OR-like
(i.e., <code>or</code> or <code>orcm</code>),
then the writes are allowed to coexist within a single instruction group.
(This is where the <i>actually</i> column comes in handy.
You can see that all AND-like operations either do nothing
or set the predicate to <var>false</var>,
and that all OR-like operations either do nothing
or set the predicate to <var>true</var>.
That's why they can run in parallel:
If multiple conditions pass, they all do the same thing,
so it doesn't matter which one goes first.)
</p>
<p>
Executing them in parallel lets you perform multiple tests
in a single cycle.
For example:
</p>
<pre>
 x =  ... calculate x ...;
 y =  ... calculate y ...;
 z =  ... calculate z ...;
 if (x == 0 || y == 0 || z == 0) {
   something_is_zero;
 } else {
   all_are_nonzero;
 }
</pre>
<p>
could be compiled as
</p>
<pre>
        ... calculate x in r29 ...
        ... calculate y in r30 ...
        ... calculate z in r31 ...
        cmp.eq p6, p7 = +1, r0 ;; // set p6 = false, p7 = true

        cmp.eq.or.andcm p6, p7 = r29, r0 // p6 = p6 || x == 0
                                         // p7 = p7 &amp;&amp; x != 0
        cmp.eq.or.andcm p6, p7 = r30, r0 // p6 = p6 || y == 0
                                         // p7 = p7 &amp;&amp; y != 0
        cmp.eq.or.andcm p6, p7 = r31, r0 ;; // p6 = p6 || z == 0
                                         // p7 = p7 &amp;&amp; z != 0

(p6)    something_is_zero
(p7)    all_are_nonzero
</pre>
<p>
First, we calculate the values of <var>x</var>, <var>y</var>
and <var>x</var>.
At the same time, we prime the parallel comparison:
we compare the constant +1 against register <var>r0</var>,
which is the hard-coded zero register.
This comparison always fails, so we set
<var>p6</var> to <var>false</var> and
<var>p7</var> to <var>true</var>.
</p>
<p>
Now we perform the three comparisons in parallel.
We check if <var>r29</var>,
<var>r30</var>, and
<var>r31</var> are zero.
If any of them is zero, then
<var>p6</var> becomes <var>true</var> and
<var>p7</var> becomes <var>false</var>.
If all are nonzero, then nothing changes,
so
<var>p6</var> stays <var>false</var> and
<var>p7</var> stays <var>true</var>.
</p>
<p>
Finally, we act on the calculated predicates.
</p>
<p>
Notice that the parallel comparison lets us calculate
and combine all the parts of the test
in a single cycle.
In a flags-based architecture,
we would have to perform a comparison,
test the result,
then perform another comparison,
test the result,
then perform the last comparison,
and test the result one last time.
That's a sequence of six dependent operations,
which is difficult to parallelize.
(And most likely consume three branch prediction slots
instead of just one.)
</p>
<p>
The last wrinkle in the comparison instructions is the
so-called <ii>unconditional</i> comparison.
This special instruction violates the rule that a predicated
instruction has no effect if the predicate is false.
</p>
<pre>
(qp)    cmp.xx.unc p, q = r, s
</pre>
<p>
Even though there is a qualifying predicate,
this comparison is executed unconditionally
(as indicated by the <code>unc</code> suffix).
The behavior of an unconditional comparison is
</p>
<table BORDER=1 BORDERCOLOR=black CELLSPACING=0 CELLPADDING=3
    STYLE="border-collapse: collapse">
<tr>
<td><var>p</var> = <var>qp</var> &amp;&amp; (<var>r</var> xx <var>s</var>)</td>
</tr>
<tr>
<td><var>p</var> = <var>qp</var> &amp;&amp; &not;(<var>r</var> xx <var>s</var>)</td>
</tr>
</table>
<p>
In other words, if the qualifying predicate is <var>true</var>,
then the instruction behaves as normal.
But if the qualifying predicate is <var>false</var>,
then the result of the comparison is considered <var>false</var>
for all branches,
regardless of the actual test.
</p>
<p>
This formulation is handy when you are nesting predicates.
Consider:
</p>
<pre>
 x =  ... calculate x ...;
 y =  ... calculate y ...;
 if (x == 0) {
  x_is_zero;
 } else {
  x_is_nonzero;
  if (y == 0) {
   x_is_nonzero_and_y_is_zero;
  } else {
   both_are_nonzero;
  }
 }
</pre>
<p>
This can be compiled like this:
</p>
<pre>
        ... calculate x in r30 ...
        ... calculate y in r31 ...

        cmp.eq p6, p7 = r30, r0 ;;
(p6)    x_is_zero
(p7)    x_is_nonzero
(p7)    cmp.eq.unc p8, p9 = r31, r0 ;;
(p8)    x_is_nonzero_and_y_is_zero
(p9)    both_are_nonzero
</pre>
<p>
After calculating <var>x</var> and <var>y</var>,
we check whether <var>x</var> is zero.
If it is, then we execute
<var>x_<wbr>is_<wbr>zero</var>.
If not, then we execute
<var>x_<wbr>is_<wbr>nonzero</var>.
Next, we check whether <var>y</var> is zero,
and we do so via an unconditional comparison.
That way, if we are in the case that <var>x</var> is zero,
then both <var>p8</var> and <var>p9</var> are set to
<var>false</var>.
Now we can use <var>p8</var> and <var>p9</var> to select
between the final two branches.
(Or if <var>x</var> is zero, neither gets selected.)
</p>
<p>
We'll see later that the unconditional comparison is also
useful in register rotation.
</p>
<p>
So that's a quick tour of the Itanium conditional
instructions.
Next time, we'll start looking at speculation.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1196971">
				<div id="div-comment-1196971" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150803-00/?p=91191#comment-1196971">
			August 3, 2015 at 7:21 am</a>		</div>

		<p>Typo: &quot;First, we calculate the values of x, y and x&quot;</p>
<p>Should be &quot;First, we calculate the values of x, y and z&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196961">
				<div id="div-comment-1196961" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Oxford</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150803-00/?p=91191#comment-1196961">
			August 3, 2015 at 7:56 am</a>		</div>

		<p>Actually, it should be &quot;First, we calculate the values of x, y, and z&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1196951">
				<div id="div-comment-1196951" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150803-00/?p=91191#comment-1196951">
			August 3, 2015 at 8:44 am</a>		</div>

		<p>I get the general feeling that if they hadn&#39;t bothered with the compiler driven OOO execution the concepts of Itanium make for an awesome architechture</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1196941">
				<div id="div-comment-1196941" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150803-00/?p=91191#comment-1196941">
			August 3, 2015 at 9:11 am</a>		</div>

		<p>So the &quot;parallel&quot; comparisons are exceptions to the rule that both predicates are set to opposite values?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196931">
				<div id="div-comment-1196931" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150803-00/?p=91191#comment-1196931">
			August 3, 2015 at 11:26 am</a>		</div>

		<p>In the cmp.xx.unc &nbsp;table is &quot;p = qp &amp;&amp; ¬(r xx s)&quot; a typo? &nbsp;I think this should be q = &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196911">
				<div id="div-comment-1196911" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Julie Koubova</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150803-00/?p=91191#comment-1196911">
			August 3, 2015 at 5:25 pm</a>		</div>

		<p>I love this series, I&#39;ve never really used anything else than x86 and it really puts things into perspective, seeing how different other platforms can be :) Thank you, Raymond!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196901">
				<div id="div-comment-1196901" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogalooo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150803-00/?p=91191#comment-1196901">
			August 4, 2015 at 1:00 am</a>		</div>

		<p>@kantos You probably wouldn&#39;t have been able to implement OOO in hardware and include everything else that Itanium had. Itanium was one of Intels more successful follies. Hopefully the better ideas turned up in their x64 backend</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196891">
				<div id="div-comment-1196891" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150803-00/?p=91191#comment-1196891">
			August 4, 2015 at 3:59 am</a>		</div>

		<p>The &quot;really&quot; column is the same as the &quot;meaning&quot; column with operands reversed i.e. p = (a xx b) || p etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196881">
				<div id="div-comment-1196881" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150803-00/?p=91191#comment-1196881">
			August 4, 2015 at 4:12 am</a>		</div>

		<p>@Neil What is your point? The difference between the &quot;meaning&quot; and the &quot;really&quot; is that the &quot;meaning&quot; column states that p &amp; q are always updated. The &quot;really&quot; column states that p &amp; q are only updated in one outcome of the evaluation, in the other the register is not updated at all. This means that as long as instructions are only going to set or clear the registers then they can be run at the same time. If one could set and the next could clear then they cannot be run at the same time, they have to be run sequentially. It makes no difference to you as the programmer if p is clear and the comparison is not going to set it, but to hardware it makes a difference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196851">
				<div id="div-comment-1196851" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zack</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150803-00/?p=91191#comment-1196851">
			August 4, 2015 at 7:30 am</a>		</div>

		<p>I was pretty harsh on the memory addressing last week, so I feel I ought to say that the comparison instructions and predicate registers are IMNSHO something Itanium got *right* and it&#39;s too bad no one else has picked up on them. &nbsp;(I only know about two greenfield ISA designs since: AArch64 and RISC-V. &nbsp;AArch64 appears to have a traditional, single flags register, and RISC-V has fused compare-and-branch instructions. &nbsp;If there&#39;s a design I&#39;ve missed I&#39;d be glad to hear about it.)</p>
<p>If you have an OOO core, conditional *execution* of most non-branch instructions turns out to be a net lose, because it wastes fetch and decode bandwidth, and it doesn&#39;t give the branch predictor a chance to work its magic. &nbsp;However, I think a hybrid design with Itanium-like comparisons and predicates, but a limited set of conditional instructions (branch, reg-reg move, set-to-immediate, and maybe load/store) would work out well.</p>
<p>(Also, unconditional load/store of single predicate registers to RAM would be convenient. &nbsp;I don&#39;t remember if Itanium had that.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

