<html>
<head>
<title>Why is it possible to destroy a critical section while it is in use?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why is it possible to destroy a critical section while it is in use?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 23, 2009 / year-entry #409</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Some time back, Stu wondered why it is possible to destroy a critical section while it is in use. Well, there's nothing stopping you from creating a file that contains these lines: #include <windows.h> int __cdecl main(int, char**) { CRITICAL_SECTION cs; InitializeCriticalSection(&cs); EnterCriticalSection(&cs); DeleteCriticalSection(&cs); return 0; } and then telling your compiler to turn it...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Some time back,
Stu wondered
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/12/11/1259599.aspx#1263540">
why it is possible to destroy a critical section while it is in use</a>.
</p>
<p>
Well, there's nothing stopping you from creating a file that contains
these lines:
</p>
<pre>
#include &lt;windows.h&gt;
int __cdecl main(int, char**)
{
  CRITICAL_SECTION cs;
  InitializeCriticalSection(&amp;cs);
  EnterCriticalSection(&amp;cs);
  DeleteCriticalSection(&amp;cs);
  return 0;
}
</pre>
<p>
and then telling your compiler to turn it into a program.
It's not like a bolt of lightning is going to come out of the sky
and zap you before you hit the Enter key.
</p>
<p>
So obviously, it's possible.
</p>
<p>
On the other hand, it's a bug,
just like closing a handle to a file that another thread is
reading from,
or like closing an event handle that another thread is waiting on.
</p>
<p>
Critical sections are one of those low-level <i>I sure hope you know what
you're doing because I'm not going to help you if you mess up</i>
pieces of functionality.
If you use them incorrectly, then you will suffer the consequences,
the same as if you tried to free memory twice
or write to memory after freeing it
or cast a <code>Gdiplus::Color*</code> to a <code>CComBSTR*</code>.
</p>
<p>
Are there any legitimate cases where you would delete a critical
section while it is owned?
I sure can't think of any.
</p>
<p>
If there were a legitimate case for deleting a critical section
while it is owned, what could it be?
Well, it can't be owned by the thread doing the deleting,
because that would imply that you took it in order to prevent
somebody else from entering it (while you deleted it),
but that just creates another race condition:
If you tinker the timing, then you can create this
scenario:
That other thread gets
pre-empted just as it was about to execute the first
instruction of the <code>EnterCriticalSection</code> function.
Meanwhile, the destroying thread enters the critical section,
does whatever other stuff it wants to do,
and then deletes the critical section.
That other thread finally gets a chance to run and is now
attempting to enter a deleted critical section, which is clearly
not legal.
</p>
<p>
Okay, so if there were a legitimate case, it would have to be
deleting a critical section owned by some other thread.
Maybe that other thread enters the critical section, and then
signals the main thread to delete the critical section.
Why would it do that? Who knows.
Maybe it wants to make sure only one thread signals
the main thread.
But you still have the same problem as with the previous case:
You entered the critical section because you wanted to prevent
a third thread from entering the protected region,
but that third thread might have been pre-empted just as it
transferred control to the first instruction of
<code>EnterCriticalSection</code>,
and when that third thread finally gets some CPU time,
it proceeds to enter a deleted critical section.
</p>
<p>
So I can't think of a legitimate reason for deleting a critical
section while it's in use.
Maybe there's a flaw in my logic.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-797553">
				<div id="div-comment-797553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797553">
			December 23, 2009 at 7:23 am</a>		</div>

		<p>&quot;I think the question that Stu was trying to ask was in fact &quot;Why does DeleteCriticalSection() not check for critical sections being in use before deleting them, and refuse to do so if they are?&quot;&quot;</p>
<p>Another possible reason why is that the critical section functions have been around since the time when programmers were trusted to know what they were doing. &nbsp;They were responsible for making sure that they coded their programs correctly, not the OS. &nbsp;The check was therefore left out for performance reasons. &nbsp;Changing the behavior now could break existing programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797583">
				<div id="div-comment-797583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797583">
			December 23, 2009 at 8:31 am</a>		</div>

		<p>I once had to debug a nasty problem of this sort on the Xbox 360. &nbsp;Thread 1 was doing this:</p>
<p>class X {</p>
<p>&nbsp;volatile int mState;</p>
<p>&nbsp;CRITICAL_SECTION mCrit;</p>
<p>&nbsp;HANDLE mEvent;</p>
<p>};</p>
<p>X::Wait() {</p>
<p>&nbsp;while(mState != kDone) {</p>
<p>&nbsp; &nbsp;WaitForSingleObject(mEvent, INFINITE);</p>
<p>&nbsp;}</p>
<p>}</p>
<p>X::~X() {</p>
<p>&nbsp;DestroyCriticalSection(&amp;mCrit);</p>
<p>}</p>
<p>Thread 2 was doing this:</p>
<p>X::SetState(int state) {</p>
<p>&nbsp;EnterCriticalSection(&amp;mCrit);</p>
<p>&nbsp;// do some state logic</p>
<p>&nbsp;mState = state;</p>
<p>&nbsp;SetEvent(mEvent);</p>
<p>&nbsp;LeaveCriticalSection(&amp;mCrit);</p>
<p>}</p>
<p>The problem: if the thread scheduler decided to schedule thread 1 immediately after the event was signaled, it would return from Wait() and execute the object&#8217;s destructor shortly thereafter. &nbsp;Thread 2 exits immediately after SetState() returns.</p>
<p>However, in this scenario, the destructor in thread 1 calls DestroyCriticalSection() before thread 2 calls ExitCriticalSection(), resulting in a hard crash inside the kernel.</p>
<p>Solution: surround make sure to grab the critical section while reading mState from thread 1. &nbsp;This way, thread 2 will have definitely exited the critical section:</p>
<p>X::Wait() {</p>
<p>&nbsp;while(1) {</p>
<p>&nbsp; &nbsp;EnterCriticalSection(&amp;mCrit);</p>
<p>&nbsp; &nbsp;int state = mState;</p>
<p>&nbsp; &nbsp;ExitCriticalSection(&amp;mCrit);</p>
<p>&nbsp; &nbsp;if(state == kDone)</p>
<p>&nbsp; &nbsp; &nbsp;break;</p>
<p>&nbsp; &nbsp;WaitForSingleObject(mEvent, INFINITE);</p>
<p>}</p>
<p>[Also, Raymond, it would be nice if there was a way to post pretty code in the comments (or if you could point to the documentation that says how to do so, if it&#8217;s already possible)]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-797603">
				<div id="div-comment-797603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797603">
			December 23, 2009 at 9:34 am</a>		</div>

		<blockquote><p>
  &gt; X::~X()
</p></blockquote>
<p>You may have bigger problems than that as you are sharing a C++ object between threads without referencing counting it, increasing the chance of the other thread using a reference to a deleted object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797623">
				<div id="div-comment-797623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797623">
			December 23, 2009 at 9:59 am</a>		</div>

		<blockquote><p>
  &gt; You may have bigger problems than that as you are sharing a C++ object between threads without referencing counting it, increasing the chance of the other thread using a reference to a deleted object.
</p></blockquote>
<p>No. &nbsp;The second thread exits immediately after returning from that call to SetState(), so there are no dangling references.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-797633">
				<div id="div-comment-797633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797633">
			December 23, 2009 at 11:38 am</a>		</div>

		<p>Raymond,</p>
<p>Does checked build of kernel32 issue an assert if you delete an owned CS, or try to enter a deteled one?</p>
<p>P.S. It would be nice if on &#8220;ERROR: The code you entered was invalid, try again.&#8221; the browser returned to a #comment bookmark, not to the top of the page.</p>
<div class=post>[<i>I couldn&#8217;t find a reason why you would legitimately want to delete an owned critical section, but that doesn&#8217;t mean that no such reason exists. (For example, maybe your logic is complicated enough that the code which deletes the critical section doesn&#8217;t know whether or not it has been entered.) And how would the checked build even know that you passed an deleted critical section to EnterCriticalSection? Maybe your block of memory happens to look just like a block of memory that InitializeCriticalSection would have created. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797643">
				<div id="div-comment-797643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797643">
			December 23, 2009 at 11:39 am</a>		</div>

		<p>Adam,</p>
<p>I hope you don&#8217;t forget to also CloseHandle(hEvent) in the destructor?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-797653">
				<div id="div-comment-797653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797653">
			December 23, 2009 at 12:00 pm</a>		</div>

		<p>@Adam: &nbsp;I would have coded the read to enter the critical section as well, but in your case, couldn&#8217;t you have moved the SetEvent call to after the LeaveCriticalSection. &nbsp;It doesn&#8217;t appear that you need the SetEvent call inside the critical section.</p>
<div class=post>[<i>But then somebody might delete the critical section right after you leave it, causing the SetEvent(mEvent) to read memory after it was freed. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797663">
				<div id="div-comment-797663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797663">
			December 23, 2009 at 12:55 pm</a>		</div>

		<p>&#8220;The third reason is that clean-up functions can&#8217;t fail because, well, how do you clean up from a failed clean-up?&#8221;</p>
<p>From the docs for DeleteObject():</p>
<p>&#8220;Return Value</p>
<p>Nonzero indicates success.</p>
<p>Zero indicates that the specified handle is not valid or that the handle is currently selected into a device context.&#8221;</p>
<p>The function will fail if the handle is still selected into a DC. Likewise, DestroyCriticalSection() could have been designed to fail if any thread had an unbalanced call to EnterCriticalSection().</p>
<p>Your previous blog article in fact specifically provides for this exception: &#8220;These clean-up functions fall into the category of &#8216;Must not fail for reasons beyond the program&#8217;s control.'&#8221; &nbsp;That is, it&#8217;s not that the functions can&#8217;t fail. It&#8217;s that they can&#8217;t fail for reasons that are outside the control of the program calling them.</p>
<p>Calling DestroyCriticalSection() on a CS that has an unbalanced call to EnterCriticalSection() would be an error under the program&#8217;s control, and thus would be perfectly reasonable for the function to return an error instead of succeeding in that case.</p>
<p>Now, my guess is that there are other legitimate reasons for not returning an error. &nbsp;For example, the need to destroy the CS in the event that the thread that called EnterCriticalSection() has terminated abnormally, and thus cannot call LeaveCriticalSection() (though, of course the OS could impose additional logic, checking to see if the thread still exists and only generating the error if it does). &nbsp;Or perhaps it was just antithetical to the API design of that area of the OS to allow for errors.</p>
<p>But none of that means that it <em>couldn&#8217;t</em> be done.</p>
<div>[<i>I&#8217;m still not completely convinced that there is absolutely no scenario where deleting an owned critical section is valid. I vaguely recall that OS/2 had some situations where the standard solution was to exit a thread while it owned the critical section. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-797693">
				<div id="div-comment-797693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.paulbetts.org' rel='external nofollow' class='url'>Paul Betts</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797693">
			December 23, 2009 at 1:53 pm</a>		</div>

		<p>Sounds like something AppVerifier could catch</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797703">
				<div id="div-comment-797703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Perry Lorier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797703">
			December 23, 2009 at 2:52 pm</a>		</div>

		<p>I don&#8217;t do any windows coding, so I might be missing something here, but I can imagine a situation where you have something reference counted, with the reference count protected by the critical section. &nbsp;When the reference count hits zero (which needs to be done from within the critical section), you know tat there cannot be another object waiting on the critical section (since nothing else exists &#8212; the count is now 0), so you can free it. &nbsp;You could release it &nbsp;then free it just to be polite, but possibly it&#8217;s not necessary.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-797533">
				<div id="div-comment-797533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797533">
			December 23, 2009 at 7:16 am</a>		</div>

		<p>&#8220;So obviously, it&#8217;s possible.&#8221;</p>
<p>Hmmm&#8230;.obviously it&#8217;s possible to *call* DeleteCriticalSection() on a critical section that is in use.</p>
<p>That does not mean that DeleteCriticalSection() necessarily ought to be required to delete the critical section in such a case, instead of, say, *not* deleting the critical section and returning an error.</p>
<p>I think the question that Stu was trying to ask was in fact &#8220;Why does DeleteCriticalSection() not check for critical sections being in use before deleting them, and refuse to do so if they are?&#8221;. Or, &#8220;*Why* doesn&#8217;t this piece of functionality help you if you mess up?&#8221;.</p>
<p>One answer, as you pointed out, is that there might be a legitimate reason for doing so, even if none are immediately apparent.</p>
<p>One other is, of course, that operations on critical sections hold locks which you want to be holding for as short an amount of time as possible, and such checks would unnecessarily slow down the ordinary, non-buggy, case.</p>
<div class=post>[<i>The third reason is that <a href="http://blogs.msdn.com/oldnewthing/archive/2008/01/07/7011066.aspx" rel="nofollow">clean-up functions can&#8217;t fail because, well, how do you clean up from a failed clean-up</a>? You call DeleteCriticalSection and it fails. Now what? (And given that critical sections are held briefly, what really happens is that you call DeleteCriticalSection and one in 1,000,000 times, it fails. Yay, a nearly-impossible-to-debug memory leak.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797573">
				<div id="div-comment-797573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797573">
			December 23, 2009 at 7:57 am</a>		</div>

		<p>&quot;Or, &quot;*Why* doesn&#8217;t this piece of functionality help you if you mess up?&quot;</p>
<p>1) Well, Windows NT development started around 1989. &nbsp;In general, programs had to be lean so you did not have luxury checks. &nbsp;As Raymond wrote, you the programmer was trusted</p>
<p>2) The general philosophy in programming is that a close/finalize/dtor works. &nbsp;It doesn&#8217;t fail</p>
<p>This all ties back to the &quot;Worse is better&quot; argument. &nbsp;The ultimate goal is to keep the implementation as simple as possible, even at the expense of the public API. &nbsp;Platforms (operating system or code library) cannot be expected to save you from yourself. &nbsp;Don&#8217;t like it? &nbsp;Perhaps a scripting language would better suit you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-797713">
				<div id="div-comment-797713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DoesNotMatter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797713">
			December 23, 2009 at 5:24 pm</a>		</div>

		<p>Some extra fancy firewall/AV software ?</p>
<p>Or anti-cheating measures for online games ?</p>
<p>I&#8217;m basically seeing a triangle formed by:</p>
<p>Software A, Observer/Verifier, Software B</p>
<p>Software A has the critical section</p>
<p>Observer watches Software A and ensures that it does what it designed to do (ie. One mouseclick one action, no scramming the reactor without cause etc.).</p>
<p>Software B is something that interacts with Software A, be it game client or a hack attempt.</p>
<p>Problem is I dont see how this setup could really be feasible, I&#8217;m thinking that anything that can get to Software A also can get to Observer. And if my Observer is immune against the manipulation attempt against Software A why didn&#8217;t I incorporate the immunization directly into Software A ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797823">
				<div id="div-comment-797823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797823">
			December 24, 2009 at 9:57 am</a>		</div>

		<p>@Perry Lorier</p>
<p>InterlockedIncrment/InterlockedDecrement is what everybody uses for the refcount; no critical section necessary.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-797883">
				<div id="div-comment-797883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kujo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091223-00/?p=15563#comment-797883">
			December 24, 2009 at 2:05 pm</a>		</div>

		<p>If by &quot;owned&quot;, you mean the critical section thinks it has been entered by thread id x, then thread id y could legitimately delete it because it happens to know thread id x is gone.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

