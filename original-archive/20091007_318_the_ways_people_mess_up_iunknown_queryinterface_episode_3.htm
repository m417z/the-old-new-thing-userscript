<html>
<head>
<title>The ways people mess up IUnknown::QueryInterface, episode 3</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The ways people mess up IUnknown::QueryInterface, episode 3</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 7, 2009 / year-entry #319</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today we'll combine information you already know, some of which I covered in The ways people mess up IUnknown::QueryInterface with additional clues from The layout of a COM object. There's still not enough information for you to solve the problem entirely on your own, but maybe you can demonstrate your nascent psychic debugging powers and...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today we'll
combine information you already know,
some of which I covered in
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/03/26/96777.aspx">
The ways people mess up IUnknown::QueryInterface</a>
with additional clues from
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/02/05/68017.aspx">
The layout of a COM object</a>.
There's still not enough information for you to solve the problem
entirely on your own,
but maybe you can demonstrate your nascent
psychic debugging powers and solve the problem.
</p>
<p>
A customer contacted the shell team because their shell extension
was causing the shell to crash.
Perhaps they were doing something wrong, but they couldn't see what.
The crash looked like this:
</p>
<pre>
eax=cccccccc ebx=02b31798 ecx=0008db64 edx=02b26348 esi=001ea7fc edi=02b26348
eip=76381427 esp=0008db28 ebp=0008db30 iopl=0         nv up ei pl nz na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
76381427 8b08            mov     ecx,dword ptr [eax]  ds:0023:cccccccc=????????
</pre>
<p>
Your next hint is that the crash takes place while the shell
is trying to invoke a COM method.
</p>
<p>
What you should recognize is that this is either at the fetch
of a COM object's vtable or at the fetch of the pointer to
the <code>IUnknown::QueryInterface</code> method
(which is the first function in the vtable of any COM object).
</p>
<p>
Either way, we obviously have a bad COM object pointer.
The next hint is that the pointer was the result of a call
to <code>IUnknown::QueryInterface</code>:
</p>
<pre>
ISomeInterface* psi;
punkObj-&gt;QueryInterface(IID_ISomeInterface, (void**)&amp;psi);
...
</pre>
<p>
If you prefer to speak ATL, it would be something like
</p>
<pre>
CComQIPtr&lt;ISomeInterface&gt; spsi(punkObj);
...
</pre>
<p>
Either way, the problem is that the <code>punkObj</code>
responded to <code>IUnknown::QueryInterface</code>
by putting the special debugging value <code>0xCCCCCCCC</code>
into the output pointer rather than following the rules for
<code>IUnknown::QueryInterface</code> which require you either
to succeed and produce a valid object pointer
or to fail and set the output pointer to <code>NULL</code>.
</p>
<p>
The object in question came from the customer's shell extension.
After we pointed out to the customer that their
<code>IUnknown::QueryInterface</code> implementation did not adhere
to the interface contract,
all further communication ceased.
We never did get any acknowledgement or even a word of thanks.
Maybe they were too embarrassed.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-775583">
				<div id="div-comment-775583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775583">
			October 7, 2009 at 10:27 am</a>		</div>

		<p>So, did the shell team fix their own bug (ignoring the HRESULT from QueryInterface)?</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Postel" rel="nofollow">http://en.wikipedia.org/wiki/Postel</a>&#8216;s_Law</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-775613">
				<div id="div-comment-775613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775613">
			October 7, 2009 at 11:24 am</a>		</div>

		<p>@s</p>
<p>That&#8217;s all very well in theory but not so great for the user whose explorer window crashes. I don&#8217;t checking the HRESULT is too much to ask for given the other app compact things that Mr Chen has written about (I&#8217;m thinking in particular about the one where they corrected for a messed up stack.)</p>
<p>I would take this all back, of course, if it turns out there are more extensions that return a failing HRESULT but fill *ppv with a genuinely useful pointer (which is really deranged.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-775633">
				<div id="div-comment-775633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775633">
			October 7, 2009 at 11:43 am</a>		</div>

		<p>Oh, I can quite easily see somebody (mis)implementing QueryInterface as something like</p>
<p>void* result;</p>
<p>// Recklessly fail to initialise result</p>
<p>if (it&#8217;s an interface that I support)</p>
<p>{</p>
<p>&nbsp;// Set up result, all happy.</p>
<p>}</p>
<p>// Recklessly assume all is well</p>
<p>return S_OK;</p>
<p>in which case you&#8217;re screwed even if you check the return value&#8211;it&#8217;ll claim to have given you a usable pointer, but actually return garbage.</p>
<p>(I don&#8217;t see any preview button, so you will have to hope that that was formatted in some sort of sane manner.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-775643">
				<div id="div-comment-775643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775643">
			October 7, 2009 at 11:46 am</a>		</div>

		<p>Of course, there should be a</p>
<p>*ppv = result;</p>
<p>in there before the return.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-775673">
				<div id="div-comment-775673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775673">
			October 7, 2009 at 12:19 pm</a>		</div>

		<p>All COM methods that have [out] only arguments require the callee to set the output value whether there is an error or not. This is because COM is built on RPC which does not care about what HRESULT means, the output arguments still have to be able to be marshalled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-775713">
				<div id="div-comment-775713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775713">
			October 7, 2009 at 1:32 pm</a>		</div>

		<p>Ignore HRESULTs at your own peril. &nbsp;IUnknown::QueryInterface may fail for a number of reasons, not just E_NOINTERFACE. &nbsp;e.g. if the QI call has to allocate memory (tear off) it can fail even though the object could support the interface. &nbsp;And then if the interface provided a critical function, you could end up losing user data by treating out of memory the same as E_NOINTERFACE.</p>
<p>Personally I think that a better contract is that the returned interface pointer is set to NULL with a success HRESULT if the requested interface is not supported. &nbsp;This way a uniform simple test could be used instead of the more complex testing against E_NOINTERFACE (which in the end leads people to often do neither).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-775723">
				<div id="div-comment-775723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775723">
			October 7, 2009 at 2:46 pm</a>		</div>

		<p>The problem is not the contract; the problem is idiots who don&#8217;t follow the contract. &nbsp;You can fix the contract; you can&#8217;t fix the idiots.</p>
<p>Alternatively, you can lead an idiot to a contract but you can&#8217;t make him follow it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-775753">
				<div id="div-comment-775753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775753">
			October 7, 2009 at 3:28 pm</a>		</div>

		<p>Ha!</p>
<p>I&#8217;ve never programmed with COM at all, but looking at your crash dump summary that 0xcccccccc in eax stood out like a neon signpost.</p>
<p>Possible false positive? Sure, but an unlikely pattern like that seems like a good starting point. &nbsp;(Lot more example at <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Magic_number_%28programming%29#Magic_debug_values" rel="nofollow">http://en.wikipedia.org/wiki/Magic_number_%28programming%29#Magic_debug_values</a>)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-775763">
				<div id="div-comment-775763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775763">
			October 7, 2009 at 3:51 pm</a>		</div>

		<p>Well, yeah Nick. Raymond said as much in his post (&quot;by putting the special debugging value 0xCCCCCCCC into the output pointer&quot;). So we know something is likely uninitialized. This is a bit outside my psychic debugging abilities so I look forward to the answer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-775593">
				<div id="div-comment-775593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775593">
			October 7, 2009 at 10:33 am</a>		</div>

		<p>@Ben</p>
<p>You&#8217;re allowed to ignore the HRESULT from QueryInterface. The contract says it either succeeds and sets *ppv to a valid interface pointer, or it fails and sets *ppv to NULL. So long as ppv isn&#8217;t NULL (in which case you&#8217;re stuffed anyway), there is no real need to look at the return value of QueryInterface &#8211; all it tells you is whether *ppv will be NULL or not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-775843">
				<div id="div-comment-775843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Bright</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775843">
			October 7, 2009 at 8:24 pm</a>		</div>

		<p>Thanks to this post, I&#8217;ve just been through and corrected my QueryInterface implementations, which were setting the output pointer to &quot;this&quot; even if they failed. &nbsp;The world has been made a little bit better&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-775863">
				<div id="div-comment-775863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Hollebeek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775863">
			October 7, 2009 at 8:47 pm</a>		</div>

		<p>At one point, I was working on a DARPA research project that involved monitoring what was going on inside of Internet Explorer 4.0. &nbsp;We would call QueryInterface for IUnknown on arbitary objects passing through the scripting API, in order to determine object equality (this was needed for reasons I won&#8217;t go into here). &nbsp;Imagine our surprise when our software crashed &#8230; because certain objects inside IE returned E_NOT_SUPPORTED when queried for IUnknown.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-775873">
				<div id="div-comment-775873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775873">
			October 7, 2009 at 10:31 pm</a>		</div>

		<p>@John</p>
<p>I was suspicious of the 0xcccccccc value in eax before reading any further in Raymond&#8217;s post. &nbsp;As I said, I&#8217;m not familiar with COM so I wouldn&#8217;t be all the much help in debugging this, but numbers like that are something of a red flag (they jest ain&#8217;t natural, ya&#8217;see).</p>
<p>Oh well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-775883">
				<div id="div-comment-775883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Hollebeek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775883">
			October 7, 2009 at 10:47 pm</a>		</div>

		<p>Anyway, 0xcccccccc is the standard value for uninitialized local variables. &nbsp;I suspect something like:</p>
<p>int ret;</p>
<p>int code = E_NOT_IMPLEMENTED;</p>
<p>if ( ) {} else if ( ) {} else if ( ) { }</p>
<p>*outval = ret;</p>
<p>return code;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-775913">
				<div id="div-comment-775913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775913">
			October 8, 2009 at 1:35 am</a>		</div>

		<p>Hrm, and people ignore one of tghe more useful compiler warnings out there? Possible uninitialized variable usage should never occur unless by design, at which point there should be a good comment why (e.g., a bug in Debian&#8217;s OpenSSL build where uninitialized mempry was used as a small source of entropy, but caused tools like valgrind/lint to complain, so the packager &quot;fixed&quot; it, but inadvertently introduced a bug that reduced entropy&#8230;).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-775973">
				<div id="div-comment-775973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-775973">
			October 8, 2009 at 9:12 am</a>		</div>

		<p>&quot;Either way, the problem is that the punkObj responded to IUnknown::QueryInterface by putting the special debugging value 0xCCCCCCCC into the output pointer&quot;</p>
<p>Well, either that, either it was a combination of a debug build and an uninitialized stack variable!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776033">
				<div id="div-comment-776033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-776033">
			October 8, 2009 at 11:17 am</a>		</div>

		<p>I felt the giggles begin when I saw eax, and by the time I was at ds:0023:cccccccc= there was tea everywhere. I know it&#8217;s wrong to laugh at other people&#8217;s miseries, but in cases like this I just can&#8217;t help it. I hope that doesn&#8217;t make me a bad person.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776063">
				<div id="div-comment-776063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Eshbach</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-776063">
			October 8, 2009 at 11:23 am</a>		</div>

		<p>This reminds me of seeing developers who need to add new functionality to a published interface so instead of creating a new interface they just add the new methods to the end of the existing published interface.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776243">
				<div id="div-comment-776243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-776243">
			October 8, 2009 at 2:25 pm</a>		</div>

		<blockquote><p>
  This reminds me of seeing developers who need to add new functionality to a published interface so instead of creating a new interface they just add the new methods to the end of the existing published interface.
</p></blockquote>
<p>It&#8217;s called inheritance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776903">
				<div id="div-comment-776903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">s</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091007-00/?p=16463#comment-776903">
			October 12, 2009 at 8:32 am</a>		</div>

		<p>@Tim Hollebeek</p>
<p>That&#8217;s kind of allowed though &#8211; if you&#8217;re working on a scripting engine which (say) has great IDispatch support, and you needed to pass a local object through it you can pass an object which only supports IDispatch and ignores the rest of COM, as long as a) you own the scripting engine and you know it will cope and b) you never hand that interface pointer to someone who will assume it supports IUnknown. I know very little about scripting engines, but I don&#8217;t recall in my limited jscript experience being told &quot;this object is definitely a COM object and here is an IDispatch you can party on&quot;, even though presumably under the hood that is how it works most of the time.</p>
<p>I&#8217;ve definitely written objects &nbsp;which look enough like a real COM object to satisfy the otherwise COM-to-the-core app architecture &#8211; sometimes it is a useful shortcut &#8211; but I always owned both ends of the contract.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

