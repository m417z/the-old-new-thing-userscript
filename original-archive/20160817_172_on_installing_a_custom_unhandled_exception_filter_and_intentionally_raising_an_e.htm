<html>
<head>
<title>On installing a custom unhandled exception filter and intentionally raising an exception to get its attention</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>On installing a custom unhandled exception filter and intentionally raising an exception to get its attention</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 17, 2016 / year-entry #173</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160817-00/?p=94106</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Mind those stack frames.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported that they were seeing inconsistent
behavior when they intentionally raised a Win32 exception
and tried to catch it in a custom unhandled exception filter.
</p>
<pre>
#define CUSTOM_EXCEPTION 0xABCDEF01

LONG WINAPI CustomFilter(EXCEPTION_POINTERS* exceptionPointers)
{
 if (exceptionPointers-&gt;ExceptionRecord
                      -&gt;ExceptionCode == CUSTOM_EXCEPTION) {
  return EXCEPTION_CONTINUE_EXECUTION;
 }
 return EXCEPTION_EXECUTE_HANDLER;
}

void Test()
{
 auto previousFilter = SetUnhandledExceptionFilter(CustomFilter);
 RaiseException(CUSTOM_EXCEPTION, 0, 0, nullptr);

 try {
  RaiseException(CUSTOM_EXCEPTION, 0, 0, nullptr);
  throw (int)0;
  Log("Returned from throw");
 } catch (int) {
  Log("Caught");
 }
 SetUnhandledExceptionFilter(previousFilter);
}
</pre>
<p>
The customer observed a few things.
</p>
<p>
First,
if the <code>Test</code> function was called from
inside a window procedure,
then the behavior changed depending on the execution
environment,
as documented
<a HREF="https://msdn.microsoft.com/library/windows/desktop/ms633573(v=vs.85).aspx">
here</a>.
</p>
<p>
Second, the custom filter was not called at all
if the program was running under the debugger.
<a HREF="https://msdn.microsoft.com/library/windows/desktop/ms680634(v=vs.85).aspx">
The documentation for
<code>Set&shy;Unhandled&shy;Exception&shy;Filter</code></a>
says that if the program is not being debugged,
then the custom unhandled exception filter is called,
but it doesn't say what happens if the program <i>is</i>
being debugged.
</p>
<p>
The customer's question was "What is the expected
behavior if the program is being debugged?"
</p>
<p>
First, let's answer the question:
The expected behavior if the program is being debugged
is that the custom unhandled exception filter is ignored.&sup1;
</p>
<p>
But let's step back and look at the bigger picture here.
</p>
<p>
This program is violating one of the cardinal rules of
Win32 exceptions:
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653">
Exceptions must not cross foreign stack frames</a>.
If you are going to raise an exception in one place
and handle it in another,
then every stack frame that the exception travels through
must be aware of your little game.
After all, if they aren't aware of your game,
you don't know what they will do when they see your
custom exception!
</p>
<p>
The unhandled exception filter runs as the very last
exception filter,
which means that before control reaches the unhandled
exception filter,
it must go through every single active stack on your thread,
including the stack frames outside your control,
like the ones that set up the call to the window procedure.
So you've already left the world of predictable behavior.
</p>
<p>
&sup1;The intended purpose of the custom unhandled
exception filter is to capture additional program state
for post-mortem debugging purposes.
If a debugger is connected to the process,
the thinking is that you connected the debugger
because you want it to
be informed of the exception and freeze the program so you can,
y'know, debug it.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1260895">
				<div id="div-comment-1260895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160817-00/?p=94106#comment-1260895">
			August 17, 2016 at 7:19 am</a>		</div>

		<p>I would think that expecting defined behavior for any exception not raised with `throw` would be rather foolish&#8230; as `throw` is the only one carrying an ISO standard behind it. In fact I would expect that `RaiseExeception` would explicitly be documented to NOT clean up stack frames and support RAII</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-2 parent" id="comment-1260905">
				<div id="div-comment-1260905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160817-00/?p=94106#comment-1260905">
			August 17, 2016 at 7:39 am</a>		</div>

		<p>The only wrinkle in that idea is that Microsoft themselves implement their C++ exceptions using SEH.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude even depth-3 parent" id="comment-1260915">
				<div id="div-comment-1260915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160817-00/?p=94106#comment-1260915">
			August 17, 2016 at 7:48 am</a>		</div>

		<p>True, but throwing an exception through C code is undefined behavior anyway; though most runtime libraries &#8220;support&#8221; it. A better way is to assume that all OS or third party library callbacks must be <code>noexcept</code> unless explicitly documented otherwise. This fits with the whole &#8220;Exceptions on WIN32 are supposed to be Exceptional and therefore Fatal&#8221; thing.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-ipoverscsi odd alt depth-4" id="comment-1260945">
				<div id="div-comment-1260945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ipoverscsi' rel='external nofollow' class='url'>ipoverscsi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160817-00/?p=94106#comment-1260945">
			August 17, 2016 at 8:26 am</a>		</div>

		<p>Amazingly, you have managed to rephrase &#8220;exceptions must not cross foreign stack frames&#8221; with eight times as many words.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk even thread-odd thread-alt depth-1" id="comment-1261105">
				<div id="div-comment-1261105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160817-00/?p=94106#comment-1261105">
			August 18, 2016 at 7:09 am</a>		</div>

		<p>It may seem obvious that &#8220;if the program is running under the debugger, the custom exception handler is not called&#8221;, but that&#8217;s not always the case.  </p>
<p>Lots of program and API documentation says things like &#8220;If A, then B&#8221; while omitting to say &#8220;If not A, then C&#8221;, especially when C is not obvious.  Or, it says &#8220;If A, then B&#8221; while leaving out &#8220;If C, then D&#8221; and &#8220;If E, then F&#8221;.  I know that writing documentation is hard.</p>
<p>My other pet peeve about documentation is that every place where the syntax for SETTING some value or option should also tell how to query the setting.</p>
<p>Anyway, that was a slight digression, but thanks for the info.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-even depth-1 parent" id="comment-1261165">
				<div id="div-comment-1261165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160817-00/?p=94106#comment-1261165">
			August 18, 2016 at 10:21 am</a>		</div>

		<p>Why are there two RaiseException calls?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1262195">
				<div id="div-comment-1262195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160817-00/?p=94106#comment-1262195">
			August 25, 2016 at 3:18 am</a>		</div>

		<p>The customer apparently was also trying to verify, whether mixing C++ exception handling and SEH is a smart thing to do. (Plot spoiling ahead: It ain&#8217;t.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

