<html>
<head>
<title>What is this inconsistent heap state that MSDN warns me about during DLL_PROCESS_DETACH?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What is this inconsistent heap state that MSDN warns me about during DLL_PROCESS_DETACH?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 13, 2015 / year-entry #33</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In the MSDN documentation for the Dll­Main entry point, MSDN notes: When handling DLL_PROCESS_DETACH, a DLL should free resources such as heap memory only if the DLL is being unloaded dynamically (the lpReserved¹ parameter is NULL). If the process is terminating (the lpvReserved parameter is non-NULL), all threads in the process except the current thread...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>In the MSDN documentation for the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682583(v=vs.85).aspx"> <code>Dll&shy;Main</code> entry point</a>, MSDN notes:</p>
<blockquote class="q"><p> When handling <b>DLL_<wbr>PROCESS_<wbr>DETACH</wbr></wbr></b>, a DLL should free resources such as heap memory only if the DLL is being unloaded dynamically (the <i>lpReserved</i>&sup1; parameter is <b>NULL</b>). If the process is terminating (the <i>lpvReserved</i> parameter is non-<b>NULL</b>), all threads in the process except the current thread either have exited already or have been explicitly terminated by a call to the <b>Exit&shy;Process</b> function, which might leave some process resources such as heaps in an inconsistent state. In this case, it is not safe for the DLL to clean up the resources. Instead, the DLL should allow the operating system to reclaim the memory. </p>
</blockquote>
<p> A customer wanted to know, "What is this inconsistent heap state that MSDN is talking about here?" </p>
<p> The information is actually right there in the sentence. "... <u>explicitly terminated by a call to the <b>Exit&shy;Process</b> function</u>, which might leave some process resources such as heaps in an inconsistent state." </p>
<p> When you see text that says "X might lead to Y," then when you ask "What could lead to Y?" you might consider that it is X. </p>
<blockquote class="q" style="width: 20em; float: right"><p> <b>Background reading</b>: <a href="http://blogs.msdn.com/b/oldnewthing/archive/2007/05/03/2383346.aspx"> Quick overview of how processes exit on Windows XP</a>, plus bonus electrification of <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/01/22/9951750.aspx"> critical sections</a> and <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/10/07/10221348.aspx"> slim reader/writer locks</a>. </p>
</blockquote>
<p> Okay, I'll give the customer the benefit of the doubt and assume that the question was more along the lines of "Why would termination by a call to the <b>Exit&shy;Process</b> function lead to an inconsistent state?" </p>
<p> Remember why <code>Terminate&shy;Thread</code> is a horrible idea: It terminates the thread in the middle of whatever it is doing, not giving it a chance to restore consistency or otherwise provide for an orderly end to operations. The thread may have been in the middle of updating a data structure, which usually involves <a href="http://blogs.msdn.com/b/oldnewthing/archive/2009/11/13/9921676.aspx"> perturbing an invariant, then re-establishing it</a>. If it was terminated before it could re-establish the invariant, you now have an inconsistent data structure. </p>
<p> That's the sort of inconsistency the paragraph is talking about. If one of the threads terminated by <code>Exit&shy;Process</code> was executing heap code at the moment it was terminated, then the heap may be inconsistent because the thread never got a chance to re-establish consistency. (The heap <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/01/06/10253727.aspx"> tries to detect that this has happened</a> but all that does is transform one failure mode into another. The failure is still there.) </p>
<p> Of course, the heap isn't the only resource that suffers from this problem. Any resource that is available to more than one thread is susceptible to this. It's just that the heap is a very popular shared resource, so it gets an extra mention in the documentation. </p>
<p> &sup1; Typo. Should be <i>lpvReserved</i>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1175733">
				<div id="div-comment-1175733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175733">
			February 13, 2015 at 7:07 am</a>		</div>

		<p>Ah yes the oldest case of a boolean pointer. It might be entertaining to write a hundred bytes or so to disk at that point to see what it points too, but I can&#39;t imagine what there is to do with it. Can&#39;t do much w/ no heap anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175773">
				<div id="div-comment-1175773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ishai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175773">
			February 13, 2015 at 8:39 am</a>		</div>

		<p>So what is the point of calling the DLL entry point in this case? &nbsp;Why doesn&#39;t Win32 just terminate the main thread too?</p>
<div class="post">[<em>How would you implement C++ global destructors? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175783">
				<div id="div-comment-1175783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175783">
			February 13, 2015 at 9:11 am</a>		</div>

		<p>@Joshua: I&#39;d expect the pointer to point to something useful in the DLL_PROCESS_ATTACH or DLL_THREAD_ATTACH cases, and to have been repurposed as a boolean in the DLL_PROCESS_DETACH or DLL_THREAD_DETACH cases. Something internal like the PEB, the TEB, or the PE header.</p>
<p>Wine seems to always either pass 0 or 1 as the pointer, so even if it ever pointed to something useful, there should not be many programs in the wild depending on it.</p>
<p>Perhaps it&#39;s a Win16 leftover? I found a documentation for Win16&#39;s LibMain where the last parameter was lpszCmdLine. So my final guess would be: in DLL_PROCESS_ATTACH, when the DLL was imported directly by the executable, it was originally designed to point to the command line or something related to the command line, to ease porting from Win16; when the DLL was loaded dynamically, it&#39;s NULL. In all the other cases (thread attach and thread/process detach), it&#39;s free, so it was overloaded in the DLL_PROCESS_DETACH case to allow the DLLs to know when to free resources or not (as explained by Raymond in this post).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175793">
				<div id="div-comment-1175793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175793">
			February 13, 2015 at 9:58 am</a>		</div>

		<p>@Cesar: Now that&#39;s almost Raymond quality.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1175803">
				<div id="div-comment-1175803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175803">
			February 13, 2015 at 10:33 am</a>		</div>

		<p>[How would you implement C++ global destructors? -Raymond]</p>
<p>It&#39;s not safe to call global destructors, too, because those objects can try to free some heap buffers, without knowing it&#39;s not safe.</p>
<p>It would make sense, though, to have some global flag in HeapFree, set at ExitProcess call time, to skip actual heap freeing.</p>
<div class="post">[<em>It&#39;s safe if your program is single-threaded, since no threads get terminated in that case. And for over a decade, C++ was a single-threaded language. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175813">
				<div id="div-comment-1175813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175813">
			February 13, 2015 at 10:39 am</a>		</div>

		<p>&quot;[How would you implement C++ global destructors? -Raymond]&quot;</p>
<p>Since you couldn&#39;t generally depend on those destructors not doing dangerous stuff with the heap, perhaps you would decide that it is better not to call those destructors in this case. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175823">
				<div id="div-comment-1175823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175823">
			February 13, 2015 at 10:40 am</a>		</div>

		<p>I presume that the same applies to DLL_PROCESS_DETACH in TLS callbacks?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175833">
				<div id="div-comment-1175833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175833">
			February 13, 2015 at 11:04 am</a>		</div>

		<p>[It&#39;s safe if your program is single-threaded, since no threads get terminated in that case. And for over a decade, C++ was a single-threaded language. -Raymond]</p>
<p>I also am in the habit of trying to make sure that all threads besides the main thread exits before the application itself closes. Obviously that isn&#39;t always possible though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-1175843">
				<div id="div-comment-1175843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175843">
			February 13, 2015 at 11:10 am</a>		</div>

		<p>@Cesar: AFAIK on NT it is a pointer to a CONTEXT structure, and sometimes it is declared as PCONTEXT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175853">
				<div id="div-comment-1175853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175853">
			February 13, 2015 at 11:28 am</a>		</div>

		<p>@Yuhong Bao: It seems you nailed it. Searching the web for &quot;DllMain PCONTEXT&quot; returns articles like this one: <a rel="nofollow" target="_new" href="http://www.nynaeve.net/?p=127">http://www.nynaeve.net/?p=127</a></p>
<p>From that article: &quot;Win9x is, of course, completely dissimilar as far as DllMain goes. None of this information applies there.&quot;</p>
<p>&#8230;so yeah, it screams &quot;implementation detail&quot;, as I had expected.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hankhein even thread-even depth-1" id="comment-1175873">
				<div id="div-comment-1175873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henri+Hein' rel='external nofollow' class='url'>Henri Hein</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175873">
			February 13, 2015 at 12:59 pm</a>		</div>

		<p>@Ishai: We drew different lessons. You concluded &quot;don&#39;t do anything in DllMain().&quot; I concluded &quot;Make sure your threads are done before exiting the process.&quot; &nbsp;If you write a DLL and use threads, design a way to make the threads exit before DllMain gets called. Correctly implement DllCanUnloadNow(). Etc. (I once had a case where the ATL framework gave me the wrong result for DllCanUnloadNow() and I had to write my own, possibly because I did something wrong with ATL).</p>
<div class="post">[<em>Hwo do you prevent someone from calling ExitProcess before your threads are finished? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175883">
				<div id="div-comment-1175883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175883">
			February 13, 2015 at 2:11 pm</a>		</div>

		<p>[Hwo do you prevent someone from calling ExitProcess before your threads are finished? -Raymond]</p>
<p>API Documentation?</p>
<div class="post">[<em>It&#39;s generally considered bad form for a DLL to make demands on when the process exits. (Say your DLL is being used as a plug-in in another process. That host process doesn&#39;t know your DLL&#39;s crazy rules. it&#39;s your responsibility to follow the host process&#39;s rules, not vice versa.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hankhein even thread-even depth-1" id="comment-1175893">
				<div id="div-comment-1175893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henri+Hein' rel='external nofollow' class='url'>Henri Hein</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175893">
			February 13, 2015 at 2:23 pm</a>		</div>

		<p>@Raymond: If I discover that a library I use calls ExitProcess, or any of its cousins, like abort() or TerminateProcess(), I will at the least rewrite my use of the library to prevent the code-path that triggers it. &nbsp;At worst, I will happily take the hit to replace the library. &nbsp;I feel that strongly about it.</p>
<p>I realize that doesn&#39;t work when your product supports run-time configuration of plug-ins. &nbsp;I haven&#39;t worked on a product that relied heavily on plug-ins, and when encountering such a plug-in, I have been known to ask CS to tell users with it to uninstall it.</p>
<p>I also realize there are exceptional circumstances, such as a rarely seen exception. &nbsp;Depending how often it occurs, I might have bigger priorities, but again, my preference would be to either rewrite code to avoid that exception from being thrown, or write an error-handler for it and exit cleanly, if possible.</p>
<div class="post">[<em>I&#39;m not talking about some random DLL calling ExitProcess. That&#39;s also rude. I&#39;m talking about you, a DLL, a guest in someone else&#39;s house, creating additional rules for the house. You may not even have been invited to the house by the owner. Maybe the main process loaded a DLL, and that DLL in turn loads your DLL. How can the intermediate DLL communicate its restrictions back to the host process? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hankhein odd alt thread-odd thread-alt depth-1" id="comment-1175903">
				<div id="div-comment-1175903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henri+Hein' rel='external nofollow' class='url'>Henri Hein</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175903">
			February 13, 2015 at 2:29 pm</a>		</div>

		<p>@Raymond, after I see your response to Joshua, I realized you mean, how do I prevent someone from calling ExitProcess before my threads in my DLL is finished. &nbsp;When I provide a DLL, I usually provide it through COM interfaces, and I rely on DllCanUnloadNow() to tell me when it&#39;s time to exit and let the host know it is safe to do so, as the name implies. &nbsp;I don&#39;t know how safe that is, but I have generally have had good luck with it. &nbsp;Also, such DLLs rarely has as much in-memory state that I&#39;m concerned about losing (for instance, I don&#39;t remember the last time I have had any critical IO going on inside a DLL.) &nbsp;</p>
<div class="post">[<em><a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/11/06/10464022.aspx">CoUninitalize will ask a DLL if it is okay to unload now, but the answer is a foregone conclusion</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hankhein even thread-even depth-1" id="comment-1175913">
				<div id="div-comment-1175913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henri+Hein' rel='external nofollow' class='url'>Henri Hein</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175913">
			February 13, 2015 at 2:52 pm</a>		</div>

		<p>@Raymond: Yes, the call is a foregone conclusion, and I learned that the hard way, but I still get the chance to check on internal state and do my housekeeping. &nbsp;By this time, any threads I started will have been told it&#39;s time to quit, so all I have to do is WaitFor&#8230;(). &nbsp;My worker threads tend to exit quickly when told to do so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1175923">
				<div id="div-comment-1175923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175923">
			February 13, 2015 at 4:08 pm</a>		</div>

		<p>&gt; What is this inconsistent heap state that MSDN is talking about here?</p>
<p>&gt; When you see text that says &quot;X might lead to Y,&quot; then when you ask &quot;What could lead to Y?&quot; you might consider that it is X.</p>
<p>Your analogy does not seem to apply to the customer&#39;s question as you stated it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175933">
				<div id="div-comment-1175933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175933">
			February 13, 2015 at 4:19 pm</a>		</div>

		<p>[it&#39;s your responsibility to follow the host process&#39;s rules, not vice versa.) -Raymond]</p>
<p>Which has led to me on more than one occasion when using a DLL with different rules, to isolate it by spawning another EXE and marshaling calls to it. The general form of this rule is not being followed at all. Especially when some EXEs have the rule &quot;Don&#39;t create windows&quot; or &quot;Don&#39;t start COM (because of the previous rule)&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175963">
				<div id="div-comment-1175963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175963">
			February 14, 2015 at 2:31 am</a>		</div>

		<p>Why is it still called lpvReserved if its meaning is documented?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175983">
				<div id="div-comment-1175983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175983">
			February 15, 2015 at 3:04 pm</a>		</div>

		<p>&gt; [Hwo do you prevent someone from calling ExitProcess before your threads are finished? -Raymond]</p>
<p>You don&#39;t. ExitProcess (and abort()) etc are all dangerous functions if the caller doesn&#39;t know that there is only one thread currently running. If you&#39;re writing a DLL, implement some kind of &quot;detach&quot; function if one is provided, and expect your EXE to call it before aborting your background threads.</p>
<p>If the EXE doesn&#39;t have some interface whereby it calls your DLL to safely tell you that it&#39;s about to yank out your threads from under you via ExitProcess, then the fault for the deadlocks and memory corruptions that might ensue are the fault of the caller of ExitProcess, not the fault of the DLL that failed to safely recover from it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1175993">
				<div id="div-comment-1175993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1175993">
			February 15, 2015 at 8:15 pm</a>		</div>

		<p>I remember the API documentation of some webcam explicitly said that you have to call &lt;their_DLL_name&gt;_Cleanup() before exit or the cam will fail to initialize the next time you want to load it.</p>
<p>Maybe when all else fails, just create separate function that allow the hosting process calls for cleanup?</p>
<p>Generally if someone always fails the second time, the programmer should know they should check the documentation or ask.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx even thread-even depth-1" id="comment-1176113">
				<div id="div-comment-1176113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1176113">
			February 16, 2015 at 9:48 pm</a>		</div>

		<p>ExitProcess never does what I want. A while ago I changed everywhere I called it to TerminateProcess. Disabling locks and letting wild threads scribble over memory mapped data files&#8230; I read the justifications but I STILL think Microsoft was wrong to implement ExitProcess the way they did.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1176433">
				<div id="div-comment-1176433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1176433">
			February 18, 2015 at 4:34 pm</a>		</div>

		<p>&quot;[How would you implement C++ global destructors? -Raymond]</p>
<p>[&#8230;. And for over a decade, C++ was a single-threaded language. -Raymond]&quot;</p>
<p>Do you happen to have any topics queued up covering thread_local constructors and destructors in VS2015? Aside from the obvious parts of &quot;don&#39;t do anything exciting, because it&#39;s still basically DllMain&quot;.</p>
<div class="post">[<em>I think you meant to direct this question to Stephan T. Lavavej. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1176453">
				<div id="div-comment-1176453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150213-00/?p=44683#comment-1176453">
			February 18, 2015 at 6:33 pm</a>		</div>

		<p>Probably, but the parts I&#39;m interested in are more OS-interaction specific, and those seem to not be in his domain of expertise. You can&#39;t really point to a section in the standard for what happens to thread_local variables in a DLL when the DLL is dynamically unloaded. But, thank you.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

