<html>
<head>
<title>The PowerPC 600 series, part 9: The table of contents</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The PowerPC 600 series, part 9: The table of contents</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 16, 2018 / year-entry #187</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180816-00/?p=99505</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>2</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Finding your bearings.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We saw that
the PowerPC 600 series gives you absolute addressing to the top
and bottom
32<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">KB</a>
of address space.
But that doesn't buy you much on Windows NT programs,
because all of those addresses are not usable by 32-bit programs.
By convention, the <var>r2</var> register contains a value called
the <i>table of contents</i>,
which is a pointer to
a list of interesting constants the function needs.
You can put addresses of global variables here,
or you can put other useful constants.
</p>
<p>
In principle,
each function gets its own table of contents,
but in practice, the Microsoft compiler generates a single table
of contents for the entire module,
similar to
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20150731-00/?p=90771">
what the Itanium does</a>.
In theory, you could even put your variables directly in the table
of contents (which is what the Itanium does),
but the Microsoft compiler doesn't.
It puts the table of contents in read-only memory.
In Itanium-speak you might say that
every global variable is considered large.
I'm guessing this is to improve page sharing between processes
since the table of contents would otherwise be a mix of read-write data
and read-only data,
but it does mean that accessing any global variable requires <i>two</i>
memory accesses:
</p>
<pre>
    lwz     r3, n(r2)       ; load pointer to variable from toc
    lwz     r3, (r3)        ; load the variable's value
</pre>
<p>
The displacement field of the load instruction has a reach of
&plusmn;32KB,
which means that your table of contents has a comfortable maximum size
of 64KB.
(You would naturally set your table of contents pointer to be
32KB past the start of the table of contents, so that you
could take advantage of negative offsets.)
But what if you have more than 16384 global objects?
No problem, because you don't need a separate pointer in the table of
contents for each global object.
You can group your global objects into chunks of 64KB
and use a single pointer to access the entire chunk.
If you have 16384 pointers, each of which can access 64KB of memory,
the total amount of memory addressible from the table of contents is
one gigabyte, which is hopefully enough to cover all your global objects.
</p>
<p>
(Also, if you have a monstrous 1-gigabyte global array,
you can dedicate a single table of contents entry to that global array.
You don't need a separate entry for each 64KB chunk.)
</p>
<p>
Note that you can have global things other than variables.
For example, you'll probably have jump tables for switch statements
and vtables for virtual functions.
</p>
<p>
Since each function requires its table of contents to be set properly,
a function pointer on PowerPC is not a pointer to the first instruction.
Instead, it's a pointer to a structure consisting of two pointers:
The first pointer points to the first instruction of the function,
and the second pointer is the table of contents for the function.&sup1;
</p>
<p>
The sequence for calling through a function pointer goes like this:
</p>
<pre>
    ; call the function pointed to by r11
    ; assumes that our function's toc is saved on the stack at n(r1)
    lwz     r12, (r11)   ; get the code pointer
    lwz     r2, 4(r11)   ; set r2 to the toc for the function being called
    mtctr   r12          ; put code pointer in ctr
    bctrl                ; branch to ctr and link
    lwz     r2, n(r1)    ; restore our toc
</pre>
<p>
We load the code pointer and put it into <var>ctr</var>.
We also load the table of contents for the target function into <var>r2</var>
so it can access its global variables.
We then call the function by calling through <var>ctr</var>,
and when the function returns, we restore our function's <var>r2</var>
from wherever we had saved it (typically the stack).
</p>
<p>
If you're calling a function within the same module, you don't need
to update <var>r2</var> because all the functions in a module
use the same table of contents.
</p>
<p>
But what if you don't know whether the function is in the same module?
For example, it might be an import stub for a na&iuml;vely-imported function.
Now,
in the modern days of link-time code generation, you can tell
whether the destination is in the module or not,
but in the old days of classical compiling and linking,
the only time the compiler would be certain that the target function
is in the same module is when the target function is defined in the same
translation unit.
Otherwise, the compiler isn't quite sure.
It could do like the Itanium does and always include a
reload of <var>r2</var> after the call returns, just in case.
But that costs a memory access,
so the PowerPC does things a little differently.
To dig into what happens,
we need to learn about the rest of the
PowerPC calling convention,
which we'll start looking at
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180817-00/?p=99515">
next time</a>.
</p>
<p>
&sup1;
Other ABIs add a third pointer to the structure, called the
"environment".
Windows NT makes do with just two pointers.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1356745">
				<div id="div-comment-1356745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180816-00/?p=99505#comment-1356745">
			August 16, 2018 at 8:11 am</a>		</div>

		<p>I&#8217;m very disappointed the table of contents register load wasn&#8217;t simply the first two instructions of the function. (We saw earlier that it takes two instructions to load a constant into a register.) It costs one fewer loader fixups than fixing up the two pointer table that is used otherwise.</p>
<p>If your compiler/linker got smart it could correct internal calls to jump over the table of contents instructions when making module internal calls, so it ends up being actually cheaper in all cases.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1356755">
				<div id="div-comment-1356755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180816-00/?p=99505#comment-1356755">
			August 16, 2018 at 8:36 am</a>		</div>

		<p>Doing it that way would break the rule that there are no fixups in the code segment.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

