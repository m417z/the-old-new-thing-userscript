<html>
<head>
<title>Debugging walkthrough: Diagnosing an NX exception</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Debugging walkthrough: Diagnosing an NX exception</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 11, 2016 / year-entry #32</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160211-00/?p=93012</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Leap of faith.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A colleague of mine asked for help debugging a strange failure.
Execution halted because the CPU detected that it was trying
to execute data.
</p>
<pre>
ABC!__PchSym_ (ABC+0x67be4)
user32!UserCallWinProcCheckWow+0x140
user32!DispatchClientMessage+0xa2
user32!__fnDWORD+0x2d
ntdll!KiUserCallbackDispatcherContinue
user32!ZwUserPeekMessage+0xa
user32!PeekMessageW+0x7f
explorerframe!CExplorerFrame::FrameMessagePump+0x5b
explorerframe!BrowserThreadProc+0x5e
explorerframe!BrowserNewThreadProc+0x3a
explorerframe!CExplorerTask::InternalResumeRT+0x12
explorerframe!CRunnableTask::Run+0xc9
shell32!CShellTaskThread::ThreadProc+0x284
shell32!CShellTaskThread::s_ThreadProc+0x2b
SHCore!_WrapperThreadProc+0x15f
kernel32!BaseThreadInitThunk+0xd
ntdll!RtlUserThreadStart+0x1d

EXCEPTION_RECORD:  (.exr -1)
ExceptionAddress: 00007ffcfd197be4 (ABC+0x67be4)
   ExceptionCode: c0000005 (Access violation)
  ExceptionFlags: 00000000
NumberParameters: 2
   Parameter[0]: 0000000000000008
   Parameter[1]: 00007ffcfd197be4
Attempt to execute non-executable address 00007ffcfd197be4
</pre>
<p>
My colleague suspected that a return address got overwritten by
some function deeper in the stack,
and that caused the instruction pointer to jump to a random module,
and the victim module was ABC.
</p>
<p>
I looked at the crash dump, and came to a different conclusion.
The stack is just fine.
The problem is that a DLL got unloaded:
</p>
<pre>
0:067&gt; lm
...
Unloaded modules:
...
00007ffc`fd140000 00007ffc`fd1ee000   DEF.dll
...
</pre>
<p>
After <code>DEF.dll</code> got unloaded,
<code>ABC.DLL</code> got loaded into the same location.
</p>
<pre>
0:067&gt; .reload /unl DEF.dll
WARNING: DEF overlaps ABC
</pre>
<p>
The problem is that
<code>DEF.dll</code>
unloaded before destroying all its windows.
And then its window received a message
(in this case, <code>WM_ACTIVATE&shy;APP</code>,
but you were not expected to know this since it wasn't
in the stack trace).
The window manager called the window procedure,
which now points into the middle of <code>ABC.dll</code>.
The debugger is correctly reporting that execution halted
in the middle of <code>ABC.dll</code>.
</p>
<p>
The next step is to engage the people responsible for
<code>DEF.dll</code> to figure out why they leaked a window.
</p>
<p>
<b>Exercise</b>: What command would be useful at this point
to help the <code>DEF.dll</code> identify the window that they leaked?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1226671">
				<div id="div-comment-1226671" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160211-00/?p=93012#comment-1226671">
			February 11, 2016 at 7:34 am</a>		</div>

		<p>Exercise:<br />
Sorry, my windbg (or similar) -fu is weak.<br />
Not being all that familiar with these debuggers, I don&#8217;t know if you need to tell it the function signature in a case like this.<br />
Then, a quick web search shows that the command is &#8216;dv&#8217; (if you have symbols), or possibly &#8216;kp&#8217;, to find the arguments (aka. &#8220;actual parameters&#8221;) passed to the window procedure.<br />
From there, you have hwnd and friends. The DEF team might be able to look at their stuff from there. If not, I&#8217;m not sure how you would interrogate the window from a crash dump.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1226673">
				<div id="div-comment-1226673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160211-00/?p=93012#comment-1226673">
			February 11, 2016 at 7:45 am</a>		</div>

		<p>inkedit in a richtext control? I discovered the hard way to only way around this is to unsubclass on WM_DESTROY.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1226691">
				<div id="div-comment-1226691" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160211-00/?p=93012#comment-1226691">
			February 11, 2016 at 9:25 am</a>		</div>

		<p>mmm&#8230; maybe the window function is specific enough and a &#8220;u&#8221; will show its name at this point?<br />
I know, there must be some function to extract the class name from the window handle, which should be placed somewhere on the stack (or heap?) near the WM_ACTIVATEAPP that you found. But that&#8217;s as far as my knowledge goes for now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1226711">
				<div id="div-comment-1226711" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.geekswithblogs.net/akraus1' rel='external nofollow' class='url'>Alois Kraus</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160211-00/?p=93012#comment-1226711">
			February 11, 2016 at 11:19 am</a>		</div>

		<p>It is still a mystery to me how window handles in Windbg are accessible. The Gdikdx.dll extension is only for Windows 2000 and XP. That whole GDI stuff is pretty much inaccessible in Windbg and should be fixed in my opinion. If you only have the stack then you should after unloading the wrong pdb do a lm to see in the unloaded module list DEF.dll and its previous load addresses. Then use the closest matching base address for it to do a .reload DEF.dll=xxxx. Now the stack trace with e.g. kb should display the window method of DEF.dll. I have not tried this but I guess that could work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1226721">
				<div id="div-comment-1226721" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://andreybazhan.com' rel='external nofollow' class='url'>Andrey Bazhan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160211-00/?p=93012#comment-1226721">
			February 11, 2016 at 11:51 am</a>		</div>

		<p>If you are a little bit lazy then dps @esp would be enough</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-exchange-development-blog-team odd alt thread-odd thread-alt depth-1" id="comment-1226751">
				<div id="div-comment-1226751" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">exchange development blog team</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160211-00/?p=93012#comment-1226751">
			February 11, 2016 at 5:38 pm</a>		</div>

		<p>&gt;Exercise: What command would be useful at this point to help the DEF.dll identify the window that they leaked?</p>
<p>&#8220;google stackoverflow&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1226791">
				<div id="div-comment-1226791" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160211-00/?p=93012#comment-1226791">
			February 12, 2016 at 8:58 am</a>		</div>

		<p>Exercise: Since DEF.dll was reloaded overlapping ABC.dll, you can get the window handle by inspecting the current arguments.  If you&#8217;re debugging live, you can get the window title, class, etc.</p>
<p>The command is: dv</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1227321">
				<div id="div-comment-1227321" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160211-00/?p=93012#comment-1227321">
			February 17, 2016 at 12:19 pm</a>		</div>

		<p>It would be helpful having a debug VirtualAlloc mode where the virtual ranges keep reserved when decommitted, so any unloaded DLL range will not get reused.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1227621">
				<div id="div-comment-1227621" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew Rogers (ex-MSFT)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160211-00/?p=93012#comment-1227621">
			February 21, 2016 at 11:26 pm</a>		</div>

		<p>Note from the exception record that 0007ffcfd197be4 == ABC+0x67be4. Therefore ABC is based at:</p>
<p>0:000&gt; ?00007ffcfd197be4-0x67be4<br />
Evaluate expression: 140724554366976 = 00007ffc`fd130000</p>
<p>Whereas DEF is based at 00007ffc`fd140000.</p>
<p>Therefore the exception address, ABC+0x67be4, is DEF+0x57be4:</p>
<p>0:000&gt; ?00007ffc`fd197be4-00007ffc`fd140000<br />
Evaluate expression: 359396 = 00057be4</p>
<p>So the next command is &#8216;ln DEF+0x57be4&#8242;, c.f. the same on ntdll:</p>
<p>0:000&gt; ln ntdll+0x57be4<br />
(77f179cd)   ntdll!RtlDosApplyFileIsolationRedirection_Ustr+0x2d0   |  (77f17f14)   ntdll!`string&#8217;</p>
<p>Andrew R</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

