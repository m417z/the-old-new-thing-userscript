<html>
<head>
<title>How do I generate a unique 32-bit value for a time zone?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I generate a unique 32-bit value for a time zone?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 4, 2011 / year-entry #266</td></tr>
<tr><td><b>Tags:</b></td><td>code;time</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20111104-00/?p=9193</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Public Service Announcement: Daylight Saving Time ends in most parts of the United States this weekend. Other parts of the world may change on a different day from the United States. A customer asked the following question: Given two TIME_ZONE_INFORMATION structures, I would like to compute a LONG for each that I can then compare...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Public Service Announcement:
Daylight Saving Time ends in most parts of the United States this weekend.
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/11/05/10086404.aspx#10086843">
Other parts of the world may change on a different day from the
United States</a>.
</p>
<p>
A customer asked the following question:
</p>
<blockquote CLASS=q><p>
Given two
<code>TIME_<wbr>ZONE_<wbr>INFORMATION</code> structures,
I would like to compute a <code>LONG</code> for each
that I can then compare to determine whether they represent
the same time zone.
 When I say the same, I mean that when the two are passed
to <code>System&shy;Time&shy;To&shy;Tz&shy;Specific&shy;Local&shy;Time</code>
with the same <code>LPSYSTEM&shy;TIME</code> input, the output is the same.
</p>
</blockquote>
<p>
A <code>TIME_<wbr>ZONE_<wbr>INFORMATION</code> structure 
contains more information than can be packed into a 32-bit value.
(At least there's no obvious way to pack it into a 32-bit value.)
You're not going to be able to squeeze the entire structure
into a 32-bit value that is unique for each time zone,
so that comparing the 32-bit values will tell you whether the
time zones are the same or not.
</p>
<p>
Fortunately, the customer also provided context for the
question, explaining their underlying problem.
And as is often the case, the customer had broken down the
problem into two parts, one easy and one impossible.
The customer solved the easy part
and was asking for help with the impossible part.
</p>
<p>
But on closer inspection, the problem wasn't so much impossible
as it was improperly specified:
</p>
<blockquote CLASS=q><p>
The bigger problem I'm actually trying to solve is that we call
<code>System&shy;Time&shy;To&shy;Tz&shy;Specific&shy;Local&shy;Time</code>
inside a deeply
nested loop.
I would like to cache the results for performance,
using the time zone as a key to a <code>CAtl&shy;Map</code>
which would hold the cached results for each time zone.
I'm looking for help coming up with what combinaion of the
structure members to use to uniquely identify the time zone.
</p>
</blockquote>
<p>
Okay,
the customer appears to be a bit confused about hash keys.
Hash keys do not need to be unique for each time zone.
It is perfectly legitimate for two different items to result
in the same hash value;
that's why we have the term <i>hash collision</i>.
Of course, you want to take reasonable steps to minimize collisions,
but when you don't control the domain space,
hash collisions are a part of life.
</p>
<blockquote CLASS=q>
<p>
From looking at some time zone data, it looks like
<code>(Bias + Standard&shy;Bias)</code> is unique for any time zone,
but I know that there are a lot of complicated
issues when dealing with time zones
so I wanted to check if I could be sure of that.
</p>
<pre>
LONG CTimeZoneTraits::GetHash(const TIME_ZONE_INFORMATION&amp; tz)
{
 return tz.Bias + tz.StandardBias;
}

int CTimeZoneTraits::Equals(const TIME_ZONE_INFORMATION&amp; tz1,
                            const TIME_ZONE_INFORMATION&amp; tz2)
{
 return tz1.Bias         == tz2.Bias &amp;&amp;
        tz1.StandardBias == tz2.StandardBias &amp;&amp;
        tz1.DaylightBias == tz2.DaylightBias &amp;&amp;
        memcmp(&amp;tz1.StandardDate, &amp;tz2.StandardDate,
                                  sizeof(tz1.StandardDate) &amp;&amp;
        memcmp(&amp;tz1.DaylightDate, &amp;tz2.DaylightDate,
                                  sizeof(tz1.DaylightDate);
}
</pre>
</blockquote>
<p>
If you think it about it, it's clear that
<code>(Bias + Standard&shy;Bias)</code> does not always uniquely identify
a time zone.
Consider two cities at the same longitude in the same hemisphere
in the middle of winter:
They will have the same <code>Standard&shy;Bias</code>
(because they have the same longitude) and the same
<code>Bias</code>
(because Daylight Saving Time is not applicable during the winter),
but if the cities are in different countries (or sometimes,
even
<a HREF="http://en.wikipedia.org/wiki/Time_in_Indiana">
different parts of the same country</a>),
they will transition to/from Daylight Saving Time differently
and consequently do not belong to the same time zone.
</p>
<p>
On the other hand, since this is being used simply as a hash key,
uniqueness is not an absolute requirement,
so even a bad hash function will still "work";
it'll just be slower than a good hash function.
</p>
<p>
If it were up to me, I would choose as a hash function
something like this:
</p>
<pre>
LONG CTimeZoneTraits::GetHash(const TIME_ZONE_INFORMATION&amp; tz)
{
 return tz.StandardBias +
        tz.StandardDate.wDay +
        (tz.StandardDate.wDayOfWeek &lt;&lt; 16) +
        (tz.StandardDate.wMonth &lt;&lt; 24);
}
</pre>
<p>
I wouldn't use the <code>Bias</code> in the hash code because
the <code>Bias</code> changes over time.
If the hash table lifetime extends across a daylight saving time transition,
then the <code>Bias</code> will change.
</p>
<p>
For the hash, I use the <code>Standard&shy;Bias</code>, which is the number
of minutes east of UTC.
In practice this does not exceed 
60&nbsp;&times;&nbsp;25&nbsp;=&nbsp;1500,
and it's a multiple of&nbsp;30.
(But
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2007/03/09/1840625.aspx">
not necessarily a multiple of&nbsp;60</a>.)
The <code>wDay</code> is typically in the range [0,5], though it can
go as high as 31 if the transition is based on a specific day.
Therefore, I'll simply add it to the <code>Standard&shy;Bias</code>,
taking advantage of the fact that the <code>Standard&shy;Bias</code> is
a multiple of&nbsp;30.
The month and day of the week are thrown into the upper 16 bits.
</p>
<p>
Now, this hash function will still have collisions: If there are
two time zones at the same longitude
which transition to Standard time with the same rule,
but which transition to Daylight time according to different rules,
then we will still have a collision.
</p>
<blockquote CLASS=q><p>
I would like to reduce the number of collisions
by understanding how often two equal values of
<code>(Bias + Standard&shy;Bias)</code>
could represent different time zones. 
</p>
</blockquote>
<p>
How likely is such a collision?
You can answer this question yourself:
Take all the time zones currently known to the system and
hash them all to see what happens.
Of course,
<a HREF="http://www.kyivpost.com/news/nation/detail/113166/">
time zones change all the time</a>,
so don't assume that
your results will hold true in perpetuity,
but if you're just looking for a rough guide, calculating
against the current state of affairs is a pretty good one.
It's true that time zones change all the time,
but they typically don't change by much.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-944873">
				<div id="div-comment-944873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111104-00/?p=9193#comment-944873">
			November 4, 2011 at 8:02 am</a>		</div>

		<p>The customer&#39;s CTimeZoneTraits::Equals() function be checking if memcmp(&#8230;) == 0, not if memcmp(&#8230;) != 0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944893">
				<div id="div-comment-944893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve McKay</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111104-00/?p=9193#comment-944893">
			November 4, 2011 at 8:05 am</a>		</div>

		<p>General-purpose hash function and memcmp(&amp;tz1, &amp;tz2, sizeof(tz1)? Easy to implement, easy to understand. Gets the job done well enough if it doesn&#39;t cause too many cache misses, and I suspect it won&#39;t if you&#39;re doing enough lookups for caching to be worthwhile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944903">
				<div id="div-comment-944903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Olivier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111104-00/?p=9193#comment-944903">
			November 4, 2011 at 8:10 am</a>		</div>

		<p>There is at least one timezone where StandardBias is a multiple of 15 minutes, not 30:</p>
<p>Check out <a rel="nofollow" target="_new" href="http://www.timeanddate.com/worldclock/city.html?n=117" rel="nofollow">http://www.timeanddate.com/&#8230;/city.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944913">
				<div id="div-comment-944913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111104-00/?p=9193#comment-944913">
			November 4, 2011 at 8:14 am</a>		</div>

		<p>There was a special case of this problem I was working on once where storing secondswest was sufficient. A bit of mathematics indicates this fits in a signed 24 bit value. (I think it actually fits in 22 bits).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944953">
				<div id="div-comment-944953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Skrobov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111104-00/?p=9193#comment-944953">
			November 4, 2011 at 9:08 am</a>		</div>

		<p>There are two:</p>
<p>&quot;Nepal Standard Time is one of only two official time zones with a 45-minute increment from UTC. The Chatham Islands, which uses Chatham Island Standard Time, also has a 45-minute increment from UTC, its time zone being UTC+12:45.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk odd alt thread-odd thread-alt depth-1" id="comment-944973">
				<div id="div-comment-944973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111104-00/?p=9193#comment-944973">
			November 4, 2011 at 10:52 am</a>		</div>

		<p>If they will be calling their function frequently, then perhaps they don&#39;t REALLY need to know if the two cities are in the same time zone. &nbsp;Do they need to know if the two locations currently have the local time? &nbsp;If that&#39;s the case, then the current time zone offset is all they need to know, and the time zone is not important. &nbsp;But maybe they need more than that. &nbsp;It&#39;s hard to tell from the problem specification.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944993">
				<div id="div-comment-944993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Entin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111104-00/?p=9193#comment-944993">
			November 4, 2011 at 11:32 am</a>		</div>

		<p>Since most countries enter and exit daylight saving on Sundays &#8211; using wDayOfWeek in the hash function is not very useful. I would rather use some more unique bits &#8211; like tz.DaylightDate.wDay.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-945013">
				<div id="div-comment-945013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111104-00/?p=9193#comment-945013">
			November 4, 2011 at 2:23 pm</a>		</div>

		<p>What if the time zone data change of a cached value? The switch date is only semi-permanent in most countries because of politics, the data is patched from windows update I suppose. Not as bad as iOS though, which has had time zone bugs in every os version, and the recently deployed work-a-round drains insane amounts of battery.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

