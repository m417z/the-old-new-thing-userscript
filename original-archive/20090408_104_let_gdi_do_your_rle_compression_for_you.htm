<html>
<head>
<title>Let GDI do your RLE compression for you</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Let GDI do your RLE compression for you</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 8, 2009 / year-entry #105</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">This is another trick along the lines of using DIB sections to perform bulk color mapping. GDI will do it for you; you just have to know how to ask. Today's mission is to take a 4bpp bitmap and compress it in BI_RLE4 format. Now, sure, there are programs out there which already do this...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
This is another trick along the lines of
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/11/16/1086835.aspx">
using DIB sections to perform bulk color mapping</a>.
GDI will do it for you; you just have to know how to ask.
Today's mission is to take a 4bpp bitmap and compress it in
<code>BI_RLE4</code> format.
Now, sure, there are programs out there which already do this conversion,
but the lesson is in the journey, not in the destination.
</p>
<p>
The secret is the <code>GetDIBits</code> function.
You give this function a bitmap and a bitmap format,
and out come the bits in the format you requested;
GDI will convert as necessary.
</p>
<p>
<b>Note</b>: I'm going to take a risk and write "sloppy" code.
This is code that is not production quality but is enough to get
the point across,
so put your nitpicking notepads away.
</p>
<pre>
void ConvertToRLE4(LPCTSTR pszSrc, LPCTSTR pszDst)
{
    // error checking elided for expository purposes
    HBITMAP hbm = (HBITMAP)LoadImage(NULL, pszSrc, IMAGE_BITMAP,
                                     0, 0,
                                     LR_LOADFROMFILE |
                                     LR_CREATEDIBSECTION);

    DIBSECTION ds;

    // error checking elided for expository purposes
    GetObject(hbm, sizeof(ds), &amp;ds);

    if (ds.dsBmih.biBitCount != 4) {
        // error - source bitmap is not 4bpp
    }

    struct BITMAPINFO16COLOR {
        BITMAPINFOHEADER bmih;
        RGBQUAD rgrgb[16];
    } bmi16;
    bmi16.bmih = ds.dsBmih;

    bmi16.bmih.biCompression = BI_RLE4;

    BYTE *rgbPixels = new BYTE[bmi16.bmih.biSizeImage];
    HDC hdc = GetDC(NULL);
    if (GetDIBits(hdc, hbm, 0, bmi16.bmih.biHeight, rgbPixels,
                  (LPBITMAPINFO)&amp;bmi16, DIB_RGB_COLORS)
        != bmi16.bmih.biHeight) {
        // error - bitmap not compressible
    }
    ReleaseDC(NULL, hdc);

    BITMAPFILEHEADER bfh = { 0 };
    bfh.bfType = MAKEWORD('B', 'M');
    bfh.bfOffBits = sizeof(BITMAPFILEHEADER) + sizeof(bmi16);
    bfh.bfSize = bfh.bfOffBits + bmi16.bmih.biSizeImage;

    // error checking elided for expository purposes
    HANDLE h = CreateFile(pszDst, GENERIC_WRITE, 0, NULL,
                          CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
    DWORD dwWritten;
    WriteFile(h, &amp;bfh, sizeof(bfh), &amp;dwWritten, NULL);
    WriteFile(h, &amp;bmi16, sizeof(bmi16), &amp;dwWritten, NULL);
    WriteFile(h, rgbPixels, bmi16.bmih.biSizeImage, &amp;dwWritten, NULL);
    CloseHandle(h);
    delete[] rgbPixels;
}
</pre>
<p>
Let's start from the top.
After loading the bitmap and verifying that it is a 4bpp bitmap,
we declare a <code>BITMAPINFO16COLOR</code> structure that is
just a <code>BITMAPINFO</code> structure that holds 16&nbsp;colors
instead of just one.
We copy the <code>BITMAPINFOHEADER</code> from the
<code>DIBSECTION</code> to our structure for two reasons:
</p>
<ol>
<li>We want to make some changes, and
<li>GDI expects the color table to come immediately after the
    <code>BITMAPINFOHEADER</code>.
</ol>
<p>
The second reason is the more important one.
We can't use the <code>BITMAPINFOHEADER</code> that is part of the
<code>DIBSECTION</code> structure because
the <code>DIBSECTION</code> structure puts <code>dsBitfields</code>
after the <code>BITMAPINFOHEADER</code> instead of a color table.
</p>
<p>
After copying the <code>BITMAPINFOHEADER</code>, we make the key change:
Changing the compression type to <code>BI_RLE4</code>.
We allocate a pixel buffer of a size equal to the uncompressed size
of the original bitmap and use <code>GetDIBits</code> to fill it
with compressed data.
Key points:
</p>
<ul>
<li>Before calling the <code>GetDIBits</code> function,
    we must set the <code>biSizeImage</code> member of the
    <code>BITMAPINFO</code> structure to the size of
    the buffer we passed as <code>rgbPixels</code>.
    In our case, this happened implicitly since we allocated
    <code>rgbPixels</code> based on the value of
    <code>bmi16.bmih.biSizeImage</code>.</p>
<li>On successful exit from the <code>GetDIBits</code> function,
    the <code>GetDIBits</code> function sets the
    <code>biSizeImage</code> member of the
    <code>BITMAPINFO</code> structure to the number of bytes
    actually written to the buffer.</p>
<li>On successful exit from the <code>GetDIBits</code> function,
    the <code>GetDIBits</code> function fills the color table
    if you're using a bitmap format that requires a color table.
    It's important that you allocate enough memory to hold
    the color table; if you forget, then you have a buffer overflow
    bug.
</ul>
<p>
Since the <code>GetDIBits</code> function returns the number of
scan lines successfully read,
if the value is different from the value we requested, then
something went wrong.
In our case, the most likely reason is that the bitmap
is not compressible according to the
<code>BI_RLE4</code> algorithm.
</p>
<p>
Now that we have the compressed bits, it's just grunt work
to turn it into a <code>BMP</code> file.
The <code>BMP</code> file format specifies that the file
begins with a <code>BITMAPFILEHEADER</code>,
followed by the <code>BITMAPINFOHEADER</code>,
the color table, and the pixels.
So we write them out in that order.
</p>
<p>
Easy peasy.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-724783">
				<div id="div-comment-724783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil (SM)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724783">
			April 8, 2009 at 12:00 pm</a>		</div>

		<p>Even with the note about sloppy non-production code, the first commenter just couldn&#8217;t resist.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724803">
				<div id="div-comment-724803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724803">
			April 8, 2009 at 12:15 pm</a>		</div>

		<p>Cool trick.</p>
<p>One thing that always puzzles me about some of the GDI functions like GetDIBits is what is the HDC parameter used for? &nbsp;MSDN is a pretty vague, and I don&#8217;t see an obvious need for it in this case. &nbsp;Can you pass any old DC in? &nbsp;Can you pass NULL?</p>
<p>I have similar confusion about functions like SetStretchBltMode. &nbsp;Do you use it on the source or the destination DC?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724813">
				<div id="div-comment-724813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Xepol</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724813">
			April 8, 2009 at 12:31 pm</a>		</div>

		<p>While a handy example in how to save a bitmap, I am struck by a few things.</p>
<ol>
<li>This would have been more relevant about 10 years ago.</li>
<li>
<p>The Windows API has always struck me as surprisingly deficient when it comes to working with graphics files. &nbsp;Having to hand craft file sections strikes me a tedious make work when 99.9% of situations could just as easily be handled by single loadbitmap savebitmap calls. &nbsp;This isn&#8217;t the only area where the winapis seem to fall short of doing the job properly.</p>
</li>
<li>
<p>I understand why GIF isn&#8217;t supported by the winapi (patent issues with a brain dead patent owner), but I&#8217;m less clear on why JPG and PNG support are not native parts of the GDI.</p>
</li>
</ol>
<p>I suppose you could argue that point 3 is covered under the whole reverse compatibility issue, but I suspect the problem is larger. &nbsp;I think it is a symptom that MS has already collapsed under its own size, entrenched in a culture that serves only to defeat innovation rather than embrace it.</p>
<p>Every time I hear about a &quot;it isn&#8217;t right but if we fix it, other people&#8217;s stuff breaks&quot; problem on this blog, I just get more and more convinced that MS is heading for a monumental failure unless someone comes in and serious cleans house.</p>
<p>I am not even certain that the change in corporate attitude required to avoid certain dissaster is even possible at this point.</p>
<p>Sad, really.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724823">
				<div id="div-comment-724823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zila</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724823">
			April 8, 2009 at 1:33 pm</a>		</div>

		<p>You can load it using Ole, and get the bitmap out of the IPicture extremely easily.</p>
<p>Or better yet you can use GdiPlus.</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms533971" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms533971</a>(VS.85).aspx</p>
<p>Both native parts of the OS no?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724833">
				<div id="div-comment-724833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724833">
			April 8, 2009 at 2:07 pm</a>		</div>

		<p>Xepol, you&#8217;re very, very wrong.</p>
<p>The biggest success for MSFT &nbsp;is when the old programs just work or work faster.</p>
<p>The worst MSFT does is when it listens to advices like yours (also from the inside of the company) and produces something where not all programs work perfectly or are slower than before because of new features.</p>
<p>I can guarantee you that a lot of big companies will reject switching to 64-bit versions of OS even once there&#8217;s enough memory on the computers they use only because some existing Win16 programs won&#8217;t work on 64-bit OS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-724843">
				<div id="div-comment-724843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724843">
			April 8, 2009 at 2:34 pm</a>		</div>

		<p>When writing code to read/write BMP files it&#8217;s difficult not to be sloppy.</p>
<p>For such a simple format getting the code right is incredibly complex due to all the different rules (which interact with each other), overloaded structure flags/members and possible formats.</p>
<p>As a result of the complexity, and how few manage to get their writers right, the are a lot of malformed BMP files out there which people making readers have to cope with (or at least safely reject without your program going ape). That&#8217;s on top of the well-formed but incredibly uncommon image types you&#8217;ll eventually come across after someone sends you something that won&#8217;t display. :)</p>
<p>With that in mind, the article presents a good tip: Let GDI compress (and decompress) RLE data for you. The BMP format is complex enough as it is without trying to get RLE right as well.</p>
<p>Also, properly implementing RLE decompression &#8212; let alone compresion &#8212; yourself is more complex than it might seem. It&#8217;s like BMP in that some simple rules can combine into a complex set of states, some of which you&#8217;re likely to miss. Let GDI (or a higher level library) do the work!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724853">
				<div id="div-comment-724853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724853">
			April 8, 2009 at 3:26 pm</a>		</div>

		<p>Adrian, the DC passed to GetDIBits is needed in case there are palette or color management conversion that needs to be done.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724863">
				<div id="div-comment-724863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aardvark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724863">
			April 8, 2009 at 4:05 pm</a>		</div>

		<p>I prefer this:</p>
<p>bfh.bfType = &#8216;MB&#8217;;</p>
<p>to your:</p>
<p>bfh.bfType = MAKEWORD(&#8216;B&#8217;, &#8216;M&#8217;);</p>
<p>Two characters in a single quoted string is just to strange to resist! Google &quot;Multi-character constants&quot; for more info (not MUCH more however&#8230;).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724873">
				<div id="div-comment-724873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724873">
			April 8, 2009 at 4:51 pm</a>		</div>

		<p>Thanks Mike for your insight on the purpose of the HDC parameter.</p>
<p>But that still leaves me with questions. &nbsp;Since this is a 4-bit to 4-bit compression, there should be no conversion of the color table at all. &nbsp;So do you really need a DC? &nbsp;If my screen were in some weird color format, could that affect the result of this compression? &nbsp;(I&#8217;d hope not!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724883">
				<div id="div-comment-724883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">johnb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724883">
			April 8, 2009 at 5:28 pm</a>		</div>

		<p>Xepol: GDI can already decode JPEG and PNG data for you. &nbsp;See the documentation of the StretchDIBits function (which says, &quot;Windows 98/Me, Windows 2000/XP: StretchDIBits has been extended to allow a JPEG or PNG image to be passed as the source image.&quot; right up at the top in the synopsis of the function)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724753">
				<div id="div-comment-724753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724753">
			April 8, 2009 at 10:43 am</a>		</div>

		<p>You&#8217;re still vulnerable to a buffer overflow &#8212; allocating bmi16.bmih.biSizeImage bytes for the compressed data is not enough, since some images may get larger upon &quot;compression&quot;.</p>
<p>According to <a rel="nofollow" target="_new" href="http://www.fourcc.org/rgb.php" rel="nofollow">http://www.fourcc.org/rgb.php</a> , you should need 130 bytes (00 FF plus the pixel data) for every 256 pixels in the worst case, which comes out to a maximum image size of</p>
<p>(130 * bmi16.bmih.biWidth * bmi16.bmih.biWidth + 255) / 256</p>
<p>Also, not all programs properly set the biSizeImage field properly, so you may end up allocating 0 (!) bytes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724763">
				<div id="div-comment-724763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724763">
			April 8, 2009 at 11:09 am</a>		</div>

		<p>Err, that should be 130 bytes for every _255_ pixels, so the maximum compressed size is</p>
<p>(130 * bmi16.bmih.biWidth * bmi16.bmHeight + 254) / 255</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724903">
				<div id="div-comment-724903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724903">
			April 8, 2009 at 7:29 pm</a>		</div>

		<p>johnb,</p>
<p>JPEG and PNG in GDI: only for printer DC, sorry, not for display.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724913">
				<div id="div-comment-724913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://twitter.com/davidlmorris' rel='external nofollow' class='url'>davidlmorris</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724913">
			April 8, 2009 at 8:01 pm</a>		</div>

		<p>Raymond, you said &quot;This is code that is not production quality but is enough to get the point across&quot;. &nbsp;I understand why you would do this, and I probably wouldn&#8217;t want the detail to get in the way of the point in any event. &nbsp;</p>
<p>But. &nbsp;</p>
<p>For the future, I would be interested in seeing an example like this taken all the way to full production code (perhaps over several entries). I think that exercise could be very instructional. And, I just can&#8217;t imagine not learning something from it &#8211; even if that thing was that most of my code was OK.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724923">
				<div id="div-comment-724923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lunesu.com' rel='external nofollow' class='url'>Lio</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724923">
			April 8, 2009 at 8:55 pm</a>		</div>

		<p>&quot;the lesson is in the journey, not in the destination.&quot;</p>
<p>OT: Are you subscribed to ChinesePod by any chance?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724933">
				<div id="div-comment-724933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724933">
			April 8, 2009 at 10:46 pm</a>		</div>

		<p>Does anyone actually use RLE? Our customers are constantly asking us to support formats like JPG, PNG and TIF, but never about RLE.</p>
<p>As a matter of fact, when we tell them we support RLE, we usually just get a blank stare back.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724953">
				<div id="div-comment-724953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724953">
			April 9, 2009 at 5:46 am</a>		</div>

		<p>&quot;Alas, there&#8217;s probably some idiot out there that&#8217;s gonna use Raymond&#8217;s code as-is without making it production ready in a real live system&#8230;&quot;</p>
<p>Yeah, wouldn&#8217;t surprise me. They&#8217;d probably even leave this bit in:</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;!= bmi16.bmih.biHeight) {</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;// error &#8211; bitmap not compressible</p>
<p>&nbsp; &nbsp;}</p>
<p>Stranger things have happened&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724943">
				<div id="div-comment-724943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724943">
			April 9, 2009 at 2:22 am</a>		</div>

		<p>@davidlmorris: I&#8217;m not sure why you&#8217;d want to see it, since full production quality would make it 10 times longer. Mostly in the error checking &#8211; there are many spots that Raymond skipped error checking on for conciseness.</p>
<p>But if you must:</p>
<p>* Check the return value of every API call, and decide how best to handle it</p>
<p>* Validate that the buffer is big enough &#8211; the first post illustrates this &#8211; RLE encoding can make files larger, so all buffers have to be big enough. (I wouldn&#8217;t call it a nitpick, but a vital point when adapting the method for production).</p>
<p>* Check the side effects of each API &#8211; does it modify some global/system state? If so, must you save/restore it?</p>
<p>* Check parameters &#8211; anything that might get you in trouble like going up a directory tree inadvertently? Or sizes that don&#8217;t make sense? Or maybe unterminated strings?</p>
<p>Alas, there&#8217;s probably some idiot out there that&#8217;s gonna use Raymond&#8217;s code as-is without making it production ready in a real live system&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724983">
				<div id="div-comment-724983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Me</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724983">
			April 9, 2009 at 10:28 am</a>		</div>

		<p>@Semi Essessi:</p>
<p>&quot;It&#8217;s clearly not one of those &#8216;we could fix it but it would break something else&#8217; features either&#8230;&quot;</p>
<p>You know you&#8217;re just asking for a bracketed explanation for why it IS just such a feature to appear at the bottom of your comment, right? ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724963">
				<div id="div-comment-724963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jheriko.co.uk' rel='external nofollow' class='url'>Semi Essessi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-724963">
			April 9, 2009 at 8:53 am</a>		</div>

		<p>Thanks for taking the time to make this post, but it does seem out of date. A tutorial on how to use .png/.jpg compression with GDIPlus would be more useful today. libpng/jpeg can be daunting to newbies&#8230; I can remember. :)</p>
<p>Still, this is a lot better than the X bad tutorials out there which show you how to load a subset of bitmap files yourself, the hard way.</p>
<p>Like Xepol, I&#8217;ve always wondered why GDI didn&#8217;t come with a function like DWORD* LoadAnyFreakingBitmapIWant(LPSTR* path), returning an uncompressed RGB0/BGR0 array&#8230; as a rule you don&#8217;t want to read/store any headers or data which deviate from the standard for bitmpa files, so having the seperate functions is almost always of no benefit. If anything it just introduces more potential for error by the programmer and a steeper learning curve. It&#8217;s clearly not one of those &quot;we could fix it but it would break something else&quot; features either&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-725063">
				<div id="div-comment-725063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Xepol</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-725063">
			April 9, 2009 at 3:58 pm</a>		</div>

		<p>@@acq -&gt; I believe you miss the full scope of the problem. &nbsp;Another 2 or 3 major releases of Windows following in the current trend will lead to a totally useless product so mired in past mistakes and compatibility fixes that forward movement will become near impossible.</p>
<p>I do see a glimmer of hope from MS with attempts to virtualize compatibiltiy with older OS versions already. &nbsp;MS needs to make the a major feature standard in all their OSes. &nbsp;Want to run an XP/Vista/Win7/Win8 app? &nbsp;Rather than being limited by Win#&#8217;s design and mistakes, the current OS fires up a virtualization layer that provides that environment. &nbsp;This would free any current version of the OS to truely to improve and evolve.</p>
<p>Personally, I can see a day when ALL apps run inside a virutalized sandbox regardless of whether they are targeted for a previous version of the OS or the current version. &nbsp;Security, system stability, even cost of ownership can greatly benefit.</p>
<p>A full transition would doubtlessly be very painful, but the benefits could be dramatic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-725103">
				<div id="div-comment-725103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">streuth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-725103">
			April 9, 2009 at 9:17 pm</a>		</div>

		<p>I probably ought to add that I&#8217;m just adding the last function to the median cut and error diffusion code. (Including I might add, the proper nth element algorithm, for median cut)</p>
<p>Although it&#8217;s the natural progression from having a big pile of image readers, that&#8217;s not open source.</p>
<p>Nevertheless it&#8217;d be nice if Microsoft offered such capabilities without the &quot;COM&quot; development overhead. (As Win32).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-725093">
				<div id="div-comment-725093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">streuth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-725093">
			April 9, 2009 at 8:49 pm</a>		</div>

		<p>Oh man!</p>
<p>This is the blog post from me, I&#8217;ve just *had* to do all this.</p>
<p>Getting GDI to do compression for you is fine. Doing decompression is fine also. (or at least so it seems) The problem I had was that if I started with an optimal palette RLE bitmap, passed it into, and then back out of the DC, then I ended up with a functional RLE, but with a suboptimal palette.</p>
<p>Getting control of that darned palette is the trouble.</p>
<p>In the end I coded my own RLE algorithm, only took an hour!! (more like a day and a half with debug) :))</p>
<p>Anyway, I&#8217;ve also integrated JPEG, PNG, and GIF into the shebang and made a DLL out of it. Being as the whole thing is open source I&#8217;m going to have to post the source anyhow.</p>
<p>Am I allowed to post links here?</p>
<p>No doubt there is a &quot;Raymond&quot; that you can do which makes it all work in ten seconds flat!!</p>
<p>:slaps forehead:</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-725233">
				<div id="div-comment-725233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-725233">
			April 10, 2009 at 2:24 pm</a>		</div>

		<p>@Semi Essessi:</p>
<p>LoadImage/LR_LOADFROMFILE?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-725553">
				<div id="div-comment-725553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090408-00/?p=18603#comment-725553">
			April 12, 2009 at 7:07 pm</a>		</div>

		<p>&quot;Our customers are constantly asking us to support formats like JPG, PNG and TIF, but never about RLE.</p>
<p>As a matter of fact, when we tell them we support RLE, we usually just get a blank stare back.&quot;</p>
<p>That is because RLE is not itself a file format, it is a compression algorithm used with other file formats like BMP.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

