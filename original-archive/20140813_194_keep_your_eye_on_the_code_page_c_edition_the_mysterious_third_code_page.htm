<html>
<head>
<title>Keep your eye on the code page: C# edition (the mysterious third code page)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Keep your eye on the code page: C# edition (the mysterious third code page)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 13, 2014 / year-entry #195</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140813-00/?p=253</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer was having trouble manipulating the console from a C# program: We found that C# can read only ASCII data from the console. If we try to read non-ASCII data, we get garbage. using System; using System.Text; using System.Runtime.InteropServices; class Program { [StructLayout(LayoutKind.Sequential)] struct COORD { public short X; public short Y; } [DllImport("kernel32.dll",...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was having trouble manipulating the console from a C#
program:
</p>
<blockquote CLASS=q>
<p>
We found that C# can read only ASCII data from the console.
If we try to read non-ASCII data, we get garbage.
</p>
<pre>
using System;
using System.Text;
using System.Runtime.InteropServices;

class Program
{
  [StructLayout(LayoutKind.Sequential)]
  struct COORD
  {
    public short X;
    public short Y;
  }

  [DllImport("kernel32.dll", SetLastError=true)]
  static extern IntPtr GetStdHandle(int nStdHandle);

  const int STD_OUTPUT_HANDLE = -11;

  [DllImport("kernel32.dll", SetLastError=true)]
  static extern bool ReadConsoleOutputCharacter(
    IntPtr hConsoleOutput,
    [Out] StringBuilder lpCharacter,
    uint nLength,
    COORD dwReadCoord,
    out uint lpNumberOfCharsRead);

  public static void Main()
  {
    // Write a string to a fixed position
    System.Console.Clear();
    System.Console.WriteLine("\u00C5ngstr\u00f6m");

    // Read it back
    COORD coord  = new COORD { X = 0, Y = 0 };
    StringBuilder sb = new StringBuilder(8);
    uint nRead = 0;
    ReadConsoleOutputCharacter(GetStdHandle(STD_OUTPUT_HANDLE),
                               sb, (uint)sb.Capacity, coord, out nRead);
    // Trim off any unused excess.
    sb.Remove((int)nRead, sb.Length - (int)nRead);

    // Show what we read
    System.Console.WriteLine(sb);
  }
}
</pre>
<p>
Observe that this program is unable to read the
&Aring; and &ouml; characters.
They come back as garbage.
</p>
</blockquote>
<p>
Although there are three code pages that have special treatment in Windows,
<a HREF="http://msdn.microsoft.com/library/7b93s42f.aspx">
the CLR gives access to only two of them via <code>Dll&shy;Import</code></a>.
</p>
<ul>
<li>CharSet.Ansi = CP_ACP
<li>CharSet.Unicode = Unicode (which in Windows means UTF16-LE
    unless otherwise indicated).
</ul>
<p>
Unfortunately,
the console traditionally uses the OEM code page.
</p>
<p>
Since the <code>Dll&shy;Import</code> did not specify a character set,
the CLR defaults
(<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/08/12/10549258.aspx">unfortunately</a>)
to <code>Char&shy;Set.<wbr>Ansi</code>.
Result:
The
<code>Read&shy;Console&shy;Output&shy;Character</code> function stores
its results in <code>CP_<wbr>OEM</code>,
the CLR treats the buffer as if it were <code>CP_<wbr>ACP</code>,
and the result is confusion.
</p>
<p>
The narrow-minded fix is to try to fix the
<a HREF="http://en.wikipedia.org/wiki/Mojibake">
mojibake</a>
by taking the misconverted Unicode string,
converting it to bytes via the ANSI code page,
then converting the bytes to Unicode via the OEM code page.
</p>
<p>
The better fix is simply to avoid the 8-bit code page issues entirely
and say you want to use Unicode.
</p>
<pre>
  [DllImport("kernel32.dll", SetLastError=true, <font COLOR=blue>CharSet=CharSet.Unicode</font>)]
  static extern bool ReadConsoleOutputCharacter(...);
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1144203">
				<div id="div-comment-1144203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140813-00/?p=253#comment-1144203">
			August 13, 2014 at 1:20 pm</a>		</div>

		<p>My mentality when it comes to Windows programming is that there are no Win32 APIs that end in a capital A.</p>
<p>Is there a downside to writing &quot;ReadConsoleOutputCharacterW&quot; in the DllImport instead of &quot;ReadConsoleOutputCharacter&quot;?</p>
<div class="post">[<em>Not sure what that gains you. You would have to write <code>[DllImport(&quot;kernel32.dll&quot;, ExactSpelling=True, CharSet=CharSet.Unicode] bool ReadConsoleOuputCharacterW(...)</code> and you still have to deal with all the W&#39;s. To fix that, you would need to add <code>EntryPoint=&quot;ReadConsoleOutputCharacter&quot;</code> and now you are way in the hole compared to just letting the CLR add the W. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144213">
				<div id="div-comment-1144213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140813-00/?p=253#comment-1144213">
			August 13, 2014 at 1:45 pm</a>		</div>

		<p>@Myria, there&#39;s one: OutputDebugStringA.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144223">
				<div id="div-comment-1144223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140813-00/?p=253#comment-1144223">
			August 13, 2014 at 2:19 pm</a>		</div>

		<p>@parkrrrr: Yes, I knew that exception, but didn&#39;t feel like mentioning it =^-^=</p>
<p>For those that don&#39;t know, Windows doesn&#39;t support UTF-16 debug messages, even in kernel mode. &nbsp;OutputDebugStringW converts your string to the ANSI code page before calling OutputDebugStringA &#8212; the reverse of what the rest of the Win32 API does. &nbsp;There are probably other exceptions, but this is one that stands out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144233">
				<div id="div-comment-1144233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140813-00/?p=253#comment-1144233">
			August 13, 2014 at 5:07 pm</a>		</div>

		<p>I agree with Raymond. Unless an API specifically only has a &quot;W&quot; version (and some do), explicitly say you want Unicode and let the CLR take care of it. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000300008195987d even thread-even depth-1" id="comment-1144243">
				<div id="div-comment-1144243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Spire' rel='external nofollow' class='url'>Spire</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140813-00/?p=253#comment-1144243">
			August 13, 2014 at 6:24 pm</a>		</div>

		<p>OutputDebugStringA() makes me sad. I keep waiting for a proper OutputDebugStringW() to be implemented, but it seems like I&#39;ll be waiting forever.</p>
<p>What&#39;s the best place to request that this be fixed?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144253">
				<div id="div-comment-1144253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140813-00/?p=253#comment-1144253">
			August 13, 2014 at 9:15 pm</a>		</div>

		<p>LoadLibrary is probably another example of W delegating to A.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston even thread-even depth-1" id="comment-1144263">
				<div id="div-comment-1144263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140813-00/?p=253#comment-1144263">
			August 13, 2014 at 9:21 pm</a>		</div>

		<p>@Spire: that would be the &quot;a hundred friends and a pony&quot; department. :-)</p>
<p><a rel="nofollow" target="_new" href="http://www.gocomics.com/calvinandhobbes/1987/01/13#.U-w3xGPp7Rg">http://www.gocomics.com/&#8230;/13</a></p>
<p>Seriously, they&#39;d have to change the debugger interface. &nbsp;Far too difficult a change for too trivial a benefit. &nbsp;You can always encode your Unicode strings first if you really have to output them to the debugger.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144293">
				<div id="div-comment-1144293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140813-00/?p=253#comment-1144293">
			August 14, 2014 at 3:43 am</a>		</div>

		<p>Does this mean that you&#39;d have been out of luck on Windows 9x/Me?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144273">
				<div id="div-comment-1144273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140813-00/?p=253#comment-1144273">
			August 14, 2014 at 2:06 am</a>		</div>

		<p>@David: No, but it *is* true of the import table. &nbsp;LoadLibraryW -&gt; LoadLibraryExW -&gt; LdrLoadDll -&gt; NtCreateFile + NtCreateSection + NtMapViewOfSection. &nbsp;LdrLoadDll and later in that list all take NT&#39;s UNICODE_STRING type as parameters. &nbsp;That function list is highly simplified, of course; loading a DLL actually has way more steps than that. &nbsp;Those are just the fundamental ones.</p>
<p>The import table of a PE only has 8-bit characters for the names of the DLLs from which it is importing functions. &nbsp;Since this is usually from the Win32 API, this is fine, but theoretically could be a problem for application-specific DLLs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144493">
				<div id="div-comment-1144493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Bowman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140813-00/?p=253#comment-1144493">
			August 14, 2014 at 1:17 pm</a>		</div>

		<p>@Neil, well, ReadConsoleOutputCharacter didn&#39;t even exist until Win2k. I&#39;m sure you could somehow grovel for the information, but it doesn&#39;t seem to have been supported in any way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1144513">
				<div id="div-comment-1144513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140813-00/?p=253#comment-1144513">
			August 14, 2014 at 3:03 pm</a>		</div>

		<p>@Joshua Bowman: ReadConsoleOutputCharacter goes all the way back to NT 3.51 and also exists in Win9x. You cannot trust version information on MSDN&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1145073">
				<div id="div-comment-1145073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140813-00/?p=253#comment-1145073">
			August 18, 2014 at 11:04 am</a>		</div>

		<p>@Spire: You will wait forever. That one goes to VGA text mode in some scenarios, which CANNOT support UTF-anything.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

