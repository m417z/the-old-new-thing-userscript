<html>
<head>
<title>Your program loads libraries by their short name and you don't even realize it</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Your program loads libraries by their short name and you don&#8217;t even realize it</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 5, 2011 / year-entry #112</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In the discussion of the problems that occur if you load the same DLL by both its short and long names, Xepol asserted that any program which loads a DLL by its short name "would have ONLY itself to blame for making stupid, unpredictable, asinine assumptions" and that Windows should "change the loader to NOT...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>In the discussion of the problems that occur if you load the same DLL by both its short and long names, Xepol asserted that any program which loads a DLL by its short name "would have ONLY itself to blame for making stupid, unpredictable, asinine assumptions" and that Windows should "<a href="http://blogs.msdn.com/oldnewthing/archive/2007/04/02/2008357.aspx#2014493">change the loader to NOT load any dll with a short name where the short name and long name do not match</a>."</p>
<p> The problem with this rule, well, okay, one problem is that <a href="http://blogs.msdn.com/oldnewthing/archive/2006/04/10/572491.aspx"> you're changing the rules after the game has started</a>. Programs have been allowed to load DLLs by their short name in the past; making it no longer possible creates an application compatibility hurdle. </p>
<p> Second, it may not be possible to obtain the long name for a DLL. If the user has access to the DLL but not to one of the directories in the path to the DLL, then the attempt to get its long name will fail. The "directory you can access hidden inside a directory you cannot access" directory structure is commonly used as a less expensive alternative to Access Based Enumeration. Maybe your answer to this is to say that this is not allowed; people who set up their systems this way deserve to lose. </p>
<p> Third, the application often does not control the path being passed to <code>Load&shy;Library</code>, so it doesn't even know that it's making a stupid, unpredictable, asinine assumption. For example, the program may call <code>Get&shy;Module&shy;File&shy;Name</code> to obtain the directory the application was installed to, then attempt to load satellite DLLs from that same directory. If the current directory was set by passing a short name to <code>Set&shy;Current&shy;Directory</code> (try it: <code>cd C:\Progra~1</code>) then the program will unwittingly be making a stupid, unpredictable, asinine decision. (But since the decision is being made consistently, there was no problem up until now.) </p>
<p> When you call <code>Co&shy;Create&shy;Instance</code>, there is nearly always a <code>Load&shy;Library</code> happening behind the scenes, because the object you are trying to create is coming from a DLL that somebody else registered. If they registered it with a short name, then any application that wanted to use that object runs afoul of the new rule, even though the application did nothing wrong. </p>
<p> Now, you might argue that this just means that the component provider is the one who made a stupid, unpredicable, asinine assumption. But that may not have been a stupid assumption at the time: 16-bit applications see only short names, so it might have been that that's the only thing they can do. Or the component may have made a conscious decision to register under short names; this was common in the Windows&nbsp;95 era because file names often passed through components that didn't understand long file names. (Examples: 16-bit applications, backup applications.) </p>
<p> Even if you decide that what was once a reasonable decision is now asinine, you have to get there from here. Do you declare all 16-bit applications asinine (because they can only use those asinine short file name)? Even for the 32-bit components, how do you convince them to switch over? Can you even get them to switch over? Until they do, their component will not be accessible: The shell extension won't be loaded until they fix their registration. A program which anticipated this problem and always loaded DLLs by their short names is now broken. (After all, you had to make an arbitrary decision to use long names exclusively or short names exclusively, and someone may have chosen the other branch of the decision tree.) </p>
<p> And long name/short name is really just a special case of a single file having multiple names. Other ways of creating multiple names include hard links, symbolic links, and junction points. If a file has two names due to hard links, which one is the "preferred" name and which is the "asinine" name? (And what if the "preferred" name is not available to the user? Suppose you decide that the preferred name is the one that comes first alphabetically. Can I launch a denial-of-service attack by creating a hard link to <code>C:\<wbr>Windows\<wbr>system32\<wbr>shell32.dll</wbr></wbr></wbr></code> called <code>C:\A\<wbr>A.DLL</wbr></code>? All attempts to link to <code>C:\<wbr>Windows\<wbr>system32\<wbr>shell32.dll</wbr></wbr></wbr></code> will fail because it is now the "asinine" name.) Does this rule against loading DLLs by "asinine" names negate part of the functionality of the <a href="http://technet.microsoft.com/en-us/magazine/ee851567.aspx"> compatibility paths</a> introduced in Windows Vista (since, under this new rule, you can't use them to load DLLs or execute programs because they entail traversing a symbolic link). </p>
<p> Perhaps these concerns could be addressed in a manner that didn't have all these problems, but it's an awful lot of complexity. In general, simple rules are preferred to complex rules. Especially if the complexity is to address an issue that was not a serious problem to begin with. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-911303">
				<div id="div-comment-911303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911303">
			May 5, 2011 at 7:24 am</a>		</div>

		<blockquote><p>
  And long name/short name is really just a special case of a single file having multiple names.
</p></blockquote>
<p>Conceptually this is true, but practically there is a difference. &nbsp;Short file names are automatically generated by the operating system and you don&#39;t really have any control over them. &nbsp;For operating system components this probably isn&#39;t a problem, but for 3rd party software it can be. &nbsp;Foo~1.dll may point to FooA.dll on one machine and FooB.dll on another machine. &nbsp;There is a lot of software out there, and in an 8.3 world there are only so many unique file names.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-911313">
				<div id="div-comment-911313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911313">
			May 5, 2011 at 7:33 am</a>		</div>

		<p>John: This is why short files names are intended as a compatibility hack for 16-bit Windows apps mainly, and shouldn&#39;t be relied on for modern apps (IIRC I had one that assumed C:Progra~1) was Program Files, except that I had reinstalled Windows and so it was C:Progra~2). &nbsp;You should always specify the &quot;real&quot; filename when hardcoding (and of course, never hardcode system paths anyway; there are APIs for those for a reason).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-911323">
				<div id="div-comment-911323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911323">
			May 5, 2011 at 7:34 am</a>		</div>

		<p>Not being a hardcore Win32 developer, I wonder, what ramifications would it have, if the loader would be modified to translate short filenames to their long counterparts and THEN load the files. Therefore loading the same file by short or long filename would be the same.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-911333">
				<div id="div-comment-911333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mathieu Garstecki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911333">
			May 5, 2011 at 8:29 am</a>		</div>

		<p>@Vilx-: not an expert on that, but I think the loader runs with the rights of the executing user, so the &quot;directory you cannot access&quot; point blocks that approach.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-911343">
				<div id="div-comment-911343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911343">
			May 5, 2011 at 8:38 am</a>		</div>

		<p>Don&#39;t you wish x64 should have gotten rid of short names for Win32 subsystem altogether? Like never return them for FindFileFirst, and ignore them for CreateFile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-911353">
				<div id="div-comment-911353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911353">
			May 5, 2011 at 8:40 am</a>		</div>

		<p>I suggest that in Windows 8 short name creation be disabled by default. Screw those idiots who use them. If there is a big corporation that rins those crappy apps, they can reenable it by policies.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-911363">
				<div id="div-comment-911363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911363">
			May 5, 2011 at 8:40 am</a>		</div>

		<p>The way to avoid that terrible glitch that lead to this problem is to compare by device &amp; inode numbers. Device number in Windows is in fact a string (X: or \SERVERSHARE except for the need to resolve local mappings) while inode number is available via GetFileInformationByHandle.</p>
<p>My compliments to Microsoft for designing 8 byte inode numbers in 1993.</p>
<div class="post">[<i>Resolving local mappings isn&#39;t enough. What if a server has shared DOCUMENTS=C:Documents and BUDGETS=C:DocumentsBudgets? They are the same device but have different share names. And then there&#39;s DFS. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-911373">
				<div id="div-comment-911373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clovis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911373">
			May 5, 2011 at 9:42 am</a>		</div>

		<p>&quot;And then there&#39;s DFS&quot; &#8211; I know just what you mean. Their adverts are way more irritating and dispiriting than anything the Windows loader gets up to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-911383">
				<div id="div-comment-911383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PhilDW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911383">
			May 5, 2011 at 10:10 am</a>		</div>

		<p>@Alex, I was thinking the same thing. There&#39;s an argument that native 64-bit doesn&#39;t need to carry the legacy Win32/16 stuff. Maybe x64 NTFS is only? &nbsp;I think that kind of thing has been done in some cases, but I can&#39;t actually think of one right now ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-911423">
				<div id="div-comment-911423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911423">
			May 5, 2011 at 3:29 pm</a>		</div>

		<p>You&#39;d be surprised by how much breaks if you turn off short names on your local filesystem.</p>
<p>Short names are still useful when you need an ANSI filename to pass to some dumb component that can&#39;t handle Unicode properly. We can wish all we want but the dumb components won&#39;t go away and we&#39;ll still find times when we need to interface with them.</p>
<p>Some very successful, ubiquitous components/technologies are incredibly poorly written&#8230; I&#39;m not sure MS or Windows would look good, even to developers, if it took away the tools that help us work around other people&#39;s stupidity.</p>
<p>And most of the time you can forget the short names exist. They don&#39;t cause many problems. The only big problem I&#39;m aware of is the change-notification code in Windows randomly sending long or short names, including for deleted files (where if you didn&#39;t cache both names of every file you might care about being deleted you have no way to map the name you receive).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-911453">
				<div id="div-comment-911453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911453">
			May 5, 2011 at 4:43 pm</a>		</div>

		<p>@Leo: Yeah, I&#39;ve used that to pass filenames with spaces to a component that didn&#39;t like them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-911463">
				<div id="div-comment-911463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911463">
			May 5, 2011 at 4:44 pm</a>		</div>

		<p>@Leo: Yeah, I&#39;ve used short names to pass file names with spaces to components that didn&#39;t like spaces in filenames.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-911473">
				<div id="div-comment-911473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Sowul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911473">
			May 5, 2011 at 5:25 pm</a>		</div>

		<p>Short paths can also be used to get around MAX_PATH, so it probably isn&#39;t worth getting rid of them.</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/michkap/archive/2006/12/13/1275292.aspx" rel="nofollow">blogs.msdn.com/&#8230;/1275292.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-911483">
				<div id="div-comment-911483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911483">
			May 5, 2011 at 5:57 pm</a>		</div>

		<p>Nine paragraphs in that blog entry and only ten instances of the word &quot;asinine&quot;?!</p>
<p>C&#39;mon, we can inspire more than that! (It&#39;s Friday where I live :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson even thread-even depth-1" id="comment-911433">
				<div id="div-comment-911433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911433">
			May 5, 2011 at 3:32 pm</a>		</div>

		<p>Native 64-bit code still needs to pass filenames to 32-bit programs, some of which may require short names.</p>
<p>It would be ridiculous if 64-bit apps had *more* things hidden from, and *fewer* abilities, than their 32-bit counterparts on a 64-bit OS. And the short names would still be there so what would you be solving, exactly? Nothing. You&#39;d just be making life harder for people compiling 64-bit code, and forcing people to proxy out to 32-bit processes more often than they already have to.</p>
<p>Unless you&#39;re starting fresh with a whole new OS, I can&#39;t see short names going anywhere, sadly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-911513">
				<div id="div-comment-911513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911513">
			May 6, 2011 at 3:21 am</a>		</div>

		<p>Short names are disabled by default on SBS 2008. (I don&#39;t have access to any other comparable versions.) And yes, we have customers who want to be able to launch DOS applications from network paths.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-911523">
				<div id="div-comment-911523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911523">
			May 6, 2011 at 5:47 am</a>		</div>

		<p>I&#39;m not sure how DFS works, but I would assume that using a combination of 32-bit volume ID and 64-bit file ID would work to detect duplicate DLLs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-911613">
				<div id="div-comment-911613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911613">
			May 6, 2011 at 9:13 am</a>		</div>

		<p>Will this be fixed in time for 128-bit windows or do we have to wait for 256-bit windows?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-911663">
				<div id="div-comment-911663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe Dietz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911663">
			May 6, 2011 at 9:50 am</a>		</div>

		<p>Short name generation can be disabled in the NTFS file system. &nbsp;Its a good test to run in fact before shipping any application. &nbsp;Install it without short names. &nbsp;If it doesn&#39;t work, you are in fact being asinine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-911743">
				<div id="div-comment-911743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/stikves_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>stikves@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110505-00/?p=10733#comment-911743">
			May 7, 2011 at 1:10 am</a>		</div>

		<p>@Joe Dietz: What about the components yo use? Will you be willing to replace/rewrite them if they depend on sfn functionality?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

