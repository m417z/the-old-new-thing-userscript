<html>
<head>
<title>How can I make a WNDPROC or DLGPROC a member of my C++ class?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I make a WNDPROC or DLGPROC a member of my C++ class?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 3, 2014 / year-entry #31</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Continuing my discussion of How can I make a callback function a member of my C++ class? Common special cases for wanting to use a member function as a callback function are the window procedure and its cousin the dialog procedure. The question, then, is where to put the reference data. Let's start with window...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Continuing my discussion of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/01/27/10492898.aspx">
<i>How can I make a callback function a member of my C++ class?</i></a>
</p>
<p>
Common special cases for wanting to use a member function as a
callback function are the window procedure and its cousin the
dialog procedure.
The question, then, is where to put the reference data.
</p>
<p>
Let's start with window procedures.
The <code>Create&shy;Window</code> function and its close friend
<code>Create&shy;Window&shy;Ex</code> let you pass your reference
data as the final parameter, prototyped as
<code>LPVOID lpParam</code>.
As noted in the documentation,
that value is passed back to the window procedure by the
<code>WM_<wbr>NC&shy;CREATE</code> and
<code>WM_<wbr>CREATE</code> messages
as part of the <code>CREATE&shy;STRUCT</code> structure.
One of the first messages passed to a window is
<code>WM_<wbr>NC&shy;CREATE</code>,
so that's where we'll grab the reference data and save it for later.
</p>
<p>
You can follow along
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/04/22/410773.aspx">
in this simple C++ program</a>:
The static window procedure handles the
<code>WM_<wbr>NC&shy;CREATE</code> message by
extracting the <code>lpCreate&shy;Params</code> from the
<code>CREATE&shy;STRUCT</code> and saving it in the
<code>GWLP_<wbr>USER&shy;DATA</code> window bytes.
That value is a special per-window storage location provided
for the benefit of the window procedure,
and most people use it to store their context parameter for
safekeeping.
</p>
<p>
If the message is not
<code>WM_<wbr>NC&shy;CREATE</code>,
then we retrieve the context parameter from
where we had stashed it.
</p>
<p>
Either way, we end up with a copy of the context parameter.
If you want your window procedure to be a member function,
the natural choice for the context parameter is the <code>this</code>
pointer for the instance.
The static window procedure therefore tends to look like this:
</p>
<pre>
LRESULT CALLBACK MyWindowClass::s_WndProc(
    HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 MyWindowClass *pThis; // our "this" pointer will go here

 if (uMsg == WM_NCCREATE) {
  // Recover the "this" pointer which was passed as a parameter
  // to CreateWindow(Ex).
  LPCREATESTRUCT lpcs = reinterpret_cast&lt;LPCREATESTRUCT&gt;(lParam);
  pThis = static_cast&lt;MyWindowClass*&gt;(lpcs-&gt;lpCreateParams);
  // Put the value in a safe place for future use
  SetWindowLongPtr(hwnd, GWLP_USERDATA,
                   reinterpret_cast&lt;LONG_PTR&gt;(pThis));
 } else {
  // Recover the "this" pointer from where our WM_NCCREATE handler
  // stashed it.
  pThis = reinterpret_cast&lt;MyWindowClass*&gt;(
              GetWindowLongPtr(hwnd, GWLP_USERDATA));
 }

 if (pThis) {
  // Now that we have recovered our "this" pointer, let the
  // member function finish the job.
  return pThis->WndProc(hwnd, uMsg, wParam, lParam);
 }

 // We don't know what our "this" pointer is, so just do the default
 // thing. Hopefully, we didn't need to customize the behavior yet.
 return DefWindowProc(hwnd, uMsg, wParam, lParam);
}
</pre>
<p>
You pass the the <code>this</code> pointer to <code>Create&shy;Window</code>
as the last parameter, so that the window procedure can pick it up.
</p>
<pre>
hwnd = CreateWindow(... other parameters..., <u>this</u>);
</pre>
<p>
For dialog boxes, you can do basically the same thing.
It's just that the bookkeeping is slightly different.
</p>
<ul>
<li>
    The <code>...Param</code> versions of the dialog box functions
    are the ones which let you pass reference data.</p>
<li>
    The dialog procedure receives the reference data in the
    <code>lParam</code> passed with the <code>WM_<wbr>INIT&shy;DIALOG</code>.</p>
<li>
    The system-provided secret hiding place for dialog boxes is called
    <code>DWLP_<wbr>USER</code>.
</ul>
<pre>
INT_PTR CALLBACK MyDialogClass::s_DlgProc(
    HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 MyDialogClass *pThis; // our "this" pointer will go here

 if (uMsg == WM_INITDIALOG) {
  // Recover the "this" pointer which was passed as the last parameter
  // to the ...Dialog...Param function.
  pThis = reinterpret_cast&lt;MyDialogClass*&gt;(lParam);
  // Put the value in a safe place for future use
  SetWindowLongPtr(hdlg, DWLP_USER,
                   reinterpret_cast&lt;LONG_PTR&gt;(pThis));
 } else {
  // Recover the "this" pointer from where our WM_INITDIALOG handler
  // stashed it.
  pThis = reinterpret_cast&lt;MyDialogClass*&gt;(
              GetWindowLongPtr(hdlg, DWLP_USER));
 }

 if (pThis) {
  // Now that we have recovered our "this" pointer, let the
  // member function finish the job.
  return pThis->DlgProc(hwnd, uMsg, wParam, lParam);
 }

 // We don't know what our "this" pointer is, so just do the default
 // thing. Hopefully, we didn't need to customize the behavior yet.
 return FALSE; // returning FALSE means "do the default thing"
}
</pre>
<p>
The above code should look really familiar, since it's
the same as the window procedure case,
just with slightly different bookkeeping.
</p>
<p>
The resulting classes look like this:
</p>
<pre>
class MyWindowClass
{
 ... other class stuff goes here ...

 // This is the static callback that we register
 static LRESULT CALLBACK s_WndProc(
    HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

 // The static callback recovers the "this" pointer and then
 // calls this member function.
 LRESULT WndProc(
    HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
};

void MyWindowClass::SomeMemberFunction()
{
 // to register the class
 WNDCLASS wc;
 ... fill out the window class as normal ...
 wc.lpfnWndProc = MyWindowClass::s_WndProc;
 wc.lpszClassName = TEXT("MyWindowClass");
 RegisterClass(&amp;wc);

 // to create a window
 hwnd = CreateWindow(TEXT("MyWindowClass"),
                     ... other parameters as usual ...,
                     <u>this</u>);
}

class MyDialogClass
{
 ... other class stuff goes here ...

 // This is the static callback that we register
 static INT_PTR CALLBACK s_DlgProc(
    HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam);

 // The static callback recovers the "this" pointer and then
 // calls this member function.
 INT_PTR DlgProc(
    HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam);
};

void MyDialogClass::SomeMemberFunction()
{
 // to create the dialog box
 DialogBoxParam(...  other parameters as usual ...,
                <u>reinterpret_cast&lt;LPARAM&gt;(this)</u>);
}
</pre>
<p>
Okay, I'll try to write something more interesting for next week.
But at least I wrote this part down so I can point people at it
in the future.
</p>
<p>
<b>Bonus chatter</b>:
As commenter Ben noted last week,
<a HREF="http://msdn.microsoft.com/library/ms648712">
DDEML
is another component that uses the implicit reference data model</a>.
In the DDEML case, you use
<code>Dde&shy;Set&shy;User&shy;Handle</code></a> to set the reference data
and
<code>Dde&shy;Query&shy;Conv&shy;Info</code> to retrieve it.
</p>
<p>
(Various errors have been corrected based on comments, thanks everybody!)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1104223">
				<div id="div-comment-1104223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104223">
			February 3, 2014 at 7:07 am</a>		</div>

		<p>I have a circa 1994 library that does this. The comments say this is not documented that the initial value is zero. I suppose it might as well be now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1104253">
				<div id="div-comment-1104253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104253">
			February 3, 2014 at 7:33 am</a>		</div>

		<p>There is also the (ATL) thunking model where a small assembly stub sets things up and just jumps to the correct place. Too bad Windows never provided a helper function to build those, it would have avoided the DEP ATL compatibility shim and probably saved a few pages since each toolkit would not have to create its own pages to store them&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1104263">
				<div id="div-comment-1104263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104263">
			February 3, 2014 at 7:42 am</a>		</div>

		<p>&quot;Windows XP/2000: &nbsp; The SetWindowLongPtr function fails if the window specified by the hWnd parameter does not belong to the same process as the calling thread.&quot;</p>
<p>Does this mean calling from a different process succeeds on Vista+? That sounds bad. Or does this only include versions prior to XP/2000?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1104283">
				<div id="div-comment-1104283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104283">
			February 3, 2014 at 8:00 am</a>		</div>

		<p>Since CreateWindow returns the window handle, is it not possible to immediately call SetWindowLongPtr to set &quot;this&quot; and avoid potentially dispatching early messages to DefWindowProc?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jan-ringos even thread-even depth-1" id="comment-1104293">
				<div id="div-comment-1104293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jan+Ringo%C5%A1' rel='external nofollow' class='url'>Jan Ringoš</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104293">
			February 3, 2014 at 8:04 am</a>		</div>

		<p>@David: No, even the CreateWindow itself, before it returns, sends quite an amount of messages to this newly created window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1104313">
				<div id="div-comment-1104313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104313">
			February 3, 2014 at 8:27 am</a>		</div>

		<p>@David: If you want to make sure that your class member window procedure sees all messages, you need to set up a CBT hook, and initialize your reference data in the HCBT_CREATEWND event handler. This is essentially how MFC implements this pattern. Added benefit: This implementation is immune to changes in message ordering.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1104383">
				<div id="div-comment-1104383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zenju</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104383">
			February 3, 2014 at 9:45 am</a>		</div>

		<p>&gt; But how do you handle the error?</p>
<p>Throw an exception, as always :)</p>
<p>&gt; The call cannot fail if parameters are valid</p>
<p>Uhm&#8230; as an average dev with no internal knowledge of Win32 API implementation, is this something I am supposed to know? The conditions for errors are usually not documented on MSDN, so I treat API calls as a black box. Consequently I check even simple functions for errors to be on the safe side, whenever MSDN documents potential for failure.</p>
<p>I think this is more of a style question: &quot;How far would Raymond go with regards to error checking if he did not know any Windows internals.&quot;?</p>
<div class="post">[<em>You can&#39;t throw an exception because that <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/09/10/10347674.aspx">crosses a foreign stack frame</a>. Even if you didn&#39;t know that the function succeeds with valid parameters, I would put it in the category of &quot;don&#39;t check for errors you don&#39;t know how to handle.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1104393">
				<div id="div-comment-1104393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104393">
			February 3, 2014 at 9:46 am</a>		</div>

		<p>The &#39;hwnd&#39; parameter used here:</p>
<p>&#8212;</p>
<p>if (pThis) {</p>
<p>&nbsp;// Now that we have recovered our &quot;this&quot; pointer, let the</p>
<p>&nbsp;// member function finish the job.</p>
<p>&nbsp;return pThis-&gt;WndProc(hwnd, uMsg, wParam, lParam);</p>
<p>}</p>
<p>&#8212;</p>
<p>it must be inside &#39;this&#39; (must be done together with SetWindowLong call), so the code below slightly better:</p>
<p>&#8212;</p>
<p>if (pThis) {</p>
<p>&nbsp;// Now that we have recovered our &quot;this&quot; pointer, let the</p>
<p>&nbsp;// member function finish the job.</p>
<p>&nbsp;return pThis-&gt;WndProc(uMsg, wParam, lParam);</p>
<p>}</p>
<p>&#8212;</p>
<div class="post">[<em>But how does the class know what window handle to use if you don&#39;t pass it? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1104413">
				<div id="div-comment-1104413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zenju</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104413">
			February 3, 2014 at 10:29 am</a>		</div>

		<p>&gt; You can&#39;t throw an exception because that crosses a foreign stack frame</p>
<p>I&#39;m sorry, I should have pointed out that my question was more general:</p>
<p>E.g. in my code the SetWindowLongPtr() is not called from the Win32 callback but directly after CreateWindow() which happens in a C++ class&#39; constructor. So in my case it&#39;s safe to throw an exception. OTOH SetWindowLongPtr() must not be called any earlier, e.g. in the callback, because well&#8230; &quot;this&quot; is still under construction.</p>
<div class="post">[<em>But if you wait until CreateWindow returns, then you lose the ability to respond to creation messages. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1104433">
				<div id="div-comment-1104433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104433">
			February 3, 2014 at 10:38 am</a>		</div>

		<p>@Zenju: The call to SetWindowLongPtr() is called in the message handler for WM_NCCREATE. The window procedure is called with this message as part of the call to CreateWindow. If you throw an exception from the code that saves the pThis pointer you are crossing a foreign stack frame (namely that of CreateWindow, and APIs it calls).</p>
<p>As for the &quot;still under construction&quot; bit: The moment you enter you constructor&#39;s body the object pointed to by &quot;this&quot; is fully constructed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1104443">
				<div id="div-comment-1104443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104443">
			February 3, 2014 at 11:06 am</a>		</div>

		<p>[But how does the class know what window handle to use if you don&#39;t pass it? -Raymond]</p>
<p>I can&#39;t imagine not already having it as a class level variable.</p>
<p>[But how do you handle the error?]</p>
<p>Return fail from WM_NCCREATE.</p>
<div class="post">[<em>Sure, you can make it a class variable, and you need to remember to set it in your <code>WM_NCCREATE</code> handler, which must be done in the static part. The idea here was to make the member function have the same prototype as the original callback. If you want to fancy it up, then you can do that as a second step of the transformation. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1104463">
				<div id="div-comment-1104463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zenju</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104463">
			February 3, 2014 at 12:25 pm</a>		</div>

		<p>&gt; if you wait until CreateWindow returns, then you lose the ability to respond to creation</p>
<p>Yes, I don&#39;t need this msg type. Actually my scenario is to just create some invisible dummy window in order to respond to a single message type: DBT_DEVICEQUERYREMOVE. In high-level terms, I&#39;m watching for the USB-unmount event. Buy hey, I was asking a general question&#8230; why are you dissecting my scenario? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1104473">
				<div id="div-comment-1104473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zenju</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104473">
			February 3, 2014 at 12:33 pm</a>		</div>

		<p>@IInspectable:</p>
<p>What I meant with &quot;still under construction&quot; is that the class&#39; invariants do not hold until the constructor finishes &#8211; in C++ terms, the object&#39;s life time has not yet begun. In my example this means it&#39;s not safe to call a member function that expects all invariants to be established.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1104333">
				<div id="div-comment-1104333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zenju</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104333">
			February 3, 2014 at 8:55 am</a>		</div>

		<p><!-- p>&gt; pThis = reinterpret_cast&lt;MyWindowClass*&gt;(lpcs);


<p>Shouldn't this rather be the following?</p>




<p>pThis = reinterpret_cast&lt;MyWindowClass*&gt;(lpcs-&gt;lpCreateParams);</p>




<p>Also, is it... -->
</p>
<p>Is it paranoid to call SetWindowLongPtr() like the following?</p>
<p>::SetLastError(0);</p>
<p>if (::SetWindowLongPtr(windowHandle, GWLP_USERDATA, reinterpret_cast&lt;LONG_PTR&gt;(this)) == 0)</p>
<p>&nbsp; &nbsp;if (::GetLastError() != ERROR_SUCCESS)</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;&#8230; handle error &#8230;</p>
<div class="post">[<em>But how do you handle the error? (The call cannot fail if parameters are valid. If the window handle is invalid, then it means that the window was destroyed while being created, at which point it&#39;s going to be destroyed anyway so it doesn&#39;t matter that we couldn&#39;t set our &quot;this&quot; pointer.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1104503">
				<div id="div-comment-1104503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104503">
			February 4, 2014 at 2:36 am</a>		</div>

		<p>When I first needed to store user data for a window it surprised me that WM_NCCREATE wasn&#39;t the first message sent to the window, and in particular you could get window messages that you wouldn&#39;t be able to respond effectively to. (As I recall, the one I wanted to be able to handle turned out to be one of the ones that gets sent too early. Fortunately later versions of Windows provide another message which allows you similar functionality, but is processed much later.)</p>
<div class="post">[<em>I noted this <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/07/27/443824.aspx">some time ago</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1104613">
				<div id="div-comment-1104613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104613">
			February 5, 2014 at 12:36 am</a>		</div>

		<p>What ever happened to the discussion here: <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/03/03/384285.aspx" rel="nofollow" target="_new">blogs.msdn.com/&#8230;/384285.aspx</a></p>
<p>MSDN says GWLP_USERDATA &quot;is intended for use by the application that created the window.&quot;</p>
<p>You said guidance is unclear and for safety&#39;s sake avoid it.</p>
<p>So, should we be using the window extra bytes or is GWLP_USERDATA fine?</p>
<div class="post">[<em>Read the whole sentence. &quot;For safety&#39;s sake, then, you should just avoid it <span style="text-decoration:underline;">unless you can establish clear ownership</span>.&quot; In most cases, clear ownership is easy to establish because the code that registered the class is the same as the code that created the window. The issue only gets murky if you have a control implemented in one component but consumed in another. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1104893">
				<div id="div-comment-1104893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104893">
			February 6, 2014 at 4:19 am</a>		</div>

		<p>@Zenju/Raymond:</p>
<p>How&#39;s this for a tradeoff?</p>
<p>if(::SetWindowLongPtr(windowHandle, GWLP_USERDATA, reinterpret_cast&lt;LONG_PTR&gt;(this)) == 0)</p>
<p> &nbsp; &nbsp;abort();</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1104903">
				<div id="div-comment-1104903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1104903">
			February 6, 2014 at 6:56 am</a>		</div>

		<p>@AC: Seriously!? If GWLP_USERDATA hasn&#39;t been changed yet, terminate the process. If someone else already changed it, destroy it and continue. I can see why you prefer to remain anonymous.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1105123">
				<div id="div-comment-1105123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1105123">
			February 6, 2014 at 12:45 pm</a>		</div>

		<p>@IInspectable: The point is that you can&#39;t handle the error in any meaningful way. MSDN says the initial value is 0. If the initial value is not zero, either something went horribly wrong in the OS, or your program already set it (which means something went horribly wrong in your program).</p>
<p>And oh, yes. I mistakenly didn&#39;t copy the other lines from Zenju. Here&#39;s the fixed version:</p>
<p>::SetLastError(0);</p>
<p>if (::SetWindowLongPtr(windowHandle, GWLP_USERDATA, reinterpret_cast&lt;LONG_PTR&gt;(this)) == 0)</p>
<p> &nbsp; if (::GetLastError() != ERROR_SUCCESS)</p>
<p> &nbsp; &nbsp; &nbsp;abort();</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1105263">
				<div id="div-comment-1105263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1105263">
			February 7, 2014 at 8:06 am</a>		</div>

		<p>@AC: If SetWindowLongPtr() returns a value != 0 it means one thing, and one thing only: *Someone* changed the value stored in the window memory area at offset GWLP_USERDATA. There are no restrictions at all, any program can change the stored value of any window of the same desktop. Your conclusion, that something went horribly wrong in your program is unfounded.</p>
<p>Worse, though, your conclusion that &#8211; if you cannot handle an error in any meaningful way &#8211; one should take the most extreme measure and terminate the calling process, without doing any cleanup, or running any destructors. This is certainly not anything one should do. Instead, you could quit the window creating process and report an error by pass NULL to the caller of CreateWindow().</p>
<div class="post">[<em>There&#39;s no point trying to detect somebody maliciously attacking your window. They can screw with you in plenty of other more effective ways beyond tweaking your window bytes. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1105373">
				<div id="div-comment-1105373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Patrick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1105373">
			February 7, 2014 at 11:27 pm</a>		</div>

		<p>To make the link between the HWND and &#39;this&#39; in your own window class, you can stash &#39;this&#39; with SetMessageExtraInfo before calling CreateWindowEx(). Use a window procedure that just picks-up the &#39;this&#39; pointer with GetMessageExtraInfo, tucks it away with GWL_USERDATA, and forwards handling the fist message to whatever instance method will handle it. Before returning from the fist message, swap out the window procedure for one that skips the housekeeping (since it&#39;s all done by now) for one that just picks-up &#39;this&#39; from GWL_USERDATA and does whatever processing is required. Doing it this way gets the link between &#39;this&#39; and HWND established on the first message to the window procedure without, whatever it might be.</p>
<div class="post">[<em>SetMessageExtraInfo is too volatile for my tastes. Suppose there is a message hook, and the hook calls SetMessageExtraInfo too. Oops. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1105413">
				<div id="div-comment-1105413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Patrick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140203-00/?p=1893#comment-1105413">
			February 8, 2014 at 12:55 pm</a>		</div>

		<p>&quot;SetMessageExtraInfo is too volatile for my tastes &#8230;&quot;</p>
<p>Fair enough. Ones own TLS would work too, I suppose.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

