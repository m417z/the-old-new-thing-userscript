<html>
<head>
<title>Don't keep track of information you don't need</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Don&#8217;t keep track of information you don&#8217;t need</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 16, 2009 / year-entry #52</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">This is sort of an extreme corollary to Don't save anything you can recalculate. Sure, it sounds like such an obvious principle, but many people fail to understand its consequences. Let's look at the principle again. Don't keep track of information you don't need. I remember being asked to look at a customer's program, and...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
This is sort of an extreme corollary to
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/12/20/327369.aspx">
<i>Don't save anything you can recalculate</i></a>.
Sure, it sounds like such an obvious principle,
but many people fail to understand its consequences.
</p>
<p>
Let's look at the principle again.
<i>Don't keep track of information you don't need</i>.
I remember being asked to look at a customer's program,
and one thing that struck me was that the program had
a bazillion different flag variables that it spent a lot of time
setting and clearing. Here's an oversimplified example:
</p>
<pre>
void CConfiguration::ShowDialog(HWND hwnd)
{
  m_fShowingDialog = true;
  DoModal(hwnd);
  m_fShowingDialog = false;
  m_fDialogHasBeenShown = true;
}
</pre>
<p>
A na&iuml;ve reading of the code would lead one to believe that
the main purpose of the program was to set and clear flags!
Upon closer inspection, I found that most of the flag
variables were write-only.
Although the code went to great pains to update the flags
as it ran,
there was no code that actually cared whether the flag was set or not.
</p>
<p>
I asked the customer liaison about this, thinking that maybe
I missed something.
Maybe the variables were being used in a subtle way that I failed
to appreciate.
Maybe they were used during debugging.
</p>
<p>
The customer liaison got back to me.
"When I asked them about it, they just said, 'Ah, yes.'
Apparently that code was written by one of their guys named Bob.
I guess he likes to set and clear flags a lot."
</p>
<p>
<i>But is there any code that actually checks the values of those flags?</i>
</p>
<p>
"Probably not.
He just set and cleared those flags because he figured maybe someday
he might need them."
</p>
<p>
Indeed, once in a while, he actually tested one of the dozens of flags
he spent most of his time setting and resetting.
But the vast majority of the flags were write-only.
(And since most of the flags went unused,
I suspect that many of them weren't even accurate.)
</p>
<p>
Obviously, this is an extreme case of write-only variables,
but it illustrates the point.
Next time, we'll look at one of the consequences of the principle
of not keeping track of information you don't need.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-709113">
				<div id="div-comment-709113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chriso</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709113">
			February 16, 2009 at 1:43 pm</a>		</div>

		<p>Maybe Bob has</p>
<p>m_fHasToGoToSourceControl = false;</p>
<p>somewhere, which he <em>is</em> checking? :-D</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709123">
				<div id="div-comment-709123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709123">
			February 16, 2009 at 3:31 pm</a>		</div>

		<p>Isn&#8217;t it obvious? &nbsp;This is about job security. &nbsp;You throw a few hundred random lines of code in that do nothing and anyone else who takes a look at it will be confused. &nbsp;Also, this is why you should always throw a few for loops in that do some irrelevant calculation a couple million times. &nbsp;You can remove them later and call it a performance improvement.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709133">
				<div id="div-comment-709133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Greg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709133">
			February 16, 2009 at 4:08 pm</a>		</div>

		<p>At least this was only bools &#8211; I knew one &quot;Bob&quot; who loved to store information as delimited strings. He was familiar with the concept of arrays, as shown when he used arrays of delimited strings, but the light bulb never lit up.</p>
<p>Job security like that only works if you can convince management that a new guy can&#8217;t come in, delete everything, and have a fresh version done in a week. My Bob managed it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709143">
				<div id="div-comment-709143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709143">
			February 16, 2009 at 4:23 pm</a>		</div>

		<p>I know it isn&#8217;t the same thing, but I once ran into a class that had seven flags and only one of them could be set to true at a given time. &nbsp;In other words, a enum would have worked just fine.</p>
<p>Sure, there isn&#8217;t anything technically wrong with it, but when looking at the state machine, if you didn&#8217;t know that the flags were mutually exclusive, then the state machine had 128 possible states instead of just seven.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709153">
				<div id="div-comment-709153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709153">
			February 16, 2009 at 5:30 pm</a>		</div>

		<p>I&#8217;ve had to clean up after a Bob, but instead of &quot;deleting everything,&quot; I just kept chiseling away at the Bob code bit by bit (lol) until it was gone.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709163">
				<div id="div-comment-709163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kaenneth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709163">
			February 16, 2009 at 6:26 pm</a>		</div>

		<p>I&#8217;m currently annoyed by complier warnings-treated-as-errors for this problem&#8230;</p>
<p>If I temporarally comment out a line of code that uses a variable, I need to also comment out everywhere it&#8217;s set, and it&#8217;s declaration and then remember to uncomment them all later.</p>
<p>I could clutter the source with ifdefs&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709103">
				<div id="div-comment-709103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709103">
			February 16, 2009 at 12:58 pm</a>		</div>

		<p>Hmmm&#8230; I really do wonder that if Bob is sitting there writing reams of unused code and letting it get into production should he really be coding? Or should his check-ins be automatically redirected to the TheDailyWTF? That is if he is *even* using source control I somehow doubt it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709173">
				<div id="div-comment-709173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Merus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709173">
			February 16, 2009 at 9:32 pm</a>		</div>

		<p>I&#8217;ve never gotten &quot;write terrible code&quot; as job security, to be honest. A good employer will find or invent another project for you to work on because they want to keep you around, and a bad employer will let you go, giving you motivation to go find a good employer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709183">
				<div id="div-comment-709183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://vijay-soma.blogspot.com' rel='external nofollow' class='url'>Vijay</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709183">
			February 16, 2009 at 10:26 pm</a>		</div>

		<p>Maybe, the title of the post should have been -&quot;Don&#8217;t be a Bob&quot; :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709193">
				<div id="div-comment-709193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709193">
			February 17, 2009 at 12:33 am</a>		</div>

		<p>&#8216;I&#8217;ve never gotten &quot;write terrible code&quot; as job security&#8217;</p>
<p>That&#8217;s probably because you&#8217;re competent.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709203">
				<div id="div-comment-709203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">niyazpk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709203">
			February 17, 2009 at 12:47 am</a>		</div>

		<p>I thought most of the compilers can detect and remove the unused variables and code that has no consequence.</p>
<p>Am I wrong?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709213">
				<div id="div-comment-709213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.henning.makholm.net/' rel='external nofollow' class='url'>Henning Makholm</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709213">
			February 17, 2009 at 1:47 am</a>		</div>

		<p>niyazpk: For variables local to a procedure, certainly.</p>
<p>For variables local to a source file, perhaps (but it depends on the language when a variables is local to a source file. In C++, private fields can appear unused but still be unsafe to remove).</p>
<p>For global variables and public fields, no chance with ordinary compilers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709223">
				<div id="div-comment-709223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709223">
			February 17, 2009 at 4:04 am</a>		</div>

		<p>/ me verify that my RSS reader didn&#8217;t confuse The Old New Thing with TheDailyWTF</p>
<p>Tim Smith &#8211; It can happen gradually:</p>
<ol>
<li>Code only has 2 options, bool is great for that. So we have IsOption1.</li>
<li>
<p>Need to add Option2. The person writing Option2 doesn&#8217;t know about Option1, or doesn&#8217;t think about whether they&#8217;re mutually-exclusive or not. So we get IsOption2 instead of {none, Option1, Option2}.</p>
</li>
<li>
<p>Repeat as (not) needed.</p>
</li>
</ol>
<p>Also, I&#8217;ve found that some people can&#8217;t quite grasp the concept of enum.</p>
<p>niyazpk: The CPU time wasted on the flags is the least of worries here. The amount of brain-time to grok the code and understand that it does nothing is the point (at least until next time).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709243">
				<div id="div-comment-709243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709243">
			February 17, 2009 at 5:19 am</a>		</div>

		<p>I&#8217;m surprised that not a single Functional Programming fanatic has chimed in yet with an obligatory &quot;State machine? I don&#8217;t need no stinking state machine!!1!†&quot; statement.</p>
<p>†The 1 was intentional.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709253">
				<div id="div-comment-709253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wtroost</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709253">
			February 17, 2009 at 9:29 am</a>		</div>

		<p>It&#8217;s very common to see code written with the intention that it might be useful some day. &nbsp;In my experience it&#8217;s just too hard to predict the future. &nbsp;But then, I get labelled short-sighted for not writing everything as a library. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709313">
				<div id="div-comment-709313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sunriseprogrammer.blogspot.com/' rel='external nofollow' class='url'>Peter</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709313">
			February 17, 2009 at 11:17 am</a>		</div>

		<p>I actually see this as something different: it&#8217;s a pattern that&#8217;s occasionally useful as a hack, and which Bob has put into his muscle memory for dialog boxes.</p>
<p>For example, some time in his past, he had to deal with Dialogs &quot;A&quot; and &quot;B&quot; that both called setup_widget(). &nbsp;Then a requirement came in that setup_widget() do different things based on the caller. &nbsp;The correct thing to do is refactor, because setup_widget() now has to be two different functions. &nbsp;The hack is to set the calling/is_called flags.</p>
<p>Similarly, I can imagine a &quot;file save&quot; dialog function that should only be called if the underlying data has been changed. &nbsp;Clearly you need some sort of flag &#8212; and Bobs system will always provide that kind of flag.</p>
<p>Not to say it&#8217;s good code, mind; but it is understandable. &nbsp;It&#8217;s not job security, it&#8217;s just unfortunate training.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709643">
				<div id="div-comment-709643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709643">
			February 17, 2009 at 8:52 pm</a>		</div>

		<p>I like to leave space for code that might be written one day as much as the next guy does. But that&#8217;s not the same as writing the code in advance.</p>
<p>With write-only flags, there&#8217;s an absolute certainty (for certain values of &#8216;absolute&#8217;) that at least one of them will not be updated correctly, and because its never used, you won&#8217;t know about that bug. So one day when you write a small bit of code that needs to rely on the flag, you&#8217;ll have to search the entire codebase for places it should be set, anyway.</p>
<p>So, you should probably replace all reads of m_fShowingDialog with dialog.IsVisible() &#8211; or whatever suits the dialog API in use &#8211; and thus not be caching data that you don&#8217;t need. &nbsp; ;)</p>
<p>Also, in the sequence &quot;m_fShowingDialog = true; DoModal(hwnd); m_fShowingDialog = false;&quot; I didn&#8217;t see any locking, so one day in the future you know that someone&#8217;s going to add a thread that assumes m_fShowingDialog is accurate and complain that its not always working right. Of course, even then there will be problems with the typical single-threaded GUI library, but that issue isn&#8217;t fixed by an inaccurate flag. (And there&#8217;s plenty of cases where the flag introduces a race condition even if your resource happens to be thread safe, so caching without knowing what you&#8217;re doing is still wrong.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709733">
				<div id="div-comment-709733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-709733">
			February 18, 2009 at 2:02 am</a>		</div>

		<p>Maybe it&#8217;s written by staffs of one of the companies that sets target amount of LOC for employees.</p>
<p>Setting/clearing flags is a good way to get away a casual code review when counting LOC(consider even experts like Raymond have to ask before confirming they&#8217;re not needed, their uselessness is not readily detectable by whoever sitting above them). This is a useful way to make sure everyone in team meet the target.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-713533">
				<div id="div-comment-713533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2009/02/17/9426787.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090216-00/?p=19133#comment-713533">
			March 4, 2009 at 10:27 am</a>		</div>

		<p>Because there is no need for it to keep track of that information.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

