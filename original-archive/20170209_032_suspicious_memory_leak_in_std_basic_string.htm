<html>
<head>
<title>Suspicious memory leak in std::basic_string</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Suspicious memory leak in std::basic_string</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 9, 2017 / year-entry #33</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There are not the PODs you are looking for.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer asked for assistance debugging a memory leak.
Their memory leak detection tool was reporting a leak
in the following call stack:
</p>
<pre>
ntdll!RtlAllocateHeap
Contoso!malloc
Contoso!Allocator&lt;unsigned short&gt;::allocate
Contoso!std::basic_string&lt;unsigned short,std::char_traits&lt;unsigned short&gt;,Allocator&lt;unsigned short&gt;,_STL70&gt;::_Copy
Contoso!std::basic_string&lt;unsigned short,std::char_traits&lt;unsigned short&gt;,Allocator&lt;unsigned short&gt;,_STL70&gt;::_Grow
Contoso!std::basic_string&lt;unsigned short,std::char_traits&lt;unsigned short&gt;,Allocator&lt;unsigned short&gt;,_STL70&gt;::assign
Contoso!std::basic_string&lt;unsigned short,std::char_traits&lt;unsigned short&gt;,Allocator&lt;unsigned short&gt;,_STL70&gt;::assign
Contoso!std::basic_string&lt;unsigned short,std::char_traits&lt;unsigned short&gt;,Allocator&lt;unsigned short&gt;,_STL70&gt;::operator=
Contoso!ConfigurationImpl::validate
</pre>
<p>
"The <code>Configuration&shy;Impl</code> object itself
is not being leaked. Just the string inside it."
</p>
<p>
The Visual C++ team reported that there are no known memory
leaks in STL70.
However, the code above is using a custom allocator,
so they asked to see more of the customer's code.
</p>
<p>
And they found the smoking gun, but it wasn't
in the allocator.
It was in the class constructor.
</p>
<pre>
ConfigurationImpl::ConfigurationImpl()
{
    // Initialize all members to zero.
    memset(this, 0, sizeof(ConfigurationImpl));
}
</pre>
<p>
<code>basic_string</code>,
like all STL objects,
is non-POD.
A POD type is roughly&sup1;
something that can be declared in C as
a plain old <code>struct</code>,
such as <code>struct Pod { int x; int y; };</code>.
POD types can be treated as a blob of bytes
that you can manipulate with <code>memset</code>,
<code>memcpy</code>, and such.
Non-POD types, on the other hand, are those
with things like constructors, destructors,
virtual methods, all that fancy C++ stuff.
You cannot treat them as just a blob of bytes
because they have other fancy behaviors attached,
and treating them as a blob of bytes bypasses
(and may even damage)
those fancy behaviors.
</p>
<p>
In this case, using <code>memset</code> to zero
out a <code>basic_string</code> wipes out all
the work that was performed by the <code>basic_string</code>
constructor
and results in the dreaded <i>undefined behavior</i>.
Maybe undefined behavior manifests itself as a memory leak.
Maybe it manifests itself as a crash.
Maybe it manifests itself as
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20140627-00/?p=633">
time travel</a>.
</p>
<p>
In practical terms, what you have there is memory corruption.
When you have memory corruption, crazy things can happen.
So don't corrupt memory.
</p>
<p>
The customer thanked us for our assistance and fixed their
code.
</p>
<p>
&sup1;This is a simplified discussion,
so don't haul out your language-lawyer pitchforks.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1283685">
				<div id="div-comment-1283685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dilip</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1283685">
			February 9, 2017 at 7:04 am</a>		</div>

		<p>Raymond &#8212; you will have to forgive me here. I have no other means of communicating with you. So once again apologies for the tangent. This is regarding my comment here:<br />
I never got to see your follow up. An update: This bug was indeed communicated to <a href="mailto:secure@microsoft.com">secure@microsoft.com</a> and to the best of my knowledge it has also been published out in the wild. I won&#8217;t post the link here. If you are interested or curious, feel free to leave a comment here and I can send you the link offline.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1283725">
				<div id="div-comment-1283725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1283725">
			February 9, 2017 at 7:36 am</a>		</div>

		<p>Raymond&#8217;s email address is a puzzle. I solved it. You can too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1283755">
				<div id="div-comment-1283755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1283755">
			February 9, 2017 at 10:46 am</a>		</div>

		<p>Yes, I saw your communication with the security team. I am disappointed that you decided to publish your blog entry describing the vulnerability before the fix was released.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1283815">
				<div id="div-comment-1283815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dilip</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1283815">
			February 9, 2017 at 1:14 pm</a>		</div>

		<p>That wasn&#8217;t me. It was my mentor. I won&#8217;t recognize a kernel bug-check if it bit me on my tush.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1283736">
				<div id="div-comment-1283736" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1283736">
			February 9, 2017 at 8:31 am</a>		</div>

		<p>&#8230;or perhaps that&#8217;s just a typo in the post :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-even depth-1" id="comment-1283765">
				<div id="div-comment-1283765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1283765">
			February 9, 2017 at 10:48 am</a>		</div>

		<p>Yeah, that was a transcription error.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1283825">
				<div id="div-comment-1283825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1283825">
			February 9, 2017 at 1:37 pm</a>		</div>

		<p>Sadly, this blog is acting up again. I know I saw an on-topic comment earlier but now it&#8217;s not there.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1283835">
				<div id="div-comment-1283835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1283835">
			February 9, 2017 at 1:39 pm</a>		</div>

		<p>People reported a typo in the article. I fixed the typo.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1283885">
				<div id="div-comment-1283885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1283885">
			February 9, 2017 at 4:47 pm</a>		</div>

		<p>:quietly puts pitchfork back:</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1283935">
				<div id="div-comment-1283935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1283935">
			February 9, 2017 at 6:51 pm</a>		</div>

		<p>Sadly, the method of time travel via undefined behaviour has proven difficult to engineer into a workable time machine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1283975">
				<div id="div-comment-1283975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Haim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1283975">
			February 10, 2017 at 1:04 am</a>		</div>

		<p>Just to be correct, you can use memcpy/memove on types which are trivially copyable, which may be a non-pod type, depends on the nature of you objects.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1284006">
				<div id="div-comment-1284006" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1284006">
			February 10, 2017 at 6:55 am</a>		</div>

		<p>Right, but not memset.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1283985">
				<div id="div-comment-1283985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1283985">
			February 10, 2017 at 2:28 am</a>		</div>

		<p>If I recall correctly, the less wrong way to do this is to override operator new for the class.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1284025">
				<div id="div-comment-1284025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1284025">
			February 10, 2017 at 7:33 am</a>		</div>

		<p>To avoid people reading your comment and getting a misguided advice: no, the new operator is not related. The new operator is only meant to allocate memory, not initialize it, it provides raw bytes. Initialization is the job of the constructor.</p>
<p>Given that it&#8217;s almost certain that the std::string was a member variable not help by a pointer, the operator new was not involved anyway.</p>
<p>Third, even if you provided an operator new, a sub-class could provide its own and not match your augmented expectations.</p>
<p>If you need optimized initialization based on using memset, you have to use a POD as Raymond said (plain old data).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx even depth-2" id="comment-1284035">
				<div id="div-comment-1284035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170209-00/?p=95397#comment-1284035">
			February 10, 2017 at 7:42 am</a>		</div>

		<p>I think you mean that in the class&#8217;s new override use global new to get a buffer, pave it with memset() and return the pointer to continue with the rest of the object construction.</p>
<p>Just wanted to try to clarify for those who haven&#8217;t used new overrides much.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

