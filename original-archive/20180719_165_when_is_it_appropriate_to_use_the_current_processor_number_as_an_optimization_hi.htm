<html>
<head>
<title>When is it appropriate to use the current processor number as an optimization hint?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When is it appropriate to use the current processor number as an optimization hint?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 19, 2018 / year-entry #165</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180719-00/?p=99285</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Try not to let it slip out from under you.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Some time ago, on the topic of avoiding heap contention,
I left an exercise that asked
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180531-00/?p=98885">
whether it would be appropriate
to use the current processor number
(as reported by <code>Get&shy;Current&shy;Processor&shy;Number</code>)
to select which heap to use</a>.
</p>
<p>
In this case, the answer is no.
While using the current processor would avoid contention at allocation,
it would make contention at deallocation even worse.
</p>
<p>
Suppose thread&nbsp;1
is running on processor&nbsp;1 and allocates some memory.
It allocates it from heap&nbsp;1.
Later,
thread&nbsp;2
is running on processor&nbsp;1 and allocates some memory.
It also allocates it from heap&nbsp;1.
</p>
<p>
Time passes,
and the two threads are now running simultaneously,
say one on processor&nbsp;1 and another on processor&nbsp;2.
They both go to free the memory, but since you have to free
the memory back to the heap from which it was allocated,
the fact that they are running on separate processors right
now is immaterial.
They both have to free the memory back to heap&nbsp;1,
and that creates contention.
</p>
<p>
If we had assigned heaps based on thread, then they would have
allocated from different heaps and freed back to those different
heaps.
No contention.
(Assuming the threads were assigned different heaps.)
</p>
<p>
Okay, so what guidelines can we infer from this analysis?
</p>
<p>
If you are going to use the current processor as a hint
to avoid contention,
the entire scenario needs to be quick.
If the processor changes while your scenario is running,
then you will have contention if the new thread also tries
to perform that same processor-keyed operation.
</p>
<p>
In the case of memory allocation,
the memory is allocated, and then used for a while,
possibly a long time,
before finally being freed back to the heap from which
it was allocated.
Since the scenario is a very long one,
using the current processor number as a hint is
going to run into a lot of cases of accidental contention.
</p>
<p>
On the other hand, if you had a linked list of available
memory blocks,
then using the current processor may be helpful.
Keep a free list per processor.
When it's time to allocate a node, you consult the
free list for the current processor.
And when you want to free a node,
you free it back to the list associated with the
processor doing the free.
</p>
<p>
Unlinking a node from a linked list and pushing
a node to the front of a linked list are relatively
fast operations,
so the processor is unlikely to change out from
under you.
The important distinction here is that we don't try to
free the node to the list it originally came from.
We return it to the list that belongs to the current
processor <i>at the time it is freed</i>.
</p>
<p>
Of course, if you find that the free list is empty,
then you'll have to go create some new nodes.
Yes, this introduces the risk of contention,
but creating new nodes will be a comparatively slow operation,
so the hope is that
added risk of contention is not noticeable
in practice.
</p>
<p><b>Bonus chatter</b>:
In
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180531-00/?p=98885">
the discussion that followed the exercise</a>,
there were a pair apparently contradictory claims:
</p>
<ul>
<li>The scheduler tries to keep load even across
    all processors.</li>
<li>The scheduler tries not to move threads
    between processors.</li>
</ul>
<p>
Both are right.
</p>
<p>
When a thread is ready to be scheduled, the
scheduler will try to put it back on the processor
that it had been running on most recently.
But if that processor is not available,
then the scheduler will move it to another processor.
</p>
<p>
In other words, the
"try not to move threads between processors" rule
is a final tie-breaker if the scheduler has
multiple processors available to it.
But if the thread becomes ready, and there is
only one available processor,
then the thread will run on that processor.
If the system has decided to shut down a processor
to conserve power,
then the thread will go to a processor that still
has power.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1352755">
				<div id="div-comment-1352755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JAS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180719-00/?p=99285#comment-1352755">
			July 19, 2018 at 4:10 pm</a>		</div>

		<p>When the CPU freeing the blocks experiences a glut, how does this get resolved?  I can only imagine some kind of global lock-less queue where you post all blocks over N, and where the empty CPUs will go if they run out.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1352805">
				<div id="div-comment-1352805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180719-00/?p=99285#comment-1352805">
			July 20, 2018 at 3:34 am</a>		</div>

		<p>The global queue doesn&#8217;t need to be lockless.  Since you&#8217;re not going to be using the global queue often, and since you&#8217;re less likely to have multiple CPUs accessing it at the same time, performance doesn&#8217;t matter so much.  You can have rules like:</p>
<p>* On free, if there are 2N blocks in the CPU-local queue, take a global lock and move N blocks from the CPU-local queue to the global queue, leaving N blocks in the CPU-local queue.</p>
<p>* When you want to allocate a block, if the CPU-local queue is empty, take a lock, take one block from the global queue, and also move N blocks from the global queue to the CPU-local queue (or until the global queue is empty, if it had less than N blocks in it).  If the global queue was empty, allocate 2N+1 blocks using malloc() and put N of them in the CPU-local queue, N of them in the global queue, and return 1.</p>
<p>With this design, each CPU will only access the global queue when there have been N more allocations than frees, or N more frees than allocations.  The maximum amount of memory used is (peak_actual_usage + 2*N*number_of_cpus) blocks (or less).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1352815">
				<div id="div-comment-1352815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180719-00/?p=99285#comment-1352815">
			July 20, 2018 at 6:54 am</a>		</div>

		<p>I vaguely recall seeing a heapfree-like function that could free a block on to the wrong heap somehow. I shudder to think what heapdestroy would do to that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1354015">
				<div id="div-comment-1354015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dennis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180719-00/?p=99285#comment-1354015">
			July 27, 2018 at 6:40 pm</a>		</div>

		<p>I&#8217;m not sure if I buy this argument. It seems like using the processor id will reduce contention on allocation and won&#8217;t do *worse* than random assignment for free. (I can&#8217;t think of a way to assign threads to heaps guaranteed to do better than random.)  If the workload does a lot more allocating than freeing, (perhaps it allocates incrementally and frees it all in the end) then processor id might pull ahead. (It might end up allocating memory from many heaps, though.)</p>
<p>There are problems using the processor id if the processes are loaded funny, or if the CPUs are asymmetric. On the other hand, maybe using the processor id helps in the NUMA case.</p>
<p>Using per CPU lists is obviously better since you can go lock-free, but if you are going to take a lock, using the processor id isn&#8217;t *that* bad.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1354025">
				<div id="div-comment-1354025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180719-00/?p=99285#comment-1354025">
			July 27, 2018 at 9:20 pm</a>		</div>

		<p>You can assign a heap to each thread. Then there is no contention because the thread will free the memory back to its dedicated heap.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

