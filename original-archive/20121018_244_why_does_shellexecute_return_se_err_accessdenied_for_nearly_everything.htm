<html>
<head>
<title>Why does ShellExecute return SE_ERR_ACCESSDENIED for nearly everything?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does ShellExecute return SE_ERR_ACCESSDENIED for nearly everything?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 18, 2012 / year-entry #245</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20121018-00/?p=6303</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We saw a while ago that the Shell­Execute function returns SE_ERR_ACCESS­DENIED at the slightest provocation. Why can't it return something more meaningful? The short-term answer is that the return value from Shell­Execute is both a success code and an error code, and you check whether the value is greater than 32 to see which half...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>We saw a while ago that <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/11/18/10092914.aspx"> the <code>Shell&shy;Execute</code> function returns <code>SE_<wbr>ERR_<wbr>ACCESS&shy;DENIED</wbr></wbr></code> at the slightest provocation</a>. Why can't it return something more meaningful?</p>
<p> The short-term answer is that <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/05/05/590749.aspx"> the return value from <code>Shell&shy;Execute</code> is both a success code and an error code</a>, and you check whether the value is <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/11/08/1035971.aspx"> greater than 32</a> to see which half you're in. In particular, the error code case is if the value you got is less than or equal to 32. This already demonstrates that the error codes are limited to values less than or equal to 32. And all those error codes are already accounted for, so there's nowhere to stick "an error not on the original list of 32 possible error codes." Therefore, any error that wasn't on the original list of error codes gets turned into <code>SE_<wbr>ERR_<wbr>ACCESS&shy;DENIED</wbr></wbr></code>, in the same way that MS-DOS turned <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/01/17/354399.aspx"> any error that didn't map to one of its original errors into 5 (access denied)</a>. </p>
<p> Okay, but why was 32 chosen as the cut-off? </p>
<p> The <code>Shell&shy;Execute</code> function didn't come up with that number. That number came from the kernel folks, who decided that <code>Win&shy;Exec</code> function returned the handle to the application that was executed on success, or an error code less than 32 on failure. And back in the old days, <code>Shell&shy;Execute</code> was just a function that called <code>Find&shy;Executable</code> and then passed the result to <code>Win&shy;Exec</code>, so following the <code>Win&shy;Exec</code> pattern made sense. </p>
<p> (You may have noticed a tiny discrepancy there. The shell folks decided to add a new error code <code>SE_<wbr>ERR_<wbr>DLL&shy;NOT&shy;FOUND</wbr></wbr></code> with a numeric value of 32, thereby making the return value from <code>Shell&shy;Execute</code> behave subtly differently from that of <code>Win&shy;Exec</code>. The people who made this decision probably regretted it once it became clear that lots of applications were checking the return value incorrectly, but it's too late to fix it now.) </p>
<p> Okay, so let's peel back another layer: Why did the <code>Win&shy;Exec</code> function overload the return value? Well, overloaded return values were all the rage back then. A lot of functions to create something return the created object on success, or null on failure. The kernel folks said, "Well, we can do even better than that. Not only can we tell you that we failed to create the application, we can even tell you why! You see, MS-DOS has <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/01/17/354399.aspx"> a maximum of 31 error codes</a>, so we can just return the error code directly if we can ensure that no values less than 32 are valid segments. And we can make that guarantee because the 8086 processor reserves the first 1024 bytes of memory (the first 64&nbsp;segments) for its interrupt vector table, so no application could possibly be loaded there. Hooray! We're such over-achievers!" </p>
<p> This weird way of reporting errors from <code>Shell&shy;Execute</code> has been preserved for compatibility. New applications would probably better served to switch to the <code>Shell&shy;Execute&shy;Ex</code> function instead, since it reports errors by calling <code>Set&shy;Last&shy;Error</code> with the <i>real</i> error code before returning. (In other words, you can call <code>Get&shy;Last&shy;Error</code> to get the real error code.) </p>
<p> <b>Bonus chatter</b>: Wait a second, if <code>Get&shy;Last&shy;Error</code> gets you the real error code, how come the original report was that <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/11/18/10092914.aspx"> the <code>Shell&shy;Execute&shy;Ex</code> function also returns <code>SE_<wbr>ERR_<wbr>ACCESS&shy;DENIED</wbr></wbr></code></a>? </p>
<p> Because it depends on what you mean by "returns". Technically speaking, the <code>Shell&shy;Execute&shy;Ex</code> function returns <code>FALSE</code> for all errors, since it is prototyped as returning a <code>BOOL</code>. When somebody says that it returns an error code, you first have to ask where they got that error code from. </p>
<p> If they got it from <code>Get&shy;Last&shy;Error</code>, then they'll get a meaningful error code, or at least something more meaningful than <code>SE_<wbr>ERR_<wbr>ACCESS&shy;DENIED</wbr></wbr></code>. </p>
<p> But if instead they look at the <code>hInstApp</code> member of the <code>SHELL&shy;EXECUTE&shy;INFO</code> structure, then they'll get that useless <code>SE_<wbr>ERR_<wbr>ACCESS&shy;DENIED</wbr></wbr></code> value again. Because the <code>hInstApp</code> is where the legacy return value is recorded. If you look there, you're going to see the old lame error code. So don't look there. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1016853">
				<div id="div-comment-1016853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Skrobov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121018-00/?p=6303#comment-1016853">
			October 18, 2012 at 7:52 am</a>		</div>

		<p>I thought you&#39;ve already covered that 6 years ago?</p>
<p><a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/11/08/1035971.aspx" target="_new" rel="nofollow">blogs.msdn.com/&#8230;/1035971.aspx</a></p>
<div class="post">[<i>I linked to that post in the article. But the older article doesn&#39;t explain why 32, and why everything turns into error 5. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1016883">
				<div id="div-comment-1016883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121018-00/?p=6303#comment-1016883">
			October 18, 2012 at 9:31 am</a>		</div>

		<p>Thanks for explaining the magic 32. &nbsp;That method of returning failure (if the handle is less than 32) always struck me as quite odd.</p>
<p>I&#39;ve said it before, but I&#39;ll say it again: I love these articles that explain some of the historical oddities of the system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1016913">
				<div id="div-comment-1016913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121018-00/?p=6303#comment-1016913">
			October 18, 2012 at 2:20 pm</a>		</div>

		<p>[The people who made this decision probably regretted it once it became clear that lots of applications were checking the return value incorrectly, but it&#39;s too late to fix it now.]</p>
<p>Sure it is. Never return that error again. Give them path not found instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 odd alt thread-odd thread-alt depth-1" id="comment-1016923">
				<div id="div-comment-1016923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121018-00/?p=6303#comment-1016923">
			October 18, 2012 at 2:39 pm</a>		</div>

		<p>@Joshua: If this blog teaches anything, it&#39;s that you just know that somewhere out there is an application which actually relies on those being two different responses.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1016933">
				<div id="div-comment-1016933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121018-00/?p=6303#comment-1016933">
			October 18, 2012 at 10:36 pm</a>		</div>

		<p>@AndyCadley: I somehow can&#39;t help but imagine a whole cadre of Microsoft software developers, paralyzed with fear at their terminals, who *want* to write software but know that every decision they make irrevocably binds them.</p>
<p>In fact, I think some of them eventually couldn&#39;t handle the stress and moved to the legal department, where the consequences of failure are less dire. And that&#39;s how we get EULAs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1016963">
				<div id="div-comment-1016963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121018-00/?p=6303#comment-1016963">
			October 19, 2012 at 6:32 am</a>		</div>

		<p>&gt; &#8230; who *want* to write software but know that every decision they make irrevocably binds them.</p>
<p>That&#39;s how it is in programming, we just have to get used to it. &nbsp;You start with an infinite solution space, and everything you do reduces the space. &nbsp;All software eventually succumbs to arteriosclerosis, at least if you care that what you do today fits in with what you did yesterday,</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1017013">
				<div id="div-comment-1017013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">a random passerby</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121018-00/?p=6303#comment-1017013">
			October 19, 2012 at 7:57 am</a>		</div>

		<p>@mikeb: You mean &quot;if the handle is less than *or equal to* 32&quot;, right? It&#39;s the little things that get you.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

