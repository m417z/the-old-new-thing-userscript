<html>
<head>
<title>The implementation of anonymous methods in C# and its consequences (part 2)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The implementation of anonymous methods in C# and its consequences (part 2)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 3, 2006 / year-entry #261</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When the anonymous class becomes visible.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time we took a look at how anonymous methods are implemented.
Today we'll look at a puzzle that can be solved with what we've learned.
Consider the following program fragment:
</p>
<pre>
using System;

class MyClass {
 delegate void DelegateA();
 delegate void DelegateB();

 static DelegateB ConvertDelegate(DelegateA d)
 {
  return (DelegateB)
   Delegate.CreateDelegate(typeof(DelegateB), d.Method);
 }

 static public void Main()
 {
  int i = 0;
  ConvertDelegate(delegate { Console.WriteLine(0); });
 }
}
</pre>
<p>
The <code>ConvertDelegate</code> method merely converts
a <code>DelegateA</code> to a <code>DelegateB</code>
by creating a <code>DelegateB</code> with the same underlying
method.
Since the two delegate types use the same signature,
this conversion goes off without a hitch.
</p>
<p>
But now let's make a small change to that <code>Main</code> function:
</p>
<pre>
 static public void Main()
 {
  int i = 0;
  // one character change - 0 becomes i
  ConvertDelegate(delegate { Console.WriteLine(<font COLOR=blue>i</font>); });
 }
</pre>
<p>
Now the program crashes with a
<code>System.ArgumentException</code> at the point where
we try to create the <code>DelegateB</code>.
What's going on?
</p>
<p>
First,
observe that the overload of <code>Delegate.CreateDelegate</code>
that was used is one that can only be used to create delegates
from static methods.
Next, note that in <code>Test1</code>,
the anonymous method references neither its own members
nor any local variables from its lexically-enclosing method.
Therefore, the resulting anonymous method is 
a "static anonymous method of the easy type".
Since the anonymous method is a static member,
the use of the "static members only" overload of
<code>Delegate.CreateDelegate</code> succeeds.
</p>
<p>
However, in <code>Test2</code>, the anonymous method dereferences the
<code>i</code> variable from its lexically-enclosing method.
This forces the anonymous method to be a "anonymous method of the hard type",
and those anonymous methods use an anonymous instance member function
of an anonymous helper class.
As a result,
<code>d.Method</code> is an instance method, and the chosen overload of
<code>Delegate.CreateDelegate</code> throws an invalid parameter
exception since it works only with static methods.
</p>
<p>
The solution is to use a different overload of
<code>Delegate.CreateDelegate</code>,
one that work with either static or instance member functions.
</p>
<pre>
 DelegateB ConvertDelegate(DelegateA d)
 {
  return (DelegateB)
   Delegate.CreateDelegate(typeof(DelegateB), <font COLOR=blue>d.Target,</font> d.Method);
 }
</pre>
<p>
The <code>Delegate.CreateDelegate(Type, Object, MethodInfo)</code>
overload creates a delegate for a static method if the
<code>Object</code> parameter is <code>null</code> or
a delegate for an instance method if the <code>Object</code>
parameter is non-<code>null</code>.
Hardly by coincidence, that is exactly what <code>d.Target</code> produces.
If the original delegate is for a static method, then
<code>d.Target</code> is <code>null</code>; otherwise, it is
the object for which the instance method is to be invoked on.
</p>
<p>
This fix, therefore, makes the <code>ConvertDelegate</code>
function handle conversion of delegates for either static or
instance methods.
Which is a good thing, because it may now be called upon to
convert delegates for instance methods as well as static ones.
</p>
<p>
Okay, this time we were lucky that the hidden gotcha of anonymous
methods resulted in an exception.
Next time, we'll see a gotcha that merely results in incorrect
behavior that will probably take you forever to track down.
</p>
<p>
<b>Update</b>: This behavior
<a HREF"http://stackoverflow.com/questions/37152772/why-is-action-method-isstatic-different-between-visual-studio-2013-and-2015-for">
changed in Visual Studio 2015</a>
with
the switch to the Roslyn compiler.
For performance reasons,
anonymous methods are now always instance methods, even if they
capture nothing.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-405833">
				<div id="div-comment-405833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carlos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-405833">
			August 3, 2006 at 10:41 am</a>		</div>

		<p>It&#8217;s easier to write:</p>
<p>DelegateB ConvertDelegate(DelegateA d)<br />
<br />{<br />
<br /> &nbsp;return delegate { d(); };<br />
<br />}</p>
<p>Additionally, this also works if d is multicast. &nbsp;(Note that the new delegate is a deep copy: it isn&#8217;t affected by changes to the original delegate&#8217;s invocation list.)</p>
<p>The tradeoff is that it&#8217;s cheaper to create the new delegate but more expensive to call it.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405893">
				<div id="div-comment-405893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jasonhaley.com/blog/archive/2006/08/03/136783.aspx' rel='external nofollow' class='url'>Jason Haley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-405893">
			August 3, 2006 at 11:25 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-406213">
				<div id="div-comment-406213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Grant Husbands</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-406213">
			August 6, 2006 at 12:00 pm</a>		</div>

		<p>I know it&#8217;s not the case, but shouldn&#8217;t DelegateA and DelegateB be trivially the same type, anyway? &nbsp; (This is an open question &#8211; I&#8217;m not meaning to imply that you, Raymond, should know everything about every .NET design decision and I hope you don&#8217;t mind me posting an open question, here.)</p>
<p>It certainly blocked me when I wanted to create a generics-based parameter-binding library, along the lines of boost::bind.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-407283">
				<div id="div-comment-407283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ericgu/archive/2006/08/08/692346.aspx' rel='external nofollow' class='url'>Eric Gunnerson's C# Compendium</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-407283">
			August 8, 2006 at 1:23 pm</a>		</div>

		<p>Raymond wrote a really nice series of posts on this:</p>
<p>Part 1<br />
<br />Part 2<br />
<br />Part 3<br />
<br />He also points out that&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-407513">
				<div id="div-comment-407513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dotnetkicks.com/csharp/The_implementation_of_anonymous_methods_in_C_and_its_consequences_2' rel='external nofollow' class='url'>DotNetKicks.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-407513">
			August 9, 2006 at 3:51 am</a>		</div>

		<p>You&#8217;ve been kicked (a good thing) &#8211; Trackback from DotNetKicks.com</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-408613">
				<div id="div-comment-408613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.dotninjas.dk/t4rzsan/archive/2006/08/14/1531.aspx' rel='external nofollow' class='url'>Anonymous Methods -&gt; code bloat</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-408613">
			August 14, 2006 at 11:09 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.dotninjas.dk/t4rzsan/archive/2006/08/14/1531.aspx" rel="nofollow">http://blogs.dotninjas.dk/t4rzsan/archive/2006/08/14/1531.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-421083">
				<div id="div-comment-421083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://timvw.madoka.be/?p=622' rel='external nofollow' class='url'>Tim Van Wassenhove &raquo; Blog Archive &raquo; Anonymous methods</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-421083">
			September 16, 2006 at 5:13 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://timvw.madoka.be/?p=622" rel="nofollow">http://timvw.madoka.be/?p=622</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-428683">
				<div id="div-comment-428683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.timvw.be/anonymous-methods/' rel='external nofollow' class='url'>Tim Van Wassenhove &raquo; Anonymous methods</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-428683">
			October 7, 2006 at 8:03 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.timvw.be/anonymous-methods/" rel="nofollow">http://www.timvw.be/anonymous-methods/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-549003">
				<div id="div-comment-549003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jcesar.totumo.net/2007/09/13/d-should-have-real-closures/' rel='external nofollow' class='url'>Julio C??sar Carrascal Urquijo &raquo; Archivo &raquo; D should have real closures.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-549003">
			September 13, 2007 at 1:01 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://jcesar.totumo.net/2007/09/13/d-should-have-real-closures/" rel="nofollow">http://jcesar.totumo.net/2007/09/13/d-should-have-real-closures/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-552343">
				<div id="div-comment-552343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/fxcop/archive/2007/09/21/new-for-visual-studio-2008-support-for-anonymous-methods-and-lambda-expressions.aspx' rel='external nofollow' class='url'>The Visual Studio Code Analysis Team Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-552343">
			September 21, 2007 at 11:36 am</a>		</div>

		<p>One of my favorite new features for Code Analysis in Visual Studio 2008 is our support for analyzing</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-688763">
				<div id="div-comment-688763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.developers.org.ua/archives/max/2006/08/04/weekly-linkdump-39/' rel='external nofollow' class='url'>Weekly linkdump #39 - max - ???????? ??????????????????????????</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-688763">
			December 2, 2008 at 9:55 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.developers.org.ua/archives/max/2006/08/04/weekly-linkdump-39/" rel="nofollow">http://www.developers.org.ua/archives/max/2006/08/04/weekly-linkdump-39/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724423">
				<div id="div-comment-724423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/psteele/archive/2009/04/06/resharper-access-to-modified-closure.aspx' rel='external nofollow' class='url'>Patrick Steele's .NET Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-724423">
			April 6, 2009 at 3:20 pm</a>		</div>

		<p>On the advice of Jay Wren , I decided to try our ReSharper 4.1 .&amp;#160; I had previously installed DevExpress</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724453">
				<div id="div-comment-724453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.srtsolutions.com/blogs/patricksteele/archive/2009/04/06/resharper-access-to-modified-closure.aspx' rel='external nofollow' class='url'>Patrick Steele</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-724453">
			April 6, 2009 at 3:27 pm</a>		</div>

		<p>On the advice of Jay Wren , I decided to try our ReSharper 4.1 .&amp;#160; I had previously installed DevExpress&amp;#39;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-737843">
				<div id="div-comment-737843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sdesmedt.wordpress.com/2009/05/21/for-once-and-for-all-delegates-events-anonymous-methods-and-lambda-expressions/' rel='external nofollow' class='url'>For once and for all: Delegates, Events, Anonymous Methods and Lambda Expressions &laquo; Hungry for Knowledge</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-737843">
			May 21, 2009 at 2:53 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://sdesmedt.wordpress.com/2009/05/21/for-once-and-for-all-delegates-events-anonymous-methods-and-lambda-expressions/" rel="nofollow">http://sdesmedt.wordpress.com/2009/05/21/for-once-and-for-all-delegates-events-anonymous-methods-and-lambda-expressions/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-747893">
				<div id="div-comment-747893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://beyondthespec.com/blog/2009/06/19/anonymous-methods-internals/' rel='external nofollow' class='url'>Anonymous Methods Internals | Beyond The Spec</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060803-00/?p=30253#comment-747893">
			June 18, 2009 at 7:52 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://beyondthespec.com/blog/2009/06/19/anonymous-methods-internals/" rel="nofollow">http://beyondthespec.com/blog/2009/06/19/anonymous-methods-internals/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

