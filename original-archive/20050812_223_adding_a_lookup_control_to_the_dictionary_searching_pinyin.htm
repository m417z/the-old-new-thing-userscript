<html>
<head>
<title>Adding a lookup control to the dictionary: Searching Pinyin</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Adding a lookup control to the dictionary: Searching Pinyin</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 12, 2005 / year-entry #224</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050812-10/?p=34593</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Finally we start searching. For now, the search algorithm is going to be very simple: The string you type into the edit control will be treated as the start of a Pinyin word or phrase. We'll make it fancier later. Here is where a lot of the groundwork (some of which I called out explicitly...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Finally we start searching.
For now, the search algorithm is going to be very simple:
The string you type into the edit control will be treated as the
start of a Pinyin word or phrase.
We'll make it fancier later.
</p>
<p>
Here is where a lot of the groundwork
(<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/05/19/420038.aspx"
>some of which I called out explicitly</a>
and some of which I slipped in without calling attention to it)
starts to pay off.
</p>
<p>
Up until now, the items in the listview came directly from the
dictionary.
Of course, when a word is being looked up, we want to reduce the
list to those that match the word or phrase being searched for.
We will introduce a new member <code>m_vMatch</code> which is
a vector of pointers to the items we actually want to display.
</p>
<pre>
class RootWindow : public Window
{
 ...
 <font COLOR=blue><strike>// const DictionaryEntry&amp; Item(int i) { return m_dict.Item(i); }
 // int Length() { return m_dict.Length(); }</strike>
 const DictionaryEntry&amp; Item(int i) { return *m_vMatch[i]; }
 int Length() { return m_vMatch.size(); }</font>
 ...
 <font COLOR=blue>void OnCommand(UINT id, UINT cmd);
 void Refilter();</font>
 ...
private:
 ...
 <font COLOR=blue>vector&lt;const DictionaryEntry*&gt; m_vMatch;</font>
};
</pre>
<p>
By tweaking our <code>Item</code> and <code>Length</code> member
functions, we can now render out of the list of matches instead of
out of the entire dictionary.
</p>
<pre>
LRESULT RootWindow::OnCreate()
{
 ...
 <font COLOR=blue><strike>// ListView_SetItemCount(m_hwndLV, Length());</strike></font>
 ...
 m_hwndLastFocus = m_hwndEdit;
 <font COLOR=blue>m_vMatch.reserve(m_dict.Length());
 Refilter();</font>

 return 0;
}
</pre>
<p>
Since the list of matches is at most the number of words in the
dictionary, we can reserve that size up front and avoid needless
reallocations.
Once we've done that, we call our new <code>Refilter</code> method
to compute the matches (which populates the listview).
It is <code>Refilter</code> that will do the
<code>ListView_SetItemCount</code>, so there's no point in us
doing it here.
</p>
<pre>
<font COLOR=blue>void RootWindow::OnCommand(UINT id, UINT cmd)
{
 switch (id) {
 case IDC_EDIT:
  switch (cmd) {
  case EN_CHANGE:
   Refilter();
  }
  break;
 }
}</font>

  // add to RootWindow::HandleMessage()
  <font COLOR=blue>case WM_COMMAND:
   OnCommand(GET_WM_COMMAND_ID(wParam, lParam),
             GET_WM_COMMAND_CMD(wParam, lParam));
   break;</font>
</pre>
<p>
We also rebuild the list of matches if the user makes a change
to the edit control.
This means that there is no need for a "Search" button.
The listview auto-filters as you type.
</p>
<pre>
<font COLOR=blue>void RootWindow::Refilter()
{
 WCHAR szBuf[256];
 DWORD cchBuf = GetWindowText(m_hwndEdit, szBuf, 256);
 m_vMatch.clear();
 for (int i = 0; i &lt; m_dict.Length(); i++) {
  const DictionaryEntry&amp; de = m_dict.Item(i);
  if (StrCmpNIW(de.m_pszPinyin, szBuf, cchBuf) == 0) {
   m_vMatch.push_back(&amp;de);
  }
 }
 ListView_SetItemCount(m_hwndLV, Length());
 ListView_SetItemState(m_hwndLV, -1, 0, LVIS_SELECTED);
 InvalidateRect(m_hwndLV, NULL, FALSE);
}</font>
</pre>
<p>
Building the list of matches is rather simple and anticlimactic.
We get the string the user typed into the edit control and
walk through all the words in the dictionary, seeing if the
Pinyin begins with the user's typing.
If so, then we add it to the match vector.
</p>
<p>
Once the match list is built up, we tell the listview
how many we found, clear the selection (so that the selection
doesn't appear to move around from one word to another
as items are filtered in or out), and invalidate the client
rectangle to trigger a repaint.
</p>
<p>
That's all there is to it.
If you run this program and start typing into the edit control,
you'll see the list of words in the listview grow and shrink as
you type.
</p>
<p>
That's all for this month.
Next month, we'll work on expanding the scope of the search.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-296563">
				<div id="div-comment-296563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050812-10/?p=34593#comment-296563">
			August 12, 2005 at 12:12 pm</a>		</div>

		<p>This is really such a great series of articles. Much better than the tutorials or books which show trivial solutions to trivial problems. I really enjoy them. Thanks a lot for sharing your knowledge with us.</p>
<p>I discovered your site just recently, but I&#8217;m preparing myself to really compile the programs from all the steps up to now. Actually, I started from your first scratch program (in C) and I&#8217;m trying to follow the whole evolution. I&#8217;m slowly progressing because I&#8217;m also trying to check for meaningful comments.</p>
<p>And please ignore the low count of comments for the last few articles. I&#8217;m sure there are more people learning from all of them, even when they don&#8217;t comment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-296593">
				<div id="div-comment-296593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jojjo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050812-10/?p=34593#comment-296593">
			August 12, 2005 at 1:08 pm</a>		</div>

		<p>I agree, great series.</p>
<p>One thing that came to mind though &#8211; Won&#8217;t the application become quite unresponsive if the dictionary is large? What happens if the user types while the application is in refiltering?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-296603">
				<div id="div-comment-296603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050812-10/?p=34593#comment-296603">
			August 12, 2005 at 3:28 pm</a>		</div>

		<p>Try running the program &#8211; it&#8217;s quite responsive. It was this instant filtering that first impressed my colleague Ben, and it was his enthusiasm for the program that prompted me to turn it into a series.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-296663">
				<div id="div-comment-296663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050812-10/?p=34593#comment-296663">
			August 14, 2005 at 7:05 am</a>		</div>

		<p>That&#8217;s why, after doing several rounds of comparisons of desktop search software, i always come back to X1 / yahoo search: instant filtering of the listbox which contains the list of ALL the files on my drive, more than &gt;500k, for every typed characters! it has many rough edges, but the instantenous response is impressive (not to mention that it has also instanenous *preview*, on the right-side half of the window). it seems they&#8217;ve implement owner-drawned controls &#8211; and probably haven&#8217;t read your blog &#8211; they don&#8217;t behave very well with minimize / maximize / show-desktop etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

