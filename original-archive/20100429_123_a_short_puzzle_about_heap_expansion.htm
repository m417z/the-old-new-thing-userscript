<html>
<head>
<title>A short puzzle about heap expansion</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A short puzzle about heap expansion</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 29, 2010 / year-entry #124</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">At the 2008 PDC, somebody stopped by the Ask the Experts table with a question about the heap manager. I don't understand why the heap manager is allocating a new segment. I allocated a bunch of small blocks, then freed nearly all of them. And then when my program makes a large allocation, it allocates a...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>At the 2008&nbsp;PDC, somebody stopped by the <i>Ask the Experts</i> table with a question about the heap manager.</p>
<blockquote class="q"><p> I don't understand why the heap manager is allocating a new segment. I allocated a bunch of small blocks, then freed nearly all of them. And then when my program makes a large allocation, it allocates a new segment instead of reusing the memory I had just freed. </p>
</blockquote>
<p> Under the <a href="http://en.wikipedia.org/wiki/Classical_physics"> classical model</a> of the heap, the heap manager allocates a large chunk of memory from lower-level operating system services, and then when requests for memory come in from the application, it carves blocks of memory from the big chunk and gives them to the application. (These blocks are called <i>busy</i>.) When those blocks of memory are freed, they are returned to the pool of available memory, and if there are two blocks of free memory adjacent to each other, they are combined (<i>coalesced</i>) to form a single larger block. That way, the block can be used to satisfy a larger allocation in the future. </p>
<p> Under the classical model, allocating memory and then freeing it is a net no-operation. (Nitpicky details notwithstanding.) The allocation carves the memory out of the big slab of memory, and the free returns it to the slab. Therefore, the situation described above is a bit puzzling. After the memory is freed back to the heap, the little blocks should coalesce back into a block big enough to hold a larger allocation. </p>
<p> I sat and wondered for a moment, trying to think of cases where coalescing might fail, like if they happened to leave an allocated block right in the middle of the chunk. Or maybe there's some <a href="http://en.wikipedia.org/wiki/Modern_physics"> non-classical behavior</a> going on. For example, maybe the <a href="http://blogs.technet.com/askperf/archive/2007/06/29/what-a-heap-of-part-two.aspx"> look-aside list</a> was keeping those blocks live. </p>
<p> As I considered the options, the person expressed disbelief in a different but telling way: </p>
<blockquote class="q"><p> You'd think the low-fragmentation heap (LFH) would specifically avoid this problem. </p>
</blockquote>
<p> Oh wait, you're using the low-fragmentation heap! This is a decidedly non-classical heap implementation: Instead of coalescing free blocks, it keeps the free blocks distinct. The idea of the low-fragmentation heap is to reduce the likelihood of various classes of heap fragmentation problems: </p>
<ul>
<li>You want to make a large allocation, and you almost found     it, except that there's a small allocation in the middle     of your large block that is in your way. </li>
<li>You have a lot of free memory, but it's all in the     form of teeny tiny useless blocks. </li>
</ul>
<p> That first case is similar to what I had been considering: where you allocated a lot of memory, free most of it, but leave little islands behind. </p>
<p> The second case occurs when you have a free block of size&nbsp;<i>N</i>, and somebody allocates a block of size <i>M</i>&nbsp;&lt;&nbsp;<i>N</i>. The heap manager breaks the large block into two smaller blocks: a busy block of size&nbsp;<i>M</i> and a free block of size&nbsp;(<i>N</i>&nbsp;&minus;&nbsp;<i>M</i>). These "leftover" free blocks aren't a problem if your program later requests a block of size <i>N</i>&nbsp;&minus;&nbsp;<i>M</i>: The leftover block can be used to satisfy the allocation, and no memory goes wasted. But if your program never asks for a block of size <i>N</i>&nbsp;&minus;&nbsp;<i>M</i>, then the block just hangs around as one of those useless blocks. </p>
<p> Imagine, for concreteness, a program that allocates memory in a loop like this: </p>
<ul>
<li><code>p1 = alloc(128)</code> </li>
<li><code>p2 = alloc(128)</code> </li>
<li><code>free(p1)</code> </li>
<li><code>p3 = alloc(96)</code> </li>
<li>(Keep <code>p2</code> and <code>p3</code> allocated.) </li>
<li>Repeat </li>
</ul>
<p> Under the classical model, when the request for 96 bytes comes in, the memory manager sees that 128-byte block (formerly known as <code>p1</code>) and splits it into two parts, a 96-byte block and a 32-byte block. The 96-byte block becomes block <code>p3</code>, and the 32-byte block sits around waiting for somebody to ask for 32 bytes (which never happens). </p>
<p> Each time through this loop, the heap grows by 256&nbsp;bytes. Of those 256&nbsp;bytes, 224&nbsp;are performing useful work in the application, and 32&nbsp;bytes are sitting around being one of those useless tiny memory allocations which contributes to fragmentation. </p>
<p> The <a href="http://msdn.microsoft.com/en-us/library/aa366750.aspx"> low-fragmentation heap</a> tries to avoid this problem by keeping similar-sized allocations together. A heap block only gets re-used for the same size allocation it was originally created for. (This description is simplified for the purpose of the discussion.) (I can't believe I had to write that.) </p>
<p> In the above scenario, the low-fragmentation heap would respond to the request to allocate 96&nbsp;bytes not by taking the recently-freed 128-byte block and splitting it up, but rather by making a brand new 96-byte allocation. This seems wasteful. After all, you now allocated 128&nbsp;+&nbsp;128&nbsp;+&nbsp;96&nbsp;=&nbsp;352 bytes even though the application requested only 128&nbsp;+&nbsp;96&nbsp;=&nbsp;224 bytes. (The classical heap would have re-used the first 96 bytes of the second 128-byte block, for a total allocation of 128&nbsp;+&nbsp;128&nbsp;=&nbsp;256 bytes.) </p>
<p> This seemingly wasteful use of memory is really an investment in the future. (I need to remember to use that excuse more. "No, I'm not being wasteful. I'm just investing in the future.") </p>
<p> The investment pays off at the next loop iteration: When the request for 128 bytes comes in, the heap manager can return the 128-byte block that was freed by the previous iteration. Now there is no waste in the heap at all! </p>
<p> Suppose the above loop runs 1000 times. A classical heap would end up with a thousand 128-byte allocations, a thousand 96-byte allocations, and a thousand 32-byte free blocks on the heap. That's 31KB of memory in the heap lost to fragmentation, or about 12%. On the other hand, the low-fragmentation heap would end up with a thousand 128-byte allocations, a thousand 96-byte allocations, and one 128-byte free block. Only 128&nbsp;bytes has been lost to fragmentation, or just 0.06%. </p>
<p> Of course, I exaggerated this scenario in order to make the low-fragmentation heap look particularly good. The low-fragmentation heap operates well when heap allocation sizes tend to repeat, because the repeated-size allocation will re-use a freed allocation of the same size. It operates poorly when you allocate blocks of a certain size, free them, then never ask for blocks of that size again (since those blocks just sit around waiting for their chance to shine, which never comes). Fortunately, most applications don't fall into this latter category: Allocations tend to be for a set of fixed sizes (fixed-size objects), and even allocations for variable-sized objects tend to cluster around a few popular sizes. </p>
<p> Generally speaking, the low-fragmentation heap works pretty well for most classes of applications, and you should consider using it. (In fact, I'm told that the C runtime libraries have converted the default C runtime heap to be a low-fragmentation heap starting in Visual Studio&nbsp;2010.) </p>
<p> On the other hand, it's also good to know a little of how the low-fragmentation heap operates, so that you won't be caught out by its non-classical behavior. For example, you should now be able to answer the question which was posed at <i>Ask the Experts</i>. As you can see, it often doesn't take much to be an expert. You can do it, too. </p>
<p> <b>Sidebar</b>: Actually, I was able to answer the customer's question even without knowing anything about the low-fragmentation heap prior to the customer mentioning it. (Indeed, I had barely even heard of it until that point.) Just given the name <i>low-fragmentation heap</i>, I was able to figure out roughly how such a beast would have operated. I wasn't correct on the details, but the underlying principles were good. So you see, you don't even have to know what you're talking about to be an expert. You just have to be able to take a scenario and think, "How would somebody have designed a system to solve this problem?" </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-829203">
				<div id="div-comment-829203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Fisher</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829203">
			April 29, 2010 at 7:12 am</a>		</div>

		<p>The puzzle is short, but the answer is long.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-829283">
				<div id="div-comment-829283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829283">
			April 29, 2010 at 10:05 am</a>		</div>

		<p>It does have another point, though. In Vista and later, you are always using the low-fragmentation heap, there is no other option.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works even thread-even depth-1" id="comment-829293">
				<div id="div-comment-829293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829293">
			April 29, 2010 at 12:39 pm</a>		</div>

		<p>Custom memory managers, or dinking with the parameters of the one you have is something that only the very very wise or utterly foolish would do.. But often, the person doing it is both..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829263">
				<div id="div-comment-829263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829263">
			April 29, 2010 at 8:58 am</a>		</div>

		<p>One of the hardest bugs I ever had to track down was in a homemade, classical memory manager.</p>
<p>It was back in the 16-bit Windows days. &nbsp;If you did a particular (long) sequence of steps, the app would crash. &nbsp;In the debugger, we could see that one data structure was thoroughly trashed, but we couldn&#8217;t tell why. &nbsp;Worse, setting a breakpoint *any* breakpoint prevented the problem from reproducing.</p>
<p>Our homemade memory manager allocated 64KB blocks from the OS and carved them up as needed by our application. &nbsp;If it ran out of that space (which was rare), it would allocate another 64KB block. &nbsp;The long sequence of steps had the effect of using up the first 64KB block and a little bit of the second one, and then freeing some of those recent allocations, and then allocating some new blocks.</p>
<p>The bug was that the memory manager would accidentally coalesce a free block at the tail end of the first 64KB block with one at the front end of the next 64KB block, *if* the 64KB blocks were at consecutive memory locations. &nbsp;That was a huge problem, since our memory manager doled out near (16-bit) pointers. &nbsp;The long sequence of steps resulted in a buffer that supposedly spanned one of these 64KB boundaries. &nbsp;As the buffer filled up, the near pointer wrapped around to the beginning of the first 64KB block, trashing one of the very first data structures the program had allocated.</p>
<p>In the bad old 16-bit days, the debuggers were more invasive. &nbsp;If you set a breakpoint, the debugger made an allocation off your OS heap. &nbsp;It happened that that block was always between the first and second 64KB blocks that our memory manager got. &nbsp;Since the 64KB blocks were no longer adjacent in memory, the coalescing bug never manifested if you had a breakpoint set. &nbsp;It took days of printf debugging to finally crack that nut.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829273">
				<div id="div-comment-829273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arlie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829273">
			April 29, 2010 at 9:04 am</a>		</div>

		<p>I know this is a Windows blog (chiefly), but I&#8217;m so glad I don&#8217;t have to worry about heap fragmentation any more. &nbsp;I do nearly all of my work in C#, and with some pretty stringent performance requirements. &nbsp;The benefits for performance of a compacting GC are just amazing. &nbsp;No VA fragmentation! &nbsp;Your cache locality *increases* over time!</p>
<p>When I go back to plain old C/C++ development now, it feels like bear-skins-and-stone-knives time. &nbsp;Don&#8217;t get me wrong &#8212; I appreciate all the work that went into Windows (hell, I was a Windows Networking dev for years), and into the C/C++ environment. &nbsp;But I&#8217;m through with it, and I love it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829303">
				<div id="div-comment-829303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wojo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829303">
			April 29, 2010 at 6:36 pm</a>		</div>

		<p>@yuhong2, mostly true. I believe it disables the LFH in certain scenarios like fixed size heaps or with the flag HEAP_NO_SERIALIZE (which is used often when you take care of more details in your own memory manager). Also, when the LFH is disabled, a very naive (read: slow) heap manager is used that is even slower than the pre-LFH memory manager. Watch out for that!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829313">
				<div id="div-comment-829313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829313">
			April 29, 2010 at 11:30 pm</a>		</div>

		<p>Raymond, it looks like you don&#8217;t like Lisp! I mean, look, this snippet:</p>
<p>&#8220;&#8230; (This description is simplified for the purpose of the discussion.) (I can&#8217;t believe I had to write that.)&#8221;</p>
<p>should really be:</p>
<p>&#8220;&#8230; (This description is simplified for the purpose of the discussion. (I can&#8217;t believe I had to write that.))&#8221;</p>
<div class=post>[<i>News flash: English and Lisp are different languages. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829323">
				<div id="div-comment-829323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.adamhouldsworth.blogspot.com' rel='external nofollow' class='url'>Adam</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829323">
			April 30, 2010 at 1:47 am</a>		</div>

		<p>&#8220;So you see, you don&#8217;t even have to know what you&#8217;re talking about to be an expert.&#8221;</p>
<p>Slightly dangerous comment given past gripes :)</p>
<p><a href="http://blogs.msdn.com/oldnewthing/archive/2009/04/16/9551818.aspx" rel=nofollow target=_new rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2009/04/16/9551818.aspx</a></p>
<div class=post>[<i>Um, that was the case of somebody who <u>didn&#8217;t care about the logic behind the answer</u>, the opposite of somebody who tries to reason it out. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829333">
				<div id="div-comment-829333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jheriko-rtw.blogspot.com' rel='external nofollow' class='url'>Semi Essessi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829333">
			April 30, 2010 at 2:21 am</a>		</div>

		<p>&quot;So you see, you don&#8217;t even have to know what you&#8217;re talking about to be an expert. You just have to be able to take a scenario and think, &quot;How would somebody have designed a system to solve this problem?&quot;&quot;</p>
<p>This is a good attitude to have and its not specific to programming or any field in particular.</p>
<p>Logic &gt;&gt; experience.</p>
<p>I can&#8217;t count the number of times I&#8217;ve solved a problem or improved a process with little or no knowledge, simply because what would be an obvious bug in code (due to logic) stands out like a flashing red warning light.</p>
<p>The downside is that some people get really offended when this happens&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829343">
				<div id="div-comment-829343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://marksowul.com' rel='external nofollow' class='url'>Mark Sowul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829343">
			April 30, 2010 at 6:20 am</a>		</div>

		<p>Arlie: I agree, but it&#8217;s not something you can put completely out of your mind, because the large-object heap is not compacted&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829393">
				<div id="div-comment-829393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829393">
			April 30, 2010 at 7:47 am</a>		</div>

		<p>&quot;[Um, that was the case of somebody who didn&#8217;t care about the logic behind the answer, the opposite of somebody who tries to reason it out. -Raymond]&quot;</p>
<p>You weren&#8217;t reasoning &#8211; you were providing an educated guess that proved to be correct.</p>
<p>But on the up side, unlike that other person, you did go to confirm that you were correct &#8211; so kudos there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829433">
				<div id="div-comment-829433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829433">
			April 30, 2010 at 9:17 am</a>		</div>

		<p>@wojo: HeapAlloc only slow in DEBUG. In RELEASE it is quite fast.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829543">
				<div id="div-comment-829543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829543">
			April 30, 2010 at 3:42 pm</a>		</div>

		<p>Adam: Isn&#8217;t the difference between an educated guess and a regular guess that an educated one has reasoning behind it and a regular one is effectively random?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-829553">
				<div id="div-comment-829553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829553">
			April 30, 2010 at 5:12 pm</a>		</div>

		<p>BTW, on enabling the low-frag heap in Windows 2000, just because HeapSetInformation is exported in kernel32.dll doesn&#8217;t mean the low-frag heap is actually available, as all it does is GetProcAddress RtlHeapSetInformation from ntdll.dll, which is the DLL that actually contain the heap code. If this function is not actually exported from ntdll.dll, HeapSetInformation will fail and the low-frag heap is not available. I found this out by stepping into kernel32!HeapSetInformation using a debugger.</p>
<div class=post>[<i>I don&#8217;t remember anybody asking about the low-fragmentation heap on Windows 2000. I&#8217;m further convinced you comment just to hear yourself talk. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829613">
				<div id="div-comment-829613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wojo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829613">
			May 1, 2010 at 2:51 pm</a>		</div>

		<p>@AsmGuru62, I believe that even in release mode it is. I received feedback from someone at Microsoft&#8217;s team that worked on the heap manager and he mentioned the slowdown I&#8217;m mentioning (when HEAP_NO_SERIALIZE) was due to now slower code paths in the heap manager. It can happen from certain debugging flags and the HEAP_NO_SERIALIZE flag. These paths are slower because of the reorganization during Vista development, supposedly. If you are interested more, let me know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829633">
				<div id="div-comment-829633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829633">
			May 1, 2010 at 11:29 pm</a>		</div>

		<blockquote><p>
  When I go back to plain old C/C++ development now, it feels like bear-skins-and-stone-knives time.
</p></blockquote>
<p>c/c++ doesn&#8217;t necessary exclude a gc. Infact, VS do combine these if you want.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829653">
				<div id="div-comment-829653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-829653">
			May 2, 2010 at 4:20 am</a>		</div>

		<p>Does &quot;Low-fragmentation&quot; refer to internal fragmentation, external fragmentation, or both?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-830003">
				<div id="div-comment-830003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100429-00/?p=14213#comment-830003">
			May 4, 2010 at 2:14 am</a>		</div>

		<p>There are, of course, other reasons to allocate memory blocks of the same size together. &nbsp;I&#8217;ve used allocators before that decide on a single size-of-allocation for each page, and then just use a bitmap to decide which blocks within the page are allocated. &nbsp;This makes allocation faster and reduces memory overhead compared to the traditional linked-list-of-blocks approach. &nbsp;I&#8217;m actually quite surprised that any modern allocator isn&#8217;t taking this approach.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

