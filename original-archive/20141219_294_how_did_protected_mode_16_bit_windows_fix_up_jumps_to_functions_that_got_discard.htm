<html>
<head>
<title>How did protected-mode 16-bit Windows fix up jumps to functions that got discarded?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How did protected-mode 16-bit Windows fix up jumps to functions that got discarded?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 19, 2014 / year-entry #295</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter Neil presumes that Windows 286 and later simply fixed up the movable entry table with jmp selector:offset instructions once and for all. It could have, but it went one step further. Recall that the point of the movable entry table is to provide a fixed location that always refers to a specific function, no...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Commenter Neil presumes that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/06/22/10322767.aspx#10323211">
Windows 286 and later simply fixed up the movable entry table with
jmp selector:offset instructions once and for all</a>.
</p>
<p>
It could have, but it went one step further.
</p>
<p>
Recall that the point of the movable entry table is to provide
a fixed location that always refers to a specific function,
no matter where that function happens to be.
This was necessary because real mode has no memory manager.
</p>
<p>
But protected mode does have a memory manager.
Why not let the memory manager do the work?
That is, after all, its job.
</p>
<p>
In protected-mode 16-bit Windows, the movable entry
table was ignored.
When one piece of code needed to reference another piece of code,
it simply jumped to or called it
by its selector:offset.
</p>
<pre>
    push    ax
    call    0987:6543
</pre>
<p>
(Exercise: Why didn't I use
<code>call 1234:5678</code> as the sample address?)
</p>
<p>The selector was patched directly into the code as part of
fixups.
(We saw this
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2006/07/17/668284.aspx">
several years ago</a>
in another context.)
</p>
<p>
When a segment is relocated in memory,
there is no stack walking to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/06/29/10325295.aspx">
patch up return addresses</a>
to point to thunks,
and no
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/06/22/10322767.aspx">
editing of the movable entry points</a>
to point to the
new location.
All that happens is that the base address in the
descriptor table entry for the selector is updated to
point to the new linear address of the segment.
And when a segment is discarded,
the descriptor table entry is marked <i>not present</i>,
so that any future reference to it will raise a
<i>selector not present</i> exception,
which the kernel handles by reloading the selector.
</p>
<p>
Things are a lot easier when you have a memory manager around.
A lot of the head-exploding engineering in real-mode windows was in
all the work of
simulating a memory manager on a CPU that didn't have one!</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1167683">
				<div id="div-comment-1167683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Buffalo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1167683">
			December 19, 2014 at 7:17 am</a>		</div>

		<p>If I recall correctly, segment 1234 would have been a ring 0 segment, not a user segment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1167693">
				<div id="div-comment-1167693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1167693">
			December 19, 2014 at 7:20 am</a>		</div>

		<p>&gt;Exercise: Why didn&#39;t I use call 1234:5678 as the sample address?</p>
<p>Alignment?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1167703">
				<div id="div-comment-1167703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1167703">
			December 19, 2014 at 7:42 am</a>		</div>

		<p>@Kevin: 5678 is in fact a stricter-aligned offset than 6543.</p>
<p>But in those times, nobody cared much about alignment, except maybe for stack pointer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1167713">
				<div id="div-comment-1167713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1167713">
			December 19, 2014 at 8:59 am</a>		</div>

		<p>@Yuri: Yes, that&#39;s the joke.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-1167763">
				<div id="div-comment-1167763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1167763">
			December 20, 2014 at 3:05 am</a>		</div>

		<p>@Yuri Khan: Even now, no one cares about alignment of x86 instructions for obvious reasons.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1167773">
				<div id="div-comment-1167773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">poizan42</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1167773">
			December 20, 2014 at 5:45 am</a>		</div>

		<p>@Yuhong Bao: memory addresses used in SSE must be 16-byte aligned. So every function using SSE must have extra instructions in the preamble to ensure that the stack is aligned if it&#39;s not known. That&#39;s the reason for the alignment requirement of 16-byte in both 64-bit calling conventions.</p>
<p>Btw. does anyone know the reason why Microsoft choose not to use the System V AMD64 calling convention?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1167793">
				<div id="div-comment-1167793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1167793">
			December 20, 2014 at 5:54 pm</a>		</div>

		<p>@Yuhong Bao: gcc does. See -falign-functions, -falign-jumps, -falign-loops, and -falign-labels, all enabled by default on -O2 and above.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1167883">
				<div id="div-comment-1167883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1167883">
			December 22, 2014 at 7:42 am</a>		</div>

		<p>@Cesar:&quot;gcc does. See -falign-functions, -falign-jumps, -falign-loops, and -falign-labels, all enabled by default on -O2 and above.&quot;</p>
<p>Too right it does. &nbsp;About 5 years ago I spent literally days trying to debug unpredictable crashes from a DLL function loaded by VB6, where the DLL was compiled with MinGW-GCC. &nbsp;Turned out the compiler was assuming a certain stack alignment for arguments that would be processed by SSE instructions, and VB6 was using a different calling convention/assumption. &nbsp;Worst Heisenbug I&#39;ve ever tracked down &#8212; -falign-functions was the solution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1167963">
				<div id="div-comment-1167963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1167963">
			December 22, 2014 at 12:25 pm</a>		</div>

		<p>Also, note that this was not true of 16 bit CPUs because the L1 instruction cache was too small for this to be meaningful (it can be thought of as caching the next instruction only).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1167863">
				<div id="div-comment-1167863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesJohnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1167863">
			December 22, 2014 at 7:15 am</a>		</div>

		<p>&quot;Even now, no one cares about alignment of x86 instructions for obvious reasons.&quot;</p>
<p>Indeed; outside of esoteric uses like SSE aligned instructions, you&#39;ll never encounter a fault.</p>
<p>Accessing unaligned variables in C/C++ is undefined; e.g.</p>
<p> &nbsp; char myIntBytes[4];</p>
<p> &nbsp; int* myInt = (int*)myIntBytes;</p>
<p> &nbsp; *myInt = 5;</p>
<p>But on x86 this will silently work but with a likely performance penalty, depending on architecture&#8230; &nbsp;On older ARM processors, it won&#39;t work at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1167873">
				<div id="div-comment-1167873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">poizan42</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1167873">
			December 22, 2014 at 7:32 am</a>		</div>

		<p>&quot;On older ARM processors, it won&#39;t work at all.&quot;</p>
<p>Though some OSes will emulate unaligned accesses when it gets the fault &#8211; but that comes with a *massive* performance penalty.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1167913">
				<div id="div-comment-1167913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1167913">
			December 22, 2014 at 9:28 am</a>		</div>

		<p>@poizan42, @JamesJohnston, @GWO: you are talking about alignment of *data*. What I and @Yuhong Bao are talking about is alignment of *code*.</p>
<p>On CPUs with power-of-two fixed-length instructions like ARM, instructions usually must be aligned. On CPUs with variable-length instructions like x86, instructions usually do not need to be aligned, even when they&#39;re longer than one byte. However, there can be a performance penalty when a *jump target* (or call target, which is almost the same thing) is not well aligned. Suppose, for instance, that your jump is mispredicted, lands in the last byte of the last cacheline of a page, and the instruction at that address is five bytes long. The instruction fetcher has to do extra work, and can&#39;t hide the latency as well as it could if you had jumped to the beginning of a cache line. Thus gcc (and probably other compilers) can pad the code with a few NOPs so a jump target has a better alignment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1167993">
				<div id="div-comment-1167993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1167993">
			December 23, 2014 at 7:03 am</a>		</div>

		<p>&gt; (Exercise: Why didn&#39;t I use call 1234:5678 as the sample address?)</p>
<p>Because the 286, which only had a 24-bit address bus, would wrap it to 0x234:5678. I&#39;m guessing the 286 kernel didn&#39;t map segments that high.</p>
<p>An amusing aside given the recent discussion about kernel boundaries &#8211; in real mode on a 286, addresses above 0xf000:ffff referred to memory beginning at 1MB, while on previous processors they referred to 0 (giving a shortcut to the IDT). I wonder if there were any &quot;no man&#39;s land&quot; rules due to this?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1168013">
				<div id="div-comment-1168013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1168013">
			December 23, 2014 at 7:08 am</a>		</div>

		<p>Oh, I&#39;ve just found on wikipedia that this is why A20 line was pulled low by default in real mode. Figures.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1168053">
				<div id="div-comment-1168053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1168053">
			December 23, 2014 at 7:43 am</a>		</div>

		<p>Oh, disregard my first comment altogether. 0x1234 is already a selector on 286 protected mode, and therefore ring 0 as Peter Buffalo said. 0x987 on the other hand is ring 3, which I think would imply Windows 3.1?</p>
<p>&nbsp;<a rel="nofollow" target="_new">http://ftp.microsoft.com/&#8230;/25.TXT</a></p>
<p>Both are in user memory.</p>
<div class="post">[<em>The 80286 also had rings (known as &quot;privilege levels&quot;). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1168363">
				<div id="div-comment-1168363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141219-00/?p=43343#comment-1168363">
			December 24, 2014 at 12:55 pm</a>		</div>

		<p>@JamesJohnston no that&#39;s wrong, c/c++ has no problem with unsigned accesses (out of its scope). The problem you have there is that you violate strict aliasing.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

