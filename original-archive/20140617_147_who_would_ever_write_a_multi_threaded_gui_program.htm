<html>
<head>
<title>Who would ever write a multi-threaded GUI program?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Who would ever write a multi-threaded GUI program?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 17, 2014 / year-entry #148</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>37</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">During the development of Windows 95, the user interface team discovered that a component provided by another team didn't work well under multi-threaded conditions. It was documented that the Initialize function had to be the first call made by a thread into the component. The user interface team discovered that if one thread called Initialize, and...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>During the development of Windows&nbsp;95, the user interface team discovered that a component provided by another team didn't work well under multi-threaded conditions. It was documented that the <code>Initialize</code> function had to be the first call made by a thread into the component.</p>
<p> The user interface team discovered that if one thread called <code>Initialize</code>, and then used the component, then everything worked great. But if a second thread called <code>Initialize</code>, the component crashed whenever the second thread tried to use it. </p>
<p> The user interface team reported this bug back to the team that provided the component, and some time later, an updated version of the component was delivered. </p>
<p> Technically, the bug was fixed. When the second thread called <code>Initialize</code>, the function now failed with <code>ERROR_<wbr>NOT_<wbr>SUPPORTED</wbr></wbr></code>. </p>
<p> The user interface team went back to the team that provided the component. "It's nice that your component detects that it is being used by a multi-threaded client and fails the second thread's attempt to initialize it. But given that design, how can a multi-threaded client use your component?" </p>
<p> The other team's reply was, "It doesn't matter. Nobody writes multi-threaded GUI programs." </p>
<p> The user interface team had to politely reply, "Um, <i>we are</i>. The next version of Windows will be built on a multi-threaded shell." </p>
<p> The other team said, "Oh, um, we weren't really expecting that. Hang on, we'll get back to you." </p>
<p> The idea that somebody might write a multi-threaded program that used their component caught them by surprise, and they had to come up with a new design of their component that supported multiple threads in a clean way. It was a lot of work, but they came through, and Windows&nbsp;95 could continue with its multi-threaded shell. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (37)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1131443">
				<div id="div-comment-1131443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131443">
			June 17, 2014 at 7:05 am</a>		</div>

		<p>There&#39;s a pretty short list of components that meet this criteria. Might have well have named the offending component.</p>
<div class="post">[<em>You&#39;re assuming the component is not an internal one. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131453">
				<div id="div-comment-1131453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131453">
			June 17, 2014 at 7:12 am</a>		</div>

		<p>I duno, a &quot;Component&quot; could be anything. And the identifier &quot;Initialize&quot; is very common. The requirement and age could help limit the search a lot, but it is still a rather large search range.</p>
<p>One could assume that &quot;Component&quot; has the requirement of being a visible control, especially when it is the UI team involved and the discussion is about multi-threaded GUI programs. But that is not a safe assumption, they could have been using any old &quot;component&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131463">
				<div id="div-comment-1131463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">poizan42</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131463">
			June 17, 2014 at 7:43 am</a>		</div>

		<p>Well, the WPF developers still seems to think that&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131473">
				<div id="div-comment-1131473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131473">
			June 17, 2014 at 7:55 am</a>		</div>

		<p>Technically, Microsoft&#39;s major UI platforms (WPF, Silverlight, WF) are still single-threaded GUIs. The business logic and background services might be multi-threaded, but most interaction with the UI layer needs to be marshalled back to its primary, and single, thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131483">
				<div id="div-comment-1131483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131483">
			June 17, 2014 at 7:59 am</a>		</div>

		<p>Well &quot;theoretically&quot; GUI app&#39;s can be done with Multi-Threading. But honestly: short of a few well-defined worker threads you better not touch that territory unless you REALLY have to.</p>
<p>(Just talk about &quot;events&quot; that get raised by background threads and like to update the GUI&#8230; Asynch events anyone?).</p>
<p>Only thing that works is if you design Multi-Threading into the whole thing right from start (and have some decent framework support for it)</p>
<p>Note: It doesn&#39;t make things easier that I&#39;m working with Delphi and VCL (The Delphi component library) never ever heard of multi-threading GUI&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131513">
				<div id="div-comment-1131513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Topping</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131513">
			June 17, 2014 at 9:07 am</a>		</div>

		<p>Given the difficulty of multi-threaded programming and its testing, cooperative multi-tasking within the app is a better way to go. With good infrastructure for doing idle-time processing the problem ends up being mostly a matter of making sure one&#39;s code breaks long tasks into small pieces. I am not saying it solves all problems though but most of them. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1131533">
				<div id="div-comment-1131533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131533">
			June 17, 2014 at 10:44 am</a>		</div>

		<p>First rule of multithreaded GUI programming: Don&#39;t do multithreaded GUI programming.</p>
<p>First rule of single-threaded GUI programming: don&#39;t have multiple top level (unowned) windows in a single thread.</p>
<p>Having multiple threads to run multiple top level windows is the only good reason for multithreaded GUI.</p>
<p>Worker threads are OK, as long as you know what you&#39;re doing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131543">
				<div id="div-comment-1131543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131543">
			June 17, 2014 at 11:35 am</a>		</div>

		<p>These are my favorite blog posts :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131553">
				<div id="div-comment-1131553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ancient Hacker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131553">
			June 17, 2014 at 12:29 pm</a>		</div>

		<p>it&#39;s not just Windows, this was a big problem in the old Mac OS.</p>
<p>The Quickdraw routines assumed there would be only one stack and that if Quickdraw wanted to do something memory-intensive, like take the intersection of two regions or BitBlt, it could merrily grab all the free stack space, partition it into thirds, and use all that space for source, temp, and destination regions or bitmaps. &nbsp;That didn&#39;t work too well when you put the GUI into a thread with say 8K of stack space.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131563">
				<div id="div-comment-1131563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131563">
			June 17, 2014 at 1:09 pm</a>		</div>

		<p>Wow. Say &quot;multi-threaded GUI&quot;, and watch people getting sad. Well, what would you expect, of course multiple mutually-dependent actors are hard to reason about. That&#39;s why social interactions suck, you know. Being the one, united and whole, is much simpler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131583">
				<div id="div-comment-1131583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dominic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131583">
			June 17, 2014 at 2:36 pm</a>		</div>

		<p>&quot;average GUI program uses 1.2 threads&quot; factoid actualy just statistical error. average GUI program uses 1 thread. Chicago Shelly, who lives in protected mode and uses over 20 threads, is an outlier adn should not have been counted</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131593">
				<div id="div-comment-1131593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131593">
			June 17, 2014 at 2:59 pm</a>		</div>

		<p>Dominic: A quick sampling of my system showed Solitaire as the only running GUI app with a single thread. IE, Explorer, VS, all have dozens of threads. WinWord has maybe 10.</p>
<p>I tried opening Calc, Paint, Notepad, and WordPad to make some more single-threaded GUI apps and was surprised to see that Notepad was the only one with a single thread. Even Calc has 3 threads! I can see why WordPad might have 3, but I can&#39;t imagine what Paint is doing with 6.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1131603">
				<div id="div-comment-1131603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131603">
			June 17, 2014 at 3:24 pm</a>		</div>

		<p>Shell is multithreaded because it needs to have multiple top-level windows. Having multiple top-level windows belonging to one thread is a recipe for disaster.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1131613">
				<div id="div-comment-1131613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131613">
			June 17, 2014 at 3:26 pm</a>		</div>

		<p>@Gabe:</p>
<p>GDI+</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hikari even thread-even depth-1" id="comment-1131503">
				<div id="div-comment-1131503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Chris+Crowther' rel='external nofollow' class='url'>Chris Crowther</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131503">
			June 17, 2014 at 8:26 am</a>		</div>

		<p>ThreadPool.QueueUserWorkItem, Control.Invoke, and the Control.Begin/EndInvoke pair are things you become intimately familiar with when you&#39;re writing GUI apps in C# and you don&#39;t want them to respond like *** (the later methods being because of the whole &quot;oh, you want to update that UI element? &nbsp;You&#39;ll have to do it on the thread that actually owns it&quot; thing).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131623">
				<div id="div-comment-1131623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xor88</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131623">
			June 17, 2014 at 5:22 pm</a>		</div>

		<p>I believe the User subsystem has primarily been made thread-safe to avoid security issues. We don&#39;t want to be able to manipulate the Kernel by causing race conditions.</p>
<p>The user-mode GUI frameworks do not need these security properties so they just declare to be single-threaded.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131633">
				<div id="div-comment-1131633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DanielBryars</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131633">
			June 17, 2014 at 5:51 pm</a>		</div>

		<p>I wonder, would it have been more work to do multithreading from the get go? Without a working single threaded version would there had even been the demand for this component in the new shell?</p>
<p>How do you draw a line between only coding for the absolute requirements of the moment and generalising too far?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1131643">
				<div id="div-comment-1131643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131643">
			June 17, 2014 at 6:29 pm</a>		</div>

		<p>@DanielBryars: It depends only how you believe the others will use your component.</p>
<p>For the component in the story, since it&#39;s originally thought that it will only be used in single threaded application (maybe the component existed the days of Win3.X where att you have is cooperative multitasking), it&#39;s okay to design like that.</p>
<p>If later you found out otherwise, you change it just like what it had been in the story.</p>
<p>Btw, multithreading means you have to deal with race condition and deadlock. By the nature of your component it could be quite some work to get headache with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131653">
				<div id="div-comment-1131653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131653">
			June 17, 2014 at 6:30 pm</a>		</div>

		<p>Then why was it recently argued by Raymond that USER controls and common controls wasn&#39;t thread safe?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131663">
				<div id="div-comment-1131663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Boyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131663">
			June 17, 2014 at 7:21 pm</a>		</div>

		<p>Isn&#39;t it fundamentally a rule that the only thread allowed to touch a window is the thread that created it? E.g. any thread could create a ProgressDialog control. But no matter how much synchronization you apply, the only thread allowed to use that control is the thread that created it.</p>
<p>Although ProgressDialog is a bad example, since it is a COM object</p>
<p> And COM inter-apartment rules come into play.</p>
<p>But if I create a child window (eg a RichEdit), are threads other than the creator thread allowed to send it messages? Are threads other than the creator thread allowed to send it messages?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131673">
				<div id="div-comment-1131673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131673">
			June 17, 2014 at 8:41 pm</a>		</div>

		<p>@xor88: Guess what, bochspwn is a thing. There are security-affecting races inside the kernel.</p>
<p>@cheong00: One has to worry about races and deadlock not only when multi-threading, but pretty much every time it interacts with the outer world.</p>
<p>@Ian Boyd: Yes, that&#39;s the rule. That&#39;s why when I close the DJVU reader on my Android phone and then re-open it some time later, I am greeted with &quot;Only the original thread that created a view hierarchy can touch its views&quot; error message, and it then the reader closes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131573">
				<div id="div-comment-1131573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leonardo Herrera</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131573">
			June 17, 2014 at 2:08 pm</a>		</div>

		<p>I don&#39;t understand the need to point out that the current UI model requires one&#39;s application to get back to the main thread. I&#39;ve always assumed that the shell *is* multithreaded. Am I wrong?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131683">
				<div id="div-comment-1131683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bill P. Godfrey</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131683">
			June 18, 2014 at 2:48 am</a>		</div>

		<p>Multi-threaded GUI? I just write Application.DoEvents(); every other line. So much simpler.</p>
<p>:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131693">
				<div id="div-comment-1131693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nikos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131693">
			June 18, 2014 at 3:00 am</a>		</div>

		<p>@alegr1 &nbsp; </p>
<p>&quot;Having multiple top-level windows belonging to one thread is a recipe for disaster&quot;</p>
<p>how do you substantiate this statement? I do many top level windows for a single thread (eg modeless dialogs but not just that) and didn&#39;t see any problems so far</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131703">
				<div id="div-comment-1131703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Rose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131703">
			June 18, 2014 at 3:11 am</a>		</div>

		<p>@Mike &quot;Technically, Microsoft&#39;s major UI platforms (WPF, Silverlight, WF) are still single-threaded GUIs.&quot;</p>
<p>Actually, that is not quite true. All interaction with a UI element needs to be done on the thread which created it. But there is nothing to stop you from creating two top-level windows in two different threads (I do this in my application).</p>
<p>Some third-party controls/helper libraries do not work properly if this is done, however.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131713">
				<div id="div-comment-1131713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131713">
			June 18, 2014 at 3:43 am</a>		</div>

		<p>@Ian Boyd: Sent messages were covered almost exactly 10 years ago: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2004/06/08/150929.aspx">blogs.msdn.com/&#8230;/150929.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131723">
				<div id="div-comment-1131723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xor88</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131723">
			June 18, 2014 at 3:54 am</a>		</div>

		<p>@Joker_vD yes, those are security bugs. By design User is thread-safe in the sense that you cannot make it elevate your privileges. It might still behave erratically, of course. Not sure what thread-safety guarantees Users makes to callers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131733">
				<div id="div-comment-1131733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131733">
			June 18, 2014 at 7:21 am</a>		</div>

		<p>Ian asked &quot;But if I create a child window (eg a RichEdit), are threads other than the creator thread allowed to send it messages? Are threads other than the creator thread allowed to send it messages?&quot;</p>
<p>Yes, in Win32 you are. &nbsp;The restriction that all interaction with a window must originate on the creator thread is a &quot;feature&quot; of frameworks such as .NET WinForms. &nbsp;The underlying Windows API synchronizes access from other threads quite nicely. &nbsp;Most requests need to invoke the window procedure; these are marshalled to the creator thread. &nbsp;But some such as (cross-process) `GetWindowText` or `GetWindowLong`(Ptr) just access internal thread-safe data structures.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131803">
				<div id="div-comment-1131803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131803">
			June 18, 2014 at 9:32 am</a>		</div>

		<p>People again and again try to create thread-safe GUI frameworks and in the end the problems you have with those just aren&#39;t worth the effort &#8211; from Cedar at Xerox to awt. </p>
<p>The current event queue system that is only thread-safe for a few specific methods seems to be working reasonably well</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1131823">
				<div id="div-comment-1131823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131823">
			June 18, 2014 at 10:19 am</a>		</div>

		<p>@nikos:</p>
<p>It&#39;s all fun and games, until one top-level window hits a modal loop (for example, opens a modal dialog). Then any menu commands of other top level windows will be executing in the context of a foreign message loop, which may not have the necessary on-idle handling, for example.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131863">
				<div id="div-comment-1131863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131863">
			June 18, 2014 at 1:00 pm</a>		</div>

		<p>I always thought the single-threaded rule was a Win32 limitation, that there is only 1 message queue and all Window messages have to go through that queue. &nbsp; If you have multiple top-level windows, do they each have their own message queue? &nbsp; Does WM_QUIT to one window leave the other alive?</p>
<p>BTW, I&#39;ve seen the same limitation on every windowing system I&#39;ve encountered.</p>
<p> &nbsp;KC</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131893">
				<div id="div-comment-1131893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131893">
			June 18, 2014 at 2:14 pm</a>		</div>

		<p>You can try to manipulate your UI from multiple threads in Win32. &nbsp;Once you try you will VERY quickly understand that there is a very good reason WinForms, Silverlight, WPF, etc all enforce a the rule that all access to a UI element must occur in the thread that created it.</p>
<p>It is nearly impossible to avoid deadlocks if you have multiple threads manipulating the UI of a single window as your SendMessages (or more likely macros that silently wrap SendMessage) block on the UI thread. &nbsp;The one or two times I have tried it, I very quickly changed my approach and created a quick and dirty Invoke like mechanism which solved all of those problems and made the program much easier to reason about as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1131963">
				<div id="div-comment-1131963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1131963">
			June 18, 2014 at 6:16 pm</a>		</div>

		<p>@alegr1: Agreed.</p>
<p>Not to mention that many shell extension runs in Explorer, and Explorer do need to wait for these component to response. If all Explorer window belongs to single thread, Explorer should choke here and there, much worse than the Flash player we have now. (I sincerely hope they give us option to run seperated instance on different browsers, so when one Flash applet for some reason runs under tight loop, I don&#39;t have to kill my IE, Firefox and PCMan(which loads IE as ActiveX plugin) at the same time because they all goes unresponsive)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1132013">
				<div id="div-comment-1132013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1132013">
			June 19, 2014 at 3:17 am</a>		</div>

		<p>Short notice about &quot;SendMessage&quot; from other threads: DON&#39;T!! (SendMessage expects that the user thread can process the message and return an answer. So you&#39;re on the road to deadlock&#8230;)</p>
<p>PostMessage on the other side is OK (and is my preferred way to communicate results from a worker thread to a user thread). You&#39;re restricted to &quot;write&quot; messages though (e.g. no result, and no &quot;out&quot; or &quot;in/out&quot; parameters like pointers to structs that get modified etc&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1132023">
				<div id="div-comment-1132023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1132023">
			June 19, 2014 at 3:23 am</a>		</div>

		<p>@KC: Each *thread* has its own message queue. All windows created on that thread share that message queue. WM_QUIT is not a message to a window and should never ever be sent or posted with PostMessage. WM_QUIT is what GetMessage returns after PostQuitMessage has been called, and that quit flag is a property of the thread, not of any window.</p>
<p>You&#39;ll note that PostQuitMessage doesn&#39;t take the handle of the thread, nor a handle to a window. It&#39;s supposed to be called from a window procedure in response to some other message, and posts the quit flag to the message queue for the thread that called it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1132883">
				<div id="div-comment-1132883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1132883">
			June 23, 2014 at 12:34 pm</a>		</div>

		<p>I don&#39;t understand all the hate towards multi-threaded GUIs. &nbsp;The only thing that keeps most GUI systems single-threaded, or even main-threaded, is thread local storage, and in the second case, TLS that gets initialized once only before main() is called.</p>
<p>Win32 has one GUI thread rule, that is to handle a window in the thread it was created. &nbsp;It seems to have been a decision between process-wide or thread-wide message queues, and thread-wide won because it&#39;s more logic e.g. you can stuff your own TLS data to go with a thread&#39;s message queue, it&#39;s more flexible (multiple top-level windows, multiple STA threads which underlying mechanism is none other than a windowing message queue), and it was something that was either done right when threads were introduced or never. &nbsp;That decision was all about profit for all.</p>
<p>I agree single-threaded GUI is the most simple one, but it should not be the only one. &nbsp;There are a handful of cases where you (wish you) could use multiple threads for different windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1132983">
				<div id="div-comment-1132983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">immibis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140617-00/?p=723#comment-1132983">
			June 24, 2014 at 4:15 am</a>		</div>

		<p>Why does everyone keep saying that you need a multi-threaded GUI to have multiple top-level windows&#8230;?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

