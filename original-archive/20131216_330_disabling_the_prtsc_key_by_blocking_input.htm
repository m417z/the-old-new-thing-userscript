<html>
<head>
<title>Disabling the PrtSc key by blocking input</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Disabling the PrtSc key by blocking input</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 16, 2013 / year-entry #331</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131216-00/?p=2373</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer asked how to disable the PrtSc key in the On-Screen Keyboard. There is no way to disable the PrtSc key in the On-Screen Keyboard. The On-Screen Keyboard shows a keyboard, and you can click any virtual key you like. There is no policy to remove specific keys from the On-Screen Keyboard. But this...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer asked how to disable the
<kbd>PrtSc</kbd> key in the On-Screen Keyboard.
</p>
<p>
There is no way to disable the
<kbd>PrtSc</kbd> key in the On-Screen Keyboard.
The On-Screen Keyboard shows a keyboard, and you can click any
virtual key you like.
There is no policy to remove specific keys from the On-Screen Keyboard.
</p>
<p>
But this was a case of a customer breaking down a problem and
asking a question about a specific part of the problem
instead of presenting the entire problem so that a
solution to the overall problem could be developed.
</p>
<p>
The customer's real goal was to disable the
<kbd>PrtSc</kbd> key in general.
They had figured out how to disable it on their physical keyboards
by using the PS/2
<a HREF="http://msdn.microsoft.com/en-us/windows/hardware/gg463447">
scan code mapper</a>,
but they found that users could circumvent the feature by
using the On-Screen Keyboard, so they asked if there was something
they could do about the
On-Screen Keyboard.
</p>
<p>
They didn't mention this when they asked the original question,
so I replied by saying,
"The mechanism for blocking the screen capture functionality
in the window manager should work regardless of whether the
request came from the physical keyboard or the virtual keyboard."
</p>
<p>
Naturally, the customer liaison decided to direct follow-up questions
to me directly,
even though I was replying from my phone while doing a quick
email check while on vacation,
and I had to remind him that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2006/10/19/844008.aspx">
my response to your message should not be interpreted as meaning
that I had taken responsibility for driving your issue to resolution</a>.
I had to steer the thread back to the distribution list so that
somebody else could pick up the ball while I was out of the office.
(Either that, or the customer ends up waiting until the next time
I feel like checking email while on vacation, which could be quite
a while.)
</p>
<p>
The solution to the original problem is not to try to identify
every possible source of a
<kbd>PrtSc</kbd> keypress and block it there,
because even a simple script can
<a HREF="http://msdn.microsoft.com/library/8c6yea83">
use the <code>Send&shy;Keys</code> method to inject the
<kbd>PrtSc</kbd> key</a>.
</p>
<p>
You block the message in the window manager by installing
a low-level keyboard hook that rejects the
<code>VK_<wbr>SNAP&shy;SHOT</code> key.
</p>
<p>
Today's Little Program is a printscreen blocker.
Remember, Little Programs have little to no error checking,
because that's the way they roll.
</p>
<p>
Take our
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a>
and add the following lines of code:
</p>
<pre>
<font COLOR=blue>HHOOK g_hhk;
LRESULT CALLBACK KHook(int nCode, WPARAM wParam, LPARAM lParam)
{
 if (nCode == HC_ACTION) {
 if (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN) {
  PKBDLLHOOKSTRUCT phs = (PKBDLLHOOKSTRUCT)lParam;
  if (phs-&gt;vkCode == VK_SNAPSHOT) {
   MessageBeep(0); // annoying beep
   return 1; // block the key
  }
 }
 }
 return CallNextHookEx(g_hhk, nCode, wParam, lParam);
}</font>

...
    ShowWindow(hwnd, nShowCmd);

    <font COLOR=blue>g_hhk = SetWindowsHookEx(WH_KEYBOARD_LL, KHook,
                             NULL, 0);</font>

    while (GetMessage(&amp;msg, NULL, 0, 0)) {
        TranslateMessage(&amp;msg);
        DispatchMessage(&amp;msg);
    }

    <font COLOR=blue>UnhookWindowsHookEx(g_hhk);</font>
</pre>
<p>
This program installs a low-level keyboard hook which
listens for presses of the <code>VK_<wbr>SNAP&shy;SHOT</code> key,
and if it sees one, it beeps and then returns <code>1</code>
to block further processing.
</p>
<p>
Note that we are using a global solution to a local problem.
If you want to block <kbd>PrtSc</kbd> because you have sensitive
information in your application that you don't want captured,
then
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/03/10422964.aspx">
tag your window to be excluded from screen capturing</a>.
That way, the user can still capture other windows.
It also tells other screen capturing programs
to exclude your window from the capture.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1094773">
				<div id="div-comment-1094773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131216-00/?p=2373#comment-1094773">
			December 16, 2013 at 7:05 am</a>		</div>

		<p>I&#39;m guessing this still doesn&#39;t prevent the Snipping Tool and it&#39;s moral equivalents from capturing the screen?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1094783">
				<div id="div-comment-1094783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131216-00/?p=2373#comment-1094783">
			December 16, 2013 at 7:17 am</a>		</div>

		<p>Nor is it effective at blocking screen snapshot via RDP.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1094803">
				<div id="div-comment-1094803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131216-00/?p=2373#comment-1094803">
			December 16, 2013 at 7:43 am</a>		</div>

		<p>Or taking a picture of your screen with an iPhone or painting it in watercolours onto a canvas sitting next to your laptop.</p>
<p>Seriously guys. This is a tiny program, and it does what it says it does, which is to reject PRNTSCRN button presses being sent to your window. Nothing more. Nothing less.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1094813">
				<div id="div-comment-1094813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131216-00/?p=2373#comment-1094813">
			December 16, 2013 at 7:54 am</a>		</div>

		<p>Yes, but as engineers if someone tells us that screen printing is blocked on a particular computer we will immediately put all our energies to figure out how to circumvent this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1094853">
				<div id="div-comment-1094853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Boris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131216-00/?p=2373#comment-1094853">
			December 16, 2013 at 8:40 am</a>		</div>

		<p>Assuming the goal was to make screencaps harder, this couldn&#39;t have been done by group policy at the time?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1094863">
				<div id="div-comment-1094863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131216-00/?p=2373#comment-1094863">
			December 16, 2013 at 8:41 am</a>		</div>

		<p>This program caused my computer to completely lock up the moment I hit the PrtSc key, requiring it to be power cycled. &nbsp;Almost like the time I thought it&#39;d be a good idea to set the registry key &quot;Image File Execution Optionscmd.exedebugger&quot; &#8212; except that time my computer also locked up immediately after logging in, so I needed to use a recovery CD to manually fix my registry and undo my stupidity.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1094823">
				<div id="div-comment-1094823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131216-00/?p=2373#comment-1094823">
			December 16, 2013 at 8:02 am</a>		</div>

		<p>Disallowing print screen and friends seems like a losing battle, but I&#39;d rather the person doing these shenanigans using a keyboard hook than messing with my keyboard layout. At least I can remove a hook fairly easily; I&#39;m pretty sure I wouldn&#39;t think about the keyboard mappings table as it&#39;s pretty obscure and a *very* global solution to a local problem!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1094953">
				<div id="div-comment-1094953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131216-00/?p=2373#comment-1094953">
			December 16, 2013 at 5:23 pm</a>		</div>

		<p>@Adam: that&#39;s what God invented virtual machines for&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1094973">
				<div id="div-comment-1094973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anil Kulkarni</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131216-00/?p=2373#comment-1094973">
			December 16, 2013 at 6:47 pm</a>		</div>

		<p>An important thing to consider when using LL hooks is to run them on a dedicated thread, so as to not tie up the system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1094983">
				<div id="div-comment-1094983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Silly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131216-00/?p=2373#comment-1094983">
			December 16, 2013 at 9:16 pm</a>		</div>

		<p>I wrote something similar to the above back in the late 90&#39;s, but its sole purpose was to beep on any keystroke if some small random number of milliseconds had passed since the last beep. So in other words its sole purpose was to annoy and confuse any workmates who liked to listen to music on their headphones and left their computer unlocked and unattended (basically I was a newly-graduated smart-a**). But I remember having to put the hook function in a separate dll, though the memory is hazy. Nowadays I&#39;d consider such an action tantamount to vandalism&#8230; I&#39;ve lost the edge.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-rat even thread-even depth-1" id="comment-1095443">
				<div id="div-comment-1095443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/hacksoncode' rel='external nofollow' class='url'>hacksoncode</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131216-00/?p=2373#comment-1095443">
			December 18, 2013 at 4:16 pm</a>		</div>

		<p>I know we&#39;re not to complain about error checking in &quot;Little Programs&quot;, but&#8230; I&#39;m curious about the documentation of &quot;SetWindowsHookEx&quot;: &quot;An error may occur if the hMod parameter is NULL and the dwThreadId parameter is zero or specifies the identifier of a thread created by another process.&quot; Perhaps the LL hooks don&#39;t have this limitation because they are never injected?</p>
<p>I&#39;m also really curious (because the documentation doesn&#39;t say), how CallNextHookEx works on the WH_KEYBOARD_LL hook, since LL hooks aren&#39;t injected/executed in the target thread context. I would guess that it just calls SendMessage to forward the hook call to the next process in the chain?</p>
<p>And, of course, this only works if nothing else in the hook chain before this hook returned early or caused an error that resulted in nCode being &lt;0. Like, say, the hook my devious application installed to circumvent this stupid feature :-). </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1095823">
				<div id="div-comment-1095823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131216-00/?p=2373#comment-1095823">
			December 22, 2013 at 6:49 pm</a>		</div>

		<p>Speaking of PrtSc, I know this is slightly (well ok, completely) off-topic, but has anyone ever had Alt+PrtSc fail them? Ever since I can remember Alt+PrtSc has perfectly captured _only_ the active window, but on an old Lenovo laptop I recently installed Windows 7 32-bit on (Intel XDDM driver installed in compatibility mode, no Aero support, only Aero Basic and Win Classic, works _very_ nicely once I installed 3GB max RAM and SSD), it ends up capturing the active window and the top of the taskbar! Here&#39;s a screenshot: <a href="http://i.imgur.com/BS5Dc7E.png" rel="nofollow" target="_new">http://i.imgur.com/BS5Dc7E.png</a></p>
<p>Has anyone ever seen anything this weird? I take it it&#39;s the display driver&#39;s fault? (And Intel&#39;s of course, the only hardware manufacturer not to have released updated drivers for this model.)</p>
<div class="post">[<em>Look closely. The taskbar overlaps the bottom window border. (You also have this problem on the other three edges of the window, but since you have a single-monitor system, you don&#39;t notice it.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

