<html>
<head>
<title>Stupid memory-mapping tricks</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Stupid memory-mapping tricks</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 7, 2003 / year-entry #86</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20031007-00/?p=42263</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Shared memory is not just for sharing memory with other processes. It also lets you share memory with yourself in sneaky ways. For example, this sample program (all error checking and cleanup deleted for expository purposes) shows how you can map the same shared memory into two locations simultaneously. Since they are the same memory,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
        Shared memory is not just for sharing memory with other processes. It also lets you
        share memory with yourself in sneaky ways. 
    </p>
<p>
        For example, this sample program (all error checking and cleanup deleted for expository
        purposes) shows how you can map the same shared memory into two locations simultaneously.
        Since they are the same memory, modifications to one address are reflected at the
        other. 
    </p>
<pre>#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;

void __cdecl main(int argc, char **argv)
{
    HANDLE hfm = CreateFileMapping(INVALID_HANDLE_VALUE, NULL,
                    PAGE_READWRITE, 0, sizeof(DWORD), NULL);

    LPDWORD pdw1 = (LPDWORD)MapViewOfFile(hfm, FILE_MAP_WRITE,
                                          0, 0, sizeof(DWORD));

    LPDWORD pdw2 = (LPDWORD)MapViewOfFile(hfm, FILE_MAP_WRITE,
                                          0, 0, sizeof(DWORD));

    printf("Mapped to %x and %x\n", pdw1, pdw2);

    printf("*pdw1 = %d, *pdw2 = %d\n", *pdw1, *pdw2);

    /* Now watch this */
    *pdw1 = 42;
    printf("*pdw1 = %d, *pdw2 = %d\n", *pdw1, *pdw2);
}
</pre>
<p>
        This program prints 
    </p>
<pre></pre>
<pre>Mapped to 280000 and 290000
*pdw1 = 0, *pdw2 = 0
*pdw1 = 42, *pdw2 = 42
</pre>
<p>
        (Missing asterisks added, 8am - thanks to commenter Tom for pointing this out.) 
    </p>
<p>
        The addresses may vary from run to run, but observe that the memory did get mapped
        to two different addresses, and changing one value to 42 magically changed the other. 
    </p>
<p>
        This is a nifty consequence of the way shared memory mapping works. I stumbled across
        it while investigating how I could copy large amounts of memory without actually copying
        it. The solution: Create a shared memory block, map it at one location, write to it,
        then unmap it from the old location and map it into the new location. Presto: The
        memory instantly "moved" to the new location. This a major win if the memory block
        is large, since you didn't have to allocate a second block, copy it, then free the
        old block - the memory block doesn't even get paged in. 
    </p>
<p>    It turns out I never actually got around to using this trick, but it was a fun thing
    to discover anyway. 
</body></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-126873">
				<div id="div-comment-126873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031007-00/?p=42263#comment-126873">
			October 7, 2003 at 10:35 am</a>		</div>

		<p>On my system, this gives  &quot;Mapped to 340000 and 350000&quot;.  Why do they seem to be separated by 10000?  I&#8217;m not familiar w/ these calls &#8211; I&#8217;ll take this as a pointer to MSDN or Richter.</p>
<p>Thanks.</p>
<p>p.s. Your output is missing a couple of &quot;*&quot;s.  </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-126883">
				<div id="div-comment-126883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gregor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031007-00/?p=42263#comment-126883">
			October 7, 2003 at 3:14 pm</a>		</div>

		<p>Do you know if this will work in all versions of Windows?  How about in the future?  This would truely make some things easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-126893">
				<div id="div-comment-126893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.virtualdub.org/' rel='external nofollow' class='url'>phaeron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031007-00/?p=42263#comment-126893">
			October 7, 2003 at 4:54 pm</a>		</div>

		<p>The 0x10000 offset is because Windows reserves address space in 64K increments, even though it commits memory in 4K pages.</p>
<p>I was going to attempt this technique for ring buffers to handle the wrap nicely, but decided against it for two reasons.  One is address space &#8212; you need at least 128K of address space per buffer and in Win95/98 they&#8217;re crammed into the 1GB shared arena with everyone else. The other is that it may not be portable, depending on the cache architecture.  Linux-kernel recently tested memory aliasing on a number of platforms and found it failed on a couple of RISC platforms &#8212; I think one was SPARC.</p>
<p>There is another hidden way this aliasing can occur: when CreateDIBSection() is called with a handle to a mapped file that already has a view in the process.  I would think that aliasing being broken on a platform would cause problems for GDI in this case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-126903">
				<div id="div-comment-126903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yeep</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031007-00/?p=42263#comment-126903">
			October 7, 2003 at 7:28 pm</a>		</div>

		<p>Just curious, but how is this different compared to:<br />
{<br />
char* ptr1 = (char *)malloc(1000);<br />
char* ptr2 = ptr1;</p>
<p>printf(&quot;Mapped to %x and %xn&quot;, ptr1, ptr2);<br />
printf(&quot;*ptr1 = %d, *ptr2 = %dn&quot;, *ptr1, *ptr2);<br />
*ptr1 = 42;<br />
printf(&quot;*ptr1 = %d, *ptr2 = %dn&quot;, *ptr1, *ptr2);<br />
}</p>
<p>All that&#8217;s different is that the two pointer vars contain the same address. For rest it does the same. Or am I missing something here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-126913">
				<div id="div-comment-126913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031007-00/?p=42263#comment-126913">
			October 7, 2003 at 9:04 pm</a>		</div>

		<p>Right, the point is that the two pointers have different addresses. In my case, I wanted to allocate a huge chunk of memory, fill it with stuff, then allocate a second hunge chunk of memory, fill the second chunk with stuff based on what was in the first chunk, then &quot;magically&quot; swap the two chunks in memory. (Those who are playing at home will recognize this as a twospace garbage collector.)</p>
<p>I was never going to use the &quot;map it twice to get two copies&quot; trick; that was just fallout from the &quot;move by remapping&quot; trick.</p>
<p>I find it hard to believe that a CPU would have trouble with aliasing. When you pass an I/O buffer to kernel mode, kernel mode locks the memory and creates an alias for it, then operates on the alias from then on.  That way your app can&#8217;t crash kernel mode by freeing the memory while the I/O is still in progress. (And because at the next context switch, your user mode memory gets unmapped, which is kind of a bummer if the hardware generates an interrupt when your app isn&#8217;t current &#8211; which it probably won&#8217;t be since it&#8217;s blocked on I/O!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-126923">
				<div id="div-comment-126923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.virtualdub.org/' rel='external nofollow' class='url'>phaeron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031007-00/?p=42263#comment-126923">
			October 8, 2003 at 12:44 am</a>		</div>

		<p>From what I heard, some CPUs have their data cache lines indexed by virtual address, so if the cache size is large enough relative to the page size, it&#8217;s possible for the same byte to get mapped into the cache twice via the two windows, and after that updating one cached alias doesn&#8217;t update the other.  IA-32 uses physical addresses so this isn&#8217;t a problem.  Presumably if you actually invoke VM calls, though, the kernel does whatever flushing is necessary to avoid problems with stale data.</p>
<p>The window swapping trick is neat, but isn&#8217;t there a potential problem with another thread, perhaps an OS worker thread, mapping something in that area while you&#8217;re trying to remap, since you&#8217;ll have to temporarily unmap it?  IIRC, you can&#8217;t memory map into a region reserved by VirtualAlloc(), and if you get switched out it&#8217;s possible for someone to sneak in and allocate the address range you&#8217;re trying to MapViewOfFileEx() back into.  Of course, you&#8217;re obviously much more knowledgable about Win32 than I am, so maybe I&#8217;ve missed some way that the mapping addresses of the windows can be changed atomically.</p>
<p>By the way, I love the blog so far &#8212; lots of good tidbits and history.  Have you thought of writing a book? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-126933">
				<div id="div-comment-126933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031007-00/?p=42263#comment-126933">
			October 8, 2003 at 3:11 am</a>		</div>

		<p>Phaeron said &quot;Have you thought of writing a book? :)&quot;</p>
<p>This is a fantastic idea, please write a book you&#8217;d sell at least 2 copies and that&#8217;s gotta be more than most of the &quot;Java in 15&quot;* minutes books sold &#8230;. actually I think it&#8217;d do very well, and you wouldn&#8217;t have to go far to find a publisher :)</p>
<p>*I only mention this because I went to my local bookstore last night and there were hordes of Java books &#8211; still &#8211; even after the hype has supposedly died down. Could I find a single book on embedded systems? Yes one &#8211; Embedded Systems Programming with Java.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-202103">
				<div id="div-comment-202103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/08/10/211890.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031007-00/?p=42263#comment-202103">
			August 10, 2004 at 10:00 am</a>		</div>

		<p>Virtual memory is not virtual address space (part 2).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-202453">
				<div id="div-comment-202453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://flaphead.dns2go.com/blog/archive/2004/08/11/296.aspx' rel='external nofollow' class='url'>Welcome to Flaphead.com @ Home</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031007-00/?p=42263#comment-202453">
			August 11, 2004 at 9:09 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

