<html>
<head>
<title>Windows doesn't close windows when a user logs off; that's your call</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Windows doesn&#8217;t close windows when a user logs off; that&#8217;s your call</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 21, 2008 / year-entry #131</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>48</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter Peter Kankowski asks why Windows doesn't send WM_CLOSE and WM_DESTROY messages when the user logs off. That's what WM_ENDSESSION is for. To tell the program that the Windows session is ending, and that you should get done whatever last things you want to get done before the world comes to an end. Windows doesn't...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Commenter Peter Kankowski asks <a href="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#511930"> why Windows doesn't send <code>WM_CLOSE</code> and <code>WM_DESTROY</code> messages when the user logs off</a>.</p>
<p> That's what <code>WM_ENDSESSION</code> is for. To tell the program that the Windows session is ending, and that you should get done whatever last things you want to get done before the world comes to an end. </p>
<p> Windows doesn't send the <code>WM_CLOSE</code> message because sending <code>WM_CLOSE</code> becomes complicated once there is more than one window. What is the correct order for sending <code>WM_CLOSE</code> when there are multiple windows? Besides, many programs don't respond to <code>WM_CLOSE</code> by closing. Instant messenger programs typically treat <code>WM_CLOSE</code> to mean "hide" rather than "close". Notepad displays an unsaved data warning when you close the window. And of course, you can't close a disabled window. </p>
<p> As we saw with Notepad, sending a <code>WM_CLOSE</code> would just repeat actions that were taken during <code>WM_ENDSESSION</code>, which is particularly bad because the time for user interaction is over. <code>WM_QUERYENDSESSION</code> is the time to say your last good-byes. If Windows sent the <code>WM_CLOSE</code> message during logoff, Notepad would display a "You have unsaved changes. Do you want to save this file?" message after the user already said, "Go ahead and exit without saving," when Notepad handled the <code>WM_QUERYENDSESSION</code> message. "Stupid computer. Why is it asking me this question again?" Even worse, what if the user says "Cancel"? It's too late; shutdown has begun. Your chance to cancel it was back when you got the <code>WM_QUERYENDSESSION</code> message. </p>
<p> Asking for the <code>WM_DESTROY</code> message is even weirder, since that message is not sent explicitly but is rather generated when <code>DestroyWindow</code> is called. You can't just send it outside of a destroy sequence. </p>
<p> Besides, why spend your time closing windows when the session is about to go away anyway? Ooh, let me clean up this and destroy that, I know you asked to shut down, but this'll just take a few seconds. It's like taking the time to steam-clean the rugs before you demolish the building. Wasted effort. </p>
<p> Now, you might respond, "Yeah, sure, these are problems, but we should just require programs to address them, such as not putting up additional UI if they get a <code>WM_CLOSE</code> after a <code>WM_ENDSESSION</code>." Of course, this argument contradicts the rationale for the original question, since the question was inspired by programs that didn't handle the <code>WM_ENDSESSION</code> correctly in the first place! "We have a problem with programs that don't handle the <code>WM_ENDSESSION</code> message correctly. Solution: Make <code>WM_ENDSESSION</code> more complicated." </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (48)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-621593">
				<div id="div-comment-621593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PhilQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621593">
			April 21, 2008 at 10:47 am</a>		</div>

		<p>&#8220;And of course, you can&#8217;t close a disabled window.&#8221;</p>
<p>I don&#8217;t think this is true. &nbsp;Disabling a window prevents the window from receiving UI events; it doesn&#8217;t seem to restrict what can be done to a window programmatically. &nbsp;I just wrote a test program to verify this.</p>
<p>I think this is the cause of an annoying quirk in Windows: a disabled window can be activated from the taskbar.</p>
<div class=post>[<i>&#8220;Hey, let&#8217;s programmatically simulate an impossible UI action. I bet there won&#8217;t be any programs that crash when that happens.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-621613">
				<div id="div-comment-621613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SRS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621613">
			April 21, 2008 at 11:29 am</a>		</div>

		<p>PhilQ &#8211; surely all the behaviour you&#8217;ve described is just what you&#8217;d want the system to do. Imagine if disabling a window caused all window calls to fail or block. What could you do with the disabled window then?</p>
<p>And you want a disabled window to be activatable from the taskbar because people may still want to look at the app, even if it isn&#8217;t ready for interaction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-621623">
				<div id="div-comment-621623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://marksowul.com' rel='external nofollow' class='url'>Mark Sowul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621623">
			April 21, 2008 at 11:37 am</a>		</div>

		<p>That&#8217;s funny, I was just reading this: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/michen/archive/2008/04/04/Application-termination-when-user-logs-off.aspx" rel="nofollow">http://blogs.msdn.com/michen/archive/2008/04/04/Application-termination-when-user-logs-off.aspx</a> yesterday.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-621643">
				<div id="div-comment-621643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621643">
			April 21, 2008 at 11:40 am</a>		</div>

		<p>I managed to get the Visual Basic Express 2008 window to disable itself so I had to kill the process. &nbsp;Very annoying.</p>
<p>Protip: Don&#8217;t try to build a project while debugging, and if you do, don&#8217;t click &quot;Yes&quot; when it asks if you want to stop debugging.</p>
<p>I checked how .NET handles WM_QUERYENDSESSION and WM_ENDSESSION. &nbsp;Although I&#8217;d have to take .NET Reflector to check the code itself, from a quick look at events and help files it seems .NET just triggers FormClosing and FormClosed on all open forms, respectively (and I assume it calls Application.Exit() which triggers its own event and cleanup stuff too).</p>
<p>I found the key help article here, under the CloseReason enumeration which is sent as part of a FormClosing event (FYI you need VS2008 installed to use this URL):</p>
<p>ms-help://MS.VSCC.v90/MS.msdnexpress.v90.en/fxref_system.windows.forms/html/fa4621f4-6474-21d1-841a-13b1e31e62a8.htm</p>
<p>I&#8217;m guessing &quot;WindowsShutDown&quot; would be what is sent in this case (since, to programs running in a user session, that user logging off is no different from a system shutdown&#8230; they shouldn&#8217;t care about the difference, anyways).</p>
<p>I&#8217;m a bit curious how they differentiate between some of those cases&#8230; I guess TaskManagerClosing happens when .NET gets a WM_CLOSING message that .NET knows it didn&#8217;t trigger itself. &nbsp;The rest are internally generated I guess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-621733">
				<div id="div-comment-621733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621733">
			April 21, 2008 at 1:15 pm</a>		</div>

		<p>This weekend I was cleaning gigabytes out of my temp folder, wondering how all this junk gets left behind.</p>
<p>Programmers who don&#8217;t understand Windows shutdown may be part of the problem.</p>
<p>If you rely on the RAII (Resource Acquisition Is Instantiation) pattern, then you have to make sure your destructors actually get called. &nbsp;In the normal flow of things, C++ offers a lot of guarantees on this. &nbsp;But getting your process terminated at shutdown voids those guarantees.</p>
<p>Like Raymond says, lots of that cleanup is pointless when the user is logging off, but some of it isn&#8217;t. &nbsp;Flushing buffers, saving preferences and documents, and deleting your temp files aren&#8217;t optional. &nbsp;If you rely on RAII, then you have provide a way for all of those important destructors to run on WM_ENDSESSION.</p>
<p>Another problem is the I/O contention at shutdown. &nbsp;With the mad rush of programs trying to scribble data on the disk, you&#8217;re lucky if you can write a couple sectors before your five seconds expires.</p>
<p>On a related question, how does Task Manager kill an application when you choose End Task? &nbsp;Does it ask nicely before resorting to TerminateProcess()?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-621743">
				<div id="div-comment-621743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621743">
			April 21, 2008 at 1:17 pm</a>		</div>

		<p>Many apps just use MessageBox for the purpose of asking whether to save or not before closing. It would probably be sufficient to detect that. Otherwise, just pop up the &#8220;Kill?&#8221; window somewhere other than center, such as top-center.</p>
<div class=post>[<i>And then you&#8217;d be punishing programs that used the new task dialog interface. Sure, you can add that to the list, but what do you do when the next version of Windows adds a new, improved interface? Do you issue a patch for Windows Vista to recognize the new interface, too? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-621763">
				<div id="div-comment-621763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621763">
			April 21, 2008 at 1:57 pm</a>		</div>

		<p>Solving this problem would involve taking a radically different approach: Abandon the notion that you need to offer to kill any app which isn&#8217;t quitting. There&#8217;s a difference between apps which choose not to quit (because the user hasn&#8217;t saved a document yet or what-have-you) and apps which cannot quit (because they&#8217;ve gotten themselves into a buggy state from which they cannot recover). Windows conflates the former with the latter, and that&#8217;s not only annoying but arguably dangerous.</p>
<div class=post>[<i>That&#8217;s what earlier versions of Windows did, and then you have the &#8220;I can&#8217;t shut down&#8221; problem. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-621773">
				<div id="div-comment-621773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621773">
			April 21, 2008 at 2:08 pm</a>		</div>

		<p>But I really jumped into the comment-stream of this post for another reason: For a while now I&#8217;ve wondered where in Windows I could find something like the &quot;quit&quot; event on Mac OS. (Apple Events differ from Windows messages in that Apple Events are sent to an application rather than a window.) Here are the candidates I&#8217;ve encountered so far:</p>
<p>WM_QUIT isn&#8217;t a real message and shouldn&#8217;t be sent by one application to another. (If you are doing this, you need to read more entries on this blog.)</p>
<p>WM_CLOSE has the scope of a single window rather than an app, so if you&#8217;re going to use it to mean the app should quit, then you need to designate a special (hidden) window which listens for this message and the sender needs to know to seek out this window (which is what I have done so far).</p>
<p>WM_DESTROY is obviously wrong; don&#8217;t get me started.</p>
<p>WM_ENDSESSION seems to be intended to be sent by the system rather than an application.</p>
<p>Any clues for me, RC?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-621783">
				<div id="div-comment-621783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://marksowul.com' rel='external nofollow' class='url'>Mark Sowul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621783">
			April 21, 2008 at 2:09 pm</a>		</div>

		<p>&#8220;[And then you&#8217;d be punishing programs that used the new task dialog interface. Sure, you can add that to the list, but what do you do when the next version of Windows adds a new, improved interface? Do you issue a patch for Windows Vista to recognize the new interface, too? -Raymond]&#8221;</p>
<p>But why would Vista need to be concerned with the new interface features? &nbsp;Let&#8217;s say we had such a function in XP that detected message boxes. &nbsp;Obviously in Vista, there are TaskDialogs as well. &nbsp;But why would XP have to be concerned with TaskDialogs, when you can&#8217;t show TaskDialogs on XP?</p>
<div class=post>[<i>People would avoid TaskDialogs because XP misdetects them. &#8220;A program that uses TaskDialogs behaves worse on XP than a program that uses MessageBox. I&#8217;ll stick to MessageBox.&#8221; (Of course, for the purpose of discussion, replace TaskDialog with some other UI design that works on XP.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-621823">
				<div id="div-comment-621823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621823">
			April 21, 2008 at 2:31 pm</a>		</div>

		<p>Of course, it&#8217;s a matter of priorities. If you prioritize the &quot;I can&#8217;t shut down&quot; case, then you can&#8217;t prioritize the &quot;save this document?&quot; case.</p>
<p>If you prioritize the former, than you are stopping some whining, and if you prioritize the latter, then you are protecting data.</p>
<p>I know which one I&#8217;d choose, but then that&#8217;s why I&#8217;m not a Captain of Industry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-621873">
				<div id="div-comment-621873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621873">
			April 21, 2008 at 3:03 pm</a>		</div>

		<p>&quot;Another problem is the I/O contention at shutdown. &nbsp;With the mad rush of programs trying to scribble data on the disk, you&#8217;re lucky if you can write a couple sectors before your five seconds expires.&quot;</p>
<p>Even worse, what if Windows had to wait to terminate a process during shutdown because, for example, the process have pending IRPs that could not be finished in time because of the I/O contention?</p>
<p>If you don&#8217;t know what I am talking about, see this:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2004/07/23/192531.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2004/07/23/192531.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-621893">
				<div id="div-comment-621893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pingpong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621893">
			April 21, 2008 at 3:05 pm</a>		</div>

		<p>@pete: from your description it seems that both sender and receiver are under your control, so why don&#8217;t you use private message?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-621913">
				<div id="div-comment-621913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621913">
			April 21, 2008 at 3:19 pm</a>		</div>

		<p>Also, what about if the network goes away during shutdown, which is common on wireless networks, and to terminate the process Windows have to wait for the network to time out?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-621923">
				<div id="div-comment-621923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621923">
			April 21, 2008 at 3:31 pm</a>		</div>

		<p>@Mark: &nbsp;they did redesign the shutdown UX in Vista, so I think your problem is more of an XP-specific issue. &nbsp;If I recall, in Vista if it detects there are apps blocking shutdown, it will show you a list of blocking apps and gives the user a chance to abort the shutdown (within a 10-second timeout or similar). &nbsp;I think Vista even allows an app to specify a string describing why it doesn&#8217;t want to quit (but the app of course has to use the new API to specify the string).</p>
<p>Anyway, it&#8217;s probably a better idea to train the user to save their work frequently if they&#8217;re using an app that doesn&#8217;t have an auto-save feature. &nbsp;After all, the machine can always unexpectedly blue-screen or losses power.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-621943">
				<div id="div-comment-621943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621943">
			April 21, 2008 at 4:12 pm</a>		</div>

		<p>pete: The .NET Process object has a CloseWindow method that closes the main window of the program, which in many GUI programs will cause the program to quit, unless it&#8217;s a system tray program, (you can&#8217;t really signal those to quit anyway since they may have no window to send messages to, unless they specifically provide for interprocess communication).</p>
<p>I don&#8217;t know if there&#8217;s a specific WinAPI function to figure out the main window for a program, but I bet .NET simply assumes the first window the process created is the main one, which would be a reasonable assumption that would work for most cases.</p>
<p>At any rate just keep in mind it&#8217;s going to be impossible to get 100% compatibility because of the variety of programs and program behaviors out there.</p>
<p>I don&#8217;t like how some programs, like Explorer, wait until they close (in Explorer&#8217;s case, you have to log out) before saving settings. &nbsp;Since I rarely reboot or shutdown unless a BSoD occurs, this means I usually end up reapplying a setting change I applied last session. &nbsp;So in my own programs I simply write settings to disk once they are changed within the program. &nbsp;I have a .NET class which has a standard Collection and allows you to index settings, and writes a new settings file out to disk whenever one is changed (as well as a &quot;I&#8217;m about to set lots of settings, don&#8217;t write yet&quot; BeginUpdate and EndUpdate methods).</p>
<p>I have to agree with Raymond on Mark&#8217;s suggestion. &nbsp;Lots of programs use custom dialogs and so basically you&#8217;d be trying to detect if a process opens a window after you try closing a different window. &nbsp;This is so generic it&#8217;s going to cause problems. &nbsp;And who says the program won&#8217;t hang while showing this new dialog? &nbsp;Then you have a real problem. &nbsp;I believe Windows&#8217; current handling is correct&#8230; a program should not be showing a dialog on shutdown since Windows IS going to obscure it. &nbsp;Of course then you can&#8217;t prompt the user to save their document. &nbsp;There are workarounds to consider including automatic persistence between application sessions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-621953">
				<div id="div-comment-621953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621953">
			April 21, 2008 at 4:16 pm</a>		</div>

		<p>@pingpong:</p>
<p>Well, firstly, I don&#8217;t have total control over the sender, because it&#8217;s an installer script with limited message sending capabilities. But that&#8217;s not the end of the world, because I am effectively doing as you suggest anyway. As RC mentions nearby, one cannot expect to get away with sending WM_CLOSE to arbitrary hidden windows, but we know it works reliably for mine, which makes this use of WM_CLOSE effectively private. The installer script is happy to send WM_CLOSE to arbitrary windows, so everything is working a practical level. And, if some other (foolhardy) app happens to send WM_CLOSE to my hidden window, that&#8217;s OK too.</p>
<p>The reason I bring up this issue has less to do with solving any immediate practical problem I have and more to do with: [1] wondering why I should have had to spend any time thinking about this, and [2] mild concern that some future maintainer of the sender will conclude that all receivers are supposed to work as well as mine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-621963">
				<div id="div-comment-621963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621963">
			April 21, 2008 at 4:26 pm</a>		</div>

		<p>@Dan:</p>
<p>Remember The Old New Thing is &quot;not actually a .NET blog&quot;. :-) I&#8217;m using Win32.</p>
<p>As well, since you mention it, it happens the app in question&#8217;s only visible human interface is a task bar icon, though it also needs a window so that the system can send it various sorts of hardware and registry-related notification messages. Since I don&#8217;t need the window for anything else, I hide it, and since the window hangs around for the lifetime of the app anyway, I just tell the installer to send it WM_CLOSE. Works fine.</p>
<p>But in addition to the concerns I mentioned above, let&#8217;s suppose I didn&#8217;t need to have a window for any other reason&#8230; then there&#8217;d be no standard way for the installer to quit my app, right? That&#8217;s what I&#8217;m talking about.</p>
<p>I realize most people don&#8217;t care about this kind of stuff, but I write lots of dinky little utility apps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-621973">
				<div id="div-comment-621973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://marksowul.com' rel='external nofollow' class='url'>Mark Sowul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621973">
			April 21, 2008 at 4:31 pm</a>		</div>

		<p>&quot;Suppose that the new recommendation in the next version of Windows is &quot;Don&#8217;t use MessageBox, use X&#8217;s&quot; where &quot;X&quot; is something that works on XP, but which almost nobody uses (e.g. a custom dialog box). Should the &quot;X detection at shutdown&quot; code be backported to XP? -Raymond&quot;</p>
<p>Well, developers&#8217; use of custom dialogs would require Windows to read the developer&#8217;s mind anyway (unless it was some kind of specially flagged custom dialog) &#8211; but in any case that&#8217;s changing the rules after the hypothetical XP&#8217;s game is over. &nbsp;In any case I don&#8217;t think it was expected that this was supposed to cover 100% of cases, just the most common ones (i.e. MessageBox/TaskDialog). &nbsp;If no one was using the theoretical construct before, the rate of introduction of use of the new feature vs. the rate of attrition of older OSes should make it a rare enough case as to not matter. &nbsp;In any case, generalizing to modal dialog boxes would probably cover 99% of past and future cases and if the developer is doing something funky, the onus should be back on them with WM_QUERYENDSESSION.</p>
<p>&quot;@Mark: &nbsp;they did redesign the shutdown UX in Vista, so I think your problem is more of an XP-specific issue. &nbsp;If I recall, in Vista if it detects there are apps blocking shutdown, it will show you a list of blocking apps and gives the user a chance to abort the shutdown (within a 10-second timeout or similar). &nbsp;I think Vista even allows an app to specify a string describing why it doesn&#8217;t want to quit (but the app of course has to use the new API to specify the string).&quot;</p>
<p>Right, but the hypothetical detection could be used in concert with this UI. &nbsp;Remember the original complaint was the &quot;End program&quot; message box being on top of the Save/Don&#8217;t save dialog. &nbsp;Vista&#8217;s black replacement shutdown screen doesn&#8217;t change the principles here. &nbsp;All that&#8217;s being said here is it would be nice for these constructs to not cover Save dialogs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-621993">
				<div id="div-comment-621993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621993">
			April 21, 2008 at 4:46 pm</a>		</div>

		<p>have never done anything about this.. MFC has magically handled it for me without me ever having to learn about this :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-622003">
				<div id="div-comment-622003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622003">
			April 21, 2008 at 4:56 pm</a>		</div>

		<p>The developers, including MS, need to remember to do the same state save on WM_(QUERY)ENDSESSION, as they do on WM_CLOSE. So far the offenders are REGEDIT (doesn&#8217;t remember the last key, if session was shut down, as opposed to the app closed), and Visual Studio &#8211; doesn&#8217;t save the last workspace.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-622033">
				<div id="div-comment-622033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622033">
			April 21, 2008 at 5:09 pm</a>		</div>

		<p>This doesn&#8217;t help existing apps, but what about the idea of having the return value from WM_(QUERY)ENDSESSION encode &#8220;Uh, wait a second, I&#8217;m asking the user to save data.&#8221;, which also at least somewhat validates that the app is running &#8220;correctly&#8221;. Or creating a new function to indicate that, since who knows what existing apps might be returning for those messages now, regardless of what the docs say.</p>
<div class=post>[<i>Um, how can Windows act on the return value from a function that hasn&#8217;t yet returned? -Raymond</i>]</div>
<p>I&#8217;m not 100% sure what the right response is for Windows, though. Perhaps to extend the timeout, and make sure the window&#8217;s dialogs appear to the user (or at least not covering them up with &#8220;kill this app&#8221; messages :-), and then perhaps sending those apps another message later (WM_REALLYENDSESSION? :-) telling the application it&#8217;s got one last chance to do something before it&#8217;s killed.</p>
<p>Complicated&#8230; yeah, I suppose I&#8217;m complicating the ENDSESSION handling in order to deal with the problem of apps not handling ENDSESSION correctly, but in this case it seems like a backwards compatible and useful to the user complication.</p>
<p>(and, yes, if there were a system power state problem that made the situation more urgent, sending the new message right away, before the extended timeout, would be a reasonable reaction&#8230; what else are you going to do?). </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-622043">
				<div id="div-comment-622043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622043">
			April 21, 2008 at 5:22 pm</a>		</div>

		<blockquote><p>
  Raises the topic of what I consider to be one of the worst dialogs in windows. When shutting down if an app pops up a &#8216;save ur work?&#8217; dialog the windows pops up a &#8216;this app is dead &#8211; kill it?&#8217; dialog after a short time.
</p></blockquote>
<p>It&#8217;s already been addressed, but I love how many programmers are ignorant of things like the halting problem.</p>
<blockquote><p>
  This weekend I was cleaning gigabytes out of my temp folder, wondering how all this junk gets left behind.
</p></blockquote>
<p>Windows doesn&#8217;t clean its temp folder? It probably should.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-622063">
				<div id="div-comment-622063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622063">
			April 21, 2008 at 6:07 pm</a>		</div>

		<p>Perhaps there should be an API for specifying blocks of data to the OS that should be saved were the session to end abruptly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-621693">
				<div id="div-comment-621693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621693">
			April 21, 2008 at 12:49 pm</a>		</div>

		<p>Raises the topic of what I consider to be one of the worst dialogs in windows. When shutting down if an app pops up a &#8216;save ur work?&#8217; dialog the windows pops up a &#8216;this app is dead &#8211; kill it?&#8217; dialog after a short time.</p>
<p>THis dialog is *guaranteed* to hide the first dialog. Most users dont now to move this dialog aside, so they just hit &#8216;kill it&#8217;.</p>
<p>I have seen this so many times. THye end up loosing their work</p>
<p>All that windows needs to do is pop up the kill it? dialog not in the center. Or ideally it should recognize this common case and say &#8220;this app is asking you a question &#8211; please answer it&#8221;</p>
<div class=post>[<i>And how would you write the function </i><i>IsAppAskingAQuestion</i>? How accurate must this function be? Are false positives acceptable? False negatives? -Raymond]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-622123">
				<div id="div-comment-622123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622123">
			April 21, 2008 at 8:32 pm</a>		</div>

		<p>Sounds like a database thing. Seriously, that&#8217;s a lot of overhead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-622143">
				<div id="div-comment-622143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622143">
			April 21, 2008 at 8:44 pm</a>		</div>

		<p>@Pete:</p>
<p>The real question is why you are telling something to close from an installer? &nbsp;Why don&#8217;t you prompt the user to do it for you or provide the contract to close to the actual application?</p>
<p>Installers shouldn&#8217;t be asking other applications to close &#8211; look at the Windows Installer pattern for reasons why this is. &nbsp;MSI 4.0 exposes new functionality to support the Restart Manager. &nbsp;Support that from here on out.</p>
<p>The issue is that you assume there&#8217;s a generic way to close down an application when there&#8217;s not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-622183">
				<div id="div-comment-622183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622183">
			April 21, 2008 at 9:15 pm</a>		</div>

		<p>&quot;Um, how can Windows act on the return value from a function that hasn&#8217;t yet returned? -Raymond&quot;</p>
<p>I think the idea was for WM_QUERYENDSESSION to return a new value meaning &quot;I&#8217;ll have to ask the user first&quot; and then have the app call a new API later on saying &quot;yeah, ok, reboot&quot;, or &quot;the user doesn&#8217;t want to reboot&quot;.</p>
<p>But I don&#8217;t think that&#8217;s a workable solution, since apps have proved time and time again that they can&#8217;t be trusted. &nbsp;(Someone somewhere is going to write an app that always responds &quot;don&#8217;t reboot!&quot; without actually asking the user.)</p>
<p>@Bryan: It&#8217;s reasonable to have an installer request an application to close, provided that (a) it&#8217;s the same application that the installer is trying to install and (b) it&#8217;s done cooperatively, so the app is allowed to say &quot;no, because the user still has a dialog box open&quot;. &nbsp;Arbitrarily killing other processes is definitely a no-no, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-621903">
				<div id="div-comment-621903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://marksowul.com' rel='external nofollow' class='url'>Mark Sowul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-621903">
			April 21, 2008 at 3:17 pm</a>		</div>

		<p>[People would avoid TaskDialogs because XP misdetects them. &#8220;A program that uses TaskDialogs behaves worse on XP than a program that uses MessageBox. I&#8217;ll stick to MessageBox.&#8221; (Of course, for the purpose of discussion, replace TaskDialog with some other UI design that works on XP.) -Raymond]</p>
<p>But XP can&#8217;t &#8220;misdetect&#8221; them because they don&#8217;t exist in XP.* &nbsp;I&#8217;m not sure I&#8217;m understanding: if it is a UI design that works in XP, it was either there already (and so should have been handled) otherwise it was backported (and so the handling should have also been backported). &nbsp;If it isn&#8217;t backported, then it doesn&#8217;t exist, and there&#8217;s no need to worry.</p>
<p>Again, I&#8217;m only talking about MessageBox and its equivalents. &nbsp;</p>
<p>*Nitpicker&#8217;s corner: yes, they can be emulated, but that&#8217;s your own problem, and yes, there is a wrapper that will show a TaskDialog on Vista and a MessageBox on XP, but the entire assumption is that the MessageBox was handled. &nbsp;</p>
<div class=post>[<i>That&#8217;s why I wrote &#8220;replace TaskDialog with some other UI design that works on XP.&#8221; Suppose that the new recommendation in the next version of Windows is &#8220;Don&#8217;t use MessageBox, use X&#8217;s&#8221; where &#8220;X&#8221; is something that works on XP, but which almost nobody uses (e.g. a custom dialog box). Should the &#8220;X detection at shutdown&#8221; code be backported to XP? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-622203">
				<div id="div-comment-622203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622203">
			April 21, 2008 at 10:35 pm</a>		</div>

		<p>This is a terrible problem. &nbsp;Too many programs are guilty of not saving settings when the session ends.</p>
<p>It&#8217;s best practice to save settings periodically, not defer that task until the program is closed. &nbsp;Not only will this prevent setting changes from being lost when the session ends, but also if there is a system crash or power outage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-622223">
				<div id="div-comment-622223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michen/archive/2008/04/04/Application-termination-when-user-logs-off.aspx' rel='external nofollow' class='url'>Michael Entin's notebook : Application termination when user logs off</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622223">
			April 21, 2008 at 11:35 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/michen/archive/2008/04/04/Application-termination-when-user-logs-off.aspx" rel="nofollow">http://blogs.msdn.com/michen/archive/2008/04/04/Application-termination-when-user-logs-off.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-622023">
				<div id="div-comment-622023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622023">
			April 21, 2008 at 5:05 pm</a>		</div>

		<p>&quot;All that windows needs to do is pop up the kill it? dialog not in the center.&quot;</p>
<p>Forget the impossible question of determing whether an app is asking a question. Just determine which window has the focus and if the Kill-It dialog completely covers it up (easy problem), move the KillIt dialog slightly, so the *user* can determine that the program is asking a question (hard problem).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-622253">
				<div id="div-comment-622253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622253">
			April 22, 2008 at 2:15 am</a>		</div>

		<p>I think best is to save app state on WM_QUERYENDSESSION, and there also you can without problems ask the user to save their documents.</p>
<p>This is the time to clean up temp files too.</p>
<p>So on WM_ENDSESSION the app has little if nothing to do besides quickly terminate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-622273">
				<div id="div-comment-622273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622273">
			April 22, 2008 at 3:25 am</a>		</div>

		<p>@Bryan:</p>
<p>I&#8217;m glad we agree there isn&#8217;t a generic way to quit an application programmatically, but you seem to have missed my point, which is: I want one.</p>
<p>Why? Well, in this particular case, I have an installer which wants to upgrade my app, and Windows won&#8217;t let me do anything interesting to the app&#8217;s file if the app is running.</p>
<p>I must confess I don&#8217;t know all that much about MSI and Restart Manager. I am, after all, not the installer guy. But I can tell you for certain that restarting sucks. We bend over backwards to avoid forcing the user to restart.</p>
<p>In any case, Mac OS has supported app A telling app B to quit for about 16 years now. There&#8217;s nothing particularly dangerous about it. App B is free to refuse.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cornedbee odd alt thread-odd thread-alt depth-1" id="comment-622293">
				<div id="div-comment-622293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CornedBee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622293">
			April 22, 2008 at 6:41 am</a>		</div>

		<p>&#8220;Um, how can Windows act on the return value from a function that hasn&#8217;t yet returned? -Raymond&#8221;</p>
<p>So turn the method around. Have applications that ask the user a question call the new API function &#8220;IAmAskingTheUser()&#8221; before displaying the dialog. Then the system knows that the application is actually responding to WM_QUERYENDSESSION, not hanging.</p>
<p>The method is backward compatible &#8211; existing applications that don&#8217;t call IAmAskingTheUser() behave no worse than currently: the system thinks they&#8217;re hanging.</p>
<p>New programs that use the method get progressive enhancement.</p>
<p>Although I also like the earlier suggestion of automatically detecting this. I think this could be accomplished simply by marking the program as &#8220;waiting for the user&#8221; if it calls GetMessage or one of its equivalents. Thus, you catch every message loop the program enters, be they from MessageBox, TaskDialogs or feature XYZ in Windows.Next. It wouldn&#8217;t catch for example reads on standard input, but that&#8217;s probably fine.</p>
<div class="post">[<i>And what if the program calls IAmAskingTheUser and then hangs inside its dialog? (E.g., it wants to show an icon in the dialog, and the icon resides on a server that is down.) And just because a program is calling GetMessage doesn&#8217;t mean that it&#8217;s waiting for the user. It might be waiting for a remoted COM object. This happens more often than you think. We&#8217;re back to the question, &#8220;Are false positives and false negatives acceptable?&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-622323">
				<div id="div-comment-622323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Xavi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622323">
			April 22, 2008 at 8:46 am</a>		</div>

		<p>&quot;And of course, you can&#8217;t close a disabled window.&quot;</p>
<p>I have to enable all (child-) windows I want to close&#8230;.?</p>
<p>It won&#8217;t be possible to process WM_CLOSE (as in this context)?</p>
<p>No way &#8211; I mean it&#8217;s possible, but I agree it&#8217;s definitely wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-622333">
				<div id="div-comment-622333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://marksowul.com' rel='external nofollow' class='url'>Mark Sowul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622333">
			April 22, 2008 at 9:37 am</a>		</div>

		<p>(Someone somewhere is going to write an app that always responds &quot;don&#8217;t reboot!&quot; without actually asking the user.)</p>
<p>Incidentally, that&#8217;s already a problem when apps swallow the WM_QUERYENDSESSION message (usually by not passing messages off to DefWindowProc (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/04/25/583093.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/04/25/583093.aspx</a>)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-622363">
				<div id="div-comment-622363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622363">
			April 22, 2008 at 11:56 am</a>		</div>

		<blockquote><p>
  Why? Well, in this particular case, I</p>
<p>  have an installer which wants to upgrade</p>
<p>  my app, and Windows won&#8217;t let me do</p>
<p>  anything interesting to the app&#8217;s file</p>
<p>  if the app is running.
</p></blockquote>
<p>Strawman! &nbsp;Btw &quot;Windows&quot; is not the problem. Would you be replacing the files that your using while it&#8217;s running? &nbsp;In any case, you don&#8217;t need something generic for Your installer to quit Your app. &nbsp;</p>
<p>It&#8217;s Your app. &nbsp;You do a find window and send WM_CLOSE to it, that&#8217;s all. &nbsp;You know how to do it. &nbsp;Quittting your own app from an installer is not a problem</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-622383">
				<div id="div-comment-622383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622383">
			April 22, 2008 at 12:26 pm</a>		</div>

		<p>&quot;It&#8217;s Your app. &nbsp;You do a find window and send WM_CLOSE to it, that&#8217;s all. &nbsp;You know how to do it. &nbsp;Quittting your own app from an installer is not a problem&quot;</p>
<p>Especially if it&#8217;s running in a different session.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-622453">
				<div id="div-comment-622453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622453">
			April 22, 2008 at 1:23 pm</a>		</div>

		<p>@Ulric:</p>
<p>Like I said, this is not a practical problem for this particular case. I already told the installer to send WM_CLOSE to a hidden window and the app interprets that to mean it should quit. It works. Having done that, I still have some concerns about the fact that every app which needs to be quit programmatically must come up with its own protocol. Details above.</p>
<p>But, to respond to your exclamation, someone asked why I want the installer to quit my app. I responded that the installer can&#8217;t replace the app&#8217;s file while the app is running. I&#8217;m not sure how or why that&#8217;s a straw man. It&#8217;s merely background information. It wasn&#8217;t intended as an argument for or against anything, and I&#8217;m not sure why you took it that way.</p>
<p>Really, I jumped in here to ask if anyone knew a generic message app A could send to app B to tell app B to quit. It seems odd to me that such a message does not exist. I&#8217;m not sure why that makes people so argumentative. Oh, wait; I forgot; it&#8217;s the internet; sorry; my bad. I am starting to feel like RC must feel every day.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-622673">
				<div id="div-comment-622673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arthur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622673">
			April 22, 2008 at 4:58 pm</a>		</div>

		<p>Before the mystery of “Why the Visual Studio debugger occasionally locks up the entire Windows GUI” was solved (<a rel="nofollow" target="_new" href="http://www.virtualdub.org/blog/pivot/entry.php?id=118" rel="nofollow">http://www.virtualdub.org/blog/pivot/entry.php?id=118</a>) I would keep and instance notepad with a dirty document running. &nbsp;</p>
<p>Since logging off was the only command that worked I could use it to kill VisualStudio but prevent having to completely log off and back on again by selecting Cancel when notepad prompted to save changes. &nbsp; This worked well as a way to abort the log off once it was started.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-622713">
				<div id="div-comment-622713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622713">
			April 22, 2008 at 6:45 pm</a>		</div>

		<p>@reader:</p>
<p>&quot;Anyway, it&#8217;s probably a better idea to train the user to save their work frequently if they&#8217;re using an app that doesn&#8217;t have an auto-save feature.&quot;</p>
<p>Auto-save can be a battery killer on a laptop if it has to spin-up an otherwise idle drive. &nbsp;Power management isn&#8217;t a flashy &quot;back of the box&quot; feature, but it&#8217;s still a tax that we should try to pay.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-622783">
				<div id="div-comment-622783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622783">
			April 22, 2008 at 8:50 pm</a>		</div>

		<p>&quot;I jumped in here to ask if anyone knew a generic message app A could send to app B to tell app B to quit. It seems odd to me that such a message does not exist.&quot;</p>
<p>Remember, Windows is not Mac OS. Windows does not have the same concept of an &quot;application&quot; like Mac OS does.</p>
<p>In Windows, windows are the target of all interactions. You can&#8217;t send a &quot;quit application&quot; to a window, because you don&#8217;t know what &quot;application&quot; that window may belong to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-622853">
				<div id="div-comment-622853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-622853">
			April 23, 2008 at 12:54 am</a>		</div>

		<p>@Dean:</p>
<p>Of course.</p>
<p>You write that, though, as if it&#8217;s a sacred axiom, as if there&#8217;s some value to its ideological purity, as if it&#8217;s something more than a general organizing principal or &#8212; heavens &#8212; a mere implementation detail.</p>
<p>As well, technically speaking, it isn&#8217;t quite true; functions such as GetWindowThreadProcessId and GetModuleFileNameEx do exist, so you CAN tell which app owns a window, though that doesn&#8217;t give you a single target for a message.</p>
<p>Ultimately, though, all I was looking for was a message which worked like sort of a hybrid of WM_QUERYENDSESSION and WM_ENDSESSION explicitly documented for use by applications. I can accept that it doesn&#8217;t exist, and all I really expect after that is to be able to say it seems funny to me that it doesn&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-623023">
				<div id="div-comment-623023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-623023">
			April 23, 2008 at 11:49 am</a>		</div>

		<p>[And what if the program calls IAmAskingTheUser and then hangs inside its dialog? (E.g., it wants to show an icon in the dialog, and the icon resides on a server that is down.) And just because a program is calling GetMessage doesn&#8217;t mean that it&#8217;s waiting for the user. It might be waiting for a remoted COM object. This happens more often than you think. We&#8217;re back to the question, &#8220;Are false positives and false negatives acceptable?&#8221; -Raymond]</p>
<p>OS X solves this problem. &nbsp;Apps are considered to have &#8220;hung&#8221; when they stop processing events. &nbsp;Apps displaying modal dialogs still respond to events, so the OS knows they haven&#8217;t crashed.</p>
<p>This whole issue is trivially solved. &nbsp;Only MS&#8217;s steadfast devotion to keeping old APIs alive stops them from cleaning up this part of the OS.</p>
<div class="post">[<i>A thread waiting for a remoted COM object is processing events (messages). It&#8217;s just selective about which ones it chooses to act on until the COM object finishes. (I leave it as an open issue whether a solution that breaks existing programs is &#8220;trivial&#8221;.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-623063">
				<div id="div-comment-623063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-623063">
			April 23, 2008 at 12:20 pm</a>		</div>

		<p>A thread waiting for a slow COM object is the same case as the user ignoring a save query. &nbsp;The thread tells the OS it needs more time, but at some point the OS may have to issue an ultimatum.</p>
<p>I don&#8217;t see how giving the OS and user more information breaks old programs.</p>
<div class="post">[<i>But the proposal as I understood it was &#8220;Don&#8217;t display the <u>This program is not shutting down properly</u> dialog if it&#8217;s waiting for the user.&#8221; As you noted, a slow COM object looks like a program waiting for the user. Therefore, a program stuck on a slow COM object wouldn&#8217;t display the <u>This program it not shutting down properly</u> dialog. Is that an acceptable false negative? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-623193">
				<div id="div-comment-623193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://http:://myfirstrealcsharproject.blogspot.com' rel='external nofollow' class='url'>peterchen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-623193">
			April 23, 2008 at 2:42 pm</a>		</div>

		<p>Perfect timing to bring this point to my attention. A very random and quirky data loss problem was fixed today.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-623213">
				<div id="div-comment-623213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-623213">
			April 23, 2008 at 2:53 pm</a>		</div>

		<p>From my perspective, all non-trivial false negatives are acceptable because sometimes an OS vendor should let customers demand fixes from developers. This is the approach Mac OS has always taken. Windows can&#8217;t do this (now) because there are plenty of buggy apps out there which are part of workflows which rely on apps being forcibly quit and will never be fixed because nobody has the source. It was a mistake for Windows to ever start forcibly quitting apps on logout, but the mistake&#8217;s well and truly made now and there&#8217;s no use in agonizing over it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-624343">
				<div id="div-comment-624343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Name required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080421-00/?p=22663#comment-624343">
			April 27, 2008 at 7:20 am</a>		</div>

		<p>Just make the killing dialog transparent</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

