<html>
<head>
<title>What happens to a sent message when SendMessageTimeout reaches its timeout?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What happens to a sent message when SendMessageTimeout reaches its timeout?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 15, 2011 / year-entry #221</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The Send­Message­Timeout function tries to send a message, but gives up if the timeout elapses. What exactly happens when the timeout elapses? It depends. The first case is if the receiving thread never received the message at all. (I.e., if during the period the sender is waiting, the receiving thread never called GetMessage, PeekMessage, or...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The <code>Send&shy;Message&shy;Timeout</code> function tries to send a message, but gives up if the timeout elapses. What exactly happens when the timeout elapses?</p>
<p> It depends. </p>
<p> The first case is if the receiving thread never received the message at all. (I.e., if during the period the sender is waiting, the receiving thread never called <code>GetMessage</code>, <code>PeekMessage</code>, or a similar message-retrieval function which dispatches inbound sent messages.) In that case, if the timeout is reached, then the entire operation is canceled; the window manager cleans up everything and makes it look as if the call to <code>SendMessageTimeout</code> never took place. The message is removed from the list of the thread's non-queued messages, and when it finally gets around to calling <code>GetMessage</code> (or whatever), the message will not be delivered. </p>
<p> The second case is if the receiving thread received the message, and the message was delivered to the destination window procedure, but the receiving thread is just slow to process the message and either return from its window procedure or call <code>Reply&shy;Message</code>. In that case, if the timeout is reached, then the sender is released from waiting, but the message is allowed to proceed to completion. </p>
<p> Since people seem to like tables, here's a timeline showing the two cases. </p>
<table rules="groups" border="1" bordercolor="black" style="border-collapse: collapse" cellpadding="3">
<colgroup>
<col></colgroup>
<colgroup>
<col></colgroup>
<colgroup>
<col></colgroup>
<tr>
<th>Sending thread</th>
<th>Case 1</th>
<th>Case 2</th>
</tr>
<tr>
<td><code>SendMessageTimeout(WM_X)</code> called</td>
<td>... not responding ...</td>
<td>... not responding ...</td>
</tr>
<tr>
<td></td>
<td>... not responding ...</td>
<td>... not responding ...</td>
</tr>
<tr>
<td></td>
<td>... not responding ...</td>
<td><code>GetMessage()</code> called</td>
</tr>
<tr>
<td></td>
<td>... not responding ...</td>
<td><code>WndProc(WM_X)</code> called</td>
</tr>
<tr>
<td></td>
<td>... not responding ...</td>
<td><code>WndProc(WM_X)</code> still executing</td>
</tr>
<tr>
<td>timeout elapses</td>
<td>... not responding ...</td>
<td><code>WndProc(WM_X)</code> still executing</td>
</tr>
<tr>
<td><code>SendMessageTimeout(WM_X)</code> returns</td>
<td>... not responding ...</td>
<td><code>WndProc(WM_X)</code> still executing</td>
</tr>
<tr>
<td></td>
<td>... not responding ...</td>
<td><code>WndProc(WM_X)</code> returns</td>
</tr>
<tr>
<td></td>
<td><code>GetMessage()</code> called</td>
<td></td>
</tr>
<tr>
<td></td>
<td>(message <code>WM_X</code> <i>not</i> received)</td>
<td></td>
</tr>
</table>
<p> Notice that in case&nbsp;2, the window manager has little choice but to let the window procedure continue with the message. After all, time travel has yet to be perfected, so the window manager can't go back in time and tell the younger version of itself, (Possibly with a <a href="https://www.youtube.com/watch?v=ZDkdD3jwAS4"> slow-motion "Nooooooooooooo"</a> for dramatic effect.) "No, don't give him the message; he won't finish processing it in time!" </p>
<p> If you are in case&nbsp;2 and the message <code>WM_X</code> is a system-defined message that is subject to marshaling, then the data is not unmarshaled until the window procedure  returns. It would be bad to free the memory out from under a window procedure. On the other hand, if the message is a custom message, then you are still on the hook for keeping the values valid until the window procedure is done. </p>
<p> But wait, how do I know when the window procedure is done? The <code>Send&shy;Message&shy;Timeout</code> function doesn't tell me! Yup, that's right. If you need to do cleanup after message processing is complete, you should use the <code>Send&shy;Message&shy;Callback</code> function, which calls you back when the receiving thread completes message processing. When the callback fires, that's when you do your cleanup. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-935463">
				<div id="div-comment-935463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darth Vader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643#comment-935463">
			September 15, 2011 at 7:54 am</a>		</div>

		<p>Sadly that YouTube video seems to be devoid of content. &nbsp;Fortunately, I have a replacement: <a rel="nofollow" target="_new" href="http://www.youtube.com/watch?v=WWaLxFIVX1s" rel="nofollow">http://www.youtube.com/watch</a> .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-935483">
				<div id="div-comment-935483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643#comment-935483">
			September 15, 2011 at 8:07 am</a>		</div>

		<p>@Darth Vader: &nbsp;Worked fine for me&#8211;it&#39;s a clip from Torchwood.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-935533">
				<div id="div-comment-935533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643#comment-935533">
			September 15, 2011 at 8:31 am</a>		</div>

		<p>@Chris S:</p>
<p>One way of looking at it is that you shouldn&#39;t need a timeout or an asynch callback. &nbsp;You shouldn&#39;t be sending a message to a guy you don&#39;t trust enough to actually process the message in a timely manner.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-935583">
				<div id="div-comment-935583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643#comment-935583">
			September 15, 2011 at 8:48 am</a>		</div>

		<p>@nksingh:</p>
<p>By that logic the window messaging system can&#39;t ever be used when a response it required because you can never be sure that the program doesn&#39;t have any bugs that will cause it to hang.</p>
<p>I actually have this problem at the moment where I have to communicate with a third-party program via window messages, and it has a tendency to hang periodically which causes me problems. I&#39;m still trying to come up with a solution I like.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-935603">
				<div id="div-comment-935603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643#comment-935603">
			September 15, 2011 at 8:56 am</a>		</div>

		<p>@Chris S: &nbsp;Can you not use your own timer?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-935613">
				<div id="div-comment-935613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643#comment-935613">
			September 15, 2011 at 8:57 am</a>		</div>

		<p>@Chris: Right, it&#39;s no different from any other IPC or RPC mechanism. &nbsp;You can&#39;t send an HTTP request to a web server and trust that it will process the request in a timely manner &#8212; you just have to hope it does, and provide a useful fallback when it doesn&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-935633">
				<div id="div-comment-935633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643#comment-935633">
			September 15, 2011 at 9:03 am</a>		</div>

		<p>@Rick C:</p>
<p>Yes, and I am. Problem is, I&#39;ve got no way of knowing if the program will ever receive my message, so the shared memory I said it could use is basically tainted until the other program decides to respond, if that ever happens.</p>
<p>It would be nice if I could replace the whole thing with a pipe based message queue, but this is a legacy system that I can&#39;t change, so I&#39;m pretty much stuck.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-935653">
				<div id="div-comment-935653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643#comment-935653">
			September 15, 2011 at 9:11 am</a>		</div>

		<p>@Chris S:</p>
<p>There&#39;s not much you can do about a legacy system, sadly. Given that Windows has progressed a bit since the early days, for new programs Window Messages should not be used for IPC.</p>
<p>All I can say is that I hope you&#39;re communicating to that third-party program via a supported interface and not hacking an interface into that program through some window message tricks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-935663">
				<div id="div-comment-935663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643#comment-935663">
			September 15, 2011 at 9:18 am</a>		</div>

		<p>@nksingh:</p>
<p>No, this is the official interface that everyone must use. Pretty much every other program that uses the interface will hang the UI if the other program hangs. I&#39;m trying to be a bit smarter about how I use it, but it&#39;s difficult because the window messaging system clearly wasn&#39;t designed to be used asynchronously.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-935693">
				<div id="div-comment-935693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643#comment-935693">
			September 15, 2011 at 9:54 am</a>		</div>

		<p>@Chris: The window messaging system was most definitely designed to be used asynchronously. &nbsp;That&#39;s what <code>PostMessage</code> is all about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-935703">
				<div id="div-comment-935703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643#comment-935703">
			September 15, 2011 at 9:57 am</a>		</div>

		<p>@Ben Voigt:</p>
<p>Sorry, I meant where a response is required, as is in what I&#39;m doing. SendMessageCallback() is a bit limited, and there is no way to cancel requests.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-935513">
				<div id="div-comment-935513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643#comment-935513">
			September 15, 2011 at 8:23 am</a>		</div>

		<p>What if you need a timeout *and* and asynchronous callback though? There doesn&#39;t seem to be any way to do that as far as I can tell.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-935863">
				<div id="div-comment-935863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110915-00/?p=9643#comment-935863">
			September 16, 2011 at 1:51 am</a>		</div>

		<p>Couldn&#39;t you just sandbox an instance of the app and simulate the message receiving? &quot;according to simulations, this app answers rapidly to messages&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

