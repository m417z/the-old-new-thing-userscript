<html>
<head>
<title>How can I detect whether the Game Bar is covering my window?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I detect whether the Game Bar is covering my window?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 29, 2016 / year-entry #135</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A little interop.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://windows.microsoft.com/en-us/windows-10/open-game-bar">
Pressing the <kbd>Win</kbd>+<kbd>G</kbd> hotkey
opens the Game Bar</a>,
which lets you record game clips and screenshots.
Actually, I use it a lot even for programs that aren't games:
<!-- backref: I finally finished this awesome game called Photoshop, let me send you a video -->
It's great for taking video clips of a bug</a>.
</p>
<p>
Anyway, maybe you have a program that wants to know when the Game Bar
is on screen.
For example, if you're a game, you may want to pause the game
automatically when the user is trying to configure their screen capture.
</p>
<p>
If you are writing a Store app,
you can register for Game Bar events.
Here's the short version for C# apps:
</p>
<pre>
if (Windows.Gaming.UI.GameBar.Visible) {
  the game bar is visible;
}

if (Windows.Gaming.UI.GameBar.IsInputRedirected) {
  the game bar has input;
}

Windows.Gaming.UI.GameBar.VisibilityChanged +=
    (s, e) => { the visibility changed };
Windows.Gaming.UI.GameBar.IsInputRedirectedChanged +=
    (s, e) => { the input state changed };
</pre>
<p>
(Of course, you can avoid having to type
<code>Windows.<wbr>Gaming.<wbr>UI</code> all the time
by using the <code>using</code> statement,
but I'm writing it out just to make it explicit
what's going on.)
</p>
<p>
If you are a desktop app,
you will have to talk to the ABI.
It's not too difficult,
although it is a bit more tedious.
</p>
<p>
Continuing our crash course in projection:
</p>
<table BORDER=1 BORDERCOLOR=black CELLPADDING=3
    style="border-collapse: collapse">
<tr>
<th></th>
<th>Call static method</th>
</tr>
<tr>
<th>ABI</th>
<td><code>IWidgetStatics* widgetStatics;<br>
    GetActivationFactory(L"Widget", &amp;widgetStatics);<br>
    widgetStatics-&gt;Foo();</code></td>
</tr>
<tr>
<th>C++/CX</th>
<td><code>Widget::Foo();</code></td>
</tr>
<tr>
<th>C#</th>
<td><code>Widget.Foo();</code></td>
</tr>
<tr>
<th>JavaScript</th>
<td><code>Widget.foo();</code></td>
</tr>
</table>
<p>
At the ABI level,
static members of a Windows Runtime class are represented
as
<a HREF="https://blogs.msdn.microsoft.com/vcblog/2012/10/19/ccx-part-4-of-n-static-member-functions/">
instance members of
the class's activation factory</a>.
By convention,
the interface name for static members is the runtime class name,
followed by the word
<code>Statics</code>.
</p>
<p>
Okay, we now know just enough to be dangerous.
Start with
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20030723-00/?p=43073">
the scratch program</a>
and make these changes.
(Remember, Little Programs do little to no error checking.)
</p>
<pre>
<font COLOR=blue>#include &lt;wrl/client.h&gt;
#include &lt;wrl/event.h&gt;
#include &lt;wrl/wrappers/corewrappers.h&gt;
#include &lt;windows.gaming.ui.h&gt;
#include &lt;EventToken.h&gt;
#include &lt;tchar.h&gt; // Huh? Why are you still using ANSI?

namespace WRL = Microsoft::WRL;
namespace awf = ABI::Windows::Foundation;
namespace gameui = ABI::Windows::Gaming::UI;

WRL::ComPtr&lt;gameui::IGameBarStatics&gt; g_gameBarStatics;
boolean g_isVisible;
boolean g_isInputRedirected;
EventRegistrationToken g_tokenVisibility;
EventRegistrationToken g_tokenInput;</font>
</pre>
<p>
After including a few header files and declaring some namespace
aliases,
we create a few global variables to keep track of our state.
In a real program, these would probably be instance
members of some C++ class,
but I'm being lazy.
</p>
<pre>
<font COLOR=blue>void CheckGameBarVisibility(HWND hwnd)
{
    boolean isVisible;
    g_gameBarStatics-&gt;get_Visible(&amp;isVisible);
    if (g_isVisible != isVisible)
    {
        g_isVisible = isVisible;
        InvalidateRect(hwnd, nullptr, TRUE);
    }
}

void CheckGameBarInput(HWND hwnd)
{
    boolean isInputRedirected;
    g_gameBarStatics-&gt;get_IsInputRedirected(&amp;isInputRedirected);
    if (g_isInputRedirected != isInputRedirected)
    {
        g_isVisible = isVisible;
        InvalidateRect(hwnd, nullptr, TRUE);
    }
}</font>
</pre>
<p>
These two little functions read the current visibility
and input redirection states of the game bar,
and if they changed,
we invalidate the window.
<!-- backref: Using the Windows::Globalization::Calendar object from a Win32 app -->
We learned about property access a little while ago</a>.
In our case, the properties are static,
so the property accessors live on the <code>Statics</code> interface.
</p>
<pre>
BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
  <font COLOR=blue>Windows::Foundation::GetActivationFactory(WRL::Wrappers::HStringReference(
    RuntimeClass_Windows_Gaming_UI_GameBar).Get(), &amp;g_gameBarStatics);

  auto visibilityHandler = WRL::Callback&lt;awf::IEventHandler&lt;IInspectable*&gt;&gt;(
    [hwnd](IInspectable*, IInspectable*)
    {
      CheckGameBarVisibilty(hwnd);
      return S_OK;
    });
  g_gamebarStatics-&gt;add_VisibilityChanged(visibilityHandler.Get(), &amp;g_tokenVisibility);

  auto inputHandler = WRL::Callback&lt;awf::IEventHandler&lt;IInspectable*&gt;&gt;(
    [hwnd](IInspectable*, IInspectable*)
    {
      CheckGameBarInput(hwnd);
      return S_OK;
    });
  g_gamebarStatics-&gt;add_IsInputRedirectedChanged(inputHandler.Get(), &amp;g_tokenInput);

  CheckGameBarVisibility(hwnd);
  CheckGameBarInput(hwnd);</font>
  return TRUE;
}
</pre>
<p>
We create the game bar statics by asking for
the <code>IGameBarStatics</code> interface
from the activation factory.
From there, we register two event handlers,
one to be called when the visibility changes,
and another to be called when input redirection changes.
In both cases, we respond to the event by checking
the new visiblity or input redirection state.
</p>
<p>
After registering the handlers, we manually check
the visibility and input to get the initial values
set up properly.
</p>
<pre>
void
OnDestroy(HWND hwnd)
{
  <font COLOR=blue>g_gameBar-&gt;remove_VisibilityChanged(g_tokenVisibility);
  g_gameBar-&gt;remove_IsInputRedirectedChanged(g_tokenInput);
  g_gameBar.Reset();</font>
  PostQuitMessage(0);
}
</pre>
<p>
Naturally, we need to clean up when we're done.
</p>
<pre>
void
PaintContent(HWND hwnd, PAINTSTRUCT *pps)
{
  <font COLOR=blue>PCTSTR visibleMessage =
    g_isVisible ? TEXT("GameBar is visible")
                : TEXT("GameBar is not visible");

  TextOut(pps-&gt;hdc, 0, 0, visibleMessage, _tcslen(visibleMessage));

  PCTSTR inputMessage =
    g_isInputRedirected ? TEXT("GameBar has taken input")
                        : TEXT("GameBar does not have input");

  TextOut(pps-&gt;hdc, 0, 20, inputMessage, _tcslen(inputMessage));</font>
}
</pre>
<p>
Our <code>Paint&shy;Content</code> function prints the current
state of the game bar: Is it visible?
Does it have input?
</p>
<p>
And that's it.
Run this program,
press the
<kbd>Win</kbd>+<kbd>G</kbd> hotkey
to call up the game bar,
and observe that the program updates its window to reflect
the game bar state.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-jeremytais even thread-even depth-1 parent" id="comment-1254325">
				<div id="div-comment-1254325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254325">
			June 29, 2016 at 7:07 am</a>		</div>

		<p>Am I the only one who feels vaguely guilty &#8212; like I am lying under oath &#8212; when I check the &#8220;I solemnly swear that &#8216;Visual Studio&#8217; is a game&#8221; checkbox that appears when you press Win+G?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1254405">
				<div id="div-comment-1254405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254405">
			June 29, 2016 at 8:07 am</a>		</div>

		<p>It&#8217;s hard to really nail down a good definition for &#8220;game&#8221;. I&#8217;ve heard good arguments for things like Stack Overflow and even Facebook as each being a &#8220;game&#8221; by some reasonable definitions. I see no reason why Visual Studio couldn&#8217;t be a game.</p>
<p>Especially as sometimes one has a tough time with the boss fightsâ€¦</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1254435">
				<div id="div-comment-1254435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Puetz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254435">
			June 29, 2016 at 9:27 am</a>		</div>

		<p>I&#8217;m not seeing a problem here &#8211; VS even has achievements! <a href="https://channel9.msdn.com/achievements/visualstudio" rel="nofollow">https://channel9.msdn.com/achievements/visualstudio</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1254505">
				<div id="div-comment-1254505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254505">
			June 29, 2016 at 10:42 pm</a>		</div>

		<p>And, of course, the achievements you can earn &#8211; <a href="https://channel9.msdn.com/achievements/visualstudio" rel="nofollow">https://channel9.msdn.com/achievements/visualstudio</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1254335">
				<div id="div-comment-1254335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254335">
			June 29, 2016 at 7:11 am</a>		</div>

		<p>Sorry &#8211; pet peeve of mine &#8211; &#8220;&#8230; by using the using statement&#8221;. No, you cannot. The using statement is used to clean up resources by calling Dispose at the end of its embedded statement. You can simplify your use of namespaces by using a using directive.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1254365">
				<div id="div-comment-1254365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://programmerman.net/' rel='external nofollow' class='url'>Nick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254365">
			June 29, 2016 at 7:50 am</a>		</div>

		<p>There are two uses of the using keyword in C#. Raymond is referring to the one where you declare you&#8217;re using namespaces at the top of the file, like using System; or using System.Linq;.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1254385">
				<div id="div-comment-1254385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://programmerman.net/' rel='external nofollow' class='url'>Nick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254385">
			June 29, 2016 at 7:54 am</a>		</div>

		<p>Oh I see now, sorry.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-even depth-1 parent" id="comment-1254345">
				<div id="div-comment-1254345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254345">
			June 29, 2016 at 7:23 am</a>		</div>

		<p>No dice roll on the ComPtr class? My problem with all of this is that if I go to MSDN.com and search for &#8220;IGameBarStatics&#8221; I get zero results. MSDN assumes that nobody uses plain C++ anymore.</p>
<p>Also, you can just change _tcslen to lstrlen and the tchar.h issue would go away although it is the only thing in this post that is still the oldnewthing ;)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1254425">
				<div id="div-comment-1254425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254425">
			June 29, 2016 at 9:03 am</a>		</div>

		<p>Yeah, you have to balance between knowing the ABI and the projection to get the documentation on these things. It is easy enough to piece things together from the headers, but having to look through the headers is the problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tautvydas-zilys odd alt depth-2" id="comment-1254666">
				<div id="div-comment-1254666" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Tautvydas+Zilys' rel='external nofollow' class='url'>Tautvydas Zilys</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254666">
			June 30, 2016 at 9:53 am</a>		</div>

		<p>When I need to find documentation for it, I usually fire up ILSpy and open Windows.winmd with it (with Windows 10 SDK it&#8217;s in UnionMetadata folder). You can observe all the interface names, including aggregation, activation and static factories there, along with name overloading too.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1254415">
				<div id="div-comment-1254415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mackenzie Zastrow</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254415">
			June 29, 2016 at 8:53 am</a>		</div>

		<p>Can you do the same from C# if you&#8217;re not writing a Store app? </p>
<p>I know there&#8217;s <a href="https://github.com/kennykerr/modern" rel="nofollow">https://github.com/kennykerr/modern</a> for C++, I wonder if there&#8217;s something for C#.  (I tried searching, but couldn&#8217;t find anything).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1254445">
				<div id="div-comment-1254445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254445">
			June 29, 2016 at 10:40 am</a>		</div>

		<p>Ah, but now you cannot film the heisenbug that happens only in the &#8220;game bar not shown&#8221; branch!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1254455">
				<div id="div-comment-1254455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254455">
			June 29, 2016 at 11:13 am</a>		</div>

		<p>If a developer wanted to take the stance that their software is not a game or that the developer did not want anything more than just a screen shot taken of the software, these techniques would make it trivial to stop the recording.  Simply minimize the software, make the windows invisible, etc.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1254485">
				<div id="div-comment-1254485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254485">
			June 29, 2016 at 7:18 pm</a>		</div>

		<p>Hey check out this great game called Remote Desktop.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1254525">
				<div id="div-comment-1254525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254525">
			June 30, 2016 at 1:12 am</a>		</div>

		<p>Don&#8217;t give evil people ideas ! :o</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1254495">
				<div id="div-comment-1254495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254495">
			June 29, 2016 at 10:15 pm</a>		</div>

		<p>Thank you for writing out the namespace, Raymond. I get really annoyed when I&#8217;m looking for hints how to do stuff on the internet, and people post some code without any namespaces in it at all (also no Using stateme&#8230; uh directives). Trying to figure out all the namespaces for their stuff is &#8230; bleh.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1255435">
				<div id="div-comment-1255435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RKZENITH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1255435">
			July 7, 2016 at 11:03 am</a>		</div>

		<p>Agreed.  That using directive is one of the worst design decisions on the language side of .NET.  It allows poor developers, who hardly understand the code while writing it, to take shortcuts that make it more difficult for even skilled developers during subsequent maintenance cycles.  For every second saved by not typing out just enough for Intellisense to pick up what you were going for, an hour is squandered trying to figure out _which_ namespace some random object is coming from.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1254515">
				<div id="div-comment-1254515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254515">
			June 30, 2016 at 12:46 am</a>		</div>

		<p>I&#8217;d like to use the GameBar&#8217;s ability to take screenshot of fullscreen games via an API (preferably in a .NET C# app), but I have a hard time figuring out if it is possible. It seems it isn&#8217;t. Or at least, it isn&#8217;t documented.</p>
<p>All the examples I can find are :<br />
&#8211; using GDI+ to take a screenshot of the desktop (which usually results in a black screenshot)<br />
&#8211; using Windows.Media.Capture.ScreenCapture (only available on Windows Phone 8.1 :()<br />
&#8211; using convoluted DirectX hooking APIs Ã  la Fraps. Seems overly complicated. I&#8217;d like to avoid that.<br />
&#8211; using the Windows Media 9 Screen Capture codec&#8230; Hum, I don&#8217;t think it&#8217;s what I want. Plus, it&#8217;s very old.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1254545">
				<div id="div-comment-1254545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254545">
			June 30, 2016 at 4:29 am</a>		</div>

		<p>Now this is a new level of API uglyness.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1254595">
				<div id="div-comment-1254595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254595">
			June 30, 2016 at 7:46 am</a>		</div>

		<p>That&#8217;s because we&#8217;re using the raw ABI, which as another commenter noted, was not intended for human consumption. Humans are intended to use one of the projections, such as C++/CX or Modern C++.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-tautvydas-zilys even depth-3 parent" id="comment-1254665">
				<div id="div-comment-1254665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Tautvydas+Zilys' rel='external nofollow' class='url'>Tautvydas Zilys</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254665">
			June 30, 2016 at 9:51 am</a>		</div>

		<p>Now, if that was the case, wouldn&#8217;t projections be available for desktop applications (and their requirements like dynamic loading) too? :)</p>
<p>We had to write a whole lot of raw ABI code since our application still works on Windows XP, but we wanted to enable additional functionality if you happen to run on Windows 10 (e. g. Speech Recognition). That code is all shared with WinRT application version too. C++/CX doesn&#8217;t really allow your binary to work on XP.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1254695">
				<div id="div-comment-1254695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254695">
			June 30, 2016 at 1:42 pm</a>		</div>

		<p>@Tautvydas Zilys Could you refactor the platform specific functionality into its own DLL compiled with C++/CX, and then dynamically load the dlls based on platform?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-tautvydas-zilys even depth-5" id="comment-1254836">
				<div id="div-comment-1254836" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Tautvydas+Zilys' rel='external nofollow' class='url'>Tautvydas Zilys</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254836">
			July 1, 2016 at 1:25 pm</a>		</div>

		<p>Well, that was one of the options we considered, but we went against it because we would have to invent a C API for all of the interop with the DLL (or something like COM, which would kinda defeat the purpose) as we&#8217;d have to link the DLL against different CRT (our main app is still built with VS2010). We went with pure COM approach since we thought that would allow us to write less code. Error handling is super annoying in C++/CX anyway, so it&#8217;s not like it was that much harder. I think we made the right call. I just thought it was funny that Raymond claimed that those APIs are not meant for human consumption.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1254725">
				<div id="div-comment-1254725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254725">
			June 30, 2016 at 4:37 pm</a>		</div>

		<p>Meh, if you&#8217;re still targeting an unsupported version of the OS then you might have to put up with some ugliness as a trade-off. Like cross platform code. You could roll your own projection or adapter or whatevs.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1254715">
				<div id="div-comment-1254715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160629-00/?p=93775#comment-1254715">
			June 30, 2016 at 3:23 pm</a>		</div>

		<p>Why doesn&#8217;t the game bar work with my mfc application? It comes up and I can press record but it says &#8220;Nothing to record. Play some more&#8221; after several seconds.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

