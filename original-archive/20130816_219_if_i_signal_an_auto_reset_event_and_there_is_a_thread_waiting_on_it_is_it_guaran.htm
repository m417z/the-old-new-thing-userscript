<html>
<head>
<title>If I signal an auto-reset event and there is a thread waiting on it, is it guaranteed that the event will be reset and the waiting thread released before SetEvent returns?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If I signal an auto-reset event and there is a thread waiting on it, is it guaranteed that the event will be reset and the waiting thread released before SetEvent returns?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 16, 2013 / year-entry #220</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Let's go straight to the question: I have two programs that take turns doing something. Right now, I manage the hand-off with two auto-reset events. In Thread A, after it finishes doing some work, it signals Event B and then immediately waits on Event A. Thread B does the converse: When its wait on Event B completes, it does some...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Let's go straight to the question:
</p>
<blockquote CLASS=q>
<p>
I have two programs that take turns doing something.
Right now, I manage the hand-off with two auto-reset events.
In Thread&nbsp;A,
after it finishes doing some work, it
signals Event&nbsp;B and then immediately waits on
Event&nbsp;A.
Thread&nbsp;B does the converse:
When its wait on Event&nbsp;B completes, it does some work,
then signals Event&nbsp;A and then immediately waits
on Event&nbsp;B.
</p>
<p>
This works great, but I'm wondering if I can save myself
an event and use the same event to hand control back and forth.
Is it guaranteed that when Thread&nbsp;A signals Event&nbsp;B,
that this will release Thread&nbsp;B and reset the event
(since it is auto-reset) before the call to
<code>Set&shy;Event</code> returns?
If so, then I can just have one event and use it to bounce
control back and forth.
</p>
</blockquote>
<p>
Let's try it!
</p>
<pre>
<i>#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;

HANDLE h;
DWORD CALLBACK ThreadProc(void *msg)
{
 for (;;) {
  SetEvent(h);
  // The theory is that the above SetEvent does not return
  // until the other thread has positively completed its wait,
  // so this upcoming wait will not complete until the other
  // thread calls SetEvent.
  WaitForSingleObject(h, INFINITE);
  puts((LPSTR)msg);
 }
}

int __cdecl main(int, char**)
{
 DWORD id;
 h = CreateEvent(0, FALSE, TRUE, 0);
 CloseHandle(CreateThread(0, 0, ThreadProc, "T1", 0, &id));
 CloseHandle(CreateThread(0, 0, ThreadProc, "T2", 0, &id));
 Sleep(INFINITE);
 return 0;
}
</i></pre>
<p>
If you run this program,
you'll see that the two threads come nowhere near taking turns.
Instead, you see stretches where
thread&nbsp;T1 gets to run a whole bunch of iterations
in a row, and stretches where
thread&nbsp;T2 gets to run a whole bunch of iterations in a row.
</p>
<p>
Okay, so we have demonstrated by experiment that this technique
does not work.
(You can use experimentation to show that something doesn't always work,
but you can't use it to show that something always <i>will</i> work.
For that you need to read some contracts and put on your thinking
cap.)
But why doesn't it work?
</p>
<p>
The lawyerly explanation for why it doesn't work is that there
is nothing in the contract that says that it <i>does</i> work.
Perfectly correct, but not particularly insightful.
</p>
<p>
Signaling an event makes all waiting threads eligible to run,
but that doesn't mean that they actually <i>will</i> run.
One of the waiting threads is woken to say
"Hey, now's your chance."
But that thread might be groggy and slow to wake,
and in the meantime, another thread can swoop in and steal the event signal.
And then that groggy thread shuffles downstairs to the breakfast
table to find that somebody ate his pancake.
(Actually, in principle, the kernel could just make it a total free-for-all
and wake <i>all</i> the waiting threads, but I suspect it just picks one.)
</p>
<p>
We saw earlier that the thread that you would expect to run next
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/01/05/346888.aspx">
might be temporarily unavailable and miss its chance to claim
what it thinks is rightfully his</a>.
And more recent versions of Windows have exacerbated the problem
by
<a HREF="http://www.bluebytesoftware.com/blog/PermaLink,guid,e40c2675-43a3-410f-8f85-616ef7b031aa.aspx">
abandoning fairness</a>
in order to improve throughput
and avoid lock convoys.
Now, in principle, the kernel could have reset the event when it woke
the waiting thread, thereby assigning the wake to the thread at signal time,
but that would have reintroduced the problem that unfairness was trying to
solve.
</p>
<p>
The irony here is that what you're doing here is
intentionally trying to <i>create</i> a convoy,
and you're running into the scheduler's convoy-resistance.
</p>
<p>
Just use the two-event pattern.
That makes it explicit what you want.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1073233">
				<div id="div-comment-1073233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TripShock</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483#comment-1073233">
			August 16, 2013 at 7:49 am</a>		</div>

		<p>The two event approach is the right way to go, and just in case they don&#39;t know already, they should be using SignalObjectAndWait, instead of SetEvent followed by WaitForSingleObject, which could be inefficient.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1073243">
				<div id="div-comment-1073243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483#comment-1073243">
			August 16, 2013 at 8:28 am</a>		</div>

		<p>I&#39;m afraid Joe Duffy&#39;s article is (un)intentionally vague on the matter for what locks the convoy problem was solved, so it doesn&#39;t actually mean what you think it means.</p>
<p>The description matches the problem of simple kernel spinlocks. All contenders were simply busy-waiting on a pointer-sized variable, while on DISPATCH_LEVEL, which makes them ineligible for thread switch (interrupts could still happen). When the owner released the lock, a random contender would grab it and become the owner. No fairness whatsoever. Also, that would cause a lot of inter-socket cache coherency traffic, because InterlockedCompareExchange is implemented using cache coherency protocol. This is the main cost of such a spinlock, especially in systems with large number of processors.</p>
<p>Enter InStackQueued spinlocks, which Mr Duffy describes. Each contender busy-waits on its own local variable. The owner simply passes ownership to the next contender in the chain, in FIFO order, this guaranteeing fairness, and reducing cache coherency traffic. </p>
<p>The article confuses things by talking about threads. On DISPATCH_LEVEL and higher, there is no thread scheduling. Spinlocks are owned by processors, not threads, because the spinlock owner or contender on DISPATCH is guaranteed to continue running without preemption (other than by ISRs) on the same processor until it drops to at APC_LEVEL or PASSIVE_LEVEL.</p>
<p>Waiting on kernel objects has been fair &#8211; all waiter threads are linked to a FIFO list. Mr Duffy&#39;s article refers to the old Raymond&#39;s article about CRITICAL_SECTIONS. Well, since contenders wait on an auto-reset event, the least recent one will be awaken. There is a scenario when a new contender will come and grab it before the fairly selected one will have a chance, but such is life.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1073263">
				<div id="div-comment-1073263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483#comment-1073263">
			August 16, 2013 at 2:42 pm</a>		</div>

		<p>I love all the insight you give us, but the windows shell irritates me by not just getting on with the job. Why can&#39;t explorer give us a file listing straight away, before it has figured out all the icons in a big listing. I feel long-time bloat in the shell even if is being very smart in ways I don&#39;t care about.</p>
<p>I do love your stories, and the things you tell me that make my life easier as a developer.</p>
<p>Sometimes I feel like I&#39;m fighting with bad design decisions. Maybe some of the were yours too &#8211; I don&#39;t know how much influence you have there. Trading cool for getting the job done.</p>
<p>Simpler means less bugs.</p>
<p>Rob. (With respect, but lots of fighting with the odd shell and other APIs that were just broken over the years).</p>
<div class="post">[<em>That&#39;s such a great idea, we did it 17 years ago. That&#39;s why you see the blank icons briefly. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1073273">
				<div id="div-comment-1073273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483#comment-1073273">
			August 16, 2013 at 2:52 pm</a>		</div>

		<p>And we are encouraged to talk to the shee rather than the core file APIs, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1073283">
				<div id="div-comment-1073283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483#comment-1073283">
			August 16, 2013 at 4:01 pm</a>		</div>

		<p>Rob,</p>
<p>Windows UI coding goes by spec. Some commitee comes with a spec, and then some clueless offshore programmers write code. Nobody makes sure the code actually does what the users want, other than running some benchmarks in the ivory tower. Need to refresh desktop icons cache? Redraw them all blank, and then rebuild the icon cache one by one and redraw them one by one. This makes SOO MUCH SENSE. Need to implement &quot;go back&quot; list in the Explorer? Keep ephemeral IDs in it, so if your network drives get reconnected, you cannot go back there. Opening a folder? enumerate into the child folders, who cares if it takes long, especially on network.</p>
<div class="post">[<em>Wait, you don&#39;t like the blank icons? You prefer that they be loaded synchronously with the content enumerator? Can you get in a room with Rob and decide once and for all whether icons should be loaded synchronously with the file listing or not? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1073293">
				<div id="div-comment-1073293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483#comment-1073293">
			August 16, 2013 at 9:38 pm</a>		</div>

		<p>One nice thing about File Manager was that even back in 1995 it could show a directory of tens of thousands of files nearly instantly. I often find myself wishing Explorer had a mode where it was as fast as FileMan by not opening files to look for icons or metadata.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1073323">
				<div id="div-comment-1073323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483#comment-1073323">
			August 17, 2013 at 8:06 am</a>		</div>

		<p>@Gabe: Grab an NT4 CD. winfile.exe is there and it still works. I used it to have a UAC-incompatible file manager back in the day.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1073333">
				<div id="div-comment-1073333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483#comment-1073333">
			August 17, 2013 at 8:53 am</a>		</div>

		<p>[Wait, you don&#39;t like the blank icons? You prefer that they be loaded synchronously with the content enumerator?]</p>
<p>Raymond, have you ever booted your Windows computer or installed any programs? (tricky question). When the desktop first shows up after login, it triggers icon cache refresh. It also happens if any program (mostly an installe3r) broadcasts WM_WININICHANGE.</p>
<p>Icon cache refresh is done the most retarded way possible, to cause the most visual disruption. They all are redrawn blank, and then redrawn with (99.9%) the same unchanged images.</p>
<p>Folder load is slow, partially because the programmers didn&#39;t think about how do it most efficient (it also affects how it shows total selected size). They seem to use only file names from WIN32_FIND_DATA. If Explorer wants to pull the localized folder names, it could use cached values, display all the child folders promptly, and then lazily confirm or update the cached values. That will make opening of remote folders VERY fast, unlike it&#39;s now.</p>
<div class="post">[<em>My icons don&#39;t refresh. I would suspect some program you installed. Some developers are lazy and force icon cache rebuilds in order to &quot;fix&quot; icon problems. (Going for the global solution to a local problem.) They are initially drawn blank because when the icon cache is destroyed and a new one created, the only icon initially available in the new icon cache is the blank icon. Or are you saying there should be an &quot;icon cache cache&quot;? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1073343">
				<div id="div-comment-1073343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483#comment-1073343">
			August 17, 2013 at 11:17 am</a>		</div>

		<p>[Or are you saying there should be an &quot;icon cache cache&quot;? -Raymond]</p>
<p>What alegr1 is saying is the in-use entries should have been rebuilt in place. I&#39;ve dealt with caches with this property before. Blanking the cache doesn&#39;t remove them but sets an invalid bit that causes it to be reloaded on the next pass.</p>
<p>As for the rest of alegrl1&#39;s stuff, if you want a fast file manager these days, you&#39;re going to have to build one. Explorer is too heavyweight.</p>
<div class="post">[<em>The purpose of rebuilding the icon cache is not to refresh the icons. It&#39;s to throw everything away and start over, for example, because the icon cache is too big and needs to be pruned. Leaving everything in place doesn&#39;t accomplish pruning. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1073363">
				<div id="div-comment-1073363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483#comment-1073363">
			August 18, 2013 at 10:05 pm</a>		</div>

		<p>Clearly the answer is to have another checkbox in the configuration. Then both people can pick the way they want their blank icons (or lack thereof) to work, and the two of them can gang up on the guy complaining that the configuration has just expanded to 83 tab pages and is a little bloated.</p>
<p>Trying to please everyone is fun.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1073373">
				<div id="div-comment-1073373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">icabod</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483#comment-1073373">
			August 19, 2013 at 2:28 am</a>		</div>

		<p>Nice article, and thanks to TripShock for the pointer to SignalObjectAndWait &#8211; I&#39;d been taking the two-step approach when asking a thread to die, simply as I hadn&#39;t spotted that call, and the two-step approach always worked for me. &nbsp;I guess that&#39;s one of the problems of programming &#8211; spotting _other_ ways of doing what you&#39;re already doing inefficiently.</p>
<p>As an aside &#8211; I didn&#39;t realise auto-reset events were quite so related to file explorer and the icon cache.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1073383">
				<div id="div-comment-1073383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483#comment-1073383">
			August 19, 2013 at 5:34 am</a>		</div>

		<p>icabod, It looks like SignalObjectAndWait was not available in Win9x. &nbsp;So, that may be why you missed it. &nbsp;Old school programmers had no choice but the two step approach.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1073393">
				<div id="div-comment-1073393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130816-00/?p=3483#comment-1073393">
			August 19, 2013 at 6:07 am</a>		</div>

		<p>@icabod:</p>
<p>SignalObjectAndWait is just marginally faster than separate calls, because it only saves one SYSENTER roundtrip, while having a bit of overhead to switch to different kernel calls to signal the object, depending on its type. Not enough to go and replace the existing calls in the legacy code.</p>
<p>There used to be a saving on not having to release and acquire the dispatcher lock, but it doesn&#39;t matter anymore in Vista+.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

