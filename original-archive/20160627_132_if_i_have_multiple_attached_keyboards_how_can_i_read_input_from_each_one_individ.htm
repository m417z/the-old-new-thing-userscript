<html>
<head>
<title>If I have multiple attached keyboards, how can I read input from each one individually?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If I have multiple attached keyboards, how can I read input from each one individually?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 27, 2016 / year-entry #133</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160627-00/?p=93755</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Raw input will tell you.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="https://msdn.microsoft.com/library/windows/desktop/ms645536(v=vs.85).aspx">
Raw Input</a>
is a feature of Windows that lets you
obtain keyboard, mouse, or generic HID input.
Okay, the generic HID input is nice, but the
thing that is interesting today is the fact
that the keyboard and mouse input is tagged
with the device that generated it.
This means that if you have multiple keyboards
connected to your computer (say, the laptop integrated
keyboard plus an external USB keyboard),
you can distinguish the two input sources.
</p>
<p>
Let's do it.
</p>
<p>
Remember that Little Programs do very little to no error
checking.
</p>
<p>
As usual, start with
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20030723-00/?p=43073">
the scratch program</a>
and make these change:
</p>
<pre>
<font COLOR=blue>#include &lt;strsafe.h&gt;</font>

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
  <font COLOR=blue>g_hwndChild = CreateWindow(TEXT("listbox"), NULL,
      LBS_HASSTRINGS | WS_CHILD | WS_VISIBLE | WS_VSCROLL,
      0, 0, 0, 0, hwnd, NULL, g_hinst, 0);

  RAWINPUTDEVICE dev;
  dev.usUsagePage = 1;
  dev.usUsage = 6;
  dev.dwFlags = 0;
  dev.hwndTarget = hwnd;
  RegisterRawInputDevices(&amp;dev, 1, sizeof(dev));</font>

  return TRUE;
}

void
OnDestroy(HWND hwnd)
{
  <font COLOR=blue>RAWINPUTDEVICE dev;
  dev.usUsagePage = 1;
  dev.usUsage = 6;
  dev.dwFlags = RIDEV_REMOVE;
  dev.hwndTarget = hwnd;
  RegisterRawInputDevices(&amp;dev, 1, sizeof(dev));</font>

  PostQuitMessage(0);
}
</pre>
<p>
First, we create a list box which we will use to display the
input we receive.
</p>
<p>
Next, we register our window to receive raw keyboard input.
The magic numbers for keyboard are
Usage Page 1 and Usage 6.
These magic numbers come from the USB HID specification.
</p>
<p>
The flip side of the coin is that we unregister when our
window is destroyed.
</p>
<p>
Now the fun part: Receiving the input!
</p>
<pre>
#define HANDLE_WM_INPUT(hwnd, wParam, lParam, fn) \
  ((fn)((hwnd), GET_RAWINPUT_CODE_WPARAM(wParam), \
        (HRAWINPUT)(lParam)), 0)

void OnInput(HWND hwnd, WPARAM code, HRAWINPUT hRawInput)
{
  UINT dwSize;
  GetRawInputData(hRawInput, RID_INPUT, nullptr,
                  &amp;dwSize, sizeof(RAWINPUTHEADER));
  RAWINPUT *input = (RAWINPUT *)malloc(dwSize);
  GetRawInputData(hRawInput, RID_INPUT, input,
                  &amp;dwSize, sizeof(RAWINPUTHEADER));
  if (input-&gt;header.dwType == RIM_TYPEKEYBOARD) {
    TCHAR prefix[80];
    prefix[0] = TEXT('\0');
    if (input-&gt;data.keyboard.Flags &amp; RI_KEY_E0) {
        StringCchCat(prefix, ARRAYSIZE(prefix), TEXT("E0 "));
    }
    if (input-&gt;data.keyboard.Flags &amp; RI_KEY_E1) {
        StringCchCat(prefix, ARRAYSIZE(prefix), TEXT("E1 "));
    }

    TCHAR buffer[256];
    StringCchPrintf(buffer, ARRAYSIZE(buffer),
        TEXT("%p, msg=%04x, vk=%04x, scanCode=%s%02x, %s"),
        input-&gt;header.hDevice,
        input-&gt;data.keyboard.Message,
        input-&gt;data.keyboard.VKey,
        prefix,
        input-&gt;data.keyboard.MakeCode,
        (input-&gt;data.keyboard.Flags &amp; RI_KEY_BREAK)
            ? TEXT("release") : TEXT("press"));
    ListBox_AddString(g_hwndChild, buffer);
  }
  DefRawInputProc(&amp;input, 1, sizeof(RAWINPUTHEADER));
  free(input);
}

...
    HANDLE_MSG(hwnd, WM_INPUT, OnInput);
</pre>
<p>
When we get the <code>WM_<wbr>INPUT</code> message,
we use the <code>Get&shy;Raw&shy;Input&shy;Data</code>
function to convert the raw input handle to a raw input structure.
This involves the standard two-step of first finding out how
much memory you need, then allocating that memory and trying again.
</p>
<p>
Do note that if you are going to use a preallocated buffer
(for example, to handle the common case where the raw input
fits in less than 80 bytes),
your buffer still must be properly aligned for a
<code>RAWINPUT</code> structure.
This is one of the basic ground rules, but it's worth
calling out explicitly because you are going to be tempted to
preallocate the buffer.
We didn't have to worry about it here because the <code>malloc</code>
function guarantees that the allocated buffer is suitably
aligned.
</p>
<p>
Next, we confirm that the input is keyboard input.
This is theoretically not necessary because the only input
we registered for is keyboard input, but I feel better
checking for it,
because somebody might do a
<code>Register&shy;Raw&shy;Input&shy;Devices</code>
and register some other type of input,
and I don't want to get faked out.
</p>
<p>
After verifying that we do indeed have keyboard input,
we extract the payload:
</p>
<ul>
<li>The device handle tells us which keyboard generated the input.
<li>The Message is the window message that was generated.
<li>The VKey is the virtual key code.
<li>The MakeCode is the scan code.
<li>The Flags provide other information:
<ul>
<li>Which
        <a HREF="http://www.win.tue.nl/~aeb/linux/kbd/scancodes-1.html">
        prefixes</a>
        are present on the scan code.</p>
<li>Whether this is a make (press) or break (release).
    </ul>
</ul>
<p>
Finally, we call <code>Def&shy;Raw&shy;Input&shy;Proc</code>
to allow default processing to occur.
This lets the keypress enter the normal input system.
</p>
<p>
Note that although there's a
<code>Get&shy;Raw&shy;Input&shy;Device&shy;List</code>
function which lets you find all the keyboard devices,
that is not useful in practice because modern computers have
a ton of special-purpose keyboards hiding inside them.
For example, the volume control knobs on your laptop might
actually be a tiny two-button keyboard.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1253936">
				<div id="div-comment-1253936" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160627-00/?p=93755#comment-1253936">
			June 27, 2016 at 7:26 am</a>		</div>

		<p>Ahh, a few years ago I was trying to do EXACTLY this, but with a twist &#8211; I not only wanted to determine WHICH keyboard the code originated at, but also REPLACE it (suppress + SendInput() would work too) , if it was from a specific keyboard. Basically I wanted to take a cheap USB keypad and turn it into a media control device (play/pause/next/etc). But it could have other applications as well.</p>
<p>Turns out, you can&#8217;t do this with Windows APIs. At least you couldn&#8217;t in Windows 7. Perhaps there&#8217;s something new in Windows 10 that  don&#8217;t know about. But back then, Raw Input could distinguish between keyboards, but not suppress the events; while Low Level Keyboard Hooks could suppress the events, but not determine which keyboard they originated from. The only solution was to use a specialized 3rd party hardware driver to do the trick. It works flawlessly to this day, but I sure do wish there was a native way to achieve it! :)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-chd1 odd alt depth-2 parent" id="comment-1253985">
				<div id="div-comment-1253985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ChDF+T' rel='external nofollow' class='url'>ChDF T</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160627-00/?p=93755#comment-1253985">
			June 27, 2016 at 10:28 am</a>		</div>

		<p>Tom Scott did something like that: He build a physical emoji keyboard by connecting multiple usb keyboards to a single PC and remapping the keys to emojis in software (explanation video: <a href="https://www.youtube.com/watch?v=lIFE7h3m40U" rel="nofollow">https://www.youtube.com/watch?v=lIFE7h3m40U</a> ). Although his solution was a bodge, it proves that the required APIs are available.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1254005">
				<div id="div-comment-1254005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160627-00/?p=93755#comment-1254005">
			June 27, 2016 at 11:15 am</a>		</div>

		<p>Thanks, I&#8217;ll check it out later. Although in the description of the video is mentioned AutoHotKey, which makes me suspicious, since AHK doesn&#8217;t have such a capability (or didn&#8217;t when I checked it out a while ago).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1254035">
				<div id="div-comment-1254035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160627-00/?p=93755#comment-1254035">
			June 27, 2016 at 2:23 pm</a>		</div>

		<p>OK, I watched the video. It seems I was wrong &#8211; it uses LuaMacros instead to do the keyboard reading. A quick glance at the source code + a quick glance at the forum (and the problems people report having) seems to hint that LuaMacros is still using the same two interfaces &#8211; Low Level Keyboard Hooks and Raw Input. Apparently they managed to combine them somehow, although the results seem to be less than perfect anyway, and many keys are still unblockable. This is, if I remember correctly, why I abandoned this approach myself when looking for a solution.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1254555">
				<div id="div-comment-1254555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160627-00/?p=93755#comment-1254555">
			June 30, 2016 at 4:33 am</a>		</div>

		<p>Now I feel deceived, because you, Raymond, some years ago, suggested this cannot be done without writing one&#8217;s own keyboard driver. Or at least that was my impression.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1255025">
				<div id="div-comment-1255025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">onodera</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160627-00/?p=93755#comment-1255025">
			July 5, 2016 at 5:18 am</a>		</div>

		<p>&gt; Next, we register our window to receive raw keyboard input. The magic numbers for keyboard are Usage Page 1 and Usage 6. These magic numbers come from the USB HID specification. </p>
<p>Does this work for PS/2 input devices as well?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

