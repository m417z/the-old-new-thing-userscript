<html>
<head>
<title>On partially-constructed objects, additional remarks, not as interesting</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>On partially-constructed objects, additional remarks, not as interesting</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 8, 2013 / year-entry #212</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Don't worry. Our long national nightmare of CLR week is almost over. I had originally planned to write an article about partially-constructed objects, but in the time since I queued up the topic (back in November 2005) to the time I got around to writing it up, I found that Joe Duffy had already written...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Don't worry.
Our
<a HREF="https://www.youtube.com/watch?v=HLyX4DbE6Hc">
long national nightmare</a>
of CLR week is almost over.
</p>
<p>
I had originally planned to write an article about partially-constructed
objects, but in the time since I queued up the topic (back in November 2005)
to the time I got around to writing it up, I found that
Joe Duffy had already written it for me!
</p>
<p>
<a HREF="http://www.bluebytesoftware.com/blog/2010/06/27/OnPartiallyconstructedObjects.aspx">
<b>On partially-constructed objects</b>
</a>
</p>
<p>
Read it.
</p>
<p>
Okay, here are some follow-up remarks.
</p>
<p>
One place where people get caught out by partially-constructed objects
is when they try to maintain a cache of objects
(perhaps with a little bit of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/08/07/10439879.aspx">
<code>Weak&shy;Reference</code> action</a>)
and stash the objects into the cache before they are fully constructed:
</p>
<pre>
class SomeClass {
 public SomeClass(...) {
  cache.Add(this);
  AdditionalConstructionWork();
 }
}
</pre>
<p>
If the <code>Additional&shy;Construction&shy;Work</code> takes
an exception,
then you end up with a partially-constructed object in your cache.
(Mind you, you had one all along, but now it's a persistent condition
as opposed to a transient one.)
</p>
<p>
You might think to fix the problem by reordering the operations:
</p>
<pre>
class SomeClass {
 public SomeClass(...) {
  AdditionalConstructionWork();
  // add to cache only after construction ran to completion
  cache.Add(this);
 }
}
</pre>
<p>
But that still doesn't work once you have derived classes:
</p>
<pre>
class Derived : SomeClass {
 public Derived(...) : base(...) {
  AdditionalConstruction(); // oops, what if this throws?
 }
}
</pre>
<p>
The base constructor runs first,
it successfully constructs the base object,
and then puts it in the cache.
And then the derived constructor runs and encounters an exception.
You're back in the same boat with a partially-constructed object
in the cache.
</p>
<p>
You want to wait until the object is fully constructed
because you add it to your cache.
</p>
<pre>
class SomeClass {
 static public SomeClass Create(...) {
  SomeClass c = new SomeClass(...);
  Register(c);
  return c;
 }
 protected static void Register(SomeClass c) { cache.Add(c); }
 protected SomeClass(...) { ... }
}

class Derived : SomeClass {
 static public Derived Create(...) {
  Derived d = new Derived(...);
  Register(d);
  return d;
 }
 public Derived(...) : base(...) { ... }
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1071603">
				<div id="div-comment-1071603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071603">
			August 8, 2013 at 7:48 am</a>		</div>

		<p>Actually, that is not a problem.</p>
<p>The base class is fully constructed, so if the derived constructor throws, the base destructor is invoked.</p>
<div class="post">[<em>I think you&#39;ve confused C++ with C#. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071623">
				<div id="div-comment-1071623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071623">
			August 8, 2013 at 8:30 am</a>		</div>

		<p>Shouldn&#39;t Derived&#39;s ctor be protected too?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071633">
				<div id="div-comment-1071633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/anil_4000_lambdah.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>anil@lambdah.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071633">
			August 8, 2013 at 9:18 am</a>		</div>

		<p>This blog post was a good reminder to me to re-read <a rel="nofollow" target="_new" href="http://www.parashift.com/c++-faq-lite/exceptions.html">http://www.parashift.com/&#8230;/exceptions.html</a></p>
<p>The amount of gotchas in c++ is frustrating at times.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jader3rd odd alt thread-odd thread-alt depth-1" id="comment-1071643">
				<div id="div-comment-1071643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jader3rd' rel='external nofollow' class='url'>jader3rd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071643">
			August 8, 2013 at 9:21 am</a>		</div>

		<p>I&#39;ve never seen a constructor add itself to a collection. This sounds like another great reason to never do so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071653">
				<div id="div-comment-1071653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bret Kuhns</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071653">
			August 8, 2013 at 9:32 am</a>		</div>

		<p>Although your static factory method is a good start, it can be easy for derived types to do incorrectly or not at all. The entire &quot;construct, register, return&quot; pattern is very ad hoc across a hierarchy of types. Unfortunately, because the `Create()` method is static, you can&#39;t use polymorphism to implement the virtual template pattern.</p>
<p>An ideal solution to the problem you presented would be to have a `SomeClassFactory` class that can follow the &quot;construct, register, return&quot; pattern across a hierarchy of types. For example,</p>
<p>public class SomeClassFactory {</p>
<p> &nbsp; &nbsp;public Make() {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;SomeClass obj = ConstructObj();</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;RegisterObj(obj);</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;return obj;</p>
<p> &nbsp; &nbsp;}</p>
<p> &nbsp; &nbsp;protected virtual SomeClass ConstructObj() {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;return new SomeClass(&#8230;);</p>
<p> &nbsp; &nbsp;}</p>
<p> &nbsp; &nbsp;protected virtual SomeClass RegisterObj(SomeClass obj) {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;Cache.Register(obj);</p>
<p> &nbsp; &nbsp;}</p>
<p>}</p>
<p>Now you can subclass `SomeClassFactory` on the protected virtuals to do the appropriate construction and registration steps while enforcing a consistent &quot;construct, register, return&quot; pattern.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071703">
				<div id="div-comment-1071703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071703">
			August 8, 2013 at 12:50 pm</a>		</div>

		<p>Along the lines of what jader3rd said, that constructor looks like a good example of an SRP violation to me.</p>
<p>On another note, it&#39;s also interesting to see how features of ORMs like NHibernate and EF interact with auto-properties in C# to encourage accessing partially constructed objects. &nbsp;For example</p>
<p>public class Customer</p>
<p>{</p>
<p> &nbsp; public Customer(string name)</p>
<p> &nbsp; {</p>
<p> &nbsp; &nbsp; &nbsp;this.Name = name; // ruh-roh &#8211; invoking virtual member on a partially constructed object</p>
<p> &nbsp; }</p>
<p> &nbsp; // must be virtual to allow the dynamically generated</p>
<p> &nbsp; // ORM proxy to override the member for change tracking</p>
<p> &nbsp; public virtual string Name { get; set; }</p>
<p>}</p>
<p>Of course, this situation can be avoided by implementing the property long-hand, but then you are missing out on the wonderfulness of auto-properties.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071713">
				<div id="div-comment-1071713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071713">
			August 8, 2013 at 1:24 pm</a>		</div>

		<p>A search for &quot;our long national nightmare&quot; brings up this [much funnier] link first: <a rel="nofollow" target="_new" href="http://www.theonion.com/articles/bush-our-long-national-nightmare-of-peace-and-pros,464/">http://www.theonion.com/&#8230;/bush-our-long-national-nightmare-of-peace-and-pros,464</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071723">
				<div id="div-comment-1071723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071723">
			August 8, 2013 at 1:44 pm</a>		</div>

		<p>&quot;Of course, this situation can be avoided by implementing the property long-hand, but then you are missing out on the wonderfulness of auto-properties.&quot;</p>
<p>Um&#8230; I think &quot;boo hoo&quot; is the appropriate response here.</p>
<p>As Franklin might have said, those who would give up essential correctness to purchase small keystroke savings deserve neither correctness nor keystroke savings.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071753">
				<div id="div-comment-1071753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Sowul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071753">
			August 8, 2013 at 3:20 pm</a>		</div>

		<p>@Gabe &#8211; that article is scarily prescient, isn&#39;t it? &nbsp;(Note the date).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071773">
				<div id="div-comment-1071773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1071773">
			August 8, 2013 at 8:22 pm</a>		</div>

		<p>@JM, It may not seem like a big deal, there is more than just a small keystroke savings. If you choose not to use the auto-property, then you need to back the property with an explicitly declared private field. Since the field is private, you cannot lean on the compiler to verify your mappings match your entities (especially those that do not conform to conventions). You trade one form of correctness for another. While I agree that calling virtual methods from a constructor is a more dangerous thing to do than having a mapping fail, it is still an unfortunate and non-obvious confluence of features.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072143">
				<div id="div-comment-1072143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1072143">
			August 9, 2013 at 1:31 pm</a>		</div>

		<p>Mark Sowul: The Onion is quite amazing in its ability to predict the future: <a rel="nofollow" target="_new" href="http://www.theonion.com/articles/f-everything-were-doing-five-blades,11056/">http://www.theonion.com/&#8230;/f-everything-were-doing-five-blades,11056</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072193">
				<div id="div-comment-1072193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1072193">
			August 9, 2013 at 4:25 pm</a>		</div>

		<p>There&#39;s an unfortunate error in the linked article: Virtual calls in base-constructors for C++ get the appropriate implementation (of the level which you just initialize), they are not disallowed. At least he&#39;s right about C# always pretending the final object was already constructed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072213">
				<div id="div-comment-1072213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1072213">
			August 9, 2013 at 5:05 pm</a>		</div>

		<p>@Gabe, Mark Sowul: &quot;The Onion is quite amazing in its ability to predict the future&quot;</p>
<p>There are a number of such cases. One of my favorites: <a rel="nofollow" target="_new" href="http://www.theonion.com/articles/nation-celebrates-full-week-without-deadly-mass-sh,29293/" rel="nofollow">http://www.theonion.com/&#8230;/nation-celebrates-full-week-without-deadly-mass-sh,29293</a></p>
<p>If you remember the time when NYPD cops shot at someone and managed to hit 8 or so passer-bys, that article was published the day *before* that. It was *not* published with the &quot;Update: Never Mind&quot;.</p>
<p>There&#39;s another forum I frequent where there is a user with the name &quot;The Onion is Prophetic&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1073043">
				<div id="div-comment-1073043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Y</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130808-00/?p=3563#comment-1073043">
			August 15, 2013 at 2:50 am</a>		</div>

		<p>The CLR can be loaded dynamically into an existing process. Does it verify that the first 64k are really unmapped?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

