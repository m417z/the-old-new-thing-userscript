<html>
<head>
<title>Why are the Compression and Encryption options check boxes instead of radio buttons?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why are the Compression and Encryption options check boxes instead of radio buttons?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 13, 2010 / year-entry #342</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>55</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Tanveer Badar asks why the file properties Advanced dialog shows two checkboxes (compression and encryption) even though NTFS supports only one or the other at a time. "Why not have two radio buttons instead of these silly check boxes?" Actually, if you want radio buttons, you'd need three, one to cover the "neither" case. Let's...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Tanveer Badar asks <a href="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#2545534"> why the file properties Advanced dialog shows two checkboxes (compression and encryption) even though NTFS supports only one or the other at a time</a>. "Why not have two radio buttons instead of these silly check boxes?"</p>
<p> Actually, if you want radio buttons, you'd need three, one to cover the "neither" case. Let's look at what those radio buttons would look like: </p>
<blockquote class="m"><p> <input type="radio" name="EorC" value="C">Compress contents to save disk space<br> <input type="radio" name="EorC" value="E">Encrypt contents to secure data<br> <input type="radio" name="EorC" value="0" default>Neither compress nor encrypt </p>
</blockquote>
<p> This takes an implementation detail (that NTFS currently does not support simultaneous compression and encryption) and elevates it to the user interface, so that it can provide maximum confusion to the user. "What a strange way of exposing compression and encryption. If I want to turn on encryption, I should just check a box that says 'Encryption'." </p>
<p> The current implementation (two check boxes) matches user expectations, but then says "Sorry, we can't do that" if the user picks a combination that is not currently supported. But who knows, maybe someday, NTFS will support simultaneously encryption and compression, and all that will happen is that the error message goes away. You don't have to redesign the property sheet (and invalidate all the training materials that had been produced in the meantime). </p>
<p> Either way, it's a leaky abstraction that sucks, but at least the suckiness isn't shoved in the user's face. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (55)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-881453">
				<div id="div-comment-881453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881453">
			December 13, 2010 at 7:10 am</a>		</div>

		<p>Compression + Encryption is icky. &nbsp;If you compress first you&#39;re good to go, but if you want to compress encrypted data, well, it&#39;s not going to compress very well, so you need to unencrypt it first, then you can compress it best, then reencrypt the compressed data. &nbsp;Fun.</p>
<p>And I imagine file access is a bit slower when using both at once rather than using one or the other.</p>
<p>The real radio buttons are a nice touch, btw.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881463">
				<div id="div-comment-881463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881463">
			December 13, 2010 at 7:27 am</a>		</div>

		<blockquote><p>
  file access is a bit slower when using both at once rather than using one or the other.
</p></blockquote>
<p>If properly done you encrypt less if the data are compressed and compression can be implemented much faster, so decent encryption with fast compression is typically faster than just decent encryption.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881473">
				<div id="div-comment-881473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff Tyrrill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881473">
			December 13, 2010 at 7:29 am</a>		</div>

		<p>I doubt both encryption and compression will ever be supported, because compressing the file before encrypting reveals (a little bit of) information about the contents of the file, because from the difference in disk space between the compressed size and the logical size, one can infer some information about the type of data. This goes against the goal of encryption.</p>
<p>(This doesn&#39;t change the validity of the explanation in the post.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881493">
				<div id="div-comment-881493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Topley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881493">
			December 13, 2010 at 8:01 am</a>		</div>

		<p>Compression generally relies on the presence of repeated sequences of bits, which are exactly the sort of thing that make it possible to break an encryption scheme.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881503">
				<div id="div-comment-881503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881503">
			December 13, 2010 at 8:02 am</a>		</div>

		<p>I think that would only be possible if disk access was so fast that it wouldn&#39;t be an issue when you make it 9x slower.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881523">
				<div id="div-comment-881523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881523">
			December 13, 2010 at 8:11 am</a>		</div>

		<p>@JohnTopley: Compression generally relies on the presence of repeated sequences of bits, which are exactly the sort of thing that make it possible to break an encryption scheme.</p>
<p>What is that supposed to mean? &nbsp;That encrypting compressed files is more secure than encrypting uncompressed files? [Wrong, unless your encryption scheme is completely idiotic]. &nbsp;That encrypting compressed files is less secure than encrypting uncompressed files? [Also wrong]. &nbsp;That encrypted files don&#39;t compress well [true, but not what you wrote]. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881533">
				<div id="div-comment-881533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Ganes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881533">
			December 13, 2010 at 8:15 am</a>		</div>

		<p>Raymond says, &quot;at least the suckiness isn&#39;t shoved in the user&#39;s face.&quot; I agree that situation is not ideal. However, I would rather see the options available to me and decide than to be bitten by them after I&#39;ve already made a decision.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881543">
				<div id="div-comment-881543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Ganes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881543">
			December 13, 2010 at 8:15 am</a>		</div>

		<p>Raymond says, &quot;at least the suckiness isn&#39;t shoved in the user&#39;s face.&quot; I agree that situation is not ideal. However, I would rather see the options available to me and decide than to be bitten by them after I&#39;ve already made a decision.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881553">
				<div id="div-comment-881553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881553">
			December 13, 2010 at 8:22 am</a>		</div>

		<p>Who&#39;s to say that some other filesystem in driver doesn&#39;t already provide both?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881573">
				<div id="div-comment-881573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random User 423686</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881573">
			December 13, 2010 at 8:28 am</a>		</div>

		<p>The main problem that tends to turn up with (blindly) encrypting compressed data is that many compression schemes will cause predictable data to appear in predictable places. (&quot;Magic numbers&quot;, for example.) This can open the door for partial known plain-text attacks. Note that there are ways to compensate, particularly if the algorithms are designed to work together.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881583">
				<div id="div-comment-881583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jmthomas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881583">
			December 13, 2010 at 8:32 am</a>		</div>

		<p>@GWO John is pointing out that perfectly compressed data is close to random, because all patterns have been removed by the compression scheme. &nbsp;If this compressed data is then encrypted, 1) The intercept given to the de-cryptographers is shorter (therefore harder to decrypt), and 2) does not contain some clues (repeating patterns) often used by de-cryptogolists.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881593">
				<div id="div-comment-881593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sky the Madboy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881593">
			December 13, 2010 at 8:37 am</a>		</div>

		<p>@JoshuaGanes: As I&#39;ve seen written recently &#8211; when designing the UI, you need to think like a basic user, and you are not a basic user. You are an administrator. They could always design two different UIs for each class of user (which they&#39;ve kind of done in Windows 7), but it doesn&#39;t strike me as a terribly efficient use of resources.</p>
<p>Personally I think the current setup is the best compromise for all users. A basic user will be less confused by the current design. An administrator may grouse about things not being set up exactly how they want it to be, but at least they can still use it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881603">
				<div id="div-comment-881603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881603">
			December 13, 2010 at 8:41 am</a>		</div>

		<p>[does not contain some clues (repeating patterns) often used by de-cryptogolists.]</p>
<p>Relying on repeating patterns as cribs for decryption is a 1940s technique. &nbsp;It worked on the Enigma machine, but its going to be completely, completely useless against any sane encryption scheme invented since about 1970. &nbsp;It&#39;s certainly not going to help you crack the encryption on an NTFS volume. &nbsp;This is not your grandfather&#39;s substitution cipher, or anything even remotely like it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881613">
				<div id="div-comment-881613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jmthomas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881613">
			December 13, 2010 at 8:41 am</a>		</div>

		<p>@Random True, most compression schemes are predictable at the beginning, which would be a clue. &nbsp;However, I&#39;d not expect too much help from the compression dictionary (if it can be hidden) because there will only be one copy of a &#39;repeating&#39; pattern &#8212; multiple copies are compressed out.</p>
<p>On the other hand, as you point out, this can be mitigated when encryption knows about the compression. &nbsp;But it can&#39;t be completely eliminated because there has to be a starting point to begin decompressing the data.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881623">
				<div id="div-comment-881623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881623">
			December 13, 2010 at 8:42 am</a>		</div>

		<p>Pierre B. certainly makes a very valid point. When you use good wording (and none of that &quot;neither compress nor encrypt&quot; strawman), the radio button suddenly looks very good. I would prefer that by a mile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881633">
				<div id="div-comment-881633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jmthomas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881633">
			December 13, 2010 at 8:50 am</a>		</div>

		<p>@GWO You&#39;re right about modern encryption. &nbsp;But please consider the problem of recognizing that the text has been successfully decrypted. &nbsp;It&#39;s not like you get back a bunch of words from some language you can verify out of a (traditional type) dictionary. &nbsp;The more random the true text appears, the harder it will be to recognize the true text as such, should decryption be successful.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881663">
				<div id="div-comment-881663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881663">
			December 13, 2010 at 9:21 am</a>		</div>

		<p>GWO: not true. Repeating strings, if they span blocks, are useful for modern cryptanalysis. &nbsp;Also bear in mind that many files include long runs of zeroes, giving an attacker plaintext as well.</p>
<p>Compression and encryption are used without problem by mcrypt and SSH, fwiw.</p>
<p>Prerequisites for speculation in the comments: understanding of a few modern crypto algorithms and implementations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881673">
				<div id="div-comment-881673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martins Mozeiko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881673">
			December 13, 2010 at 9:29 am</a>		</div>

		<p><a href="http://i38.tinypic.com/sghf9e.gif" target="_new" rel="nofollow">i38.tinypic.com/sghf9e.gif</a></p>
<p>How about checkboxes in DXSDK installation?</p>
<p>Why do MS uses checkboxes there instead of radio buttons?</p>
<p>Screenshot is from November 2008, but latest SDK from 2010 also has same UI.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881683">
				<div id="div-comment-881683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881683">
			December 13, 2010 at 9:35 am</a>		</div>

		<p>Agree with Pierre B. Also a UI design can&#39;t be justified on the grounds that it could one day be a valid representation of the available choices (however unlikely that may be).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881693">
				<div id="div-comment-881693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RoboRock</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881693">
			December 13, 2010 at 9:38 am</a>		</div>

		<p>For the first time I find myself really dis-agreeing with Raymond. The user is gonna say, &quot;Well if I can&#39;t do that then why did you let me.&quot; Your logic could apply to any radio buttons &#8211; I mean, sorry you might have to change the interface in the future&#8230;I don&#39;t think that cost savings justifies this lazy design.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881703">
				<div id="div-comment-881703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RoboRock</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881703">
			December 13, 2010 at 9:40 am</a>		</div>

		<p>&#8230;and as a followup, why would the user even bother trying in the future&#8230;you just trained them to think it won&#39;t work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881713">
				<div id="div-comment-881713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881713">
			December 13, 2010 at 9:48 am</a>		</div>

		<p>@Martins Mozeiko, checking both boxes specifies you only want to participate sometimes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881723">
				<div id="div-comment-881723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hidden for a reason</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881723">
			December 13, 2010 at 9:49 am</a>		</div>

		<p>Seems that a lot of people are making wrong assumptions about encryption. During my military service (somewhere in Europe) I was working on an encrypted radio system. We used to transmit the same pattern (&quot;quick brown fox&quot; like) for days at time. I always asked the crypto expert if that was not helping the &quot;enemy&quot; find the characteristics (and eventually keys) used by our system and their answer was always unambiguously &quot;no&quot;. Now that I understand crypto a little bit better I tend to strongly agree with them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881733">
				<div id="div-comment-881733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881733">
			December 13, 2010 at 9:53 am</a>		</div>

		<p>I agree with Raymond here. &nbsp;Having a UI &#39;know&#39; that a particular file system cannot do feature A and feature B at the same time is empirical computer science, rarely a good thing. &nbsp;The file system in this case says (via its volume attributes) &#39;I can do encryption&#39; and &#39;I can do compression&#39;. &nbsp;The attributes cannot express &#39;but not together&#39;.</p>
<p>Therefore, application code (such as Explorer) has no way to know this.</p>
<p>This is of course a programmer&#39;s perspective, which holds that single-point-of-truth and avoiding-undue-coupling ultimately result in a more satisfactory user experience than wiring ad-hoc knowledge into source code. &nbsp;And it&#39;s also a file-system guy&#39;s perspective, which holds that Explorer&#39;s nothing special, it&#39;s just an app.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881743">
				<div id="div-comment-881743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881743">
			December 13, 2010 at 9:56 am</a>		</div>

		<p>Just for reference, on XP the two check boxes behave exactly like radio buttons and there is no error message; this is probably the most confusing behavior possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881753">
				<div id="div-comment-881753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MikeCaron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881753">
			December 13, 2010 at 9:57 am</a>		</div>

		<p>@Martins: Ha ha, yes, I was going to mention that as soon as I saw this blog post! What a silly design. Obviously, the guy responsible for that installer doesn&#39;t read this blog :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881763">
				<div id="div-comment-881763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881763">
			December 13, 2010 at 9:59 am</a>		</div>

		<p>Joshua and Pierre have it exactly right: it is <em>much</em> better from a UI design point of view to not allow the user to make incorrect choices in the first place, than to allow them to make an incorrect choice and then scold them for it.</p>
<p>In fact, that&#39;s one of the main reasons radio button groups are so useful: it allows the software to present the user with mutually exclusive choices, rather than requiring the user to suss out what a valid combination of choices might be.</p>
<p>If there are problems with the exact wording of the radio buttons or the group label, then the answer is to fix the wording. &nbsp;Not resort to a more user-hostile UI by switching to checkboxes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881773">
				<div id="div-comment-881773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881773">
			December 13, 2010 at 10:06 am</a>		</div>

		<p>@dave: &quot;Having a UI &#39;know&#39; that a particular file system cannot do feature A and feature B at the same time is empirical computer science, rarely a good thing.&quot;</p>
<p>Au contraire. &nbsp;That&#39;s the whole point of having a UI: to know the rules of the software features it&#39;s allowing the user to use and act as a guide to the user to navigate those rules. &nbsp;If and when those rules change, then the UI may be changed. &nbsp;But the UI is supposed to be the mediator between the functionality and the user, in a way that provides maximum understanding, minimal confusion, and most efficient use to the user.</p>
<p>The &quot;checkboxes as radio buttons&quot; UI fails in all three metrics.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881793">
				<div id="div-comment-881793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881793">
			December 13, 2010 at 11:52 am</a>		</div>

		<p>There seems to be some misconceptions about modern compression schemes here.</p>
<p>Modern compression doesnt store dictionaries in the compressed stream. They build models &quot;on-line&quot; as the data is being compressed or decompressed, and the main reason they do so is that an ideal compressor adapts to changes in its input stream. In the case of English text, for example, paragraphs near each other will use some of the same words many times even though the words themselves are rather rare elsewhere in the text. It has been discovered that &quot;on-line&quot; methods are a very good approximation of a theoretically ideal compressor, so these days very little research is put into storing pre-evaluated information about the compressed stream because nobody is doing that except for legacy compatability (such as ZIP&#39;s use of frequency tables both in-header and in-stream)</p>
<p>The final word on entropy compression is Arithmetic Encoding. It is provably an &quot;ideal&quot; method of storing entropy (there are implementation details that amount to only small differences) so all the research done today, at edge of discovery, is on the modeling of the data and not on how to encode it. The upshot of this is that the individual bits of the decompressed stream are spread out over many bits of the compressed stream, and not in a predictable manner, because all new compression schemes use an Arithmetic Encoder unless there is some constraint that prevents it (such as in H.264, which for some things uses different entropy encoding schemes so that hardware can do a lot in parallel)</p>
<p>Combine these two facts and many of the arguments about compression weakening the encryption are clearly wrong. The argument about compressed size being useful information is correct, bu the file extension normally gives the type of data away anyways&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881803">
				<div id="div-comment-881803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">f0dder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881803">
			December 13, 2010 at 12:09 pm</a>		</div>

		<p>I agree that a radio buttons or a combobox would be less confusing for users, but I agree with the current design from a programmer standpoint: as mentioned previously, the information you get about the filesystem tells you whether compression and encryption are available, but it can&#39;t represent &quot;but they&#39;re mutually exclusive&quot;.</p>
<p>So what would a solution be? You can&#39;t just hardcode the setting entirely, since there might be filesystems around already that support both. Would you then hardcode logic that does a string-compare to check if it&#39;s NTFS and then does the assumption that it&#39;s either-or? (While butt-ugly, that might work for explorer.exe since it&#39;s shipped with the OS. But it&#39;s no-go for 3rd party software. I&#39;m sure some is already doing that, though).</p>
<p>Or do you have some other suggestion for detecting whether both are selected, in order to adapt the user interface? Like trying to create a dummy compressed-and-encrypted file in the folder(s) of the file(s) you are modifying the properties for? Please keep in mind that explorer can apply the settings recursively, and that there&#39;s symlinks and NTFS junctions to take into consideration.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881813">
				<div id="div-comment-881813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random User 423686</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881813">
			December 13, 2010 at 12:57 pm</a>		</div>

		<p>I included the &quot;blindly&quot; qualifier for a reason. The problems are greatly reduced or eliminated as you know more about the algorithms in question. A sample &quot;uninformed&quot; scenario would be ZIP compression with some kind of substitution or simple XOR encryption.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881823">
				<div id="div-comment-881823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian G.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881823">
			December 13, 2010 at 2:17 pm</a>		</div>

		<p>I&#39;ve never had a problem with the current implementation, but if MS were to hire me as their UI designer, I might suggest something like:</p>
<p>How would you like to store the files on this volume?</p>
<p>Default (Best Performance)</p>
<p>Encrypted (Security)</p>
<p>Compressed (Increased Storage Space)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881833">
				<div id="div-comment-881833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881833">
			December 13, 2010 at 2:35 pm</a>		</div>

		<p>Brian G.: Are you under the impression that non-compressed gives the best performance? If so, I&#39;d love to see the benchmarks that prove it. Compressing and decompressing data usually takes much less time than sending it over the I/O interface, so I wouldn&#39;t expect that leaving the data on the disk uncompressed would give the best performance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881843">
				<div id="div-comment-881843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">roastbeef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881843">
			December 13, 2010 at 2:36 pm</a>		</div>

		<p>@Hidden for a reason:</p>
<p>You were constantly transmitting your &quot;quick brown fox&quot; for another reason: preventing traffic analysis. If an enemy can&#39;t decode your transmissions, but can plot the volume of transmissions over time, they can infer changes in activity of your organization. &nbsp;But if you keep your pipe shuttling bits back and forth constantly, then they&#39;ve got no idea how much actual communication you&#39;re actually doing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881853">
				<div id="div-comment-881853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881853">
			December 13, 2010 at 2:56 pm</a>		</div>

		<p>@Gabe</p>
<p><a rel="nofollow" target="_new" href="http://directedge.us/content/to-compress-or-not-to-compress-part-ii" rel="nofollow">directedge.us/&#8230;/to-compress-or-not-to-compress-part-ii</a></p>
<p>Note that&#39;s on a flash drive; performance on a hard disk is likely to be worse, as using compression (apparently) increases fragmentation which is more problematic on hard disks compared to flash.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881563">
				<div id="div-comment-881563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881563">
			December 13, 2010 at 8:28 am</a>		</div>

		<p>I fail to see how a surprise &quot;no can&#39;t do&quot; with a UI that implicitely suggest both should be usable at the same time improves the interaction. You pretty much load the question by framing in a particular way and setting up a strawman. Radio button implies just as much turn thing on and off as much as check-box, and make it explicit that the options are exclusive. The only confusing bit the the strawman of supplying an example UI that is verbose and confusing. A simple UI would do:</p>
<p>Data format:</p>
<p>* Normal</p>
<p>* Encrypted</p>
<p>* Compressed</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-881783">
				<div id="div-comment-881783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881783">
			December 13, 2010 at 10:08 am</a>		</div>

		<p>&gt; You don&#39;t have to redesign the property sheet (and invalidate all the training materials that had been produced in the meantime).</p>
<p>*boggle*</p>
<p>Um, if your feature changes, you should update the UI to match. &nbsp;This is, in fact, one of the easiest ways to let your users know that you&#39;ve added a feature.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881883">
				<div id="div-comment-881883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">f0dder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881883">
			December 13, 2010 at 6:29 pm</a>		</div>

		<p>@Ben Cooke: your supports_x_for_file() idea wouldn&#39;t really work, though &#8211; the encryption/compression isn&#39;t performed as soon as you check the checkbox (that would be pretty nasty if you were viewing properties for a deeply nested folder and accidentally fat-fingered the compression checkbox).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881893">
				<div id="div-comment-881893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881893">
			December 13, 2010 at 6:50 pm</a>		</div>

		<p>Just don&#39;t try compressing database files. It might be faster to read certain kinds of files serially. Both EXEs (which are memory-mapped) and databases don&#39;t behave half as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881913">
				<div id="div-comment-881913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Troll</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881913">
			December 13, 2010 at 8:53 pm</a>		</div>

		<p>Well the UI is designed in such a way that I &quot;got it&quot; from using it that both are not supported on the same file and that the third case is important as well. So there&#39;s nothing wrong with the UI, it&#39;s perfect. The only thing I miss is a context menu item for &quot;Compress&quot; like there is for &quot;Encrypt&quot; (which can added using TweakUI) which also asks me later &quot;Compress the file only or Compress the folder&quot; with a checkbox for &quot;Always compress only the file&quot;. :) Btw, the compression algorithm is never right for backward compatibility?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881933">
				<div id="div-comment-881933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thomas Bouton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881933">
			December 13, 2010 at 10:52 pm</a>		</div>

		<p>First : you have to update documentation and training material. Good doc says that both can&#39;t be performed at the same time. So your point is quite moot.</p>
<p>Second : in crypto, ANY information on the plain text is a help. &nbsp;It limits your problem space. How much of a help spends on your crypt algorithm but still&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881863">
				<div id="div-comment-881863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881863">
			December 13, 2010 at 4:26 pm</a>		</div>

		<p>The crux of the problem is in Raymond&#39;s closing sentence: it&#39;s a leaky abstraction.</p>
<p>Specifically, the design of the interface between Explorer and the filesystem driver is flawed. Assuming other commenters above are correct about the interface, it provides something like the following:</p>
<p> &nbsp; &nbsp;* filesystem.supports_encryption()</p>
<p> &nbsp; &nbsp;* filesystem.supports_compression()</p>
<p>In other words, it assumes that encryption and compression are supported either for all files on disk at all times or for no files on disk at any time.</p>
<p>Given the characteristics of NTFS, this interface should really be more like:</p>
<p> &nbsp; &nbsp;* filesystem.supports_encryption_for_file(file)</p>
<p> &nbsp; &nbsp;* filesystem.supports_compression_for_file(file)</p>
<p>It must of course be documented that changing the compression state of a file might impact whether encryption is supported and vice-versa, so Explorer would then need to re-query these flags after each change to update the state of the UI.</p>
<p>This is of course susceptible to race conditions, but that&#39;s true of most UI that changes some state: if I open the dialog box and then someone turns on encryption before I try to turn on compression, my operation will fail despite the UI making it look like it should&#39;ve worked. This is sub-optimal, but it seems like enough of a corner-case that a suitably helpful dialog box would suffice here.</p>
<p>I think this scenario is an example of one layer having to do the best it can with a poorly-designed lower layer. The lower layer is unable to provide the guarantee it is documented to provide (that it can report encryption and compression as two independent, filesystem-global flags). This is a common problem and is the very definition of a leaky abstraction, and can only really be solved properly by adjusting the interface provided by the lower layer to more accurately reflect the capabilities of that layer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-881963">
				<div id="div-comment-881963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881963">
			December 14, 2010 at 2:58 am</a>		</div>

		<p>My five cents: it should have been either radioboxes or checkboxes but which you can set both.</p>
<p>If the underlying FS doesn&#39;t support compression+encryption, it just silently uses only encryption. After all, there&#39;s no saying how good exactly the data should be compressed. It&#39;s just &quot;try your best&quot; flag.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881923">
				<div id="div-comment-881923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Troll</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881923">
			December 13, 2010 at 8:54 pm</a>		</div>

		<p>&quot;is never *updated*, right?&quot; I meant</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-882013">
				<div id="div-comment-882013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-882013">
			December 14, 2010 at 8:21 am</a>		</div>

		<p>@ThomasBouton: &quot;How much of a help spends on your crypt algorithm but still&#8230;&quot;</p>
<p>If your crypt algorithm is &quot;anything modern&quot;, the amount it helps you is &quot;a completely negligibly small amount&quot;. &nbsp;It would certainly help you brute force it, but by nothing like enough to make brute force worthwhile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-882133">
				<div id="div-comment-882133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-882133">
			December 14, 2010 at 9:39 am</a>		</div>

		<p>I believe that Micro$oft will just wait for quantum encryption to be available for technology and they will implement compression and encryption, till then the current GUI is just fine. I doubt that there are many users that use any of those features anyway, since HDD&#39;s are cheap therefore you don&#39;t need compression and relying on OS default encryption to protect your data is just naive. That encryption is just so easy to crack!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-882163">
				<div id="div-comment-882163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-882163">
			December 14, 2010 at 10:03 am</a>		</div>

		<p>@Gabe: &quot;Compressing and decompressing data usually takes much less time than sending it over the I/O interface&quot;</p>
<p>Access time with random access voids any possible gains from compression. Most large files are either accessed randomly (databases) or are not well compressible (video/audio). Worst loss you&#39;d get if a compressed file is being written in small pieces, less than a compression block which is usually 64 KB or so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-881953">
				<div id="div-comment-881953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881953">
			December 14, 2010 at 2:35 am</a>		</div>

		<p>@Pierre B: You pretty much load the question by framing in a particular way and setting up a strawman.</p>
<p>As Raymond always does.</p>
<p>The radio button options should be:</p>
<p>* Normal</p>
<p>* Encrypted</p>
<p>* Compressed</p>
<p>* Encrypted &amp; Compressed (grayed out on ntfs)</p>
<p>Popup errors are evil.</p>
<p>I promise windows UI will be redesigned 10 times before ntfs supports both encryption and compression!</p>
<div class="post">[<i><a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/14/131881.aspx" rel="nofollow">Graying-out would be misleading in this case</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-882213">
				<div id="div-comment-882213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lefty</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-882213">
			December 14, 2010 at 11:23 am</a>		</div>

		<p>I&#39;m wondering if this comment thread is the most usability analysis that&#39;s been done on this set of advanced file property configuration options. &nbsp;I&#39;m sure that all 10 people who&#39;ve tried to use EFS on compressed files appreciate the brainpower being focused on this problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-881973">
				<div id="div-comment-881973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-881973">
			December 14, 2010 at 4:38 am</a>		</div>

		<p>@dave: &quot;Having a UI &#39;know&#39; that a particular file system cannot do feature A and feature B at the same time is empirical computer science, rarely a good thing.&quot;</p>
<p>But the UI *does* know.</p>
<p>If you try to select both, the UI clears one of the checkboxes. Checkboxes don&#39;t clear themselves so clearly the UI knows the two options are mutually exclusive.</p>
<p>People are not arguing about whether or not the UI should know about the filesystem features; only about how it presents the options to the user.</p>
<p>Personally, I can see where other people are coming from but I don&#39;t have a problem with the current UI. Generally, checkboxes behaving like radio buttons can be confusing/annoying, but I don&#39;t mind it when there are only two of them and they are right next to each other.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-882243">
				<div id="div-comment-882243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">f0dder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-882243">
			December 14, 2010 at 3:35 pm</a>		</div>

		<p>@Alex Grigoriev: iirc NTFS compression means multiple smaller files can be clustered together in a compression unit, which might be interesting for static text files, like .h files?</p>
<p>OTOH, there&#39;s no guarantee that the files you use together are clustered together, and while decompression is very cheap CPU-wise, you&#39;re usually a lot of CPU while compiling (though I dunno if the read-and-parse step is expensive, or the CPU-maxout doesn&#39;t kick in until the optimizing step).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-882263">
				<div id="div-comment-882263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AndyC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-882263">
			December 14, 2010 at 7:46 pm</a>		</div>

		<p>Of course, had Explorer used radio buttons, Raymond&#39;s suggestion box would instead be filled with &quot;What idiot decided to use radio buttons for the encrypt/compress options? If they&#39;d used checkboxes we&#39;d be able to select both at the same time. Stupid Windows&quot;</p>
<p>Sometimes you just can&#39;t win.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-882283">
				<div id="div-comment-882283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-882283">
			December 15, 2010 at 12:17 am</a>		</div>

		<p>@andyc: &quot;If they&#39;d used checkboxes we&#39;d be able to select both at the same time. Stupid Windows&quot;</p>
<p>With a &quot;encrypted AND compressed&quot; radio option this whould be a possible.</p>
<p>Graying out the &quot;encrypted AND compressed&quot; option is valid because the user could move the file to a better file system which supports both.</p>
<p>If an encrypted AND compressed file is moved from a filesystem which supports both, is the file decompressed or decrypted when stored on ntfs?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-882293">
				<div id="div-comment-882293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-882293">
			December 15, 2010 at 12:22 am</a>		</div>

		<p>If the GUI was designed according to m$ own standard, Encrypt checkbox should be disabled when Compress is checked, the user should manually be required to remove compression first to be able to select Encrypt. And vice versa.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-882823">
				<div id="div-comment-882823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gechurch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101213-00/?p=12033#comment-882823">
			December 16, 2010 at 1:45 pm</a>		</div>

		<p>@640k</p>
<p>I would find that a lot more confusing. Having a third option that greyed out would suggest to me that it is unavailable in my configuration. I could easily see myself wasting time googling this to figure out how to &quot;enable&quot; that impossible option. As for file systems, NTFS is currntly the only one that supports either of these options, and there is no file system Windows can read that supports both. This may change in the future, and it it does that is the point the UI should be changed.</p>
<p>As to moving a file that is compressed and encrypted to NTFS &#8211; I can&#39;t see how this can happen. Windows doesn&#39;t support any file system that can do both, so that means the only way to copy from one of these volumes is over the network (or some other interface). If you do this, the sending end has to send it according to the protocol. I&#39;d assume SMB doesn&#39;t support sending compressed or encrypted files, so would expect the sending end to have to decrypt/decompress first. Anyone know for sure if this is the case?</p>
<p>I just had a play with the checkboxes and, despite this normally being one of my pet peeves, I think it&#39;s very clear. As soon as you go to tick the second option the UI &quot;tells&quot; you that you can&#39;t use both. Dude&#39;s suggestion of disabling the other option until the first is unticked is a bit clearer again, but is slightly less usable (because it requires more clicking).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

