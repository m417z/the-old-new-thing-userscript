<html>
<head>
<title>Why hasn't the API hook mechanism for x64 been standardized like it was for x86?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why hasn&#8217;t the API hook mechanism for x64 been standardized like it was for x86?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 9, 2012 / year-entry #158</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>28</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Joshua posted to the Suggestion Box, "Around the time of WinXP SP2 x86, the API hook mechanism was standardized. Why wasn't the same thing done for x64?" Who said it was standardized for x86? Hooking APIs is not supported by Windows. There may be specific interfaces that expose hooks (like Co­Register­Initialize­Spy to let you monitor...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Joshua posted to the Suggestion Box, "Around the time of WinXP SP2 x86, the API hook mechanism was standardized. <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/07/20/10040074.aspx#10040389"> Why wasn't the same thing done for x64</a>?"</p>
<p> Who said it was standardized for x86? </p>
<p> Hooking APIs is not supported by Windows. There may be specific interfaces that expose hooks (like <code>Co&shy;Register&shy;Initialize&shy;Spy</code> to let you monitor calls to <code>CoInitialize</code> and <code>CoUninitialize</code>, and <code>Set&shy;Windows&shy;Hook&shy;Ex</code> to let you hook various window manager operations) but there is no supported general API hooking mechanism provided by the operating system. </p>
<p> So I don't know where you got that idea from. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-996883">
				<div id="div-comment-996883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-996883">
			July 9, 2012 at 7:10 am</a>		</div>

		<p>Perhaps your commenter views the Detours library (<a rel="nofollow" target="_new" href="https://research.microsoft.com/en-us/projects/detours/" rel="nofollow">research.microsoft.com/&#8230;/detours</a>) as some sort of standardization. Though if that&#39;s the case, then it has been standardized for x64 as well, as of the latest version.</p>
<p>(Having just worked on some API hooking of x64 code myself a couple weeks ago, I can say it&#39;s significantly more interesting than hooking x86 code. There&#39;s no 64-bit immediate JMP instruction, and there&#39;s not necessarily 64 bits worth of NOP instructions before function entrypoints. Good luck!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-996893">
				<div id="div-comment-996893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Justin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-996893">
			July 9, 2012 at 7:13 am</a>		</div>

		<p>But what about <a href="http://research.microsoft.com/en-us/projects/detours/" target="_new" rel="nofollow">research.microsoft.com/&#8230;/detours</a> I thought that was the &#39;standard&#39; (of sorts).</p>
<div class="post">[<i>You seem to have confused &quot;standard&quot; with &quot;de facto standard&quot;. And I&#39;m not even sure detours is a de facto standard, seeing as how there are so many viable competing hooking mechanisms. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-996903">
				<div id="div-comment-996903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-996903">
			July 9, 2012 at 7:22 am</a>		</div>

		<p>It&#39;s an informal standard (the best kind). &nbsp;Windows x86 is going to &quot;support&quot; this until the end of time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-996913">
				<div id="div-comment-996913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-996913">
			July 9, 2012 at 8:12 am</a>		</div>

		<p>&quot;Detours Express 3.0 is available for immediate download under a no-fee, click-through license for research, non-commercial, and non-production use. &nbsp;Detours Express is limited to 32-bit processes on x86 processors.&quot;</p>
<p>Any bets on whether it shows up in production use?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-996923">
				<div id="div-comment-996923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-996923">
			July 9, 2012 at 9:14 am</a>		</div>

		<p>I&#39;ve always found this to be a bit of a weakness in the design of the Win32 dynamic linker. There is no easy way to start a process with substituted DLLs or functions. If the interface they export is the same, it should be possible, I think, just like in COM where you can pass any old object to a function as long as it supports the interface the function wants. In other words, Windows starts with something that could have been highly modular, and turns it into what is in effect a very monolithic system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-996933">
				<div id="div-comment-996933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt T</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-996933">
			July 9, 2012 at 9:21 am</a>		</div>

		<p>@AC</p>
<p>You can: <a rel="nofollow" target="_new" href="http://blogs.technet.com/b/askperf/archive/2011/06/17/demystifying-shims-or-using-the-app-compat-toolkit-to-make-your-old-stuff-work-with-your-new-stuff.aspx" rel="nofollow">blogs.technet.com/&#8230;/demystifying-shims-or-using-the-app-compat-toolkit-to-make-your-old-stuff-work-with-your-new-stuff.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-996943">
				<div id="div-comment-996943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-996943">
			July 9, 2012 at 9:29 am</a>		</div>

		<p>Matt, that doesn&#39;t qualify as easy. First off the ACT doesn&#39;t work on my computer (system requirements + Dotnet dependency) and secondly I&#39;ve looked at that before and couldn&#39;t find much information on how to create your own shims. In the end it was easier to either patch the relevant executable modules, or hook the relevant functions in memory, depending on whether an external process or the current process must be subjected to the switcheroo.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-996963">
				<div id="div-comment-996963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-996963">
			July 9, 2012 at 10:30 am</a>		</div>

		<p>[You seem to have confused &quot;standard&quot; with &quot;de facto standard&quot;.] -Raymond.</p>
<p>That was also my mistake. Given the change in SP2 to the function entry points to allow atomic hooking in most cases, combined with the release of Detours around the same time, I though it was intentional.</p>
<div class="post">[<i>Unlikely, especially considering that Detours doesn&#39;t use that technique! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-996973">
				<div id="div-comment-996973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Grier [MSFT]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-996973">
			July 9, 2012 at 10:48 am</a>		</div>

		<p>@Joshua:</p>
<p>The codegen change was to enable hot patching, not hooking. &nbsp;You can choose to look at hot patching as a form of hooking but you&#39;ll find absolutely no support for taking advantage of these changes for things other than the OS patching itself. &nbsp;In fact you&#39;ll find no support for the behavior of the system once you start down this path. &nbsp;You should view code that has this kind of hooking behavior in a similar fashion to software packages that replace system components.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-996983">
				<div id="div-comment-996983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-996983">
			July 9, 2012 at 10:49 am</a>		</div>

		<p>[Unlikely, especially considering that Detours doesn&#39;t use that technique! -Raymond]</p>
<p>I couldn&#39;t agree to the license, so I&#39;d never actually seen the innards of Detours.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-xpclientgmail-com even thread-even depth-1" id="comment-996993">
				<div id="div-comment-996993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/xpclient' rel='external nofollow' class='url'>xpclient</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-996993">
			July 9, 2012 at 11:15 am</a>		</div>

		<p>Detours Express 3.0 for x64 processes please..until then it will never become a &quot;standard&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997003">
				<div id="div-comment-997003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997003">
			July 9, 2012 at 1:12 pm</a>		</div>

		<p>I wish they had a version of Detours priced more reasonably for smaller applications and developers. &nbsp;Detours Professional is too expensive, and Detours Express is not licensed for any type of commercial use.</p>
<p>Instead I set up my own API hooking mechanism based on sample source code from Jeffrey Richter&#39;s book. &nbsp;But that mechanism isn&#39;t perfect; I never got it working quite right once multiple threads were involved &#8211; I had to use Sleep to prevent deadlocks (horrors! but I had to move on).</p>
<p>It&#39;s hard to justify a $10,000 expense on hooking just &quot;one little API&quot; to fix some minor undesired behavior &#8211; especially when I achieved practically the same thing with only a few hundred lines of code &#8211; albeit with a risk of deadlock. &nbsp;Would I prefer a more production-proven version? &nbsp;Of course &#8211; but not for $10,000.</p>
<p>Would I rather avoid hooking an API? &nbsp;Of course. &nbsp;In an ideal world, I&#39;d have full source code to all of my app dependencies, to add missing features/fix bugs. &nbsp;But I don&#39;t, and so sometimes the last-resort alternative has to be an API hook.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997023">
				<div id="div-comment-997023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pablo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997023">
			July 9, 2012 at 3:46 pm</a>		</div>

		<p>You can use Deviare API Hook that supports x32 and x64:</p>
<p><a rel="nofollow" target="_new" href="http://www.nektra.com/products/deviare-api-hook-windows/" rel="nofollow">http://www.nektra.com/&#8230;/deviare-api-hook-windows</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997043">
				<div id="div-comment-997043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@JamesJohnson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997043">
			July 10, 2012 at 1:19 am</a>		</div>

		<p>Using a hack to fix broken components is how horrendous hacks get introduced into the codebase. When you start down this path there will be someone who curses the day you were born when they inherit your code.</p>
<p>The correct thing to do is file a bug with the people who wrote the component. If they don&#39;t answer your calls, deprecate the use of the component &#8211; you can&#39;t have your app rely on components that aren&#39;t supported or updated when you find bugs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997053">
				<div id="div-comment-997053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Shmakov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997053">
			July 10, 2012 at 3:43 am</a>		</div>

		<p>Another alternative to Detours is an open source EasyHook library <a rel="nofollow" target="_new" href="http://easyhook.codeplex.com" rel="nofollow">http://easyhook.codeplex.com</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997063">
				<div id="div-comment-997063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pablo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997063">
			July 10, 2012 at 6:03 am</a>		</div>

		<p>James, I understand your point but it isn&#39;t always an alternative. I work supporting legacy applications in different platforms and you can&#39;t believe the level of lock-in that enterprises have to some technologies.</p>
<p>They have to keep things working and they don&#39;t migrate their systems just because they cannot make these applications work in the new environments.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997073">
				<div id="div-comment-997073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@James Johnson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997073">
			July 10, 2012 at 7:13 am</a>		</div>

		<blockquote><p>
  &gt; Using a hack to fix broken components is how horrendous hacks get introduced into the codebase.
</p></blockquote>
<p>Sometimes it&#39;s also how products get a v1.0 released six months before the competition and takes all the market instead of getting the company on the long list of chapter 11 appliants.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997093">
				<div id="div-comment-997093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997093">
			July 10, 2012 at 7:26 am</a>		</div>

		<p>Actually, in this case, the correct thing to do is rewrite much of the software in question. &nbsp;Maybe this will happen at some point, but it would be a significant, time-consuming, and expensive undertaking. &nbsp;Until then &#8211; yes, it is a hack. &nbsp;Along with many other unpleasant hacks already in the codebase that I have to deal with.</p>
<p>Since that hasn&#39;t happened yet, I did what I did to work around an issue in a 12-year-old legacy component used in a similar 12-year-old legacy development environment that (1) we don&#39;t have source code to, (2) the vendor of said component has been bought out twice, and would have no interest in modifying such an old component when newer components exist that do the same task.</p>
<p>Someday, it will be moved to something newer, and the old component and API hooking can then be eliminated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997153">
				<div id="div-comment-997153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997153">
			July 10, 2012 at 8:08 am</a>		</div>

		<p><a rel="nofollow" target="_new" href="http://www.c2.com/cgi/wiki?AspectOrientedProgramming" rel="nofollow">http://www.c2.com/&#8230;/wiki</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997253">
				<div id="div-comment-997253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997253">
			July 10, 2012 at 11:55 am</a>		</div>

		<blockquote><p>
  There&#39;s no 64-bit immediate JMP instruction,
</p></blockquote>
<p>I assume you can still push a qword and then RET&#8230;</p>
<blockquote><p>
  and there&#39;s not necessarily 64 bits worth of NOP instructions before function entrypoints.
</p></blockquote>
<p>In the general case (not just what a particular compiler generates), I&#39;m not sure I see why this isn&#39;t a problem on x86 too&#8230; &nbsp;In general rewriting binary code is not easy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997293">
				<div id="div-comment-997293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997293">
			July 10, 2012 at 2:32 pm</a>		</div>

		<p>@Anon: You can push a 64-bit register, but you cannot push an immediate 64-bit value (the 64-bit immediate push instruction sign-extends a 32-bit immediate operand. And no, you can&#39;t just push two 32-bit values. There&#39;s no 32-bit PUSH instruction in 64-bit mode.) So now you have to push a register, load it with a 64-bit value, push that, then RET to a function with a custom prologue that will pop that register back. This turns out to be a lot of bytes. And all this ignores the fact that you might need to rewrite an immediate CALL or JMP instruction in the code you overwrote. (USER32!SetCaretPos has one of those.)</p>
<p>Obviously, though, it&#39;s not impossible. I&#39;ve got working code that does it in the limited cases for which we needed it.</p>
<p>In the general case, not having enough NOPs could be a problem on x86. In the specific case of hooking OS functions, it&#39;s not because of the hot patching stuff referred to above.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997303">
				<div id="div-comment-997303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997303">
			July 10, 2012 at 2:40 pm</a>		</div>

		<p>@parkrrr: 12 bytes</p>
<p>mov rax, immed64</p>
<p>jmp rax</p>
<p>At function prolog, rax may be scribbled safely if the normal calling convention is in use.</p>
<p>The 64 bit function prologs seem to be almost always hotpatchable as though there was an intended way to do it, but it changes from one version to the next (and one routine to the next).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997313">
				<div id="div-comment-997313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997313">
			July 10, 2012 at 2:59 pm</a>		</div>

		<p>@AC &quot;If the interface they export is the same, it should be possible, I think, just like in COM where you can pass any old object to a function as long as it supports the interface the function wants.&quot;</p>
<p>Functions aren&#39;t objects, they aren&#39;t interfaces, and they aren&#39;t modules. What happens if you replace HeapAlloc but not HeapFree? And you don&#39;t know how the various functions might interact with each other internally, or what undocumented data structures they might touch.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997323">
				<div id="div-comment-997323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997323">
			July 10, 2012 at 4:49 pm</a>		</div>

		<p>@Random832:</p>
<p>Well, if someone wanted to shim a function then they would have to know what they are doing and make any relevent shims too. I guess this is something that should be rather obvious, probably was to AC too, but this obvious restraint wasn&#39;t quite as obvious for you.</p>
<p>I also think he was heavily hinting at third party DLLs more than hooking Windows functions. I know the theory is the same, it is hard to know how things work internally, but there could be mitigating circumstances, like an ex-employee who knows the application.</p>
<p>Anyway.</p>
<p>@AC:</p>
<p>Yes, theoretically, if you match up calling conventions and parameters then it would be possible to hook a function that way. This is how IAT patching works. Of course, IAT patching has its own problems (like how you have to patch before you call the function once).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997343">
				<div id="div-comment-997343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997343">
			July 10, 2012 at 7:14 pm</a>		</div>

		<p>Raymond&#39;s right on this one. &nbsp;For everyone&#39;s sake, don&#39;t hook functions in production software. &nbsp;Debugging the crap that comes up because some applications like hooking Windows APIs is really annoying. &nbsp;I get asked to figure this stuff out on occasion, because not many programmers understand how it all works.</p>
<p>The only time I&#39;ve ever done API hooking in production non-diagnostic software was to hook KiUserExceptionDispatcher in Windows 2000 to support vectored exception handling until our customers could upgrade to XP or later. &nbsp;The hook code wasn&#39;t run in later versions of Windows, instead calling the proper API (AddVectoredExceptionHandler).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997353">
				<div id="div-comment-997353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antariy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997353">
			July 10, 2012 at 8:03 pm</a>		</div>

		<p>&gt; Joshua posted to the Suggestion Box, &quot;Around the time of WinXP SP2 x86, the</p>
<p>&gt; API hook mechanism was standardized. Why wasn&#39;t the same thing done for x64?&quot;</p>
<p>&gt;</p>
<p>&gt; Who said it was standardized for x86?</p>
<p>I suppose he means a hotpatching feature, i.e. a link-time padding before</p>
<p>functions &#8211; well known &quot;add edi,edi&quot;. This takes 2 bytes, plus 3 bytes of the</p>
<p>standard prologue &quot;push ebp / mov ebp,esp&quot; in total there is a space for 5 bytes</p>
<p>relative jump &quot;db 0E9h, xx, xx, xx, xx&quot; which would be written by hooking software</p>
<p>to redirect the execution path to its own code. With having this de facto</p>
<p>&quot;standard&quot; it is easy to pass the control back from the hook to the original code</p>
<p>&#8211; just execute standard prologue and jump to &quot;original_function_entry_point+5&quot;.</p>
<p>Of course, the way of functions padding is not the true standard, but it actually</p>
<p>simplifies hooking routines &#8211; there is no need to include an instructions length</p>
<p>disassembler into code which writes redirection.</p>
<p>As for x64 &#8211; there is no such a simple way to write a redirection, because of</p>
<p>*still-4GB-relative* nature of the &quot;jmp xxxxxxxx&quot; instruction. The hook code</p>
<p>injected into the process could theoretically be at the address which lies far</p>
<p>away from the +2GB/-2GB bounds relative to the function entry point.</p>
<p>So, there is need in some other code, like:</p>
<p>push rax</p>
<p>mov rax,1234567890ABCDEFh</p>
<p>xchg rax,[rsp]</p>
<p>ret</p>
<p>In this example XCHG #LOCK delay will not noticeable affect the performance</p>
<p>especially if hooking code does &quot;heavy&quot; logging I/O etc, also this code</p>
<p>invalidates the CPU backtrace cashe (it uses RET with the address was not pushed</p>
<p>by a call), so it will have more performace impact that &quot;jmp xxxxxxxx&quot; anyway.</p>
<p>It does preserve RAX, but takes 13 bytes (with the prologue size difference),</p>
<p>which probably decided being &quot;too much to write some padding junk of this size&quot; :)</p>
<div class="post">[<i>The question is, does the hook function itself contain the &quot;mov edi, edi&quot; instruction + 5 nop bytes? And when the hook function unhooks, does it look at <span style="text-decoration:underline;">its own</span> nop bytes and copy them to the original hooked function? Without that, you still have the problem that you can&#39;t have two people hooking the same function. The &quot;mov edi, edi&quot; and 5 nop bytes <a href="http://blogs.msdn.com/b/ishai/archive/2004/06/24/165143.aspx" rel="nofollow">are for servicing, not for hooking</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997453">
				<div id="div-comment-997453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997453">
			July 11, 2012 at 8:47 am</a>		</div>

		<p>[And when the hook function unhooks]</p>
<p>Since when does this kind of hook unhook? I understood it as being as one-way as a TSR hook from the DOS days.</p>
<p>[The &quot;mov edi, edi&quot; and 5 nop bytes are for servicing]</p>
<p>Since the only thing I&#39;m using it for is fixing bugs that I&#39;m waiting for a fix for, I could call this servicing.</p>
<p>On a slightly different tack, Raymond is wise to not dive too deep into the debate between hook and no-hook. Any debate whose origin is idealist vs. pragmatist cannot be won by either side.</p>
<div class="post">[<i>No, you&#39;re not servicing. You&#39;re hooking. If a hotfix comes in that wants to service the function (say to fix a security flaw), it will hotpatch the function and collide with your hook. Result: Who knows!? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997603">
				<div id="div-comment-997603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Guest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120709-00/?p=7173#comment-997603">
			July 12, 2012 at 5:16 am</a>		</div>

		<p>IIRC some Sysinternals tools uses Detours, is that &#39;production use&#39; ?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

