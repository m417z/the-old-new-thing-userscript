<html>
<head>
<title>Why can't you treat a FILETIME as an __int64?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t you treat a FILETIME as an __int64?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 25, 2004 / year-entry #318</td></tr>
<tr><td><b>Tags:</b></td><td>code;time</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>27</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The FILETIME structure represents a 64-bit value in two parts: typedef struct _FILETIME { DWORD dwLowDateTime; DWORD dwHighDateTime; } FILETIME, *PFILETIME; You may be tempted to take the entire FILETIME structure and access it directly as if it were an __int64. After all, its memory layout exactly matches that of a 64-bit (little-endian) integer. Some...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://msdn.microsoft.com/library/en-us/sysinfo/base/filetime_str.asp">
The FILETIME structure</a> represents a 64-bit value in two parts:
</p>
<pre>
typedef struct _FILETIME {
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
} FILETIME, *PFILETIME;
</pre>
<p>
You may be tempted to take the entire <code>FILETIME</code> structure
and access it directly
as if it were an <code>__int64</code>.
After all, its memory layout exactly matches
that of a 64-bit (little-endian) integer.
<a HREF="http://www.codeproject.com/datetime/winapi_datetime_ops.asp">
Some people have written sample code that does exactly this</a>:</p>
<pre>
<i>pi = (__int64*)&amp;ft; // WRONG
(*pi) += (__int64)num*datepart; // WRONG</i>
</pre>
<p>
Why is this wrong?
</p>
<p>
Alignment.
</p>
<p>
Since a <code>FILETIME</code> is a structure containing two
<code>DWORD</code>s, it requires
only 4-byte alignment, since that is sufficient to put
each <code>DWORD</code>
on a valid <code>DWORD</code> boundary.
There is no need for the first <code>DWORD</code>
to reside on an 8-byte boundary.  And in fact, you've probably already
used a structure where it doesn't:
<a HREF="http://msdn.microsoft.com/library/en-us/fileio/base/win32_find_data_str.asp">
The WIN32_FIND_DATA structure</a>.
</p>
<pre>
typedef struct _WIN32_FIND_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    TCHAR  cFileName[ MAX_PATH ];
    TCHAR  cAlternateFileName[ 14 ];
} WIN32_FIND_DATA, *PWIN32_FIND_DATA, *LPWIN32_FIND_DATA;
</pre>
<p>
Observe that the three <code>FILETIME</code> structures appear at offsets 4,
12, and 20 from the beginning of the structure.  They have been
thrown off 8-byte alignment by the <code>dwFileAttributes</code> member.
</p>
<p>
Casting a <code>FILETIME</code> to
an <code>__int64</code> therefore can (and in the <code>WIN32_FIND_DATA</code>
case, <strong>will</strong>) create a misaligned pointer.
Accessing a misaligned pointer will raise a
<code>STATUS_DATATYPE_MISALIGNMENT</code> exception on architectures which
require alignment.
</p>
<p>
Even if you are on a forgiving platform that
performs automatic alignment fixups, you can still run into trouble.
More on this and other consequences of alignment in the next few entries.
</p>
<p>
<strong>Exercise</strong>: Why are the
<code>LARGE_INTEGER</code> and
<code>ULARGE_INTEGER</code> structures not affected?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-205813">
				<div id="div-comment-205813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.differentpla.net' rel='external nofollow' class='url'>Roger Lipscombe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205813">
			August 25, 2004 at 7:17 am</a>		</div>

		<p>LARGE_INTEGER and ULARGE_INTEGER are unions, and the C standard states that they must be aligned suitably for the largest contained member &#8212; which is a LONLONG or ULONGLONG, respectively.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-205823">
				<div id="div-comment-205823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vatsan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205823">
			August 25, 2004 at 7:43 am</a>		</div>

		<p>And that is probably why the C++ casts static_cast&lt;&gt; and reinterpret_cast&lt;&gt; got invented. If only you&#8217;d used them, there would never have been an a &#8216;subtle&#8217; bug in the code to begin with. You&#8217;d have been forced to use reinterpret_cast&lt;&gt; and it would have become an &#8216;obvious&#8217; problem spot.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-205843">
				<div id="div-comment-205843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.differentpla.net' rel='external nofollow' class='url'>Roger Lipscombe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205843">
			August 25, 2004 at 8:23 am</a>		</div>

		<p>Oh, and maybe you&#8217;ll be able to answer this one, Raymond. Why 100ns units? Why not 1ns, or 1000ns? Is it a Dave Cutler VMS -&gt; NT thing?</p>
<p>Moreover, what do you call these things? Ticks? Shakes?</p>
<p>Constants like NUM_100NS_UNITS_PER_SECOND are ugly. Currently, I&#8217;m using FILETIME_TICKS_PER_SECOND, but I&#8217;d prefer something catchier.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-205853">
				<div id="div-comment-205853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205853">
			August 25, 2004 at 8:46 am</a>		</div>

		<p>Because 100ns is &quot;good enough&quot;.  You can represent any date from the 1601 to the year 20,000 in 64bits worth of 100ns units.</p>
<p>1ns is too small, it runs out in 200 years.  1000ns is too granular for some clock speeds (it&#8217;s 1/10th of a millisecond).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-205863">
				<div id="div-comment-205863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SteveM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205863">
			August 25, 2004 at 8:49 am</a>		</div>

		<p>Wow &#8211; what field do you work in Larry? If any of my programs are still running in 200 years on a Windows platform I&#8217;ll be well happy!</p>
<p>Hmm. Bet that&#8217;s what they said about the 2 digit year field too&#8230;. :-/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-205873">
				<div id="div-comment-205873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205873">
			August 25, 2004 at 9:19 am</a>		</div>

		<p>I have been using a union to &quot;convert&quot; from FILETIME to integer. I wonder whether this is officially supported or whether I should be using some other technique?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-205883">
				<div id="div-comment-205883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205883">
			August 25, 2004 at 9:29 am</a>		</div>

		<p>Depends how you use that union.  If</p>
<p>union FILETIMEorLONGLONG {<br />
<br /> FILETIME ft;<br />
<br /> __int64 i64;<br />
<br />} u;<br />
<br />u.ft = ft;<br />
<br />result = u.i64;</p>
<p>that&#8217;s okay. But if you use</p>
<p>result = ((union FILETIMEorLONGLONG*)&amp;ft)-&gt;i64;</p>
<p>then you&#8217;re back where you started.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-205893">
				<div id="div-comment-205893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205893">
			August 25, 2004 at 9:30 am</a>		</div>

		<p>I use the former, of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-205923">
				<div id="div-comment-205923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Merle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205923">
			August 25, 2004 at 10:42 am</a>		</div>

		<p>Larry, 1000ns = 1us (microsecond) = 0.001ms (millisecond).  Metric is gaps of 1000.  So 100ns = 1/10us.</p>
<p>1/10ms would be 100,000ns.</p>
<p>Apologia for using us instead of [mu]s, which is hard to type.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-205933">
				<div id="div-comment-205933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aarrgghh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205933">
			August 25, 2004 at 12:26 pm</a>		</div>

		<p>SteveM: 200 years from 1601 may not be as far in the future as you think.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-205943">
				<div id="div-comment-205943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205943">
			August 25, 2004 at 12:31 pm</a>		</div>

		<p>The 100ns time slices with an origin in 1604 are actually the 64 bit DCE time type.  I believe NT copied them from DCE, but it may have been the other way round.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-205833">
				<div id="div-comment-205833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205833">
			August 25, 2004 at 8:16 am</a>		</div>

		<p>Just to be overly clear, it is also not correct to cast a FILETIME* to ULARGE_INTEGER*.  Instead, code like the following should be used:</p>
<p>FILETIME ft;<br />
<br />ULARGE_INTEGER temp;<br />
<br />temp.HighPart = ft.dwHighDateTime;<br />
<br />temp.LowPart = ft.dwLowDateTime;<br />
<br />/* now ready to use temp.QuadPart */</p>
<p>right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-205953">
				<div id="div-comment-205953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205953">
			August 25, 2004 at 3:33 pm</a>		</div>

		<p>Anonymous Coward.  Nice idea, but NT&#8217;s time starts at January 1, 1601, not 1604.</p>
<p>I just looked it up in the NT OS/2 Timer specification (which I happen to have on my desk), it&#8217;s more likely to have come from VMS than from DCE.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-205903">
				<div id="div-comment-205903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.developernotes.com/' rel='external nofollow' class='url'>Nick Parker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205903">
			August 25, 2004 at 10:15 am</a>		</div>

		<p>What about this?</p>
<p>&lt;pre&gt;<br />
<br />	FILETIME start, end;<br />
<br />	SYSTEMTIME st;<br />
<br />	GetSystemTime(&amp;st);<br />
<br />	SystemTimeToFileTime(&amp;st, &amp;start);<br />
<br />	// Some long process<br />
<br />	GetSystemTime(&amp;st);<br />
<br />	SystemTimeToFileTime(&amp;st, &amp;end);<br />
<br />	ULARGE_INTEGER time_start = *(ULARGE_INTEGER*)&amp;start;<br />
<br />	ULARGE_INTEGER time_end   = *(ULARGE_INTEGER*)&amp;end;<br />
<br />	__int64 i64time_start    = *(__int64 *)&amp;time_start;<br />
<br />	__int64 i64time_end      = *(__int64 *)&amp;time_end;<br />
<br />	__int64 i64time_diff_ns  = i64time_end &#8211; i64time_start; // in 100 nano seconds<br />
<br />	__int64 i64time_diff_ms  = i64time_diff_ns / 10 / 1000; // in milli seconds<br />
<br />	__int64 i64time_diff_sec = i64time_diff_ms / 1000;      // in seconds<br />
<br />&lt;/pre&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-205913">
				<div id="div-comment-205913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205913">
			August 25, 2004 at 10:34 am</a>		</div>

		<p>Nick, to quote RJ: &quot;Just to be overly clear, it is also not correct to cast a FILETIME* to ULARGE_INTEGER*&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-205963">
				<div id="div-comment-205963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.rotd.org/' rel='external nofollow' class='url'>Andreas Magnusson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205963">
			August 25, 2004 at 6:07 pm</a>		</div>

		<p>Wow, that&#8217;s a funny coincidence, I was just working with FILETIME:s today (and it&#8217;s not something I do every day&#8230;) (and yes, I don&#8217;t cast, I copy)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-205983">
				<div id="div-comment-205983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-205983">
			August 25, 2004 at 9:38 pm</a>		</div>

		<p>You can use a union like the FILETIMEorLONGLONG above and pass its FILETIME member to the API.  (though obviously not for WIN32_FIND_DATA)  Then such casts are safe and, in fact, unnecessary because you&#8217;ve already got the other half of the union.  Of course neither way is guaranteed by the language to work&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-206003">
				<div id="div-comment-206003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Grant</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-206003">
			August 26, 2004 at 1:42 am</a>		</div>

		<p>I&#180;m working with time right now in C++ but I&#180;ve really only programmed in Java before. Is there any simple function that returns the time in milliseconds, like System.currentTimeMillis() in Java? Can I get this as one long value or do I need some struct?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-206013">
				<div id="div-comment-206013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-206013">
			August 26, 2004 at 2:21 am</a>		</div>

		<p>union FILETIMEorLONGLONG {<br />
<br />FILETIME ft;<br />
<br />__int64 i64;<br />
<br />} u;<br />
<br />u.ft = ft;<br />
<br />result = u.i64;</p>
<p>The Standard (section 9.5) says &quot;In a union, at most one of the data members can be active at any time, that is, the value of at most one of the data members can be stored in a union at any time.&quot;</p>
<p>I know that the above code will work, but is it guaranteed to work?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-206023">
				<div id="div-comment-206023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ejor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-206023">
			August 26, 2004 at 3:07 am</a>		</div>

		<p>Ok but what about in wininternl.h</p>
<p>// use the Win32 API instead<br />
<br />//     GetSystemTimeAsFileTime<br />
<br />//<br />
<br />NTSTATUS<br />
<br />NtQuerySystemTime (<br />
<br />    OUT PLARGE_INTEGER SystemTime<br />
<br />    );</p>
<p>//<br />
<br />// use the Win32 API instead<br />
<br />//     LocalFileTimeToFileTime<br />
<br />//<br />
<br />NTSTATUS<br />
<br />RtlLocalTimeToSystemTime (<br />
<br />    IN PLARGE_INTEGER LocalTime,<br />
<br />    OUT PLARGE_INTEGER SystemTime<br />
<br />    );</p>
<p>//<br />
<br />// use the Win32 API instead<br />
<br />//     SystemTimeToFileTime to convert to FILETIME structures<br />
<br />//     copy the resulting FILETIME structures to ULARGE_INTEGER structures<br />
<br />//     perform the calculation<br />
<br />//<br />
<br />BOOLEAN<br />
<br />RtlTimeToSecondsSince1970 (<br />
<br />    PLARGE_INTEGER Time,<br />
<br />    PULONG ElapsedSeconds<br />
<br />    );</p>
<p>Does Microsoft do the same mistake ?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-206043">
				<div id="div-comment-206043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weatherley.net' rel='external nofollow' class='url'>JamesW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-206043">
			August 26, 2004 at 6:07 am</a>		</div>

		<p>Larry Osterman: NT&#8217;s time starts at January 1, 1601, not 1604 [snip] it&#8217;s more likely to have come from VMS than from DCE.</p>
<p>VMS time begins at Midnight Wednesday, November 17, 1858 and ends on 31-JUL-31086 02:48:05.47. NT does copy the 100ns granularity though. There is some logic in the VMS base date too as it is also the base date of the Modified Julian Day system making VMS time astronomer friendly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-206053">
				<div id="div-comment-206053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://typicus.org' rel='external nofollow' class='url'>dada@typicus.org (Stephane Lajoie)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-206053">
			August 26, 2004 at 6:15 am</a>		</div>

		<p>Stew: it is not guaranteed to work by the language because it assumes a specific byte ordering (little-endian). It may be guaranteed to work by the Windows Platform SDK if it happens to reverse the FILETIME structure depending on your CPU, but I doubt that.</p>
<p>This makes Raymond&#8217;s post sound a little strange because he seems to be saying that it&#8217;s ok to assume little-endian but that you shouldn&#8217;t assume mis-aligned access will be forgiven. In my mind these two assumptions are equally bad. Maybe I just mis-read the whole thing&#8230;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-206063">
				<div id="div-comment-206063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gkdada</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-206063">
			August 26, 2004 at 7:15 am</a>		</div>

		<p>Hey, I go like this all the time (to save some clock cycles)</p>
<p>ULONGLONG ullCurTime;<br />
<br />GetSystemTimeAsFileTime((FILETIME*)&amp;ullCurTime);</p>
<p>You mean to say, this is wrong?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-206083">
				<div id="div-comment-206083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://typicus.org' rel='external nofollow' class='url'>St&#233;phane Lajoie</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-206083">
			August 26, 2004 at 7:46 am</a>		</div>

		<p>gkdada: it is wrong in theory because C doesn&#8217;t provide the guarantees for this. It works fine in practice on the platforms that are currently supported by Windows. The alignment problem comes into play only when casting the other way (from FILETIME to ULONGLONG).</p>
<p>And that also provides the answer to my question above: why is endianness unimportant and alignment important? Because all currently supported Windows platforms are little-endian but some of them will fault on a mis-aligned access.</p>
<p>Still, I think it&#8217;s a shame that NT strayed from the goal of being portable. IBM&#8217;s upcoming processors look interesting but only Linux and OS X will be able to take advantage. If it weren&#8217;t for AMD providing some competition, Windows would not be winning those TPC benchmarks anymore (I&#8217;m not saying they win them on AMD processors, I&#8217;m saying that AMD&#8217;s competition keeps Intel on their toes).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-206103">
				<div id="div-comment-206103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://typicus.org' rel='external nofollow' class='url'>St&#233;phane Lajoie</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-206103">
			August 26, 2004 at 7:58 am</a>		</div>

		<p>Gah! Just checked the TPC results (hadn&#8217;t been there in a while, that&#8217;s not exactly on my daily reading list :)) and Windows isn&#8217;t winning anymore. Maybe it&#8217;s time to prod hp into making a few submissions, as the Windows results are the oldest in the top ten.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-206033">
				<div id="div-comment-206033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mailto:iain@midas-ndt.co.uk' rel='external nofollow' class='url'>Iain Clarke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-206033">
			August 26, 2004 at 4:03 am</a>		</div>

		<p>ejor:<br />
<br />Does Microsoft do the same mistake ?<br />
<br />// copy the resulting FILETIME structures to ULARGE_INTEGER structures </p>
<p>No.<br />
<br />In NtQuerySystemTime, you pass a pointer<br />
<br />to a PLARGE_INTEGER which will be already<br />
<br />aligned.<br />
<br />In RtlLocalTimeToSystemTime you similarly pass already aligned pointers.<br />
<br />And the comments for RtlTimeToSecondsSince1970 say to *copy* between FILETIME and ULARGE_INTEGER structures. Not *cast*.</p>
<p>Iain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-269493">
				<div id="div-comment-269493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/larryosterman/archive/2005/04/07/406252.aspx' rel='external nofollow' class='url'>Larry Osterman's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040825-00/?p=38053#comment-269493">
			April 7, 2005 at 1:55 pm</a>		</div>

		<p>I got an email the other day from someone (who will remain nameless) complaining about the fact that&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

