<html>
<head>
<title>Drawing a monochrome bitmap with transparency</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Drawing a monochrome bitmap with transparency</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 3, 2005 / year-entry #210</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050803-16/?p=34733</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, I left you with a brief puzzle. Here are two approaches. I am not a GDI expert, so there may be even better solutions out there. To emphasize the transparency, I'll change the window background color to the application workspace color. BOOL WinRegisterClass(WNDCLASS *pwc) { pwc->hbrBackground = (HBRUSH)(COLOR_APPWORKSPACE + 1); return __super::WinRegisterClass(pwc); }...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/08/02/446605.aspx">
Last time, I left you with a brief puzzle</a>.
Here are two approaches.
I am not a GDI expert, so there may be even better solutions
out there.
To emphasize the transparency, I'll change the window background
color to the application workspace color.
</p>
<pre>
 BOOL WinRegisterClass(WNDCLASS *pwc)
 {
  pwc-&gt;hbrBackground = (HBRUSH)(COLOR_<font COLOR=blue>APPWORKSPACE</font> + 1);
  return __super::WinRegisterClass(pwc);
 }
</pre>
<p>
<strong>Method&nbsp;1</strong>:
A big
<a HREF="http://msdn.microsoft.com/library/en-us/gdi/bitmaps_229g.asp">
<code>MaskBlt</code></a>.
</p>
<pre>
void RootWindow::PaintContent(PAINTSTRUCT *pps)
{
 HDC hdcMem = CreateCompatibleDC(pps-&gt;hdc);
 if (hdcMem) {
  int cxCheck = GetSystemMetrics(SM_CXMENUCHECK);
  int cyCheck = GetSystemMetrics(SM_CYMENUCHECK);
  HBITMAP hbmMono = CreateBitmap(cxCheck, cyCheck, 1, 1, NULL);
  if (hbmMono) {
   HBITMAP hbmPrev = SelectBitmap(hdcMem, hbmMono);
   if (hbmPrev) {
    RECT rc = { 0, 0, cxCheck, cyCheck };
    DrawFrameControl(hdcMem, &amp;rc, DFC_MENU, DFCS_MENUCHECK);
    COLORREF clrTextPrev = SetTextColor(pps-&gt;hdc,
                                     GetSysColor(COLOR_MENUTEXT));
    <font COLOR=blue><strike>// COLORREF clrBkPrev = SetBkColor(pps-&gt;hdc,</strike>
    <strike>//                                  GetSysColor(COLOR_MENU));</strike>
    MaskBlt(pps-&gt;hdc, 0, 0, cxCheck, cyCheck,
           hdcMem, 0, 0, hbmMono, 0, 0
           MAKEROP4(0x00AA0029, SRCCOPY));
    <strike>// SetBkColor(pps-&gt;hdc, clrBkPrev);</strike></font>
    SetTextColor(pps-&gt;hdc, clrTextPrev);
    SelectBitmap(hdcMem, hbmPrev);
   }
   DeleteObject(hbmMono);
  }
  DeleteDC(hdcMem);
 }
}
</pre>
<p>
This has the least amount of typing but feels like
overkill to me, using a quaternary raster operation
as if were a ternary, just because I didn't want to create a
pattern brush.
(The raster operation 0x00AA0029 is the NOP operator; it leaves
the destination alone.  I didn't have this memorized;
I looked it up
<a HREF="http://msdn.microsoft.com/library/en-us/gdi/pantdraw_6n77.asp">
in the documentation</a>.)
The <code>MAKEROP4</code> says that for each white pixel in the mask,
do nothing (NOP), and for each black pixel, do a <code>SRCCOPY</code>.
</p>
<p>
Notice that the background color is never used
(since it's supposed to be transparent); consequently, we can delete
the code that sets and restores the DC's background color.
</p>
<p>
<strong>Method&nbsp;2</strong>:
The traditional two-step.
</p>
<pre>
void RootWindow::PaintContent(PAINTSTRUCT *pps)
{
 HDC hdcMem = CreateCompatibleDC(pps-&gt;hdc);
 if (hdcMem) {
  int cxCheck = GetSystemMetrics(SM_CXMENUCHECK);
  int cyCheck = GetSystemMetrics(SM_CYMENUCHECK);
  HBITMAP hbmMono = CreateBitmap(cxCheck, cyCheck, 1, 1, NULL);
  if (hbmMono) {
   HBITMAP hbmPrev = SelectBitmap(hdcMem, hbmMono);
   if (hbmPrev) {
    RECT rc = { 0, 0, cxCheck, cyCheck };
    DrawFrameControl(hdcMem, &amp;rc, DFC_MENU, DFCS_MENUCHECK);
    COLORREF clrTextPrev = SetTextColor(pps-&gt;hdc, <font COLOR=blue>RGB(0,0,0)</font>);
    COLORREF clrBkPrev = SetBkColor(pps-&gt;hdc, <font COLOR=blue>RGB(255,255,255)</font>);
    <font COLOR=blue>BitBlt(pps-&gt;hdc, cxCheck, 0, cxCheck, cyCheck,
           hdcMem, 0, 0, SRCAND);
    SetTextColor(pps-&gt;hdc, GetSysColor(COLOR_MENUTEXT));
    SetBkColor(pps-&gt;hdc, RGB(0,0,0));
    BitBlt(pps-&gt;hdc, cxCheck, 0, cxCheck, cyCheck,
           hdcMem, 0, 0, SRCPAINT);</font>
    SetBkColor(pps-&gt;hdc, clrBkPrev);
    SetTextColor(pps-&gt;hdc, clrTextPrev);
    SelectBitmap(hdcMem, hbmPrev);
   }
   DeleteObject(hbmMono);
  }
  DeleteDC(hdcMem);
 }
}
</pre>
<p>
This is the traditional two-step blit.
The first erases the pixels that are about to be overwritten
by setting the foreground to black and background to white,
then using <code>SRCAND</code>.
This has the effect of erasing all the foreground pixels to zero
while leaving the background intact.
The second blit does the same, but with <code>SRCPAINT</code>.
This means that the background pixels need to be treated as black,
so that when they are "or"d with the destination, the destination
pixels are unchanged.
The foreground pixels get the desired foreground color.
</p>
<p>
This method can be shortened by negating the first blit,
reversing the sense of foreground and background, so that the
color black doesn't have to move between the background color
and the text color.
</p>
<pre>
void RootWindow::PaintContent(PAINTSTRUCT *pps)
{
 HDC hdcMem = CreateCompatibleDC(pps-&gt;hdc);
 if (hdcMem) {
  int cxCheck = GetSystemMetrics(SM_CXMENUCHECK);
  int cyCheck = GetSystemMetrics(SM_CYMENUCHECK);
  HBITMAP hbmMono = CreateBitmap(cxCheck, cyCheck, 1, 1, NULL);
  if (hbmMono) {
   HBITMAP hbmPrev = SelectBitmap(hdcMem, hbmMono);
   if (hbmPrev) {
    RECT rc = { 0, 0, cxCheck, cyCheck };
    DrawFrameControl(hdcMem, &amp;rc, DFC_MENU, DFCS_MENUCHECK);
    COLORREF clrTextPrev = SetTextColor(pps-&gt;hdc, <font COLOR=blue>RGB(255,255,255)</font>);
    COLORREF clrBkPrev = SetBkColor(pps-&gt;hdc, <font COLOR=blue>RGB(0,0,0)</font>);
    <font COLOR=blue>BitBlt(pps-&gt;hdc, cxCheck, 0, cxCheck, cyCheck,
           hdcMem, 0, 0, 0x00220326); // DSna
    SetTextColor(pps-&gt;hdc, GetSysColor(COLOR_MENUTEXT));
    BitBlt(pps-&gt;hdc, cxCheck, 0, cxCheck, cyCheck,
           hdcMem, 0, 0, SRCPAINT);</font>
    SetBkColor(pps-&gt;hdc, clrBkPrev);
    SetTextColor(pps-&gt;hdc, clrTextPrev);
    SelectBitmap(hdcMem, hbmPrev);
   }
   DeleteObject(hbmMono);
  }
  DeleteDC(hdcMem);
 }
}
</pre>
<p>
Whether this shortening is actually an overall
improvement is difficult to tell.
It's possible that some display drivers have a highly optimized
<code>SRCAND</code> handler whereas they are less likely to have
an optimized <code>0x00220326</code> handler.
</p>
<p>
(Exercise: Why can't you instead reverse the second blit,
converting it to a <code>MERGEPAINT</code>?)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-294173">
				<div id="div-comment-294173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Moi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050803-16/?p=34733#comment-294173">
			August 3, 2005 at 10:09 am</a>		</div>

		<p>Why is it that I have a hard time taking seriously a webpage (as linked in the article) whose filename is &quot;pantdraw&quot;? :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-294203">
				<div id="div-comment-294203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chump</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050803-16/?p=34733#comment-294203">
			August 3, 2005 at 11:51 am</a>		</div>

		<p>I&#8217;m scared to click the link in case I get busted by the &quot;URL cops&quot; in my company. 8))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-294253">
				<div id="div-comment-294253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050803-16/?p=34733#comment-294253">
			August 3, 2005 at 12:26 pm</a>		</div>

		<p>On CE (therefore with very limited font options) I needed to emulate a monospaced character cell display, but with colour &#8211; the font also needs to be user-modifiable (the platform emulated permitted this). The font is designed as a monochrome bitmap &#8211; black represents text, white is background.</p>
<p>I used to have a horrible sequence of BitBlts with a temporary DC to do the composition in, for coloured (not black or white) text and/or backgrounds. Thanks to your article on ternary ROPs I managed to work out a single ROP code that would do most of the work in one go. I forget exactly what it is &#8211; I think the official RPN definition involves XORs, which I&#8217;d never have figured out myself. I&#8217;d always assumed that the only supported ROP3s were the ones listed in the BitBlt documentation.</p>
<p>I&#8217;m still using the &#8216;special case&#8217; code that does black-on-white and white-on-black (SRCCOPY and NOTSRCCOPY respectively). In those cases I don&#8217;t need to do a background fill first, nor select different brushes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-295343">
				<div id="div-comment-295343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://oswaldproject.blogspot.com' rel='external nofollow' class='url'>D. Philippe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050803-16/?p=34733#comment-295343">
			August 8, 2005 at 12:44 pm</a>		</div>

		<p>Mike D: Not sure why your CE font options are so limited, unless you&#8217;re distributing to existing PocketPC devices.  Using CE 4.2 (not even 5.0) we have the option of including any TTF font in our platform.</p>
<p>Still, I&#8217;d be interested in knowing what ROP codes you used to paint a b/w modifiable font.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-296613">
				<div id="div-comment-296613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050803-16/?p=34733#comment-296613">
			August 12, 2005 at 3:38 pm</a>		</div>

		<p>Mike D: Sounds like all you needed to do was to set the destination DC&#8217;s colours before using SRCCOPY.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-442243">
				<div id="div-comment-442243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/11/14/1075571.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050803-16/?p=34733#comment-442243">
			November 14, 2006 at 10:00 am</a>		</div>

		<p>The text foreground and background colors play a role.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

