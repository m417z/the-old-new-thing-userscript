<html>
<head>
<title>Modernizing our simple program that retrieves information about the items in the Recycle Bin</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Modernizing our simple program that retrieves information about the items in the Recycle Bin</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 31, 2011 / year-entry #209</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we wrote a simple program to print various properties of the items in the Recycle Bin, and we did so in the classical style, using item ID lists and IShell­Folders. One thing you may have noticed is that a lot of functions take the combination of an IShell­Folder and a PCUITEMID_CHILD. In the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/08/30/10202076.aspx">
we wrote a simple program to print various properties of the items
in the Recycle Bin</a>,
and we did so in the classical style,
using item ID lists and <code>IShell&shy;Folder</code>s.
One thing you may have noticed is that a lot of functions take
the combination of an <code>IShell&shy;Folder</code> and a
<code>PCUITEMID_<wbr>CHILD</code>.
In the shell namespace, operations on items usually happen
by means of the pair (folder, child),
and one of the common mistakes made by beginners is
failing to keep track of the pairing and passing child pidls
to the wrong parent folder.
</p>
<p>
Even if you're not a beginner and are good at keeping track of
which child pidls correspond to which parent folders,
it's still extra work you have to do,
and it means that a lot of functions take two parameters in order to
describe one thing.
</p>
<p>
Enter <code>IShell&shy;Item</code>.
</p>
<p>
The <code>IShell&shy;Item</code> encapsulates the pair (folder, child).
This solves two problems:
</p>
<ol>
<li>You only have to pass one thing around (the <code>IShell&shy;Item</code>)
    instead of two (the <code>IShell&shy;Folder</code> and the
    <code>PCUITEMID_<wbr>CHILD</code>).</p>
<li>By keeping track of the two items as a single unit,
    it reduces the risk that you'll accidentally use a child pidl
    with the wrong parent folder.
</ol>
<p>
Another complexity of the classic shell interface is that there
are a bunch of ways of obtaining COM objects from a shell folder:
</p>
<ul>
<li><code>IShell&shy;Folder::Bind&shy;To&shy;Object</code>
<li><code>IShell&shy;Folder::Bind&shy;To&shy;Storage</code>
<li><code>IShell&shy;Folder::Create&shy;View&shy;Object</code>
<li><code>IShell&shy;Folder::Get&shy;UI&shy;Object&shy;Of</code>
<li><code>IUnknown::<wbr>Query&shy;Interface</code>
    (thanks to the desktop special case we saw last time).
</ul>
<p>
The <code>IShell&shy;Item::<wbr>Bind&shy;To&shy;Handler</code>
interface hides these
special-cases by dealing with them under the covers so you don't have to.
You just call <code>IShell&shy;Item::<wbr>Bind&shy;To&shy;Handler</code>
and it figures
out where to get the object and what weird special cases apply.
(It also takes care of the weird <code>S_FALSE</code> return value
from <code>IShell&shy;Folder::<wbr>Enum&shy;Objects</code>.)
</p>
<p>
And then there's the annoyance of
<code>IShell&shy;Folder::<wbr>Get&shy;Display&shy;Name&shy;Of</code>
using
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/08/23/218837.aspx">
the kooky <code>STRRET</code> structure</a>.
The <code>IShell&shy;Item::<wbr>Get&shy;Display&shy;Name</code>
function encapsulates that
away for you by doing the work to convert that <code>STRRET</code>
into a boring string pointer.
</p>
<p>
First up in modernizing our sample program
is to change <code>Bind&shy;To&shy;Csidl</code> to return a shell item
instead of a shell folder.
</p>
<pre>
HRESULT BindToCsidlItem(int csidl, IShellItem ** ppsi)
{
 *ppsi = NULL;
 HRESULT hr;
 PIDLIST_ABSOLUTE pidl;
 hr = SHGetSpecialFolderLocation(NULL, csidl, &amp;pidl);
 if (SUCCEEDED(hr)) {
  <font COLOR=blue>hr = SHCreateShellItem(NULL, NULL, pidl, ppsi);</font>
  CoTaskMemFree(pidl);
 }
 return hr;
}
</pre>
<p>
But wait, since we're modernizing, we may as well upgrade to
<code>SHGet&shy;Known&shy;Folder&shy;ID&shy;List</code>:
</p>
<pre>
HRESULT BindToKnownFolderItem(REFKNOWNFOLDER rfid, IShellItem ** ppsi)
{
 *ppsi = NULL;
 HRESULT hr;
 PIDLIST_ABSOLUTE pidl;
 hr = SHGetKnownFolderIDList(rfid, 0, NULL, &amp;pidl);
 if (SUCCEEDED(hr)) {
  <font COLOR=blue>hr = SHCreateShellItem(NULL, NULL, pidl, ppsi);</font>
  CoTaskMemFree(pidl);
 }
 return hr;
}
</pre>
<p>
Hey wait, there's a function for this already in Windows&nbsp;7!
It's called <code>SHGet&shy;Known&shy;Folder&shy;Item</code>.
Yay, now we can delete the function entirely.
</p>
<p>
Next, we convert <code>Print&shy;Display&shy;Name</code> to use
<code>IShell&shy;Item</code> and the item-based display name flags
<code>SIGDN</code>.
</p>
<pre>
void PrintDisplayName(IShellItem *psi, SIGDN sigdn, PCTSTR pszLabel)
{
 LPWSTR pszName;
 HRESULT hr = psi-&gt;GetDisplayName(sigdn, &amp;pszName);
 if (SUCCEEDED(hr)) {
  _tprintf(TEXT("%s = %ws\n"), pszLabel, pszName);
  CoTaskMemFree(pszName);
 }
}
</pre>
<p>
And then we convert <code>Print&shy;Detail</code> to use
<code>IShell&shy;Item</code>.
Oh wait, now we've hit a snag:
The <code>IShell&shy;Item</code> interface doesn't have a helper method
that wraps <code>IShell&shy;Folder2::<wbr>Get&shy;Details&shy;Ex</code>.
Fortunately, there is a way to ask <code>IShell&shy;Item</code> to
regurgitate the <code>IShell&shy;Folder</code>
and <code>PITEMID_<wbr>CHILD</code>
that it is wrapping:
You use the
<code>IParent&shy;And&shy;Item::<wbr>Get&shy;Parent&shy;And&shy;Item</code>
method.
</p>
<pre>
void PrintDetail(IShellItem *psi,
    const SHCOLUMNID *pscid, PCTSTR pszLabel)
{
 <font COLOR=blue>IParentAndItem *ppni;
 HRESULT hr = psi-&gt;QueryInterface(IID_PPV_ARGS(&amp;ppni));
 if (SUCCEEDED(hr)) {
  IShellFolder *psf;
  PITEMID_CHILD pidl;
  hr = ppni-&gt;GetParentAndItem(NULL, &amp;psf, &amp;pidl);
  if (SUCCEEDED(hr)) {</font>
   VARIANT vt;
   hr = psf-&gt;GetDetailsEx(pidl, pscid, &amp;vt);
   if (SUCCEEDED(hr)) {
    hr = VariantChangeType(&amp;vt, &amp;vt, 0, VT_BSTR);
    if (SUCCEEDED(hr)) {
     _tprintf(TEXT("%s: %ws\n"), pszLabel, V_BSTR(&amp;vt));
    }
    VariantClear(&amp;vt);
   }
   <font COLOR=blue>psf-&gt;Release();
   CoTaskMemFree(pidl);
  }
 }</font>
}
</pre>
<p>
Wow, it looks like we lost ground there.
Ah, but Windows Vista extends <code>IShell&shy;Item</code> with the
<code>IShell&shy;Item2</code> interface, and that has a bunch of new
methods for retrieving properties.
</p>
<pre>
void PrintDetail(<font COLOR=blue>IShellItem2</font> *psi,
    const SHCOLUMNID *pscid, PCTSTR pszLabel)
{
  <font COLOR=blue>PROPVARIANT vt;
  HRESULT hr = psi-&gt;GetProperty(*pscid, &amp;vt);</font>
  if (SUCCEEDED(hr)) {
   hr = VariantChangeType(&amp;vt, &amp;vt, 0, VT_BSTR);
   if (SUCCEEDED(hr)) {
    _tprintf(TEXT("%s: %ws\n"), pszLabel, V_BSTR(&amp;vt));
   }
   <font COLOR=blue>PropVariantClear(&amp;vt);</font>
  }
 }
}
</pre>
<p>
But wait, there's more.
There's a special accessor just for retrieving properties as strings!
</p>
<pre>
void PrintDetail(IShellItem2 *psi2,
    const SHCOLUMNID *pscid, PCTSTR pszLabel)
{
 <font COLOR=blue>LPWSTR pszValue;
 HRESULT hr = psi2-&gt;GetString(*pscid, &amp;pszValue);</font>
 if (SUCCEEDED(hr)) {
  _tprintf(TEXT("%s: %ws\n"), pszLabel, pszValue);
  <font COLOR=blue>CoTaskMemFree(pszValue);</font>
 }
}
</pre>
<p>
Okay, that's more like it.
Now let's update the main program.
</p>
<pre>
int __cdecl _tmain(int argc, PTSTR *argv)
{
 HRESULT hr = CoInitialize(NULL);
 if (SUCCEEDED(hr)) {
  IShellItem *psiRecycleBin;
  hr = SHGetKnownFolderItem(FOLDERID_RecycleBinFolder, KF_FLAG_DEFAULT,
                            NULL, IID_PPV_ARGS(&amp;psiRecycleBin));
  if (SUCCEEDED(hr)) {
   IEnumShellItems *pesi;
   hr = psiRecycleBin-&gt;BindToHandler(NULL, BHID_EnumItems,
                                     IID_PPV_ARGS(&amp;pesi));
   if (<font COLOR=blue>hr == S_OK</font>) {
    IShellItem *psi;
    while (pesi-&gt;Next(1, &amp;psi, NULL) == S_OK) {
     IShellItem2 *psi2;
     if (SUCCEEDED(psi-&gt;QueryInterface(IID_PPV_ARGS(&amp;psi2)))) {
      _tprintf(TEXT("------------------\n"));

      PrintDisplayName(psi2, SIGDN_PARENTRELATIVE,
                             TEXT("ParentRelative"));
      PrintDisplayName(psi2, SIGDN_NORMALDISPLAY, TEXT("Normal"));
      PrintDisplayName(psi2, SIGDN_FILESYSPATH, TEXT("FileSys"));

      PrintDetail(psi2, &amp;SCID_OriginalLocation, TEXT("Original Location"));
      PrintDetail(psi2, &amp;SCID_DateDeleted, TEXT("Date deleted"));
      PrintDetail(psi2, &amp;PKEY_Size, TEXT("Size"));
      psi2-&gt;Release();
     }
     psi-&gt;Release();
    }
   }
   psiRecycleBin-&gt;Release();
  }
  CoUninitialize();
 }
 return 0;
}
</pre>
<p>
Okay, so now we know how to enumerate the contents of the Recycle Bin
and obtain properties of the items in it.
How do we purge or restore items?
We'll look at that next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-933043">
				<div id="div-comment-933043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933043">
			August 31, 2011 at 8:06 am</a>		</div>

		<p>This article is a &quot;Exhibit A&quot; as to why COM is not a friendly technology to program in, IMO.</p>
<p>Trying to come up with the above interfaces, and choose between multiple APIs and ways to accomplish something, without violating one&#39;s market requirements (i.e. &quot;can this run on XP?&quot;), is a major PITA. &nbsp;Knowing what &quot;alternate routes to take&quot; to get there in shorter time is a serious time-sink in itself.</p>
<p>Maybe I&#39;m just showing my age, but to me the Win32 API &#8211; crufty as it is in many places, has always been easier to navigate and get the thing I&#39;m looking for (and be reasonably certain as to what versions of the OS it will run under).</p>
<p>As a long-term strategy for creating a programmer&#39;s toolbox API, COM is just not as good as a straight C API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933053">
				<div id="div-comment-933053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933053">
			August 31, 2011 at 8:31 am</a>		</div>

		<p>I agree with you there. &nbsp;I cringe every time I have to delve into COM as it just feels unfriendly in every possible way. &nbsp;Yet at the same time, the C API is ancient and not conducive at all to modern, safe C++ programming. (and COM isn&#39;t really much better, even with ATL and other such wrappers).</p>
<p>With the &quot;C++ Renaissance&quot; that Microsoft keeps touting, I am hopeful that they realize this as well and start releasing coherent C++ APIs instead &#8212; there aren&#39;t all that many of us that actually need the flat C API anymore.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933063">
				<div id="div-comment-933063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Skrobov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933063">
			August 31, 2011 at 8:49 am</a>		</div>

		<p>@Steve, you forget how many Windows developers there are that use languages other than C++. Anything from Delphi to Tcl.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933073">
				<div id="div-comment-933073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933073">
			August 31, 2011 at 8:49 am</a>		</div>

		<p>As long as we&#39;re modernizing, why not do away with the TEXT macros and TCHAR versions of things and just use wide strings everywhere?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933083">
				<div id="div-comment-933083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933083">
			August 31, 2011 at 8:52 am</a>		</div>

		<p>@@Steve,</p>
<p>Windows cannot expose C++ APIs for two reasons: 1. C++ does not work cleanly across DLL boundaries. 2. C++ cannot be called by non C++ code cleanly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933093">
				<div id="div-comment-933093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tyler Reddon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933093">
			August 31, 2011 at 8:59 am</a>		</div>

		<p>@Steve if you want to see why you don&#39;t make a C++ API go try to program Be, that should shake the idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933103">
				<div id="div-comment-933103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933103">
			August 31, 2011 at 9:31 am</a>		</div>

		<p>@Steve Wolf: Try it in Delphi sometime. &nbsp;It makes COM much, much easier. &nbsp;It&#39;s not that COM is a bad technology, it&#39;s that C++ is a bad language to try to implement it in!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933123">
				<div id="div-comment-933123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933123">
			August 31, 2011 at 10:27 am</a>		</div>

		<p>Mini nitpick: In your second code example you&#39;ve highlighted hr = SHCreateShellItem(NULL, NULL, pidl, ppsi); as in the first instead of the correct &nbsp;hr = SHGetKnownFolderIDList(rfid, 0, NULL, &amp;pidl);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-933133">
				<div id="div-comment-933133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933133">
			August 31, 2011 at 8:46 pm</a>		</div>

		<p>How is someone outside of MS supposed to be able to write code like this on their own?</p>
<p>MSDN does not document how to free the string returned from IShellItem2::GetString! The shell usually uses IMalloc but some functions require LocalFree etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933143">
				<div id="div-comment-933143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933143">
			September 1, 2011 at 3:32 am</a>		</div>

		<p>Is using smart pointers going to make the code more or less clear than explicit calls to Release?</p>
<div class="post">[<i>It depends on whether you think smart pointers are clear. Sometimes they can be <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/20/135841.aspx" rel="nofollow">quite subtle</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933153">
				<div id="div-comment-933153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933153">
			September 1, 2011 at 6:28 am</a>		</div>

		<p>@WndSks: since it is COM, absent documentation saying otherwise, I would assume the memory was allocated by CoTaskMemAlloc and should be released by CoTaskMemFree.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933163">
				<div id="div-comment-933163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933163">
			September 1, 2011 at 6:32 am</a>		</div>

		<p>@WndSks: &nbsp;There&#39;s rules for it. &nbsp;IIRC if it doesn&#39;t say otherwise, callers always use CoTaskMemFree.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933173">
				<div id="div-comment-933173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933173">
			September 1, 2011 at 8:34 am</a>		</div>

		<p>New low level apis should be implemented in C, high level apis should be implemented in .net.</p>
<p>COM is ready for Recycle Bin.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933273">
				<div id="div-comment-933273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933273">
			September 1, 2011 at 1:16 pm</a>		</div>

		<p>The vast majority of languages support some mechanism for linking up C APIs. &nbsp;Java, C#, VB, C++, C, Objective-C, TCL (with or without TK), Python, Smalltalk, you-name-it, all have ways of interfacing with C APIs and DLLs which export such APIs.</p>
<p>C is crufty, but it doesn&#39;t lead to Thingie1::, replaced by Thingie2::, then Thingie3:: &#8211; but wait, can Thingie3:: interface with OtherThingie1:: or do I need OtherThingie2::, and are those both supported on my customer&#39;s OS requirements, and is this the right way to go about doing this at all, etc.</p>
<p>Those issues don&#39;t ever disappear, but they&#39;re &#8211; IMO &#8211; easier to document and convey with C APIs. &nbsp;Let .NET have comprehensive wrappers for everything and present a higher level OS-API. &nbsp;COM is just painful, IMO. &nbsp;(It takes the best ideas from C++ and marries them to an incredibly inelegant implementation that is less flexible and harder to use [especially to get right] than is/are C APIs for no tangible [real-world] benefit that I am aware of).</p>
<div class="post">[<i>Things get hairy with a C interface when there are multiple providers. You end up with a structure of callback functions. (See: FCI.) And if you want to make a v2, then one of those callback functions would be &quot;If you support v2, please return the callback function table for v2.&quot; And then you&#39;ve reinvented QueryInterface and vtables. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-933283">
				<div id="div-comment-933283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933283">
			September 1, 2011 at 2:19 pm</a>		</div>

		<p>@Raymond: The IParentAndItem::GetParentAndItem parameters are marked out and not out_opt (on MSDN) but I guess you know the API better than the MSDN doc folks&#8230;</p>
<p>@Cesar,@Rick C: Do you have an official link to back up your claims? (IShellItem::GetDisplayName for example is specific about using CoTaskMemFree on the string, but if CoTaskMemFree is implied, why list it on only some interfaces/methods)</p>
<div class="post">[<i>Doc error. They are annotated correctly in the header file. As for CoTaskMemAlloc, the <a href="http://msdn.microsoft.com/en-us/library/ms686638(v=VS.85).aspx" rel="nofollow">Memory Management Rules</a> COM documentation clearly states that &quot;Out-parameters [&#8230;] are freed by the caller using the standard COM task memory allocator.&quot; This requirement is mentioned in other places too, like <a href="http://msdn.microsoft.com/en-us/library/aa366533(VS.85).aspx" rel="nofollow">here</a> (And you may want to change your handle. My patience for it is running out.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-933333">
				<div id="div-comment-933333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933333">
			September 2, 2011 at 12:37 am</a>		</div>

		<p>Thanks Raymond, you rock!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933433">
				<div id="div-comment-933433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933433">
			September 2, 2011 at 9:54 am</a>		</div>

		<p>If you had written this entry a year ago, it would have saved me significant time on my current project. Please engage your time machine and fix this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933453">
				<div id="div-comment-933453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763#comment-933453">
			September 2, 2011 at 1:14 pm</a>		</div>

		<p>@WndSks, you don&#39;t see documentation on every little function how to allocate it, because, as Raymond pointed out, the overall docs clearly state you use CoTaskMemFree, IMalloc, or the default OLE allocator, all of which ultimately wind up being the same thing, unless otherwise declared. &nbsp;Anybody who does COM programming should know that, the same way any C programmer should know operator precedence.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

