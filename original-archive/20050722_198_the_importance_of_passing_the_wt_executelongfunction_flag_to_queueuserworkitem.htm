<html>
<head>
<title>The importance of passing the WT_EXECUTELONGFUNCTION flag to QueueUserWorkItem</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The importance of passing the WT_EXECUTELONGFUNCTION flag to QueueUserWorkItem</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 22, 2005 / year-entry #199</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One of the flags to the QueueUserWorkItem function is WT_EXECUTELONGFUNCTION. The documentation for that flag reads The callback function can perform a long wait. This flag helps the system to decide if it should create a new thread. As noted in the documentation, the thread pool uses this flag to decide whether it should create...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One of the flags to
<a HREF="http://msdn.microsoft.com/library/en-us/dllproc/base/queueuserworkitem.asp">
the <code>QueueUserWorkItem</code> function</a>
is
<code>WT_EXECUTELONGFUNCTION</code>.
The documentation for that flag reads
</p>
<blockquote CLASS=q><p>
The callback function can perform a long wait.
This flag helps the system to decide if it should create a new thread.
</p>
</blockquote>
<p>
As noted in the documentation, the
<a HREF="http://msdn.microsoft.com/library/en-us/dllproc/base/thread_pooling.asp">
thread pool</a>
uses this flag to decide whether
it should create a new thread or wait for an existing work item to finish.
If all the current thread pool threads are busy running work items and there
is another work item to dispatch,
it will tend to wait for one of the existing work items to complete
if they are "short",
because the expectation is that some work item will finish quickly
and its thread will become available to run a new work item.
On the other hand, if the work items are marked
<code>WT_EXECUTELONGFUNCTION</code>,
then the thread pool
knows that waiting for the running work item to complete is
not going to be very productive, so it is more likely to create
a new thread.
</p>
<p>
If you fail to mark a long work item with the
<code>WT_EXECUTELONGFUNCTION</code> flag,
then the thread pool ends up waiting for that work item to
complete, when it really should be kicking off a new thread.
Eventually, the thread pool gets impatient and figures out that
you lied to it, and it creates a new thread anyway.
But it often takes a while before the thread pool realizes
that it's been waiting in vain.
</p>
<p>
Let's illustrate this with a simple console program.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;

DWORD g_dwLastTick;

void CALLBACK Tick(void *, BOOLEAN)
{
 DWORD dwTick = GetTickCount();
 printf("%5d\n", dwTick - g_dwLastTick);
}

DWORD CALLBACK Clog(void *)
{
 Sleep(4000);
 return 0;
}

int __cdecl
main(int argc, char* argv[])
{
 g_dwLastTick = GetTickCount();
 switch (argc) {
 case 2: QueueUserWorkItem(Clog, NULL, 0); break;
 case 3: QueueUserWorkItem(Clog, NULL, WT_EXECUTELONGFUNCTION); break;
 }
 HANDLE hTimer;
 CreateTimerQueueTimer(&amp;hTimer, NULL, Tick, NULL, 250, 250, 0);
 Sleep(INFINITE);
 return 0;
}
</pre>
<p>
This program creates a periodic thread pool work item that fires
every 250ms, and which merely prints how much time has elapsed since
the timer was started.
As a baseline, run the program with no parameters, and observe that
the callbacks occur at roughly 250ms intervals, as expected.
</p>
<pre>
  251
  501
  751
 1012
^C
</pre>
<p>
Next, run the program with a single command line parameter.
This causes the "case 2" to be taken, where the "Clog" work item
is queued.  The "Clog" does what its names does: It clogs up the
work item queue by taking a long time (four seconds) to complete.
Notice that the first callback doesn't occur for a whole
second.
</p>
<pre>
 1001
 1011
 1021
 1021
 1252
 1502
 1752
^C
</pre>
<p>
That's because we queued the "Clog" work item without the
<code>WT_EXECUTELONGFUNCTION</code> flag.
In other words, we told the thread pool,
"Oh, don't worry about this guy, he'll be finished soon."
The thread pool wanted to run the Tick event,
and since the Clog work item was marked as "fast",
the thread pool decided to wait for it and recycle its thread
rather than create a new one.
After about a second,
the thread pool got impatient and spun up a new thread to
service the now-long-overdue Tick events.
</p>
<p>
Notice that as soon as the first Tick event was processed,
three more were fired in rapid succession.
That's because the thread pool realized that it had fallen
four events behind (thanks to the clog) and had to fire
the next three immediately just to clear its backlog.
The fifth and subsequent events fire roughly on time
because the thread pool has figured out that the Clog really
is a clog and should be treated as a long-running event.
</p>
<p>
Finally, run the program with two command line parameters.
This causes the "case 3" to be taken, where we queue up the Clog
but also pass the <code>WT_EXECUTELONGFUNCTION</code> flag.
</p>
<pre>
  251
  511
  761
 1012
^C
</pre>
<p>
Notice that with this hint, the thread pool no longer gets
fooled by the Clog and knows to spin up a new thread to handle
the Tick events.
</p>
<p>
Moral of the story:
If you're going to go wading into the thread pool,
make sure you play friendly with other kids and let the
thread pool know ahead of time whether
you're going to take a long time.
This allows the thread pool to keep the number of worker
threads low (thus reaping the benefits of thread pooling)
while still creating enough threads to keep the events flowing
smoothly.
</p>
<p>
Exercise: What are the consequences to the thread pool if
you create a thread pool timer whose callback takes longer
to complete than its timer period?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-292143">
				<div id="div-comment-292143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292143">
			July 22, 2005 at 2:09 pm</a>		</div>

		<p>When I&#8217;ve looked at any of these thread pool API&#8217;s, I&#8217;ve wondered how is the thread pool created, who creates it and how is it maintained?<br />
<br />Are there any API&#8217;s that allow you to look at or interact with the thread pool?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-292253">
				<div id="div-comment-292253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292253">
			July 22, 2005 at 11:02 pm</a>		</div>

		<p>John: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/thread_pooling.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/thread_pooling.asp</a> describes when the queue is created. I don&#8217;t know how you can query or cancel work items in the queue.</p>
<p>However, one redneck way to count the number of work items in the queue is to simply increment a variable when you call QueueUserWorkItem(), and decrement it when your job runs.</p>
<p>Similarly, you could implement cancelling jobs by reserving a bit in the data structure you use to initialize each work item that indicates if the work item should simply return.  Anyone wanting to cancel that work item simply sets that bit, and when the work item notices it goes away.</p>
<p>Of course all this requires that you program your stuff well.  ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-292293">
				<div id="div-comment-292293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Luther</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292293">
			July 23, 2005 at 11:48 am</a>		</div>

		<p>I&#8217;m just curious &#8211; in this sample code &#8211; why TCHARs or _tmain are not used &#8211; being that seems to be all the rage in windows literature &#8230;</p>
<p>Maybe Raymond addressed this in an earlier post? Doesn&#8217;t really complicate the snippet does it? Especially when I notice __cdecl and the windows specific types?</p>
<p>Just curious. I&#8217;m a huge fan of the blog. I&#8217;m probabably reading too much into the snippet. Admittedly, I&#8217;m a weekend windows programmer &#8211; so I tend to read from gurus like a bit too closesly. I guess I&#8217;m slightly wondering if Raymond knows something I&#8217;ve not realized or not been introduced to yet. Like, the OS isn&#8217;t natively UNICODE something that&#8217;d astound me &#8230; maybe he&#8217;s just writing to be pre win2k compatible?</p>
<p>At any rate, reminds me of advanced programming books using</p>
<p>   for(int i = 0; i &lt; x; i++)</p>
<p>when they could just as easily have written it as</p>
<p>   for(int i = 0; i &lt; x; ++i)</p>
<p>Many thanks &#8230; not at all trying to be offensive in this post. Just a newbie to Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-292303">
				<div id="div-comment-292303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292303">
			July 23, 2005 at 12:54 pm</a>		</div>

		<p>Since the code doesn&#8217;t manipulate file names, receive input, and is hard-coded English, adding Unicode support would just distract from the point of the article. (I don&#8217;t see why the difference between i++ and ++i is important in the example above; they both compile to the same object code.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-292343">
				<div id="div-comment-292343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Luther</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292343">
			July 24, 2005 at 3:34 am</a>		</div>

		<p>Thanks. That answers my question.</p>
<p>My (++i) vs (i++) example was more about semantics and intention than actual object code.</p>
<p>Just getting a feel for your style. Again, thanks and please keep up the great insights.</p>
<p>-Luther</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-292353">
				<div id="div-comment-292353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hahahahhaha</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292353">
			July 24, 2005 at 7:18 am</a>		</div>

		<p>nobody can solve the exercise??</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-292363">
				<div id="div-comment-292363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292363">
			July 24, 2005 at 11:39 am</a>		</div>

		<p>++i vs i++ is all about the final object code.  If you don&#8217;t understand the difference between the two, you will not understand when ++i is better than i++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-292383">
				<div id="div-comment-292383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292383">
			July 24, 2005 at 9:39 pm</a>		</div>

		<blockquote><p>
  Exercise: What are the consequences to the<br />
  <br />&gt; thread pool if you create a thread pool<br />
  <br />&gt; timer whose callback takes longer to<br />
  <br />&gt; complete than its timer period?</p>
<p>I&#8217;ve only seen this happen in VB so I don&#8217;t know whether the following is a Windows answer or a VB answer.  What happened was that the callback was reentered and wasn&#8217;t designed for reentrancy and trashed its own variables.</p>
<p>When I write code with a timer in either VB or VC++, I kill the timer at the start of the callback and start the timer again before the callback returns.  So I never had to observe a real answer to this exercise ^_^</p>
<p>Saturday, July 23, 2005 11:48 AM by Luther<br />
  <br />&gt; At any rate, reminds me of advanced<br />
  <br />&gt; programming books using<br />
  <br />&gt; for(int i = 0; i &lt; x; i++)<br />
  <br />&gt; when they could just as easily have written<br />
  <br />&gt; it as<br />
  <br />&gt; for(int i = 0; i &lt; x; ++i) </p>
<p>Yeah?  Well what about advanced programming books using<br />
  <br />for(int i = 0; i &lt; x; ++i)<br />
  <br />when they could just as easily have written it as<br />
  <br />for(int i = 0; i &lt; x; i++) </p>
<p>It mattered in object code 30 years ago on the particular machine where C was first implemented.  But even there, if the value of the incrementing expression wasn&#8217;t being used as an operand in a larger expression, it still didn&#8217;t matter because the compiler generated a simple increment instruction.  Post-increment and pre-decrement took advantage of PDP-11 hardware accelerators only when they were used as array subscripts.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-292443">
				<div id="div-comment-292443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Risto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292443">
			July 25, 2005 at 10:12 am</a>		</div>

		<p>I am trying to compile this with VS2003, and I get &quot;error C3861: &#8216;QueueUserWorkItem&#8217;: identifier not found, even with argument-dependent lookup&quot;. Perhaps I am not config right for multi-thread? Do I need ATL? If I hover over the call, I get a parm list, so something is finding it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-292513">
				<div id="div-comment-292513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Luther</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292513">
			July 25, 2005 at 2:46 pm</a>		</div>

		<p>:)</p>
<p>OK &#8211; OK, Norman &#8230; turns out to be a bad example.</p>
<p>My apologies as it sounds like I&#8217;ve offended you. My question boiled down to why Raymond was using chars in a clearly win32 program &#8230; WHICH!! &#8230; Raymond answered for me.<br />
<br />I wasn&#8217;t sure if it was intentionally or just for didactic purposes.</p>
<p>There is no need to expand on his answer.</p>
<p>Thanks</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-292553">
				<div id="div-comment-292553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.randomtree.org/eric/techblog/' rel='external nofollow' class='url'>Eric</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292553">
			July 25, 2005 at 5:04 pm</a>		</div>

		<p>&quot;What are the consequences to the thread pool if you create a thread pool timer whose callback takes longer to complete than its timer period?&quot;</p>
<p>In .Net, the timer function will be called successively.  If the timer function uses only local variables, or if it&#8217;s properly synchronized (which it ought to be), then at least you won&#8217;t trash anything.</p>
<p>However, what you will do (if the timer handler is always longer than the interval) is exhaust the thread pool, at which point your timer function will essentially run repeatedly, forever, as new calls are getting queued up faster than existing calls get completed.</p>
<p>This can have really unfortunate effects on the rest of the application, since there are then no pool threads for anything else, either.  (The program will appear to hang, only to process those events a random period of time later.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-292663">
				<div id="div-comment-292663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292663">
			July 25, 2005 at 10:13 pm</a>		</div>

		<p>Monday, July 25, 2005 2:46 PM by Luther</p>
<p>&gt; My apologies as it sounds like I&#8217;ve offended<br />
<br />&gt; you.</p>
<p>It looks like there was some misunderstanding involved.  In the past there really have been religious arguments over choices of prefix vs. postfix operators in cases where it didn&#8217;t matter.  Sometimes agnostics can figure out why religious arguments arise but in this case I couldn&#8217;t even figure out why.  Anyway it looked like you were bringing it here, so I balanced it.  Rest assured that if you had posted for the opposite side then I would have posted for the opposite&#8217;s opposite in exactly the same way ^_^</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-292683">
				<div id="div-comment-292683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Luther</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292683">
			July 26, 2005 at 9:27 am</a>		</div>

		<p>No problem &#8230; </p>
<p>My thought was that by definition, the postfix operator returned the old value and that in general, if I didn&#8217;t need the old value &#8211; I ought to use the prefix operator. Period.</p>
<p>If nothing else, I thought this was sort of a &quot;self-commenting&quot; idiom. I do realize that the compiler is &quot;smart&quot; and may do the optimum thing in either case, but I considered it better form, explicitly clearer &#8230; I consider that the more hints I can include in my code, all the better &#8230;. for both the person reading my code and the compiler compiling my code. &quot;Yes, I choose prefix notation here bcs I absolutely do not need the old value.&quot;</p>
<p>For me, prefix notation here was about keeping the code TEXT more closely consistent with the intended result in the object code.</p>
<p>But it is clear that practically &#8211; it makes no difference. It is also clear that many developers would have no problem understanding intention with either notation (given the context). What really helped nail the coffin was this comment from Kernighan and Ritchie:</p>
<p>&quot;Section 2.8 &#8230; In a context where no value is wanted, just the inrementing effect, as in</p>
<p>if (c == &#8216;n&#8217;)<br />
<br />  n1++;</p>
<p>prefix and postfix are the same.&quot;</p>
<p>So for my benefit, even from a strictly &quot;language semantic&quot; standpoint, there is no difference. &quot;for(&#8230;i++)&quot; is not only optimized by the compiler, but by language definition (or at least, K&amp;Rs suggestion), it is the same operation as &quot;for(&#8230;++i)&quot;.</p>
<p>Many thanks to all who made this revelation possible ;-) I may continue to use prefix notation in for loops but I realize that it isn&#8217;t always necessary &#8211; so I will no longer tease my coworkers ;-)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-292963">
				<div id="div-comment-292963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Owen Cunningham</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292963">
			July 27, 2005 at 11:11 am</a>		</div>

		<p>Raymond, do you know why the .NET equivalent of QueueUserWorkItem does not support a WT_EXECUTELONGFUNCTION flag?</p>
<p>Also, do you know why the .NET FCL bothers to expose UnsafeQueueUserWorkItem? The documentation describes the security risks of doing this, but not the benefit (of which there presumably is some).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-292973">
				<div id="div-comment-292973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-292973">
			July 27, 2005 at 11:34 am</a>		</div>

		<p>Um, read the subtitle of the blog again? Try asking somebody who works on .NET.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-293343">
				<div id="div-comment-293343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-293343">
			July 28, 2005 at 3:54 pm</a>		</div>

		<p>Owen &#8212; the documentation for UnsafeQueueUserWorkItem says that the difference is that QueueUserWorkItem&#8217;s worker thread &quot;inherits&quot; the stack of the caller (the caller of QueueUserWorkItem, that is) when the thread starts executing the work-item.  The Unsafe version does not &quot;inherit&quot; the stack.  (&quot;&#8230; does not propagate the calling stack onto the worker thread&#8230;&quot;)</p>
<p>This only matters when the code has security requirements set, and it&#8217;s doing full stack walks instead of just link checks.  (Of course, &quot;you can&#8217;t trust the return address&quot; anyway, but apparently the .net people didn&#8217;t figure that out, or maybe there&#8217;s a reason that the issues mentioned in Raymond&#8217;s &quot;you can&#8217;t trust the return address&quot; blog entry don&#8217;t apply to .net.)</p>
<p>As for why it doesn&#8217;t support the long-function flag&#8230;  I don&#8217;t know, I&#8217;m not on the design team.  I just use it.  ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-earhart even thread-even depth-1" id="comment-293583">
				<div id="div-comment-293583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">earhart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050722-15/?p=34843#comment-293583">
			July 29, 2005 at 12:33 pm</a>		</div>

		<p>Note that WT_EXECUTELONGFUNCTION won&#8217;t really do much of anything in Longhorn.</p>
<p>It turned out that a lot of people were just using it to spin up threads faster, since the threadpool was throttling pretty aggressively.  So now it just spins up threads very quickly all the time; it tries hard to fully utilize the available processor bandwidth.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

