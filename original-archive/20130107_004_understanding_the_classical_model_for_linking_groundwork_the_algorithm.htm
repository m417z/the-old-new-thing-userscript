<html>
<head>
<title>Understanding the classical model for linking, groundwork: The algorithm</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Understanding the classical model for linking, groundwork: The algorithm</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 7, 2013 / year-entry #5</td></tr>
<tr><td><b>Tags:</b></td><td>code;linker</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The classical model for linking goes like this: Each OBJ file contains two lists of symbols. Provided symbols: These are symbols the OBJ contains definitions for. Needed symbols: These are symbols the OBJ would like the definitions for. (The official terms for these are exported and imported, but I will use provided and needed to...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The classical model for linking goes like this:
</p>
<p>
Each OBJ file contains two lists of symbols.
</p>
<ol>
<li>Provided symbols:
    These are symbols the OBJ contains definitions for.</p>
<li>Needed symbols:
    These are symbols the OBJ would like the definitions for.
</ol>
<p>
(The official terms for these are <i>exported</i> and
<i>imported</i>,
but I will use
<i>provided</i> and <i>needed</i> to avoid confusion with
the concepts of exported and imported functions in DLLs,
and because <i>provided</i> and <i>needed</i> more clearly
captures what the two lists are for.)
</p>
<p>
Naturally, there is other bookkeeping information in there.
For example, for provided symbols, not only is the name given,
but also additional information on locating the definition.
Similarly, for needed symbols, in addition to the name,
there is also information about what should be done once its
definition has been located.
</p>
<p>
Collectively, provided and needed symbols are known as
<i>symbols with external linkage</i>,
or just <i>externals</i> for short.
(Of course, by giving them the name
<i>symbols with external linkage</i>,
you would expect there to be things known as
<i>symbols with internal linkage</i>,
and you'd be right.)
</p>
<p>
For example, consider this file:
</p>
<pre>
// inventory.c

extern int InStock(int id);

int GetNextInStock()
{
  static int Current = 0;
  while (!InStock(++Current)) { }
  return Current;
}
</pre>
<p>
This very simple OBJ file has one provided symbol,
<code>Get&shy;Next&shy;In&shy;Stock</code>:
That is the object defined in this file that can be used by other files.
It also has one needed symbol,
<code>In&shy;Stock</code>:
That is the object required by this file in order to work,
but which the file itself did not provide a definition for.
It's hoping that somebody else will define it.
There's also a symbol with internal linkage:
<i>Current</i>,
but that's not important to the discussion,
so I will ignore it from now on.
</p>
<p>
OBJ files can hang around on their own,
or they can be bundled together into a LIB file.
</p>
<p>
When you ask the linker to generate a module,
you hand it a list of OBJ files and a list of LIB files.
The linker's goal is to <i>resolve</i> all of the
<i>needed symbols</i>
by matching them up to a <i>provided symbol</i>.
Eventually, everything needed will be provided,
and you have yourself a module.
</p>
<p>
To do this, the linker keeps track of which symbols in the module
are resolved and which are unresolved.
</p>
<ul>
<li>A resolved symbol is one for which a provided symbol has been
    located and added to the module.
    Under the classical model, a symbol can be resolved only once.
    (Otherwise, the linker wouldn't know which one to use!)</p>
<li>An unresolved symbol is one that is needed by the module,
    but for which no provider has yet been identified.
</ul>
<p>
Whenever the linker adds an OBJ file to the module,
it goes through the list of provided and needed symbols
and updates the list of symbols in the module.
The algorithm for updating this list of symbols is obvious
if you've been paying attention, because it is a simple matter
of preserving the invariants described above.
</p>
<p>
For each <i>provided</i> symbol in an OBJ file added to a module:
</p>
<ul>
<li>If the symbol is already in the module marked as <i>resolved</i>,
    then
    <a HREF="http://msdn.microsoft.com/library/72zdcz6f.aspx">
    raise an error</a>
    complaining that an object has multiple
    definitions.</p>
<li>If the symbol is already in the module
    marked as <i>unresolved</i>, then change its marking to <i>resolved</i>.</p>
<li>Otherwise, the symbol is not already in the module.
    Add it and mark it as <i>resolved</i>.
</ul>
<p>
For each <i>needed</i> symbol in an OBJ file added to a module:
</p>
<ul>
<li>If the symbol is already in the module marked as <i>resolved</i>,
    then leave it marked as <i>resolved</i>.</p>
<li>If the symbol is already in the module marked as <i>unresolved</i>,
    then leave it marked as <i>unresolved</i>.</p>
<li>Otherwise, the symbol is not already in the module.
    Add it and mark it as <i>unresolved</i>.
</ul>
<p>
The algorithm the linker uses to resolve symbols goes like this:</p>
<ul>
<li>Initial conditions:
    Add all the explicitly-provided OBJ files to the module.</p>
<li>While there is an unresolved symbol:
<ul>
<li>Look through all the LIBs
        for the first OBJ to provide the symbol.</p>
<li>If found: Add that OBJ to the module.
<li>If not found:
        <a HREF="http://msdn.microsoft.com/en-us/library/f6xx1b1z.aspx">
        Raise an error</a> complaining of an unresolved external.
        (If the linker has the information available,
        it may provide
        <a HREF="http://msdn.microsoft.com/en-us/library/799kze2z.aspx">
        additional details</a>.)
    </ul>
</ul>
<p>
That's all there is to linking and unresolved externals.
At least, that's all there is to the classical model.
</p>
<p>
Next time, we'll start looking at the consequences of the rules
for classical linking.
</p>
<p>
<b>Sidebar</b>:
Modern linkers introduce lots of non-classical behavior.
For example,
the rule
</p>
<ul>
<li>If the symbol is already in the module marked as <i>resolved</i>,
    then
    <a HREF="http://msdn.microsoft.com/library/72zdcz6f.aspx">
    raise an error</a>
    complaining that an object has multiple
    definitions.
</ul>
<p>
has been replaced with the rules
</p>
<ul>
<li>If the symbol is already in the module marked as <i>resolved</i>:
<ul>
<li>
    If both the original symbol and the new symbol are marked
    <code>__declspec(<a HREf="http://msdn.microsoft.com/en-us/library/5tkz6s71.aspx">selectany</a>)</code>,
    then do not raise an error.
    Pick one arbitrarily and discard the other.</p>
<li>Otherwise,
    <a HREF="http://msdn.microsoft.com/library/72zdcz6f.aspx">
    raise an error</a>
    complaining that an object has multiple
    definitions.
</ul>
</ul>
<p>
Another example of non-classical behavior is
dead code removal.
If you pass
<a HREF="http://msdn.microsoft.com/en-us/library/bxwfs976.aspx">
the
<code>/OPT:REF</code> linker flag</a>,
then after all externals have been resolved,
the linker goes through and starts discarding functions and data
that are never referenced,
taking advantage of another non-classical feature
(<a HREF="http://msdn.microsoft.com/en-us/library/xsa71f43.aspx">packed functions</a>)
to know where each function begins and ends.
</p>
<p>
But I'm going to stick with the classical model,
because you need to understand classical linking
before you can study non-classical behavior.
Sort of how in physics, you need to learn your classical mechanics
before you study relativity.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1031353">
				<div id="div-comment-1031353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CPDaniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031353">
			January 7, 2013 at 7:22 am</a>		</div>

		<p>This first linkers I used baack in the early 80&#39;s were even simpler than this classical model: &nbsp;they would only make a single pass through the LIB files and if anything was undefined, they&#39;d indicate an error. &nbsp;It was necessary with these linkers to include a module in a library more than once in order to handle circular dependencies. &nbsp;This was in the CP/M-80 days when the most popular languange compiler around was Digital Research Pascal/MT+.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031363">
				<div id="div-comment-1031363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031363">
			January 7, 2013 at 7:24 am</a>		</div>

		<p>Another non-classical behavior: weak symbols vs. strong symbols. &nbsp;Symbols are strong by default and can be marked as weak with the <strong>attribute</strong>((weak)) syntax in GCC and GCC-like compilers (I&#39;m unsure if any of the Microsoft compilers support a similar feature).</p>
<p>If the symbol is already in the module marked as resolved:</p>
<ul>
<li>
<p>If both the original symbol and the new symbol are marked <strong>attribute</strong>((weak)), then do not raise an error. &nbsp;Pick one arbitrarily and discard the other.</p>
</li>
<li>
<p>If one of the original symbol and the new symbol is marked <strong>attribute</strong>((weak)), then do not raise an error. &nbsp;Pick the strong symbol and discard the weak symbol.</p>
</li>
<li>
<p>Otherwise, raise an error complaining that an object has multiple definitions.</p>
</li>
</ul>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031373">
				<div id="div-comment-1031373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny Moules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031373">
			January 7, 2013 at 7:36 am</a>		</div>

		<p>@Adam You may find this interesting RE MSVC behaviour: <a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/2290587/gcc-style-weak-linking-in-visual-studio" rel="nofollow">stackoverflow.com/&#8230;/gcc-style-weak-linking-in-visual-studio</a> (There&#39;s a neat answer using an undocumented linker pragma).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031383">
				<div id="div-comment-1031383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031383">
			January 7, 2013 at 7:46 am</a>		</div>

		<p>While we&#39;re still at groundwork, let&#39;s make it explicit: &quot;symbols&quot; to a classical linker are just functions and variables. Constants already get tricky.</p>
<p>Personally the most surprising thing was the fact that linkers link OBJ files, not functions and variables. And even with /Gy and /OPT:REF linking still doesn&#39;t work by starting at main() and recursively adding to that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031413">
				<div id="div-comment-1031413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031413">
			January 7, 2013 at 8:22 am</a>		</div>

		<p>Isn&#39;t there something in the classical model where a later .LIB cannot reference an .OBJ in an earlier .LIB?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031423">
				<div id="div-comment-1031423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031423">
			January 7, 2013 at 8:28 am</a>		</div>

		<p>What is the use-case for __select_any? I&#39;ve written C/C++ for years, and I can&#39;t for the life of me think of a good reason for it, other than to introduce non-deterministic bugs to your build.</p>
<div class="post">[<em>The C++ compiler uses them for inline functions whose addresses are taken and template methods. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031433">
				<div id="div-comment-1031433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031433">
			January 7, 2013 at 8:33 am</a>		</div>

		<p>Ok &#8211; according to the MSDN documentation:</p>
<p>&quot;A global data item can normally be initialized only once in an EXE or DLL project. selectany can be used in initializing global data defined by headers, when the same header appears in more than one source file. selectany is available in both the C and C++ compilers.&quot;</p>
<p>So basically it&#39;s so you can do &quot;int MyExternVar = 0;&quot; in a header and not get the linker to explode with errors telling you that every C file is defining overlapping &quot;MyExternVar&quot;s.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031443">
				<div id="div-comment-1031443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031443">
			January 7, 2013 at 8:52 am</a>		</div>

		<p>@Matt: I wouldn&#39;t have dared use it for variables as the compiler is allowed to direct-bind within an .OBJ file, but for functions declared in header files nothing can really go wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031453">
				<div id="div-comment-1031453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031453">
			January 7, 2013 at 9:00 am</a>		</div>

		<blockquote><p>
  &quot;symbols&quot; to a classical linker are just functions and variables. Constants already get tricky.
</p></blockquote>
<p>From what I recall, that&#39;s not true. &nbsp;A constant is just an absolute symbol, a variable is a relocatable symbol.</p>
<p>(Based on vague memories of the linkers I used in the mid-1970s, which I think are old enough to be called classical)</p>
<blockquote><p>
  Isn&#39;t there something in the classical model where a later .LIB cannot reference an .OBJ in an earlier .LIB?
</p></blockquote>
<p>No, that&#39;s just a limitation in some implementations. &nbsp;Not the DEC linkers I used in the mid-1970s.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031483">
				<div id="div-comment-1031483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031483">
			January 7, 2013 at 9:50 am</a>		</div>

		<p>@Evan: In MSVC __inline or __forceinline functions don&#39;t get external linkage &#8211; they get immediately inlined during compilation of the function. I use __forceinline functions in headers all the time and never even thought that selectany might exist.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031493">
				<div id="div-comment-1031493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031493">
			January 7, 2013 at 9:58 am</a>		</div>

		<p>I was always wondering why the linker first links everything and then eliminates unused instead doing it the other way around &#8211; starting from a known entry point and then adding only referred segments.</p>
<p>As for the &quot;Packed functions&quot; and &quot;selectany&quot;, I believe an OBJ file with multiple segments and/or common linkage were always supported, the only question was why compilers didn&#39;t use it.</p>
<div class="post">[<em>Tune in tomorrow! -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1031513">
				<div id="div-comment-1031513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031513">
			January 7, 2013 at 10:15 am</a>		</div>

		<p>&quot;selectany&quot; symbols are necessary for:</p>
<p>a) member functions defined in the class definition body, when inlining is disabled for debugging;</p>
<p>b) vtable;</p>
<p>c) identical non-inline template functions (and member functions of template classes) generated in different files;</p>
<p>Also, ICF &#8211; identical COMDAT folding &#8211; needs to be disabled for a debug build, because it makes setting breakpoints in different functions with identical code impossible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031523">
				<div id="div-comment-1031523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031523">
			January 7, 2013 at 10:23 am</a>		</div>

		<blockquote><p>
  a) member functions defined in the class definition body, when inlining is disabled
</p></blockquote>
<p>These used to end up static.</p>
<blockquote><p>
  b) vtable;
</p></blockquote>
<p>It went with the first virtual function.</p>
<blockquote><p>
  c) identical non-inline template functions (and member functions of template classes) generated in different files;
</p></blockquote>
<p>Believe it or not these used to end up static too, which is why old geezers were wary of templates.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1031533">
				<div id="div-comment-1031533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031533">
			January 7, 2013 at 10:33 am</a>		</div>

		<blockquote><p>
  &gt; a) member functions defined in the class definition body, when inlining is disabled</p>
<p>  These used to end up static.
</p></blockquote>
<p>And how would you set breakpoints in them?</p>
<blockquote><p>
  &gt; b) vtable;</p>
<p>  It went with the first virtual function.
</p></blockquote>
<p>&#8230;which can be defined in the class definition body.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031553">
				<div id="div-comment-1031553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031553">
			January 7, 2013 at 11:22 am</a>		</div>

		<p>One more comment on &quot;inline&quot; for the moment.</p>
<p>C++03 standard, 7.1.2 [Function specifiers], footnote #79: &quot;The &#39;inline&#39; keyword has no effect on the linkage of a function&quot;. Para 4: &quot;If a function with external linkage is declared inline in one translation unit, it shall be declared inline in all translation units in which it appears; no diagnostic is required. An inline function with external linkage shall have the same address in all translation units. A static local variable in an extern inline function always refers to the same object. A string literal in an extern inline function is the same object in different translation units.&quot;</p>
<p>So I stand by my earlier statement that C++03 &#39;inline&#39; will leave functions with external linkage, and because of the other requirements of that paragraph you need something like &#39;selectany&#39;.</p>
<p>What MSVC does is a somewhat different matter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031563">
				<div id="div-comment-1031563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031563">
			January 7, 2013 at 12:11 pm</a>		</div>

		<blockquote><p>
  &gt;&gt; a) member functions defined in the class definition body, when inlining is disabled</p>
<p>  &gt;These used to end up static.</p>
<p>  And how would you set breakpoints in them?
</p></blockquote>
<p>Dunno but my debugger did.</p>
<blockquote><p>
  &gt; b) vtable;</p>
<p>  &gt;It went with the first virtual function.</p>
<p>  &#8230;which can be defined in the class definition body.
</p></blockquote>
<p>I remember that yielding an error on my old compiler as soon as any virtual function was defined in the body and the header file was included in two .CPP files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031573">
				<div id="div-comment-1031573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jon w</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031573">
			January 7, 2013 at 12:39 pm</a>		</div>

		<p>Some linkage models also keep a list of required symbols per symbol rather than per OBJ. This leads to less spurious dependency growth. You can get this behavior in gcc by passing -ffunction-sections.</p>
<p>Other linkage models require the symbol to be found in a container of a specific name (spwcific dynlib) which cuts down on sprouts breakage when unrelated libraries introduce clashing symbol names.</p>
<p>Both of these are, IMO, significant improvements over the classic Unix model.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031583">
				<div id="div-comment-1031583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031583">
			January 7, 2013 at 12:42 pm</a>		</div>

		<p><!-- Link in "Raise an error complaining of an unresolved external" is borked.</p>

 --></p>
<p>I&#39;ve used __declspec(selectany) many times when I needed a module-wide global var. Easier than having it once in a .h, and actually declared in a .c[pp] (or doing macro-trickery to achieve that). Just need to be careful not to include the .h in multiple modules, since each one will get its own instance of the global var, which may not be what you want.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031463">
				<div id="div-comment-1031463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031463">
			January 7, 2013 at 9:03 am</a>		</div>

		<p>@Matt:</p>
<p>The thing that made selectany necessary I suspect was templates. (I&#39;m familiar with a mechanism of similar description to selectany but am not familiar enough with MSVC specifically to know if that&#39;s what the exact mechanism it uses in the following situation.) Basically the only way that templates work (ignoring &#39;export&#39; which almost no one supports anyway) is by putting the template definitions in headers. Each compilation unit in which the template is instantiated will have the symbols. If I have foo.cpp with a call to &#39;vector&lt;int&gt;::push_back(int)&#39; and bar.cpp with a call to &#39;vector&lt;int&gt;::push_back(int)&#39;, then the compiler will instantiate that function in both compilation units, generating code in both. Under the classical model, at link time: poof, duplicate definition.*</p>
<p>There are other places it gets used &#8212; in particular, functions defined in headers (e.g. because you want them inlined) &#8212; but templates are what basically forced the linker&#39;s hand and left little choice.</p>
<p>* The reason that this is basically how templates *have* to work is the following. Let&#39;s suppose you are defining some &#39;template&lt;typename T&gt; class MyVector&#39; in MyVector.cpp, and instantiating it with &#39;MyVector&lt;string&gt;&#39; and &#39;MyVector&lt;int&gt;&#39; in Stuff.cpp. (There would be a non-defining declaration in MyVector.hpp that&#39;s included from Stuff.cpp.) The compiler never knows what it needs to do! When compiling &#39;MyVector.cpp&#39; it knows what the C++ code for the MyVector template is, but it doesn&#39;t know what types it must instantiate it with. (Each instantiation gets separate generated code.) When compiling &#39;Stuff.cpp&#39; it knows what types &#39;MyVector&#39; has been instantiated with, but it doesn&#39;t know what the C++ code is and so can&#39;t do the instantiation! The only resolutions are (1) to require that the C++ code and instantiations are co-located (which is usually done by putting the definitions of the template into the header file), or (2) to have the compiler produce a list of instantiations which should be done at link time. The latter puts a lot of burden on the linker and will make links take potentially a long time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031543">
				<div id="div-comment-1031543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031543">
			January 7, 2013 at 10:53 am</a>		</div>

		<p>@Matt:</p>
<p>I&#39;m not positive about this (there is conflicting information), but in C++, functions marked &#39;inline&#39; still have external linkage. I didn&#39;t test, but from the MSDN docs it seems that MSVC is non-compliant in this regard (assuming that I&#39;m correct). I also can&#39;t speak to __inline/__forceinline. This can arise if the compiler refuses to inline the function for some reason, or if the address of the function is taken: my understanding is that the address of even an inline function &#39;foo&#39; is guaranteed to be the same across compilation units. For the same reasons that templates force &#39;selectany&#39;, so does this: the compiler must generate code for &#39;foo&#39; in each compilation unit in which its address is taken, but it must merge those definitions at link time.</p>
<p>Even if the above is untrue for C++98/03, it is true in C++11.</p>
<p>In C, this is not true, and &#39;inline&#39; functions have internal linkage.</p>
<p>However, I believe that even in MSVC there is a case where this occurs, which is member functions defined inline in a class (&#39;class C { int random() { return 9; } };&#39;). What the standard says about the linkage of *these* functions is much less conflicted, and they get external linkage &#8212; and thus multiple definitions require collapsing duplicated symbols.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031613">
				<div id="div-comment-1031613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MCC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031613">
			January 8, 2013 at 1:00 am</a>		</div>

		<p>Cool topic &#8211; looking forward to the rest. &nbsp;Thanks Raymond!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031633">
				<div id="div-comment-1031633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031633">
			January 8, 2013 at 1:16 am</a>		</div>

		<p>@Evan: &quot;One more comment on &quot;inline&quot; for the moment.&quot;</p>
<p>I wasn&#39;t talking about &quot;inline&quot;, I was talking about &quot;__inline&quot; &#8211; which is MSVC specific and isn&#39;t required to adhere to C++ standards.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031663">
				<div id="div-comment-1031663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130107-00/?p=5633#comment-1031663">
			January 8, 2013 at 8:50 am</a>		</div>

		<p>@Matt:</p>
<p>I get that; I was just trying to say how the C++ standard basically necessitates a feature like selectany.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

