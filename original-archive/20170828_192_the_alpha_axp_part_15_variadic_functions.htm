<html>
<head>
<title>The Alpha AXP, part 15: Variadic functions</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The Alpha AXP, part 15: Variadic functions</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 28, 2017 / year-entry #193</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170828-00/?p=96895</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>1</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Keeping two sets of books that eventually become one.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
As noted in
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170807-00/?p=96766">
the initial plunge</a>,
the first six integer parameters are passed in registers,
and the first six floating point parameters are passed in a different
set of registers.
So
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170807-00/?p=96766#comment-1305835">
how does the callee known at function entry which registers to spill,
and in what order</a>?&sup1;
</p>
<p>
Answer: It doesn't. So it just spills everything.
</p>
<p>
First, a detail on the calling convention:
The first six parameters are passed in registers,
and if you pass a parameter in an integer register,
then the corresponding floating point register is unused,
and vice versa.
In other words:
</p>
<ul>
<li>
    The first parameter is passed in either <var>a0</var> or <var>f16</var>.
</li>
<li>
    The second parameter is passed in either <var>a1</var> or <var>f17</var>.
</li>
<li>&hellip;</li>
<li>
    The sixth parameter is passed in either <var>a5</var> or <var>f21</var>.
</li>
</ul>
<p>
On entry to a variadic function, the function spills all the
integer parameter registers onto the stack first,
and then spills the floating point parameter registers onto the stack
next.
The result is a stack that looks like this:
</p>
<table BORDER=0 STYLE="border-collapse: collapse"
       CELLPADDING=3 CLASS="cp3">
<tr>
<td ALIGN=center>&#x22ee;</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">param 10</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">param 9</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">param 8</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">param 7</td>
<td>&larr; stack pointer on function entry</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">integer param 6 (<var>a5</var>)</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">integer param 5 (<var>a4</var>)</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">integer param 4 (<var>a3</var>)</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">integer param 3 (<var>a2</var>)</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">integer param 2 (<var>a1</var>)</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">integer param 1 (<var>a0</var>)</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">floating point param 6 (<var>f21</var>)</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">floating point param 5 (<var>f20</var>)</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">floating point param 4 (<var>f19</var>)</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">floating point param 3 (<var>f18</var>)</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">floating point param 2 (<var>f17</var>)</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">floating point param 1 (<var>f16</var>)</td>
<td>&larr; stack pointer after spilling</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">local variable</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">local variable</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">local variable</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">local variable</td>
<td>&larr; stack pointer after prologue complete</td>
</tr>
</table>
<p>
The <code>va_list</code> type is a structure:
</p>
<pre>
typedef struct __va_list
{
  char* base;
  size_t offset;
} va_list;
</pre>
<p>
The <code>va_start</code> macro initializes
<code>base</code> to point to "integer param 1"
and <code>offset</code> to 8 &times; the number of non-variadic parameters.
</p>
<p>
If you invoke the <code>va_arg</code> macro with a non-floating point
type as the second parameter,
then it operates in an unsurprising manner:
It retrieves the data from <code>base + offset</code>
and then increases the <code>offset</code> by the size of the data
(rounded up to the nearest multiple of eight).
</p>
<p>
But invoking the <code>va_arg</code> macro with a floating point type
as the second parameter is weirder:
If the <code>offset</code> is less than 48, then
it retrieves the data from <code>base + offset - 48</code>,
resulting in a "reach-back" into the parallel array of spilled
floating point registers.
If the <code>offset</code> is greater than or equal to 48, then
it retrieves the data from <code>base + offset</code> as usual.
Regardless of where the data is read from,
the <code>offset</code> increases by the size of the data
(rounded up to the nearest multiple of eight).
</p>
<p>
The implementations of the <code>va_start</code>
and <code>va_arg</code> macros take advantage of special-purpose
compiler intrinsics that did a lot of the magic.
</p>
<p>
There are a few optimizations possible here.
For one thing, the compiler doesn't need to spill non-variadic
parameters,
though it does need to reserve space for them on the stack
so that the <code>va_arg</code> macro continues to work.&sup2;
Furthermore, if the compiler can observe that <code>va_arg</code>
is never invoked with a floating point type,
then it doesn't need to spill the floating point registers at all.
(Similarly, if <code>va_arg</code> is always invoked with floating
point types, then the integer registers don't need to be spilled.)
</p>
<p>
I don't remember whether the Microsoft compiler
actually implemented any of these optimizations.
</p>
<p>
&sup1;
It turns out that this question is not Alpha-specific.
It applies to any architecture that passes variadic parameters
differently depending on their type.
</p>
<p>
&sup2;
If the compiler can observe that <code>va_arg</code>
is never invoked with a floating point type,
then it doesn't even need to reserve space for the non-variadic parameters.
It can just point the <code>base</code> at where the first integer
parameter would have been, even though it now points into the local
variables.
Those local variables will never be read as parameters because the
initial <code>offset</code> skips over them.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (1)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-archangelpip even thread-even depth-1" id="comment-1307495">
				<div id="div-comment-1307495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170828-00/?p=96895#comment-1307495">
			August 28, 2017 at 9:03 am</a>		</div>

		<p>It is interesting seeing this and seeing how the x64 calling convention has evolved from this one. Like how the space for the first 4 parameters is allocated by the caller, and in the case of vararg functions, the floating point value will be duplicated in the corresponding position&#8217;s integer register too.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

