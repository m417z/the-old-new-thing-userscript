<html>
<head>
<title>Diversion: Generating a random color from JavaScript</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Diversion: Generating a random color from JavaScript</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 23, 2012 / year-entry #248</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>32</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A colleague posed a little puzzle for a fun little app he was writing in HTML: He wanted to generate a random color. If you search around the intertubes, you can find several possible attempts at a solution, like this collection, and an interesting example that has trouble with the pigeonhole principle. The original function...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A colleague posed a little puzzle for a fun little app he was
writing in HTML:
He wanted to generate a random color.
</p>
<p>
If you search around the intertubes,
you can find several possible attempts at a solution,
like
<a HREF="http://paulirish.com/2009/random-hex-color-code-snippets/">
this collection</a>,
and
<a HREF="http://www.namepros.com/code/37251-javascript-random-hex-color.html">
an interesting example that has trouble with the pigeonhole principle</a>.
</p>
<p>
The original function to generate a random color went like this:
</p>
<pre>
// Pad a string of up to two characters with a leading zero
// so the result is always exactly two characters long.
function padZero(v) {
 return (v.length == 1) ? '0' + v : v;
}

function randomColor() {
 return "#" + padZero(Math.floor(Math.random() * 256)).toString(16) +
              padZero(Math.floor(Math.random() * 256)).toString(16) +
              padZero(Math.floor(Math.random() * 256)).toString(16);
}
</pre>
<p>
Can you do better?
(My solution after the jump.)
</p>
<hr>
<p>
That was a short jump.
</p>
<p>
My first simplification was recognizing that three random 8-bit values
is the same as one random 24-bit value.
</p>
<pre>
function padZeros6(v) {
 while (v.length < 6) v = "0" + v;
 return v;
}

function randomColor() {
 return "#" + 
    padZeros6(Math.floor(Math.random() * 16777216).toString(16));
}
</pre>
<p>
Next, I got rid of the <code>padZeros6</code> function by
simply setting bit 25 to force a 7-digit result, then removing
the leading 1.
</p>
<pre>
function randomColor() {
 return "#" + 
    (Math.floor(Math.random() * 16777216) +
                                16777216).toString(16).substr(1);
}
</pre>
<p>
Finally, I did some factoring.
</p>
<pre>
function randomColor() {
 return "#" + 
    Math.floor((1 + Math.random()) * 16777216).toString(16).substr(1);
}
</pre>
<p>
That last bit was a bit dodgy due to the wonders of floating point
arithmetic, but hey, it's a puzzle now.
</p>
<p>
Finally, I realized that CSS supports <code>#rgb</code> as shorthand
for <code>#rrggbb</code>, so if you don't mind that your color
palette is reduced to 4096 colors (and in the case of my colleague's
little app, that was not an issue),
you can shorten it a bit more:
</p>
<pre>
function randomColor() {
 return "#" + 
    Math.floor((1 + Math.random()) * 4096).toString(16).substr(1);
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (32)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1017343">
				<div id="div-comment-1017343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017343">
			October 23, 2012 at 7:21 am</a>		</div>

		<p>Those samples in the first link belong on TheDailyWTF. &nbsp;It&#39;d be so much easier if JavaScript had a printf-style format function or operator. &nbsp;In Python, it&#39;d look something like this:</p>
<p>def randomColor(): return &quot;#%06x&quot; % random.randint(0, 16777216)</p>
<p>Or the Python 3-preferred way:</p>
<p>def randomColor(): return &quot;#{0:06x}&quot;.format(random.randint(0, 16777216))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017353">
				<div id="div-comment-1017353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MattT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017353">
			October 23, 2012 at 7:42 am</a>		</div>

		<p>You can also drop the Math.floor by noting that bitwise operators force an integer conversion. The smallest bitwise operator you can choose is OR 0. If you&#39;re looking for saving characters instead of saving operations, you can also drop the constant into a shift:</p>
<p>function randomColor() {</p>
<p>return &quot;#&quot;+((1+Math.random())*1&lt;&lt;24)|0).toString(16).substr(1);</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1017363">
				<div id="div-comment-1017363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017363">
			October 23, 2012 at 7:43 am</a>		</div>

		<p>Nice little 3-line function. But the real question is, is Math.Random() /truly/ random? My years developing high-grade crypto hardware makes me that it is not. (Nitpicking? Maybe.)</p>
<p>There&#39;s some discussion of Math.Random here: <a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/1062902/how-random-is-javascripts-math-random" rel="nofollow">stackoverflow.com/&#8230;/how-random-is-javascripts-math-random</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017373">
				<div id="div-comment-1017373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017373">
			October 23, 2012 at 7:52 am</a>		</div>

		<p>Brian_EE &nbsp;you develop HIGH level crypto hardware and don&#39;t know how random math.random is? scary</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1017383">
				<div id="div-comment-1017383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MattT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017383">
			October 23, 2012 at 7:56 am</a>		</div>

		<p>@BrianEE.</p>
<p>No. It&#39;s not truly random (by Cryptographic standards or by Quantum randomness standards). It&#39;s implementation defined how it actually works under the hood, but generally it&#39;s just a PRNG seeded by the system time (although in IE the seed is a 32-bit cryptographically random seed XORed with the PID and the process start time, so you have at least 32-bits of &quot;real&quot; randomness in the first call to Math.random() in the process).</p>
<p>Math.Random() is required to be random up to PRNG standards, that is to say that it should be loosely unpredictable, it should be evenly distributed over the range, and it should have a period substantially larger than the range.</p>
<p>Math.random() is NOT required (but also not forbidden) from being cryptographically random or quantumly random, so you should not rely on it being so.</p>
<p>Moral of the store: Don&#39;t use Random() for cryptographically important functions. (But you weren&#39;t doing that anyway, right?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017393">
				<div id="div-comment-1017393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017393">
			October 23, 2012 at 8:00 am</a>		</div>

		<p>@Brian</p>
<p>The link on stackoverflow you gave is about the randomness of digits scale, not the randomness of the numbers generated. As stated there by jwoolard answer 9/10 number will have the same number of digits. And to answer your question : NO. There is nothing, repeat nothing, in software that is truly random, everything is pseudo-random. If you need a true random generator you have to resort to a hardware generator to be your source (no matter if is quantifying the noise in a transistor gate or &quot;catching&quot; the background cosmic noise, courtesy of Big Bang)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1017423">
				<div id="div-comment-1017423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nandhp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017423">
			October 23, 2012 at 9:03 am</a>		</div>

		<p>Possibly I&#39;m missing the point, but I think the original code is actually broken.</p>
<p>&nbsp; &nbsp;padZero(Math.floor(Math.random() * 256)).toString(16)</p>
<p>will convert a zero-padded base-10 string to base 16 (assuming it works at all, since numbers have no length property). The closing parenthesis of padZero should be moved to the end for correct behavior.</p>
<div class="post">[<i>Yup, the paren should be outside. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017433">
				<div id="div-comment-1017433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017433">
			October 23, 2012 at 9:26 am</a>		</div>

		<p>Of course, this kind of algorithm will result in a lot of muddy gray and brown colors, since that makes up a large portion by &#39;volume&#39; of the sRGB colorspace. If I wanted to generate a &quot;random color&quot;, I&#39;d pick a random hue angle and use some sort of weighted probability for the S/V or S/L components.</p>
<p>&quot;Math.Random() is required to be random up to PRNG standards, that is to say that it should be loosely unpredictable, it should be evenly distributed over the range, and it should have a period substantially larger than the range.&quot;</p>
<p>IIRC, PRNGs in general are not guaranteed not to have multi-variable correlations (e.g. treating every three subsequent values as a coordinate gets you a set of point that&#39;s can&#39;t be outside of 11 possible planes).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1017443">
				<div id="div-comment-1017443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017443">
			October 23, 2012 at 9:26 am</a>		</div>

		<p>It&#39;s a random 24-bit (and later 12-bit) color being chosen on the client for use in CSS, why would it need to be securely random? It just needs to be reasonably unpredictable to a human.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017453">
				<div id="div-comment-1017453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MattT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017453">
			October 23, 2012 at 10:27 am</a>		</div>

		<p>@Random832:</p>
<p>I assume you&#39;re talking about the 15 possible planes in LCG(2^31, 65539, 0, 1), but yes, you&#39;re right &#8211; PRNGs don&#39;t have any guarantees about multi-variable analysis, other than the distance between consecutive numbers is non-linear.</p>
<p>Note that the limitation of LCG as a PRNG implementation is not systemic. Other PRNGs don&#39;t suffer this limitation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1017463">
				<div id="div-comment-1017463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017463">
			October 23, 2012 at 10:57 am</a>		</div>

		<p>Darn, I was hoping for a discussion of human sensitivity to different frequencies and intensities. &nbsp;For example, note that the colors of the form #0x0y0z look very much more similar to each other than do the corresponding colors #x0y0z0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017473">
				<div id="div-comment-1017473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017473">
			October 23, 2012 at 11:06 am</a>		</div>

		<p>When I first saw &quot;can you do better&quot;, I immediately started thinking along Random832&#39;s line of thinking: pick a random hue, etc.</p>
<p>Then I figured that maybe you just wanted a way to simplify the given method, which led me thinking along the same lines as you. I just came up with a different way to implement padding:</p>
<p>return &quot;#&quot; + (&quot;00000&quot; + Math.floor(Math.random() * 16777216).toString(16)).slice(-6);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1017483">
				<div id="div-comment-1017483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017483">
			October 23, 2012 at 11:11 am</a>		</div>

		<p>I&#39;d probably just do something simple like:</p>
<p>function randomColor() {</p>
<p>____var color = &quot;#&quot;;</p>
<p>____for (var i = 1; i &lt;= 6; i++) {</p>
<p>________color += Math.floor(Math.random() * 16).toString(16);</p>
<p>____}</p>
<p>____return color;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 odd alt thread-odd thread-alt depth-1" id="comment-1017493">
				<div id="div-comment-1017493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017493">
			October 23, 2012 at 11:46 am</a>		</div>

		<p>function randomColor(){</p>
<p>&nbsp; &nbsp; return &quot;#000004&quot; // chosen by fair dice roll</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// guaranteed to be random</p>
<p>}</p>
<p>Well somebody had to do it&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1017513">
				<div id="div-comment-1017513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017513">
			October 23, 2012 at 1:13 pm</a>		</div>

		<p>@AndyCadley &#8211; You should always give xkcd credit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017523">
				<div id="div-comment-1017523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TomC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017523">
			October 23, 2012 at 1:15 pm</a>		</div>

		<p>If you only need good enough you could probably get away with this:</p>
<p>return &quot;#&quot;+new Date().getTime().toString(16).slice(-3);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1017533">
				<div id="div-comment-1017533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tod</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017533">
			October 23, 2012 at 2:33 pm</a>		</div>

		<p>Too complicated, not good enough for enterprise usage. I&#39;d use HTML5 technologies to outsource the problem to some SaaS solution running on the cloud, to promote an agile development process and leverage the synergy between function prosumers and bleeding-edge platform providers.</p>
<p>Of course the server would be written in node.js, so I&#39;d need to use one of those things too, but that&#39;s just an implementation detail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017543">
				<div id="div-comment-1017543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sugendran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017543">
			October 23, 2012 at 2:51 pm</a>		</div>

		<p>The only problem with that implementation is that you&#39;re going to end up with the colour of mud a lot of the time. If you want to pick a random colour that is pleasing then you probably want to use the HSV approach (<a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/HSV_color_space" rel="nofollow">en.wikipedia.org/&#8230;/HSV_color_space</a>) where you limit the desaturation and value layers so that you always end up with a vibrant colour. Or if your mood ring is a bit cold then a sad colour that is not mostly grey.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1017403">
				<div id="div-comment-1017403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017403">
			October 23, 2012 at 8:04 am</a>		</div>

		<p>@Anon &#8211; Not sure if you are baiting, but why would I know whether a javascript library software is truly random? I can assure you that high-grade crypto hardware does not run any JS whatsoever. Go learn about TRUE random number generators &#8211; i.e. custom chips with a high number of asynchronous ring oscillators (each a different length/frequency) that are summed together. These chips go through extensive testing and characterization to get &lt;govt agency&gt; approvals.</p>
<p>Back on topic, as a part-time web developer, I can see Ray&#39;s function as useful for a banner &amp; button generating site. Something where you only need the *perception* of random.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017553">
				<div id="div-comment-1017553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017553">
			October 23, 2012 at 3:19 pm</a>		</div>

		<p>@The MAZZTer has it right, don&#39;t bother with trying to make a hex number and just write out an rgb()-style color triplet. They&#39;re supported by every browser (even IE6!) to there&#39;s no real drawback to using them.</p>
<p>That&#39;s what I&#39;ve always done in the past for dynamic colors via JavaScript.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1017413">
				<div id="div-comment-1017413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017413">
			October 23, 2012 at 8:23 am</a>		</div>

		<p>My contribution:</p>
<p>function randomColor(includeAlpha) {</p>
<p> &nbsp;return &quot;rgba(&quot; + Math.floor(Math.random() * 256) + &quot;, &quot; + Math.floor(Math.random() * 256) + &quot;, &quot; + Math.floor(Math.random() * 256) + &quot;, &quot; + (includeAlpha ? Math.random() : 1) + &quot;)&quot;;</p>
<p>}</p>
<p>Yeah yeah I took all the hexadecimal fun out of it. &nbsp;rgb(rr, gg, bb) syntax is also valid, btw.</p>
<p>@Adam not really much of a WTF. &nbsp;Although Raymond&#39;s solution of 0 padding by adding and them removing an extra digit is a bit odd, though it might be nicer than padding manually it&#39;s also more difficult to read without a comment to help.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017563">
				<div id="div-comment-1017563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Enterprise Rube G</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017563">
			October 23, 2012 at 3:24 pm</a>		</div>

		<p>@AndyCadley. Yup.</p>
<p>And that&#39;s probably the shortest and most time efficient way of generating a random number on the client computer. The only problem is that it fails to perform very well for more than 1 page load, and is downright out for more than 2. One obvious fix would be to have the javascript come from the server when the page is loaded. The server-side would invoke a C++ program that builds and outputs the javascript function. Why C++? Well because template metaprogramming would be used to dynamically generate the hard-coded random number of course. So the server-side program would first run a C++ toolchain, then use the resulting program to generate the javascript. As a pre-build step, the C++ project might need to generate a seed to use for the TMP code. One obvious solution would be to run a program that changes the system clock to a random value so that <strong>TIME</strong> could be the seed. This would imply that only one page at a time could be</p>
<p>generated to web clients (to avoid duplicate seeds), but this bottleneck could be ameliorated by having the compilation done &#39;before-hand&#39;. (ie: have a dedicated server farm or cloud that constantly runs the C++ step, so that the web-server-side script or whatever would just grab a pre-built executable then delete it once done (this is the only part that would have to be done inside a lock).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1017573">
				<div id="div-comment-1017573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henry Skoglund</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017573">
			October 23, 2012 at 4:15 pm</a>		</div>

		<p>function randomColor() {</p>
<p>return &quot;#&quot; +</p>
<p>&nbsp; &nbsp; Math.random().toString(16).substr(-6);</p>
<p>}</p>
<p>Note: negative start numbers in substr() requires IE9 or later.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017593">
				<div id="div-comment-1017593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017593">
			October 23, 2012 at 8:49 pm</a>		</div>

		<p>Tod, you&#39;re on The Old New Thing, not The Daily Worse Than Failure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1017603">
				<div id="div-comment-1017603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Engywuck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017603">
			October 23, 2012 at 10:38 pm</a>		</div>

		<p>and while the original version was easily understandable ven for the layman the final version needs an added comment so you know why it works. As if JS wasn&#39;t easily enough obfuscated without even trying&#8230;</p>
<p>on another note: while the original version got three (most likely consecutive) numbers the other versions just get one. So the &quot;randomness&quot; of the resulting color (and additionally the &quot;randomness&quot; of all generated colors if more than one is needed) changes, depending on implementation of the PRNG. Of course, in a perfect RNG this would not matter, but&#8230; :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017613">
				<div id="div-comment-1017613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Tod</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017613">
			October 24, 2012 at 12:49 am</a>		</div>

		<p>I agree, simplicity is the key to success. ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1017633">
				<div id="div-comment-1017633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017633">
			October 24, 2012 at 3:28 am</a>		</div>

		<p>You could replace(!) &quot;#&quot; + str.substr(1) with str.replace(/./, &quot;#&quot;).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017643">
				<div id="div-comment-1017643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon E Moose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017643">
			October 24, 2012 at 6:34 am</a>		</div>

		<p>@Henry</p>
<p>That won&#39;t work. &nbsp;The random number could be &quot;0.1&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1017673">
				<div id="div-comment-1017673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017673">
			October 24, 2012 at 9:06 am</a>		</div>

		<p>Just for fun I looked up the ECMAScript specification for Math.random():</p>
<p>&#8212; begin quote &#8212;</p>
<p>15.8.2.14 &nbsp;random ( )</p>
<p>Returns a Number value with positive sign, greater than or equal to 0 but less than 1, chosen randomly or pseudo randomly with approximately uniform distribution over that range, using an implementation-dependent algorithm or strategy. This function takes no arguments.</p>
<p>&#8212; end quote &#8212;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1017733">
				<div id="div-comment-1017733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017733">
			October 24, 2012 at 12:14 pm</a>		</div>

		<p>@sugendran: Dang you, I followed the link you gave to the Wikipedia article, then followed its footnotes to some fascinating documents that I skimmed and downloaded to read later. &nbsp;More stuff to do. &nbsp;It&#39;s all your fault. &nbsp;:-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1017773">
				<div id="div-comment-1017773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leonardo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1017773">
			October 24, 2012 at 10:28 pm</a>		</div>

		<p>&nbsp; &nbsp;function randomColor() {</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;return &quot;#444&quot;; // Chosen by fair dice rolls.</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Guaranteed to be random.</p>
<p>&nbsp; &nbsp;}</p>
<p><a rel="nofollow" target="_new" href="http://xkcd.com/221/" rel="nofollow">http://xkcd.com/221/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1018113">
				<div id="div-comment-1018113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121023-00/?p=6273#comment-1018113">
			October 27, 2012 at 5:47 am</a>		</div>

		<p>return &quot;peachpuff&quot;;</p>
<p>My friends all agree that &quot;peachpuff&quot; is quite a random color.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

