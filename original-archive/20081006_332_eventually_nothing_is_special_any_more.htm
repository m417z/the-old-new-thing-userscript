<html>
<head>
<title>Eventually, nothing is special any more</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Eventually, nothing is special any more</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 6, 2008 / year-entry #333</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter ulric suggested that two functions for obtaining the "current" window should exist, one for normal everyday use and one for "special use" when you want to interact with windows outside your process. I'd be more at ease however if the default behaviour of the API was to return HWND for the current process only,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Commenter ulric suggested that <a href="http://blogs.msdn.com/oldnewthing/archive/2007/07/27/4072156.aspx#4112818"> two functions for obtaining the "current" window should exist</a>, one for normal everyday use and one for "special use" when you want to interact with windows outside your process.</p>
<blockquote class="q"><p> I'd be more at ease however if the default behaviour of the API was to return HWND for the current process only, and the apps that really need HWND from other potentially other processes would have to be forced to use another API that is specifically just for that. </p>
</blockquote>
<p> This is an excellent example of <a href="http://blogs.msdn.com/oldnewthing/archive/2007/04/03/2014992.aspx#2035078"> suggesting something that Windows already does</a>. The special function has become so non-special, you don't even realize any more that it's special. </p>
<p> Originally, in 16-bit Windows, the function for getting the "current" window was <code>GetActiveWindow</code>. This obtained the active window across the entire system. One of the major changes in Win32 is the asynchronous input model, wherein windows from different input queues receive separate input. That way, one program that has stopped responding to input doesn't clog up input for other unrelated windows. Win32 changed the meaning of <code>GetActiveWindow</code> to mean <i>the active window from the current input queue</i>. </p>
<p> In 16-bit Windows, there was only one input queue, the global one. In 32-bit Windows, each thread (or group of input-attached threads) gets its own input queue. </p>
<p> As a result of this finer granularity, when a program was ported from 16-bit Windows to 32-bit Windows, it didn't "see" windows from other programs when it called functions like <code>GetFocus</code> or <code>GetActiveWindow</code>. <a href="https://channel9.msdn.com/Showpost.aspx?postid=116704"> As every Win32 programmer should know</a>, these states are local to your input queue. </p>
<p> Okay, let's look at what we've got now. <code>GetFocus</code> and <code>GetActiveWindow</code> give you the status of your input queue. In other words, in a single-threaded program (which, if you're coming from 16-bit Windows, is the only type of program there is), calling <code>GetActiveWindow</code> gives you the active window from your program. It doesn't return the active window from another program.&sup1; Things are exactly as ulric suggested! </p>
<p> Now let's look at the second half of the suggestion. If a program really needs to get a window from potentially other processes, it would have to use some other function that is specifically just for that. And indeed, that's why the <code>GetForegroundWindow</code> function was added. The <code>GetForegroundWindow</code> function is <i>the special function specifically designed for obtaining windows from other processes</i>. </p>
<p> Therefore, we did exactly what ulric recommended, and it still turned into a mess. Why? </p>
<p> Because once you create something special, it doesn't remain special for long. </p>
<p> It may take a while, but eventually people find that the regular function "doesn't work" (for various definitions of "work"), and they ask around for help. "When I call <code>GetActiveWindow</code>, I'm not getting the global active window; I'm just getting the local one. How do I get the global one?" Actually, they probably don't even formulate the question that clearly. It's probably more like "I want to get the active window, but <code>GetActiveWindow</code> doesn't work." </p>
<p> And then somebody responds with "Yeah, <code>GetActiveWindow</code> doesn't work. I've found that <code>GetForegroundWindow</code> works a lot better." </p>
<p> The response is then "Wow, that works great! Thanks!" </p>
<p> Eventually, the word on the street is "<code>GetActiveWindow</code> doesn't work. Use <code>GetForegroundWindow</code> instead." Soon, people are using it for everything, waxing their car, calming a colicky baby, or improving their sexual attractiveness. </p>
<p> What used to be a function to be used "only in those rare occasions when you really need it" has become "the go-to function that gets the job done." </p>
<p> In fact, the unfashionableness of the active window has reached the point that people have given up on calling it the active window at all! Instead, they call it <a href="http://blogs.msdn.com/oldnewthing/archive/2008/09/22/8960761.aspx#8961210"> the foreground window from the current process</a>. It's like calling a land line a "wired cell phone". </p>
<p> <a href="http://blogs.msdn.com/oldnewthing/archive/2007/07/27/4072156.aspx#4133892"> Requiring a new flag to get the special behavior</a> doesn't change things at all. It's the same story, just with different names for the characters. "<code>GetFocalWindow</code>&sup2; doesn't work unless you pass the <code>GFW_CROSSPROCESS</code> flag." Soon, everybody will be passing the <code>GFW_CROSSPROCESS</code> not because they understand what it does but just because "That's what I was told to do" and "It doesn't work if I don't pass it." </p>
<p> <b>Footnotes</b> </p>
<p> &sup1;Assuming you haven't run around attaching your thread to some other program's input queue. This is a pretty safe assumption since the <code>AttachThreadInput</code> function didn't exist in 16-bit Windows either. </p>
<p> &sup2;<code>GetFocalWindow</code> is an imaginary function created for the purpose of the example. </p>
<p> [Raymond is currently away; this message was pre-recorded.] </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-673423">
				<div id="div-comment-673423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673423">
			October 6, 2008 at 1:34 pm</a>		</div>

		<p>HWND GetActiveForegroundWindowEx2(BOOL bSpecial)</p>
<p>{</p>
<p>&nbsp; &nbsp;if(bSpecial)</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;return GetForegroundWindow();</p>
<p>&nbsp; &nbsp;}</p>
<p>&nbsp; &nbsp;else</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;return GetActiveWindow();</p>
<p>&nbsp; &nbsp;}</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673433">
				<div id="div-comment-673433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673433">
			October 6, 2008 at 2:09 pm</a>		</div>

		<p>@John: That was a joke, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk even thread-even depth-1" id="comment-673463">
				<div id="div-comment-673463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673463">
			October 6, 2008 at 3:08 pm</a>		</div>

		<p>You&#8217;re right, of course, about the &quot;passing a special flag&quot; solution not being effective in real life. &nbsp;</p>
<p>In a perfect world, a flag called &quot;DontUseThisUnlessYouReallyNeedToAndYouKnowWhatYoureDoingAndYouHaveReadTheDocFirst&quot; would actually work and not be abused.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673473">
				<div id="div-comment-673473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673473">
			October 6, 2008 at 3:27 pm</a>		</div>

		<p>Who said programs have only a single thread and a single input queue? &nbsp;In normal circumstances, GetActiveWindow() only returns the current thread&#8217;s active window. If you use mutliple threads, you are SOL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673483">
				<div id="div-comment-673483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673483">
			October 6, 2008 at 4:08 pm</a>		</div>

		<p>&lt;chills&gt; I&#8217;m really going to have to start watching what I say :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673493">
				<div id="div-comment-673493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.tpasoft.com' rel='external nofollow' class='url'>Kevin Provance</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673493">
			October 6, 2008 at 4:09 pm</a>		</div>

		<p>I got all excited there for a sec. &nbsp;GetFocalWindow?? &nbsp;I was like, &quot;wow, what&#8217;s this new thing I&#8217;ve never heard about??&quot; &nbsp;And then I saw the footnote. &nbsp;Day ruined. &nbsp;Thanks Raymond. &nbsp;&lt;g&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673503">
				<div id="div-comment-673503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673503">
			October 6, 2008 at 4:41 pm</a>		</div>

		<p>In the end, it all boils down to a cargo cult programming. Get this example from the web or from MSJ, fudge it till it does what you want, voila. No need to read the docs and learn something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673523">
				<div id="div-comment-673523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673523">
			October 6, 2008 at 5:55 pm</a>		</div>

		<p>@Josh:</p>
<p>Obviously :)</p>
<p>@Ben:</p>
<p>True, but I don&#8217;t think there is much of a use case for this scenario.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-673533">
				<div id="div-comment-673533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673533">
			October 6, 2008 at 5:57 pm</a>		</div>

		<p>Methinks Ben needs to read the WHOLE post&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673553">
				<div id="div-comment-673553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673553">
			October 6, 2008 at 6:54 pm</a>		</div>

		<p>&#8216;It&#8217;s like calling a land line a &quot;wired cell phone&quot;&#8217;</p>
<p>You might be surprised at how many software developers say &quot;forward backslash.&quot; There are at least two, enough to surprise the heck out of me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673563">
				<div id="div-comment-673563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hexatron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673563">
			October 6, 2008 at 8:37 pm</a>		</div>

		<p>Of course, all this is made thoroughly opaque by the documentation of these functions.</p>
<p>GetForegroundWindow:</p>
<p>The GetForegroundWindow function returns a handle to the foreground window (the window with which the user is currently working). The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads.</p>
<p>GetActiveWindow:</p>
<p>The GetActiveWindow function retrieves the window handle to the active window attached to the calling thread&#8217;s message queue.</p>
<p>Perhaps not the clearest possible distinction&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673573">
				<div id="div-comment-673573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673573">
			October 7, 2008 at 4:29 am</a>		</div>

		<p>This is why getting full, unambiguous documentation for functions out there in good time is so important.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673583">
				<div id="div-comment-673583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.bitvise.com/' rel='external nofollow' class='url'>denis bider</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673583">
			October 7, 2008 at 4:47 am</a>		</div>

		<p>This is an example of poor naming. Functionality tends not to be abused as much if it is named appropriately.</p>
<p>Instead of silently modifying the behavior of GetActiveWindow(), it should have been deprecated and replaced with something like GetOwnActiveWindow() and GetGlobalActiveWindow().</p>
<p>This would have made things much clearer to users, and would embed a pointer that would help people understand &lt;i&gt;why&lt;/i&gt; one function &quot;works better&quot; in some circumstances than the other.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673593">
				<div id="div-comment-673593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Levine</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673593">
			October 7, 2008 at 6:03 am</a>		</div>

		<p>Here&#8217;s the documentation for GetActiveWindow()&#8230;</p>
<p>&quot;Return Value</p>
<p>The return value is the handle to the active window attached to the calling thread&#8217;s message queue. Otherwise, the return value is NULL. &quot;</p>
<p>There&#8217;s a lot of interpretation and knowledge required to go from that to the understanding that Raymond has of its behavior; several additional lines of explanation would go a long way. The world outside Redmond did not write Windows and we do not have access to the source code; we should not be required to be insiders to write correct code to the Windows API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673603">
				<div id="div-comment-673603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kL</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673603">
			October 7, 2008 at 7:55 am</a>		</div>

		<p>In Cocoa Apple solved this problem by making it so incredibly awkward to get system-wide frontmost window (you need old carbon calls or&#8230; AppleScript!), that people give up and just use API for getting current process&#8217; frontmost/key window :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673613">
				<div id="div-comment-673613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe Butler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673613">
			October 7, 2008 at 8:17 am</a>		</div>

		<p>The problem seems to be a case of people picking the first function that &#8216;sounds&#8217; like it might do what they are looking for &#8211; without first reviewing the total set of window-related functions. &nbsp;If they discover a function called GetForgroundWindow() and imagine, or more likely, hope this is what they wanted without exploring further then they are simply poor developers. &nbsp;Whatever Microsoft choose to do, these people are going to screw something up at some point and we&#8217;ll have a handful of people with hindsight saying, well of course Microsoft shouldn&#8217;t have called it CreateWindow(), they should have called it AttemptToCreateWindowButSomethingMightHappenToPreventSuccess_Remarks_SeeAlso_AttemptToCreateWindowButSomethingMightHappenToPreventSuccessEx()</p>
<p>There are a few commentators here that seem to think it&#8217;s the documentation&#8217;s fault that people get it wrong, but I think if someone looks at a function called GetActiveWindow() and GetForegroundWindow() and then sees the documentation has different descriptions, and the remarks section of one refers to a case where you would want to use the other, but can&#8217;t be bothered to understand the distinction, then it is down to the programmer who decided to use the first function they find with an sort of right sounding name.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673633">
				<div id="div-comment-673633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673633">
			October 7, 2008 at 10:42 am</a>		</div>

		<p>@Duke of New York: That&#8217;s even worse than &quot;Backward Backslash&quot;, which would at least be correct.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673663">
				<div id="div-comment-673663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673663">
			October 7, 2008 at 12:54 pm</a>		</div>

		<p>Dean: I&#8217;m missing something then. &nbsp;Each thread gets its own input queue (you can attach them, but that isn&#8217;t always acceptable). &nbsp;Per Raymond, GetActiveWindow() returns the &quot;active&quot; window for the current input queue. &nbsp;</p>
<p>The implication is that if the program has multiple input queues, it won&#8217;t return the &quot;topmost window in my process&quot;. &nbsp;Rather, it returns the topmost window on the current thread.</p>
<p>Did I miss something?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673713">
				<div id="div-comment-673713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673713">
			October 7, 2008 at 3:57 pm</a>		</div>

		<p>Hooray for cargo cult programming!</p>
<p>Forget wasting time understanding what you&#8217;re doing! Just try random stuff until it &quot;seems&quot; to work, or ask other kids on the net what they&#8217;ve found &quot;seems&quot; to work!</p>
<p>Fortunately, ${NEW_TECHNOLOGY} (be it Java or Python or C# or whatever) is so amazing and easy to use that anyone can write perfect code, and thus will be immune to all the mistakes that were the fault of ${OLD_TECHNOLOGY}.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673723">
				<div id="div-comment-673723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673723">
			October 7, 2008 at 4:12 pm</a>		</div>

		<p>Most bad programming practices are language-independent.</p>
<p>In the end, bad programmers always win!</p>
<p>Yipee!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673683">
				<div id="div-comment-673683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673683">
			October 7, 2008 at 1:43 pm</a>		</div>

		<p>It&#8217;s not really relevant that GetActiveWindow only returns it for the current thread. </p>
<p>The vast majority of application only have one thread. &nbsp;Generally the multithreaded app do all UI in a single UI thread. &nbsp;Furthermore, generally anyone that wants to know the active window would be doing it from the same thread, anyway. &nbsp;Making an app that uses multiple UI threads is *very* complicated and very much an edge case &#8211; and I&#8217;ve worked on huge video editing and 3D CAD applications.</p>
<p>I do agree with some comments above that GetForegroundWindow could have had a better name that implies when you see it that it returns windows that may not belong to you. &nbsp;It could have used another name or returned the process handle to imply it, etc. It&#8217;s a reasonable suggestion &#8212; though of course it&#8217;s too late now :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-673773">
				<div id="div-comment-673773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673773">
			October 8, 2008 at 12:26 am</a>		</div>

		<p>Ulric, generally apps that do UI in multiple threads are like Explorer or IE in that they show separate, unrelated windows with each thread. Indeed, I&#8217;ve written one myself. In these cases, each thread would only want its own active window.</p>
<p>It&#8217;s hard to imagine a scenario where a process has multiple UI threads and needs one to find another&#8217;s active window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-673853">
				<div id="div-comment-673853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-673853">
			October 8, 2008 at 11:45 am</a>		</div>

		<p>MS could change the behaviour of GetForegroundWindow() so that it returned NULL unless the application was on an administrator approved list of &quot;apps allowed to wrest control of the UI away from the end-user&quot;.</p>
<p>But then someone would post some code to the web that added your app to this list at install time. Still, at least a vigilant end-user could remove it afterwards.</p>
<p>But then, your app would crash and your product support team would tell the end-users &quot;What do you expect? You broke our installation!&quot;.</p>
<p>Gosh that&#8217;s a depressing train of thought. Is that the sort of stuff the Windows team have to think about every day? How do they stay sane? Why don&#8217;t they all just end up as axe-wielding homocidal maniacs bent on the grizzly extermination of all &quot;application programmers&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-674023">
				<div id="div-comment-674023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://grayraven.com/JimNtexas' rel='external nofollow' class='url'>Jim Howard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-674023">
			October 8, 2008 at 2:39 pm</a>		</div>

		<p>These api&#8217;s usually come up when management tells the windows developer that our application must pop up on top and seize control of the mouse and keyboard from all other processes, because we&#8217;re so special.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-674773">
				<div id="div-comment-674773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eleccham.valleyhold.org' rel='external nofollow' class='url'>Gordon Schumacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081006-00/?p=20643#comment-674773">
			October 11, 2008 at 10:52 am</a>		</div>

		<p>Required caveat: I am not MS-bashing here; I am well aware of how hard a task is at hand, and *nobody* does it right. &nbsp;MS has kept a remarkably consistent API over the years. &nbsp;That is to say &#8211; &quot;all software sucks, all hardware sucks&quot;&#8230;</p>
<p>@Ken Hagan:</p>
<p>&quot;Gosh that&#8217;s a depressing train of thought. Is that the sort of stuff the Windows team have to think about every day? How do they stay sane? Why don&#8217;t they all just end up as axe-wielding homocidal maniacs bent on the grizzly extermination of all &quot;application programmers&quot;?&quot;</p>
<p>Probably because they realize that there&#8217;s an equal proportion of potential axe-wielding homicidal maniacs bent on the grisly extermination of &quot;those guys who keep changing the rules for Win32 programming&quot;&#8230; and that there are more of them than there are Microsoft employees&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

